var Tangerine;Tangerine={locales:{}};


var ResultOfGrid,ResultOfMultiple,ResultOfPrevious,ResultOfQuestion,Robbert,Tangerine,TangerineTree,Utils,i,km,sks,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function n(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty,indexOf=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(e in this&&this[e]===t)return e;return-1},slice=[].slice;Backbone.EditView=function(t){function e(){return this.editing=bind(this.editing,this),this.editInPlace=bind(this.editInPlace,this),this.getEditable=bind(this.getEditable,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.events={"click .edit_in_place":"editInPlace","focusout .editing":"editing","keyup    .editing":"editing","keydown  .editing":"editing"},e.prototype.getEditable=function(t){var e,n,r,i,o,s;return r=t.model,e=t.attribute,i=t.name||"Value",o=t.placeholder||"none",s=t.prepare,null==this.preparations&&(this.preparations={}),null==this.preparations[r.id]&&(this.preparations[r.id]={}),this.preparations[r.id][e.key]=s,null==this.htmlGenCatelog&&(this.htmlGenCatelog={}),null==this.htmlGenCatelog[r.id]&&(this.htmlGenCatelog[r.id]={}),this.htmlGenCatelog[r.id][e.key]=n=function(t,e,n,r){return function(){var i,o,s,u,a,l,c,d;return s=e.key,o=e.escape,l=e.type||"",d=t.has(s)?t.get(s):r,_(d).isEmptyString()&&(d=r),o&&(d=_(d).escape()),d===r&&(c=" data-untitled='true' "),i=e.editable&&"server"===Tangerine.settings.get("context")?"class='edit_in_place'":"",u=_.isNumber(d)?"data-is-number='true'":"data-is-number='false'",a="<div class='edit_in_place "+s+"-edit-in-place' id='"+t.id+"-"+s+"'><span data-model-id='"+t.id+"' data-type='"+l+"' data-key='"+s+"' data-value='"+d+"' data-name='"+n+"' "+i+" "+u+" "+(c||"")+">"+d+"</span></div>"}}(r,e,i,o),n()},e.prototype.editInPlace=function(t){var e,n,r,i,o,s,u,a,l,c,d,f,p,h,g,m;if(!this.alreadyEditing&&(this.alreadyEditing=!0,n=$(t.target),e=n.parent(),!n.hasClass("editing")))return s=Utils.guid(),a=n.attr("data-key"),f=n.attr("data-name"),m=n.attr("data-type"),u="true"===n.attr("data-is-number"),d=n.attr("data-model-id"),c=this.models.get(d),p=c.get(a)||"","true"===n.attr("data-untitled")&&(p=""),r=$(t.target),o=(r.attr("class")||"").replace("settings",""),l=r.css("margin"),g="data-is-number='"+u+"' data-key='"+a+"' data-model-id='"+d+"' ",h=1+p.count("\n"),h=parseInt(Math.max(p.length/30,h)),e.html("<textarea placeholder='"+f+"' id='"+s+"' rows='"+h+"' "+g+" class='editing "+o+" "+a+"-editing' style='margin:"+l+"' data-name='"+f+"'>"+p+"</textarea>"),i=$("#"+s),i.select()},e.prototype.editing=function(t){var e,n,r,i,o,s,u,a,l,c,d,f,p,h,g,m,v,y;if(13===t.which&&"keyup"===t.type)return!1;if(n=$(t.target),e=n.parent(),c=n.attr("data-key"),l="true"===n.attr("data-is-number"),p=n.attr("data-model-id"),h=n.attr("data-name"),f=this.models.get(p),m=f.get(c),g=n.val(),g=l?parseInt(g):g,27===t.which||"focusout"===t.type)return this.$el.find("#"+p+"-"+c).html("function"==typeof(o=this.htmlGenCatelog[p])[c]?o[c]():void 0),void(this.alreadyEditing=!1);if(d="keydown"===t.type,a=13===t.which,r=t.altKey,a&&r)return!0;if(!a||!d)return!0;if(this.alreadyEditing=!1,String(g)!==String(m)){if(i={},i[c]=g,null!=(null!=(v=this.preparations)&&null!=(y=v[p])?y[c]:void 0))try{i[c+"-cooked"]=this.preparations[p][c](g)}catch(b){return u=b,void Utils.sticky("Problem cooking value<br>"+u.message)}f.save(i,{success:function(t){return function(){var e;return Utils.topAlert(h+" saved"),t.$el.find("#"+p+"-"+c).html("function"==typeof(e=t.htmlGenCatelog[p])[c]?e[c]():void 0)}}(this),error:function(t){return function(){return alert("Please try to save again, it didn't work that time."),t.render()}}(this)})}else this.$el.find("#"+p+"-"+c).html("function"==typeof(s=this.htmlGenCatelog[p])[c]?s[c]():void 0);return!1},e}(Backbone.View),Backbone.ChildModel=function(t){function e(){return this.save=bind(this.save,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.save=function(t,e){return null==e&&(e={}),null==e.success&&(e.success=$.noop),null==e.error&&(e.error=$.noop),this.set(t),e.childSelf=this,this.parent.childSave(e)},e}(Backbone.Model),Backbone.ChildCollection=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e}(Backbone.Collection),Backbone.ParentModel=function(t){function e(t){this.childSave=bind(this.childSave,this),this.newChild=bind(this.newChild,this),this.updateCollection=bind(this.updateCollection,this),this.collection=new this.ChildCollection,this.collection.on("remove",function(t){return function(){return t.updateAttributes()}}(this)),e.__super__.constructor.call(this,t)}return extend(e,t),e.prototype.Child=null,e.prototype.ChildCollection=null,e.prototype.getLength=function(){return this.collection.length||this.attributes.children.length},e.prototype.fetch=function(t){var n;return n=t.success,delete t.success,t.success=function(t){return function(e,r,i){var o,s,u,a,l,c;for(u=[],c=t.getChildren(),a=0,l=c.length;a<l;a++)o=c[a],s=new t.Child(o),s.parent=t,u.push(s);return t.collection.reset(u),t.collection.sort(),n(e,r,i)}}(this),e.__super__.fetch.call(this,t)},e.prototype.getChildren=function(){return this.getArray("children")},e.prototype.updateAttributes=function(){var t,e,n,r,i;for(this.attributes.children=[],r=this.collection.models,i=[],t=0,e=r.length;t<e;t++)n=r[t],i.push(this.attributes.children.push(n.attributes));return i},e.prototype.updateCollection=function(){return this.collection.reset(this.attributes.children),this.collection.each(function(t){return function(e){return e.parent=t}}(this))},e.prototype.newChild=function(t,e){var n;return null==t&&(t={}),n=new this.Child,n.set("_id",Utils.guid()),n.parent=this,this.collection.add(n,e),n.save(t,{success:function(t){return function(){}}(this)})},e.prototype.childSave=function(t){var e;return null==t&&(t={}),e=t.success,delete t.success,t.success=function(n){return function(n,r,i){return e.apply(t.childSelf,[n,r,i])}}(this),this.updateAttributes(),this.save(null,t)},e}(Backbone.Model),ResultOfQuestion=function(t){var e,n,r,i,o,s;for(s=null,n=vm.currentView.orderMap[vm.currentView.index],o=vm.currentView.subtestViews[n].prototypeView.questionViews,r=0,i=o.length;r<i;r++)e=o[r],e.model.get("name")===t&&(s=e);if(null===s)throw new ReferenceError("ResultOfQuestion could not find variable "+t);return s.answer?s.answer:null},ResultOfMultiple=function(t){var e,n,r,i,o,s,u,a,l,c;for(l=null,n=vm.currentView.orderMap[vm.currentView.index],s=vm.currentView.subtestViews[n].prototypeView.questionViews,r=0,o=s.length;r<o;r++)e=s[r],e.model.get("name")===t&&(l=e);if(null===l)throw new ReferenceError("ResultOfQuestion could not find variable "+t);a=[],u=l.answer;for(i in u)c=u[i],"checked"===c&&a.push(i);return a},ResultOfPrevious=function(t){return vm.currentView.result.getVariable(t)},ResultOfGrid=function(t){return vm.currentView.result.getItemResultCountByVariableName(t,"correct")},Tangerine=null!=Tangerine?Tangerine:{},Tangerine.onBackButton=function(e){return"assessment run"===Tangerine.activity?!!confirm(t("NavigationView.message.incomplete_main_screen"))&&(Tangerine.activity="",window.history.back()):window.history.back()},Backbone.View.prototype.close=function(){return this.remove(),this.unbind(),"function"==typeof this.onClose?this.onClose():void 0},Backbone.Collection.prototype.indexBy=function(t){var e,n,r,i,o,s;for(s={},o=this.models,e=0,r=o.length;e<r;e++)i=o[e],i.has(t)&&(n=i.get(t),null==s[n]&&(s[n]=[]),s[n].push(i));return s},Backbone.Collection.prototype.indexArrayBy=function(t){var e,n,r,i,o,s;for(s=[],o=this.models,e=0,r=o.length;e<r;e++)i=o[e],i.has(t)&&(n=i.get(t),null==s[n]&&(s[n]=[]),s[n].push(i));return s},Backbone.Model.prototype.conform=function(t){var e,n,r;if(null==t&&(t={}),_.isEmpty(t))throw"Cannot conform to empty standard. Use @clear() instead.";n=[];for(e in t)r=t[e],this.has(e)||""===this.get(e)?n.push(this.set(e,r())):n.push(void 0);return n},Backbone.Model.prototype.prune=function(t){var e,n,r,i;if(null==t&&(t={}),_.isEmpty(standard))throw"Cannot conform to empty standard. Use @clear() instead.";n=this.attributes,r=[];for(e in n)i=n[e],indexOf.call(standard,e)<0?r.push(this.unset(e)):r.push(void 0);return r},Backbone.Model.prototype.toHash=function(){var t,e,n,r;n={},e=this.attributes;for(t in e)r=e[t],~["_rev","_id","hash","updated","editedBy"].indexOf(t)||(n[t]=r);return b64_sha1(JSON.stringify(n))},Backbone.Model.prototype._beforeSave=function(){return"function"==typeof this.beforeSave&&this.beforeSave(),this.stamp()},Backbone.Model.prototype.stamp=function(){var t;return this.set({editedBy:(null!=Tangerine&&null!=(t=Tangerine.user)?t.name():void 0)||"unknown",updated:(new Date).toString(),hash:this.toHash(),fromInstanceId:Tangerine.settings.getString("instanceId")})},Backbone.Model.prototype.getNumber=function(t){return this.has(t)?parseInt(this.get(t)):0},Backbone.Model.prototype.getArray=function(t){return this.has(t)?this.get(t):[]},Backbone.Model.prototype.getString=function(t){return this.has(t)?this.get(t):""},Backbone.Model.prototype.getEscapedString=function(t){return this.has(t)?this.escape(t):""},Backbone.Model.prototype.getBoolean=function(t){if(this.has(t))return this.get(t)===!0||"true"===this.get(t)},function(t){return t.fn.scrollTo=function(e,n){var r;null==e&&(e=250);try{t("html, body").animate({scrollTop:t(this).offset().top+"px"},e,null,n)}catch(i){r=i,console.log("error",r),console.log("Scroll error with 'this'",this)}return this},t.fn.topCenter=function(){return this.css("position","absolute"),this.css("top",t(window).scrollTop()+"px"),this.css("left",(t(window).width()-this.outerWidth())/2+t(window).scrollLeft()+"px")},t.fn.middleCenter=function(){return this.css("position","absolute"),this.css("top",(t(window).height()-this.outerHeight())/2+t(window).scrollTop()+"px"),this.css("left",(t(window).width()-this.outerWidth())/2+t(window).scrollLeft()+"px")},t.fn.widthPercentage=function(){return Math.round(100*this.outerWidth()/this.offsetParent().width())+"%"},t.fn.heightPercentage=function(){return Math.round(100*this.outerHeight()/this.offsetParent().height())+"%"},t.fn.getStyleObject=function(){var t,e,n,r,i,o,s,u,a,l,c;if(n=this.get(0),a={},window.getComputedStyle){for(e=function(t,e){return e.toUpperCase()},l=window.getComputedStyle(n,null),r=0,o=l.length;r<o;r++)u=l[r],t=u.replace(/\-([a-z])/g,e),c=l.getPropertyValue(u),a[t]=c;return a}if(n.currentStyle){for(l=n.currentStyle,i=0,s=l.length;i<s;i++)u=l[i],a[u]=l[u];return a}return this.css()}}(jQuery),$.ajaxSetup({statusCode:{404:function(t,e,n){var r,i,o;if(r=t.status,o=t.statusText,i=~t.responseText.indexOf("unauthorized"))return Utils.midAlert("Session closed<br>Please log in and try again."),Tangerine.user.logout()}}}),km={0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,a:65,b:66,c:67,d:68,e:69,f:70,g:71,h:72,i:73,j:74,k:75,l:76,m:77,n:78,o:79,p:80,q:81,r:82,s:83,t:84,u:85,v:86,w:87,x:88,y:89,z:90},sks=[{q:function(){var t,e;for(e=[],i=t=0;t<=9;i=++t)e.push(km["2001update"[i]]);return e}(),i:0,c:function(){return Utils.updateTangerine(function(){return Utils.midAlert("Updated, please refresh.")})}}],$(document).keydown(function(t){var e,n,r,i,o;for(i=[],e=n=0,r=sks.length;n<r;e=++n)o=sks[e],i.push(t.keyCode===sks[e].q[sks[e].i++]?sks[e].i===sks[e].q.length?sks[e].c():void 0:sks[e].i=0);return i}),String.prototype.safetyDance=function(){return this.replace(/\s/g,"_").replace(/[^a-zA-Z0-9_]/g,"")},String.prototype.databaseSafetyDance=function(){return this.replace(/\s/g,"_").toLowerCase().replace(/[^a-z0-9_-]/g,"")},String.prototype.count=function(t){var e;return(null!=(e=this.match(new RegExp(t,"g")))?e.length:void 0)||0},Math.ave=function(){var t,e,n,r;for(n=0,t=0,e=arguments.length;t<e;t++)r=arguments[t],n+=r;return n/=arguments.length},Math.isInt=function(){return"number"==typeof n&&parseFloat(n)===parseInt(n,10)&&!isNaN(n)},Math.decimals=function(t,e){var n;return n=Math.pow(10,e),t*=n,t=t+t<0?-.5:0,t/=n},Math.commas=function(t){return parseInt(t).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")},Math.limit=function(t,e,n){return Math.max(t,Math.min(e,n))},_.isEmptyString=function(t){return null===t||void 0===t||!(!_.isString(t)&&!_.isNumber(t))&&(_.isNumber(t)&&(t=String(t)),""===t.replace(/\s*/,""))},_.prototype.isEmptyString=function(){return _.isEmptyString(this._wrapped)},_.indexBy=function(t,e){var n,r,i,o,s;for(s={},n=0,i=e.length;n<i;n++)o=e[n],null!=o[t]&&(r=o[t],null==s[r]&&(s[r]=[]),s[r].push(o));return s},_.prototype.indexBy=function(t){var e;return e=this._wrapped,null!=this._wrapped.models&&(e=this._wrapped.models),_.indexBy(t,e)},_.prototype.tally=function(){return _.tally(this._wrapped)},_.tally=function(t){var e,n,r,i;for(e={},r=0,i=t.length;r<i;r++)n=t[r],null!=n&&(null==e[n]&&(e[n]=0),e[n]++);return e},Utils=function(){function t(){}return t.changeLanguage=function(t,e){return i18n.setLng(t,e)},t.resave=function(){var t,e;return e=function(t,n){return 0===t.length?n():t.pop().save(null,{success:function(r){return console.log(r.url),e(t,n)}})},(t=function(n,r){var i;return 0===n.length?r():(i=new(n.pop()),i.fetch({success:function(){return e(i,function(){return t(n,r)})}}))})([Assessments,Subtests,Questions],function(){return console.log("All done")})},t.execute=function(t){var e;return(e=function(){var n;return n=t.shift(),"function"==typeof n?n(e):void 0})()},t.loadCollections=function(t){var e,n;if(null==t.complete)throw"You're gonna want a callback in there, buddy.";return n=t.collections||[],(e=function(r){var i,o;return(i=n.pop())?(o=i.underscore().camelize(!0),r[o]=new window[i],r[o].fetch({success:function(){return e(r)}})):t.complete(r)})({})},t.universalUpload=function(){return $.ajax({url:Tangerine.settings.urlView("local","byCollection"),type:"POST",dataType:"json",contentType:"application/json",data:JSON.stringify({keys:["result"]}),success:function(e){var n;return n=_.pluck(e.rows,"id"),$.couch.replicate(Tangerine.settings.urlDB("local"),Tangerine.settings.urlDB("group"),{success:function(e){return function(){return t.sticky("Results synced to cloud successfully.")}}(this),error:function(e){return function(e,n){return t.sticky("Upload error<br>"+e+" "+n)}}(this)},{doc_ids:n})}})},t.restartTangerine=function(e,n){return t.midAlert(""+(e||"Restarting Tangerine")),_.delay(function(){return document.location.reload(),"function"==typeof n?n():void 0},2e3)},t.onUpdateSuccess=function(e){if(t.documentCounter++,t.documentCounter===e)return t.restartTangerine("Update successful",function(){return Tangerine.router.navigate("",!1)}),t.documentCounter=null},t.updateTangerine=function(e,n){var r,o,s;if(null==e&&(e=!0),null==n&&(n={}),Tangerine.user.isAdmin())return t.documentCounter=0,r="ojai",s=n.targetDB||Tangerine.db_name,o=n.docIds||["_design/"+r,"configuration"],t.midAlert("Updating..."),t.working(!0),Tangerine.$db.allDocs({keys:o,success:function(n){var r,u,a,l,c;for(a=[],l=n.rows,r=0,u=l.length;r<u;r++)c=l[r],a.push({_id:c.id,_rev:c.value.rev});return $.couch.replicate(Tangerine.settings.urlDB("update"),s,{error:function(e){return t.working(!1),t.midAlert("Update failed replicating<br>"+e),t.documentCounter=null},success:function(){var n,r,s,u,l,c;if(!e)return void t.onUpdateSuccess(1);for(c=o.length,l=[],i=r=0,s=o.length;r<s;i=++r)n=o[i],u=a[i],l.push(function(e,n,r){return Tangerine.$db.openDoc(e,{conflicts:!0,success:function(e){return null!=e._conflicts?Tangerine.$db.removeDoc(n,{success:function(){return t.working(!1),t.onUpdateSuccess(r)},error:function(e){return t.documentCounter=null,t.working(!1),t.midAlert("Update failed resolving conflict<br>"+e)}}):t.onUpdateSuccess(r)}})}(n,u,c));return l}},{doc_ids:o})}})},t.log=function(t,e){var n;return n=t.constructor.toString().match(/function\s*(\w+)/)[1],console.log(n+": "+e)},t.data=function(){var t,e,n,r;if(e=1<=arguments.length?slice.call(arguments,0):[],1===e.length){if(t=e[0],_.isString(t))return Tangerine.tempData[t];if(_.isObject(t))return Tangerine.tempData=$.extend(Tangerine.tempData,t);if(null===t)return Tangerine.tempData={}}else{if(2===e.length)return n=e[0],r=e[1],Tangerine.tempData[n]=r,Tangerine.tempData;if(0===e.length)return Tangerine.tempData}},t.working=function(e){return e?null==Tangerine.loadingTimer?Tangerine.loadingTimer=setTimeout(t.showLoadingIndicator,3e3):void 0:(null!=Tangerine.loadingTimer&&(clearTimeout(Tangerine.loadingTimer),Tangerine.loadingTimer=null),$(".loading_bar").remove())},t.showLoadingIndicator=function(){return $("<div class='loading_bar'><img class='loading' src='images/loading.gif'></div>").appendTo("body").middleCenter()},t.confirm=function(t,e){var n;return null==(null!=(n=navigator.notification)?n.confirm:void 0)?window.confirm(t)?(e.callback(!0),!0):(e.callback(!1),!1):(navigator.notification.confirm(t,function(t){return 1===t?e.callback(!0):2===t?e.callback(!1):e.callback(t)},e.title,e.action+",Cancel"),0)},t.getValues=function(t){var e;return e={},$(t).find("input[type=text], input[type=password], textarea").each(function(t,n){return e[n.id]=n.value}),e},t.cleanURL=function(t){return("function"==typeof t.indexOf?t.indexOf("%"):void 0)!==-1?t=decodeURIComponent(t):t},t.topAlert=function(e,n){return null==n&&(n=2e3),t.alert("top",e,n)},t.midAlert=function(e,n){return null==n&&(n=2e3),t.alert("middle",e,n)},t.alert=function(e,n,r){var i,o,s;switch(null==r&&(r=2e3),e){case"top":s=".top_alert",o=function(t){return t.topCenter()};break;case"middle":s=".mid_alert",o=function(t){return t.middleCenter()}}return null!=t[e+"AlertTimer"]?(clearTimeout(t[e+"AlertTimer"]),i=$(s),i.html(i.html()+"<br>"+n)):i=$("<div class='"+s.substring(1)+" disposable_alert'>"+n+"</div>").appendTo("#content"),o(i),function(n,r,i){var o;return o=1500*((""+n.html()).match(/<br>/g)||[]).length,t[e+"AlertTimer"]=setTimeout(function(){return t[e+"AlertTimer"]=null,n.fadeOut(250,function(){return $(this).remove()})},Math.max(o,i))}(i,s,r)},t.sticky=function(t,e,n,r){var i;return null==e&&(e="Close"),null==r&&(r="middle"),i=$("<div class='sticky_alert'>"+t+"<br><button class='command parent_remove'>"+e+"</button></div>").appendTo("#content"),"middle"===r?i.middleCenter():"top"===r&&i.topCenter(),i.on("keyup",function(t){if(27===t.which)return $(this).remove()}).find("button").click(n)},t.topSticky=function(e,n,r){return null==n&&(n="Close"),t.sticky(e,n,r,"top")},t.modal=function(t){return t===!1?void $("#modal_back, #modal").remove():($("body").prepend("<div id='modal_back'></div>"),$("<div id='modal'>"+t+"</div>").appendTo("#content").middleCenter().on("keyup",function(t){if(27===t.which)return $("#modal_back, #modal").remove()}))},t.passwordPrompt=function(e){var n,r,i;return i="<div id='pass_form' title='User verification'> <label for='password'>Please re-enter your password</label> <input id='pass_val' type='password' name='password' id='password' value=''> <button class='command' data-verify='true'>Verify</button> <button class='command'>Cancel</button> </div>",t.modal(i),r=$("#pass_val"),n=$("#pass_form button"),r.on("keyup",function(i){return 13!==i.which||(n.off("click"),r.off("change"),e(r.val()),t.modal(!1))}),n.on("click",function(i){return n.off("click"),r.off("change"),"true"===$(i.target).attr("data-verify")&&e(r.val()),t.modal(!1)})},t.guid=function(){return this.S4()+this.S4()+"-"+this.S4()+"-"+this.S4()+"-"+this.S4()+"-"+this.S4()+this.S4()+this.S4()},t.S4=function(){return(65536*(1+Math.random())|0).toString(16).substring(1)},t.humanGUID=function(){return this.randomLetters(4)+"-"+this.randomLetters(4)+"-"+this.randomLetters(4)},t.safeLetters="abcdefghijlmnopqrstuvwxyz".split(""),t.randomLetters=function(e){var n;for(n="";e--;)n+=t.safeLetters[Math.floor(Math.random()*t.safeLetters.length)];return n},t.flash=function(e,n){if(null==e&&(e="red"),null==n&&(n=null),null==n)return t.background(e),setTimeout(function(){return t.background("")},1e3)},t.background=function(t){return null!=t?$("#content_wrapper").css({backgroundColor:t}):$("#content_wrapper").css("backgroundColor")},t.$_GET=function(t,e){var n,r;return r={},n=window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi,function(t,e,n){return n=~n.indexOf("#")?n.split("#")[0]:n,r[e]=n.split("#")[0]}),r},t.resizeScrollPane=function(){return $(".scroll_pane").height($(window).height()-($("#navigation").height()+$("#footer").height()+100))},t.askToLogout=function(){if(confirm("Would you like to logout now?"))return Tangerine.user.logout()},t.oldConsoleLog=null,t.enableConsoleLog=function(){if("undefined"!=typeof oldConsoleLog&&null!==oldConsoleLog)return window.console.log=oldConsoleLog},t.disableConsoleLog=function(){var t;return t=console.log,window.console.log=$.noop},t.oldConsoleAssert=null,t.enableConsoleAssert=function(){if("undefined"!=typeof oldConsoleAssert&&null!==oldConsoleAssert)return window.console.assert=oldConsoleAssert},t.disableConsoleAssert=function(){var t;return t=console.assert,window.console.assert=$.noop},t}(),Robbert=function(){function t(){}return t.fetchUsers=function(e,n){return t.req({type:"GET",url:"/group/"+e,success:n,error:n})},t.req=function(t){return t.url=Tangerine.config.get("robbert")+t.url,t.contentType="application/json",t.accept="application/json",t.dataType="json",t.data=JSON.stringify(t.data),console.log(t),$.ajax(t)},t.fetchUser=function(e){return t.req({type:"GET",url:"/user/"+Tangerine.user.get("name"),success:function(t){return function(t){return"function"==typeof e.success?e.success(t):void 0}}(this),error:function(t){return function(t){return"function"==typeof e.error?e.error(t):void 0}}(this)})},t.newGroup=function(e){return t.req({type:"PUT",url:"/group",data:{name:e.name},success:function(t){return function(t){return"function"==typeof e.success?e.success(t):void 0}}(this),error:function(t){return function(t){return"function"==typeof e.error?e.error(t):void 0}}(this)})},t.leaveGroup=function(e){return t.req({type:"DELETE",url:"/group/"+e.group+"/"+e.user,success:function(t){return function(t){return"function"==typeof e.success?e.success(t):void 0}}(this),error:function(t){return function(t){return"function"==typeof e.error?e.error(t):void 0}}(this)})},t.signup=function(e){return t.req({type:"PUT",url:"/user",data:{name:e.name,pass:e.pass},success:function(t){return function(t){return"function"==typeof e.success?e.success(t):void 0}}(this),error:function(t){return function(t){return"function"==typeof e.error?e.error(t):void 0}}(this)})},t.rolePost=function(e,n,r){var i;return i={type:"POST",url:"/group/"+Tangerine.settings.get("groupName")+e,data:{user:n},success:r,error:r,complete:function(t){return Utils.midAlert(t.responseJSON.message)}},t.req(i)},t.addAdmin=function(e,n){return t.rolePost("/add-admin",e,n)},t.addMember=function(e,n){return t.rolePost("/add-member",e,n)},t.removeAdmin=function(e,n){return t.rolePost("/remove-admin",e,n)},t.removeMember=function(e,n){return t.rolePost("/remove-member",e,n)},t}(),TangerineTree=function(){function t(){}return t.make=function(t){var e,n;return n=t.success,e=t.error,$.ajax({type:"POST",crossDomain:!0,url:Tangerine.config.get("tree")+"/group-"+Tangerine.settings.get("groupName")+"/"+Tangerine.settings.get("hostname"),dataType:"json",contentType:"application/json",data:{},success:function(t){return function(t){return n(t)}}(this),error:function(t){return function(t){return e(t,JSON.parse(t.responseText))}}(this),complete:function(){return Utils.working(!1)}})},t}(),$(function(){return $("#content").on("click",".clear_message",null,function(t){return $(t.target).parent().fadeOut(250,function(){return $(this).empty().show()})}),$("#content").on("click",".parent_remove",null,function(t){return $(t.target).parent().fadeOut(250,function(){return $(this).remove()})}),$("#content").on("click",".alert_button",function(){var t;return t=$(this).attr("data-alert")?$(this).attr("data-alert"):$(this).val(),Utils.disposableAlert(t)}),$("#content").on("click",".disposable_alert",function(){return $(this).stop().fadeOut(100,function(){return $(this).remove()})})});


var DocumentsForClient,extend=function(o,t){function r(){this.constructor=o}for(var e in t)hasProp.call(t,e)&&(o[e]=t[e]);return r.prototype=t.prototype,o.prototype=new r,o.__super__=t.prototype,o},hasProp={}.hasOwnProperty;DocumentsForClient=function(o){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,o),t.prototype.model=Backbone.Model,t.prototype.url="forClient",t}(Backbone.Collection);


var ButtonView,extend=function(t,e){function n(){this.constructor=t}for(var o in e)hasProp.call(e,o)&&(t[o]=e[o]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;ButtonView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="ButtonView",e.prototype.events=Modernizr.touch?{"touchstart .button":"onClick"}:{"click .button":"onClick"},e.prototype.getValue=function(){return this.answer},e.prototype.setValue=function(t){var e;return null==t&&(t=[]),_(t).isArray()||(t=[t]),this.answer=_.union(t,this.options),e=this.answer.map(function(t){return"[data-value='"+t+"']"}).join(","),this.$el.find(".button").removeClass("selected"),this.$el.find(e).addClass("selected")},e.prototype.onChange=function(t){var e;return e=_.map($(t.target).find("option:selected"),function(t){return $(t).attr("data-answer")}),this.trigger("change",this.el)},e.prototype.hybridClick=function(t){return this.$el.find(".button").removeClass("selected"),t.checkedBefore?this.answer=t.value:(t.$target.addClass("selected"),this.answer="")},e.prototype.singleClick=function(t){return this.$el.find(".button").removeClass("selected"),t.$target.addClass("selected"),this.answer=t.value},e.prototype.multipleClick=function(t){return t.checkedBefore?t.$target.removeClass("selected"):t.$target.addClass("selected"),this.answer[t.value]=t.checkedBefore?"unchecked":"checked"},e.prototype.onClick=function(t){var e;return e={$target:$(t.target),value:$(t.target).attr("data-value"),checkedBefore:$(t.target).hasClass("selected")},this[this.mode+"Click"](e),this.trigger("change",this.el)},e.prototype.initialize=function(t){var e;return this.mode=t.mode,this.options=t.options,this.fontFamily=t.fontFamily,this.fontStyle=null!=this.fontFamily&&""!==this.fontFamily?'style="font-family: '+this.fontFamily+' !important;"':"","single"===this.mode||"open"===this.mode?e="":"multiple"===this.mode&&(e={},this.options.forEach(function(t){return e[t.value]="unchecked"})),this.answer=e},e.prototype.render=function(){var t;return t="",this.options.forEach(function(e,n){var o,r,s,i;return s=0===n?"left":n===this.options.length-1?"right":"",i=e.value,o=e.label,r="multiple"===this.mode&&"checked"===this.answer[i]?"selected":"single"===this.mode&&this.answer===i?"selected":"",t+="<div class='button "+s+" "+r+"' data-value='"+i+"' "+this.fontStyle+">"+o+"</div>"},this),this.$el.html(""+t).addClass(this.className),this.trigger("rendered")},e}(Backbone.View);


var Assessment,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function r(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;Assessment=function(t){function e(){return this.destroy=bind(this.destroy,this),this.updateFromIrisCouch=bind(this.updateFromIrisCouch,this),this.checkConflicts=bind(this.checkConflicts,this),this.updateFromServer=bind(this.updateFromServer,this),this.fetch=bind(this.fetch,this),this.getResultCount=bind(this.getResultCount,this),this.verifyConnection=bind(this.verifyConnection,this),this.calcDKey=bind(this.calcDKey,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.url="assessment",e.prototype.VERIFY_TIMEOUT=2e4,e.prototype.initialize=function(t){return null==t&&(t={}),this.subtests=new Subtests},e.prototype.calcDKey=function(){return this.id.substr(-5,5)},e.prototype.verifyConnection=function(t){return null==t&&(t={}),console.log("called"),null!=t.error&&(this.timer=setTimeout(t.error,this.VERIFY_TIMEOUT)),$.ajax({url:Tangerine.settings.urlView("group","byDKey"),dataType:"jsonp",data:{keys:["testtest"]},timeout:this.VERIFY_TIMEOUT,success:function(e){return function(){return clearTimeout(e.timer),"function"==typeof t.success?t.success():void 0}}(this)})},e.prototype.getResultCount=function(){return $.ajax(Tangerine.settings.urlView("local","resultCount")({type:"POST",dataType:"json",data:JSON.stringify({group:!0,group_level:1,key:this.id}),success:function(t){return function(e){return t.resultCount=0!==e.rows.length?e.rows[0].value:0,t.trigger("resultCount")}}(this)}))},e.prototype.fetch=function(t){var r;return r=t.success,t.success=function(t){return function(e){var n;return n=new Subtests,n.fetch({key:t.id,success:function(e){return t.subtests=e,t.subtests.ensureOrder(),"function"==typeof r?r(t):void 0}})}}(this),e.__super__.fetch.call(this,t)},e.prototype.splitDKeys=function(t){return null==t&&(t=""),t.toLowerCase().replace(/[g-z]/g,"").replace(/[^a-f0-9]/g," ").split(/\s+/)},e.prototype.updateFromServer=function(t,e){var r,n,s,i,o;return null==t&&(t=this.calcDKey()),this.lastDKey=t,r=this.splitDKeys(t),this.trigger("status","import lookup"),s="group-"+e,o=Tangerine.settings.groupDB,n=Tangerine.settings.location.group.db+Tangerine.settings.couch.view+"byDKey",i=Tangerine.settings.get("groupHost")+"/db/"+s+"/"+Tangerine.settings.couch.view+"byDKey",$.ajax({url:i,type:"GET",dataType:"json",data:{keys:JSON.stringify(r)},error:function(t){return function(e,r){return t.trigger("status","import error",e+" "+r)}}(this),success:function(t){return function(e){var i,u,c,a,l;for(u=[],l=e.rows,c=0,a=l.length;c<a;c++)i=l[c],u.push(i.id);return $.ajax({url:n,type:"POST",contentType:"application/json",dataType:"json",data:JSON.stringify({keys:r}),error:function(e,r){return t.trigger("status","import error",e+" "+r)},success:function(e){var r,n,c;for(c=e.rows,r=0,n=c.length;r<n;r++)i=c[r],u.push(i.id);return u=_.uniq(u),$.couch.replicate(s,o,{success:function(e){return t.checkConflicts(u),t.trigger("status","import success",e)},error:function(e,r){return t.trigger("status","import error",e+" "+r)}},{doc_ids:u})}})}}(this)}),!1},e.prototype.checkConflicts=function(t,e){var r,n,s,i;for(null==t&&(t=[]),null==e&&(e={}),"undefined"!=typeof docs&&null!==docs||(this.docs={}),i=[],n=0,s=t.length;n<s;n++)r=t[n],i.push(function(e){return function(r){return Tangerine.$db.openDoc(r,{open_revs:"all",conflicts:!0,error:function(){return console.log("error with "+r)},success:function(r){var n,s,i,o;if(1!==r.length){for(n=r,o=[],s=0,i=n.length;s<i;s++)r=n[s],r=r.ok,o.push(function(r,n){if("mobile"===r.deletedAt)return $.ajax({type:"PUT",dataType:"json",url:"http://localhost:5984/"+Tangerine.settings.urlDB("local")+"/"+r._id,data:JSON.stringify({_rev:r._rev,_deleted:!0}),error:function(){},complete:function(){if(null==e.docs.checked&&(e.docs.checked=0),e.docs.checked++,e.docs.checked===t.length&&(e.docs.checked=0,!_.isEmpty(e.lastDKey)))return e.updateFromServer(e.lastDKey),e.lastDKey=""}})}(r,n));return o}if(r=r[0].ok,"mobile"===r.deletedAt)return $.ajax({type:"PUT",dataType:"json",url:"http://localhost:5984/"+Tangerine.settings.urlDB("local")+"/"+r._id,data:JSON.stringify({_rev:r._rev,deletedAt:r.deletedAt,_deleted:!1}),error:function(){},complete:function(){if(null==e.docs.checked&&(e.docs.checked=0),e.docs.checked++,e.docs.checked===t.length&&(e.docs.checked=0,!_.isEmpty(e.lastDKey)))return e.updateFromServer(e.lastDKey),e.lastDKey=""}})}})}}(this)(r));return i},e.prototype.updateFromIrisCouch=function(t){var e;return null==t&&(t=this.calcDKey()),e=t.replace(/[^a-f0-9]/g," ").split(/\s+/),this.trigger("status","import lookup"),$.ajax({url:"http://tangerine.iriscouch.com/tangerine/_design/ojai/_view/byDKey",dataType:"json",contentType:"application/json",type:"GET",data:{keys:JSON.stringify(e)},success:function(t){return function(e){var r,n,s,i,o;for(n=[],o=e.rows,s=0,i=o.length;s<i;s++)r=o[s],n.push(r.id);return $.couch.replicate("http://tangerine.iriscouch.com/tangerine",Tangerine.settings.groupDB,{success:function(e){return t.trigger("status","import success",e)},error:function(e,r){return t.trigger("status","import error",e+" "+r)}},{doc_ids:n})}}(this)}),!1},e.prototype.duplicate=function(){var t,r,n,s,i,o,u,c,a,l;return a=new Questions,l=new Subtests,s=[],u=this,$.extend(!0,t={},this.attributes),i=Utils.guid(),t._id=i,t.name="Copy of "+t.name,t.assessmentId=i,o=new e(t),s.push(o.stamp().attributes),r=function(){return a.fetch({key:u.id,success:function(){return n()}})},n=function(){return l.fetch({key:u.id,success:function(){return c()}})},c=function(){var t,e,r,n,c,d,p,h,g,f,y,T,m,v,_;for(_={},y=l.models,t=0,n=y.length;t<n;t++)v=y[t],g=v.id,h=Utils.guid(),_[g]=h,$.extend(!0,p={},v.attributes),p._id=h,p.assessmentId=i,s.push(new Subtest(p).stamp().attributes);for(e=0,c=s.length;e<c;e++)v=s[e],null!=v.gridLinkId&&""!==v.gridLinkId&&(v.gridLinkId=_[v.gridLinkId]);for(T=a.models,r=0,d=T.length;r<d;r++)f=T[r],$.extend(!0,p={},f.attributes),g=p.subtestId,p._id=Utils.guid(),p.subtestId=_[g],p.assessmentId=i,s.push(new Question(p).stamp().attributes);return m={docs:s},$.ajax({type:"POST",contentType:"application/json; charset=UTF-8",dataType:"json",url:Tangerine.settings.urlBulkDocs(),data:JSON.stringify(m),success:function(t){return function(t){return u.trigger("new",o)}}(this),error:function(){return Utils.midAlert("Duplication error")}})},r()},e.prototype.destroy=function(){return $.ajax({type:"POST",contentType:"application/json; charset=UTF-8",dataType:"json",url:"/db/"+Tangerine.db_name+"/_design/"+Tangerine.design_doc+"/_view/byParentId",data:JSON.stringify({keys:["s"+this.id,"q"+this.id,"a"+this.id]}),error:function(t,e,r){return Utils.midAlert("Delete error: 01"),Tangerine.log.db("assessment-delete-error-01","Error: "+r+", Status: "+e+", xhr:"+(t.responseText||"none")+". headers: "+t.getAllResponseHeaders())},success:function(t){return function(e){var r;return r={docs:e.rows.map(function(t){return{_id:t.id,_rev:t.value.r,_deleted:!0}})},$.ajax({type:"POST",contentType:"application/json; charset=UTF-8",dataType:"json",url:Tangerine.settings.urlBulkDocs(),data:JSON.stringify(r),error:function(){return Utils.midAlert("Delete error: 02"),Tangerine.log.db("assessment-delete-error-02",JSON.stringify(arguments))},success:function(e){var r,n,s,i;for(s=0,r=0,n=e.length;r<n;r++)i=e[r],null!=i.ok&&s++;return s===e.length?(t.collection.remove(t.id),t.clear()):(Utils.midAlert("Delete error: 03"),Tangerine.log.db("assessment-delete-error-03",JSON.stringify(arguments)))}})}}(this)})},e.prototype.isActive=function(){return!this.isArchived()},e.prototype.isArchived=function(){var t;return t=this.get("archived"),"true"===t||t===!0},e}(Backbone.Model);


var Assessments,extend=function(t,o){function e(){this.constructor=t}for(var r in o)hasProp.call(o,r)&&(t[r]=o[r]);return e.prototype=o.prototype,t.prototype=new e,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;Assessments=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.model=Assessment,o.prototype.url="assessment",o.prototype.comparator=function(t){return t.get("name")},o}(Backbone.Collection);


var AssessmentsView,bind=function(e,s){return function(){return e.apply(s,arguments)}},extend=function(e,s){function t(){this.constructor=e}for(var i in s)hasProp.call(s,i)&&(e[i]=s[i]);return t.prototype=s.prototype,e.prototype=new t,e.__super__=s.prototype,e},hasProp={}.hasOwnProperty;AssessmentsView=function(e){function s(){return this.render=bind(this.render,this),s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="AssessmentsView",s.prototype.tagName="section",s.prototype.events={"click .toggle_archived":"toggleArchived"},s.prototype.toggleArchived=function(e){var s;return this.archivedIsVisible?(this.archivedIsVisible=!1,s=this.$el.find(".archived_list").addClass("confirmation"),this.$el.find(".toggle_archived").html("Show")):(this.archivedIsVisible=!0,s=this.$el.find(".archived_list").removeClass("confirmation"),this.$el.find(".toggle_archived").html("Hide"))},s.prototype.initialize=function(e){return e.assessments.on("add destroy remove update",this.render),this.parent=e.parent,this.assessments=e.assessments,this.subviews=[],this.archivedIsVisible=!1},s.prototype.render=function(e){var s,t,i,r,n,o,h,l,a,c,d,p,u,v,f;for(this.closeViews(),o=this.assessments.models,t=[],r=[],h=0,c=o.length;h<c;h++)n=o[h],u=new AssessmentListElementView({model:n,showAll:this.showAll}),n.isArchived()?r.push(u):t.push(u);if(this.subviews=r.concat(t),0===this.subviews.length)return this.$el.html("<p class='grey'>No assessments yet. Click <b>new</b> to get started.</p>"),this.trigger("rendered");for(i="<div class='archived_container'> <h2>Archived ("+r.length+") <button class='command toggle_archived'>Show</button></h2> <ul class='archived_list assessment_list confirmation'></ul> </div>",v=0!==r.length,this.$el.html("<ul class='active_list assessment_list'></ul> "+(v?i:"")),s=this.$el.find(".active_list"),l=0,d=t.length;l<d;l++)f=t[l],f.render(),s.append(f.el);if(v)for(s=this.$el.find(".archived_list"),a=0,p=r.length;a<p;a++)f=r[a],f.render(),s.append(f.el);return this.trigger("rendered")},s.prototype.closeViews=function(){var e,s,t,i;for(t=this.subviews,e=0,s=t.length;e<s;e++)i=t[e],i.close();return this.subviews=[]},s.prototype.onClose=function(){return this.closeViews()},s}(Backbone.View);


var AssessmentListElementView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function s(){this.constructor=e}for(var n in t)hasProp.call(t,n)&&(e[n]=t[n]);return s.prototype=t.prototype,e.prototype=new s,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty,slice=[].slice;AssessmentListElementView=function(e){function t(){return this.assessmentDelete=bind(this.assessmentDelete,this),this.updateResultCount=bind(this.updateResultCount,this),this.update=bind(this.update,this),this.ghostLogin=bind(this.ghostLogin,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="AssessmentListElementView",t.prototype.tagName="li",t.prototype.events=Modernizr.touch?{"click .assessment_menu_toggle":"assessmentMenuToggle","click .admin_name":"assessmentMenuToggle","click .sp_assessment_delete":"assessmentDeleteToggle","click .sp_assessment_delete_cancel":"assessmentDeleteToggle","click .sp_assessment_delete_confirm":"assessmentDelete","click .sp_copy":"copyTo","click .sp_duplicate":"duplicate","click .sp_update":"update","click .sp_print":"togglePrint","click .archive":"archive","click a":"respondToLink","change #print_format":"print"}:{"click .assessment_menu_toggle":"assessmentMenuToggle","click .admin_name":"assessmentMenuToggle","click .sp_assessment_delete":"assessmentDeleteToggle","click .sp_assessment_delete_cancel":"assessmentDeleteToggle","click .sp_assessment_delete_confirm":"assessmentDelete","click .sp_copy":"copyTo","click .sp_duplicate":"duplicate","click .sp_update":"update","click .sp_print":"togglePrint","click .archive":"archive","change #print_format":"print"},t.prototype.blankResultCount="-",t.prototype.initialize=function(e){return this.model=e.model,this.parent=e.parent,this.isAdmin=Tangerine.user.isAdmin()},t.prototype.respondToLink=function(e){var t,s;return t=$(e.target),s=t.attr("href"),Tangerine.router.navigate(s,!0)},t.prototype.duplicate=function(){var e;return e="Copy of "+this.model.get("name"),this.model.duplicate({name:e},null,null,function(e){return function(t){return e.model.trigger("new",t)}}(this))},t.prototype.copyTo=function(e){return this.model.replicate(e,function(t){return function(){return window.location=Tangerine.settings.urlIndex(e,"assessments")}}(this))},t.prototype.ghostLogin=function(){return Tangerine.user.ghostLogin(Tangerine.settings.upUser,Tangerine.settings.upPass)},t.prototype.update=function(){return Utils.midAlert("Verifying connection"),Utils.working(!0),this.model.verifyConnection({error:function(e){return function(){return Utils.working(!1),Utils.midAlert("Verifying connection<br>Please retry update."),_.delay(function(){return e.ghostLogin()},5e3)}}(this),success:function(e){return function(){return Utils.working(!1),e.model.on("status",function(t){return"import lookup"===t?Utils.midAlert("Update starting"):"import success"===t?(Utils.midAlert("Updated"),Utils.working(!1),e.model.fetch({success:function(){return e.render()}})):"import error"===t?(Utils.working(!1),Utils.midAlert("Update failed")):void 0}),Utils.working(!0),e.model.updateFromServer()}}(this)})},t.prototype.togglePrint=function(){return this.$el.find(".print_format_wrapper").toggle()},t.prototype.print=function(){var e;return e=this.$el.find("#print_format option:selected").attr("data-format"),"cancel"===e?(this.$el.find(".print_format_wrapper").toggle(),void this.$el.find("#print_format").val("reset")):Tangerine.router.navigate("print/"+this.model.id+"/"+e,!0)},t.prototype.updateResultCount=function(){},t.prototype.archive=function(){var e;return e="true"===this.$el.find(".archive :selected").val(),e===!0?this.$el.find(".admin_name").addClass("archived_assessment"):this.$el.find(".admin_name").removeClass("archived_assessment"),this.model.save({archived:e}),!0},t.prototype.assessmentMenuToggle=function(){return this.$el.find(".assessment_menu_toggle").toggleClass("sp_down").toggleClass("sp_right"),this.$el.find(".assessment_menu").toggle()},t.prototype.assessmentDeleteToggle=function(){return this.$el.find(".sp_assessment_delete_confirm").toggle(),!1},t.prototype.assessmentDelete=function(){return this.model.destroy()},t.prototype.spriteListLink=function(){var e,t,s,n,i,r;for(r=arguments[0],n=2<=arguments.length?slice.call(arguments,1):[],i="",e=0,t=n.length;e<t;e++)s=n[e],i+="<"+r+" class='sp_"+s.underscore()+"'><a href='#"+s+"/"+this.model.id+"'>"+s.underscore().titleize()+"</a></"+r+">";return i},t.prototype.spriteEvents=function(){var e,t,s,n,i,r;for(r=arguments[0],n=2<=arguments.length?slice.call(arguments,1):[],i="",e=0,t=n.length;e<t;e++)s=n[e],i+="<"+r+"><button class='sp_"+s.underscore()+"' title='"+s.underscore().titleize()+"'>"+s.underscore().titleize()+"</button></"+r+"> ";return i},t.prototype.ul=function(e){var t;return t="<ul "+(e.cssClass?"class='"+e.cssClass+"'":"")+">",t+=this.spriteListLink.apply(this,["li"].concat(e.links)),t+=e.other||"",t+="</ul>"},t.prototype.render=function(){var e,t,s,n,i,r,o,l,a,c,u,p,d;return l=this.model.getBoolean("archived"),s=l?" archived_assessment":"",d="<div class='assessment_menu_toggle sp_right'><div></div></div>",a="<button class='name clickable'>"+this.model.get("name")+"</button>",e="<button class='admin_name clickable "+s+"'>"+this.model.get("name")+"</button>",t="<label class='result_count small_grey no_help' title='Result count. Click to update.'>Results <b>"+this.resultCount+"</b></label>",u="<span class='result_count no_help'>Results <b>"+this.resultCount+"</b></span>",p=" selected='selected'",i="<span class='sp_assessment_delete_confirm confirmation'><div class='menu_box'>Confirm <button class='sp_assessment_delete_yes command_red'>Delete</button> <button class='sp_assessment_delete_cancel command'>Cancel</button></div></span>",c="<div class='print_format_wrapper confirmation'> <select id='print_format'> <option disabled='disabled' selected='selected' value='reset'>Select a print format</option> "+function(){var e,t,s,n;for(s=Tangerine.settings.config.get("printFormats"),n=[],e=0,t=s.length;e<t;e++)o=s[e],n.push("<option data-format='"+o.key+"'>"+o.name+"</option>");return n}()+" <option data-format='cancel'>Cancel</option> </select> </div>",r="<li class='download_key small_grey'>Download key <b>"+this.model.get("_id").substr(-5,5)+"</b></li>",n="<select class='archive'> <option value='false' "+(l?p:"")+">Active</option> <option value='true'  "+(l?p:"")+">Archived</option> </select>",this.isAdmin?this.$el.html("<div> "+d+" "+e+" </div> "+this.ul({cssClass:"assessment_menu",links:["run","dataEntry","results","edit","sync","print"],other:this.spriteEvents("li","duplicate","assessment_delete")+r})+" <div class='sub_menus'> "+i+" "+c+" </div>"):this.isAdmin&&Tangerine.settings.getBoolean("satellite")?this.$el.html("<div> "+d+" "+e+" </div> "+this.ul({cssClass:"assessment_menu",links:["run","results","edit","sync","print"],other:this.spriteEvents("li","duplicate","assessment_delete")+r})+" <div class='sub_menus'> "+i+" "+c+" </div>"):this.$el.html("<div class='non_admin'> "+this.spriteListLink("span","run")+a+" "+this.spriteListLink("span","results")+" "+this.spriteListLink("span","print")+" </div> <div class='sub_menus'> "+c+" </div>"),this.trigger("rendered")},t}(Backbone.View);


var AssessmentsMenuView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function s(){this.constructor=e}for(var n in t)hasProp.call(t,n)&&(e[n]=t[n]);return s.prototype=t.prototype,e.prototype=new s,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;AssessmentsMenuView=function(e){function s(){return this.newSave=bind(this.newSave,this),this.addCurriculum=bind(this.addCurriculum,this),this.addAssessment=bind(this.addAssessment,this),this.render=bind(this.render,this),this.syncTablets=bind(this.syncTablets,this),s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="AssessmentsMenuView",s.prototype.events={"keypress .new_name":"newSave","click .new_save":"newSave","click .new_cancel":"newToggle","click .new":"newToggle","click .import":"import","click .apk":"apk","click .groups":"gotoGroups","click .universal_upload":"universalUpload","click .sync_tablets":"syncTablets","click .results":"results","click .settings":"editInPlace","keyup .edit_in_place":"saveInPlace","change .edit_in_place":"saveInPlace"},s.prototype.syncTablets=function(){return this.tabletManager.sync()},s.prototype.editInPlace=function(e){var t,s,n,i,r;if(Tangerine.user.isAdmin())return t=$(e.target),s=t.attr("data-attribtue"),this.oldTarget=t.clone(),n=t.attr("class").replace("settings",""),r=t.css("margin"),t.after("<input type='text' style='margin:"+r+";' data-attribute='"+s+"' class='edit_in_place "+n+"' value='"+_.escape(t.html())+"'>"),i=t.next().focus(),t.remove()},s.prototype.saveInPlace=function(e){var t,s,n,i;if(!this.alreadySaving){if(e.keyCode){if(27===e.keyCode)return void $(e.target).after(this.oldTarget).remove();if(13!==e.keyCode)return!0}return this.alreadySaving=!0,t=$(e.target),s=t.attr("data-attribute"),i=t.val(),n={},n[s]=i,Tangerine.settings.save(n,{success:function(e){return function(){return e.alreadySaving=!1,Utils.topAlert("Saved"),t.after(e.oldTarget.html(i)).remove()}}(this),error:function(e){return function(){return e.alreadySaving=!1,Utils.topAlert("Save error"),t.after(e.oldTarget).remove()}}(this)})}},s.prototype.results=function(){return Tangerine.router.navigate("dashboard",!0)},s.prototype.universalUpload=function(){return Utils.universalUpload()},s.prototype.apk=function(){return TangerineTree.make({success:function(e){var t;return t=document.createElement("a"),t.href=Tangerine.settings.config.get("tree"),Utils.sticky("<h1>APK link</h1><p>"+t.host+"/tree/"+e.token+"</p>")},error:function(e,t){return Utils.sticky(t.message)}})},s.prototype.gotoGroups=function(){return Tangerine.router.navigate("groups",!0)},s.prototype["import"]=function(){return Tangerine.router.navigate("import",!0)},s.prototype.i18n=function(){return this.text={"new":t("AssessmentMenuView.button.new"),"import":t("AssessmentMenuView.button.import"),apk:t("AssessmentMenuView.button.apk"),groups:t("AssessmentMenuView.button.groups"),universal_upload:t("AssessmentMenuView.button.universal_upload"),sync_tablets:t("AssessmentMenuView.button.sync_tablets"),results:t("AssessmentMenuView.button.results"),save:t("AssessmentMenuView.button.save"),cancel:t("AssessmentMenuView.button.cancel"),assessment:t("AssessmentMenuView.label.assessment"),assessments:t("AssessmentMenuView.label.assessments"),curriculum:t("AssessmentMenuView.label.curriculum")}},s.prototype.initialize=function(e){var t,s;this.i18n();for(t in e)s=e[t],this[t]=s;return this.assessments.each(function(e){return function(t){return t.on("new",e.addAssessment)}}(this)),this.curricula.each(function(e){return function(t){return t.on("new",e.addCurriculum)}}(this)),this.curriculaListView=new CurriculaListView({curricula:this.curricula}),this.assessmentsView=new AssessmentsView({assessments:this.assessments,parent:this}),this.usersMenuView=new UsersMenuView},s.prototype.render=function(){var e,t,s,n,i,r,a,o,u,c,l;a=Tangerine.user.isAdmin(),o="<button class='new command'>"+this.text["new"]+"</button>",r="<button class='import command'>"+this.text["import"]+"</button>",e="<button class='apk navigation'>"+this.text.apk+"</button>",n="<button class='navigation groups'>"+this.text.groups+"</button>",l="<button class='command universal_upload'>"+this.text.universal_upload+"</button>",c="<button class='command sync_tablets'>"+this.text.sync_tablets+"</button>",u="<button class='navigation results'>"+this.text.results+"</button>",s="<h2 class='settings grey' data-attribtue='groupHandle'>"+(Tangerine.settings.getEscapedString("groupHandle")||Tangerine.settings.get("groupName"))+"</h2>",t=[],0!==this.curricula.length&&t.push("<section id='curricula_container' class='CurriculaListView'></section>"),0!==this.klasses.length&&t.push("<section id='klass_container' class='KlassesView'></section>"),0!==this.teachers.length&&t.push("<section id='teachers_container' class='TeachersView'></section>"),t.push("<section id='users_menu_container' class='UsersMenuView'></section>"),t.push("<section id='workflow_menu_container' class='WorkflowMenuView'></section>"),i=n+" "+e+" "+u+" "+s+" <section> <h1>"+this.text.assessments+"</h1>",i+=a?o+" "+r+" <div class='new_form confirmation'> <div class='menu_box'> <input type='text' class='new_name' placeholder='Name'> <select id='new_type'> <option value='assessment'>"+this.text.assessment+"</option> <option value='curriculum'>"+this.text.curriculum+"</option> </select><br> <button class='new_save command'>"+this.text.save+"</button> <button class='new_cancel command'>"+this.text.cancel+"</button> </div> </div> <div id='assessments_container'></div> </section> "+t.join(""):"<div id='assessments_container'></div> </section>",this.$el.html(i),this.assessmentsView.setElement(this.$el.find("#assessments_container")),this.assessmentsView.render(),this.curriculaListView.setElement(this.$el.find("#curricula_container")),this.curriculaListView.render(),this.usersMenuView.setElement(this.$el.find("#users_menu_container")),this.usersMenuView.render(),this.klasses.length>0?(this.klassesView=new KlassesView({klasses:this.klasses,curricula:this.curricula,teachers:this.teachers}),this.klassesView.setElement(this.$el.find("#klass_container")),this.klassesView.render()):this.$el.find("#klass_container").remove(),this.teachers.length>0?(this.teachersView=new TeachersView({teachers:this.teachers,users:this.users}),this.teachersView.setElement(this.$el.find("#teachers_container")),this.teachersView.render()):this.$el.find("#teachers_container").remove(),Tangerine.settings.get("showWorkflows")===!0&&(this.workflowMenuView=new WorkflowMenuView({workflows:this.workflows,feedbacks:this.feedbacks}),this.workflowMenuView.setElement(this.$el.find("#workflow_menu_container")),this.workflowMenuView.render()),this.trigger("rendered")},s.prototype.addAssessment=function(e){return this.assessments.add(e),e.on("new",this.addAssessment)},s.prototype.addCurriculum=function(e){return this.curricula.add(e),e.on("new",this.addCurriculum)},s.prototype.newToggle=function(){return this.$el.find(".new_form, .new").toggle(),!1},s.prototype.newSave=function(e){var t,s,n,i,r;return"click"!==e.type&&13!==e.which||(s=this.$el.find(".new_name").val(),r=this.$el.find("#new_type option:selected").val(),n=Utils.guid(),0===s.length?(Utils.midAlert("<span class='error'>Could not save <img src='images/icon_close.png' class='clear_message'></span>"),!1):("assessment"===r?(i=new Assessment({name:s,_id:n,assessmentId:n,archived:!1}),t=this.addAssessment):"curriculum"===r&&(i=new Curriculum({name:s,_id:n,curriculumId:n}),t=this.addCurriculum),i.save(null,{success:function(e){return function(){return t(i),e.$el.find(".new_form, .new").toggle(),e.$el.find(".new_name").val(""),Utils.midAlert(s+" saved")}}(this),error:function(e){return function(){return e.$el.find(".new_form, .new").toggle(),e.$el.find(".new_name").val(""),Utils.midAlert("Please try again. Error saving.")}}(this)}),!1))},s.prototype.closeViews=function(){return this.assessmentsView.close(),this.curriculaListView.close()},s.prototype.onClose=function(){return this.closeViews()},s}(Backbone.View);


var AssessmentEditView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function s(){this.constructor=e}for(var n in t)hasProp.call(t,n)&&(e[n]=t[n]);return s.prototype=t.prototype,e.prototype=new s,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;AssessmentEditView=function(e){function t(){return this.updateSubtestLegend=bind(this.updateSubtestLegend,this),this.render=bind(this.render,this),this.saveNewSubtest=bind(this.saveNewSubtest,this),this.updateModel=bind(this.updateModel,this),this.save=bind(this.save,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="assessment_edit_view",t.prototype.events={"click #archive_buttons input":"save","click .back":"goBack","click .new_subtest_button":"toggleNewSubtestForm","click .new_subtest_cancel":"toggleNewSubtestForm","keypress #new_subtest_name":"saveNewSubtest","click .new_subtest_save":"saveNewSubtest","change #basic input":"save","click .save":"save"},t.prototype.initialize=function(e){return this.model=e.model,this.subtestListEditView=new SubtestListEditView({assessment:this.model}),this.model.subtests.on("change remove",this.subtestListEditView.render),this.model.subtests.on("all",this.updateSubtestLegend)},t.prototype.save=function(){if(this.updateModel())return this.model.save(null,{success:function(e){return function(){return Utils.midAlert(e.model.get("name")+" saved")}}(this),error:function(e){return function(){return Utils.midAlert("Assessment save error. Please try again.")}}(this)})},t.prototype.goBack=function(){return Tangerine.router.navigate("assessments",!0)},t.prototype.updateModel=function(){var e,t,s,n,i,a,l,o,r,u,d,c,h,b,m,p,v,f;for(m=this.model.subtests.models.length,b=this.$el.find("#sequences").val().replace(/[^0-9,\n]/g,""),h=b.split("\n"),n=a=0,o=h.length;a<o;n=++a){for(d=h[n],d=d.split(","),i=l=0,r=d.length;l<r;i=++l)t=d[i],d[i]=parseInt(t),(d[i]<0||d[i]>=m)&&(u=!0),isNaN(d[i])&&(s=!0);h[n]=d,d.length>m&&(v=!0),d.length<m&&(p=!0),d.length!==_.uniq(d).length&&(e=!0)}return _.isEmpty(_.reject(_.flatten(h),function(e){return isNaN(e)}))?this.$el.find("#sequences").val(""):(c=[],s&&c.push("Some sequences contain empty values."),u&&c.push("Some numbers do not reference a subtest from the legend."),v&&c.push("Some sequences are longer than the total number of all subtests."),p&&c.push("Some sequences are shorter than the total number of all subtests."),e&&c.push("Some sequences contain doubles."),0===c.length?(f=function(){var e,t,s;for(s=[],t=0,e=h.length;t<e;t++)d=h[t],s.push(d.join(", "));return s}().join("\n"),this.$el.find("#sequences").val(f)):alert("Warning\n\n"+c.join("\n"))),this.model.set({sequences:h,archived:"true"===this.$el.find("#archive_buttons input:checked").val(),name:this.$el.find("#assessment_name").val(),dKey:this.$el.find("#assessment_d_key").val(),assessmentId:this.model.id}),!0},t.prototype.toggleNewSubtestForm=function(e){return this.$el.find(".new_subtest_form, .new_subtest_button").toggle(),this.$el.find("#new_subtest_name").val(""),this.$el.find("#subtest_type_select").val("none"),!1},t.prototype.saveNewSubtest=function(e){var t,s,n,i,a;return"click"!==e.type&&13!==e.which||("none"===this.$el.find("#subtest_type_select option:selected").val()?(Utils.midAlert("Please select a subtest type"),!1):(t=Tangerine.templates.get("subtest"),n=Tangerine.templates.get("prototypes")[this.$el.find("#subtest_type_select").val()],i=this.$el.find("#subtest_type_select :selected").attr("data-template"),a=Tangerine.templates.get("subtestTemplates")[this.$el.find("#subtest_type_select").val()][i],t=$.extend(t,n),t=$.extend(t,a),t=$.extend(t,{name:this.$el.find("#new_subtest_name").val(),assessmentId:this.model.id,order:this.model.subtests.length}),s=this.model.subtests.create(t),this.toggleNewSubtestForm(),!1))},t.prototype.render=function(){var e,t,s,n,i,a,l,o,r,u,d,c,h,b;if(r="",this.model.has("sequences")&&(r=this.model.get("sequences"),r=r.join("\n"),_.isArray(r)))for(s=n=0,a=r.length;n<a;s=++n)r=r[s],r[s]=r.join(", ");c=this.updateSubtestLegend(),e=this.model.get("archived"),t=e===!0||"true"===e?"checked":"",l=t?"":"checked",h="<select id='subtest_type_select'> <option value='none' disabled='disabled' selected='selected'>Please select a subtest type</option>",o=Tangerine.templates.get("subtestTemplates");for(i in o){b=o[i],h+="<optgroup label='"+i.humanize()+"'>";for(u in b)d=b[u],h+="<option value='"+i+"' data-template='"+u+"'>"+u+"</option>";h+="</optgroup>"}return h+="</select>",this.$el.html("<button class='back navigation'>Back</button> <h1>Assessment Builder</h1> <div id='basic'> <label for='assessment_name'>Name</label> <input id='assessment_name' value='"+this.model.escape("name")+"'> <label for='assessment_d_key' title='This key is used to import the assessment from a tablet.'>Download Key</label><br> <div class='info_box'>"+this.model.id.substr(-5,5)+"</div> </div> <label title='Only active assessments will be displayed in the main assessment list.'>Status</label><br> <div id='archive_buttons' class='buttonset'> <input type='radio' id='archive_false' name='archive' value='false' "+l+"><label for='archive_false'>Active</label> <input type='radio' id='archive_true'  name='archive' value='true'  "+t+"><label for='archive_true'>Archived</label> </div> <h2>Subtests</h2> <div class='menu_box'> <div> <ul id='subtest_list'> </ul> </div> <button class='new_subtest_button command'>Add Subtest</button> <div class='new_subtest_form confirmation'> <div class='menu_box'> <h2>New Subtest</h2> <label for='subtest_type_select'>Type</label><br> "+h+"<br> <label for='new_subtest_name'>Name</label><br> <input type='text' id='new_subtest_name'> <button class='new_subtest_save command'>Add</button> <button class='new_subtest_cancel command'>Cancel</button> </div> </div> </div> <h2>Options</h2> <div class='label_value'> <label for='sequences' title='This is a list of acceptable orders of subtests, which will be randomly selected each time an assessment is run. Subtest indicies are separated by commas, new lines separate sequences. '>Random Sequences</label> <div id='subtest_legend'>"+c+"</div> <textarea id='sequences'>"+r+"</textarea> </div> <button class='save command'>Save</button>"),this.subtestListEditView.setElement(this.$el.find("#subtest_list")),this.subtestListEditView.render(),this.$el.find("#subtest_list").sortable({handle:".sortable_handle",start:function(e,t){return t.item.addClass("drag_shadow")},stop:function(e,t){return t.item.removeClass("drag_shadow")},update:function(e){return function(t,n){var i,a,l,o,r;for(r=function(){var e,t,s,n;for(s=this.$el.find("#subtest_list li"),n=[],t=0,e=s.length;t<e;t++)o=s[t],n.push($(o).attr("data-id"));return n}.call(e),s=a=0,l=r.length;a<l;s=++a)i=r[s],e.model.subtests.get(i).set({order:s},{silent:!0}).save(null,{silent:!0});return e.model.subtests.sort()}}(this)}),this.trigger("rendered")},t.prototype.updateSubtestLegend=function(){var e,t;return t="",this.model.subtests.each(function(e,s){return t+="<div class='small_grey'>"+s+" - "+e.get("name")+"</div><br>"}),e=this.$el.find("#subtest_legend"),0!==e.length&&e.html(t),t},t.prototype.onClose=function(){return this.subtestListEditView.close()},t}(Backbone.View);


var AssessmentRunView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function s(){this.constructor=e}for(var i in t)hasProp.call(t,i)&&(e[i]=t[i]);return s.prototype=t.prototype,e.prototype=new s,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;AssessmentRunView=function(e){function t(){return this.saveResult=bind(this.saveResult,this),this.reset=bind(this.reset,this),this.step=bind(this.step,this),this.skip=bind(this.skip,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="AssessmentRunView",t.prototype.initialize=function(e){var t,s,i,n,r,o,h;if(this.abortAssessment=!1,this.index=0,this.model=e.model,this.orderMap=[],this.enableCorrections=!1,Tangerine.tempData={},this.rendered={assessment:!1,subtest:!1},Tangerine.activity="assessment run",this.subtestViews=[],this.model.subtests.sort(),this.model.subtests.each(function(e){return function(t){return e.subtestViews.push(new SubtestRunView({model:t,parent:e}))}}(this)),t=this.model.has("sequences")&&!_.isEmpty(_.compact(_.flatten(this.model.get("sequences")))))h=this.model.get("sequences"),n=Tangerine.settings.get("sequencePlaces"),null==n&&(n={}),null==n[this.model.id]&&(n[this.model.id]=0),n[this.model.id]<h.length-1?n[this.model.id]++:n[this.model.id]=0,Tangerine.settings.save("sequencePlaces",n),this.orderMap=h[n[this.model.id]],this.orderMap[this.orderMap.length]=this.subtestViews.length;else for(s=i=0,r=this.subtestViews.length;0<=r?i<=r:i>=r;s=0<=r?++i:--i)this.orderMap[s]=s;return this.result=new Result({assessmentId:this.model.id,assessmentName:this.model.get("name"),blank:!0}),t&&this.result.set({order_map:this.orderMap}),o=new ResultView({model:this.result,assessment:this.model,assessmentView:this}),this.subtestViews.push(o)},t.prototype.render=function(){var e;return e=this.subtestViews[this.orderMap[this.index]],0===this.model.subtests.length?(this.$el.html('<h1>Oops...</h1><p>"'+this.model.get("name")+'" is blank. Perhaps you meant to add some subtests.</p>'),this.trigger("rendered")):(this.$el.html("<h1>"+this.model.get("name")+"</h1> <div id='progress'></div>"),this.$el.find("#progress").progressbar({value:(this.index+1)/(this.model.subtests.length+1)*100}),e.on("rendered",function(e){return function(){return e.flagRender("subtest")}}(this)),e.on("subRendered",function(e){return function(){return e.trigger("subRendered")}}(this)),e.on("next",function(e){return function(){return e.step(1)}}(this)),e.on("back",function(e){return function(){return e.step(-1)}}(this)),e.render(),this.$el.append(e.el)),this.flagRender("assessment")},t.prototype.flagRender=function(e){if(this.rendered[e]=!0,this.rendered.assessment&&this.rendered.subtest)return this.trigger("rendered")},t.prototype.afterRender=function(){var e;return null!=(e=this.subtestViews[this.orderMap[this.index]])&&"function"==typeof e.afterRender?e.afterRender():void 0},t.prototype.onClose=function(){var e,t,s,i;for(s=this.subtestViews,e=0,t=s.length;e<t;e++)i=s[e],i.close();return this.result.clear(),Tangerine.nav.setStudent("")},t.prototype.abort=function(){return this.abortAssessment=!0,this.step(1)},t.prototype.skip=function(){var e;return e=this.subtestViews[this.orderMap[this.index]],this.result.add({name:e.model.get("name"),data:e.getSkipped(),subtestId:e.model.id,skipped:!0,prototype:e.model.get("prototype")},{success:function(e){return function(){return e.reset(1)}}(this)})},t.prototype.step=function(e){var t;return this.abortAssessment?(t=this.subtestViews[this.orderMap[this.index]],void this.saveResult(t)):(t=this.subtestViews[this.orderMap[this.index]],t.isValid()?this.saveResult(t,e):t.showErrors())},t.prototype.reset=function(e){var t;return this.rendered.subtest=!1,this.rendered.assessment=!1,t=this.subtestViews[this.orderMap[this.index]],t.close(),this.index=this.abortAssessment===!0?this.subtestViews.length-1:this.index+e,this.render(),window.scrollTo(0,0)},t.prototype.saveResult=function(e,t){var s,i,n,r,o,h,u,d,a;for(a=e.getResult(),u=e.model.id,r=e.model.get("prototype"),d=null,o=this.result.get("subtestData"),s=i=0,n=o.length;i<n;s=++i)h=o[s],u===h.subtestId&&(d=s);return null!==d?("gps"!==r&&this.result.insert({name:e.model.get("name"),data:a.body,subtestHash:a.meta.hash,subtestId:e.model.id,prototype:e.model.get("prototype")}),this.reset(t)):this.result.add({name:e.model.get("name"),data:a.body,subtestHash:a.meta.hash,subtestId:e.model.id,prototype:e.model.get("prototype")},{success:function(e){return function(){return e.reset(t)}}(this)})},t}(Backbone.View);


var AssessmentImportView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function r(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;AssessmentImportView=function(t){function e(){return this.updateProgress=bind(this.updateProgress,this),this.updateActivity=bind(this.updateActivity,this),this.updateFromActiveTasks=bind(this.updateFromActiveTasks,this),this["import"]=bind(this["import"],this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="AssessmentImportView",e.prototype.events={"click .import":"import","click .back":"back","click .verify":"verify","click .group_import":"groupImport"},e.prototype.groupImport=function(){return $.ajax({url:Tangerine.settings.urlView("local","byDKey"),type:"POST",contentType:"application/json",dataType:"json",data:"{}",success:function(t){return function(e){var r,i,s,n,o;for(s=[],o=e.rows,i=0,n=o.length;i<n;i++)r=o[i],s.push(r.key);return s=_.uniq(s),$.ajax({url:Tangerine.settings.urlView("group","assessmentsNotArchived"),dataType:"jsonp",success:function(e){var r,i,n;return r=_.compact(function(){var t,r,s,n;for(s=e.rows,n=[],t=0,r=s.length;t<r;t++)i=s[t],n.push(i.id.substr(-5,5));return n}()).concat(s).join(" "),n=new Assessment,n.on("status",t.updateActivity),n.updateFromServer(r)},error:function(t,e){return Utils.midAlert("Import error")}})}}(this)})},e.prototype.verify=function(){return Tangerine.user.ghostLogin(Tangerine.settings.upUser,Tangerine.settings.upPass)},e.prototype.initialize=function(t){return this.noun=t.noun,this.connectionVerified=!0,this.docsRemaining=0,this.serverStatus="Ok",this.updateServerStatus(),this.render()},e.prototype.updateServerStatus=function(){return this.$el.find("#server_connection").html(this.serverStatus)},e.prototype.back=function(){return Tangerine.router.landing(),!1},e.prototype["import"]=function(){var t,e;return t=this.$el.find("#d_key").val(),e=this.$el.find("select#group option:selected").attr("data-group")||"","NONE"===e?Utils.midAlert("Please select a group."):(this.newAssessment=new Assessment,this.newAssessment.on("status",this.updateActivity),this.updateActivity(),"IrisCouch"===e?this.newAssessment.updateFromIrisCouch(t):this.newAssessment.updateFromServer(t,e),this.activeTaskInterval=2)},e.prototype.updateFromActiveTasks=function(){return $.couch.activeTasks({success:function(t){return function(e){var r,i,s,n;for(s=[],r=0,i=e.length;r<i;r++)n=e[r],"replication"===n.type.toLowerCase()?(_.isEmpty(n.status)||(t.activity=n.status),s.push(t.updateProgress())):s.push(void 0);return s}}(this)})},e.prototype.updateActivity=function(t,e){var r,i,s,n,o,a,u;return null!=e&&(o=a=i=0,o=e.docs_read,a=e.docs_written,i=e.doc_write_failures,1!==a&&(u="s"),0!==i&&(s="<b>"+i+"</b> failures<br>"),null!=e.no_changes&&e.no_changes===!0&&(r="No changes")),this.$el.find(".status").fadeIn(250),this.activity="","import lookup"===t?this.activity="Finding "+this.noun:"import success"===t?(clearInterval(this.activeTaskInterval),n="Import successful",0===o&&(n="Nothing imported"),this.activity=n+"<br> <b>"+a+"</b> document"+(u||"")+" written<br> "+(s||"")+" "+(r||""),this.updateProgress(null)):"import error"===t&&(clearInterval(this.activeTaskInterval),this.activity="Import error: "+JSON.stringify(e)),this.updateProgress()},e.prototype.updateProgress=function(t,e){var r,i,s;null==e&&(e=$.noop),null!=t&&(null!=this.importList[t]?this.importList[t]++:this.importList[t]=1),r="<table>",i=this.importList;for(t in i)s=i[t],r+="<tr><td>"+t.titleize().pluralize()+"</td><td>"+s+"</td></tr>";return null!=this.activity&&(r+="<tr><td colspan='2'>"+this.activity+"</td></tr>"),r+="</table>",this.$el.find("#progress").html(r),e()},e.prototype.render=function(){var t,e;return t="<select id='group'> <option data-group='NONE' selected='selected'>Please select a group</option> "+Tangerine.user.groups().admin.map(function(t){return"<option data-group='"+_.escape(t)+"'>"+t+"</option>"}).join("")+" </select>",e=this.connectionVerified?"<div class='question'> <label for='d_key'>Download keys</label> <input id='d_key' value=''> "+(t||"")+"<br> <button class='import command'>Import</button> <br> <small>Server connection: <span id='server_connection'>"+this.serverStatus+"</span></small> </div> <div class='confirmation status'> <h2>Status<h2> <div class='info_box' id='progress'></div> </div>":"<section> <p>Please wait while your connection is verified.</p> <button class='command verify'>Try now</button> <p><small>Note: If verification fails, press back to return to previous screen and please try again when internet connectivity is better.</small></p> </section>",this.$el.html("<button class='back navigation'>Back</button> <h1>Tangerine Central Import</h1> "+e),this.trigger("rendered")},e.prototype.onClose=function(){return clearTimeout(this.timer)},e}(Backbone.View);


var AssessmentSyncView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function n(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty,indexOf=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(e in this&&this[e]===t)return e;return-1};AssessmentSyncView=function(t){function e(){return this.ensureCredentials=bind(this.ensureCredentials,this),this.verifyTimeout=bind(this.verifyTimeout,this),this.onVerifySuccess=bind(this.onVerifySuccess,this),this.getDocIds=bind(this.getDocIds,this),this.upload=bind(this.upload,this),this.download=bind(this.download,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="AssessmentSyncView",e.prototype.events={"click .back":"goBack","click .show_details":"showDetails","click .keep":"keep","click .show_login":"showLogin","click .login":"login","click .download":"download","click .upload":"upload"},e.prototype.download=function(){var t,e;return this.ensureCredentials(),t=Tangerine.settings.urlDB("group").replace(/\/\/(.*)@/,"//"+this.user+":"+this.pass+"@"),e=Tangerine.settings.urlDB("local"),this.getDocIds(function(n){return function(i){return $.couch.replicate(t,e,{success:function(t){return Utils.midAlert("Download success"),n.updateConflicts()},error:function(t,e){return Utils.midAlert("Pull Error<br>"+t+" "+e)}},{doc_ids:i})}}(this))},e.prototype.upload=function(){var t,e;return this.ensureCredentials(),t=Tangerine.settings.urlDB("group").replace(/\/\/(.*)@/,"//"+this.user+":"+this.pass+"@"),e=Tangerine.settings.urlDB("local"),this.getDocIds(function(n){return function(i){return $.couch.replicate(e,t,{success:function(t){return Utils.midAlert("Upload success"),n.updateConflicts()},error:function(t,e){return Utils.midAlert("Pull Error<br>"+t+" "+e)}},{doc_ids:i})}}(this))},e.prototype.getDocIds=function(t){var e,n,i,s;return e=Tangerine.settings.urlDB("group").replace(/\/\/(.*)@/,"//"),s=Tangerine.settings.urlDB("local"),i=Tangerine.settings.urlView("local","byDKey"),n=(Tangerine.settings.location.group.db+Tangerine.settings.couch.view+"byDKey").replace(/\/\/(.*)@/,"//"),$.ajax({url:n,type:"GET",dataType:"jsonp",data:{keys:JSON.stringify([this.dKey])},error:function(t){return function(t,e){return Utils.midAlert("Pull error<br>"+t+" "+e)}}(this),success:function(e){return function(n){var s,r,o,a,u;for(r=[],u=n.rows,o=0,a=u.length;o<a;o++)s=u[o],r.push(s.id);return $.ajax({url:i,type:"POST",contentType:"application/json",dataType:"json",data:JSON.stringify({keys:[e.dKey]}),error:function(t,e){return Utils.midAlert("Pull error<br>"+t+" "+e)},success:function(e){var n,i,o;for(o=e.rows,n=0,i=o.length;n<i;n++)s=o[n],r.push(s.id);return r=_.uniq(r),t(r)}})}}(this)})},e.prototype.showLogin=function(){return this.$el.find("#user").val(""),this.$el.find("#pass").val(""),this.$el.find(".login_box").toggleClass("confirmation"),this.$el.find(".show_login").toggle()},e.prototype.onVerifySuccess=function(){return clearTimeout(this.timer),this.connectionVerified=!0,this.$el.find("#connection").html("Ok"),this.$el.find(".show_login").toggle(),this.$el.find(".loads").removeClass("confirmation")},e.prototype.login=function(){return this.user=this.$el.find("#user").val(),this.pass=this.$el.find("#pass").val(),Tangerine.settings.save({server_user:this.user,server_pass:this.pass}),Tangerine.user.ghostLogin(this.user,this.pass)},e.prototype.verifyTimeout=function(){return this.$el.find("#connection").html(this.loginButton({status:"<br>Failed. Check connection or try again."})),this.$el.find(".loads").addClass("confirmation"),this.removeCredentials()},e.prototype.keep=function(t){var e,n,i,s,r,o,a,u,l,c,d,h,p;if(confirm("This will permanently remove the other versions, are you sure?")){for(this.deletedCount=0,this.toDeleteCount=0,e=$(t.target),i=e.attr("data-docId"),s=e.attr("data-docRev"),r=_.indexBy("_id",this.loadedDocs),c=function(t){return function(e){if(t.deletedCount++,t.deletedCount===t.toDeleteCount)return t.updateConflicts()}}(this),d=r[i],o=0,u=d.length;o<u;o++)n=d[o],n._rev!==s&&this.toDeleteCount++;for(h=r[i],p=[],a=0,l=h.length;a<l;a++)n=h[a],n._rev!==s&&p.push(Tangerine.$db.removeDoc({_id:n._id,_rev:n._rev},{success:function(t){return function(t){return c(t)}}(this),error:function(t){return function(t,e){return Utils.alert("Error<br>"+t+"<br>"+e)}}(this)}));return p}},e.prototype.showDetails=function(t){var e,n;return e=$(t.target),n=e.attr("data-docRev"),this.$el.find("#table_"+n).toggleClass("confirmation")},e.prototype.initialize=function(t){return this.readyTemplates(),this.docList=[],this.assessment=t.assessment,this.dKey=this.assessment.id.substr(-5,5),this.connectionVerified=!1,this.timer=setTimeout(this.verifyTimeout,2e4),this.ensureCredentials()},e.prototype.ensureCredentials=function(){if(Tangerine.settings.get("server_user")&&Tangerine.settings.get("server_pass"))return this.user=Tangerine.settings.get("server_user"),this.pass=Tangerine.settings.get("server_pass")},e.prototype.goBack=function(){return Tangerine.router.landing()},e.prototype.render=function(){var t,e;return e=this.assessment.getEscapedString("name"),Tangerine.settings.getBoolean("satelliteMode")&&(t="<div class='info_box grey'> Server connection<br> <span id='connection'>"+this.loginButton({status:"Checking..."})+"</span> </div>"),this.$el.html("<button class='back navigation'>Back</button> <h1>Assessment Sync</h1> <h2>"+e+"</h2> "+(t||"")+" <br> <div class='loads confirmation'> <div class='menu_box'> <button class='command upload'>Upload</button><br> <button class='command download'>Download</button> </div> </div> <h2>Conflicts</h2> <div id='conflicts'></div>"),this.updateConflicts(),this.trigger("rendered")},e.prototype.afterRender=function(){return this.user&&this.pass?$.ajax({url:Tangerine.settings.urlView("group","byDKey").replace(/\/\/(.*)@/,"//"+this.user+":"+this.pass+"@"),dataType:"jsonp",data:{keys:["testtest"]},timeout:15e3,success:function(t){return function(){return clearTimeout(t.timer),t.onVerifySuccess()}}(this)}):(clearTimeout(this.timer),this.verifyTimeout())},e.prototype.updateConflicts=function(){return Utils.working(!0),Tangerine.$db.view(Tangerine.design_doc+"/conflictsByDKey",{error:function(t,e){return Utils.midAlert("Error<br>"+t+"<br>"+e),Utils.working(!1)},success:function(t){return function(e){var n,i,s,r,o;if(Utils.working(!1),0===e.rows.length)return void t.$el.find("#conflicts").html("<div class='grey'>None</div>");for(t.loadedDocs=[],o=_.pluck(e.rows,"value"),s=function(e){var n,i,s,r,a,u,l,c,d,h,p,f,g,y,m,v,b,T;if(t.loadedDocs.push(e),b=o.length,t.loadedDocs.length===b){c="",u=_.indexBy("_id",t.loadedDocs),r=1;for(a in u){for(s=u[a],c+="<b>Document Conflict "+r+" "+s[0].collection.capitalize()+"</b>",n={},d=0,f=s.length;d<f;d++){m=s[d];for(p in m)T=m[p],null==n[p]&&(n[p]=[]),n[p].push(JSON.stringify(T))}i=[];for(p in n)T=n[p],_.uniq(T).length>1&&i.push(p);for(v=1,h=0,g=s.length;h<g;h++){m=s[h],y={};for(p in m)T=m[p],"_rev"!==p&&"_id"!==p&&"hash"!==p&&"updated"!==p&&"editedBy"!==p&&"assessmentId"!==p&&"curriculumId"!==p&&(y[p]=T);c+="<div class='menu_box'> <h3>Version "+v++ +"</h3> <table class='conflict_table'> <tr><td><b>"+m.name+"</b></td><td><button class='command keep' data-docId='"+m._id+"' data-docRev='"+m._rev+"'>Keep</button></td></tr> <tr><th>Updated</th><td>"+m.updated+"</td></tr> <tr><th>Edited by</th><td>"+m.editedBy+"</td></tr> </table> <button class='command show_details' data-docRev='"+m._rev+"'>Show details</button> <table class='confirmation conflict_table' id='table_"+m._rev+"'>";for(p in y)T=y[p],l=indexOf.call(i,p)>=0?"<b class='conflict_key'>"+p+"</b>":p,c+="<tr><th>"+l+"</th><td>"+JSON.stringify(T)+"</td></tr>";c+="</table> </div>"}r++}return t.$el.find("#conflicts").html(c)}},n=0,i=o.length;n<i;n++)r=o[n],$.ajax({url:"/"+Tangerine.db_name+"/"+r._id+"?rev="+r._rev,type:"get",dataType:"json",success:function(t){return s(t)}})}}(this)}),{}},e.prototype.onClose=function(){return clearTimeout(this.timer)},e.prototype.removeCredentials=function(){return Tangerine.settings.unset("server_user"),Tangerine.settings.unset("server_pass"),Tangerine.settings.save()},e.prototype.readyTemplates=function(){return this.loginButton=_.template("{{status}} <button class='command show_login'>Login</button><br> <div class='confirmation login_box'> <div> <label for='user'>Username</label><input id='user' type='text'><br> <label for='pass'>Password</label><input id='pass' type='password'> <button class='command login'>Login</button> </div> </div>")},e}(Backbone.View);


var AssessmentDataEntryView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function s(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;AssessmentDataEntryView=function(t){function e(){return this.saveResult=bind(this.saveResult,this),this.updateCurrent=bind(this.updateCurrent,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.events={"change #subtest_select":"updateCurrent","click .prev_subtest":"prevSubtest","click .next_subtest":"nextSubtest","click .save":"saveResult"},e.prototype.prevSubtest=function(){var t;if(t=document.getElementById("subtest_select"),0!==t.selectedIndex)return t.selectedIndex=t.selectedIndex-1,this.updateCurrent()},e.prototype.nextSubtest=function(){var t;if(t=document.getElementById("subtest_select"),t.selectedIndex!==$("#subtest_select option").length-1)return t.selectedIndex=t.selectedIndex+1,this.updateCurrent()},e.prototype.initialize=function(t){var e,s;this.savedOn={};for(e in t)s=t[e],this[e]=s;return this.result=new Result({assessmentId:this.assessment.id,dataEntry:!0,blank:!0}),this.views=[],this.viewsBySubtestId={}},e.prototype.render=function(){var t,e,s,n,r,i,u,o,a;for(i="<button class='prev_subtest'>&lt;</button> <select id='subtest_select'> "+function(){var e,s,n,r;for(n=this.assessment.subtests.models,r=[],t=e=0,s=n.length;e<s;t=++e)u=n[t],r.push("<option data-subtestId='"+u.id+"' "+(0===t?"selected='selected'":"")+">"+u.get("name")+"</option>");return r}.call(this).join("")+" </select> <button class='next_subtest'>&gt;</button> <br>",o="<section id='current_subtest'> "+function(){var t,e,s,n;for(s=this.assessment.subtests.models,n=[],t=0,e=s.length;t<e;t++)u=s[t],n.push("<div id='"+u.id+"' class='confirmation subtest_container'></div>");return n}.call(this).join("")+" </section>",this.$el.html("<a href='#assessments'><button class='navigation'>Back</button></a><br> <h1>"+this.assessment.escape("name")+"</h1> "+i+" <button class='command save'>Save</button> <small class='small_grey last_saved'></small> "+o),r=this.assessment.subtests.models,e=0,s=r.length;e<s;e++)u=r[e],n=u.get("prototype"),this[n+"Init"](u);return this.$subEl=this.$el.find("#current_subtest"),this.updateCurrent(),this.result.set("subtestData",function(){var t,e,s,n;for(s=this.views,n=[],t=0,e=s.length;t<e;t++)a=s[t],n.push(this.subtestDataObject(a.model));return n}.call(this)),this.result.add({name:"Assessment complete",prototype:"complete",data:{comment:"Data entry feature",end_time:(new Date).getTime()},subtestId:"result"}),this.trigger("rendered")},e.prototype.updateCurrent=function(){return Utils.working(!0),this.saveResult({error:function(t){return function(){return Utils.midAlert("Result save error"),Utils.working(!1)}}(this),success:function(t){return function(){return Utils.working(!1),t.subtestId=t.$el.find("#subtest_select option:selected").attr("data-subtestId"),t.$subEl.find(".subtest_container").hide(),t.$subEl.find("#"+t.subtestId).show(),t.subtest=t.assessment.subtests.get(t.subtestId),t.trigger("rendered"),t.savedOn[t.subtestId]=!0}}(this)})},e.prototype.saveResult=function(t){return null==t&&(t={}),null==this.subtest?t.success():(this.result.insert(this.subtestDataObject(this.subtest)),this.result.save(null,{success:function(e){return function(s){return e.$el.find(".last_saved").html("Last saved: "+moment(new Date(e.result.get("updated"))).format("MMM DD HH:mm")),"function"==typeof t.success?t.success(s):void 0}}(this),error:function(e){return function(e,s){return console.log("save error"),console.log(arguments),"function"==typeof t.error?t.error(e,s):void 0}}(this)}))},e.prototype.updateCompletedResult=function(){var t;if(_.keys(this.savedOn).length===this.views.length)return t={name:"Assessment complete",prototype:"complete",data:{comment:this.$el.find("#additional_comments").val()||"",end_time:(new Date).getTime()},subtestId:"result"},this.completedAlready?(this.result.insert(t),this.resultSave()):(this.result.add(t),this.completedAlready=!0)},e.prototype.subtestDataObject=function(t){var e;return e=this.viewsBySubtestId[t.id],{name:t.get("name"),data:e.getResult(),subtestHash:t.get("hash"),subtestId:t.id,prototype:t.get("prototype")}},e.prototype.gridInit=function(t){var e;return e=new GridRunView({model:t,dataEntry:!0}),this.addRenderView(e,t)},e.prototype.surveyInit=function(t){var e;return e=new SurveyRunView({model:t,dataEntry:!0,parent:{gridWasAutostopped:function(){return!1}}}),this.addRenderView(e,t)},e.prototype.locationInit=function(t){var e;return e=new LocationRunView({model:t,dataEntry:!0}),this.addRenderView(e,t)},e.prototype.datetimeInit=function(t){var e;return e=new DatetimeRunView({model:t,dataEntry:!0}),this.addRenderView(e,t)},e.prototype.idInit=function(t){var e;return e=new IdRunView({model:t,dataEntry:!0}),this.addRenderView(e,t)},e.prototype.consentInit=function(t){var e;return e=new ConsentRunView({model:t,dataEntry:!0}),this.addRenderView(e,t)},e.prototype.addRenderView=function(t,e){var s;return s=this.$el.find("#"+e.id),t.setElement(s),t.render(),this.viewsBySubtestId[e.id]=t,this.views.push(t)},e}(Backbone.View);


var WidgetRunView,extend=function(t,e){function s(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;WidgetRunView=function(e){function s(){return s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="WidgetRunView",s.prototype.initialize=function(t){return this.i18n(),this.model=t.model},s.prototype.events={"click .saveToCouchDB":"save"},s.prototype.i18n=function(){return this.text={save:t("WidgetRunView.button.save"),saved:t("WidgetRunView.button.saved")}},s.prototype.save=function(){var t;if(console.log("save to Couchdb"),t=$(".assessment-widget-result").html(),this.model=new Result(JSON.parse(t)),this.model.save())return Tangerine.activity="",Utils.midAlert(this.text.saved)},s.prototype.render=function(){$("#footer").hide(),this.$el.html("<div class='assessment'></div> <p><button id='saveToCouchDB' class='saveToCouchDB'>"+this.text.save+"</button></p> <div class='assessment-widget-result'></div>"),this.$assessmentWidget=$(document.createElement("iframe")),this.$assessmentWidget.attr("src","/client/index.html#widget"),this.$assessmentWidget.attr("data-assessment",JSON.stringify(this.model)),this.$assessmentWidget.attr("data-result","{}"),this.$assessmentWidget.attr("width","100%"),this.$assessmentWidget.attr("height",800),this.$assessmentWidget.attr("id","client-widget"),this.$assessmentWidget.on("result:save:widget",function(t){return console.log("Final save"),$("#saveToCouchDB").show(),$(".assessment-widget-result").html(t.target.getAttribute("data-result"))}),this.$assessmentWidget.on("result:another:widget",function(t){return console.log("Give me another."),document.location.reload()}),this.$el.find(".assessment").append(this.$assessmentWidget),this.trigger("rendered")},s}(Backbone.View);


var Subtest,extend=function(t,e){function s(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;Subtest=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.url="subtest",e.prototype.initialize=function(t){if(this.templates=Tangerine.templates.get("prototypeTemplates"),this.has("surveyAttributes")&&this.get("assessmentId")!==this.get("surveyAttributes").assessmentId)return this.save("surveyAttributes",{_id:this.id,assessmentId:this.get("assessmentId")})},e.prototype.loadPrototypeTemplate=function(t){var e,s,r;s=this.templates[t];for(e in s)r=s[e],this.set(e,r);return this.save()},e.prototype.copyTo=function(t){var e,s,r,n,i;return e=t.assessmentId,s=t.callback,i=t.order||0,n=this.clone(),r=Utils.guid(),n.has("surveyAttributes")&&n.set("surveyAttributes",{_id:r,assessmentId:e}),n.save({_id:r,assessmentId:e,order:i,gridLinkId:""},{success:function(t){return function(){var n;return n=new Questions,n.fetch({key:t.get("assessmentId"),error:function(){return Utils.sticky("There was an error copying.")},success:function(n){var i,o;return o=n.where({subtestId:t.id}),(i=function(){var t,n;return n=o.pop(),n?(t=n.clone(),t.save({assessmentId:e,_id:Utils.guid(),subtestId:r},{success:function(){return i()},error:function(){return Utils.sticky("There was an error copying.")}})):(Utils.midAlert("Subtest copied"),s())})()}})}}(this)})},e}(Backbone.Model);


var Subtests,extend=function(t,r){function e(){this.constructor=t}for(var o in r)hasProp.call(r,o)&&(t[o]=r[o]);return e.prototype=r.prototype,t.prototype=new e,t.__super__=r.prototype,t},hasProp={}.hasOwnProperty;Subtests=function(t){function r(){return r.__super__.constructor.apply(this,arguments)}return extend(r,t),r.prototype.url="subtest",r.prototype.model=Subtest,r.prototype.db={view:"subtestsByAssessmentId"},r.prototype.comparator=function(t){return t.has("curriculumId")?100*parseInt(t.get("part"))+parseInt(t.get("order")):parseInt(t.get("order"))},r.prototype.initialize=function(t){},r.prototype.fetch=function(t){return r.__super__.fetch.call(this,t)},r.prototype.ensureOrder=function(){var t,r,e,o,n,s,p,u,i;if(i=function(){var t,r,e,n;for(e=this.models,n=[],t=0,r=e.length;t<r;t++)o=e[t],n.push(o.get("order"));return n}.call(this).join(""),n=function(){var r,e,n,s;for(n=this.models,s=[],t=r=0,e=n.length;r<e;t=++r)o=n[t],s.push(t);return s}.call(this).join(""),i!==n){for(s=this.models,p=[],t=r=0,e=s.length;r<e;t=++r)u=s[t],u.set("order",t),p.push(u.save());return p}},r}(Backbone.Collection);


var SubtestListEditView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function s(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;SubtestListEditView=function(t){function e(){return this.deleteSubtest=bind(this.deleteSubtest,this),this.copySubtest=bind(this.copySubtest,this),this.render=bind(this.render,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="SubtestListEditView",e.prototype.tagName="ul",e.prototype.initialize=function(t){return this.assessment=t.assessment,this.views=[]},e.prototype.render=function(){return this.closeViews(),this.assessment.subtests.sort(),this.assessment.subtests.each(function(t){return function(e){var s;return s=new SubtestListElementView({subtest:e}),t.views.push(s),s.render(),s.on("subtest:delete",t.deleteSubtest),s.on("subtest:copy",t.copySubtest),t.$el.append(s.el)}}(this))},e.prototype.copySubtest=function(t,e){var s,n;return Utils.midAlert("Copying..."),s=this.views.filter(function(t){return t.selected===!0}).map(function(t){return t.model}),0===s.length&&(s=[this.assessment.subtests.get(e)]),n=0,(new Subtests).fetch({key:t,success:function(e){return function(e){var r,i;return n=e.length,i=0,(r=function(){var e;return s.length?(e=s.shift(),i++,e.copyTo({assessmentId:t,order:n+i,callback:function(){return r()}})):Tangerine.router.navigate("edit/"+t,!0)})()}}(this)})},e.prototype.deleteSubtest=function(t){return this.assessment.subtests.remove(t),t.destroy()},e.prototype.closeViews=function(){var t,e,s,n;for(s=this.views,t=0,e=s.length;t<e;t++)n=s[t],n.close();return this.views=[]},e}(Backbone.View);


var SubtestListElementView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function s(){this.constructor=e}for(var o in t)hasProp.call(t,o)&&(e[o]=t[o]);return s.prototype=t.prototype,e.prototype=new s,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;SubtestListElementView=function(e){function t(){return this.populateAssessmentSelector=bind(this.populateAssessmentSelector,this),this.fetchAssessments=bind(this.fetchAssessments,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="subtest_element",t.prototype.tagName="li",t.prototype.events={"click .icon_edit":"edit","click .icon_delete":"toggleDeleteConfirm","click .delete_cancel":"toggleDeleteConfirm","click .delete_delete":"delete","click .icon_copy":"openCopyMenu","click .do_copy":"doCopy","click .cancel_copy":"cancelCopy","click .name":"toggleSelected"},t.prototype.toggleSelected=function(){return this.selected===!0?(this.selected=!1,this.$el.removeClass("subtest-selected")):(this.selected=!0,this.$el.addClass("subtest-selected"))},t.prototype.toggleDeleteConfirm=function(){return this.$el.find(".delete_confirm").fadeToggle(250),!1},t.prototype["delete"]=function(){return this.trigger("subtest:delete",this.model),!1},t.prototype.edit=function(){return Tangerine.router.navigate("subtest/"+this.model.id,!0)},t.prototype.initialize=function(e){return this.model=e.subtest,this.group=e.group,this.$el.attr("data-id",this.model.id)},t.prototype.openCopyMenu=function(){return this.$el.find(".copy_menu").removeClass("confirmation"),this.$el.find(".copy_select").append("<option disabled='disabled' selected='selected'>Loading assessments...</option>"),this.fetchAssessments()},t.prototype.fetchAssessments=function(){return this.groupAssessments=new Assessments,this.groupAssessments.fetch({key:this.group,success:function(e){return function(){return e.populateAssessmentSelector()}}(this)})},t.prototype.populateAssessmentSelector=function(){var e,t,s,o,n,i;for(n="",i=this.groupAssessments.models,s=0,o=i.length;s<o;s++)t=i[s],n+="<option data-assessmentId='"+t.id+"'>"+t.get("name")+"</option>";return e=this.$el.find(".copy_select").html(n)},t.prototype.doCopy=function(e){return this.trigger("subtest:copy",this.$el.find(".copy_select :selected").attr("data-assessmentId"),this.model.id),this.$el.find(".copy_menu").addClass("confirmation")},t.prototype.cancelCopy=function(){return this.$el.find(".copy_menu").addClass("confirmation")},t.prototype.render=function(){var e,t,s,o,n,i,c,l;return l="<span class='name'>"+this.model.get("name")+"</span>",c="<span class='small_grey'>"+this.model.get("prototype")+"</span>",n="<img src='images/icon_drag.png' title='Drag to reorder' class='icon sortable_handle'>",i="<img src='images/icon_edit.png' title='Edit' class='icon icon_edit'>",o="<img src='images/icon_delete.png' title='Delete' class='icon icon_delete'>",e="<img src='images/icon_copy_to.png' title='Copy to...' class='icon icon_copy'>",t="<div class='confirmation copy_menu'><select class='copy_select'></select><br><button class='do_copy command'>Copy</button> <button class='cancel_copy command'>Cancel</button></div>",s="<br><span class='delete_confirm'><div class='menu_box'>Confirm <button class='delete_delete command_red'>Delete</button> <button class='delete_cancel command'>Cancel</button></div></span>",this.$el.html("<table><tr> <td>"+n+"</td> <td> "+l+" "+c+" "+i+" "+e+" "+o+" "+s+" "+t+" </td> </tr></table>"),this.trigger("rendered")},t}(Backbone.View);


var SubtestEditView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function i(){this.constructor=t}for(var a in e)hasProp.call(e,a)&&(t[a]=e[a]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;SubtestEditView=function(t){function e(){return this.save=bind(this.save,this),this.goBack=bind(this.goBack,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="subtest_edit",e.prototype.events={"click .back_button":"goBack","click .save_subtest":"saveSubtest","click .richtext_edit":"richtextEdit","click .richtext_save":"richtextSave","click .richtext_cancel":"richtextCancel","change #display_code":"validateSyntax"},e.prototype.richtextConfig=[{key:"enumerator",attributeName:"enumeratorHelp"},{key:"dialog",attributeName:"studentDialog"},{key:"transition",attributeName:"transitionComment"}],e.prototype.initialize=function(t){return this.activity=null,this.timer=0,this.richtextKeys=_.pluck(this.richtextConfig,"key"),this.model=t.model,this.assessment=t.assessment,this.config=Tangerine.config.subtest,t.parent=this,this.prototypeViews=Tangerine.config.get("prototypeViews"),this.prototypeEditor=new(window[this.prototypeViews[this.model.get("prototype")].edit])(t),this.prototypeEditor.on("question-edit",function(t){return function(e){return t.save({questionSave:!1,success:function(){return Tangerine.router.navigate("question/"+e,!0)}})}}(this))},e.prototype.goBack=function(){return Tangerine.router.navigate("edit/"+this.model.get("assessmentId"),!0)},e.prototype.validateSyntax=function(t){var e,i,a,o,r,n,s;if(e=$(t.target),i=e.val(),!_.isEmpty(i))try{return n=this.answer,this.answer={},this.isValid=CoffeeScript.compile.apply(this,[i]),null!=n?this.answer=n:delete this.answer}catch(l){return a=l,r=/function (.{1,})\(/.exec(a.constructor.toString())[1],s=e.attr("id").humanize(),o=a.message,alert("Error in "+s+"\n\n"+r+"\n\n"+o)}},e.prototype.getRichtextConfig=function(t){var e,i,a;return _.isString(t)?a=t:(e=$(t.target),a=e.parent().attr("data-richtextKey")||e.parent().parent().attr("data-richtextKey")),i=_.where(this.richtextConfig,{key:a})[0].attributeName,{dataKey:a,attributeName:i}},e.prototype.richtextEdit=function(t){var e;return e=this.getRichtextConfig(t),this.$el.find("."+e.dataKey+"_preview, ."+e.dataKey+"_edit, ."+e.dataKey+"_buttons").fadeToggle(250),null==this.editor&&(this.editor={}),this.$el.find("textarea#"+e.dataKey+"_textarea").html(this.model.escape(e.attributeName)||""),this.editor[e.dataKey]=CKEDITOR.replace(e.dataKey+"_textarea")},e.prototype.richtextSave=function(t){var e,i;return e=this.getRichtextConfig(t),i={},i[e.attributeName]=this.editor[e.dataKey].getData(),this.model.save(i,{success:function(t){return function(){return t.richtextCancel(e.dataKey)}}(this),error:function(t){return function(){return alert("Save error. Please try again.")}}(this)})},e.prototype.richtextCancel=function(t){var e,i;return i=this.getRichtextConfig(t),e=$("div."+i.dataKey+"_preview"),e.html(this.model.get(i.attributeName)||""),e.fadeIn(250),this.$el.find("button."+i.dataKey+"_edit, ."+i.dataKey+"_buttons").fadeToggle(250),this.editor[i.dataKey].destroy()},e.prototype.saveSubtest=function(){return this.save()},e.prototype.save=function(t){var e,i;return null==t&&(t={}),null===this.activity&&(this.activity="saving",t.prototypeSave=null==t.prototypeSave||t.prorotypeSave,i=this.model.get("prototype"),this.model.set({name:this.$el.find("#subtest_name").val(),enumeratorHelp:this.$el.find("#enumerator_help").val(),studentDialog:this.$el.find("#student_dialog").val(),transitionComment:this.$el.find("#transition_comment").val(),skippable:"true"===this.$el.find("#skip_radio input:radio[name=skippable]:checked").val(),rtl:"true"===this.$el.find("#rtl_radio input:radio[name=rtl]:checked").val(),backButton:"true"===this.$el.find("#back_button_radio input:radio[name=back_button]:checked").val(),enumeratorHelp:this.$el.find("#enumerator_textarea").val(),studentDialog:this.$el.find("#dialog_textarea").val(),transitionComment:this.$el.find("#transition_textarea").val(),language:this.$el.find("#language").val(),displayCode:this.$el.find("#display_code").val(),fontFamily:this.$el.find("#font_family").val()}),this.prototypeEditor.save(t),this.prototypeEditor.isValid()===!1?(Utils.midAlert("There are errors on this page"),"function"==typeof(e=this.prototypeEditor).showErrors&&e.showErrors(),this.activity=null):this.model.save(null,{success:function(e){return function(){return e.activity=null,t.success?t.success():(Utils.midAlert("Subtest Saved"),clearTimeout(e.timer),e.timer=setTimeout(e.goBack,1e3))}}(this),error:function(e){return function(){return e.activity=null,null!=t.error?t.error():Utils.midAlert("Save error")}}(this)}))},e.prototype.render=function(){var t,e,i,a,o,r,n,s,l,d,u,c,p,h,b;return t=this.assessment.escape("name"),d=this.model.escape("name"),u=this.model.get("prototype"),r=this.model.getString("enumeratorHelp"),a=this.model.getString("studentDialog"),b=this.model.getString("transitionComment"),h=this.model.getBoolean("skippable"),c=this.model.getBoolean("rtl"),e=this.model.getBoolean("backButton"),n=this.model.getEscapedString("fontFamily"),o=this.model.getString("displayCode"),l=this.model.getString("language"),s=Tangerine.settings.getEscapedString("groupHandle"),p="","grid"===u&&(p="<div class='label_value'> <label>Right-to-Left direction</label><br> <div class='menu_box'> <div id='rtl_radio' class='buttonset'> <label for='rtl_true'>Yes</label><input name='rtl' type='radio' value='true' id='rtl_true' "+(c?"checked":void 0)+"> <label for='rtl_false'>No</label><input name='rtl' type='radio' value='false' id='rtl_false' "+(c?void 0:"checked")+"> </div> </div> </div>"),this.$el.html("<h1>Subtest Editor</h1> <table class='basic_info'> <tr> <th>Group</th> <td>"+s+"</td> </tr> <tr> <th>Assessment</th> <td>"+t+"</td> </tr> </table> <button class='save_subtest command'>Done</button> <div id='subtest_edit_form' class='edit_form'> <div class='label_value'> <label for='subtest_name'>Name</label> <input id='subtest_name' value='"+d+"'> </div> <div class='label_value'> <label for='subtest_prototype' title='This is a basic type of subtest. (e.g. Survey, Grid, Location, Id, Consent). This property is set in assessment builder when you add a subtest. It is unchangeable.'>Prototype</label><br> <div class='info_box'>"+u+"</div> </div> <div class='label_value'> <label for='language'>Language code</label> <input id='language' value='"+l+"'> </div> <div class='label_value'> <label>Skippable</label><br> <div class='menu_box'> <div id='skip_radio' class='buttonset'> <label for='skip_true'>Yes</label><input name='skippable' type='radio' value='true' id='skip_true' "+(h?"checked":void 0)+"> <label for='skip_false'>No</label><input name='skippable' type='radio' value='false' id='skip_false' "+(h?void 0:"checked")+"> </div> </div> </div> "+(p||"")+" <div class='label_value'> <label>Display Back button</label><br> <div class='menu_box'> <div id='back_button_radio' class='buttonset'> <label for='back_button_true'>Yes</label><input name='back_button' type='radio' value='true' id='back_button_true' "+(e?"checked":void 0)+"> <label for='back_button_false'>No</label><input name='back_button' type='radio' value='false' id='back_button_false' "+(e?void 0:"checked")+"> </div> </div> </div> <div class='label_value' data-richtextKey='enumerator'> <label for='enumerator_textarea' title='If text is supplied, a help button will appear at the top of the subtest as a reference for the enumerator. If you are pasting from word it is recommended to paste into a plain text editor first, and then into this box.'>Enumerator help <button class='richtext_edit command'>Edit</button></label> <div class='info_box_wide enumerator_preview'>"+r+"</div> <textarea id='enumerator_textarea' class='confirmation'>"+r+"</textarea> <div class='enumerator_buttons confirmation'> <button class='richtext_save command'>Save</button> <button class='richtext_cancel command'>Cancel</button> </div> </div> <div class='label_value' data-richtextKey='dialog'> <label for='dialog_textarea' title='Generally this is a script that will be read to the student. If you are pasting from word it is recommended to paste into a plain text editor first, and then into this box.'>Student Dialog <button class='richtext_edit command'>Edit</button></label> <div class='info_box_wide dialog_preview'>"+a+"</div> <textarea id='dialog_textarea' class='confirmation'>"+a+"</textarea> <div class='dialog_buttons confirmation'> <button class='richtext_save command'>Save</button> <button class='richtext_cancel command'>Cancel</button> </div> </div> <div class='label_value' data-richtextKey='transition'> <label for='transition_testarea' title='This will be displayed with a grey background above the next button, similar to the student dialog text. If you are pasting from Word it is recommended to paste into a plain text editor first, and then into this box.'>Transition Comment <button class='richtext_edit command'>Edit</button></label> <div class='info_box_wide transition_preview'>"+b+"</div> <textarea id='transition_textarea' class='confirmation'>"+b+"</textarea> <div class='transition_buttons confirmation'> <button class='richtext_save command'>Save</button> <button class='richtext_cancel command'>Cancel</button> </div> </div> <div class='label_value'> <label for='font_family' title='Please be aware that whatever font is specified, must be available on the user`s system. When multiple fonts are entered separated by commas, they are ranked in order of preference from left to right. Font names with spaces must be wrapped in double quotes.'>Preferred font</label> <input id='font_family' value='"+n+"'> </div> <div class='menu_box'> <div class='label_value'> <label for='display_code' title='This CoffeeScript code will be executed when this question is shown. This option may only be used when Focus Mode is on.'>Action on display</label> <textarea id='display_code'>"+o+"</textarea> </div> </div> </div> <div id='prototype_attributes'></div> <button class='save_subtest command'>Done</button>"),this.prototypeEditor.setElement(this.$el.find("#prototype_attributes")),"function"==typeof(i=this.prototypeEditor).render&&i.render(),this.trigger("rendered")},e.prototype.afterRender=function(){var t;return null!=(t=this.prototypeEditor)&&"function"==typeof t.afterRender?t.afterRender():void 0},e.prototype.onClose=function(){var t;return"function"==typeof(t=this.prototypeEditor).close?t.close():void 0},e}(Backbone.View);


var SubtestRunView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function o(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return o.prototype=e.prototype,t.prototype=new o,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;SubtestRunView=function(e){function o(){return this.hideNext=bind(this.hideNext,this),this.showNext=bind(this.showNext,this),this.afterRender=bind(this.afterRender,this),this.flagRender=bind(this.flagRender,this),o.__super__.constructor.apply(this,arguments)}return extend(o,e),o.prototype.className="SubtestRunView",o.prototype.events={"click .subtest-next":"next","click .subtest-back":"back","click .subtest_help":"toggleHelp","click .skip":"skip"},o.prototype.toggleHelp=function(){return this.$el.find(".enumerator_help").fadeToggle(250)},o.prototype.i18n=function(){return this.text={next:t("SubtestRunView.button.next"),back:t("SubtestRunView.button.back"),skip:t("SubtestRunView.button.skip"),help:t("SubtestRunView.button.help")}},o.prototype.initialize=function(t){return this.i18n(),this.protoViews=Tangerine.config.get("prototypeViews"),this.model=t.model,this.parent=t.parent,""!==this.model.get("fontFamily")&&(this.fontStyle='style="font-family: '+this.model.get("fontFamily")+' !important;"'),this.prototypeRendered=!1},o.prototype.render=function(){var t,e;return t=function(t){return function(){var e,o,n,r,i,s,p;return t.delegateEvents(),n=""!==(t.model.get("enumeratorHelp")||"")?"<button class='subtest_help command'>"+t.text.help+"</button><div class='enumerator_help' "+(t.fontStyle||"")+">"+t.model.get("enumeratorHelp")+"</div>":"",s=""!==(t.model.get("studentDialog")||"")?"<div class='student_dialog' "+(t.fontStyle||"")+">"+t.model.get("studentDialog")+"</div>":"",p=""!==(t.model.get("transitionComment")||"")?"<div class='student_dialog' "+(t.fontStyle||"")+">"+t.model.get("transitionComment")+"</div> <br>":"",i=t.model.get("skippable")===!0||"true"===t.model.get("skippable"),o=(t.model.get("backButton")===!0||"true"===t.model.get("backButton"))&&0!==t.parent.index,i&&(r="<button class='skip navigation'>"+t.text.skip+"</button>"),o&&(e="<button class='subtest-back navigation'>"+t.text.back+"</button>"),t.$el.html("<h2>"+t.model.get("name")+"</h2> "+n+" "+s+" <div id='prototype_wrapper'></div> <div class='controlls clearfix'> "+p+" "+(e||"")+" <button class='subtest-next navigation'>"+t.text.next+"</button> "+(r||"")+" </div>"),t.prototypeView=new(window[t.protoViews[t.model.get("prototype")].run])({model:t.model,parent:t}),t.prototypeView.on("rendered",function(){return t.flagRender("prototype")}),t.prototypeView.on("subRendered",function(){return t.trigger("subRendered")}),t.prototypeView.on("showNext",function(){return t.showNext()}),t.prototypeView.on("hideNext",function(){return t.hideNext()}),t.prototypeView.on("ready",function(){return t.prototypeRendered=!0}),t.prototypeView.setElement(t.$el.find("#prototype_wrapper")),t.prototypeView.render(),t.flagRender("subtest")}}(this),e=this.model.has("language")&&""!==this.model.get("language")?this.model.get("language"):Tangerine.settings.get("language"),"undefined"==typeof Tangerine.locales[e]&&(e=Tangerine.settings.get("language")),Utils.changeLanguage(e,function(e,o){return window.t=o,t()})},o.prototype.flagRender=function(t){if(this.renderFlags||(this.renderFlags={}),this.renderFlags[t]=!0,this.renderFlags.subtest&&this.renderFlags.prototype)return this.trigger("rendered")},o.prototype.afterRender=function(){var t;return null!=(t=this.prototypeView)&&"function"==typeof t.afterRender&&t.afterRender(),this.onShow()},o.prototype.showNext=function(){return this.$el.find(".controlls").show()},o.prototype.hideNext=function(){return this.$el.find(".controlls").hide()},o.prototype.onShow=function(){var t,e,o,n,r;if(e=this.model.getString("displayCode"),!_.isEmptyString(e))try{CoffeeScript.eval.apply(this,[e])}catch(i){o=i,r=/function (.{1,})\(/.exec(o.constructor.toString())[1],n=o.message,alert(r+"\n\n"+n),console.log("displayCode Error: "+JSON.stringify(o))}return"function"==typeof(t=this.prototypeView).updateExecuteReady?t.updateExecuteReady(!0):void 0},o.prototype.getGridScore=function(){var t,e,o;if(o=this.model.get("gridLinkId")||"",""!==o)return t=this.parent.model.subtests.get(this.model.get("gridLinkId")),e=this.parent.result.getGridScore(t.id)},o.prototype.gridWasAutostopped=function(){var t,e,o;if(o=this.model.get("gridLinkId")||"",""!==o)return t=this.parent.model.subtests.get(this.model.get("gridLinkId")),e=this.parent.result.gridWasAutostopped(t.id)},o.prototype.onClose=function(){var t;return null!=(t=this.prototypeView)&&"function"==typeof t.close?t.close():void 0},o.prototype.isValid=function(){return!!this.prototypeRendered&&(null!=this.prototypeView.isValid&&this.prototypeView.isValid())},o.prototype.showErrors=function(){return this.prototypeView.showErrors()},o.prototype.getSum=function(){return null!=this.prototypeView.getSum?this.prototypeView.getSum():{correct:0,incorrect:0,missing:0,total:0}},o.prototype.abort=function(){return this.parent.abort()},o.prototype.getResult=function(){var t,e;return e=this.prototypeView.getResult(),this.model.has("hash")&&(t=this.model.get("hash")),{body:e,meta:{hash:t}}},o.prototype.getSkipped=function(){if(null!=this.prototypeView.getSkipped)return this.prototypeView.getSkipped();throw"Prototype skipping not implemented"},o.prototype.next=function(){return this.trigger("next")},o.prototype.back=function(){return this.trigger("back")},o.prototype.skip=function(){return this.parent.skip()},o}(Backbone.View);


var ConsentRunView,bind=function(t,n){return function(){return t.apply(n,arguments)}},extend=function(t,n){function e(){this.constructor=t}for(var o in n)hasProp.call(n,o)&&(t[o]=n[o]);return e.prototype=n.prototype,t.prototype=new e,t.__super__=n.prototype,t},hasProp={}.hasOwnProperty;ConsentRunView=function(n){function e(){return this.onConsentChange=bind(this.onConsentChange,this),e.__super__.constructor.apply(this,arguments)}return extend(e,n),e.prototype.className="ConsentRunView",e.prototype.events={"click #non_consent_confirm":"noConsent"},e.prototype.onConsentChange=function(){return"yes"===this.consentButton.answer?this.clearMessages():this.showNonConsent()},e.prototype.i18n=function(){return this.text={defaultConsent:t("ConsentRunView.label.default_consent_prompt"),confirmNonconsent:t("ConsentRunView.label.confirm_nonconsent"),confirm:t("ConsentRunView.button.confirm"),yes:t("ConsentRunView.button.yes_continue"),no:t("ConsentRunView.button.no_stop"),select:t("ConsentRunView.message.select")}},e.prototype.initialize=function(t){return this.i18n(),this.confirmedNonConsent=!1,this.model=t.model,this.parent=t.parent,this.dataEntry=t.dataEntry},e.prototype.render=function(){var t,n;return this.$el.html("<div class='question'> <label>"+(this.model.get("prompt")||this.text.defaultConsent)+"</label> <div class='messages'></div> <div class='non_consent_form confirmation'> <div>"+this.text.confirmNonconsent+"</div> <button id='non_consent_confirm' class='command'>"+this.text.confirm+"</button> </div> <div class='consent-button'></div> </div>"),this.dataEntry||(n=this.parent.parent.result.getByHash(this.model.get("hash")),n&&(t=n.consent)),this.consentButton=new ButtonView({options:[{label:this.text.yes,value:"yes"},{label:this.text.no,value:"no"}],mode:"single",dataEntry:!1,answer:t||""}),this.consentButton.setElement(this.$el.find(".consent-button")),this.consentButton.on("change",this.onConsentChange),this.consentButton.render(),this.trigger("rendered"),this.trigger("ready")},e.prototype.isValid=function(){return this.confirmedNonConsent!==!1||"yes"===this.consentButton.answer},e.prototype.showNonConsent=function(){return this.$el.find(".non_consent_form").show(250)},e.prototype.clearMessages=function(){return this.$el.find(".non_consent_form").hide(250),this.$el.find(".messages").html("")},e.prototype.noConsent=function(){return this.confirmedNonConsent=!0,this.parent.abort(),!1},e.prototype.getSkipped=function(){return{consent:"skipped"}},e.prototype.showErrors=function(){var t;return t=this.consentButton.answer,"no"===t?(Utils.midAlert(this.text.confirm),this.showNonConsent()):void 0===t?$(".messages").html(this.text.select):void 0},e.prototype.getResult=function(){return{consent:this.consentButton.answer}},e.prototype.onClose=function(){var t;return null!=(t=this.consentButton)&&"function"==typeof t.close?t.close():void 0},e}(Backbone.View);


var ConsentEditView,extend=function(t,e){function o(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return o.prototype=e.prototype,t.prototype=new o,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;ConsentEditView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="ConsentEditView",e.prototype.initialize=function(t){return this.model=t.model,this.parent=t.parent},e.prototype.isValid=function(){return!0},e.prototype.save=function(){return this.model.set({prompt:this.$el.find("#consent_prompt").val()})},e.prototype.render=function(){var t;return t=this.model.get("prompt")||"",this.$el.html("<div class='label_value'> <label for='consent_prompt'>Consent prompt</label> <input id='consent_prompt' value='"+t+"'> </div>")},e}(Backbone.View);


var DatetimeRunView,extend=function(t,e){function n(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;DatetimeRunView=function(e){function n(){return n.__super__.constructor.apply(this,arguments)}return extend(n,e),n.prototype.className="datetime",n.prototype.i18n=function(){return this.text={year:t("DatetimeRunView.label.year"),month:t("DatetimeRunView.label.month"),day:t("DatetimeRunView.label.day"),time:t("DatetimeRunView.label.time")}},n.prototype.initialize=function(t){return this.i18n(),this.model=t.model,this.parent=t.parent,this.dataEntry=t.dataEntry},n.prototype.render=function(){var e,n,r,i,o,a,l,p,u;return e=new Date,u=e.getFullYear(),a=[t("jan"),t("feb"),t("mar"),t("apr"),t("may"),t("jun"),t("jul"),t("aug"),t("sep"),t("oct"),t("nov"),t("dec")],o=a[e.getMonth()],n=e.getDate(),i=e.getMinutes(),i<10&&(i="0"+i),p=e.getHours()+":"+i,this.dataEntry||(l=this.parent.parent.result.getByHash(this.model.get("hash")),l&&(u=l.year,o=l.month,n=l.day,p=l.time)),this.$el.html("<div class='question'> <table> <tr> <td><label for='year'>"+this.text.year+"</label><input id='year' value='"+u+"'></td> <td> <label for='month'>"+this.text.month+"</label><br> <select id='month' value='"+o+"'>"+function(){var t,e,n;for(n=[],t=0,e=a.length;t<e;t++)r=a[t],n.push("<option value='"+r+"' "+((r===o?"selected='selected'":void 0)||"")+">"+r.titleize()+" </option>");return n}().join("")+"</select> </td> <td><label for='day'>"+this.text.day+"</label><input id='day' type='day' value='"+n+"'></td> </tr> <tr> <td><label for='time'>"+this.text.time+"</label><br><input type='text' id='time' value='"+p+"'></td> </tr> </table> </div>"),this.trigger("rendered"),this.trigger("ready")},n.prototype.getResult=function(){return{year:this.$el.find("#year").val(),month:this.$el.find("#month").val(),day:this.$el.find("#day").val(),time:this.$el.find("#time").val()}},n.prototype.getSkipped=function(){return{year:"skipped",month:"skipped",day:"skipped",time:"skipped"}},n.prototype.isValid=function(){return!0},n.prototype.showErrors=function(){return!0},n.prototype.next=function(){return console.log("next!!"),this.prototypeView.on("click .next",function(t){return function(){return console.log("clickme!"),t.next()}}(this)),this.parent.next()},n.prototype.back=function(){return this.parent.back()},n}(Backbone.View);


var DatetimeEditView,extend=function(t,e){function o(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return o.prototype=e.prototype,t.prototype=new o,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;DatetimeEditView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="DatetimeEditView",e.prototype.initialize=function(t){return this.model=t.model,this.parent=t.parent},e.prototype.save=function(){},e.prototype.isValid=function(){return!0},e}(Backbone.View);


var LocationRunView,extend=function(t,e){function l(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return l.prototype=e.prototype,t.prototype=new l,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;LocationRunView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="LocationRunView",e.prototype.events={"click .clear":"clearInputs","change select":"onSelectChange"},e.prototype.initialize=function(t){var e,l,i,o,s;for(this.model=this.options.model,this.parent=this.options.parent,this.limit=this.options.limit,this.levels=this.model.get("levels")||[],this.locationCols=this.model.get("locationCols")||[],this.locations=this.model.get("locations")||[],this.selectedLocation=[],null!=this.limit&&(this.levels=this.levels.slice(0,this.limit)),1===this.levels.length&&""===this.levels[0]&&(this.levels=[]),1===this.locationCols.length&&""===this.locationCols[0]&&(this.locationCols=[]),1===this.locations.length&&""===this.locations[0]&&(this.locations=[]),this.levelColMap=[],s=this.levels,e=l=0,i=s.length;l<i;e=++l)o=s[e],this.levelColMap[e]=_.indexOf(this.locationCols,o);if(null!=this.limit)return this.levelColMap=this.levelColMap.slice(0,this.limit)},e.prototype.clearInputs=function(){return this.resetSelects(0),""},e.prototype.resetSelects=function(t){var e,l,i,o,s;for(s=[],e=l=i=t,o=this.levels.length-1;i<=o?l<=o:l>=o;e=i<=o?++l:--l)this.$el.find("#level_"+e).html="<option selected='selected' value='' disabled='disabled'>Please select a "+this.levels[e]+"</option>",this.$el.find("#level_"+e).val(""),0!==e?s.push(this.$el.find("#level_"+e).attr("disabled",!0)):s.push(void 0);return s},e.prototype.render=function(){return this.$el.html("<div class='loc-container'></div>"),this.locView=new LocView,this.locView.setElement(this.$el.find(".loc-container")),this.trigger("rendered"),this.trigger("ready")},e.prototype.onSelectChange=function(t){var e,l,i,o,s,n,r,a,h,c,p,u,v;if(this.trigger("select-change"),e=$(t.target),r=parseInt(e.attr("data-level")),p=e.val(),u=r+1,r!==this.levels.length-1)this.resetSelects(u+1),this.$el.find("#level_"+u).removeAttr("disabled"),this.$el.find("#level_"+u).html(this.getOptions(u)),this.selectedLocation=[];else{for(h=[],v=this.levels,i=o=0,s=v.length;o<s;i=++o)n=v[i],h.push(this.$el.find("#level_"+i).val());c=0,l=h.length,a=this.levelColMap,this.selectedLocation=_.find(this.locations,function(t){var e,o;for(c=0,i=e=0,o=h.length;e<o;i=++e)n=h[i],t[a[i]]===h[i]&&(c+=1);return c===l})}return""},e.prototype.getOptions=function(t){var e,l,i,o,s,n,r,a,h,c,p,u,v,f,d,g,m,y,$,C;for(C=this.levelColMap[t],l=[],e=[],p="",d=[],i=n=0,g=t;(0<=g?n<=g:n>=g)&&i!==t;i=0<=g?++n:--n)d.push(this.$el.find("#level_"+i).val());for(m=this.locations,i=r=0,h=m.length;r<h;i=++r)if(u=m[i],!~l.indexOf(u[C])){for(o=0===t,s=!0,i=a=0,y=Math.max(t-1,0);0<=y?a<=y:a>=y;i=0<=y?++a:--a)if(d[i]!==u[this.levelColMap[i]]){s=!1;break}(o||s)&&(l.push(u[C]),e.push(_(u[C]).escape()))}for($=_.sortBy(e,function(t){return t}),f=0,c=$.length;f<c;f++)v=$[f],p+="<option value='"+v+"'>"+v+"</option>";return"<option selected='selected' value='' disabled='disabled'>Please select a "+this.levels[t]+"</option>"+p},e.prototype.getResult=function(t){var e,l;return null==t&&(t=!1),e={labels:[],location:[]},l=this.locView.value(),e.labels=Object.keys(l),e.location=e.labels.map(function(t){return l[t]}),e},e.prototype.getSkipped=function(){var t,e;return{labels:function(){var e,l,i,o;for(i=this.locationCols,o=[],e=0,l=i.length;e<l;e++)t=i[e],o.push(t.replace(/[\s-]/g,"_"));return o}.call(this),location:function(){var t,l,i,o;for(i=this.locationCols,o=[],t=0,l=i.length;t<l;t++)e=i[t],o.push("skipped");return o}.call(this)}},e.prototype.isValid=function(){var t,e,l,i,o;for(this.$el.find(".message").remove(),o=this.$el.find("select"),t=l=0,i=o.length;l<i;t=++l)if(e=o[t],_($(e).val()).isEmptyString())return!1;return this.selectedLocation!==[]},e.prototype.showErrors=function(){var t,e,l,i,o;for(o=this.$el.find("select"),i=[],e=0,l=o.length;e<l;e++)t=o[e],_($(t).val()).isEmptyString()?i.push($(t).after(" <span class='message'>"+$("label[for="+$(t).attr("id")+"]").text()+" must be filled.</span>")):i.push(void 0);return i},e.prototype.onClose=function(){return this.locView.remove()},e.prototype.getSum=function(){var t,e,l,i,o,s;for(e={correct:0,incorrect:0,missing:0,total:0},s=this.$el.find("input"),i=0,o=s.length;i<o;i++)l=s[i],t=$(l),""!==(t.val()||"")&&(e.correct+=1),""===(t.val()||"")&&(e.missing+=1),e.total+=1;return{correct:e.correct,incorrect:e.incorrect,missing:e.missing,total:e.total}},e}(Backbone.View);


var LocationEditView,extend=function(e,t){function a(){this.constructor=e}for(var l in t)hasProp.call(t,l)&&(e[l]=t[l]);return a.prototype=t.prototype,e.prototype=new a,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty,indexOf=[].indexOf||function(e){for(var t=0,a=this.length;t<a;t++)if(t in this&&this[t]===e)return t;return-1};LocationEditView=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="LocationEditView",t.prototype.events={"keyup #data":"updateData","keyup #levels":"updateLevels","click #data_format input":"updateData","click #levels_format input":"updateLevels"},t.prototype.updateData=function(e){return hasTabs?this.$el.find("#data_format :radio[value='Tabs']").attr("checked","checked").button("refresh"):this.$el.find("#data_format :radio[value='Commas']").attr("checked","checked").button("refresh")},t.prototype.updateData=function(e){var t,a,l;return"click"===(null!=e?e.type:void 0)?"Tabs"===$(e.target).val()?(this.dataCommaToTab(),l=!0,a=!1):(this.dataTabToComma(),l=!1,a=!0):(t=this.$el.find("#data").val(),l=null!=t.match(/\t/g),a=null!=t.match(/,/g)),l?this.$el.find("#data_format :radio[value='Tabs']").attr("checked","checked").button("refresh"):this.$el.find("#data_format :radio[value='Commas']").attr("checked","checked").button("refresh")},t.prototype.updateLevels=function(e){var t,a,l;return"click"===(null!=e?e.type:void 0)?"Tabs"===$(e.target).val()?(this.levelsCommaToTab(),a=!0,t=!1):(this.levelsTabToComma(),a=!1,t=!0):(l=this.$el.find("#levels").val(),a=null!=l.match(/\t/g),t=null!=l.match(/,/g)),l=this.$el.find("#levels").val(),a=null!=l.match(/\t/g),t=null!=l.match(/,/g),a?this.$el.find("#levels_format :radio[value='Tabs']").attr("checked","checked").button("refresh"):this.$el.find("#levels_format :radio[value='Commas']").attr("checked","checked").button("refresh")},t.prototype.dataTabToComma=function(){return this.$el.find("#data").val(String(this.$el.find("#data").val()).replace(/\t/g,", ")),this.$el.find("#locationCols").val(String(this.$el.find("#locationCols").val()).replace(/\t/g,", "))},t.prototype.dataCommaToTab=function(){return this.$el.find("#data").val(this.$el.find("#data").val().replace(/, */g,"\t")),this.$el.find("#locationCols").val(this.$el.find("#locationCols").val().replace(/, */g,"\t"))},t.prototype.levelsTabToComma=function(){return this.$el.find("#levels").val(String(this.$el.find("#levels").val()).replace(/\t/g,", "))},t.prototype.levelsCommaToTab=function(){return this.$el.find("#levels").val(this.$el.find("#levels").val().replace(/, */g,"\t"))},t.prototype.save=function(){var e,t,a,l,o,i,r,s,n,d,c,h,u,m;for(null!=this.$el.find("#data").val().match(/\t/g)&&(this.$el.find("#data_format :radio[value='Tabs']").attr("checked","checked").button("refresh"),this.dataTabToComma()),null!=this.$el.find("#levels").val().match(/\t/g)&&(this.levelsTabToComma(),this.$el.find("#levels_format :radio[value='Tabs']").attr("checked","checked").button("refresh")),d=this.$el.find("#levels").val().split(/, */g),t=a=0,i=d.length;a<i;t=++a)n=d[t],d[t]=$.trim(n).replace(/[^a-zA-Z0-9']/g,"");for(h=this.$el.find("#locationCols").val().split(/, */g),t=l=0,r=h.length;l<r;t=++l)e=h[t],e[t]=$.trim(e).replace(/[^a-zA-Z0-9']/g,"");for(m=$.trim(this.$el.find("#data").val()),u=m.split("\n"),t=o=0,s=u.length;o<s;t=++o)c=u[t],u[t]=c.split(/, */g);return this.model.set({levels:d,locationCols:h,locations:u})},t.prototype.isValid=function(){var e,t,a,l,o,i,r,s,n;for(i=this.model.get("levels"),s=this.model.get("locationCols"),e=0,a=i.length;e<a;e++)o=i[e],_.indexOf(s,o)===-1&&indexOf.call(this.errors,"level_column_match")<0&&this.errors.push("level_column_match");for(n=this.model.get("locations"),t=0,l=n.length;t<l;t++)r=n[t],r.length!==s.length&&indexOf.call(this.errors,"column_match")<0&&this.errors.push("column_match");return 0===this.errors.length},t.prototype.showErrors=function(){var e,t,a,l,o;for(e="Please correct the following errors:\n\n",o=this.errors,a=0,l=o.length;a<l;a++)t=o[a],e+=this.errorMessages[t];return alert(e),this.errors=[]},t.prototype.initialize=function(e){return this.errors=[],this.model=e.model,this.errorMessages={column_match:"Some columns in the location data do not match the number of columns in the geographic levels.",level_column_match:"One or more Geographic Levels cannot be matched to valid Location Columns."}},t.prototype.render=function(){var e,t,a,l,o,i,r;if(l=this.model.get("levels")||[],i=this.model.get("locationCols")||[],r=this.model.get("locations")||[],l=_.escape(l.join(", ")),i=_.escape(i.join(", ")),r=r.join("\n"),_.isArray(r))for(e=t=0,a=r.length;t<a;e=++t)o=r[e],r[e]=_.escape(o.join(", "));return this.$el.html("<div class='label_value'> <div class='menu_box'> <label for='levels' title='This is a comma separated list of geographic levels. (E.g. Country, Province, District, School Id) These are the levels that you would consider individual fields on the location form.'>Geographic Levels</label> <input id='levels' value='"+l+"'> <label title='Tangerine uses comma separated values. If you copy and paste from another program like Excel, the values will be tab separated. These buttons allow you to switch back and forth, however, Tangerine will always save the comma version.'>Format</label><br> <div id='levels_format' class='buttonset'> <label for='levels_tabs'>Tabs</label> <input id='levels_tabs' name='levels_format' type='radio' value='Tabs'> <label for='levels_commas'>Commas</label> <input id='levels_commas' name='levels_format' type='radio' value='Commas'> </div> </div> </div> <div class='label_value'> <div class='menu_box'> <label for='cols' title='Comma sperated values, with multiple rows separated by line. This information will be used to autofill the location data.'>Location Columns</label> <input id='locationCols' value='"+i+"'><br><br> <label for='data' title='Comma sperated values, with multiple rows separated by line. This information will be used to autofill the location data.'>Location Data</label> <textarea id='data'>"+r+"</textarea><br> <label title='Tangerine uses comma separated values. If you copy and paste from another program like Excel, the values will be tab separated. These buttons allow you to switch back and forth, however, Tangerine will always save the comma version.'>Format</label><br>        <div id='data_format' class='buttonset'> <label for='data_tabs'>Tabs</label> <input id='data_tabs' name='data_format' type='radio' value='Tabs'> <label for='data_commas'>Commas</label> <input id='data_commas' name='data_format' type='radio' value='Commas'> </div> </div>")},t.prototype.afterRender=function(){return this.updateLevels(),this.updateData()},t}(Backbone.View);


var SurveyRunView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function s(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;SurveyRunView=function(e){function s(){return this.onQuestionRendered=bind(this.onQuestionRendered,this),this.getResult=bind(this.getResult,this),this.updateSkipLogic=bind(this.updateSkipLogic,this),this.onQuestionAnswer=bind(this.onQuestionAnswer,this),this.updateExecuteReady=bind(this.updateExecuteReady,this),s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="SurveyRunView",s.prototype.events={"click .next_question":"nextQuestion","click .prev_question":"prevQuestion"},s.prototype.nextQuestion=function(){var t,e,s,i,n,o,r,u,h,a;if(t=this.questionViews[this.questionIndex],!this.isValid(t))return this.showErrors(t);for(i=[],a=this.questionViews,e=o=0,r=a.length;o<r;e=++o)h=a[e],s=h.$el.hasClass("disabled_autostop"),n=h.$el.hasClass("disabled_skipped"),s||n||i.push(e);return i=_.filter(i,function(t){return function(e){return e>t.questionIndex}}(this)),u=0===i.length?this.questionIndex:Math.min.apply(u,i),this.questionIndex!==u?(this.questionIndex=u,this.updateQuestionVisibility(),this.updateProgressButtons()):void 0},s.prototype.prevQuestion=function(){var t,e,s,i,n,o,r,u,h,a;if(t=this.questionViews[this.questionIndex],!this.isValid(t))return this.showErrors(t);for(i=[],a=this.questionViews,e=o=0,r=a.length;o<r;e=++o)h=a[e],s=h.$el.hasClass("disabled_autostop"),n=h.$el.hasClass("disabled_skipped"),s||n||i.push(e);return i=_.filter(i,function(t){return function(e){return e<t.questionIndex}}(this)),u=0===i.length?this.questionIndex:Math.max.apply(u,i),this.questionIndex!==u?(this.questionIndex=u,this.updateQuestionVisibility(),this.updateProgressButtons()):void 0},s.prototype.updateProgressButtons=function(){var t,e,s,i,n,o,r,u,h,a,p,d;for(n=[],d=this.questionViews,s=r=0,u=d.length;r<u;s=++r)p=d[s],i=p.$el.hasClass("disabled_autostop"),o=p.$el.hasClass("disabled_skipped"),i||o||n.push(s);return n.push(this.questionIndex),e=this.$el.find(".prev_question"),t=this.$el.find(".next_question"),a=Math.min.apply(a,n),h=Math.max.apply(h,n),this.questionIndex===a?e.hide():e.show(),this.questionIndex===h?t.hide():t.show()},s.prototype.updateExecuteReady=function(t){var e,s,i,n,o;if(this.executeReady=t,null!=this.triggerShowList){if(this.triggerShowList.length>0){for(n=this.triggerShowList,s=0,i=n.length;s<i;s++)e=n[s],null!=(o=this.questionViews[e])&&o.trigger("show");this.triggerShowList=[]}return this.executeReady?this.updateSkipLogic():void 0}},s.prototype.updateQuestionVisibility=function(){var t;if(this.model.get("focusMode"))return this.questionIndex===this.questionViews.length?(this.$el.find("#summary_container").html("last page here"),this.$el.find("#next_question").hide()):(this.$el.find("#summary_container").empty(),this.$el.find("#next_question").show()),t=this.$el.find(".question"),t.hide(),t.eq(this.questionIndex).show(),this.executeReady?this.questionViews[this.questionIndex].trigger("show"):(this.triggerShowList||(this.triggerShowList=[]),this.triggerShowList.push(this.questionIndex))},s.prototype.showQuestion=function(t){return _.isNumber(t)&&t<this.questionViews.length&&t>0&&(this.questionIndex=t),this.updateQuestionVisibility(),this.updateProgressButtons()},s.prototype.i18n=function(){return this.text={pleaseAnswer:t("SurveyRunView.message.please_answer"),correctErrors:t("SurveyRunView.message.correct_errors"),notEnough:_(t("SurveyRunView.message.not_enough")).escape(),previousQuestion:t("SurveyRunView.button.previous_question"),nextQuestion:t("SurveyRunView.button.next_question")}},s.prototype.initialize=function(t){return this.model=t.model,this.parent=t.parent,this.dataEntry=t.dataEntry,this.isObservation=t.isObservation,this.focusMode=this.model.getBoolean("focusMode"),this.focusMode&&(this.questionIndex=0),this.questionViews=[],this.answered=[],this.renderCount=0,this.i18n(),this.questions=new Questions,this.questions.fetch({key:"q"+this.model.get("assessmentId"),success:function(t){return function(e){return t.questions=new Questions(e.where({subtestId:t.model.id})),t.questions.sort(),t.ready=!0,t.render()}}(this)})},s.prototype.onQuestionAnswer=function(t){var e,s,i,n,o,r,u,h,a,p,d,l,g;if(this.renderCount===this.questions.length){if(this.isObservation)for(i=$(t).attr("data-cid"),d=this.questionViews,r=0,h=d.length;r<h;r++)if(g=d[r],g.cid===i&&"multiple"!==g.type){for(p=$(g.el).next();0!==p.length&&p.hasClass("disabled_skipped");)p=$(p).next();0!==p.length&&p.scrollTo()}if(this.autostopped=!1,s=parseInt(this.model.get("autostopLimit"))||0,a=0,e=0,s>0)for(o=u=1,l=this.questionViews.length;1<=l?u<=l:u>=l;o=1<=l?++u:--u)n=this.questionViews[o-1].answer,"0"===n||"9"===n?e++:e=0,a=Math.max(a,e),0!==s&&a>=s&&!this.autostopped&&(this.autostopped=!0,this.autostopIndex=o);return this.updateAutostop(),this.updateSkipLogic()}},s.prototype.updateAutostop=function(){var t,e,s,i,n,o,r;for(t=parseInt(this.model.get("autostopLimit"))||0,n=this.questionViews,o=[],e=s=0,i=n.length;s<i;e=++s)r=n[e],e>this.autostopIndex-1?(this.autostopped&&r.$el.addClass("disabled_autostop"),this.autostopped?o.push(void 0):o.push(r.$el.removeClass("disabled_autostop"))):o.push(void 0);return o},s.prototype.updateSkipLogic=function(){var t,e,s,i,n,o,r,u,h,a,p;for(u=this.questionViews,a=[],e=0,s=u.length;e<s;e++){if(r=u[e],o=r.model,p=o.get("skipLogic"),!_.isEmptyString(p)){try{h=CoffeeScript.eval.apply(this,[p])}catch(d){t=d,n=/function (.{1,})\(/.exec(t.constructor.toString())[1],i=t.message,alert("Skip logic error in question "+o.get("name")+"\n\n"+n+"\n\n"+i)}h?r.$el.addClass("disabled_skipped"):r.$el.removeClass("disabled_skipped")}a.push(r.updateValidity())}return a},s.prototype.isValid=function(t){var e,s,i,n;if(null==t&&(t=this.questionViews),null==t)return!0;for(_.isArray(t)||(t=[t]),e=s=0,i=t.length;s<i;e=++s)if(n=t[e],n.updateValidity(),!n.model.getBoolean("skippable")&&!n.isValid)return!1;return!0},s.prototype.getSkipped=function(){var t,e,s,i,n,o;for(o={},n=this.questionViews,t=e=0,s=n.length;e<s;t=++e)i=n[t],o[this.questions.models[t].get("name")]="skipped";return o},s.prototype.getResult=function(){var t,e,s,i,n,o;for(o={},n=this.questionViews,t=e=0,s=n.length;e<s;t=++e)i=n[t],o[this.questions.models[t].get("name")]=i.notAsked?i.notAskedResult:_.isEmpty(i.answer)?i.skipped?i.skippedResult:i.$el.hasClass("disabled_skipped")?i.logicSkippedResult:i.$el.hasClass("disabled_autostop")?i.notAskedAutostopResult:i.answer:i.answer;return o},s.prototype.showErrors=function(t){var e,s,i,n,o,r,u,h;for(null==t&&(t=this.questionViews),this.$el.find(".message").remove(),s=!0,_.isArray(t)||(t=[t]),h=[],i=n=0,o=t.length;n<o;i=++n)u=t[i],_.isString(u)?h.push(void 0):(r="",u.isValid||(e=u.model.get("customValidationMessage"),r=_.isEmpty(e)?this.text.pleaseAnswer:e,s===!0&&(t===this.questionViews&&this.showQuestion(i),u.$el.scrollTo(),Utils.midAlert(this.text.correctErrors),s=!1)),h.push(u.setMessage(r)));return h},s.prototype.render=function(){var t,e,s,i,n,o,r,u,h,a,p,d,l,g,c,f,y;if(this.ready){if(this.$el.empty(),this.dataEntry||null!=this.parent&&null!=this.parent.parent&&null!=this.parent.parent.result&&(d=this.parent.parent.result.getByHash(this.model.get("hash"))),a=0,this.questions.sort(),null!=this.questions.models){for(c=this.questions.models,s=n=0,r=c.length;n<r;s=++n)l=c[s],y=parseInt(l.get("linkedGridScore"))||0,i=(0!==y&&this.parent.getGridScore()<y||this.parent.gridWasAutostopped())&&this.parent.getGridScore()!==!1,i&&a++,h=l.escape("name").replace(/[^A-Za-z0-9_]/g,"-"),d&&(t=d[h]),p=new QuestionRunView({model:l,parent:this,dataEntry:this.dataEntry,notAsked:i,isObservation:this.isObservation,answer:t}),p.on("rendered",this.onQuestionRendered),p.on("answer scroll",this.onQuestionAnswer),this.questionViews[s]=p,this.$el.append(p.el);for(f=this.questionViews,o=0,u=f.length;o<u;o++)g=f[o],g.render();this.focusMode&&(this.updateQuestionVisibility(),this.$el.append("<div id='summary_container'></div> <button class='navigation prev_question'>"+this.text.previousQuestion+"</button> <button class='navigation next_question'>"+this.text.nextQuestion+"</button>"),this.updateProgressButtons())}return this.questions.length===a&&"function"==typeof(e=this.parent).next&&e.next(),this.trigger("rendered")}},s.prototype.onQuestionRendered=function(){return this.renderCount++,this.renderCount===this.questions.length&&(this.trigger("ready"),this.updateSkipLogic()),this.trigger("subRendered")},s.prototype.onClose=function(){var t,e,s,i;for(i=this.questionViews,t=0,e=i.length;t<e;t++)s=i[t],"function"==typeof s.close&&s.close();return this.questionViews=[]},s}(Backbone.View);


var SurveyEditView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function i(){this.constructor=e}for(var n in t)hasProp.call(t,n)&&(e[n]=t[n]);return i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;SurveyEditView=function(e){function t(){return this.renderQuestions=bind(this.renderQuestions,this),this.toggleAddQuestion=bind(this.toggleAddQuestion,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="SurveyEditView",t.prototype.events={"click .add_question":"toggleAddQuestion","click .add_question_cancel":"toggleAddQuestion","click .add_question_add":"addQuestion","keypress #question_name":"addQuestion"},t.prototype.initialize=function(e){return this.model=e.model,this.parent=e.parent,this.subtests=e.subtests,this.model.questions=new Questions,this.questionsEditView=new QuestionsEditView({questions:this.model.questions}),Utils.working(!0),this.model.questions.fetch({key:this.model.get("assessmentId"),success:function(e){return function(){return Utils.working(!1),e.questionsEditView.questions=new Questions(e.model.questions.where({subtestId:e.model.id})),e.questionsEditView.questions.ensureOrder(),e.questionsEditView.on("question-edit",function(t){return e.trigger("question-edit",t)}),e.questionsEditView.questions.on("change",e.renderQuestions),e.renderQuestions()}}(this),error:function(e){return function(e,t){return Utils.working(!1),Utils.midAlert("Error<br>Could not load questions<br>"+e+", "+t,5e3)}}(this)})},t.prototype.toggleAddQuestion=function(){return this.$el.find("#add_question_form, .add_question").fadeToggle(250,function(e){return function(){if(e.$el.find("#add_question_form").is(":visible"))return e.$el.find("#question_prompt").focus()}}(this)),!1},t.prototype.addQuestion=function(e){var t,i;return"click"!==e.type&&13!==e.which||(t=$.extend(Tangerine.templates.get("questionTemplate"),{subtestId:this.model.id,assessmentId:this.model.get("assessmentId"),id:Utils.guid(),order:this.questionsEditView.questions.length,prompt:this.$el.find("#question_prompt").val(),name:this.$el.find("#question_name").val().safetyDance()}),i=this.questionsEditView.questions.create(t),this.renderQuestions(),this.$el.find("#add_question_form input").val(""),this.$el.find("#question_prompt").focus(),!1)},t.prototype.isValid=function(){return!0},t.prototype.save=function(e){var t,i,n,s,o,d,u,r,l,a,h,c,p,m,g,f,v,q,b,w,k,y,Q,I;if(e.questionSave=null==e.questionSave||e.questionSave,this.model.set({gridLinkId:this.$el.find("#link_select option:selected").val(),autostopLimit:parseInt(this.$el.find("#autostop_limit").val())||0,focusMode:"true"===this.$el.find("#focus_mode input:checked").val()}),""!==this.model.get("gridLinkId")&&null!=this.model.questions){for(m=[],b=this.model.questions.where({subtestId:this.model.id}),a=0,c=b.length;a<c;a++)q=b[a],o=0!==q.getNumber("linkedGridScore")&&null!=this.itemNumberByLinkId[this.model.get("gridLinkId")],o&&q.get("linkedGridScore")>this.itemNumberByLinkId[this.model.get("gridLinkId")]&&m.push(q.get("name"));m.length>0&&alert("Unreachable question warning\n\nThe linked grid contains fewer items than question"+((m.length>1?"s":void 0)||"")+": "+m.join(", ")+" demand"+((!m.length>1?"s":void 0)||"")+".")}for(f=[],r=[],y=[],u=[],I={},w=this.questionsEditView.questions.models,l=h=0,p=w.length;h<p;l=++h)q=w[l],""!==q.get("name")&&(_.isNumber(I[q.get("name")])||(I[q.get("name")]=0),I[q.get("name")]++),"open"===q.get("type")||0!==(null!=(k=q.get("options"))?k.length:void 0)||~q.getString("displayCode").indexOf("setOptions")||(r.push(l+1),e.questionSave&&(q.save()||f.push(l),q.has("linkedGridScore")&&""!==q.get("linkedGridScore")&&0!==q.get("linkedGridScore")&&""===this.model.has("gridLinkId")&&""===this.model.get("gridLinkId")&&y.push(l)));for(g in I)d=I[g],1!==d&&u.push(g);if(s=[],0!==f.length&&Utils.midAlert("Error<br><br>Questions: <br>"+f.join(", ")+"<br>not saved"),e.questionSave&&0!==r.length&&(v=r.length>1,i=v?"Questions":"Question",t=v?"have":"has",s.push("- "+i+" "+r.join(" ,")+" "+t+" no options.")),0!==y.length&&(v=r.length>1,i=v?"Questions":"Question",n=v?"require":"requires",s.push("- "+i+" "+y.join(" ,")+" "+n+" a grid to be linked to this test.")),0!==u.length&&s.push("- The following variables are duplicates\n "+u.join(", ")),0!==s.length)return Q=s.join("\n\n"),alert("Warning\n\n"+Q)},t.prototype.onClose=function(){var e;return null!=(e=this.questionsListEdit)?e.close():void 0},t.prototype.renderQuestions=function(){var e;return null!=(e=this.questionsEditView)?e.render():void 0},t.prototype.render=function(){var e,t,i,n,s,o,d,u;for(i=this.model.get("gridLinkId")||"",e=parseInt(this.model.get("autostopLimit"))||0,t=this.model.getBoolean("focusMode"),this.$el.html("<div class='label_value'> <label for='autostop_limit' title='The survey will discontinue after any N consecutive questions have been answered with a &quot;0&quot; value option.'>Autostop after N incorrect</label><br> <input id='autostop_limit' type='number' value='"+e+"'> </div> <div class='label_value'> <label title='Displays one question at a time with next and previous buttons.'>Focus mode</label> <div id='focus_mode' class='buttonset'> <label for='focus_true'>Yes</label> <input name='focus_mode' type='radio' value='true' id='focus_true' "+(t?"checked":void 0)+"> <label for='focus_false'>No</label> <input name='focus_mode' type='radio' value='false' id='focus_false' "+(t?void 0:"checked")+"> </div> </div> <div id='grid_link'></div> <div id='questions'> <h2>Questions</h2> <div class='menu_box'> <div id='question_list_wrapper'><img class='loading' src='images/loading.gif'><ul></ul></div> <button class='add_question command'>Add Question</button> <div id='add_question_form' class='confirmation'> <div class='menu_box'> <h2>New Question</h2> <label for='question_prompt'>Prompt</label> <input id='question_prompt'> <label for='question_name'>Variable name</label> <input id='question_name' title='Allowed characters: A-Z, a-z, 0-9, and underscores.'><br> <button class='add_question_add command'>Add</button><button class='add_question_cancel command'>Cancel</button> </div> </div> </div> </div>"),this.$el.find("#question_list_wrapper .loading").remove(),this.questionsEditView.setElement(this.$el.find("#question_list_wrapper ul")),this.renderQuestions(),n=this.subtests.where({prototype:"grid"}),d="<div class='label_value'> <label for='link_select'>Linked to grid</label><br> <div class='menu_box'> <select id='link_select'> <option value=''>None</option>",s=0,o=n.length;s<o;s++)u=n[s],null==this.itemNumberByLinkId&&(this.itemNumberByLinkId={}),this.itemNumberByLinkId[u.id]=u.get("items").length,d+="<option value='"+u.id+"' "+(i===u.id?"selected":"")+">"+u.get("name")+"</option>";return d+="</select></div></div>",this.$el.find("#grid_link").html(d)},t}(Backbone.View);


var IdRunView,extend=function(t,e){function i(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;IdRunView=function(e){function i(){return i.__super__.constructor.apply(this,arguments)}return extend(i,e),i.prototype.className="id",i.prototype.events={"click #generate":"generate","change #participant_id":"setValidator"},i.prototype.i18n=function(){return this.text={identifier:t("IdRunView.label.identifier"),generate:t("IdRunView.button.generate")}},i.prototype.initialize=function(t){return this.i18n(),this.model=t.model,this.parent=t.parent,this.dataEntry=t.dataEntry,this.validator=new CheckDigit},i.prototype.render=function(){var t,e;return this.dataEntry||(e=this.parent.parent.result.getByHash(this.model.get("hash")),e&&(t=e.participant_id)),this.$el.html("<form> <label for='participant_id'>"+this.text.identifier+"</label> <input id='participant_id' name='participant_id' value='"+(t||"")+"'> <button id='generate' class='command'>"+this.text.generate+"</button> <div class='messages'></div> </form>"),this.trigger("rendered"),this.trigger("ready")},i.prototype.getResult=function(){return{participant_id:this.$el.find("#participant_id").val()}},i.prototype.getSkipped=function(){return{participant_id:"skipped"}},i.prototype.setValidator=function(){return this.validator.set(this.getResult().participant_id)},i.prototype.isValid=function(){return this.setValidator(),!!this.validator.isValid()&&this.updateNavigation()},i.prototype.showErrors=function(){return this.$el.find(".messages").html(this.validator.getErrors().join(", "))},i.prototype.generate=function(){return this.$el.find(".messages").empty(),this.$el.find("#participant_id").val(this.validator.generate()),!1},i.prototype.updateNavigation=function(){return Tangerine.nav.setStudent(this.getResult().participant_id)},i}(Backbone.View);


var IdEditView,extend=function(t,o){function e(){this.constructor=t}for(var r in o)hasProp.call(o,r)&&(t[r]=o[r]);return e.prototype=o.prototype,t.prototype=new e,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;IdEditView=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.className="IdEditView",o.prototype.initialize=function(t){return this.model=t.model,this.parent=t.parent},o.prototype.isValid=function(){return!0},o.prototype.save=function(){},o}(Backbone.View);


var GridRunView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function i(){this.constructor=t}for(var s in e)hasProp.call(e,s)&&(t[s]=e[s]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;GridRunView=function(e){function i(){return this.updateMode=bind(this.updateMode,this),this.updateCountdown=bind(this.updateCountdown,this),this.removeUndo=bind(this.removeUndo,this),this.lastHandler=bind(this.lastHandler,this),this.intermediateItemHandler=bind(this.intermediateItemHandler,this),this.markHandler=bind(this.markHandler,this),this.gridClick=bind(this.gridClick,this),i.__super__.constructor.apply(this,arguments)}return extend(i,e),i.prototype.className="grid_prototype",i.prototype.events=Modernizr.touch?{"click .grid_element":"gridClick","click .end_of_grid_line":"endOfGridLineClick","click .start_time":"startTimer","click .stop_time":"stopTimer","click .restart":"restartTimer"}:{"click .end_of_grid_line":"endOfGridLineClick","click .grid_element":"gridClick","click .start_time":"startTimer","click .stop_time":"stopTimer","click .restart":"restartTimer"},i.prototype.restartTimer=function(){return this.timeRunning&&this.stopTimer({simpleStop:!0}),this.resetVariables(),this.$el.find(".element_wrong").removeClass("element_wrong"),this.$el.find(".grid_element").removeClass("element_minute")},i.prototype.gridClick=function(t){var e,i;return t.preventDefault(),"function"==typeof(e=this.modeHandlers)[i=this.mode]?e[i](t):void 0},i.prototype.markHandler=function(t){var e,i,s,a,n,r,o;if(e=$(t.target),s=e.attr("data-index"),a=parseInt(s)>parseInt(this.lastAttempted),n=0!==parseInt(this.lastAttempted),i=this.dataEntry===!1&&(null!=(r=this.parent)&&null!=(o=r.parent)?o.enableCorrections:void 0)===!1,!(i&&n&&a))return this.markElement(s),0!==this.autostop?this.checkAutostop():void 0},i.prototype.intermediateItemHandler=function(t){var e,i;return this.timeIntermediateCaptured=this.getTime()-this.startTime,e=$(t.target),i=e.attr("data-index"),this.itemAtTime=i,this.$el.find(".grid_element").removeClass("element_minute"),e.addClass("element_minute"),this.updateMode("mark")},i.prototype.checkAutostop=function(){var t,e,i,s;if(this.timeRunning){for(t=0,e=i=0,s=this.autostop-1;(0<=s?i<=s:i>=s)&&"correct"!==this.gridOutput[e];e=0<=s?++i:--i)t++;if(this.autostopped===!1&&t===this.autostop&&this.autostopTest(),this.autostopped===!0&&t<this.autostop&&this.undoable===!0)return this.unAutostopTest()}},i.prototype.markElement=function(t,e,i){var s,a,n,r,o,m,d,l;if(null==e&&(e=null),a=this.dataEntry===!1&&null!=(null!=(o=this.parent)&&null!=(m=o.parent)?m.enableCorrections:void 0)&&(null!=(d=this.parent)&&null!=(l=d.parent)?l.enableCorrections:void 0)===!1,r=0!==parseInt(this.lastAttempted),n=parseInt(t)>parseInt(this.lastAttempted),!(a&&r&&n||(s=this.$el.find(".grid_element[data-index="+t+"]"),"populate"!==i&&this.markRecord.push(t),this.autostopped))){if(null===e)return this.gridOutput[t-1]="correct"===this.gridOutput[t-1]?"incorrect":"correct",s.toggleClass("element_wrong");if(this.gridOutput[t-1]=e,"incorrect"===e)return s.addClass("element_wrong");if("correct"===e)return s.removeClass("element_wrong")}},i.prototype.endOfGridLineClick=function(t){var e,i,s,a,n,r,o,m,d;if(t.preventDefault(),"mark"===this.mode){if(e=$(t.target),e.hasClass("element_wrong"))for(e.removeClass("element_wrong"),s=e.attr("data-index"),i=a=r=s,o=s-(this.columns-1);r<=o?a<=o:a>=o;i=r<=o?++a:--a)this.markElement(i,"correct");else if(!e.hasClass("element_wrong")&&!this.autostopped)for(e.addClass("element_wrong"),s=e.attr("data-index"),i=n=m=s,d=s-(this.columns-1);m<=d?n<=d:n>=d;i=m<=d?++n:--n)this.markElement(i,"incorrect");if(0!==this.autostop)return this.checkAutostop()}},i.prototype.lastHandler=function(t,e){var i;if(null!=e?i=this.$el.find(".grid_element[data-index="+e+"]"):(i=$(t.target),e=i.attr("data-index")),e-1>=this.gridOutput.lastIndexOf("incorrect"))return this.$el.find(".element_last").removeClass("element_last"),i.addClass("element_last"),this.lastAttempted=e},i.prototype.startTimer=function(){if(this.timerStopped===!1&&this.timeRunning===!1)return this.interval=setInterval(this.updateCountdown,1e3),this.startTime=this.getTime(),this.timeRunning=!0,this.updateMode("mark"),this.enableGrid(),this.updateCountdown()},i.prototype.enableGrid=function(){return this.$el.find("table.disabled, div.disabled").removeClass("disabled")},i.prototype.stopTimer=function(t,e){if(null==e&&(e=!1),this.timeRunning===!0)return(null!=t?t.target:void 0)&&this.lastHandler(null,this.items.length),clearInterval(this.interval),this.stopTime=this.getTime(),this.timeRunning=!1,this.timerStopped=!0,this.updateCountdown()},i.prototype.autostopTest=function(){return Utils.flash(),clearInterval(this.interval),this.stopTime=this.getTime(),this.autostopped=!0,this.timerStopped=!0,this.timeRunning=!1,this.$el.find(".grid_element").slice(this.autostop-1,this.autostop).addClass("element_last"),this.lastAttempted=this.autostop,this.timeout=setTimeout(this.removeUndo,3e3),Utils.topAlert(this.text.autostop)},i.prototype.removeUndo=function(){return this.undoable=!1,this.updateMode("disabled"),clearTimeout(this.timeout)},i.prototype.unAutostopTest=function(){return this.interval=setInterval(this.updateCountdown,1e3),this.updateCountdown(),this.autostopped=!1,this.lastAttempted=0,this.$el.find(".grid_element").slice(this.autostop-1,this.autostop).removeClass("element_last"),this.timeRunning=!0,this.updateMode("mark"),Utils.topAlert(t("GridRunView.message.autostop_cancel"))},i.prototype.updateCountdown=function(){if(this.timeElapsed=Math.min(this.getTime()-this.startTime,this.timer),this.timeRemaining=this.timer-this.timeElapsed,this.$el.find(".timer").html(this.timeRemaining),this.timeRunning===!0&&this.captureLastAttempted&&this.timeRemaining<=0&&(this.stopTimer({simpleStop:!0}),Utils.background("red"),_.delay(function(t){return function(){return alert(t.text.touchLastItem),Utils.background("")}}(this),1e3),this.updateMode("last")),this.captureItemAtTime&&!this.gotIntermediate&&!this.minuteMessage&&this.timeElapsed>=this.captureAfterSeconds)return Utils.flash("yellow"),Utils.midAlert(t("please select the item the child is currently attempting")),this.minuteMessage=!0,this.updateMode("minuteItem")},i.prototype.updateMode=function(t){return null==t&&(t=null),null===t&&0===this.timeElapsed&&!this.dataEntry||"disabled"===t?this.modeButton.setValue(null):null!=t?(this.mode=t,this.modeButton.setValue(this.mode)):this.mode=this.modeButton.getValue()},i.prototype.getTime=function(){return Math.round((new Date).getTime()/1e3)},i.prototype.resetVariables=function(){var t;if(this.timer=parseInt(this.model.get("timer"))||0,this.untimed=0===this.timer||this.dataEntry,this.gotMinuteItem=!1,this.minuteMessage=!1,this.itemAtTime=null,this.timeIntermediateCaptured=null,this.markRecord=[],this.timerStopped=!1,this.startTime=0,this.stopTime=0,this.timeElapsed=0,this.timeRemaining=this.timer,this.lastAttempted=0,this.interval=null,this.undoable=!0,this.timeRunning=!1,this.items=_.compact(this.model.get("items")),this.itemMap=[],this.mapItem=[],this.model.has("randomize")&&this.model.get("randomize")?(this.itemMap=this.items.map(function(t,e){return e}),this.items.forEach(function(t,e){var i,s;return i=Math.floor(Math.random()*this.items.length),s=this.itemMap[i],this.itemMap[i]=this.itemMap[e],this.itemMap[e]=s},this),this.itemMap.forEach(function(t,e){return this.mapItem[this.itemMap[e]]=e},this)):this.items.forEach(function(t,e){return this.itemMap[e]=e,this.mapItem[e]=e},this),this.captureLastAttempted||this.captureItemAtTime?this.mode="disabled":this.mode="mark",this.dataEntry&&(this.mode="mark"),this.gridOutput=this.items.map(function(){return"correct"}),this.columns=parseInt(this.model.get("columns"))||3,this.autostop=this.untimed?0:parseInt(this.model.get("autostop"))||0,this.autostopped=!1,this.$el.find(".grid_element").removeClass("element_wrong").removeClass("element_last").addClass("disabled"),this.$el.find("table").addClass("disabled"),this.$el.find(".timer").html(this.timer),this.dataEntry||null!=this.parent&&null!=this.parent.parent&&null!=this.parent.parent.result&&(t=this.parent.parent.result.getByHash(this.model.get("hash")),t&&(this.captureLastAttempted=t.capture_last_attempted,this.itemAtTime=t.item_at_time,this.timeIntermediateCaptured=t.time_intermediate_captured,this.captureItemAtTime=t.capture_item_at_time,this.autostop=t.auto_stop,this.lastAttempted=t.attempted,this.timeRemaining=t.time_remain,this.markRecord=t.mark_record)),null!=this.modeButton)return this.updateMode(this.mode)},i.prototype.i18n=function(){return this.text={autostop:t("GridRunView.message.autostop"),touchLastItem:t("GridRunView.message.touch_last_item"),subtestNotComplete:t("GridRunView.message.subtest_not_complete"),inputMode:t("GridRunView.label.input_mode"),timeRemaining:t("GridRunView.label.time_remaining"),wasAutostopped:t("GridRunView.label.was_autostopped"),mark:t("GridRunView.button.mark"),start:t("GridRunView.button.start"),stop:t("GridRunView.button.stop"),restart:t("GridRunView.button.restart"),lastAttempted:t("GridRunView.button.last_attempted")}},i.prototype.initialize=function(t){var e;return this.i18n(),""!==this.model.get("fontFamily")&&(this.fontStyle='style="font-family: '+this.model.get("fontFamily")+' !important;"'),this.captureAfterSeconds=this.model.has("captureAfterSeconds")?this.model.get("captureAfterSeconds"):0,this.captureItemAtTime=!!this.model.has("captureItemAtTime")&&this.model.get("captureItemAtTime"),this.captureLastAttempted=!this.model.has("captureLastAttempted")||this.model.get("captureLastAttempted"),this.endOfLine=!this.model.has("endOfLine")||this.model.get("endOfLine"),this.layoutMode=this.model.has("layoutMode")?this.model.get("layoutMode"):"fixed",this.fontSize=this.model.has("fontSize")?this.model.get("fontSize"):"normal",e="small"===this.fontSize?"font_size_small":"",this.rtl=this.model.getBoolean("rtl"),this.rtl&&this.$el.addClass("rtl-grid"),this.totalTime=this.model.get("timer")||0,this.modeHandlers={mark:this.markHandler,last:this.lastHandler,minuteItem:this.intermediateItemHandler,disabled:$.noop},this.dataEntry=t.dataEntry,this.model=t.model,this.parent=t.parent,this.resetVariables(),this.gridElement=_.template("<td><button data-label='{{label}}' data-index='{{i}}' class='grid_element "+e+"' "+(this.fontStyle||"")+">{{label}}</button></td>"),this.variableGridElement=_.template("<button data-label='{{label}}' data-index='{{i}}' class='grid_element "+e+"' "+(this.fontStyle||"")+">{{label}}</button>"),"fixed"===this.layoutMode?this.endOfGridLine=_.template("<td><button data-index='{{i}}' class='end_of_grid_line'>*</button></td>"):this.endOfGridLine=_.template("")},i.prototype.render=function(){var e,i,s,a,n,r,o,m,d,l,h,p,u,c,g,f,b,v,k,y,A,R,C,I,T;if(r=0,I="<div class='timer_wrapper'><button class='start_time time'>"+this.text.start+"</button><div class='timer'>"+this.timer+"</div></div>",this.untimed||(a="disabled"),this.rtl&&(n="rtl_mode"),d=this.untimed?"":I,m="","fixed"===this.layoutMode){for(m+="<table class='grid "+a+" "+(n||"")+"'>",o=!0;;){if(r>this.items.length)break;for(m+="<tr>",l=p=1,k=this.columns;1<=k?p<=k:p>=k;l=1<=k?++p:--p)r<this.items.length&&(m+=this.gridElement({label:_.escape(this.items[this.itemMap[r]]),i:r+1})),r++;o?(r<this.items.length+1&&this.endOfLine&&(m+="<td></td>"),o=!1):r<this.items.length+1&&this.endOfLine&&(m+=this.endOfGridLine({i:r})),m+="</tr>"}m+="</table>"}else{for(m+="<div class='grid "+a+" "+(n||"")+"'>",y=this.items,l=u=0,g=y.length;u<g;l=++u)h=y[l],m+=this.variableGridElement({label:_.escape(this.items[this.itemMap[l]]),i:l+1});m+="</div>"}if(d+=m,T="<div class='timer_wrapper'><button class='stop_time time'>"+this.text.stop+"</button><div class='timer'>"+this.timer+"</div></div>",C="<div> <button class='restart command'>"+this.text.restart+"</button> <br> </div>",b="",(this.captureLastAttempted||this.captureItemAtTime)&&(null!=(A=this.modeButton)&&A.close(),i={options:[],mode:"single"},i.options.push({label:this.text.mark,value:"mark"}),this.captureItemAtTime&&i.options.push({label:t("item at __seconds__ seconds",{seconds:this.captureAfterSeconds}),value:"minuteItem"}),this.captureLastAttempted&&i.options.push({label:this.text.lastAttempted,value:"last"}),this.modeButton=new ButtonView(i),this.modeButton.on("change click",function(t){return function(){return t.updateMode()}}(this),this),b="<div class='grid_mode_wrapper question clearfix'> <label>"+this.text.inputMode+"</label><br> <div class='mode-button'></div> </div>"),s="<table class='class_table'> <tr> <td>"+this.text.wasAutostopped+"</td><td><input type='checkbox' class='data_autostopped'></td> </tr> <tr> <td>"+this.text.timeRemaining+"</td><td><input type='number' class='data_time_remain'></td> </tr> </table>",d+=(this.untimed?"":T)+" "+(this.untimed?"":C)+" "+b+" "+((this.dataEntry?s:void 0)||""),this.$el.html(d),this.modeButton.setElement(this.$el.find(".mode-button")),this.modeButton.render(),this.trigger("rendered"),this.trigger("ready"),!this.dataEntry&&null!=this.parent&&null!=this.parent.parent&&null!=this.parent.parent.result&&(v=this.parent.parent.result.getByHash(this.model.get("hash")))){for(this.markRecord=v.mark_record,R=this.markRecord,l=c=0,f=R.length;c<f;l=++c)h=R[l],this.markElement(h,null,"populate");return this.itemAtTime=v.item_at_time,e=this.$el.find(".grid_element[data-index="+this.itemAtTime+"]"),e.addClass("element_minute"),this.lastAttempted=v.attempted,e=this.$el.find(".grid_element[data-index="+this.lastAttempted+"]"),e.addClass("element_last")}},i.prototype.isValid=function(){var e,i;return this.timeRunning&&this.stopTimer(),parseInt(this.lastAttempted)===this.items.length&&0===this.timeRemaining?(e=this.items[this.items.length-1],confirm(t("GridRunView.message.last_item_confirm",{item:e}))?(this.updateMode,!0):(this.messages=(null!=(i=this.messages)?i.push:void 0)?this.messages.concat([msg]):[msg],this.updateMode("last"),!1)):(!this.captureLastAttempted||0!==this.lastAttempted)&&(this.timeRunning!==!0&&(0===this.timer||this.timeRemaining!==this.timer))},i.prototype.showErrors=function(){var t,e,i,s;return t=this.messages||[],this.messages=[],s=0!==this.timer&&this.timeRemaining===this.timer,e=this.captureLastAttempted&&0===this.lastAttempted,i=this.timeRuning===!0,s&&t.push(this.text.subtestNotComplete),e&&!s&&(t.push(this.text.touchLastItem),this.updateMode("last")),i&&t.push(this.text.timeStillRunning),Utils.midAlert(t.join("<br>"),3e3)},i.prototype.getResult=function(){var t,e,i,s,a,n,r,o,m,d;for(e=[],a=[],this.captureLastAttempted||(this.lastAttempted=this.items.length),o=this.items,i=n=0,r=o.length;n<r;i=++n)s=o[i],this.mapItem[i]<this.lastAttempted?a[i]={itemResult:this.gridOutput[this.mapItem[i]],itemLabel:s}:a[i]={itemResult:"missing",itemLabel:this.items[this.mapItem[i]]};return this.captureLastAttempted||(this.lastAttempted=!1),this.dataEntry?(t=this.$el.find(".data_autostopped").is(":checked"),d=parseInt(this.$el.find(".data_time_remain").val())):(t=this.autostopped,d=this.timeRemaining),m={capture_last_attempted:this.captureLastAttempted,item_at_time:this.itemAtTime,time_intermediate_captured:this.timeIntermediateCaptured,capture_item_at_time:this.captureItemAtTime,auto_stop:t,attempted:this.lastAttempted,items:a,time_remain:d,mark_record:this.markRecord,variable_name:this.model.get("variableName")}},i.prototype.getSkipped=function(){var t,e,i,s,a,n,r;for(i=[],n=this.items,t=s=0,a=n.length;s<a;t=++s)e=n[t],i[t]={itemResult:"skipped",itemLabel:e};return r={capture_last_attempted:"skipped",item_at_time:"skipped",time_intermediate_captured:"skipped",capture_item_at_time:"skipped",auto_stop:"skipped",attempted:"skipped",items:i,time_remain:"skipped",mark_record:"skipped",variable_name:this.model.get("variableName")}},i.prototype.onClose=function(){return clearInterval(this.interval)},i}(Backbone.View);


var GridEditView,extend=function(e,t){function a(){this.constructor=e}for(var i in t)hasProp.call(t,i)&&(e[i]=t[i]);return a.prototype=t.prototype,e.prototype=new a,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;GridEditView=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="GridEditView",t.prototype.events={"blur #subtest_items":"cleanWhitespace"},t.prototype.cleanWhitespace=function(){return this.$el.find("#subtest_items").val(this.$el.find("#subtest_items").val().replace(/\s+/g," "))},t.prototype.initialize=function(e){return this.model=e.model},t.prototype.isValid=function(){return!0},t.prototype.save=function(){return/\t|,/.test(this.$el.find("#subtest_items").val())&&alert('Please remember\n\nGrid items are space " " delimited'),this.model.set({captureLastAttempted:"true"===this.$el.find("#capture_last_attempted input:checked").val(),endOfLine:"true"===this.$el.find("#end_of_line input:checked").val(),captureItemAtTime:"true"===this.$el.find("#capture_item_at_time input:checked").val(),captureAfterSeconds:parseInt(this.$el.find("#capture_after_seconds").val()),fontSize:this.$el.find("#font_size input:checked").val(),layoutMode:this.$el.find("#layout_mode input:checked").val(),randomize:"true"===this.$el.find("#randomize input:checked").val(),timer:parseInt(this.$el.find("#subtest_timer").val()),items:_.compact(this.$el.find("#subtest_items").val().split(" ")),columns:parseInt(this.$el.find("#subtest_columns").val()),autostop:parseInt(this.$el.find("#subtest_autostop").val()),variableName:this.$el.find("#subtest_variable_name").val().replace(/\s/g,"_").replace(/[^a-zA-Z0-9_]/g,"")})},t.prototype.render=function(){var e,t,a,i,l,s,d,o,r,n,u,m;return o=this.model.get("items").join(" "),u=this.model.get("timer")||0,l=this.model.get("columns")||0,e=this.model.get("autostop")||0,m=this.model.get("variableName")||"",n=!!this.model.has("randomize")&&this.model.get("randomize"),a=!!this.model.has("captureItemAtTime")&&this.model.get("captureItemAtTime"),t=this.model.has("captureAfterSeconds")?this.model.get("captureAfterSeconds"):0,i=!this.model.has("captureLastAttempted")||this.model.get("captureLastAttempted"),s=!this.model.has("endOfLine")||this.model.get("endOfLine"),d=this.model.has("fontSize")?this.model.get("fontSize"):"medium",r=this.model.has("layoutMode")?this.model.get("layoutMode"):"fixed",this.$el.html("<div class='label_value'> <label for='subtest_variable_name' title='This will be used for CSV exporting.'>Variable name</label> <input id='subtest_variable_name' value='"+m+"'> </div> <div class='label_value'> <label for='subtest_items' title='These items are space delimited. Pasting text from other applications may insert tabs and new lines. Whitespace will be automatically corrected.'>Grid Items</label> <textarea id='subtest_items'>"+o+"</textarea> </div> <div class='label_value'> <label>Randomize items</label><br> <div class='menu_box'> <div id='randomize' class='buttonset'> <label for='randomize_true'>Yes</label><input name='randomize' type='radio' value='true' id='randomize_true' "+(n?"checked":void 0)+"> <label for='randomize_false'>No</label><input name='randomize' type='radio' value='false' id='randomize_false' "+(n?void 0:"checked")+"> </div> </div> <br> <label>Layout mode</label><br> <div class='menu_box'> <div id='layout_mode' class='buttonset'> <label for='layout_mode_fixed'>Fixed<img></label><input name='layout_mode' type='radio' value='fixed' id='layout_mode_fixed' "+("fixed"===r?"checked":"")+"> <label for='layout_mode_variable'>Variable<img></label><input name='layout_mode' type='radio' value='variable' id='layout_mode_variable' "+("variable"===r?"checked":"")+"> </div> </div> <br> <label>Grid font size</label><br> <div class='menu_box'> <div id='font_size' class='buttonset'> <label for='font_size_medium'>Medium</label><input name='font_size' type='radio' value='medium' id='font_size_medium' "+("medium"===d?"checked":"")+"> <label for='font_size_small'>Small</label><input name='font_size' type='radio' value='small' id='font_size_small' "+("small"===d?"checked":"")+"> </div> </div> <br> <label>Capture item at specified number of seconds</label><br> <div class='menu_box'> <div id='capture_item_at_time' class='buttonset'> <label for='capture_item_at_time_true'>Yes</label><input name='capture_item_at_time' type='radio' value='true' id='capture_item_at_time_true' "+(a?"checked":void 0)+"> <label for='capture_item_at_time_false'>No</label><input name='capture_item_at_time' type='radio' value='false' id='capture_item_at_time_false' "+(a?void 0:"checked")+"> </div> <div class='label_value'> <label for='capture_after_seconds' title='After this number of seconds has passed the enumerator will be instructed to mark the item currently being attempted, and then resume.'>Seconds</label> <input id='capture_after_seconds' value='"+t+"' type='number'> </div> </div> <br> <label>Capture last item attempted</label><br> <div class='menu_box'> <div id='capture_last_attempted' class='buttonset'> <label for='capture_last_attempted_true'>Yes</label><input name='capture_last_attempted' type='radio' value='true' id='capture_last_attempted_true' "+(i?"checked":void 0)+"> <label for='capture_last_attempted_false'>No</label><input name='capture_last_attempted' type='radio' value='false' id='capture_last_attempted_false' "+(i?void 0:"checked")+"> </div> </div> <br> <label>Mark entire line button</label><br> <div class='menu_box'> <div id='end_of_line' class='buttonset'> <label for='end_of_line_true'>Yes</label><input name='end_of_line' type='radio' value='true' id='end_of_line_true' "+(s?"checked":void 0)+"> <label for='end_of_line_false'>No</label><input name='end_of_line' type='radio' value='false' id='end_of_line_false' "+(s?void 0:"checked")+"> </div> </div> </div> <div class='label_value'> <label for='subtest_columns' title='Number of columns in which to display the grid items.'>Columns</label> <input id='subtest_columns' value='"+l+"' type='number'> </div> <div class='label_value'> <label for='subtest_autostop' title='Number of incorrect items in a row from the beginning, after which, the test automatically stops. If the item that triggered the autostop was an enumerator error, the enumerator has 3 seconds to undo any incorrect item and resume the test. Otherwise, the test is stopped but may still be reset completely.'>Autostop</label> <input id='subtest_autostop' value='"+e+"' type='number'> </div> <div class='label_value'> <label for='subtest_timer' title='Seconds to give the child to complete the test. Setting this value to 0 will make the test untimed.'>Timer</label> <input id='subtest_timer' value='"+u+"' type='number'> </div>")},t}(Backbone.View);


var ObservationRunView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function i(){this.constructor=t}for(var s in e)hasProp.call(e,s)&&(t[s]=e[s]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;ObservationRunView=function(e){function i(){return this.saveCurrentSurvey=bind(this.saveCurrentSurvey,this),this.updateObservationIndex=bind(this.updateObservationIndex,this),this.checkSurveyDisplay=bind(this.checkSurveyDisplay,this),this.checkIfOver=bind(this.checkIfOver,this),this.checkWarning=bind(this.checkWarning,this),this.checkObservationPace=bind(this.checkObservationPace,this),this.tick=bind(this.tick,this),i.__super__.constructor.apply(this,arguments)}return extend(i,e),i.prototype.className="ObservationRunView",i.prototype.events={"click .start_time":"startObservations","click .stop_time":"stopObservations","click .done":"completeObservation"},i.FORCE=1,i.prototype.initialize=function(t){return this.model=t.model,this.parent=t.parent,this.warningSeconds=5,this.initializeFlags(),this.initializeSurvey()},i.prototype.initializeSurvey=function(){var t,e,i;return null!=this.survey&&this.onClose(),t=$.extend(this.model.get("surveyAttributes"),{_id:this.model.id}),i=function(){var i,s,n;for(n=[],e=i=1,s=parseInt(this.model.get("totalSeconds")/this.model.get("intervalLength"));1<=s?i<=s:i>=s;e=1<=s?++i:--i)n.push(new Backbone.Model(t));return n}.call(this),i.unshift(""),this.skippableView=new SurveyRunView({model:i[1],parent:this,isObservation:!0}),this.survey={models:i,results:[]}},i.prototype.initializeFlags=function(){return this.iAm={counting:!1,recording:!1},this.iHavent={warned:!0},this.iHave={runOnce:!1,finished:!1},this.my={time:{start:0,elapsed:0},observation:{index:0,oldIndex:0,completed:0,total:parseInt(this.model.get("totalSeconds")/this.model.get("intervalLength"))}}},i.prototype.startObservations=function(){if(!this.iAm.counting&&!this.iHave.runOnce)return this.$el.find(".stop_button_wrapper, .next_display, .completed_display").removeClass("confirmation"),this.$el.find(".start_button_wrapper").addClass("confirmation"),this.timerInterval=setInterval(this.tick,1e3),this.iAm.counting=!0,this.my.time.start=this.getTime(),this.my.time.elapsed=0},i.prototype.stopObservations=function(e){var i,s;return clearInterval(this.timerInterval),i=null!=e,s=null==e,null!=e&&this.trigger("showNext"),s&&!this.iHave.finished?(this.iAm.recording&&(this.resetObservationFlags(),this.saveCurrentSurvey()),this.my.observation.index++,this.renderSurvey()):(this.$el.find(".stop_button_wrapper").addClass("confirmation"),Utils.midAlert(t("observations finished"))),this.$el.find(".next_display").addClass("confirmation"),this.iHave.finished=!0,this.iHave.runOnce=!0},i.prototype.tick=function(){return this.my.time.elapsed=this.getTime()-this.my.time.start,this.checkIfOver(),this.updateObservationIndex(),this.updateProgressDisplay(),this.checkSurveyDisplay(),this.checkObservationPace(),this.checkWarning()},i.prototype.checkObservationPace=function(){if(this.iAm.recording&&this.my.observation.completed<this.my.observation.index-1&&0!==this.my.observation.index)return this.iHave.forcedProgression=!0,this.resetObservationFlags(),this.saveCurrentSurvey(),this.renderSurvey()},i.prototype.checkWarning=function(){var e,i;if(i=Math.floor((this.my.time.elapsed+this.warningSeconds)/this.model.get("intervalLength")),e=this.my.observation.index<i&&!this.iHave.finished,this.iAm.recording&&this.iHavent.warned&&e&&0!==this.my.observation.index)return Utils.midAlert(t("observation ending soon")),this.iHavent.warned=!1},i.prototype.gridWasAutostopped=function(){return!1},i.prototype.checkIfOver=function(){if(this.my.time.elapsed>=this.model.get("totalSeconds"))return this.stopObservations()},i.prototype.checkSurveyDisplay=function(){if(this.my.observation.oldIndex!==this.my.observation.index&&!this.iHave.finished&&!this.iAm.recording)return this.renderSurvey(),this.my.observation.oldIndex=this.my.observation.index},i.prototype.updateObservationIndex=function(){if(this.my.observation.index=Math.floor(this.my.time.elapsed/this.model.get("intervalLength")),this.my.observation.index>this.survey.models.length-1)return this.my.observation.index=this.survey.models.length-1},i.prototype.updateProgressDisplay=function(){var t;if(this.$el.find(".current_observation").html(this.my.observation.index),this.$el.find(".completed_count").html(this.my.observation.completed),t=Math.max((this.my.observation.index+1)*this.model.get("intervalLength")-this.my.time.elapsed,0),this.$el.find(".time_till_next").html(t),!this.iAm.recording&&!this.iHave.finished)return this.$el.find(".next_display, .completed_display").removeClass("confirmation")},i.prototype.resetObservationFlags=function(){return this.iAm.recording=!1,this.iHavent.warned=!0},i.prototype.getTime=function(){return parseInt((new Date).getTime()/1e3)},i.prototype.completeObservation=function(t){return this.survey.view.isValid()?(this.saveCurrentSurvey(),this.iHave.finished&&this.trigger("showNext")):this.survey.view.showErrors(),this.tick()},i.prototype.saveCurrentSurvey=function(){return this.resetObservationFlags(),this.my.observation.completed++,this.survey.results.push({observationNumber:this.survey.view.index,data:this.survey.view.getResult(),saveTime:this.my.time.elapsed}),this.survey.view.close(),this.$el.find(".done").remove()},i.prototype.render=function(){var e;return this.trigger("hideNext"),e=this.model.get("totalSeconds"),this.$el.html("<div class='timer_wrapper'> <div class='progress clearfix'> <span class='completed_display confirmation'>"+t("completed")+" <div class='info_box completed_count'>"+this.my.observation.completed+"</div></span> <span class='next_display confirmation'>"+t("next observation")+" <div class='info_box time_till_next'>"+this.model.get("intervalLength")+"</div></span> </div> <div> <div class='start_button_wrapper'><button class='start_time command'>"+t("start")+"</button></div> <div class='stop_button_wrapper confirmation'><button class='stop_time command'>"+t("abort all observations")+"</button></div> </div> </div> <div id='current_survey'></div>"),this.trigger("rendered"),this.trigger("ready")},i.prototype.renderSurvey=function(e){if(this.iAm.counting)return this.iAm.recording=!0,this.survey.view=new SurveyRunView({model:this.survey.models[this.my.observation.index],parent:this,isObservation:!0}),this.survey.view.index=function(t){return function(){return t.my.observation.index}}(this)(),this.survey.view.on("rendered subRendered",function(t){return function(){return t.trigger("subRendered")}}(this)),this.survey.view.render(),this.$el.find("#current_survey").html("<span class='observation_display confirmation'>"+t("observation")+" <div class='info_box current_observation'>"+this.my.observation.index+"</div></span>"),this.$el.find("#current_survey").append(this.survey.view.el),this.$el.find("#current_survey").append("<button class='command done'>"+t("done with this observation")+"</button>"),this.$el.find("#current_survey").scrollTo(250,function(e){return function(){return e.iHave.forcedProgression?(Utils.midAlert(t("please continue with the next observation")),e.iHave.forcedProgression=!1):e.iHave.finished?Utils.midAlert(t("please enter last observation")):void 0}}(this))},i.prototype.onClose=function(){var t;return null!=(t=this.survey.view)&&t.close(),this.skippableView.close()},i.prototype.getResult=function(){return{surveys:this.survey.results,variableName:this.model.get("variableName"),totalTime:this.model.get("totalTime"),intervalLength:this.model.get("intervalTime"),completedObservations:this.my.observation.completed}},i.prototype.getSum=function(){return{total:this.my.observation.completed}},i.prototype.getSkipped=function(){var t,e,i,s,n;for(n=this.skippableView.getSkipped(),s=[],t=e=1,i=this.survey.models.length-1;1<=i?e<=i:e>=i;t=1<=i?++e:--e)s.push({observationNumber:t,data:n,saveTime:"skipped"});return{surveys:s,variableName:"skipped",totalTime:"skipped",intervalLength:"skipped",completedObservations:"skipped"}},i.prototype.isValid=function(){return this.iHave.finished},i.prototype.showErrors=function(){return this.$el.find("messages").html(this.validator.getErrors().join(", "))},i.prototype.updateNavigation=function(){return Tangerine.nav.setStudent(this.$el.find("#participant_id").val())},i}(Backbone.View);


var ObservationEditView,extend=function(e,t){function n(){this.constructor=e}for(var r in t)hasProp.call(t,r)&&(e[r]=t[r]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;ObservationEditView=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="ObservationEditView",t.prototype.initialize=function(e){var t;return this.model=e.model,t=$.extend(this.model.get("surveyAttributes"),{_id:this.model.id,assessmentId:this.model.get("assessmentId")}),this.surveyModel=new Backbone.Model(t),this.surveyView=new SurveyEditView({model:this.surveyModel})},t.prototype.isValid=function(){return!0},t.prototype.save=function(){var e,t,n;return e=[],n=parseInt(this.$el.find("#total_seconds").val()),t=parseInt(this.$el.find("#interval_length").val()),0===n&&e.push("Total seconds needs to be non-zero value."),0===t&&e.push("Interval length needs to be a non-zero value."),0!==e.length&&alert("Warning\n\n"+e.join("\n")),this.model.set({totalSeconds:n,intervalLength:t,surveyAttributes:this.surveyModel.attributes})},t.prototype.render=function(){var e,t;return t=this.model.get("totalSeconds")||0,e=this.model.get("intervalLength")||0,this.$el.html("<div class='label_value'> <label for='total_seconds'>Total seconds</label> <input id='total_seconds' value='"+t+"' type='number'><br> <label for='interval_length' title='In seconds'>Interval length</label> <input id='interval_length' value='"+e+"' type='number'> </div> <div id='survey_editor'></div>"),this.surveyView.setElement(this.$el.find("#survey_editor")),this.surveyView.render(),this.$el.find("#grid_link").remove()},t}(Backbone.View);


var GpsRunView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function i(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;GpsRunView=function(e){function i(){return this.poll=bind(this.poll,this),i.__super__.constructor.apply(this,arguments)}return extend(i,e),i.prototype.className="GpsRunView",i.prototype.events={"click .clear":"clear"},i.prototype.clear=function(){return this.position=null,this.updateDisplay()},i.prototype.initialize=function(t){return this.i18n(),this.model=t.model,this.parent=t.parent,this.dataEntry=t.dataEntry,this.position=null,this.retryCount=0},i.prototype.i18n=function(){return this.text={clear:t("GpsRunView.button.clear"),good:t("GpsRunView.label.good"),ok:t("GpsRunView.label.ok"),poor:t("GpsRunView.label.poor"),latitude:t("GpsRunView.label.latitude"),longitude:t("GpsRunView.label.longitude"),accuracy:t("GpsRunView.label.accuracy"),meters:t("GpsRunView.label.meters"),savedReading:t("GpsRunView.label.saved_reading"),currentReading:t("GpsRunView.label.current_reading"),bestReading:t("GpsRunView.label.best_reading"),gpsStatus:t("GpsRunView.label.gps_status"),gpsOk:t("GpsRunView.message.gps_ok"),retrying:t("GpsRunView.message.retrying"),searching:t("GpsRunView.message.searching"),notSupported:_(t("GpsRunView.message.not_supported")).escape()}},i.prototype.poll=function(){return navigator.geolocation.getCurrentPosition(function(t){return function(e){if(t.updateDisplay(e),t.updatePosition(e),t.updateStatus(t.text.gpsOk),t.retryCount=0,!t.stopPolling)return setTimeout(t.poll(),5e3)}}(this),function(t){return function(e){return t.updateStatus(e.message),t.stopPolling||setTimeout(t.poll(),5e3),t.retryCount++}}(this),{maximumAge:1e4,timeout:3e4,enableHighAccuracy:!0})},i.prototype.easify=function(t){var e,i,n,o,s,r,l;return{lat:null!=(null!=t&&null!=(e=t.coords)?e.latitude:void 0)?t.coords.latitude:"...","long":null!=(null!=t&&null!=(i=t.coords)?i.longitude:void 0)?t.coords.longitude:"...",alt:null!=(null!=t&&null!=(n=t.coords)?n.altitude:void 0)?t.coords.altitude:"...",acc:null!=(null!=t&&null!=(o=t.coords)?o.accuracy:void 0)?t.coords.accuracy:"...",altAcc:null!=(null!=t&&null!=(s=t.coords)?s.altitudeAccuracy:void 0)?t.coords.altitudeAccuracy:"...",heading:null!=(null!=t&&null!=(r=t.coords)?r.heading:void 0)?t.coords.heading:"...",speed:null!=(null!=t&&null!=(l=t.coords)?l.speed:void 0)?t.coords.speed:"...",timestamp:null!=(null!=t?t.timestamp:void 0)?t.timestamp:"..."}},i.prototype.updatePosition=function(t){var e;if(t=this.easify(t),null==this.position&&(this.position=t),null!=(null!=t?t.acc:void 0)&&null!=(null!=(e=this.position)?e.acc:void 0)&&t.acc<=this.position.acc)return this.position=t},i.prototype.updateDisplay=function(t){var e,i,n,o,s,r,l,a,u,p,d,c;for(t=this.easify(t),d=[{el:this.$el.find(".gps_current"),data:t},{el:this.$el.find(".gps_best"),data:this.position}],c=[],s=r=0,a=d.length;r<a;s=++r)p=d[s],i=p.data,n=p.el,l=(null!=i?i.lat:void 0)?parseFloat(i.lat).toFixed(4):"...",u=(null!=i?i["long"]:void 0)?parseFloat(i["long"]).toFixed(4):"...",e=(null!=i?i.acc:void 0)?parseInt(i.acc)+(" "+this.text.meters):"...",e+=parseInt(null!=i?i.acc:void 0)<50?"("+this.text.good+")":parseInt(null!=i?i.acc:void 0)>100?"("+this.text.poor+")":"("+this.text.ok+")",o="<table> <tr><td>"+this.text.latitude+"</td> <td>"+l+"</td></tr> <tr><td>"+this.text.longitude+"</td><td>"+u+"</td></tr> <tr><td>"+this.text.accuracy+"</td> <td>"+e+"</td></tr> </table>",c.push(n.html(o));return c},i.prototype.updateStatus=function(e){var i,n;return null==e&&(e=""),n=this.retryCount>0?t("GpsRunView.message.attempt",{count:this.retryCount+1}):"",i=this.stopPolling?"":"<br>"+this.text.retrying+" "+n,this.$el.find(".status").html(e+i)},i.prototype.render=function(){var t,e,i,n;return Modernizr.geolocation?(this.dataEntry||(n=this.parent.parent.result.getByHash(this.model.get("hash"))),n?(e=n.lat,i=n["long"],t=n.acc,this.$el.html("<section> <h3>"+this.text.savedReading+"</h3> <div class='gps_saved'> <table> <tr><td>"+this.text.latitude+"</td> <td>"+e+"</td></tr> <tr><td>"+this.text.longitude+"</td><td>"+i+"</td></tr> <tr><td>"+this.text.accuracy+"</td> <td>"+t+"</td></tr> </table> </div>")):this.$el.html("<section> <h3>"+this.text.bestReading+"</h3> <div class='gps_best'></div><button class='clear command'>"+this.text.clear+"</button> <h3>"+this.text.currentReading+"</h3> <div class='gps_current'></div> </section> <section> <h2>"+this.text.gpsStatus+"</h2> <div class='status'>"+this.text.searching+"</div> </section>"),this.trigger("rendered"),this.trigger("ready"),this.poll()):(this.$el.html(this.text.notSupported),this.position=this.easify(null),this.trigger("rendered"),this.trigger("ready"))},i.prototype.getResult=function(){var t;return t=this.parent.parent.result.getByHash(this.model.get("hash")),t?t:this.position||{}},i.prototype.getSkipped=function(){return this.position||{}},i.prototype.onClose=function(){return this.stopPolling=!0},i.prototype.isValid=function(){return!0},i.prototype.showErrors=function(){return!0},i}(Backbone.View);


var GpsEditView,extend=function(e,t){function o(){this.constructor=e}for(var i in t)hasProp.call(t,i)&&(e[i]=t[i]);return o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;GpsEditView=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="GpsEditView",t.prototype.initialize=function(e){return this.model=e.model,this.parent=e.parent},t.prototype.render=function(){var e;return e=this.model.get("simpleMode"),this.$el.html("<div class='label_value'> <label>Simple Mode</label><br> <div class='menu_box'> <div id='simple_mode_radio' class='buttonset'> <label for='simple_mode_true'>Yes</label><input name='simple_mode' type='radio' value='true' id='simple_mode_true' "+(e?"checked":void 0)+"> <label for='simple_mode_false'>No</label><input name='simple_mode' type='radio' value='false' id='simple_mode_false' "+(e?void 0:"checked")+"> </div> </div> </div>")},t.prototype.save=function(){var e;return e=$(this.$el.find("#simple_mode_true")[0]).is(":checked"),this.model.set("simpleMode",e)},t.prototype.isValid=function(){return!0},t}(Backbone.View);


var GpsPrintView,extend=function(t,r){function e(){this.constructor=t}for(var o in r)hasProp.call(r,o)&&(t[o]=r[o]);return e.prototype=r.prototype,t.prototype=new e,t.__super__=r.prototype,t},hasProp={}.hasOwnProperty;GpsPrintView=function(t){function r(){return r.__super__.constructor.apply(this,arguments)}return extend(r,t),r.prototype.className="Gps",r.prototype.initialize=function(t){return this.model=t.model,this.parent=t.parent},r.prototype.render=function(){if("stimuli"!==this.format&&"backup"!==this.format)return"content"===this.format&&this.$el.html("Capture Gps location"),this.trigger("rendered")},r}(Backbone.View);


var Result,extend=function(t,e){function r(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;Result=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.url="result",e.prototype.initialize=function(t){if(t.blank===!0)return this.set({subtestData:[],startTime:(new Date).getTime(),enumerator:Tangerine.user.name(),tangerineVersion:Tangerine.version,device:navigator.userAgent,instanceId:Tangerine.settings.getString("instanceId")}),this.unset("blank")},e.prototype.add=function(t,e){return null==e&&(e={}),this.setSubtestData(t,e),this.save(null,{success:e.success||$.noop,error:e.error||$.noop})},e.prototype.insert=function(t){var e,r,n,a,s,o;for(o=this.get("subtestData"),a=o,e=r=0,n=o.length;r<n;e=++r)if(s=o[e],s.subtestId===t.subtestId){a[e]=t;break}return this.set("subtestData",a)},e.prototype.setSubtestData=function(t,e){var r;return t.timestamp=(new Date).getTime(),r=this.get("subtestData"),r.push(t),this.set("subtestData",r)},e.prototype.getVariable=function(t){var e,r,n,a,s,o,i,u,l,p,f,c,h,g;for(l=this.get("subtestData"),n=0,o=l.length;n<o;n++)if(c=l[n],e=c.data,null!=e.labels){for(p=e.labels,r=a=0,i=p.length;a<i;r=++a)if(s=p[r],s===t)return e.location[r]}else for(g in e)if(h=e[g],g===t)return _.isObject(h)?_.compact(function(){var t;t=[];for(u in h)f=h[u],t.push("checked"===f?u:void 0);return t}()):h;return null},e.prototype.getByHash=function(t){var e,r,n,a;if(t)for(n=this.get("subtestData"),e=0,r=n.length;e<r;e++)if(a=n[e],t===a.subtestHash)return a.data;return null},e.prototype.getGridScore=function(t){var e,r,n,a;for(a=this.get("subtestData"),r=0,n=a.length;r<n;r++)if(e=a[r],e.subtestId===t)return parseInt(e.data.attempted)},e.prototype.getItemResultCountByVariableName=function(t,e){var r,n,a,s,o,i,u,l,p,f;for(a=!1,r=0,f=this.get("subtestData"),i=0,l=f.length;i<l;i++)if(n=f[i],null!=n.data&&null!=n.data.variable_name&&n.data.variable_name===t)for(a=!0,o=n.data.items,u=0,p=o.length;u<p;u++)s=o[u],s.itemResult===e&&r++;if(!a)throw new Error('Variable name "'+t+'" not found');return r},e.prototype.gridWasAutostopped=function(t){var e,r,n,a;for(a=this.get("subtestData"),r=0,n=a.length;r<n;r++)if(e=a[r],e.subtestId===t)return e.data.auto_stop},e}(Backbone.Model);


var Results,extend=function(t,o){function r(){this.constructor=t}for(var e in o)hasProp.call(o,e)&&(t[e]=o[e]);return r.prototype=o.prototype,t.prototype=new r,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;Results=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.url="result",o.prototype.model=Result,o.prototype.db={view:"byParentId"},o.prototype.comparator=function(t){return t.get("start_time")||0},o.prototype.fetch=function(t){return null==t&&(t={}),null==t.include_docs&&(t.include_docs=!0),o.__super__.fetch.call(this,t)},o}(Backbone.Collection);


var ResultView,extend=function(e,t){function s(){this.constructor=e}for(var n in t)hasProp.call(t,n)&&(e[n]=t[n]);return s.prototype=t.prototype,e.prototype=new s,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;ResultView=function(e){function s(){return s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="result_view",s.prototype.events={"click .save":"save","click .another":"another"},s.prototype.another=function(){return window.location.reload()},s.prototype.save=function(){return this.model.add({name:"Assessment complete",prototype:"complete",data:{comment:this.$el.find("#additional-comments").val()||"",end_time:(new Date).getTime()},subtestId:"result"},{success:function(e){return function(){var t;return Tangerine.activity="",Utils.midAlert(e.text.saved),e.$el.find(".save_status").html(e.text.saved),e.$el.find(".save_status").removeClass("not_saved"),e.$el.find(".question").fadeOut(250),t=e.$el.find("button.save"),t.removeClass("save").addClass("another").html(e.text.another)}}(this),error:function(e){return function(){return Utils.midAlert("Save error"),e.$el.find(".save_status").html("Results may not have saved")}}(this)})},s.prototype.i18n=function(){return this.text={assessmentComplete:t("ResultView.label.assessment_complete"),comments:t("ResultView.label.comments"),subtestsCompleted:t("ResultView.label.subtests_completed"),save:t("ResultView.button.save"),another:t("ResultView.button.another"),saved:t("ResultView.message.saved"),notSaved:t("ResultView.message.not_saved")}},s.prototype.initialize=function(e){return this.i18n(),this.model=e.model,this.assessment=e.assessment,this.saved=!1,this.resultSumView=new ResultSumView({model:this.model,finishCheck:!1})},s.prototype.render=function(){return this.$el.html("<h2>"+this.text.assessmentComplete+"</h2> <button class='save command'>"+this.text.save+"</button> <div class='info_box save_status not_saved'>"+this.text.notSaved+"</div> <br> <div class='question'> <label class='prompt' for='additional-comments'>"+this.text.comments+"</label> <textarea id='additional-comments' class='full_width'></textarea> </div> <div class='label_value'> <h2>"+this.text.subtestsCompleted+"</h2> <div id='result_sum' class='info_box'></div> </div>"),this.resultSumView.setElement(this.$el.find("#result_sum")),this.resultSumView.render(),this.trigger("rendered")},s.prototype.onClose=function(){return this.resultSumView.close()},s}(Backbone.View);


var ResultsView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function s(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;ResultsView=function(e){function s(){return this.afterRender=bind(this.afterRender,this),this.updateResults=bind(this.updateResults,this),this.updateOptions=bind(this.updateOptions,this),this.detectTablets=bind(this.detectTablets,this),s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="ResultsView",s.prototype.events={"click .cloud":"cloud","click .tablets":"tablets","click .detect":"detectOptions","click .details":"showResultSumView","click .refresh":"refresh","click .show_advanced":"toggleAdvanced","change #limit":"setLimit","change #page":"setOffset"},s.prototype.toggleAdvanced=function(){return this.$el.find("#advanced").toggleClass("confirmation")},s.prototype.refresh=function(){return Utils.restartTangerine("Please wait...")},s.prototype.showResultSumView=function(t){var e,s,i;return i=$(t.target).attr("data-result-id"),e=this.$el.find("#details_"+i),_.isEmpty(e.html())?(s=new Result({_id:i}),s.fetch({success:function(){var t;return t=new ResultSumView({model:s,finishCheck:!0}),t.render(),e.html("<div class='info_box'>"+$(t.el).html()+"</div>"),t.close()}})):void e.empty()},s.prototype.cloud=function(){return this.available.cloud.ok?$.couch.replicate(Tangerine.settings.urlDB("local"),Tangerine.settings.urlDB("group"),{success:function(t){return function(){return t.$el.find(".status").find(".info_box").html("Results synced to cloud successfully")}}(this),error:function(t){return function(e,s){return t.$el.find(".status").find(".info_box").html("<div>Sync error</div><div>"+e+" "+s+"</div>")}}(this)},{doc_ids:this.docList}):Utils.midAlert("Cannot detect cloud"),!1},s.prototype.tablets=function(){var t,e,s,i,n;if(this.available.tablets.okCount>0)for(n=this.available.tablets.ips,t=function(t){return function(e){return $.couch.replicate(Tangerine.settings.urlDB("local"),Tangerine.settings.urlSubnet(e),{success:function(){return t.$el.find(".status").find(".info_box").html("Results synced to "+t.available.tablets.okCount+" successfully")},error:function(e,s){return t.$el.find(".status").find(".info_box").html("<div>Sync error</div><div>"+e+" "+s+"</div>")}},{doc_ids:t.docList})}}(this),e=0,i=n.length;e<i;e++)s=n[e],t(s);else Utils.midAlert("Cannot detect tablets");return!1},s.prototype.initDetectOptions=function(){return this.available={cloud:{ok:!1,checked:!1},tablets:{ips:[],okCount:0,checked:0,total:256}}},s.prototype.detectOptions=function(){return $("button.cloud, button.tablets").attr("disabled","disabled"),this.detectCloud(),this.detectTablets()},s.prototype.detectCloud=function(){return $.ajax({dataType:"jsonp",url:Tangerine.settings.urlHost("group"),success:function(t){return function(e,s){return t.available.cloud.ok=!0}}(this),error:function(t){return function(e,s){return t.available.cloud.ok=!1}}(this),complete:function(t){return function(){return t.available.cloud.checked=!0,t.updateOptions()}}(this)})},s.prototype.detectTablets=function(){var t,e,s;for(s=[],e=t=0;t<=255;e=++t)s.push(function(t){return function(e){var s;return s=Tangerine.settings.subnetIP(e),$.ajax({url:Tangerine.settings.urlSubnet(s),dataType:"jsonp",contentType:"application/json;charset=utf-8",timeout:3e4,complete:function(e,i){return t.available.tablets.checked++,200===e.status&&(t.available.tablets.okCount++,t.available.tablets.ips.push(s)),t.updateOptions()}})}}(this)(e));return s},s.prototype.updateOptions=function(){var t,e,s;if(e=Math.decimals(this.available.tablets.checked/this.available.tablets.total*100,2),t=100===e?"finished":e+"%",s="Searching for tablets: "+t,this.available.tablets.checked>0&&this.$el.find(".checking_status").html(""+s),this.available.cloud.checked&&this.available.tablets.checked===this.available.tablets.total&&(this.$el.find(".status .info_box").html("Done detecting options"),this.$el.find(".checking_status").hide()),this.available.cloud.ok&&this.$el.find("button.cloud").removeAttr("disabled"),this.available.tablets.okCount>0&&100===e)return this.$el.find("button.tablets").removeAttr("disabled")},s.prototype.i18n=function(){return this.text={saveOptions:t("ResultsView.label.save_options"),cloud:t("ResultsView.label.cloud"),tablets:t("ResultsView.label.tablets"),csv:t("ResultsView.label.csv"),started:t("ResultsView.label.started"),results:t("ResultsView.label.results"),details:t("ResultsView.label.details"),page:t("ResultsView.label.page"),perPage:t("ResultsView.label.per_page"),advanced:t("ResultsView.label.advanced"),noResults:t("ResultsView.message.no_results"),refresh:t("ResultsView.button.refresh"),detect:t("ResultsView.button.detect")}},s.prototype.initialize=function(t){var e,s,i,n;for(this.i18n(),this.resultLimit=100,this.resultOffset=0,this.subViews=[],this.results=t.results,this.assessment=t.assessment,this.docList=[],i=this.results,e=0,s=i.length;e<s;e++)n=i[e],this.docList.push(n.get("id"));return this.initDetectOptions(),this.detectCloud()},s.prototype.render=function(){var t;return this.clearSubViews(),t="<h1>"+this.assessment.getEscapedString("name")+" "+this.text.results+"</h1> <h2>"+this.text.saveOptions+"</h2> <div class='menu_box'> <a href='/brockman/assessment/"+Tangerine.db_name+"/"+this.assessment.id+"'><button class='csv command'>"+this.text.csv+"</button></a> <!--div class='small_grey clickable show_advanced'>"+this.text.advanced+"</div--> <div id='advanced' class='confirmation'> <div class='menu_box'> <table class='class_table'> <tr> <td><label for='excludes' title='Space delimited, accepts string literals or regular expressions wrapped in / characters.'>Exclude variables</label></td> <td><input id='excludes'></td> </tr> <tr> <td><label for='includes' title='Space delimited, accepts string literals or regular expressions wrapped in / characters. Overrides exclusions.'>Include variables</label></td> <td><input id='includes'></td> </tr> </table> </div> </div> </div>",t+="<h2 id='results_header'>"+this.text.results+" (<span id='result_position'>loading...</span>)</h2> <div class='confirmation' id='controls'> <label for='page' class='small_grey'>"+this.text.page+"</label><input id='page' type='number' value='0'> <label for='limit' class='small_grey'>"+this.text.perPage+"</label><input id='limit' type='number' value='0'> </div> <section id='results_container'></section> <br> <button class='command refresh'>"+this.text.refresh+"</button>",this.$el.html(t),this.updateResults(),this.trigger("rendered")},s.prototype.setLimit=function(t){return this.resultLimit=parseInt($("#limit").val())||100,this.updateResults()},s.prototype.setOffset=function(t){var e,s,i;return i=parseInt($("#page").val())||1,e=(i-1)*this.resultLimit,s=Math.floor(this.results.length/this.resultLimit),this.resultOffset=Math.limit(0,e,s*this.resultLimit),this.updateResults()},s.prototype.updateResults=function(e){var s;return 0===(null!=(s=this.results)?s.length:void 0)?void this.$el.find("#results_header").html(this.text.noResults):$.ajax({url:Tangerine.settings.urlView("group","resultSummaryByAssessmentId")+("?descending=true&limit="+this.resultLimit+"&skip="+this.resultOffset),type:"POST",dataType:"json",contentType:"application/json",data:JSON.stringify({keys:[this.assessment.id]}),success:function(s){return function(i){var n,l,a,r,o,u,d,c,h,p,f,b,m,v,g,y,_,w;for(v=i.rows,n=v.length,f=100,l=Math.floor(s.resultOffset/s.resultLimit)+1,s.results.length>f&&(s.$el.find("#controls").removeClass("confirmation"),s.$el.find("#page").val(l),s.$el.find("#limit").val(s.resultLimit)),g=s.resultOffset+1,a=Math.min(s.resultOffset+s.resultLimit,s.results.length),w=s.results.length,s.$el.find("#result_position").html(t("ResultsView.label.pagination",{start:g,end:a,total:w})),u="",d=0,h=v.length;d<h;d++)m=v[d],c=(null!=(b=m.value)?b.participant_id:void 0)||"No ID",r=m.value.end_time,null!=r?(p=moment(r).format("YYYY-MMM-DD HH:mm"),o=moment(r).fromNow()):(y=m.value.start_time,p="<b>"+s.text.started+"</b> "+moment(y).format("YYYY-MMM-DD HH:mm"),o=moment(y).fromNow()),_=p+" ("+o+")",u+="<div> "+c+" - "+_+" <button data-result-id='"+m.id+"' class='details command'>"+s.text.details+"</button> <div id='details_"+m.id+"'></div> </div>";return s.$el.find("#results_container").html(u),s.$el.find(e).focus()}}(this)})},s.prototype.afterRender=function(){var t,e,s,i,n;for(s=this.subViews,i=[],t=0,e=s.length;t<e;t++)n=s[t],i.push("function"==typeof n.afterRender?n.afterRender():void 0);return i},s.prototype.clearSubViews=function(){var t,e,s,i;for(s=this.subViews,t=0,e=s.length;t<e;t++)i=s[t],i.close();return this.subViews=[]},s}(Backbone.View);


var TabletManagerView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function s(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;TabletManagerView=function(e){function s(){return this.pushDocs=bind(this.pushDocs,this),this.updatePullResult=bind(this.updatePullResult,this),this.updatePull=bind(this.updatePull,this),this.pullDocs=bind(this.pullDocs,this),this.sync=bind(this.sync,this),s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="KlassesView",s.prototype.i18n=function(){return this.text={detectingTablets:t("TabletManagerView.message.detecting"),syncComplete:t("TabletManagerView.label.sync_complete")}},s.prototype.initialize=function(t){return this.i18n(),this.ipBlock=32,this.totalIps=256,this.tabletOffset=0,this.callbacks=t.callbacks,this.docTypes=t.docTypes},s.prototype.sync=function(){if(0===this.tabletOffset)return this.pullDocs()},s.prototype.pullDocs=function(){return 0===this.tabletOffset&&(this.tablets={checked:0,complete:0,successful:0,okCount:0,ips:[],result:0},Utils.midAlert(this.text.detectingTablets)),Utils.working(!0),this.randomIdDoc=hex_sha1(""+Math.random()),Tangerine.$db.saveDoc({_id:this.randomIdDoc},{success:function(t){return function(e){var s,n,i,o,r;for(t.randomDoc=e,r=[],n=s=i=t.tabletOffset,o=t.ipBlock-1+t.tabletOffset;i<=o?s<=o:s>=o;n=i<=o?++s:--s)r.push(function(e){var s,n;return s=Tangerine.settings.subnetIP(e),n=$.ajax({url:Tangerine.settings.urlSubnet(s),dataType:"jsonp",contentType:"application/json;charset=utf-8",timeout:2e4}),n.complete(function(e,n){return t.tablets.checked++,200===parseInt(e.status)&&(t.tablets.okCount++,t.tablets.ips.push(s)),t.updatePull()})}(n));return r}}(this),error:function(){return Utils.working(!1),Utils.midAlert(this.text.internalError)}})},s.prototype.updatePull=function(){var e,s,n,i,o,r;if(!(this.tablets.checked<this.ipBlock+this.tabletOffset)){if(this.tabletOffset!==this.totalIps-this.ipBlock)return i=Math.round(this.tabletOffset/this.totalIps*100),Utils.midAlert(t("TabletManagerView.message.searching",{percentage:i})),this.tabletOffset+=this.ipBlock,this.pullDocs();if(this.tablets.okCount=Math.max(this.tablets.okCount-1,0),0===this.tablets.okCount)return this.tabletOffset=0,Utils.working(!1),Utils.midAlert(t("TabletManagerView.message.found",{count:this.tablets.okCount})),void Tangerine.$db.removeDoc({_id:this.randomDoc.id,_rev:this.randomDoc.rev});if(!confirm(t("TabletManagerView.message.confirm_pull",{__found__:this.tablets.okCount})))return this.tabletOffset=0,Utils.working(!1),void Tangerine.$db.removeDoc({_id:this.randomDoc.id,_rev:this.randomDoc.rev});for(Utils.midAlert(t("TabletManagerView.message.pull_status",{tabletCount:this.tablets.okCount})),o=this.tablets.ips,r=[],e=0,n=o.length;e<n;e++)s=o[e],r.push(function(t){return function(e){var s;return s=$.ajax({url:Tangerine.settings.urlSubnet(e)+"/"+t.randomIdDoc,dataType:"jsonp",timeout:1e4,contentType:"application/json;charset=utf-8"}),s.success(function(s,n,i){return t.selfSubnetIp=e}),s.complete(function(s,n){return function(s){var n;if(200!==parseInt(s.status))return n=$.ajax({url:Tangerine.settings.urlSubnet(e)+"/_design/tangerine/_view/byCollection",dataType:"jsonp",contentType:"application/json;charset=utf-8",data:{include_docs:!1,keys:JSON.stringify(t.docTypes)}}),n.success(function(s){var n,i;return i=function(){var t,e,i,o;for(i=s.rows,o=[],t=0,e=i.length;t<e;t++)n=i[t],o.push(n.id);return o}(),$.couch.replicate(Tangerine.settings.urlSubnet(e),Tangerine.settings.urlDB("local"),{success:function(){return t.tablets.complete++,t.tablets.successful++,t.updatePullResult()},error:function(e,s){return t.tablets.complete++,t.updatePullResult()}},{doc_ids:i})})}(s)})}}(this)(s));return r}},s.prototype.updatePullResult=function(){var e;if(this.tablets.complete===this.tablets.okCount)return Utils.working(!1),Utils.midAlert(t("TabletManagerView.message.pull_complete",{successful:this.tablets.successful,total:this.tablets.okCount})),Tangerine.$db.removeDoc({_id:this.randomDoc.id,_rev:this.randomDoc.rev}),"function"==typeof(e=this.callbacks).completePull?e.completePull():void 0},s.prototype.pushDocs=function(){return _.isObject(this.push)?this.push.complete===this.push.ips.length?(Utils.working(!1),Utils.sticky("<b>"+this.text.syncComplete+"</b><br>"+t("TabletManagerView.message.successful_count",{successful:this.push.successful,total:this.push.complete}))):(Utils.midAlert(t("TabletManagerView.message.syncing",{done:this.push.complete+1,total:this.push.ips.length})),$.couch.replicate(Tangerine.settings.urlDB("local"),Tangerine.settings.urlSubnet(this.push.ips[this.push.current]),{success:function(t){return function(){return t.push.complete++,t.push.successful++,t.pushDocs()}}(this),error:function(t){return function(e,s){return t.push.complete++,t.pushDocs()}}(this)},{doc_ids:this.push.docIds})):(Utils.working(!0),Tangerine.$db.view(Tangerine.design_doc+"/byCollection",{keys:this.docTypes,success:function(t){return function(e){var s;return s=_.pluck(e.rows,"id"),t.push={ips:_.without(t.tablets.ips,t.selfSubnetIp),docIds:s,current:0,complete:0,successful:0},t.pushDocs()}}(this)}))},s}(Backbone.View);


var ResultSumView,extend=function(t,e){function s(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;ResultSumView=function(e){function s(){return s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="info_box",s.prototype.events={"click .details":"toggleDetails"},s.prototype.toggleDetails=function(){return this.$el.find(".detail_box").toggle(250)},s.prototype.i18n=function(){return this.text={resume:t("ResultSumView.button.resume"),noResults:t("ResultSumView.message.no_results")}},s.prototype.initialize=function(t){var e,s,i,r,n,o,u;for(this.i18n(),this.result=t.model,this.finishCheck=t.finishCheck,this.finished=null!=(null!=(r=_.last(this.result.attributes.subtestData))?r.data.end_time:void 0),this.studentId="",n=this.result.attributes.subtestData,o=[],e=0,s=n.length;e<s;e++){if(u=n[e],i=u.prototype,"id"===i){this.studentId=u.data.participant_id;break}o.push(void 0)}return o},s.prototype.render=function(){var t,e,s,i,r,n,o,u;for(e="<div class='detail_box'>",!this.finished&&this.finishCheck&&(e+="<div><a href='#resume/"+this.result.get("assessmentId")+"/"+this.result.id+"'><button class='command'>"+this.text.resume+"</button></a></div>"),n=this.result.get("subtestData"),s=i=0,r=n.length;i<r;s=++i)t=n[s],u=(null!=(o=t.data.items)?o.length:void 0)||Object.keys(t.data).length,e+="<div>"+t.name+" - items "+u+"</div>";return e+="</div>",this.$el.html(e),this.trigger("rendered")},s}(Backbone.View);


var DashboardView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function s(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;DashboardView=function(t){function e(){return this.renderResults=bind(this.renderResults,this),this.render=bind(this.render,this),this.update=bind(this.update,this),this.syntaxHighlight=bind(this.syntaxHighlight,this),this.showResult=bind(this.showResult,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="DashboardView",e.prototype.events={"change #groupBy":"update","change #assessment":"update","change #shiftHours":"update","click .result":"showResult"},e.prototype.showResult=function(t){var e,s;return e=$("#resultDetails"),e.is(":visible")?e.hide():(s=$(t.target).text(),$.couch.db(Tangerine.settings.groupDB).openDoc(s,{success:function(s){return function(n){return e.html("<pre>"+s.syntaxHighlight(n)+"</pre>"),e.css({top:$(t.target).position().top+30,width:400,left:50}),e.show()}}(this)}))},e.prototype.syntaxHighlight=function(t){return window.json=t,"string"!=typeof t&&(t=JSON.stringify(t,void 0,2)),t=t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),t.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g,function(t){var e;return e="number",/^"/.test(t)?e=/:$/.test(t)?"key":"string":/true|false/.test(t)?e="boolean":/null/.test(t)&&(e="null"),'<span class="'+e+'">'+t+"</span>"})},e.prototype.update=function(){return Tangerine.router.navigate("dashboard/groupBy/"+$("#groupBy").val()+"/assessment/"+$("#assessment").val()+"/shiftHours/"+$("#shiftHours").val(),!0)},e.prototype.initialize=function(t){return console.log("view.options: "+JSON.stringify(t)),this.groupBy=t.groupBy,this.key=t.assessment,console.log("@key: "+JSON.stringify(this.key)),this.shiftHours=t.shiftHours||0},e.prototype.render=function(){return console.log("@key: "+JSON.stringify(this.key)),"All"===this.key?$.couch.db(Tangerine.db_name).view(Tangerine.design_doc+"/dashboardResults",{reduce:!1,success:this.renderResults}):$.couch.db(Tangerine.db_name).view(Tangerine.design_doc+"/dashboardResults",{key:this.key,reduce:!1,success:this.renderResults})},e.prototype.renderResults=function(t){var e,s,n;return n={},e={},s={},null==this.groupBy&&(this.groupBy=_.keys(t.rows[0].value)[0]),_.each(t.rows,function(t){return function(r){var o,i,u;return i=r.value[t.groupBy],u=r.value.startTime?moment(r.value.startTime).add("h",t.shiftHours).format("YYYYMMDD"):"Unknown",o=r.value.startTime?moment(r.value.startTime).add("h",t.shiftHours).format("Do MMM"):"Unknown",e[u]=o,null==n[i]&&(n[i]={}),null==n[i][u]&&(n[i][u]=[]),n[i][u].push("<div style='padding-top:10px;'> <table> "+_.map(r.value,function(e,n){return s[n]=!0,"startTime"===n&&(e=moment(e).add("h",t.shiftHours).format("YYYY-MM-DD HH:mm")),"resultId"===n&&(e="<button class='result'>"+e+"</button>"),"<tr><td>"+n+"</td><td>"+e+"</td></tr>"}).join("")+" </table> </div> <hr/>")}}(this)),this.$el.html("<h1>"+Tangerine.db_name+"</h1> Assessment: <select id='assessment'> </select> <br/> Value used for grouping: <select id='groupBy'> "+_.map(s,function(t){return function(e,s){return"<option "+(s===t.groupBy?"selected='true'":"")+"> "+s+" </option>"}}(this))+" </select> <br/> <br/> <button onClick='$(\"#advancedOptions\").toggle()'>Advanced Options</button> <div style='display:none' id='advancedOptions'> Current time in your timezone ("+jstz.determine().name()+") is "+moment().format("YYYY-MM-DD HH:mm")+"<br/> Shift time values by <input id='shiftHours' type='number' value='"+this.shiftHours+"'></input> hours to handle correct timezone.<br/> Shifted time: "+moment().add("h",this.shiftHours).format("YYYY-MM-DD HH:mm")+" <br/> </div> <table id='results' class='tablesorter'> <thead> <th>"+this.groupBy+"</th> "+_(e).keys().sort().map(function(t){return"<th class='"+t+"'>"+e[t]+"</th>"}).join("")+" </thead> <tbody> "+_.map(n,function(t,s){return"<tr> <td>"+s+"</td> "+_(e).keys().sort().map(function(e){return"<td class='"+e+"'> "+(t[e]?"<button class='sort-value' onClick='$(this).siblings().toggle()'>"+t[e].length+"</button> <div style='display:none'> "+t[e].join("")+" </div>":"")+" </td>"}).join("")+" </tr>"}).join("")+" </tbody> </table> <div id='resultDetails'> </div> <style> #resultDetails{ position:absolute; background-color:black; display:none; } pre { font-size: 75%; outline: 1px solid #ccc; padding: 5px; margin: 5px; text-shadow: none; overflow-wrap:break-word; } .string { color: green; } .number { color: darkorange; } .boolean { color: blue; } .null { color: magenta; } .key { color: red; } </style>"),this.trigger("rendered")},e}(Backbone.View);


var AdminView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function n(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;AdminView=function(t){function e(){return this.render=bind(this.render,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="AdminView",e.prototype.events={"click .update ":"update"},e.prototype.update=function(t){var e,n;return e=$(t.target),n=e.attr("data-group"),Utils.updateTangerine(null,{targetDB:n})},e.prototype.getVersionNumber=function(t){return $.ajax("/"+t+"/_design/"+Tangerine.design_doc+"/js/version.js",{dataType:"text",success:function(e){return function(n){return console.log(n),e.$el.find("#"+t+"-version").html(n.match(/"(.*)"/)[1])}}(this)})},e.prototype.initialize=function(t){return this.groups=t.groups},e.prototype.render=function(){var t,e;return e=_.after(this.groups.length,function(){return $("table#active-groups").tablesorter({widgets:["zebra"],sortList:[[5,1]]})}),this.$el.html("<h2>Group Activity</h2> <table id='active-groups' class='class_table'> <thead> "+_(["Name","Last Complete Result","Total Assessments","Total Results","Version","Last Result"]).map(function(t){return"<th>"+t+"</th>"}).join("")+" </thead> <tbody> "+function(){var e,n,r,s;for(r=this.groups,s=[],e=0,n=r.length;e<n;e++)t=r[e],s.push("<tr id='"+t+"'> <td> "+t+"<br> </td> <td class='last-result'>...</td> <td class='total-assessments'>...</td> <td class='total-results'>...</td> <td class='version'><div>...</div><button class='update command' data-group='"+t+"'>Update</button></td> <td class='last-timestamp'>...</td> </tr>");return s}.call(this).join("")+" </tbody> </table>"),$("table#active-groups").tablesorter({widgets:["zebra"],sortList:[[5,1]]}),_(this.groups).each(function(t){return function(n){var r;return r=t.$el.find("#"+n),$.ajax("/"+n+"/_design/"+Tangerine.design_doc+"/js/version.js",{dataType:"text",success:function(t){return r.find(".version div").html(t.match(/"(.*)"/)[1]),$.couch.db(n).view(Tangerine.design_doc+"/resultCount",{group:!0,success:function(t){return function(t){var s,o;for(r.find(".total-assessments").html(t.rows.length),s=0;o=t.rows.pop();)s+=parseInt(o.value);return r.find(".total-results").html("<button class='results navigation'><a href='/"+n+"/_design/"+Tangerine.design_doc+"/index.html#dashboard'>"+s+"</a></button>"),$.couch.db(n).view(Tangerine.design_doc+"/completedResultsByEndTime",{limit:1,descending:!0,success:function(t){if(t.rows[0]&&t.rows[0].key)return r.find(".last-timestamp").html(moment(new Date(t.rows[0].key)).format("YYYY-MMM-DD HH:mm")),r.find(".last-result").html(moment(t.rows[0].key).fromNow())},error:function(){return console.log("Could not retrieve view 'completedResultsByEndTime' for "+n)}}).complete(function(){return e()})}}(this)})}})}}(this)),this.trigger("rendered")},e}(Backbone.View);


var Question,extend=function(t,e){function o(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return o.prototype=e.prototype,t.prototype=new o,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;Question=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.url="question",e.prototype.config={types:["multiple","single","open"]},e.prototype["default"]={order:0,prompt:"Is this an example question?",hint:"[hint or answer]",type:"single",otherWriteIn:!1,options:[],linkedGridScore:0,skipLink:null,skipRequirement:null},e.prototype.initialize=function(t){},e}(Backbone.Model);


var Questions,extend=function(t,o){function r(){this.constructor=t}for(var e in o)hasProp.call(o,e)&&(t[e]=o[e]);return r.prototype=o.prototype,t.prototype=new r,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;Questions=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.model=Question,o.prototype.url="question",o.prototype.db={view:"questionsByParentId"},o.prototype.comparator=function(t){return t.get("order")},o.prototype.ensureOrder=function(){var t,o,r,e,n,s,p,u,i;if(i=function(){var t,o,r,n;for(r=this.models,n=[],t=0,o=r.length;t<o;t++)e=r[t],n.push(e.get("order"));return n}.call(this).join(""),n=function(){var o,r,n,s;for(n=this.models,s=[],t=o=0,r=n.length;o<r;t=++o)e=n[t],s.push(t);return s}.call(this).join(""),i!==n){for(s=this.models,p=[],t=o=0,r=s.length;o<r;t=++o)u=s[t],u.set("order",t),p.push(u.save());return p}},o}(Backbone.Collection);


var QuestionRunView,SurveyReviewView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function i(){this.constructor=t}for(var s in e)hasProp.call(e,s)&&(t[s]=e[s]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;QuestionRunView=function(t){function e(){return this.getName=bind(this.getName,this),this.setName=bind(this.setName,this),this.setHint=bind(this.setHint,this),this.setPrompt=bind(this.setPrompt,this),this.setMessage=bind(this.setMessage,this),this.setAnswer=bind(this.setAnswer,this),this.setOptions=bind(this.setOptions,this),this.updateResult=bind(this.updateResult,this),this.update=bind(this.update,this),this.onShow=bind(this.onShow,this),this.previousAnswer=bind(this.previousAnswer,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="question",e.prototype.events={"change input":"update","change textarea":"update","click .autoscroll_icon":"scroll"},e.prototype.scroll=function(t){return this.trigger("scroll",t,this.model.get("order"))},e.prototype.initialize=function(t){if(this.on("show",function(t){return function(){return t.onShow()}}(this)),this.model=t.model,this.parent=t.parent,this.dataEntry=t.dataEntry,this.fontFamily=this.parent.model.get("fontFamily"),""!==this.parent.model.get("fontFamily")&&(this.fontStyle='style="font-family: '+this.parent.model.get("fontFamily")+' !important;"'),this.dataEntry?this.answer={}:this.answer=t.answer,this.name=this.model.escape("name").replace(/[^A-Za-z0-9_]/g,"-"),this.type=this.model.get("type"),this.options=this.model.get("options"),this.notAsked=t.notAsked,this.isObservation=t.isObservation,this.defineSpecialCaseResults(),this.model.getBoolean("skippable")?(this.isValid=!0,this.skipped=!0):(this.isValid=!1,this.skipped=!1),this.notAsked===!0&&(this.isValid=!0,this.updateResult()),"single"===this.type||"multiple"===this.type)return this.button=new ButtonView({options:this.options,mode:this.type,dataEntry:this.dataEntry,answer:this.answer,fontFamily:this.fontFamily}),this.button.on("change rendered",function(t){return function(){return t.update()}}(this))},e.prototype.previousAnswer=function(){if(this.parent.questionIndex>=0)return this.parent.questionViews[this.parent.questionIndex-1].answer},e.prototype.onShow=function(){var t,e,i,s;if(s=this.model.getString("displayCode"),!_.isEmptyString(s))try{return CoffeeScript.eval.apply(this,[s])}catch(n){return t=n,i=/function (.{1,})\(/.exec(t.constructor.toString())[1],e=t.message,alert("Display code error\n\n"+i+"\n\n"+e)}},e.prototype.update=function(t){return this.updateResult(),this.updateValidity(),this.trigger("answer",t,this.model.get("order"))},e.prototype.updateResult=function(){var t,e,i,s,n,r;if(this.notAsked===!0){if("multiple"===this.type){for(n=this.options,r=[],t=e=0,i=n.length;e<i;t=++e)s=n[t],r.push(this.answer[this.options[t].value]="not_asked");return r}return this.answer="not_asked"}return"open"===this.type?this.answer=this.$el.find("#"+this.cid+"_"+this.name).val():this.answer=this.button.answer},e.prototype.updateValidity=function(){var t,e,i,s,n;if(n=this.model.getBoolean("skippable"),i=this.$el.hasClass("disabled_autostop"),s=this.$el.hasClass("disabled_skipped"),n||s||i)return this.isValid=!0,this.skipped=!!_.isEmptyString(this.answer);if(t=this.model.get("customValidationCode"),this.answer||(this.answer=""),_.isEmptyString(t))return this.isValid=function(){switch(this.type){case"open":return!(_.isEmptyString(this.answer)||_.isEmpty(this.answer)&&_.isObject(this.answer));case"multiple":return!!~_.values(this.answer).indexOf("checked");case"single":return!(_.isEmptyString(this.answer)||_.isEmpty(this.answer)&&_.isObject(this.answer))}}.call(this);try{return this.isValid=CoffeeScript.eval.apply(this,[t])}catch(r){return e=r,alert("Custom Validation error\n\n"+e)}},e.prototype.setOptions=function(t){return this.button.options=t,this.button.render()},e.prototype.setAnswer=function(t){return _.isString(t)&&"multiple"===this.type&&alert("setAnswer Error\nTried to set "+this.type+" type "+this.name+" question to string answer."),_.isObject(t)||"multiple"!==this.type||alert("setAnswer Error\n"+this.name+" question requires an object"),"multiple"===this.type?this.button.answer=$.extend(this.button.answer,t):"single"===this.type?this.button.answer=t:this.answer=t,this.updateValidity(),this.button.render()},e.prototype.setMessage=function(t){return this.$el.find(".error_message").html(t)},e.prototype.setPrompt=function(t){return this.$el.find(".prompt").html(t)},e.prototype.setHint=function(t){return this.$el.find(".hint").html(t)},e.prototype.setName=function(t){return null==t&&(t=this.model.get("name")),this.model.set("name",t),this.name=this.model.escape("name").replace(/[^A-Za-z0-9_]/g,"-")},e.prototype.getName=function(){return this.model.get("name")},e.prototype.render=function(){var t,e;return this.$el.attr("id","question-"+this.name),this.notAsked?(this.$el.hide(),this.trigger("rendered")):(e="<div class='error_message'></div><div class='prompt' "+(this.fontStyle||"")+">"+this.model.get("prompt")+"</div> <div class='hint' "+(this.fontStyle||"")+">"+(this.model.get("hint")||"")+"</div>","open"===this.type?(_.isString(this.answer)&&!_.isEmpty(this.answer)&&(t=this.answer),e+=this.model.get("multiline")?"<div><textarea id='"+this.cid+"_"+this.name+"' data-cid='"+this.cid+"' value='"+(t||"")+"'></textarea></div>":"<div><input id='"+this.cid+"_"+this.name+"' data-cid='"+this.cid+"' value='"+(t||"")+"'></div>"):e+="<div class='button_container'></div>",this.isObservation&&(e+="<img src='images/icon_scroll.png' class='icon autoscroll_icon' data-cid='"+this.cid+"'>"),this.$el.html(e),"single"===this.type||"multiple"===this.type?(this.button.setElement(this.$el.find(".button_container")),this.button.on("rendered",function(t){return function(){return t.trigger("rendered")}}(this)),this.button.render()):this.trigger("rendered"))},e.prototype.defineSpecialCaseResults=function(){var t,e,i,s,n,r,o,h,a;for(o=["missing","notAsked","skipped","logicSkipped","notAskedAutostop"],i=0,n=o.length;i<n;i++)if(t=o[i],"single"!==this.type&&"open"!==this.type||(this[t+"Result"]=t),"multiple"===this.type)for(this[t+"Result"]={},a=this.options,e=s=0,r=a.length;s<r;e=++s)h=a[e],this[t+"Result"][this.options[e].value]=t},e}(Backbone.View),SurveyReviewView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="QuestionReviewView",e.prototype.initialize=function(t){return this.views=t.views},e.prototype.render=function(){var t,e;return t=function(){var t,i,s,n;for(s=this.views,n=[],t=0,i=s.length;t<i;t++)e=s[t],n.push("<div class='label_value'> <h3></h3> </div>");return n}.call(this).join(""),this.$el.html("<h2>Please review your answers and press next when ready.</h2> "+t)},e}(Backbone.View);


var QuestionEditView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function i(){this.constructor=e}for(var l in t)hasProp.call(t,l)&&(e[l]=t[l]);return i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;QuestionEditView=function(e){function t(){return this.updateModel=bind(this.updateModel,this),this.goBack=bind(this.goBack,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="question_list_element",t.prototype.events={"click .back":"goBack","click .done":"done","click .add_option":"addOption","click .delete_option":"showDeleteConfirm","click .delete_cancel":"hideDeleteConfirm","click .delete_delete":"deleteOption","click #question_type input:radio":"changeQuestionType","change .option_select":"templateFill","keypress .option_value":"quickAddWithEnter","keypress .option_label":"quickFocusValue","change #custom_validation_code":"validateSyntax","change #display_code":"validateSyntax","change #skip_logic":"validateSyntax"},t.prototype.initialize=function(e){return this.activity=null,this.timer=0,this.question=e.question,this.subtest=e.subtest,this.assessment=e.assessment},t.prototype.validateSyntax=function(e){var t,i,l,o,n,s,a;if(t=$(e.target),i=t.val(),!_.isEmpty(i))try{return s=this.answer,this.answer={},this.isValid=CoffeeScript.compile.apply(this,[i]),null!=s?this.answer=s:delete this.answer}catch(r){return l=r,n=/function (.{1,})\(/.exec(l.constructor.toString())[1],a=t.attr("id").humanize(),o=l.message,alert("Error in "+a+"\n\n"+n+"\n\n"+o)}},t.prototype.quickAddWithEnter=function(e){return null!=e.keyCode&&13!==e.keyCode||this.addOption()},t.prototype.quickFocusValue=function(e){return null!=e.keyCode&&13!==e.keyCode||$(e.target).parent().find(".option_value").focus()},t.prototype.templateFill=function(e){var t,i;return t=$(e.target).find("option:selected").attr("data-index"),i=Tangerine.templates.get("optionTemplates"),null!=i[t]&&(this.question.set("options",i[t].options),this.$el.find("#option_list_wrapper").html(this.getOptionList())),!1},t.prototype.getOptionList=function(){var e,t,i,l,o,n;for(n=this.question.get("options"),e="<h2>Options</h2> <div class='menu_box'> <ul id='option_list'>",t=i=0,l=n.length;i<l;t=++i)o=n[t],e+="<li class='question'> <table><tr><td> <img src='images/icon_drag.png' class='sortable_handle'> </td> <td> <div style='display: block;'> <div class='option_label_value'> <label class='edit' for='options."+t+".label'>Label</label> <input id='options."+t+".label' value='"+_.escape(o.label)+"' placeholder='Option label' class='option_label'><br> <label class='edit' for='options."+t+".value' title='Allowed characters&#58; A-Z, a-z, 0-9, and underscores.'>Value</label> <input id='options."+t+".value' value='"+_.escape(o.value)+"' placeholder='Option value' class='option_value'><br> </div> <img src='images/icon_delete.png' class='delete_option' data-index='"+t+"'> <div class='confirmation delete_confirm_"+t+"'> <button class='delete_delete command_red' data-index='"+t+"'>Delete</button> <button data-index='"+t+"' class='delete_cancel command'>Cancel</button> </div> </div> </td></tr></table> </li>";return e+="</ul> <button class='add_option command'>Add option</button> </div>"},t.prototype.addOption=function(){var e,t;if(this.updateModel(),t=this.question.get("options"),t.push({label:"",value:""}),this.question.set("options",t),this.refreshOptionList(),e=this.$el.find("#option_list_wrapper li"),0!==e.length)return $(e.last()).scrollTo().find("input:first").focus()},t.prototype.render=function(){var e,t,i,l,o,n,s,a,r,d,p,u,c,h,v,f,b,m,_,g;if(e=this.assessment.escape("name"),_=this.subtest.escape("name"),p=this.question.getEscapedString("name"),f=this.question.getEscapedString("prompt"),n=this.question.getEscapedString("hint"),b=this.question.getEscapedString("skipLogic"),i=this.question.getEscapedString("customValidationCode"),l=this.question.getEscapedString("customValidationMessage"),o=this.question.getString("displayCode"),g=this.question.get("type"),v=this.question.get("options"),d=this.question.getNumber("linkedGridScore"),m=this.question.getBoolean("skippable"),t="multiple"===g?"checkbox":"radio",this.$el.html("<button class='back navigation'>Back</button> <h1>Question Editor</h1> <table class='basic_info'> <tr> <th>Subtest</th> <td>"+_+"</td> </tr> <tr> <th>Assessment</th> <td>"+e+"</td> </tr> </table> <button class='done command'>Done</button> <div class='edit_form'> <div class='label_value'> <label for='name'>Variable name</label> <input id='name' type='text' value='"+p+"'> </div> <div class='label_value'> <label for='prompt'>Prompt</label> <input id='prompt' type='text' value='"+f+"'> </div> <div class='label_value'> <label for='hint'>Note to enumerator</label> <input id='hint' type='text' value='"+n+"'> </div> <div class='label_value'> <label for='skip_logic' title='This statement will be skiped if it evaluates to true. example: ResultOfQuestion(\"maze1\") isnt \"2\" Example 2: \"red\" in ResultOfMultiple(\"fave_colors\")'>Skip if</label> <textarea rows='2' id='skip_logic'>"+b+"</textarea> </div> <div class='menu_box'> <label>Custom validation</label> <div class='label_value'> <label for='custom_validation_code' title='Intended for open questions. This code should evaluate to true or false. False will trigger an error message for this question. E.g. @answer == \"1\" will evaluate to false for any value other than 1.'>Valid when</label> <input id='custom_validation_code' type='text' value='"+i+"'> </div> <div class='label_value'> <label for='custom_validation_message'>Error message</label> <input id='custom_validation_message' type='text' value='"+l+"'> </div> </div><br> <div class='menu_box'> <div class='label_value'> <label for='display_code' title='This CoffeeScript code will be executed when this question is shown. This option may only be used when Focus Mode is on.'>Action on display</label> <textarea id='display_code' rows='2'>"+o+"</textarea> </div> </div> <div class='label_value'> <label>Skippable</label> <div id='skip_radio' class='buttonset'> <label for='skip_true'>Yes</label><input name='skippable' type='radio' value='true' id='skip_true' "+(m?"checked":void 0)+"> <label for='skip_false'>No</label><input name='skippable' type='radio' value='false' id='skip_false' "+(m?void 0:"checked")+"> </div> </div> <div class='label_value'> <label for='linked_grid_score'>Items attempted required on linked grid</label> <input id='linked_grid_score' type='number' value='"+d+"'> </div> <div class='label_value' id='question_type' class='question_type'> <label>Question Type</label> <div class='buttonset'> <label for='single'>single</label> <input id='single' name='type' type='radio' value='single' "+("single"===g?"checked":void 0)+"> <label for='multiple'>multiple</label> <input id='multiple' name='type'  type='radio' value='multiple' "+("multiple"===g?"checked":void 0)+"> <label for='open'>open</label> <input id='open' name='type'  type='radio' value='open' "+("open"===g?"checked":void 0)+"> </div> </div>"),"open"!==g){for(c="<div class='label_value'> <label for='question_template_select'>Fill from template</label><br> <div class='menu_box'> <select id='question_template_select' class='option_select'> <option selected='selected'>Select template</option>",h=Tangerine.templates.get("optionTemplates"),s=a=0,r=h.length;a<r;s=++a)u=h[s],c+="<option data-index='"+s+"' class='template_option'>"+u.name+"</option>";c+="</select> </div> <div id='option_list_wrapper'>"+this.getOptionList()+"</div>",this.$el.append(c),this.refreshSortable()}return this.$el.append("<button class='done command'>Done</button> </div>"),this.trigger("rendered")},t.prototype.refreshOptionList=function(){return this.$el.find("#option_list_wrapper").html(this.getOptionList()),this.refreshSortable()},t.prototype.refreshSortable=function(){return this.$el.find("#option_list").sortable({handle:".sortable_handle",start:function(e,t){return t.item.addClass("drag_shadow")},stop:function(e,t){return t.item.removeClass("drag_shadow")},update:function(e){return function(t,i){return e.updateModel()}}(this)})},t.prototype.hijackEnter=function(e){if(13===e.which)return this.$el.find(e.target).blur(),!1},t.prototype.changeQuestionType=function(e){var t;if(t=$(e.target),"open"!==t.val()&&"open"===this.question.get("type")||"open"===t.val()&&"open"!==this.question.get("type"))return this.updateModel(),this.question.set("type",t.val()),this.question.set("options",[]),this.render()},t.prototype.done=function(){return null===this.activity&&(this.activity="saving",this.updateModel(),this.question.save(null,{success:function(e){return function(){return e.activity=null,Utils.midAlert("Question Saved"),clearTimeout(e.timer),e.timer=setTimeout(e.goBack,500)}}(this),error:function(e){return function(){return e.activity=null,Utils.midAlert("Save error")}}(this)}),!1)},t.prototype.goBack=function(){var e;return this.question.has("curriculumId")&&(e="class/"),Tangerine.router.navigate((e||"")+"subtest/"+this.question.get("subtestId"),!0),!1},t.prototype.updateModel=function(){var e,t,i,l,o,n,s,a,r;for(this.question.set({prompt:this.$el.find("#prompt").val(),name:this.$el.find("#name").val().safetyDance(),hint:this.$el.find("#hint").val(),skipLogic:this.$el.find("#skip_logic").val(),linkedGridScore:parseInt(this.$el.find("#linked_grid_score").val()),type:this.$el.find("#question_type input:checked").val(),skippable:"true"===this.$el.find("#skip_radio input:radio[name=skippable]:checked").val(),customValidationCode:this.$el.find("#custom_validation_code").val(),customValidationMessage:this.$el.find("#custom_validation_message").val(),displayCode:this.$el.find("#display_code").val()}),a=[],e=0,s=this.$el.find("#option_list li"),t=0,o=s.length;t<o;t++)n=s[t],i=$(n).find(".option_label").val(),r=$(n).find(".option_value").val().safetyDance(),null==i&&null==r||(a[e]={label:i,value:r},e++);return 0!==a.length&&(l=a.pop(),""!==l.label&&""!==l.value&&a.push(l)),this.question.set("options",a)},t.prototype.showDeleteConfirm=function(e){return this.$el.find(".delete_confirm_"+this.$el.find(e.target).attr("data-index")).fadeIn(250)},t.prototype.hideDeleteConfirm=function(e){return this.$el.find(".delete_confirm_"+this.$el.find(e.target).attr("data-index")).fadeOut(250)},t.prototype.deleteOption=function(e){var t;return this.updateModel(),t=this.question.get("options"),t.splice(this.$el.find(e.target).attr("data-index"),1),this.question.set("options",t),this.refreshOptionList(),!1},t}(Backbone.View);


var QuestionsEditView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function n(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;QuestionsEditView=function(t){function e(){return this.render=bind(this.render,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="questions_edit_view",e.prototype.tagName="ul",e.prototype.initialize=function(t){return this.views=[],this.questions=t.questions},e.prototype.onClose=function(){return this.closeViews()},e.prototype.closeViews=function(){var t,e,n,r,s;for(n=this.views,r=[],t=0,e=n.length;t<e;t++)s=n[t],r.push(s.close());return r},e.prototype.render=function(){var t,e,n,r,s,i;for(this.closeViews(),s=this.questions.models,t=e=0,n=s.length;e<n;t=++e)r=s[t],i=new QuestionsEditListElementView({question:r}),this.views.push(i),i.on("deleted",this.render),i.on("duplicate",function(t){return function(){return t.refetchAndRender()}}(this)),i.on("question-edit",function(t){return function(e){return t.trigger("question-edit",e)}}(this)),i.render(),this.$el.append(i.el);return this.$el.sortable({forceHelperSize:!0,forcePlaceholderSize:!0,handle:".sortable_handle",start:function(t,e){return e.item.addClass("drag_shadow")},stop:function(t,e){return e.item.removeClass("drag_shadow")},update:function(t){return function(e,n){var r,s,i,o,u,c,a,d,p;for(s=function(){var t,e,n,r;for(n=this.$el.find("li.question_list_element"),r=[],t=0,e=n.length;t<e;t++)c=n[t],r.push($(c).attr("data-id"));return r}.call(t),i=0,d=[],i=o=0,u=s.length;o<u;i=++o)r=s[i],a=t.questions.get(r).attributes,a.order=i,d.push(a);return p={docs:d},$.ajax({type:"POST",contentType:"application/json; charset=UTF-8",dataType:"json",url:Tangerine.settings.urlBulkDocs(),data:JSON.stringify(p),success:function(e){return t.refetchAndRender()},error:function(){return Utils.midAlert("Duplication error")}})}}(this)})},e.prototype.refetchAndRender=function(){var t;return t=this.questions.models[0],this.questions.fetch({key:"q"+t.get("assessmentId"),success:function(e){return function(){return e.questions=new Questions(e.questions.where({subtestId:t.get("subtestId")})),e.render(!0)}}(this)})},e}(Backbone.View);


var QuestionsEditListElementView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function i(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;QuestionsEditListElementView=function(e){function i(){return this.copy=bind(this.copy,this),this.getSurveys=bind(this.getSurveys,this),i.__super__.constructor.apply(this,arguments)}return extend(i,e),i.prototype.className="question_list_element",i.prototype.tagName="li",i.prototype.events={"click .edit":"edit","click .show_copy":"showCopy","change .copy_select":"copy","click .delete":"toggleDelete","click .delete_cancel":"toggleDelete","click .delete_delete":"delete"},i.prototype.showCopy=function(t){var e;return e=this.$el.find(".copy_container"),e.html("Copy to <select class='copy_select'><option disabled='disabled' selected='selected'>Loading...</option></select>"),this.getSurveys()},i.prototype.getSurveys=function(){var t;return t=Tangerine.settings.urlView("group","subtestsByAssessmentId"),$.ajax({url:t,type:"POST",dataType:"json",contentType:"application/json",data:JSON.stringify({keys:[this.question.get("assessmentId")]}),success:function(t){return function(e){var i,n;return n=_.compact(function(){var t,n,s,o;for(s=e.rows,o=[],t=0,n=s.length;t<n;t++)i=s[t],o.push("survey"===i.value.prototype?i.value:void 0);return o}()),console.log(n),t.populateSurveySelect(n)}}(this)})},i.prototype.populateSurveySelect=function(t){var e,i;return t.push({_id:"cancel",name:this.text.cancel_button}),t.unshift({_id:"",name:this.text.select}),e=function(){var e,n,s;for(s=[],e=0,n=t.length;e<n;e++)i=t[e],s.push("<option data-subtestId='"+i._id+"' "+(i.attrs||"")+">"+i.name+"</option>");return s}().join(""),this.$el.find(".copy_select").html(e)},i.prototype.copy=function(t){var e,i,n;return e=$(t.target).find("option:selected"),n=e.attr("data-subtestId"),"cancel"===n?void this.$el.find(".copy_container").empty():(i=this.question.clone(),i.save({_id:Utils.guid(),subtestId:n},{success:function(t){return function(){return n===t.question.get("subtestId")?(Utils.midAlert("Question duplicated"),t.trigger("duplicate")):(Tangerine.router.navigate("subtest/"+n,!0),Utils.midAlert("Question copied to "+e.html()))}}(this),error:function(){return Utils.midAlert("Copy error")}}))},i.prototype.edit=function(t){return this.trigger("question-edit",this.question.id),!1},i.prototype.toggleDelete=function(){return this.$el.find(".delete_confirm").fadeToggle(250)},i.prototype["delete"]=function(t){return this.question.collection.remove(this.question.id),this.question.destroy(),this.trigger("deleted"),!1},i.prototype.initialize=function(e){return this.text={edit:t("QuestionsEditListElementView.help.edit"),"delete":t("QuestionsEditListElementView.help.delete"),copy:t("QuestionsEditListElementView.help.copy_to"),cancel_button:t("QuestionsEditListElementView.button.cancel"),delete_button:t("QuestionsEditListElementView.button.delete"),select:t("QuestionsEditListElementView.label.select"),loading:t("QuestionsEditListElementView.label.loading"),delete_confirm:t("QuestionsEditListElementView.label.delete_confirm")},this.question=e.question,this.$el.attr("data-id",this.question.id)},i.prototype.render=function(){return this.$el.html("<table> <tr> <td> <img src='images/icon_drag.png' width='36' height='36' class='sortable_handle'> </td> <td> <span>"+this.question.get("prompt")+"</span> <span>[<small>"+this.question.get("name")+", "+this.question.get("type")+"</small>]</span> <img src='images/icon_edit.png' width='36' height='36' class='link_icon edit' title='"+this.text.edit+"'> <img src='images/icon_copy_to.png' width='36' height='36' class='link_icon show_copy' title='"+this.text.copy+"'> <span class='copy_container'></span> <img src='images/icon_delete.png' width='36' height='36' class='link_icon delete' title='"+this.text["delete"]+"'><br> <div class='confirmation delete_confirm'> <div class='menu_box'>"+this.text.delete_confirm+"<br><button class='delete_delete command_red'>Delete</button><button class='delete_cancel command'>"+this.text.cancel_button+"</button> </div> </td> </tr> </table>"),this.trigger("rendered")},i}(Backbone.View);


var WorkflowStep,extend=function(t,e){function o(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return o.prototype=e.prototype,t.prototype=new o,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;WorkflowStep=function(superClass){function WorkflowStep(){return WorkflowStep.__super__.constructor.apply(this,arguments)}return extend(WorkflowStep,superClass),WorkflowStep.prototype.getName=function(){switch(this.getType()){case"assessment":case"curriculum":case"message":return this.getString("name");default:return this.get("_id")}},WorkflowStep.prototype.getType=function(){return this.getString("type")},WorkflowStep.prototype.getView=function(t){var e,o;return null==t&&(t={}),o=this.getViewOptions(),e={inWorkflow:!0},$.extend(o,e),$.extend(t,o),new(window["New"+this.get("className")+"View"])(t)},WorkflowStep.prototype.getCoffeeMessage=function(){return this.getString("message")},WorkflowStep.prototype.getContent=function(){return this.getString("content")},WorkflowStep.prototype.getViewOptions=function(){return eval(this.get("classOptions-cooked"))},WorkflowStep.prototype.getTypeModel=function(){if(null!=this.model)return this.model},WorkflowStep.prototype.getTypesId=function(){return this.getString("typesId")},WorkflowStep.prototype.getUserType=function(){return this.getString("userType")},WorkflowStep.prototype.getCurriculumItemType=function(){return this.getString("curriculumItemType")},WorkflowStep.prototype.getCurriculumWeek=function(){return this.getString("curriculumWeek")},WorkflowStep.prototype.getCurriculumGrade=function(){return this.getString("curriculumGrade")},WorkflowStep.prototype.getShowLesson=function(){return this.getString("showLesson-cooked")},WorkflowStep.prototype.fetch=function(t){return null==t&&(t={}),null==t.error&&(t.error=$.noop),null==t.success&&(t.success=$.noop),"assessment"===this.get("type")?(this.model=new Assessment({_id:this.get("typesId")}),this.model.fetch({error:function(){return console.log("Had trouble fetching "+this.get("typesId")),t.error()},success:function(){return t.success()}})):"curriculum"===this.get("type")?(this.model=new Curriculum({_id:this.get("typesId")}),this.model.fetch({error:function(){return console.log("Had trouble fetching "+this.get("typesId")),t.error()},success:function(){return t.success()}})):void 0},WorkflowStep}(Backbone.ChildModel);


var WorkflowSteps,extend=function(o,r){function t(){this.constructor=o}for(var e in r)hasProp.call(r,e)&&(o[e]=r[e]);return t.prototype=r.prototype,o.prototype=new t,o.__super__=r.prototype,o},hasProp={}.hasOwnProperty;WorkflowSteps=function(o){function r(){return r.__super__.constructor.apply(this,arguments)}return extend(r,o),r.prototype.model=WorkflowStep,r.prototype.comparator=function(o,r){return o.has("order")?parseInt(o.get("order"))-parseInt(r.get("order")):1},r}(Backbone.ChildCollection);


var Workflow,extend=function(t,o){function e(){this.constructor=t}for(var r in o)hasProp.call(o,r)&&(t[r]=o[r]);return e.prototype=o.prototype,t.prototype=new e,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;Workflow=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.url="workflow",o.prototype.Child=WorkflowStep,o.prototype.ChildCollection=WorkflowSteps,o.prototype.initialize=function(t){},o.prototype.getLength=function(){return this.collection.length||this.attributes.children.length},o.prototype.stepModelByIndex=function(t){return this.collection.models[t]||null},o.prototype.validate=function(t,o){},o}(Backbone.ParentModel);


var Workflows,extend=function(o,r){function t(){this.constructor=o}for(var e in r)hasProp.call(r,e)&&(o[e]=r[e]);return t.prototype=r.prototype,o.prototype=new t,o.__super__=r.prototype,o},hasProp={}.hasOwnProperty;Workflows=function(o){function r(){return r.__super__.constructor.apply(this,arguments)}return extend(r,o),r.prototype.model=Workflow,r.prototype.url="workflow",r}(Backbone.Collection);


var SchoolListView,extend=function(t,o){function e(){this.constructor=t}for(var n in o)hasProp.call(o,n)&&(t[n]=o[n]);return e.prototype=o.prototype,t.prototype=new e,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty,indexOf=[].indexOf||function(t){for(var o=0,e=this.length;o<e;o++)if(o in this&&this[o]===t)return o;return-1};SchoolListView=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.WORKFLOW_NO_BOOKS="00b0a09a-2a9f-baca-2acb-c6264d4247cb",o.prototype.WORKFLOW_WITH_BOOKS="c835fc38-de99-d064-59d3-e772ccefcf7d",o.prototype.events={"click .schools-left":"toggleSchoolList"},o.prototype.toggleSchoolList=function(){return this.$el.find(".school-list").toggle()},o.prototype.initialize=function(t){return this.locLevels=["county","zone","school"],this.geography={},this.visited={},this.schools={left:[],done:[]},Tangerine.user.has("location")?(this.currentLocation=Tangerine.user.get("location"),this.invalid=!1):this.invalid=!0,this.locationSubtest={},this.validObservationView=new ValidObservationView,this.listenTo(this.validObservationView,"valid-update",function(){return Utils.execute([this.fetchLocations,this.fetchTrips,this.render],this)},this)},o.prototype.fetchLocations=function(t){if(null==t&&(t=$.noop),!this.invalid)return console.log("Current Location: ",this.currentLocation),Loc.query(this.locLevels,{county:this.currentLocation.county,zone:this.currentLocation.zone},function(o){return function(e){return o.allSchools=e.map(function(t){return t.id}),console.log("All School IDs: ",o.allSchools),o.schoolNames=e.reduce(function(t,o){return t[o.id]=o.label,t},{}),Loc.query(o.locLevels,{},function(e){return o.countyNames=e.reduce(function(t,o){return t[o.id]=o.label,t},{}),Loc.query(o.locLevels,{county:o.currentLocation.county},function(e){return o.zoneNames=e.reduce(function(t,o){return t[o.id]=o.label,t},{}),t()})})}}(this))},o.prototype.fetchTrips=function(t){var o,e,n,i;return null==t&&(t=$.noop),this.invalid?t():(o=new Date,i=o.getFullYear(),e=o.getMonth()+1,n=new TripResultCollection,n.fetch({resultView:"tutorTrips",queryKey:"year"+i+"month"+e,success:function(o){return function(){var e,i,r,s,l,c,a,h,u,d,f,p,y,g,v,b,L,O,m,w;v=[],w={},s=Tangerine.user.getPreferences("tutor-workflows","incomplete")||{},l=[];for(m in s)O=s[m],l=l.concat(O);for(b=[],d=n.models,r=0,u=d.length;r<u;r++)L=d[r],f=L.get("enumerator"),a=indexOf.call([Tangerine.user.get("name")].concat(Tangerine.user.getArray("previousUsers")),f)>=0,c=(p=L.get("workflowId"))===o.WORKFLOW_NO_BOOKS||p===o.WORKFLOW_WITH_BOOKS,y=L.get("tripId"),h=indexOf.call(o.validObservationView.validTrips,y)>=0,a&&c&&(g=L.get("tripId"),indexOf.call(l,g)>=0||h&&b.push(L.get("school")));return o.visited={},e=function(){var t;return 0===b.length?i():(t=b.pop(),_.contains(o.allSchools,t)&&(o.visited[t]=!0),e())},i=function(){return _.isEmpty(o.visited)?o.schools.done=[]:o.schools.done=Object.keys(o.visited).sort(),o.schools.all=o.allSchools,o.schools.left=_(o.allSchools).difference(o.schools.done),o.ready=!0,"function"==typeof t?t():void 0},e()}}(this)}))},o.prototype.render=function(t){var o;return this.invalid?this.$el.html("<p>Location information invalid.</p> <p>Your user has no location or an invalid location set. You can create a new user, or click your user name to change your location.</p>"):"loading"!==t&&this.ready?this.$el.html("<h2>School List</h2> <table class='class_table'> <tr><th>County</th><td>"+this.countyNames[this.currentLocation.county]+"</td></tr> <tr><th>Zone</th><td>"+this.zoneNames[this.currentLocation.zone]+"</td></tr> <tr><th>Schools remaining</th><td><button class='schools-left command'>"+this.schools.left.length+"</button></td></tr> </table> <table class='class_table school-list start-hidden'> <tr><td><b>Remaining</b></td></tr> "+function(){var t,e,n,i;for(n=this.schools.left,i=[],t=0,e=n.length;t<e;t++)o=n[t],i.push("<tr><td>"+this.schoolNames[o]+"</td></tr>");return i}.call(this).join("")+" </table> <table class='class_table school-list start-hidden'> <tr><td><b>Done</b></td></tr> "+function(){var t,e,n,i;for(n=this.schools.done,i=[],t=0,e=n.length;t<e;t++)o=n[t],i.push("<tr><td>"+this.schoolNames[o]+"</td></tr>");return i}.call(this).join("")+" </table>"):this.$el.html("<h2>School List</h2><p>Loading...</p>")},o}(Backbone.View);


var WorkflowMenuView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function o(){this.constructor=e}for(var r in t)hasProp.call(t,r)&&(e[r]=t[r]);return o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty,indexOf=[].indexOf||function(e){for(var t=0,o=this.length;t<o;t++)if(t in this&&this[t]===e)return t;return-1};WorkflowMenuView=function(e){function t(){return this.renderMobile=bind(this.renderMobile,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="WorkflowMenuView",t.prototype.events={"click .workflow-new":"new","click .workflow-delete":"delete","click .workflow-run":"run","click .workflow-edit":"edit","click .workflow-csv":"csvPromptMonth","click .remove-resume":"removeResume"},t.prototype.removeResume=function(e){var t,o,r,n;if(t=$(e.target),n=t.attr("data-workflowId"),r=t.attr("data-tripId"),confirm("Are you sure you want to remove the option to resume this workflow?"))return o=Tangerine.user.getPreferences("tutor-workflows","incomplete")||{},o[n]=_(o[n]).without(r),Tangerine.user.setPreferences("tutor-workflows","incomplete",o,function(e){return function(){return e.updateWorkflows()}}(this))},t.prototype["new"]=function(){var e,t,o;return e=Utils.guid(),Tangerine.router.navigate("workflow/edit/"+e,!1),o=new Workflow({_id:e}),t=new WorkflowEditView({workflow:o}),vm.show(t)},t.prototype["delete"]=function(e){var t,o,r;if(t=$(e.target),r=t.parent("li").attr("id"),o=this.workflows.get(r).get("name"),confirm("Are you sure you want to delete workflow "+o+"?"))return this.workflows.get(r).destroy({success:function(e){return function(){return e.render()}}(this)})},t.prototype.MONTHS=[null,"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],t.prototype.csvPromptMonth=function(e){var t,o,r,n,i,l,s,a,u,c;return o=$(e.target),u=o.parent().find(".workflow-title").html,l=o.attr("href"),r=new Date,s=r.getMonth()+1,a=r.getFullYear(),i="<div id='csvReportForm'> <h1>CSV Reporting</h1> <input id='csvUrl' name='csvUrl' type='hidden' value='"+l+"'> <p>Select the month that you would like to generate:</p> <label for='csvYear'>Year:</label> <select id='csvYear' name='csvYear'> "+function(){var e,t,o,r;for(r=[],c=e=t=a-1,o=a+1;t<=o?e<=o:e>=o;c=t<=o?++e:--e)r.push("<option  value='"+c+"' "+(c===a?"selected":"")+">"+c+"</option>");return r}().join("")+" </select> <br/> <label for='csvMonth'>Month:</label> <select id='csvMonth' name='csvName'> "+function(){var e,t;for(t=[],n=e=1;e<=12;n=++e)t.push("<option  value='"+n+"' "+(n===s?'selected="true"':"")+">"+this.MONTHS[n]+"</option>");return t}.call(this).join("")+" </select> <br/> <button class='command' data-action='cancel'>Cancel</button> <button class='command' data-action='generate'>Generate Report</button> </div>",Utils.modal(i),t=$("#csvReportForm button"),t.on("click",function(e){var o,r,n,i;return t.off("click"),"generate"===$(e.target).attr("data-action")&&(r=$("#csvReportForm #csvUrl").val(),n=$("#csvReportForm #csvYear option:selected").val(),o=$("#csvReportForm #csvMonth").val(),i=[r,n,o].join("/"),document.location=i),Utils.modal(!1)}),!1},t.prototype.initialize=function(e){var t,o;for(t in e)o=e[t],this[t]=o;return this.workflows=new Workflows,this.workflows.fetch({success:function(e){return function(){return e.feedbacks=new Feedbacks,e.feedbacks.fetch({success:function(){return e.ready=!0,e.render()}})}}(this)})},t.prototype.render=function(){var e,t,o,r,n,i,l,s,a;if(this.ready===!0){for(r="",l=this.workflows.models,n=0,i=l.length;n<i;n++)a=l[n],e="/brockman/workflow/"+Tangerine.db_name+"/"+a.id,t=this.feedbacks.get(a.id+"-feedback"),o=null!=t&&(null!=(s=t.get("children"))?s.length:void 0)>0?"<a href='#feedback/"+a.id+"'>feedback</a>":"",r+="<li id='"+a.id+"' style='margin-bottom:15px;'> <span class='workflow-title'>"+a.get("name")+"</span> <br> <a href='#workflow/run/"+a.id+"'>run</a> "+o+" <a href='#workflow/edit/"+a.id+"'>edit</a> <a class='workflow-csv' href='"+e+"'>csv</a> <span class='workflow-delete link'>delete</span> </li>";return this.$el.html("<h1>Workflows</h1> <button class='workflow-new command'>New</button> <ul class='workflow-menu'>"+r+"</ul>")}},t.prototype.renderMobile=function(){return this.$el.html("<ul class='workflow-menu'></ul>"),this.updateWorkflows(),this.trigger("rendered")},t.prototype.updateWorkflows=function(){var e,t,o,r,n,i,l,s,a,u;for(o=Tangerine.user.getPreferences("tutor-workflows","hidden")||[],r="",this.workflows.models.sort(function(e,t){return e.get("name").toLowerCase()<t.get("name").toLowerCase()?-1:e.get("name").toLowerCase()>t.get("name").toLowerCase()?1:0}),l=this.workflows.models,n=0,i=l.length;n<i;n++)u=l[n],s=u.id,indexOf.call(o,s)>=0||(e=this.feedbacks.get(u.id+"-feedback"),t=u.getBoolean("enableFeedback")&&null!=e&&(null!=(a=e.get("children"))?a.length:void 0)>0?"<button class='command'><a href='#feedback/"+u.id+"'>Feedback</a></button>":"",r+="<li id='"+u.id+"' style='margin-bottom:12px; padding-bottom: 12px; border-bottom: 1px solid #eee;'> <a href='#workflow/run/"+u.id+"' class='workflow-button-link'>"+u.get("name")+"</a> "+t+" <div id='resume-workflow-"+u.id+"'></div> </li>");return this.$el.find(".workflow-menu").html(r),this.renderResumeInfo()},t.prototype.renderResumeInfo=function(){var e,t,o,r,n;e=Tangerine.user.getPreferences("tutor-workflows","incomplete")||{},t=[];for(n in e)r=e[n],0!==r.length?t.push(function(){var e,t,n;for(n=[],e=0,t=r.length;e<t;e++)o=r[e],n.push(Tangerine.$db.view(Tangerine.design_doc+"/tripsAndUsers",{key:o,include_docs:!0,success:function(e){return function(t){var o,r;return o=t.rows[0].doc,r=moment(o.updated).fromNow(),e.$el.find("#resume-workflow-"+o.workflowId).append("<a href='#workflow/resume/"+o.workflowId+"/"+o.tripId+"'><button class='command'>Resume</button></a> "+r+" <button class='command remove-resume' data-workflowId='"+o.workflowId+"' data-tripId='"+o.tripId+"'>X</button><br>")}}(this)}));return n}.call(this)):t.push(void 0);return t},t}(Backbone.View);


var ValidObservationView,extend=function(t,n){function e(){this.constructor=t}for(var r in n)hasProp.call(n,r)&&(t[r]=n[r]);return e.prototype=n.prototype,t.prototype=new e,t.__super__=n.prototype,t},hasProp={}.hasOwnProperty;ValidObservationView=function(t){function n(){return n.__super__.constructor.apply(this,arguments)}return extend(n,t),n.prototype.initialize=function(){return this.validCount={thisMonth:0,lastMonth:0},this.tripIds={},this.fetchTripIds()},n.prototype.fetchTripIds=function(t){var n,e,r;return null==t&&(t=$.noop),n=new Date,r=n.getFullYear(),e=n.getMonth()+1,Utils.execute([function(t){return null==t&&(t=$.noop),Tangerine.$db.view(Tangerine.design_doc+"/tutorTrips",{key:"year"+r+"month"+e,reduce:!1,success:function(n){return function(e){return n.tripIds.thisMonth=_(e.rows.map(function(t){return t.value})).uniq(),"function"==typeof t?t():void 0}}(this)})},function(t){return null==t&&(t=$.noop),Tangerine.$db.view(Tangerine.design_doc+"/tutorTrips",{key:"year"+r+"month"+(e-1),reduce:!1,success:function(n){return function(e){return n.tripIds.lastMonth=_(e.rows.map(function(t){return t.value})).uniq(),"function"==typeof t?t():void 0}}(this)})},function(t){var n;return null==t&&(t=$.noop),n=[Tangerine.user.get("name")].concat(Tangerine.user.getArray("previousUsers")),Tangerine.$db.view(Tangerine.design_doc+"/tripsAndUsers",{keys:n,reduce:!1,success:function(n){return function(e){return n.tripIds.thisUser=_(e.rows.map(function(t){return t.value})).uniq(),"function"==typeof t?t():void 0}}(this)})},function(t){var n,e,r;return null==t&&(t=$.noop),n="00b0a09a-2a9f-baca-2acb-c6264d4247cb",e="c835fc38-de99-d064-59d3-e772ccefcf7d",r=[n,e].map(function(t){return"workflow-"+t}),Tangerine.$db.view(Tangerine.design_doc+"/tutorTrips",{keys:r,reduce:!1,success:function(n){return function(e){return n.tripIds.theseWorkflows=_(e.rows.map(function(t){return t.value})).uniq(),"function"==typeof t?t():void 0}}(this)})},function(t){return null==t&&(t=$.noop),this.tripIds["final"]={thisMonth:_.intersection(this.tripIds.thisMonth,this.tripIds.theseWorkflows,this.tripIds.thisUser),lastMonth:_.intersection(this.tripIds.lastMonth,this.tripIds.theseWorkflows,this.tripIds.thisUser)},"function"==typeof t?t():void 0},function(t){return null==t&&(t=$.noop),Tangerine.$db.view(Tangerine.design_doc+"/spirtRotut",{group:!0,keys:this.tripIds["final"].thisMonth,success:function(n){return function(e){var r;return r=e.rows.filter(function(t){var n,e;return n=(parseInt(t.value.maxTime)-parseInt(t.value.minTime))/1e3/60,e=n>=20}),n.validTrips=r.map(function(t){return t.key}),n.trigger("valid-update"),n.validCount.thisMonth=r.length,"function"==typeof t?t():void 0}}(this)})},function(t){return null==t&&(t=$.noop),Tangerine.$db.view(Tangerine.design_doc+"/spirtRotut",{group:!0,keys:this.tripIds["final"].lastMonth,success:function(n){return function(e){var r;return r=e.rows.filter(function(t){var n,e;return n=(parseInt(t.value.maxTime)-parseInt(t.value.minTime))/1e3/60,e=n>=20}),n.validCount.lastMonth=r.length,"function"==typeof t?t():void 0}}(this)})},this.render],this)},n.prototype.render=function(t){return"loading"===t?void this.$el.html("<h2>Valid Observations</h2><p>Loading...</p>"):this.$el.html("<h2>Valid Observations</h2> <table class='class_table'><tr><th></th><th>Observations</th></tr> <tr><th>This month</th><td>"+this.validCount.thisMonth+" </td></tr> <tr><th>Previous month</th><td>"+this.validCount.lastMonth+" </td></tr> </table>")},n}(Backbone.View);


var WorkflowEditView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function n(){this.constructor=e}for(var s in t)hasProp.call(t,s)&&(e[s]=t[s]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;WorkflowEditView=function(e){function t(){return this.updateSelector=bind(this.updateSelector,this),this.onTypeSelectorChange=bind(this.onTypeSelectorChange,this),this.render=bind(this.render,this),this.updateEditInPlaceModels=bind(this.updateEditInPlaceModels,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="WorkflowEditView",t.prototype.events=$.extend({"click  .add":"stepAdd","change .type-selector":"onTypeSelectorChange","change .types-id":"onTypesIdChange","change .user-type":"onUserTypeChange","change input[type=radio]":"onRadioChange","click .open-selector":"openSelector","click .remove-step":"removeStep"},Backbone.EditView.prototype.events),t.prototype.removeStep=function(e){var t,n;return t=$(e.target),n=t.attr("data-model-id"),this.workflow.collection.remove(n),this.workflow.save(null,{success:function(){return Utils.topAlert("Step removed")}})},t.prototype.openSelector=function(e){var t,n,s;return t=$(e.target),n=t.attr("data-model-id"),s=t.attr("data-step-type"),this.updateSelector(n,s)},t.prototype.onTypesIdChange=function(e){var t,n,s;return t=$(e.target),s=t.val(),n=t.attr("data-step-id"),this.models.get(n).save({typesId:s},{success:function(){return Utils.topAlert("Saved")}})},t.prototype.onUserTypeChange=function(e){var t,n,s;return t=$(e.target),s=t.val(),n=t.attr("data-step-id"),this.models.get(n).save({userType:s},{success:function(){return Utils.topAlert("Saved")}})},t.prototype.onRadioChange=function(e){var t,n,s,o;return t=$(e.target),o=t.val(),n=t.attr("data-id"),s=t.attr("data-step-id"),null!=s&&null!=n?this.models.get(s).save({dataId:o},{success:function(){return Utils.topAlert("Saved")}}):(this.workflow.set(n,o),this.workflow.save(null,{success:function(){return Utils.topAlert("Saved")}}))},t.prototype.initialize=function(e){var t,n;for(t in e)n=e[t],this[t]=n;return this.updateEditInPlaceModels(),this.workflow.collection.on("change add remove",function(e){return function(){return e.workflow.collection.sort(),e.updateEditInPlaceModels(),e.render()}}(this))},t.prototype.updateEditInPlaceModels=function(){return this.models=new Backbone.Collection([this.workflow].concat(this.workflow.collection.models))},t.prototype.render=function(){var e,t,n,s,o,a,r,l,i;for(i="",this.needNames=[],this.needSelector=[],this.workflow.collection.each(function(e){return function(t){var n,s,o,a,r,l,d,c,p,u,h,m,y;if(m=t.getType(),"assessment"===m&&(l="selected='selected'"),"curriculum"===m&&(d="selected='selected'"),"new"===m&&(u="selected='selected'"),"message"===m&&(p="selected='selected'"),"login"===m&&(c="selected='selected'"),""===m&&(h="selected='selected'"),""!==m&&"assessment"===m||(n="display:none;"),""!==m&&"curriculum"===m||(s="display:none;"),""!==m&&"new"===m||(r="display:none;"),""!==m&&"message"===m||(a="display:none;"),""!==m&&"login"===m||(o="display:none;"),y="<select class='type-selector' data-id='"+t.id+"'> <option disabled='disabled' "+(h||"")+" >Select type</option> <option "+(l||"")+" value='assessment'>Assessment</option> <option "+(d||"")+" value='curriculum'>Curriculum</option> <option "+(p||"")+" value='message'>Message</option> <option "+(u||"")+" value='new'>New Object</option> <option "+(c||"")+" value='login'>Login</option> </select>",i+="<li> <table> <tr> <th>Name</th> <td>"+e.getEditable({model:t,attribute:{key:"name",escape:!0},name:"Step name",placeholder:"untitled step"})+" </td> </tr> <tr> <th>Order</th> <td>"+e.getEditable({model:t,attribute:{key:"order",isNumber:!0},name:"Order",placeholder:"Order"})+" </td> </tr> <tr> <th>Resumable</th> <td>"+e.getEditable({model:t,attribute:{key:"resumable",escape:!0},name:"Resumable",placeholder:"true or false",prepare:function(e){return CoffeeScript.compile("return "+e)}})+" </td> </tr> <tr> <th>Skip logic</th> <td>"+e.getEditable({model:t,attribute:{key:"skipLogic",escape:!0},name:"Skip logic",placeholder:"Skip logic",prepare:function(e){return CoffeeScript.compile("return "+e)}})+" </td> </tr> <tr> <th>Type</th> <td> "+y+"<br> <div id='typeSelectorContainer-"+t.id+"'></div> </td> </tr> <tr class='message-only not-new not-login not-assessment not-curriculum' style='"+(a||"")+"'> <th>Message</th> <td>"+e.getEditable({model:t,attribute:{key:"message",escape:!0},name:"Message",placeholder:"Message"})+" </td> </tr> <tr class='new-only not-login not-assessment not-new not-curriculum' style='"+(r||"")+"'> <th>Object Type</th> <td>"+e.getEditable({model:t,attribute:{key:"className"},name:"Class name",placeholder:"Class name"})+" </td> </tr> <tr class='new-only not-login not-assessment not-new not-curriculum' style='"+(r||"")+"'> <th>Object options</th> <td>"+e.getEditable({model:t,attribute:{key:"classOptions"},name:"Class Options",placeholder:"Class options",prepare:function(e){return CoffeeScript.compile("return "+e)}})+" </td> </tr> <tr class='login-only not-assessment not-new not-curriculum' style='"+(o||"")+"'> <th>Login type</th> <td id='user-type-selector-container-"+t.id+"'> "+t.getUserType()+" <span class='link open-selector' data-model-id='"+t.id+"' data-step-type='login'>Change</span> </td> </tr> <tr class='curriculum-only not-assessment not-new not-login' style='"+(s||"")+"'> <th>Item type variable</th> <td>"+e.getEditable({model:t,attribute:{key:"curriculumItemType"},name:"Item type variable",placeholder:"Item type"})+" </td> </tr> <tr class='curriculum-only not-assessment not-new not-login' style='"+(s||"")+"'> <th>Week variable</th> <td>"+e.getEditable({model:t,attribute:{key:"curriculumWeek"},name:"Week variable",placeholder:"Week variable"})+" </td> </tr> <tr class='curriculum-only not-assessment not-new not-login' style='"+(s||"")+"'> <th>Grade variable</th> <td>"+e.getEditable({model:t,attribute:{key:"curriculumGrade"},name:"Grade variable",placeholder:"Grade variable"})+" </td> </tr> <tr> <td><button class='command remove-step' data-model-id='"+t.id+"'>Remove</button></td> </tr> </table> </li>","assessment"!==m&&"curriculum"!==m||e.needNames.push(t),"assessment"===m&&""===t.getTypesId()&&e.needSelector.push(t),"curriculum"===m&&""===t.getTypesId()&&e.needSelector.push(t),"login"===m&&""===t.getUserType())return e.needSelector.push(t)}}(this)),e="<section> <table> <tr> <td><h1>Name: </h1></td> <td> <h1>"+this.getEditable({model:this.workflow,attribute:{key:"name",escape:!0},name:"Workflow name",placeholder:"Untitled workflow"})+" </h1> </td> </tr> <tr> <th>Feedback Enabled: </th> <td> <div id='enable_feedback_radio' class='buttonset' style='float: left; padding-right: 15px;'> <label for='enable_feedback_true'>Yes</label><input name='enableFeedback' data-id='enableFeedback' type='radio' value='true' id='enable_feedback_true' "+("true"===this.workflow.get("enableFeedback")?"checked":void 0)+"> <label for='enable_feedback_false'>No</label><input name='enableFeedback' data-id='enableFeedback' type='radio' value='false' id='enable_feedback_false' "+("true"!==this.workflow.get("enableFeedback")?"checked":void 0)+"> </div> <button class='command feedback nav-button'><a href='#feedback/edit/"+this.workflow.id+"'>Edit Feedback</a></button> </td> </tr> <tr> <th>Media Overlay File: </th> <td> "+this.getEditable({model:this.workflow,attribute:{key:"mediaOverlayFile",escape:!0},name:"Media Overlay File Name Logic",placeholder:"[Logic returning media overlay file name - leave empty if no Media Overlay is enabled]"})+" </td> </tr> </table> </section> <div class='menubox'> <h2>Steps</h2> <ul id='step-list'>"+i+"</ul> </div> <div id='controls'> <button class='add command'>Add step</button> </div>",this.$el.html(e),r=this.needNames,t=0,s=r.length;t<s;t++)a=r[t],a.getTypesId()&&!function(e){return function(t){var n;return n=new Backbone.Model({_id:t.getTypesId()}),n.fetch({error:function(){return e.$el.find("#typeSelectorContainer-"+t.id).html("Not found <span class='link open-selector' data-model-id='"+t.id+"' data-step-type='"+t.getType()+"'>Change</span>")},success:function(){return e.$el.find("#typeSelectorContainer-"+t.id).html(n.get("name")+(" <span class='link open-selector' data-model-id='"+t.id+"' data-step-type='"+t.getType()+"'>Change</span>"))}})}}(this)(a);for(l=this.needSelector,n=0,o=l.length;n<o;n++)a=l[n],this.updateSelector(a.id,a.getType());return this.trigger("rendered")},t.prototype.onTypeSelectorChange=function(e){var t,n,s;return t=$(e.target),n=this.models.get(t.attr("data-id")),s=t.val(),n.save({type:s},{error:function(e){return function(){return Utils.midAlert("Could not save. Please try again."),e.render()}}(this),success:function(e){return function(){var o;return Utils.topAlert("Type saved"),o=t.parent("li"),o.find("."+s+"-only").show(),o.find(".not-"+s).hide(),e.updateSelector(n.id,s)}}(this)})},t.prototype.updateSelector=function(e,t){var n,s,o,a,r,l,i,d,c,p;if("assessment"===t)return this.$el.find("#typeSelectorContainer-"+e).html("<img src='images/loading.gif' class='loading'>"),null==this.assessments&&(this.assessments=new Assessments),this.assessments.fetch({success:function(t){return function(){var n,s,o,a,r,l,i,d;for(r=!1,s="",i=t.assessments.models,o=0,a=i.length;o<a;o++)n=i[o],n.id===t.workflow.collection.get(e).getTypesId()?(d="selected='selected'",r=!0):d="",s+="<option value='"+n.id+"' "+(d||"")+">"+n.get("name")+"</option>";return r||(l="<option selected='selected' disabled='disabled'>Please select an assessment</option>"),t.$el.find("#typeSelectorContainer-"+e).html("<select class='types-id' data-step-id='"+e+"'> "+(l||"")+" "+s+" </select>")}}(this)});if("curriculum"===t)return this.$el.find("#typeSelectorContainer-"+e).html("<img src='images/loading.gif' class='loading'>"),n=new Curricula,n.fetch({success:function(t){return function(){var s,o,a,r,l,i,d,c;for(l=!1,s="",d=n.models,o=0,a=d.length;o<a;o++)r=d[o],r.id===t.workflow.collection.get(e).getTypesId()?(l=!0,c="selected='selected'"):c="",s+="<option value='"+r.id+"' "+c+">"+r.get("name")+"</option>";return l||(i="<option selected='selected' disabled='disabled'>Please select an assessment</option>"),t.$el.find("#typeSelectorContainer-"+e).html("<select class='types-id' data-step-id='"+e+"'> "+(i||"")+" "+s+" </select><br>")}}(this)});if("login"===t){for(l=["tac","teacher"],r=!1,s="",c=this.workflow.collection.get(e),o=0,a=l.length;o<a;o++)p=l[o],c.getUserType()===p?(r=!0,d="selected='selected'"):d="",s+="<option value='"+p+"' "+d+">"+p+"</option>";return r||(i="<option selected='selected' disabled='disabled'>Please select a user type</option>"),this.$el.find("#user-type-selector-container-"+e).html("<select class='user-type' data-step-id='"+e+"'> "+(i||"")+" "+s+" </select>")}},t.prototype.stepAdd=function(){return this.workflow.newChild()},t}(Backbone.EditView);


var WorkflowRunView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function i(){this.constructor=e}for(var n in t)hasProp.call(t,n)&&(e[n]=t[n]);return i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;WorkflowRunView=function(superClass){function WorkflowRunView(){return this.renderStep=bind(this.renderStep,this),this.nextStep=bind(this.nextStep,this),this.onSubViewDone=bind(this.onSubViewDone,this),this.afterRender=bind(this.afterRender,this),this["switch"]=bind(this["switch"],this),WorkflowRunView.__super__.constructor.apply(this,arguments)}return extend(WorkflowRunView,superClass),WorkflowRunView.prototype.events={"click .previous":"previousStep","click .next":"nextStep"},WorkflowRunView.prototype["switch"]=function(){return this.$el.toggle(),this.$lessonContainer.toggle()},WorkflowRunView.prototype.initialize=function(e){var t,i;for(t in e)i=e[t],this[t]=i;return null==this.tripId&&(this.tripId=Utils.guid()),null==this.index&&(this.index=0),null==this.steps&&(this.steps=[]),this.currentStep=this.workflow.stepModelByIndex(this.index),this.subViewRendered=!1},WorkflowRunView.prototype.shouldSkip=function(){var currentStep,e,shouldSkip,skipLogicCode;if(currentStep=this.workflow.stepModelByIndex(this.index),null==currentStep)return!1;if(skipLogicCode=currentStep.getString("skipLogic-cooked"),!_(skipLogicCode).isEmptyString()){try{shouldSkip=eval(skipLogicCode)}catch(error){e=error,Utils.sticky("Workflow skip logic error<br>"+e.message)}return shouldSkip}return!1},WorkflowRunView.prototype.render=function(){var e,t;return this.shouldSkip()?(this.subViewRendered=!0,this.nextStep()):(t="<div id='workflow-progress'></div>",this.index!==this.workflow.getChildren().length-1&&(e="<div class='clearfix'><button class='nav-button next'>Next</button></div>"),this.$el.html(t+" <div id='header-container'></div> <section id='"+this.cid+"_current_step'></section> <!--button class='nav-button previous'>Previous</button--> "+(e||"")),this.renderStep(),this.checkIncompletes(),this.$el.find("#workflow-progress").progressbar({value:(this.index+1)/(this.workflow.getLength()+1)*100}),this.trigger("rendered"))},WorkflowRunView.prototype.afterRender=function(){return"undefined"!=typeof subView&&null!==subView&&"function"==typeof subView.afterRender?subView.afterRender():void 0},WorkflowRunView.prototype.onSubViewDone=function(){return this.subViewDone=!0,this.nextStep()},WorkflowRunView.prototype.nextStep=function(){var e,t,i,n,s,r,o,u,h;return e=null!=this.subView,t=this.subViewRendered,i=!this.subViewDone,r="assessment"===this.currentStep.getType(),n="curriculum"===this.currentStep.getType(),s="new"===this.currentStep.getType(),!!t&&(e&&i&&r?this.subView.next():e&&i&&s?this.subView.save():(this.subViewRendered=!1,this.subViewDone=!1,null!=(u=this.subView)&&"function"==typeof u.remove&&u.remove(),null!=(h=this.subView)&&"function"==typeof h.unbind&&h.unbind(),this.subView=null,o=this.index,this.index=Math.min(this.index+1,this.workflow.getLength()),o!==this.index&&this.render(),this.checkIncompletes()))},WorkflowRunView.prototype.checkIncompletes=function(){var e;if(this.checkingIncompletes!==!0)return"Complete"===this.workflow.stepModelByIndex(this.index).getName()?(this.checkingIncompletes=!0,e=Tangerine.user.getPreferences("tutor-workflows","incomplete")||{},e[this.workflow.id]=_(e[this.workflow.id]).without(this.tripId),Tangerine.user.setPreferences("tutor-workflows","incomplete",e,function(e){return function(){return e.checkingIncompletes=!1}}(this))):void 0},WorkflowRunView.prototype.previousStep=function(){var e;if(e=this.index,this.index=Math.max(this.index-1,0),e!==this.index)return this.render()},WorkflowRunView.prototype.getNumber=function(e){return parseInt(this.getVariable(e))},WorkflowRunView.prototype.getString=function(e){return this.getVariable(e)},WorkflowRunView.prototype.getVariable=function(e){var t,i,n,s,r;for(n=this.steps,t=0,i=n.length;t<i;t++)if(r=n[t],null!=(null!=r?r.result:void 0)&&(s=r.result.getVariable(e)),null!=s)return s},WorkflowRunView.prototype.renderStep=function(){var e,t,i,n,s,r,o,u,h;if(null==this.steps[this.index]&&(this.steps[this.index]={}),this.currentStep=this.workflow.stepModelByIndex(this.index),this.steps[this.index].model=this.currentStep,this.index===this.workflow.getLength()-1&&(Tangerine.activity="",this.$el.find(".next").hide()),this.index!==this.workflow.getLength()){switch(this.currentStep.getType()){case"new":this.renderNew();break;case"assessment":this.renderAssessment();break;case"curriculum":this.renderCurriculum();break;case"message":this.renderMessage();break;case"login":this.$el.find("#"+this.cid+"_current_step").html("<h1>Login - "+this.currentStep.get("userType")+"</h1>");break;default:this.$el.find("#"+this.cid+"_current_step").html("<h1>"+this.currentStep.name()+" - "+this.currentStep.getType()+"</h1>")}return this.currentStep.getShowLesson()?(u=this.getVariable("subject"),s=this.getVariable("subject_mother_tongue"),u={word:"kiswahili",english_word:"english",operation:"maths",3:"3"}[u],i=this.getVariable("class"),h=this.getVariable("lesson_week"),t=this.getVariable("lesson_day"),e=$("#content"),e.find("#display-switch").length>0||(e.append("<img src='images/icon_switch.png' id='display-switch'>"),this.$button=e.find("#display-switch"),this.$button.on("click",this["switch"])),e.append("<div id='lesson-container' style='display:none;'></div>"),this.$lessonContainer=e.find("#lesson-container"),n=new Image,$(n).on("load",function(e){return function(t){var i,s;return 0===n.height?(null!=(i=e.$lessonContainer)&&"function"==typeof i.remove&&i.remove(),null!=(s=e.$button)&&"function"==typeof s.remove?s.remove():void 0):e.$lessonContainer.append(n)}}(this)),"3"===u?n.src="/"+Tangerine.db_name+"/_design/assets/lessons/"+s+"_w"+h+"_d"+t+".png":n.src="/"+Tangerine.db_name+"/_design/assets/lessons/"+u+"_c"+i+"_w"+h+"_d"+t+".png"):(null!=(r=this.lessonContainer)&&"function"==typeof r.remove&&r.remove(),null!=(o=this.$button)?o.remove():void 0)}},WorkflowRunView.prototype.renderMessage=function(){var coffeeMessage,htmlMessage,jsMessage;return this.nextButton(!0),coffeeMessage=this.currentStep.getCoffeeMessage(),jsMessage=CoffeeScript.compile.apply(this,['return "'+coffeeMessage+'"']),htmlMessage=eval(jsMessage),this.$el.find("#"+this.cid+"_current_step").html(htmlMessage),this.subViewRendered=!0},WorkflowRunView.prototype.renderNew=function(){var e;return this.nextButton(!0),e=this.currentStep.getView({workflowId:this.workflow.id,tripId:this.tripId}),this.steps[this.index].view=e,this.steps[this.index].result=e.getResult(),this.showView(e)},WorkflowRunView.prototype.renderAssessment=function(){return this.nextButton(!0),this.currentStep.fetch({success:function(e){return function(){var t,i;return t=e.currentStep.getTypeModel(),i=new AssessmentRunView({model:t,inWorkflow:!0,tripId:e.tripId,workflowId:e.workflow.id}),null!=e.assessmentResumeIndex&&(i.index=e.assessmentResumeIndex,delete e.assessmentResumeIndex),e.steps[e.index].view=i,e.steps[e.index].result=i.getResult(),e.showView(i)}}(this)})},WorkflowRunView.prototype.renderCurriculum=function(){var e,t;return this.nextButton(!1),e=this.currentStep.getTypesId(),t=new Subtests,t.fetch({key:e,success:function(e){return function(){var i,n,s,r,o,u,h,l,p,d,c,w,a,f;return s=e.getString(e.currentStep.getCurriculumItemType()),n=e.getNumber(e.currentStep.getCurriculumGrade()),a=(new Date).getFullYear(),l=moment(a+" Jan 1"),h=moment(a+" April 30"),d=moment(a+" May 1"),p=moment(a+" Aug 31"),w=moment(a+" Sept 1"),c=moment(a+" Dec 31"),r=moment(),u=l<=r&&r<=h?1:d<=r&&r<=p?2:w<=r&&r<=c?3:void 0,i={itemType:s,part:u,grade:n},o=_(t.where({itemType:s,part:u,grade:n})).first(),null==o?Utils.midAlert("Subtest not found for <br> itemType: "+s+"<br> term: "+u+"<br> grade: "+n):(f=new KlassSubtestRunView({student:new Student,subtest:o,questions:new Questions,linkedResult:new KlassResult,inWorkflow:!0,tripId:e.tripId,workflowId:e.workflow.id}),e.steps[e.index].view=f,e.showView(f,e.currentStep.getName()))}}(this)})},WorkflowRunView.prototype.renderEnd=function(){Utils.gpsPing,this.$el.find("#"+this.cid+"_current_step").html("<p>You have completed this Classroom Observation.</p> <button class='nav-button'><a href='#feedback/"+this.workflow.id+"'>Go to feedback</a></button> <p>Once in feedback select the appropriate county, zone, school and date of this school visit to retrieve the feedback for this lesson observation. This information is to be used in your reflections and discussion with the teacher.</p> <button class='nav-button'><a href='#'>Main</a></button>")},WorkflowRunView.prototype.nextButton=function(e){return e?this.$el.find("button.next").show():this.$el.find("button.next").hide()},WorkflowRunView.prototype.onClose=function(){var e,t;return null!=(e=this.lessonContainer)&&"function"==typeof e.remove&&e.remove(),null!=(t=this.$button)&&"function"==typeof t.remove?t.remove():void 0},WorkflowRunView.prototype.showView=function(e,t){return null==t&&(t=""),""!==t&&(t="<h1>"+t+"</h1>"),this.subView=e,this.$el.find("#header-container").html(t),this.subView.setElement(this.$el.find("#"+this.cid+"_current_step")),this.listenTo(this.subView,"subViewDone save",this.onSubViewDone),this.listenTo(this.subView,"rendered",function(e){return function(){return e.subViewRendered=!0,e.trigger("rendered")}}(this)),this.subView.render()},WorkflowRunView}(Backbone.View);


var WorkflowSelectView,extend=function(e,t){function r(){this.constructor=e}for(var n in t)hasProp.call(t,n)&&(e[n]=t[n]);return r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty,indexOf=[].indexOf||function(e){for(var t=0,r=this.length;t<r;t++)if(t in this&&this[t]===e)return t;return-1};WorkflowSelectView=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.events={"change input[type=checkbox]":"onCheckboxChange"},t.prototype.initialize=function(e){var t,r;for(t in e)r=e[t],this[t]=r;return this.ready=!1,this.buttons=[],this.isAdmin=Tangerine.user.isAdmin(),this.workflows=new Workflows,this.workflows.fetch({error:$.noop,success:function(e){return function(){return e.ready=!0,e.render()}}(this)})},t.prototype.render=function(){var e,t,r,n,o,i,s,d;if(this.ready){for(t=Tangerine.user.getPreferences("tutor-workflows","hidden")||[],r="<h1>Select Workflows</h1>",i=this.workflows.models,n=0,o=i.length;n<o;n++)d=i[n],s=d.id,e=indexOf.call(t,s)<0?"checked='checked'":"",r+="<li id='"+d.id+"' style='margin-bottom:25px;'> <label for='"+d.id+"-checkbox' data-id='"+d.id+"'><input type='checkbox' "+e+" class='selectable' data-id='"+d.id+"' id='"+d.id+"-checkbox' "+(this.isAdmin?void 0:"disabled='disabled'")+">"+d.get("name")+"</label> </li>";this.$el.html(r)}},t.prototype.onClose=function(){var e,t,r,n,o;for(n=this.buttons,o=[],t=0,r=n.length;t<r;t++)e=n[t],o.push(e.close());return o},t.prototype.onCheckboxChange=function(e){var t,r,n,o;if(t=$(e.target),o=t.attr("data-id"))return this.$el.find("input").attr("disabled","disabled"),r=Tangerine.user.getPreferences("tutor-workflows","hidden")||[],n=t.prop("checked"),n?n&&(r=r.filter(function(e){return e!==o})):r.push(o),Tangerine.user.setPreferences("tutor-workflows","hidden",r,function(e){return function(){return e.$el.find("input").removeAttr("disabled"),Utils.topAlert("Saved")}}(this))},t}(Backbone.View);


var WorkflowMenuMemberView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function o(){this.constructor=e}for(var r in t)hasProp.call(t,r)&&(e[r]=t[r]);return o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty,indexOf=[].indexOf||function(e){for(var t=0,o=this.length;t<o;t++)if(t in this&&this[t]===e)return t;return-1};WorkflowMenuMemberView=function(e){function t(){return this.renderMobile=bind(this.renderMobile,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="WorkflowMenuMemberView",t.prototype.events={"click .workflow-new":"new","click .workflow-delete":"delete","click .workflow-run":"run","click .workflow-edit":"edit","click .workflow-csv":"csvPromptMonth","click .remove-resume":"removeResume"},t.prototype.removeResume=function(e){var t,o,r,n;if(t=$(e.target),n=t.attr("data-workflowId"),r=t.attr("data-tripId"),confirm("Are you sure you want to remove the option to resume this workflow?"))return o=Tangerine.user.getPreferences("tutor-workflows","incomplete")||{},o[n]=_(o[n]).without(r),Tangerine.user.setPreferences("tutor-workflows","incomplete",o,function(e){return function(){return e.updateWorkflows()}}(this))},t.prototype["new"]=function(){var e,t,o;return e=Utils.guid(),Tangerine.router.navigate("workflow/edit/"+e,!1),o=new Workflow({_id:e}),t=new WorkflowEditView({workflow:o}),vm.show(t)},t.prototype["delete"]=function(e){var t,o,r;if(t=$(e.target),r=t.parent("li").attr("id"),o=this.workflows.get(r).get("name"),confirm("Are you sure you want to delete workflow "+o+"?"))return this.workflows.get(r).destroy({success:function(e){return function(){return e.render()}}(this)})},t.prototype.MONTHS=[null,"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],t.prototype.csvPromptMonth=function(e){var t,o,r,n,i,s,l,a,u,c;return o=$(e.target),u=o.parent().find(".workflow-title").html,s=o.attr("href"),r=new Date,l=r.getMonth()+1,a=r.getFullYear(),i="<div id='csvReportForm'> <h1>CSV Reporting</h1> <input id='csvUrl' name='csvUrl' type='hidden' value='"+s+"'> <p>Select the month that you would like to generate:</p> <label for='csvYear'>Year:</label> <select id='csvYear' name='csvYear'> "+function(){var e,t,o,r;for(r=[],c=e=t=a-1,o=a+1;t<=o?e<=o:e>=o;c=t<=o?++e:--e)r.push("<option  value='"+c+"' "+(c===a?"selected":"")+">"+c+"</option>");return r}().join("")+" </select> <br/> <label for='csvMonth'>Month:</label> <select id='csvMonth' name='csvName'> "+function(){var e,t;for(t=[],n=e=1;e<=12;n=++e)t.push("<option  value='"+n+"' "+(n===l?'selected="true"':"")+">"+this.MONTHS[n]+"</option>");return t}.call(this).join("")+" </select> <br/> <button class='command' data-action='cancel'>Cancel</button> <button class='command' data-action='generate'>Generate Report</button> </div>",Utils.modal(i),t=$("#csvReportForm button"),t.on("click",function(e){var o,r,n,i;return t.off("click"),"generate"===$(e.target).attr("data-action")&&(r=$("#csvReportForm #csvUrl").val(),n=$("#csvReportForm #csvYear option:selected").val(),o=$("#csvReportForm #csvMonth").val(),i=[r,n,o].join("/"),document.location=i),Utils.modal(!1)}),!1},t.prototype.initialize=function(e){var t,o;for(t in e)o=e[t],this[t]=o;return this.workflows=new Workflows,this.workflows.fetch({success:function(e){return function(){return e.feedbacks=new Feedbacks,e.feedbacks.fetch({success:function(){return e.ready=!0,e.render()}})}}(this)})},t.prototype.render=function(){var e,t,o,r,n,i,s,l,a;if(this.ready===!0){for(r="",s=this.workflows.models,n=0,i=s.length;n<i;n++)a=s[n],e="/brockman/workflow/"+Tangerine.db_name+"/"+a.id,t=this.feedbacks.get(a.id+"-feedback"),o=null!=t&&(null!=(l=t.get("children"))?l.length:void 0)>0?"<a href='#feedback/"+a.id+"'>feedback</a>":"",r+="<li id='"+a.id+"' style='margin-bottom:15px;'> <span class='workflow-title'>"+a.get("name")+"</span> <br> <!--<a href='#workflow/run/"+a.id+"'>run</a>--> <a class='workflow-csv' href='"+e+"'>csv</a> </li>";return this.$el.html("<h1>Workflows</h1> <ul class='workflow-menu'>"+r+"</ul>")}},t.prototype.renderMobile=function(){return this.$el.html("<ul class='workflow-menu'></ul>"),this.updateWorkflows(),this.trigger("rendered")},t.prototype.updateWorkflows=function(){var e,t,o,r,n,i,s,l,a,u;for(o=Tangerine.user.getPreferences("tutor-workflows","hidden")||[],r="",this.workflows.models.sort(function(e,t){return e.get("name").toLowerCase()<t.get("name").toLowerCase()?-1:e.get("name").toLowerCase()>t.get("name").toLowerCase()?1:0}),s=this.workflows.models,n=0,i=s.length;n<i;n++)u=s[n],l=u.id,indexOf.call(o,l)>=0||(e=this.feedbacks.get(u.id+"-feedback"),t=u.getBoolean("enableFeedback")&&null!=e&&(null!=(a=e.get("children"))?a.length:void 0)>0?"<button class='command'><a href='#feedback/"+u.id+"'>Feedback</a></button>":"",r+="<li id='"+u.id+"' style='margin-bottom:12px; padding-bottom: 12px; border-bottom: 1px solid #eee;'> <a href='#workflow/run/"+u.id+"' class='workflow-button-link'>"+u.get("name")+"</a> "+t+" <div id='resume-workflow-"+u.id+"'></div> </li>");return this.$el.find(".workflow-menu").html(r),this.renderResumeInfo()},t.prototype.renderResumeInfo=function(){var e,t,o,r,n;e=Tangerine.user.getPreferences("tutor-workflows","incomplete")||{},t=[];for(n in e)r=e[n],0!==r.length?t.push(function(){var e,t,n;for(n=[],e=0,t=r.length;e<t;e++)o=r[e],n.push(Tangerine.$db.view(Tangerine.design_doc+"/tripsAndUsers",{key:o,include_docs:!0,success:function(e){return function(t){var o,r;return o=t.rows[0].doc,r=moment(o.updated).fromNow(),e.$el.find("#resume-workflow-"+o.workflowId).append("<a href='#workflow/resume/"+o.workflowId+"/"+o.tripId+"'><button class='command'>Resume</button></a> "+r+" <button class='command remove-resume' data-workflowId='"+o.workflowId+"' data-tripId='"+o.tripId+"'>X</button><br>")}}(this)}));return n}.call(this)):t.push(void 0);return t},t}(Backbone.View);


var Klass,extend=function(t,e){function r(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;Klass=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.url="klass",e.prototype.initialize=function(){},e.prototype.destroy=function(){var t,r,n;return n=this.id,r=new Students,r.fetch({success:function(t){var e,r,o,s,u;for(u=t.where({klassId:n}),o=[],e=0,r=u.length;e<r;e++)s=u[e],o.push(s.save({klassId:""}));return o}}),t=new Results,t.fetch({success:function(t){var e,r,o,s,u;for(s=t.where({klassId:n}),u=[],e=0,r=s.length;e<r;e++)o=s[e],u.push(o.destroy());return u}}),e.__super__.destroy.call(this)},e.prototype.calcCurrentPart=function(){var t,e,r,n,o;return t=1e3,n=60*t,r=60*n,e=24*r,o=7*e,Math.round(((new Date).getTime()-this.get("startDate"))/o)},e}(Backbone.Model);


var KlassView,extend=function(s,t){function e(){this.constructor=s}for(var r in t)hasProp.call(t,r)&&(s[r]=t[r]);return e.prototype=t.prototype,s.prototype=new e,s.__super__=t.prototype,s},hasProp={}.hasOwnProperty;KlassView=function(s){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,s),e.prototype.className="KlassView",e.prototype.initialize=function(s){var t;return this.klass=s.klass,this.assessments=this.klass.assessments,this.results=[],t=new KlassAssessments,t.fetch({success:function(s){return function(t){var e;return s.assessments=t.where({klassId:s.klass.id}),e=new Results,e.fetch({success:function(t){var e,r,n,a;for(a=s.assessments,r=0,n=a.length;r<n;r++)e=a[r],e.results=t.where({assessmentId:e.id});return s.render()}})}}(this)})},e.prototype.render=function(){var s,e,r,n,a,i,l,o,u;for(u=this.klass.get("year")||"",e=this.klass.get("grade")||"",o=this.klass.get("stream")||"",r="<h1>"+t("class")+" "+o+"</h1> <table> <tr><td>School year</td><td>"+u+"</td></tr> <tr><td>"+t("grade")+"</td><tr>"+e+"</td></tr> </table> </div> <ul class='assessment_list'>",i=this.assessments,n=0,a=i.length;n<a;n++)s=i[n],r+="<li data-id='"+s.id+"'>"+s.get("name")+" - "+(null!=(l=s.get("results"))?l.length:void 0)+"</li>";return r+="</ul>",this.$el.html(r),this.trigger("rendered")},e}(Backbone.View);


var KlassEditView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function s(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;KlassEditView=function(e){function s(){return this.renderStudents=bind(this.renderStudents,this),this.onSubviewRendered=bind(this.onSubviewRendered,this),this.registerStudent=bind(this.registerStudent,this),s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="KlassEditView",s.prototype.events={"click .back":"back","click .save":"basicInfoSave","click .basic_info_edit":"basicInfoToggle","click .basic_info_cancel":"basicInfoToggle","change #teacher_select":"teacherSelect","click .add_student":"addStudentToggle","click .add_student_cancel":"addStudentToggle","click .add_student_add":"addStudent","click .register_student":"registerStudentToggle","click .register_student_cancel":"registerStudentToggle","click .register_student_save":"registerStudent"},s.prototype.teacherSelect=function(t){var e;return e=this.$el.find("#teacher_select option:selected").attr("data-teacherId"),this.klass.set("teacherId",e)},s.prototype.addStudentToggle=function(){return this.$el.find(".register_student_form input").val(""),this.$el.find(".add_student_form, .add_student").toggle()},s.prototype.registerStudentToggle=function(){return this.$el.find(".register_student_form, .register_student").toggle(),this.$el.find(".register_student_form").is(":visible")&&this.$el.find(".register_student_form").scrollTo(),this.$el.find("#register_student_name ,#register_student_gender, #register_student_age").val("")},s.prototype.addStudent=function(){var t,e;return"_none"===this.$el.find("#add_student_select option:selected").val()?alert("Please select a student, or cancel."):(e=this.$el.find("#add_student_select option:selected").attr("data-id"),t=this.allStudents.get(e),t.save({klassId:this.klass.id},{success:function(e){return function(){return e.students.add(t),e.addStudentToggle()}}(this)}))},s.prototype.registerStudent=function(){var t;return t=new Student,t.save({name:this.$el.find("#register_student_name").val(),gender:this.$el.find("#register_student_gender").val(),age:this.$el.find("#register_student_age").val(),klassId:this.klass.id},{success:function(e){return function(){return e.students.add(t),e.registerStudentToggle()}}(this)})},s.prototype.basicInfoToggle=function(){var t;return this.$el.find(".basic_info").toggle(),t=$(this.$el.find(".basic_info")[1]),t.is(":visible")&&(t.scrollTo(),this.$el.find("#year").focus()),this.$el.find("#school_name").val(this.klass.getString("schoolName")),this.$el.find("#year").val(this.klass.getString("year")),this.$el.find("#grade").val(this.klass.getString("grade")),this.$el.find("#stream").val(this.klass.getString("stream"))},s.prototype.basicInfoSave=function(){var t,e;return t=this.$el.find("#start_date").val().split("/"),e=new Date,e.setFullYear(parseInt(t[0])),e.setMonth(parseInt(t[1])-1),e.setDate(parseInt(t[2])),this.klass.save({schoolName:this.$el.find("#school_name").val(),year:this.$el.find("#year").val(),grade:this.$el.find("#grade").val(),stream:this.$el.find("#stream").val(),startDate:e.getTime()},{success:function(t){return function(){return t.render()}}(this),error:function(t){return function(){return Utils.midAlert("Save error<br>Please try again.")}}(this)})},s.prototype.back=function(){return window.history.back()},s.prototype.initialize=function(t){return this.klass=t.klass,this.students=t.students,this.allStudents=t.allStudents,this.teachers=t.teachers,this.students.on("add remove change",this.renderStudents),this.views=[]},s.prototype.closeViews=function(){var t,e,s,n;for(s=this.views,t=0,e=s.length;t<e;t++)n=s[t],n.close();return this.views=[]},s.prototype.onSubviewRendered=function(){return this.trigger("subRendered")},s.prototype.renderStudents=function(){var t,e,s,n,a,i;for(t=$("<ul>").addClass("student_list"),this.closeViews(),n=this.students.models,e=0,s=n.length;e<s;e++)a=n[e],i=new StudentListElementView({student:a,students:this.students}),this.views.push(i),i.on("rendered",this.onSubviewRendered),i.render(),i.on("change",this.renderStudents),t.append(i.el);return this.$el.find("#student_list_wrapper").html(t)},s.prototype.render=function(){var e,s,n,a,i,r,d,l,o;return a=this.klass.getString("schoolName"),o=this.klass.getString("year"),e=this.klass.getString("grade"),r=this.klass.getString("stream"),i=new Date(this.klass.getNumber("startDate")),l="admin"===this.klass.get("teacherId")?"admin":this.teachers.get(this.klass.get("teacherId"))&&this.teachers.get(this.klass.get("teacherId")).has("name")?this.teachers.get(this.klass.get("teacherId")).get("name"):"unknown",Tangerine.user.isAdmin()&&(s="<tr><td><label>Teacher</label></td><td>"+l+"</td></tr>"),Tangerine.user.isAdmin()&&(n="<label>Teacher</label><br> <select id='teacher_select'> "+function(){var t,e,s,n;for(s=this.teachers.models,n=[],t=0,e=s.length;t<e;t++)d=s[t],n.push("<option "+(d.id===this.klass.get("teacherId")?"selected='selected' ":"")+" data-teacherId='"+d.id+"'>"+d.get("name")+"</option>");return n}.call(this)+" </select>"),this.$el.html("<button class='back navigation'>"+t("back")+"</button> <h1>"+t("class editor")+"</h1> <h2>"+t("basic info")+"</h2> <table class='info_box basic_info'> <tr><td><label>School name</label></td><td>"+a+"</td></tr> "+(s||"")+" <tr><td><label>School year</label></td><td>"+o+"</td></tr> <tr><td><label>"+t("grade")+"</label></td><td>"+e+"</td></tr> <tr><td><label>"+t("stream")+"</label></td><td>"+r+"</td></tr> <tr><td><label>"+t("starting date")+"</label></td><td>"+(i.getFullYear()+"/"+(i.getMonth()+1)+"/"+i.getDate())+"</td></tr> <tr><td colspan='2'><button class='basic_info_edit command'>"+t("edit")+"</button></td></tr> </table> <div class='basic_info confirmation'> <div class='menu_box'> <div class='label_value'> <label for='school_name'>School name</label> <input id='school_name' value='"+a+"'> </div> <div class='label_value'> "+(n||"")+" </div> <div class='label_value'> <label for='year'>School year</label> <input id='year' value='"+o+"'> </div> <div class='label_value'> <label for='grade'>"+t("grade")+"</label> <input id='grade' value='"+e+"'> </div> <div class='label_value'> <label for='stream'>"+t("stream")+"</label> <input id='stream' value='"+r+"'> </div> <div class='label_value'> <label for='start_date'>"+t("starting date")+"</label> <input id='start_date' value='"+(i.getFullYear()+"/"+(i.getMonth()+1)+"/"+i.getDate())+"'> </div> <button class='save command'>"+t("save")+"</button> <button class='basic_info_cancel command'>"+t("cancel")+"</button> </div> </div> <h2>"+t("students").capitalize()+"</h2> <div id='student_list_wrapper'></div> <!-- add student feature --> <!--button class='add_student command'>Add student</button> <div class='add_student_form menu_box confirmation'> <div class='label_value'> <label for='add_student_select'>"+t("add student")+"</label><br> <select id='add_student_select'> </select> </div> <button class='add_student_add command'>"+t("add")+"</button><button class='add_student_cancel command'>"+t("cancel")+"</button> </div--> <button class='register_student command'>"+$.t("register student")+"</button> <div class='register_student_form menu_box confirmation'> <h2>"+t("register student")+"</h2> <div class='label_value'> <label for='register_student_name'>Full name</label> <input id='register_student_name' value=''> </div> <div class='label_value'> <label for='register_student_gender'>"+t("gender")+"</label> <input id='register_student_gender' value=''> </div> <div class='label_value'> <label for='register_student_age'>"+t("age")+"</label> <input id='register_student_age' value=''> </div> <button class='register_student_save command'>"+t("save")+"</button> <button class='register_student_cancel command'>"+t("cancel")+"</button> </div>"),this.trigger("rendered"),this.renderStudents()},s}(Backbone.View);


var Klasses,extend=function(t,o){function r(){this.constructor=t}for(var e in o)hasProp.call(o,e)&&(t[e]=o[e]);return r.prototype=o.prototype,t.prototype=new r,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;Klasses=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.model=Klass,o.prototype.url="klass",o}(Backbone.Collection);


var KlassesView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function s(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;KlassesView=function(e){function s(){return this.render=bind(this.render,this),this.onSubviewRendered=bind(this.onSubviewRendered,this),this.updatePullResult=bind(this.updatePullResult,this),this.updatePull=bind(this.updatePull,this),this.updateUploader=bind(this.updateUploader,this),s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="KlassesView",s.prototype.events={"click .klass_add":"toggleAddForm","click .klass_cancel":"toggleAddForm","click .klass_save":"saveNewKlass","click .klass_curricula":"gotoCurricula","click .goto_class":"gotoKlass","click .pull_data":"pullData","click .verify":"ghostLogin","click .upload_data":"uploadData"},s.prototype.initialize=function(t){var e;if(this.ipBlock=32,this.totalIps=256,this.tabletOffset=0,this.views=[],this.klasses=t.klasses,this.curricula=t.curricula,this.teachers=t.teachers,this.klasses.on("add remove change",this.render),Tangerine.user.isAdmin())return this.timer=setTimeout(function(t){return function(){return t.updateUploader(!1)}}(this),2e4),e=$.ajax({url:Tangerine.settings.urlView("group","byDKey"),dataType:"jsonp",data:{keys:["testtest"]},timeout:5e3,success:function(t){return function(){return clearTimeout(t.timer),t.updateUploader(!0)}}(this)})},s.prototype.ghostLogin=function(){return Tangerine.user.ghostLogin(Tangerine.settings.upUser,Tangerine.settings.upPass)},s.prototype.uploadData=function(){return $.ajax({url:"/"+Tangerine.db_name+"/_design/tangerine/_view/byCollection?include_docs=false",type:"POST",dataType:"json",contentType:"application/json;charset=utf-8",data:JSON.stringify({include_docs:!1,keys:["result","klass","student","teacher","logs","user"]}),success:function(t){return function(t){var e;return e=_.pluck(t.rows,"id"),$.couch.replicate(Tangerine.settings.urlDB("local"),Tangerine.settings.urlDB("group"),{success:function(){return Utils.midAlert("Sync successful")},error:function(t,e){return Utils.midAlert("Sync error<br>"+t+" "+e)}},{doc_ids:e})}}(this)})},s.prototype.updateUploader=function(t){var e;return e=t===!0?"<button class='upload_data command'>Upload</button>":t===!1?"<div class='menu_box'><small>No connection</small><br><button class='command verify'>Verify connection</button></div>":"<button class='command' disabled='disabled'>Verifying connection...</button>",this.$el.find(".uploader").html(e)},s.prototype.pullData=function(){return 0===this.tabletOffset&&(this.tablets={checked:0,complete:0,successful:0,okCount:0,ips:[],result:0},Utils.midAlert("Please wait, detecting tablets.")),Utils.working(!0),this.randomIdDoc=hex_sha1(""+Math.random()),Tangerine.$db.saveDoc({_id:this.randomIdDoc},{success:function(t){return function(e){var s,r,i,n,a;for(t.randomDoc=e,a=[],r=s=i=t.tabletOffset,n=t.ipBlock-1+t.tabletOffset;i<=n?s<=n:s>=n;r=i<=n?++s:--s)a.push(function(e){var s,r;return s=Tangerine.settings.subnetIP(e),r=$.ajax({url:Tangerine.settings.urlSubnet(s),dataType:"jsonp",contentType:"application/json;charset=utf-8",timeout:1e4}),r.complete(function(e,r){return t.tablets.checked++,200===parseInt(e.status)&&(t.tablets.okCount++,t.tablets.ips.push(s)),t.updatePull()})}(r));return a}}(this),error:function(){return Utils.working(!1),Utils.midAlert("Internal database error")}})},s.prototype.updatePull=function(){var t,e,s,r,i;if(!(this.tablets.checked<this.ipBlock+this.tabletOffset)){if(this.tabletOffset!==this.totalIps-this.ipBlock)return this.tabletOffset+=this.ipBlock,this.pullData();if(this.tablets.okCount=Math.max(this.tablets.okCount-1,0),0===this.tablets.okCount)return this.tabletOffset=0,Utils.working(!1),Utils.midAlert(this.tablets.okCount+" tablets found."),void Tangerine.$db.removeDoc({_id:this.randomDoc.id,_rev:this.randomDoc.rev});if(!confirm(this.tablets.okCount+" tablets found.\n\nStart data pull?"))return this.tabletOffset=0,Utils.working(!1),void Tangerine.$db.removeDoc({_id:this.randomDoc.id,_rev:this.randomDoc.rev});for(Utils.midAlert("Pulling from "+this.tablets.okCount+" tablets."),r=this.tablets.ips,i=[],t=0,s=r.length;t<s;t++)e=r[t],i.push(function(t){return function(e){var s;return s=$.ajax({url:Tangerine.settings.urlSubnet(e)+"/"+t.randomIdDoc,dataType:"jsonp",timeout:1e4,contentType:"application/json;charset=utf-8"}),s.success(function(t,e,s){}),s.complete(function(s,r){return function(s){var r;if(200!==parseInt(s.status))return r=$.ajax({url:Tangerine.settings.urlSubnet(e)+"/_design/tangerine/_view/byCollection",dataType:"jsonp",contentType:"application/json;charset=utf-8",data:{include_docs:!1,keys:JSON.stringify(["result","klass","student","curriculum","teacher","logs"])}}),r.success(function(s){var r,i;return i=function(){var t,e,i,n;for(i=s.rows,n=[],t=0,e=i.length;t<e;t++)r=i[t],n.push(r.id);return n}(),$.couch.replicate(Tangerine.settings.urlSubnet(e),Tangerine.settings.urlDB("local"),{success:function(){return t.tablets.complete++,t.tablets.successful++,t.updatePullResult()},error:function(e,s){return t.tablets.complete++,t.updatePullResult()}},{doc_ids:i})})}(s)})}}(this)(e));return i}},s.prototype.updatePullResult=function(){if(this.tablets.complete===this.tablets.okCount)return Utils.working(!1),Utils.midAlert("Pull finished.<br>"+this.tablets.successful+" out of "+this.tablets.okCount+" successful.",5e3),Tangerine.$db.removeDoc({_id:this.randomDoc.id,_rev:this.randomDoc.rev}),this.klasses.fetch({success:function(t){return function(){return t.renderKlasses()}}(this)})},s.prototype.gotoCurricula=function(){return Tangerine.router.navigate("curricula",!0)},s.prototype.saveNewKlass=function(){var t,e,s,r,i,n,a,o,l,u,c;for(o=$.trim(this.$el.find("#school_name").val()),c=$.trim(this.$el.find("#year").val()),s=$.trim(this.$el.find("#grade").val()),l=$.trim(this.$el.find("#stream").val()),t=this.$el.find("#curriculum option:selected").attr("data-id"),e=[],""===o&&e.push(" - No school name."),""===c&&e.push(" - No year."),""===s&&e.push(" - No grade."),""===l&&e.push(" - No stream."),"_none"===t&&e.push(" - No curriculum selected."),a=this.klasses.models,r=0,n=a.length;r<n;r++)i=a[r],i.get("year")===c&&i.get("grade")===s&&i.get("stream")===l&&e.push(" - Duplicate year, grade, stream.");return 0===e.length?(u=Tangerine.user.has("teacherId")?Tangerine.user.get("teacherId"):"admin",i=new Klass,i.save({teacherId:u,schoolName:o,year:c,grade:s,stream:l,curriculumId:this.$el.find("#curriculum option:selected").attr("data-id"),startDate:(new Date).getTime()},{success:function(t){return function(){return t.klasses.add(i)}}(this)})):alert("Please correct the following errors:\n\n"+e.join("\n"))},s.prototype.gotoKlass=function(t){return Tangerine.router.navigate("class/edit/"+$(t.target).attr("data-id"))},s.prototype.toggleAddForm=function(){var t;if(this.$el.find("#add_form, .add").toggle(),Tangerine.user.isAdmin()?this.$el.find("#school_name").focus():(t=this.teachers.get(Tangerine.user.get("teacherId")).get("school"),this.$el.find("#school_name").val(t),this.$el.find("#year").focus()),this.$el.find("#add_form").is(":visible"))return this.$el.find("#add_form").scrollTo()},s.prototype.renderKlasses=function(){var t,e,s,r,i,n;for(this.closeViews(),t=$("<ul>").addClass("klass_list"),i=this.klasses.models,e=0,r=i.length;e<r;e++)s=i[e],n=new KlassListElementView({klass:s,curricula:this.curricula}),n.on("rendered",this.onSubviewRendered),n.render(),this.views.push(n),t.append(n.el);return this.$el.find("#klass_list_wrapper").empty(),this.$el.find("#klass_list_wrapper").append(t)},s.prototype.onSubviewRendered=function(){return this.trigger("subRendered")},s.prototype.render=function(){var e,s,r,i,n;for(s="<option data-id='_none' disabled='disabled' selected='selected'>"+t("select a curriculum")+"</option>",n=this.curricula.models,r=0,i=n.length;r<i;r++)e=n[r],s+="<option data-id='"+e.id+"'>"+e.get("name")+"</option>";return this.$el.html((adminPanel||"")+" <h1>"+t("classes")+"</h1> <div id='klass_list_wrapper'></div> <button class='klass_add command'>"+t("add")+"</button> <div id='add_form' class='confirmation'> <div class='menu_box'> <div class='label_value'> <label for='school_name'>School name</label> <input id='school_name'> </div> <div class='label_value'> <label for='year'>School year</label> <input id='year'> </div> <div class='label_value'> <label for='grade'>"+t("grade")+"</label> <input id='grade'> </div> <div class='label_value'> <label for='stream'>"+t("stream")+"</label> <input id='stream'> </div> <div class='label_value'> <label for='curriculum'>"+t("curriculum")+"</label><br> <select id='curriculum'>"+s+"</select> </div> <button class='command klass_save'>"+t("save")+"</button><button class='command klass_cancel'>"+t("cancel")+"</button> </div> </div> "+(curriculaButton||"")),Tangerine.user.isAdmin()&&this.updateUploader(),this.renderKlasses(),this.trigger("rendered")},s.prototype.closeViews=function(){var t,e,s,r;for(s=null!=this.views,t=0,e=s.length;t<e;t++)r=s[t],r.close();return this.views=[]},s.prototype.onClose=function(){return this.closeViews()},s}(Backbone.View);


var KlassListElementView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function r(){this.constructor=e}for(var s in t)hasProp.call(t,s)&&(e[s]=t[s]);return r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;KlassListElementView=function(e){function r(){return this.render=bind(this.render,this),r.__super__.constructor.apply(this,arguments)}return extend(r,e),r.prototype.className="KlassListElementView",r.prototype.tagName="li",r.prototype.events={"click .klass_run":"run","click .klass_results":"showReportSelect","change #report":"getReportMenu","click .cancel_report":"cancelReport","click .klass_edit":"edit","click .klass_delete":"toggleDelete","click .klass_delete_cancel":"toggleDelete","click .klass_delete_delete":"delete"},r.prototype.initialize=function(e){return this.klass=e.klass,this.availableReports=Tangerine.config.get("reports"),e.klass.has("curriculumId")?(this.curriculum=new Curriculum({_id:e.klass.get("curriculumId")}),this.curriculum.fetch({success:this.render})):this.curriculum=new Curriculum},r.prototype.edit=function(){return Tangerine.router.navigate("class/edit/"+this.klass.id,!0)},r.prototype.getReportMenu=function(e){var t;return null!=(t=this.subMenuView)&&t.close(),this.subMenuView=new(window[$(e.target).find(":selected").attr("data-menu_view")])({parent:this}),this.$el.find("#report_menu_container").append("<div class='report_menu'></div>"),this.subMenuView.setElement(this.$el.find("#report_menu_container .report_menu")),this.subMenuView.render()},r.prototype.showReportSelect=function(){return this.$el.find(".report_select_container").removeClass("confirmation")},r.prototype.cancelReport=function(){var e;return this.$el.find("div#report_menu").empty(),this.$el.find("#report :nth-child(1)").attr("selected","selected"),this.$el.find(".report_select_container").addClass("confirmation"),null!=(e=this.subMenuView)?e.close():void 0},r.prototype.onClose=function(){var e;return null!=(e=this.subMenuView)?e.close():void 0},r.prototype.run=function(){return Tangerine.router.navigate("class/"+this.klass.id,!0)},r.prototype.toggleDelete=function(){return this.$el.find(".klass_delete_confirm").toggle()},r.prototype["delete"]=function(){return this.klass.collection.get(this.klass).destroy()},r.prototype.render=function(){var e,r,s,n,i,o,l,c;for("admin"===klass.get("teacherId")?c="admin":(l=vm.currentView.teachers.get(klass.get("teacherId")),c=(null!=l?l.getEscapedString("name"):void 0)||""),Tangerine.user.isAdmin()&&(e="<tr><th>Teacher</th><td>"+c+"</td></tr>"),n="",i=this.availableReports,r=0,s=i.length;r<s;r++)o=i[r],null!=o.context&&"server"!==o.context||(n+="<option data-menu_view='"+o.menuView+"'>"+t(o.name)+"</option>");return this.$el.html("<table> "+(e||"")+" <tr><th>School name</th><td>"+this.klass.getEscapedString("schoolName")+"</td></tr> <tr><th>School year</th><td>"+this.klass.getString("year")+"</td></tr> <tr><th>"+t("grade")+"</th><td>"+this.klass.getString("grade")+"</td></tr> <tr><th>"+t("stream")+"</th><td>"+this.klass.getString("stream")+"</td></tr> <tr><th>"+t("curriculum")+"</th><td>"+this.curriculum.getEscapedString("name")+"</td></tr> </table> <img src='images/icon_run.png'     class='icon klass_run'> <img src='images/icon_results.png' class='icon klass_results'> <img src='images/icon_edit.png'    class='icon klass_edit'> <img src='images/icon_delete.png'  class='icon klass_delete'> <div class='report_select_container confirmation'> <div class='menu_box'> <select id='report'> <option selected='selected' disabled='disabled'>"+t("select report type")+"</option> "+n+" </select> </div> <div id='report_menu_container'></div> <button class='command cancel_report'>"+t("cancel")+"</button> </div> <div class='klass_delete_confirm confirmation'> <div class='menu_box'> "+t("confirm")+"<br> <button class='klass_delete_delete command_red'>"+t("delete")+"</button> <button class='klass_delete_cancel command'>"+t("cancel")+"</button> </div> </div>"),this.trigger("rendered")},r}(Backbone.View);


var KlassSubtestRunView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function s(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;KlassSubtestRunView=function(t){function e(){return this.onPrototypeRendered=bind(this.onPrototypeRendered,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="KlassSubtestRunView",e.prototype.events={"click .done":"done","click .cancel":"cancel","click .subtest_help":"toggleHelp"},e.prototype.toggleHelp=function(){return this.$el.find(".enumerator_help").fadeToggle(250)},e.prototype.initialize=function(t){return this.linkedResult=t.linkedResult,this.student=t.student,this.subtest=t.subtest,this.questions=t.questions,this.prototype=this.subtest.get("prototype"),this.protoViews=Tangerine.config.get("prototypeViews"),this.prototypeRendered=!1,"grid"===this.prototype?this.result=new KlassResult({prototype:"grid",startTime:(new Date).getTime(),itemType:this.subtest.get("itemType"),reportType:this.subtest.get("reportType"),studentId:this.student.id,subtestId:this.subtest.id,part:this.subtest.get("part"),klassId:this.student.get("klassId"),timeAllowed:this.subtest.get("timer")}):"survey"===this.prototype?(this.result=new KlassResult({prototype:"survey",startTime:(new Date).getTime(),studentId:this.student.id,subtestId:this.subtest.id,part:this.subtest.get("part"),klassId:this.student.get("klassId"),itemType:this.subtest.get("itemType"),reportType:this.subtest.get("reportType")}),this.questions.sort(),this.render()):void 0},e.prototype.render=function(){var t,e;return t=""!==(this.subtest.get("enumeratorHelp")||"")?"<button class='subtest_help command'>help</button><div class='enumerator_help'>"+this.subtest.get("enumeratorHelp")+"</div>":"",e=""!==(this.subtest.get("studentDialog")||"")?"<div class='student_dialog'>"+this.subtest.get("studentDialog")+"</div>":"",this.$el.html("<h2>"+this.subtest.get("name")+"</h2> "+t+" "+e),this.prototypeView=new(window[this.protoViews[this.subtest.get("prototype")].run])({model:this.subtest,parent:this}),this.prototypeView.on("rendered",this.onPrototypeRendered),this.prototypeView.render(),this.$el.append(this.prototypeView.el),this.prototypeRendered=!0,this.$el.append("<button class='done navigation'>Done</button> <button class='cancel navigation'>Cancel</button>"),this.trigger("rendered")},e.prototype.onPrototypeRendered=function(){return this.trigger("rendered")},e.prototype.getGridScore=function(){var t;return null!=this.linkedResult.get("subtestData")&&(t=this.linkedResult.get("subtestData").attempted||0)},e.prototype.gridWasAutostopped=function(){var t;return(null!=(t=this.linkedResult.get("subtestData"))?t.auto_stop:void 0)||0},e.prototype.onClose=function(){var t;return null!=(t=this.prototypeView)&&"function"==typeof t.close?t.close():void 0},e.prototype.isValid=function(){return!!this.prototypeRendered&&(null!=this.prototypeView.isValid&&this.prototypeView.isValid())},e.prototype.getSkipped=function(){if(null!=this.prototypeView.getSkipped)return this.prototypeView.getSkipped();throw"Prototype skipping not implemented"},e.prototype.cancel=function(){return"test"===this.student.id?void history.back():Tangerine.router.navigate("class/"+this.student.get("klassId")+"/"+this.subtest.get("part"),!0)},e.prototype.done=function(){return"test"===this.student.id?void history.back():this.isValid()?Tangerine.$db.view(Tangerine.design_doc+"/resultsByStudentSubtest",{key:[this.student.id,this.subtest.id],success:function(t){return function(e){var s,i,o,n;for(n=e.rows,i=0,o=n.length;i<o;i++)s=n[i],Tangerine.$db.saveDoc($.extend(s.value,{old:!0}));return t.result.add(t.prototypeView.getResult(),function(){return Tangerine.router.navigate("class/"+t.student.get("klassId")+"/"+t.subtest.get("part"),!0)})}}(this)}):this.prototypeView.showErrors()},e}(Backbone.View);


var KlassSubtestResultView,extend=function(t,e){function s(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;KlassSubtestResultView=function(e){function s(){return s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="KlassSubtestResultView",s.prototype.events={"click .run":"checkRun","click .back":"back","click .show_itemized":"showItemized"},s.prototype.initialize=function(t){return this.allResults=t.allResults,this.results=t.results,this.result=this.results[0],this.previous=t.previous,this.subtest=t.subtest,this.student=t.student},s.prototype.gotoRun=function(){return Tangerine.router.navigate("class/run/"+this.options.student.id+"/"+this.options.subtest.id,!0)},s.prototype.checkRun=function(){var t,e,s,r;return(e=this.subtest.has("gridLinkId")&&""!==this.subtest.get("gridLinkId"))?(t=this.subtest.get("gridLinkId"),s=this.allResults.where({subtestId:t,studentId:this.student.id}),0===s.length?(r=new Subtest({_id:t}),void r.fetch({success:function(t){return function(){return Utils.midAlert("Please complete<br><b>"+r.escape("name")+"</b><br>for<br><b>"+t.student.escape("name")+"</b><br>before this test.",5e3)}}(this)})):this.gotoRun()):void this.gotoRun()},s.prototype.showItemized=function(){return this.$el.find(".itemized").fadeToggle()},s.prototype.back=function(){return Tangerine.router.navigate("class/"+this.options.student.get("klassId")+"/"+this.options.subtest.get("part"),!0)},s.prototype.render=function(){var e,s,r,i,n,u,o,l,a,d,h,b,c;if(null!=this.result){if(this.results=this.results[0],a="<button class='command show_itemized'>"+t("itemized results")+"</button><table class='itemized confirmation'><tbody><tr><th>Item</th><th>Result</th></tr>","grid"===this.subtest.get("prototype"))for(o=this.result.get("subtestData").items,r=i=0,u=o.length;i<u;r=++i)s=o[r],a+="<tr><td>"+s.itemLabel+"</td><td>"+t(s.itemResult)+"</td></tr>";else if("survey"===this.subtest.get("prototype")){l=this.result.get("subtestData");for(n in l)c=l[n],a+="<tr><td>"+n+"</td><td>"+t(c)+"</td></tr>"}a+="</tbody></table><br>",b=new Date(this.result.get("startTime")),this.previous>0&&(h="<tr> <td><label>Taken last</label></td><td>"+b.getFullYear()+"/"+(b.getMonth()+1)+"/"+b.getDate()+"</td> </tr> <tr> <td><label>Previous attempts</label></td><td>"+this.previous+"</td> </tr>")}return null!=this.result&&"progress"===("function"==typeof(e=this.result).get?e.get("reportType"):void 0)||(d="<div class='menu_box'> <img src='images/icon_run.png' class='run clickable'> </div><br>"),this.$el.html("<h1>Result</h1> <table><tbody> <tr> <td><label>Assessment</label></td> <td>"+this.subtest.get("part")+"</td> </tr> <tr> <td><label>Student</label></td> <td>"+this.student.escape("name")+"</td> </tr> <tr> <td><label>Subtest</label></td> <td>"+this.subtest.escape("name")+"</td> </tr> "+(h||"")+" </tbody></table> "+(a||"")+" "+(d||"")+" <button class='navigation back'>Back</button>"),this.trigger("rendered")},s}(Backbone.View);


var KlassMenuView,extend=function(t,o){function e(){this.constructor=t}for(var n in o)hasProp.call(o,n)&&(t[n]=o[n]);return e.prototype=o.prototype,t.prototype=new e,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;KlassMenuView=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.className="KlassMenuView",o.prototype.events={"click .registration":"gotoKlasses"},o.prototype.gotoKlasses=function(){return Tangerine.router.navigate("class",!0)},o.prototype.initialize=function(t){},o.prototype.render=function(){return this.$el.html("<h1>Tangerine Class</h1> <button class='collect command'>Collect</button> <button class='manage command'>Manage</button> <button class='reports command'>Reports</button> <button class='advice command'>Advice</button> <button class='registration command'>Class Registration</button>"),this.trigger("rendered")},o}(Backbone.View);


var KlassPartlyView,extend=function(t,e){function r(){this.constructor=t}for(var s in e)hasProp.call(e,s)&&(t[s]=e[s]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;KlassPartlyView=function(e){function r(){return r.__super__.constructor.apply(this,arguments)}return extend(r,e),r.prototype.className="KlassPartlyView",r.prototype.events={"click .next_part":"nextPart","click .prev_part":"prevPart","click .back":"back","click .student_subtest":"gotoStudentSubtest","keyup #current_part":"gotoAssessment","keyup #search_student_name":"filterStudents","focus #search_student_name":"scrollToName"},r.prototype.scrollToName=function(){return this.$el.find("#search_student_name").scrollTo()},r.prototype.filterStudents=function(){var t;return t=this.$el.find("#search_student_name").val(),this.search=t,this.updateGridPage()},r.prototype.gotoAssessment=function(){var t;if(t=this.$el.find("#current_part").val(),""!==t)return this.currentPart=parseInt(t),this.updateGridPage()},r.prototype.update=function(){return this.render(),Tangerine.router.navigate("class/"+this.klass.id+"/"+this.currentPart)},r.prototype.back=function(){return Tangerine.router.navigate("class",!0)},r.prototype.gotoStudentSubtest=function(t){var e,r;return e=$(t.target).attr("data-studentId"),r=$(t.target).attr("data-subtestId"),Tangerine.router.navigate("class/result/student/subtest/"+e+"/"+r,!0)},r.prototype.nextPart=function(){if(this.currentPart<this.lastPart)return this.currentPart++,this.update()},r.prototype.prevPart=function(){if(this.currentPart>1)return this.currentPart--,this.update()},r.prototype.initialize=function(t){return this.klass=t.klass,this.students=t.students,this.results=t.results,this.search="",this.currentPart=t.part||1,this.subtestsByPart=[],this.subtestsByPart=t.subtests.indexBy("part"),this.lastPart=Math.max.apply(this,_.compact(t.subtests.pluck("part")))||1},r.prototype.updateGridPage=function(){return this.$el.find("#grid_container").html(this.getGridPage())},r.prototype.getGridPage=function(){var t,e,r,s,n,a,i,u,o,d,c,p,h,l,g,b,f,y,m,P,v,k,w,I,x,T,N,$,G,S,B;if(G=[],$=this.subtestsByPart[this.currentPart],null==$)return"No subtests for this assessment.";for(v=this.students.models,n=u=0,o=v.length;u<o;n=++u)for(x=v[n],G[n]=[],k=new KlassResults(this.results.where({studentId:x.id})),a=l=0,d=$.length;l<d;a=++l)if(N=$[a],T=k.where({subtestId:N.id}),S=0!==T.length,~x.get("name").toLowerCase().indexOf(this.search.toLowerCase())||""===this.search){for(i=g=6;g>=0;i=--g)y=this.currentPart-i,I=k.where({part:y,itemType:N.get("itemType")}),I.length&&(P=i);t=P<=2?"":P<=4?"rgb(229, 208, 149)":"rgb(222, 156, 117)",G[n].push({content:S?"&#x2714;":"?",taken:S,studentId:x.id,studentName:x.get("name"),subtestId:N.id,background:t})}for(s="<table class='info_box_wide'><tbody><tr><th></th>",b=0,c=$.length;b<c;b++)N=$[b],s+="<th><div class='part_subtest_report' data-id='"+N.id+"'>"+N.get("name")+"</div></th>";for(s+="</tr>",f=0,p=G.length;f<p;f++)if(w=G[f],null!=w&&w.length){for(s+="<tr><td><div class='student' data-studentId='"+w[0].studentId+"'>"+w[0].studentName+"</div></td>",r=m=0,h=w.length;m<h;r=++m)e=w[r],B=e.taken?" subtest_taken":"",s+="<td><div class='student_subtest command "+B+"' data-taken='"+e.taken+"' data-studentId='"+e.studentId+"' data-subtestId='"+e.subtestId+"' style='background-color:"+e.background+" !important;'>"+e.content+"</div></td>";s+="</tr>"}return s+="</tbody></table>",0===_.flatten(G).length&&(s="<p class='grey'>No students found.</p>"),s},r.prototype.render=function(){var e;return e=this.getGridPage(),this.$el.html("<h1>"+t("assessment status")+"</h1> <input id='search_student_name' style='width: 92% !important' placeholder='"+t("search student name")+"' type='text'> <div id='grid_container'>"+e+"</div><br> <h2>"+t("current assessment")+" </h2> <button class='prev_part command'>&lt;</button> <input type='number' value='"+this.currentPart+"' id='current_part'> <button class='next_part command'>&gt;</button><br><br> <button class='back navigation'>"+t("back")+"</button>"),this.trigger("rendered")},r}(Backbone.View);


var KlassResult,extend=function(t,e){function r(){this.constructor=t}for(var s in e)hasProp.call(e,s)&&(t[s]=e[s]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;KlassResult=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.url="result",e.prototype.add=function(t,e){return this.save({subtestData:t},{success:function(t){return function(){return e()}}(this)})},e.prototype.getItemized=function(t){var e,r,s,i;if("grid"===this.attributes.prototype)e=this.attributes.subtestData.items;else if("survey"===this.attributes.prototype){e=[],s=this.attributes.subtestData;for(r in s)i=s[r],e.push({itemLabel:r,itemResult:i})}return e},e.prototype.get=function(t){if("correct"===t)return this.gridCount(["correct",1]);if("incorrect"===t)return this.gridCount(["incorrect",0]);if("missing"===t)return this.gridCount(["missing",9]);if("total"===t){if("grid"===this.attributes.prototype)return this.attributes.subtestData.items.length;if("survey"===this.attributes.prototype)return _.keys(this.attributes.subtestData).length}return"attempted"===t?this.getAttempted():"time_remain"===t?this.getTimeRemain():e.__super__.get.call(this,t)},e.prototype.gridCount=function(t){var e,r,s,i,n,o,u,a,p,h,c,f;if(e=0,"grid"===this.attributes.prototype)if(_.isArray(t))for(a=this.get("subtestData").items,r=0,o=a.length;r<o;r++)s=a[r],~t.indexOf(s.itemResult)&&e++;else for(p=this.get("subtestData").items,i=0,u=p.length;i<u;i++)s=p[i],s.itemResult===t&&e++;else if("survey"===this.attributes.prototype)if(_.isArray(t)){h=this.attributes.subtestData;for(n in h)f=h[n],(~t.indexOf(f)||~t.indexOf(parseInt(f)))&&e++}else{c=this.attributes.subtestData;for(n in c)f=c[n],t!==f&&t!==parseInt(f)||e++}return e},e.prototype.getAttempted=function(){return parseInt(this.get("subtestData").attempted)},e.prototype.getTimeRemain=function(){return parseInt(this.get("subtestData").time_remain)},e.prototype.getCorrectPerSeconds=function(t){return Math.round(this.get("correct")/(t-this.getTimeRemain())*t)},e}(Backbone.Model);


var KlassResults,extend=function(t,o){function r(){this.constructor=t}for(var n in o)hasProp.call(o,n)&&(t[n]=o[n]);return r.prototype=o.prototype,t.prototype=new r,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;KlassResults=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.url="result",o.prototype.model=KlassResult,o.prototype.initialize=function(t){if(null==t&&(t={}),null==t.showOld||t.showOld!==!0)return this.on("all",function(t){return function(o){var r,n,e,s,l,u,p,i,a;for(a=[],l=t.models,r=0,e=l.length;r<e;r++)u=l[r],u.has("old")&&a.push(u.id);for(i=[],n=0,s=a.length;n<s;n++)p=a[n],i.push(t.remove(p,{silent:!0}));return i}}(this))},o}(Backbone.Collection);


var KlassSubtestEditView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function i(){this.constructor=e}for(var s in t)hasProp.call(t,s)&&(e[s]=t[s]);return i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;KlassSubtestEditView=function(e){function t(){return this.toggleAddQuestion=bind(this.toggleAddQuestion,this),this.renderQuestions=bind(this.renderQuestions,this),this.goBack=bind(this.goBack,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="subtest_edit",t.prototype.events={"click .back_button":"goBack","click .save_subtest":"save","blur #subtest_items":"cleanWhitespace","click .add_question":"toggleAddQuestion","click .add_question_cancel":"toggleAddQuestion","click .add_question_add":"addQuestion","keypress #question_name":"addQuestion"},t.prototype.cleanWhitespace=function(){return this.$el.find("#subtest_items").val(this.$el.find("#subtest_items").val().replace(/\s+/g," "))},t.prototype.initialize=function(e){if(this.model=e.model,this.curriculum=e.curriculum,this.prototype=this.model.get("prototype"),this.prototypeViews=Tangerine.config.get("prototypeViews"),"survey"===this.prototype)return this.questions=e.questions,this.surveyEditor=new window[this.prototypeViews[this.prototype].edit]({model:this.model,parent:this}),this.questions.ensureOrder(),this.questionsEditView=new QuestionsEditView({questions:this.questions}),this.questionsEditView.on("question-edit",function(e){return function(t){return e.save(null,{questionSave:!1,success:function(){return Tangerine.router.navigate("class/question/"+t,!0)}})}}(this)),this.questions.on("change",function(e){return function(){return e.renderQuestions()}}(this)),this.renderQuestions()},t.prototype.goBack=function(){return Tangerine.router.navigate("curriculum/"+this.model.get("curriculumId"),!0)},t.prototype.save=function(e,t){var i,s,n,r,o,a,l,d,u,p,c,m,h;if(null==t&&(t={}),"grid"===this.prototype)return this.model.save({name:this.$el.find("#name").val(),part:Math.max(parseInt(this.$el.find("#part").val()),1),reportType:this.$el.find("#report_type").val().toLowerCase(),itemType:this.$el.find("#item_type").val().toLowerCase(),scoreTarget:parseInt(this.$el.find("#score_target").val()),scoreSpread:parseInt(this.$el.find("#score_spread").val()),order:parseInt(this.$el.find("#order").val()),captureLastAttempted:"true"===this.$el.find("#capture_last_attempted input:checked").val(),endOfLine:"true"===this.$el.find("#end_of_line input:checked").val(),randomize:"true"===this.$el.find("#randomize input:checked").val(),timer:Math.max(parseInt(this.$el.find("#subtest_timer").val()),0),items:_.compact(this.$el.find("#subtest_items").val().split(" ")),columns:Math.max(parseInt(this.$el.find("#subtest_columns").val()),0)},{success:function(e){return function(){return Utils.midAlert("Subtest Saved")}}(this),error:function(e){return function(){return Utils.midAlert("Save error")}}(this)});if("survey"===this.prototype){for(t.questionSave=!t.questionSave||t.questionSave,d=[],r=[],h=[],c=this.questions.models,o=a=0,l=c.length;a<l;o=++a)p=c[o],"open"!==p.get("type")&&0===(null!=(m=p.get("options"))?m.length:void 0)&&(r.push(o+1),t.questionSave&&(p.save()||d.push(o),p.has("linkedGridScore")&&""!==p.get("linkedGridScore")&&0!==p.get("linkedGridScore")&&""===this.model.has("gridLinkId")&&""===this.model.get("gridLinkId")&&h.push(o)));return 0!==d.length&&Utils.midAlert("Error<br><br>Questions: <br>"+d.join(", ")+"<br>not saved"),0!==r.length&&(u=r.length>1,s=u?"Questions":"Question",i=u?"have":"has",alert("Warning\n\n"+s+" "+r.join(" ,")+" "+i+" no options.")),0!==h.length&&(u=r.length>1,s=u?"Questions":"Question",n=u?"require":"requires",alert("Warning\n\n"+s+" "+h.join(" ,")+" "+n+" a grid to be linked to this test.")),this.model.save({name:this.$el.find("#name").val(),part:Math.max(parseInt(this.$el.find("#part").val()),1),reportType:this.$el.find("#report_type").val().toLowerCase(),itemType:this.$el.find("#item_type").val().toLowerCase(),scoreTarget:parseInt(this.$el.find("#score_target").val()),scoreSpread:parseInt(this.$el.find("#score_spread").val()),order:Math.max(parseInt(this.$el.find("#order").val()),0),gridLinkId:this.$el.find("#link_select option:selected").val(),autostopLimit:parseInt(this.$el.find("#autostop_limit").val())||0},{success:function(e){return function(){return t.success?t.success():(Utils.midAlert("Subtest Saved"),setTimeout(e.goBack,1e3))}}(this),error:function(){return null!=t.error?t.error():Utils.midAlert("Save error")}})}},t.prototype.renderQuestions=function(){var e,t;return this.$el.find("#question_list_wrapper").empty(),null!=(e=this.questionsEditView)&&e.render(),this.$el.find("#question_list_wrapper").append(null!=(t=this.questionsEditView)?t.el:void 0)},t.prototype.toggleAddQuestion=function(){return this.$el.find("#add_question_form, .add_question").fadeToggle(250,function(e){return function(){if(e.$el.find("#add_question_form").is(":visible"))return e.$el.find("#question_prompt").focus()}}(this)),!1},t.prototype.addQuestion=function(e){var t,i;return"click"!==e.type&&13!==e.which||(t=$.extend(Tangerine.templates.get("questionTemplate"),{subtestId:this.model.id,curriculumId:this.curriculum.id,id:Utils.guid(),order:this.questions.length,prompt:this.$el.find("#question_prompt").val(),name:this.$el.find("#question_name").val().safetyDance()}),i=this.questions.create(t),this.$el.find("#add_question_form input").val(""),this.$el.find("#question_prompt").focus(),!1)},t.prototype.render=function(){var e,t,i,s,n,r,o,a,l,d,u,p,c,m,h,v,b;return s=this.curriculum.escape("name"),l=this.model.escape("name"),u=this.model.getNumber("part"),m=this.model.escape("reportType"),o=this.model.escape("itemType"),v=this.model.getNumber("scoreTarget"),h=this.model.getNumber("scoreSpread"),d=this.model.getNumber("order"),"grid"===this.prototype?(n=!this.model.has("endOfLine")||this.model.get("endOfLine"),c=!!this.model.has("randomize")&&this.model.get("randomize"),t=!this.model.has("captureLastAttempted")||this.model.get("captureLastAttempted"),a=this.model.get("items").join(" "),b=this.model.get("timer")||0,i=this.model.get("columns")||0,p="<div class='label_value'> <label for='subtest_items' title='These items are space delimited. Pasting text from other applications may insert tabs and new lines. Whitespace will be automatically corrected.'>Grid Items</label> <textarea id='subtest_items'>"+a+"</textarea> </div> <label>Randomize items</label><br> <div class='menu_box'> <div id='randomize' class='buttonset'> <label for='randomize_true'>Yes</label><input name='randomize' type='radio' value='true' id='randomize_true' "+(c?"checked":void 0)+"> <label for='randomize_false'>No</label><input name='randomize' type='radio' value='false' id='randomize_false' "+(c?void 0:"checked")+"> </div> </div><br> <label>Mark entire line button</label><br> <div class='menu_box'> <div id='end_of_line' class='buttonset'> <label for='end_of_line_true'>Yes</label><input name='end_of_line' type='radio' value='true' id='end_of_line_true' "+(n?"checked":void 0)+"> <label for='end_of_line_false'>No</label><input name='end_of_line' type='radio' value='false' id='end_of_line_false' "+(n?void 0:"checked")+"> </div> </div><br> <label>Capture last item attempted</label><br> <div class='menu_box'> <div id='capture_last_attempted' class='buttonset'> <label for='capture_last_attempted_true'>Yes</label><input name='capture_last_attempted' type='radio' value='true' id='capture_last_attempted_true' "+(t?"checked":void 0)+"> <label for='capture_last_attempted_false'>No</label><input name='capture_last_attempted' type='radio' value='false' id='capture_last_attempted_false' "+(t?void 0:"checked")+"> </div> </div><br> <div class='label_value'> <label for='subtest_columns' title='Number of columns in which to display the grid items.'>Columns</label><br> <input id='subtest_columns' value='"+i+"' type='number'> </div> <div class='label_value'> <label for='subtest_timer' title='Seconds to give the child to complete the test. Setting this value to 0 will make the test untimed.'>Timer</label><br> <input id='subtest_timer' value='"+b+"' type='number'> </div>"):"survey"===this.prototype&&(r=this.model.get("gridLinkId")||"",e=parseInt(this.model.get("autostopLimit"))||0,this.on("rendered",function(e){return function(){var t;return e.renderQuestions(),t=new Subtests,t.fetch({key:"s"+e.curriculum.id,success:function(t){var i,s,n,o,a;for(t=new Subtests(t.where({prototype:"grid"})),t.sort(),n="<div class='label_value'> <label for='link_select'>Linked to grid</label><br> <div class='menu_box'> <select id='link_select'> <option value=''>None</option>",o=t.models,i=0,s=o.length;i<s;i++)a=o[i],n+="<option value='"+a.id+"' "+(r===a.id?"selected":"")+">"+a.get("part")+" "+a.get("name")+"</option>";return n+="</select></div></div>",e.$el.find("#grid_link").html(n)}})}}(this)),p="<div class='label_value'> <label for='autostop_limit' title='The survey will discontinue after the first N questions have been answered with a &quot;0&quot; value option.'>Autostop after N incorrect</label><br> <input id='autostop_limit' type='number' value='"+e+"'> </div> <div id='grid_link'></div> <div id='questions'> <h2>Questions</h2> <div class='menu_box'> <div id='question_list_wrapper'><img class='loading' src='images/loading.gif'></div> <button class='add_question command'>Add Question</button> <div id='add_question_form' class='confirmation'> <div class='menu_box'> <h2>New Question</h2> <label for='question_prompt'>Prompt</label> <input id='question_prompt'> <label for='question_name'>Variable name</label> <input id='question_name' title='Allowed characters: A-Z, a-z, 0-9, and underscores.'><br> <button class='add_question_add command'>Add</button><button class='add_question_cancel command'>Cancel</button> </div> </div> </div> </div>"),this.$el.html("<button class='back_button navigation'>Back</button><br> <h1>Subtest Editor</h1> <table class='basic_info'> <tr> <th>Curriculum</th> <td>"+s+"</td> </tr> </table> <button class='save_subtest command'>Done</button> <div class='label_value'> <label for='name'>Name</label> <input id='name' value='"+l+"'> </div> <div class='label_value'> <label for='report_type'>Report Type</label> <input id='report_type' value='"+m+"'> </div> <div class='label_value'> <label for='item_type' title='This variable is used for reports. All results from subtests with the same Item Type will show up together. Inconsistent naming will invalidate results.  '>Item Type</label> <input id='item_type' value='"+o+"'> </div> <div class='label_value'> <label for='part'>Assessment Number</label><br> <input type='number' id='part' value='"+u+"'> </div> <div class='label_value'> <label for='score_target'>Target score</label><br> <input type='number' id='score_target' value='"+v+"'> </div> <div class='label_value'> <label for='score_spread'>Score spread</label><br> <input type='number' id='score_spread' value='"+h+"'> </div> <div class='label_value'> <label for='order'>Order</label><br> <input type='number' id='order' value='"+d+"'> </div> "+p+" <button class='save_subtest command'>Done</button>"),this.trigger("rendered")},t}(Backbone.View);


var KlassGroupingView,extend=function(t,e){function s(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;KlassGroupingView=function(e){function s(){return s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="KlassGroupingView",s.prototype.normalCurve=[0,.00399,.00798,.01197,.01595,.01994,.02392,.0279,.03188,.03586,.03983,.0438,.04776,.05172,.05567,.05962,.06356,.06749,.07142,.07535,.07926,.08317,.08706,.09095,.09483,.09871,.10257,.10642,.11026,.11409,.11791,.12172,.12552,.1293,.13307,.13683,.14058,.14431,.14803,.15173,.15542,.1591,.16276,.1664,.17003,.17364,.17724,.18082,.18439,.18793,.19146,.19497,.19847,.20194,.2054,.20884,.21226,.21566,.21904,.2224,.22575,.22907,.23237,.23565,.23891,.24215,.24537,.24857,.25175,.2549,.25804,.26115,.26424,.2673,.27035,.27337,.27637,.27935,.2823,.28524,.28814,.29103,.29389,.29673,.29955,.30234,.30511,.30785,.31057,.31327,.31594,.31859,.32121,.32381,.32639,.32894,.33147,.33398,.33646,.33891,.34134,.34375,.34614,.34849,.35083,.35314,.35543,.35769,.35993,.36214,.36433,.3665,.36864,.37076,.37286,.37493,.37698,.379,.381,.38298,.38493,.38686,.38877,.39065,.39251,.39435,.39617,.39796,.39973,.40147,.4032,.4049,.40658,.40824,.40988,.41149,.41308,.41466,.41621,.41774,.41924,.42073,.4222,.42364,.42507,.42647,.42785,.42922,.43056,.43189,.43319,.43448,.43574,.43699,.43822,.43943,.44062,.44179,.44295,.44408,.4452,.4463,.44738,.44845,.4495,.45053,.45154,.45254,.45352,.45449,.45543,.45637,.45728,.45818,.45907,.45994,.4608,.46164,.46246,.46327,.46407,.46485,.46562,.46638,.46712,.46784,.46856,.46926,.46995,.47062,.47128,.47193,.47257,.4732,.47381,.47441,.475,.47558,.47615,.4767,.47725,.47778,.47831,.47882,.47932,.47982,.4803,.48077,.48124,.48169,.48214,.48257,.483,.48341,.48382,.48422,.48461,.485,.48537,.48574,.4861,.48645,.48679,.48713,.48745,.48778,.48809,.4884,.4887,.48899,.48928,.48956,.48983,.4901,.49036,.49061,.49086,.49111,.49134,.49158,.4918,.49202,.49224,.49245,.49266,.49286,.49305,.49324,.49343,.49361,.49379,.49396,.49413,.4943,.49446,.49461,.49477,.49492,.49506,.4952,.49534,.49547,.4956,.49573,.49585,.49598,.49609,.49621,.49632,.49643,.49653,.49664,.49674,.49683,.49693,.49702,.49711,.4972,.49728,.49736,.49744,.49752,.4976,.49767,.49774,.49781,.49788,.49795,.49801,.49807,.49813,.49819,.49825,.49831,.49836,.49841,.49846,.49851,.49856,.49861,.49865,.49869,.49874,.49878,.49882,.49886,.49889,.49893,.49896,.499,.49903,.49906,.4991,.49913,.49916,.49918,.49921,.49924,.49926,.49929,.49931,.49934,.49936,.49938,.4994,.49942,.49944,.49946,.49948,.4995,.49952,.49953,.49955,.49957,.49958,.4996,.49961,.49962,.49964,.49965,.49966,.49968,.49969,.4997,.49971,.49972,.49973,.49974,.49975,.49976,.49977,.49978,.49978,.49979,.4998,.49981,.49981,.49982,.49983,.49983,.49984,.49985,.49985,.49986,.49986,.49987,.49987,.49988,.49988,.49989,.49989,.4999,.4999,.4999,.49991,.49991,.49992,.49992,.49992,.49992,.49993,.49993,.49993,.49994,.49994,.49994,.49994,.49995,.49995,.49995,.49995,.49995,.49996,.49996,.49996,.49996,.49996,.49996,.49997,.49997,.49997,.49997,.49997,.49997,.49997,.49997,.49998,.49998,.49998,.49998],s.prototype.colorClass=["concerning","poor","good","great"],s.prototype.status=["Concerning","Poor","Good","Great"],s.prototype.events={"click .back":"goBack","change #selector_container input":"selector","click .student_name":"showItemized"},s.prototype.showItemized=function(t){var e,s,r;return s=$(t.target),r=$(t.target).attr("data-studentId"),e=this.$el.find(".student_"+r),e.is(":visible")?(e.addClass("confirmation"),s.css({color:"black"})):(this.$el.find(".student_name").css({color:"black"}),s.css({color:"white"}),this.$el.find(".itemized_results").addClass("confirmation"),this.$el.find(".student_"+r).removeClass("confirmation"))},s.prototype.selector=function(){var t;return t=this.$el.find("#selector_container input:checked").attr("data-subtestId"),this.selected.subtestId=t,this.selected.results=this.results.where({subtestId:t}),this.updateTable(),this.render()},s.prototype.goBack=function(){return history.back()},s.prototype.initialize=function(t){var e,s,r,a,i;for(this.results=t.results,this.subtests=t.subtests,this.students=t.students,this.selected={},a=this.subtests.models,e=s=0,r=a.length;s<r&&(i=a[e],this.selected.subtestId=this.subtests.models[e].id,0===(this.selected.results=this.results.where({subtestId:i.id})).length);e=++s);return this.updateTable()},s.prototype.updateTable=function(){var t,e,s,r,a,i,o,n,h,c,d,l,u,m,p,g,b,y,f,C,v,w,I,k,_,M,x,z;for(this.table=[],t=0,this.subtest=this.subtests.get(this.selected.subtestId),this.summary={name:this.subtest.get("name"),classSize:this.students.length,resultCount:this.selected.results.length,aCorrect:0,anCorrect:0,stdDev:0,attempted:0,totalItems:null!=(w=this.selected.results[0])?w.get("total"):void 0,watchList:[]},I=this.selected.results,h=0,l=I.length;h<l;h++)x=I[h],v={studentId:x.get("studentId"),items:x.getItemized(),name:this.students.get(x.get("studentId")).get("name"),pCorrect:0,nCorrect:x.get("correct"),attempted:x.get("total")-x.get("missing"),total:x.get("total"),deviation:0,percentile:0,status:""},v.pCorrect=Math.round(v.nCorrect/v.attempted*100),this.summary.aCorrect+=v.pCorrect,this.summary.anCorrect+=v.nCorrect,this.summary.attempted+=v.attempted,this.table.push(v);for(this.summary.aCorrect=Math.decimals(this.summary.aCorrect/this.table.length,0),this.summary.anCorrect=Math.decimals(this.summary.anCorrect/this.table.length,2),this.summary.attempted=Math.decimals(this.summary.attempted/this.table.length,2),k=this.table,c=0,u=k.length;c<u;c++)v=k[c],this.summary.stdDev+=Math.pow(v.pCorrect-this.summary.aCorrect,2);for(this.summary.stdDev=Math.decimals(Math.pow(this.summary.stdDev/this.table.length,.5),2),_=this.table,i=d=0,m=_.length;d<m;i=++d)v=_[i],r=(v.pCorrect-this.summary.aCorrect)/this.summary.stdDev,a=Math.round(100*r),C=a>409||a<-409?0:a>0?100*Math.round(50+100*this.normalCurve[a])/100:a<0?100*Math.round(50-100*this.normalCurve[a*-1])/100:50,f=v.pCorrect,o=o=f>=80?3:f>=60&&f<=79?2:f>=30&&f<=59?1:0,this.table[i].deviation=a/100,this.table[i].percentile=C,this.table[i].index=o,this.table[i].status=this.status[o],0!==o||~this.summary.watchList.indexOf(v.name)||this.summary.watchList.push(v.name);for(this.table.sort(function(t,e){return e.pCorrect-t.pCorrect}),b=0,M=this.table,g=0,p=M.length;g<p;g++)v=M[g],v.pCorrect<75&&b++;return y=b/this.table.length*100,n=y<20,z="<img src='images/icon_warn.png'>",this.readyPercentage="<p>"+Math.round(y)+"% of your students are not ready to move on to the next lessons.</p>",s="It is ok to move on in the lesson sequence. Make sure that those children performing in the “poor” or “concerning” category get extra attention and practice and don’t fall behind. This can be done during practice lessons on Tuesday and Thursdays, or during another subject on the timetable.",e="Your class needs extra practice. Consider re-teaching Monday and Wednesday lessons introducing the new curriculum items or organize intense practice activities for the entire class. To find out which items students are particularly struggling with, select the name of a few students in the “poor” or “concerning” category and review their performance item by item. Take note of items that seem particularly troublesome.",this.readinessWarning=n?s:e},s.prototype.render=function(){var e,s,r,a,i,o,n,h,c,d,l,u,m,p,g,b,y,f,C,v,w;for(~this.subtests.pluck("reportType").indexOf("progress")||(w="<section> "+this.readyPercentage+" "+this.readinessWarning+" </section>",w+="<section> <p>Refer to the file “Kiswahili Wordlists” on your tablet for a list of additional words that may be useful for such group-based activities or practice for students performing in the “poor” or “concerning” category.</p> <p>For the students to watch – consider also communicating with parents for extra practice at home.</p> <p>Identify items these students need further practice on by selecting their name in the grouping report to see their performance on each item.</p> <p>Give parents some help: Write out on a piece of paper the letters for them to practice with their child; or copy applicable words from the “Kiswahili Wordlists” that contain the letters for the child to practice.</p> </section>"),a="<h1>"+t("student grouping report")+"</h1> <p>No students tested for "+this.subtests.get(this.selected.subtestId).get("name")+" on assessment #"+this.subtests.models[0].get("part")+" yet. Return to the <a href='#class'>class menu</a> and click the <img src='images/icon_run.png'> icon to collect data.</p>",p="<div id='selector_container' class='buttonset'>",b=this.subtests.models,h=0,l=b.length;h<l;h++)C=b[h],e=C.id===this.selected.subtestId?"checked='checked'":"",p+="<label for='"+C.id+"'>"+C.get("name")+"</label> <input type='radio' class='selector' name='selector' id='"+C.id+"' data-subtestId='"+C.id+"' "+e+">";for(p+="</div>",v="<h1>Summary</h1> <table class='summary'> <tr><th>Subtest Name</th>          <td>"+this.summary.name+"</td></tr> <tr><th>Class Size</th>            <td>"+this.summary.classSize+"</td></tr> <tr><th>Students Assessed</th>     <td>"+this.summary.resultCount+"</td></tr> <tr><th>Average Correct (%)</th>   <td>"+this.summary.aCorrect+"%</td></tr> <tr><th>Average Correct</th>       <td>"+this.summary.anCorrect+" / "+this.summary.attempted+"</td></tr> <tr><th>Students to watch</th>     <td>"+this.summary.watchList.join(", ")+"</td></tr> </table>",r="<h1>Student grouping</h1> <table class='details'> <tr> <th>Name</th> <th>% correct</th> <th>Status</th> </tr>",n="",y=this.table,c=0,u=y.length;c<u;c++){for(g=y[c],r+="<tr class='"+this.colorClass[g.index]+"'> <td class='student_name icon' data-studentId='"+g.studentId+"'>"+g.name+"</td> <td>"+g.pCorrect+"</td> <td>"+g.status+"</td> </tr>",n+="<table class='itemized_results confirmation student_"+g.studentId+"'> <tbody><tr><th>Item</th><th>Result</th></tr>",f=g.items,o=d=0,m=f.length;d<m;o=++d)s=f[o],n+="<tr><td>"+s.itemLabel+"</td><td>"+t(s.itemResult)+"</td></tr>";n+="</tbody></table>"}return r+="</table>",i=0!==this.selected.results.length?p+" "+v+" "+r+" "+n+" "+(w||"")+" <button class='navigation back'>Back</button>":p+" "+a+" <button class='navigation back'>Back</button>",this.$el.html(i),this.trigger("rendered")},s.prototype.getQuartile=function(t){return Math.round(t/100*3)},s}(Backbone.View);


var KlassGroupingMenuView,extend=function(t,e){function r(){this.constructor=t}for(var s in e)hasProp.call(e,s)&&(t[s]=e[s]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;KlassGroupingMenuView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="KlassGroupingMenuView",e.prototype.events={"change .part_selector":"gotoKlassGroupingReport"},e.prototype.gotoKlassGroupingReport=function(t){return Tangerine.router.navigate("report/klassGrouping/"+this.klass.id+"/"+this.$el.find(t.target).find(":selected").attr("data-part"),!0)},e.prototype.initialize=function(t){return this.parent=t.parent,this.klass=this.parent.options.klass,this.curricula=this.parent.options.curricula,this.currentPart=this.klass.calcCurrentPart(),this.students=new Students,this.students.fetch({klassId:this.klass.id,success:function(t){return function(){var e;return e=new Subtests,e.fetch({success:function(e){var r,s,n,a,i;for(i=e.where({curriculaId:t.curricula.id}),t.parts=[],r=0,s=i.length;r<s;r++)a=i[r],n=a.get("part"),null==t.parts[n]&&(t.parts[n]={}),t.parts[n].id=a.id,null!=t.parts[n].name?t.parts[n].name+=" "+a.get("name"):t.parts[n].name=a.get("name"),t.parts[n].reportType=a.get("reportType");return t.ready=!0,t.render()}})}}(this)})},e.prototype.render=function(){var t,e,r,s,n,a,i;if(this.ready){if(null==this.students||0===this.students.length)return void this.$el.html("Please add students to this class.");for(e="<select class='part_selector'> <option disabled='disabled' selected='selected'>Select an assessment</option>",a=this.parts,n=r=0,s=a.length;r<s;n=++r)i=a[n],null!=(null!=i?i.id:void 0)&&(t=this.currentPart===n?"**":"",e+="<option data-part='"+n+"' data-subtestId='"+i.id+"'>"+t+" "+n+" "+i.name+"</option>");return e+="</select>",this.$el.html(e)}return this.$el.html("<img src='images/loading.gif' class='loading'>")},e}(Backbone.View);


var MasteryCheckView,extend=function(t,e){function s(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;MasteryCheckView=function(e){function s(){return s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="MasteryCheckView",s.prototype.events={"click .back":"goBack"},s.prototype.goBack=function(){return history.back()},s.prototype.initialize=function(t){if(this.subtests=t.subtests,this.results=t.results,this.student=t.student,this.klass=t.klass,this.resultsByPart=this.results.indexBy("part"),this.lastPart=Math.max.apply(this,this.results.pluck("part")),!isFinite(this.lastPart))return this.lastPart=0},s.prototype.render=function(){var e,s,r,i,a,n,o,h,c,u;if(e="<h1>Mastery check report</h1> <h2>Student "+this.student.get("name")+"</h2>",s="<p>No test data for this type of report. Return to the <a href='#class'>class menu</a> and click the <img src='images/icon_run.png'> icon to collect data.</p>",0===this.results.length)return this.$el.html(e+" "+s),void this.trigger("rendered");for(e+="<table>",n=r=1,o=this.lastPart;1<=o?r<=o:r>=o;n=1<=o?++r:--r)if(null!=this.resultsByPart[n])for(e+="<tr><th>Assessment "+n+"</th></tr> <tr>",h=this.resultsByPart[n],i=0,a=h.length;i<a;i++)c=h[i],u=this.subtests.get(c.get("subtestId")).get("name"),e+="<td> "+c.get("itemType").titleize()+" correct<br> "+u+" </td> <td>"+c.get("correct")+"/"+c.get("total")+"</td>";return e+="</table> <button class='navigation back'>"+t("back")+"</button>",this.$el.html(e),this.trigger("rendered")},s}(Backbone.View);


var MasteryCheckMenuView,extend=function(t,e){function r(){this.constructor=t}for(var s in e)hasProp.call(e,s)&&(t[s]=e[s]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;MasteryCheckMenuView=function(e){function r(){return r.__super__.constructor.apply(this,arguments)}return extend(r,e),r.prototype.className="MasteryCheckMenuView",r.prototype.events={"change .student_selector":"gotoMasteryCheckReport"},r.prototype.gotoMasteryCheckReport=function(t){return Tangerine.router.navigate("report/masteryCheck/"+this.$el.find(t.target).find(":selected").attr("data-studentId"),!0)},r.prototype.initialize=function(t){var e;return this.parent=t.parent,this.klass=this.parent.options.klass,this.curricula=this.parent.options.curricula,e=new Students,e.fetch({success:function(t){return function(e){return t.students=e.where({klassId:t.klass.id}),t.ready=!0,t.render()}}(this)})},r.prototype.render=function(){var e,r,s,n,o;if(this.ready){if(0===this.students.length)return void this.$el.html("Please add students to this class.");for(e="<select class='student_selector'> <option disabled='disabled' selected='selected'>"+t("select a student")+"</option>",n=this.students,r=0,s=n.length;r<s;r++)o=n[r],e+="<option data-studentId='"+o.id+"'>"+o.get("name")+"</option>";return e+="</select>",this.$el.html(e)}return this.$el.html("<img src='images/loading.gif' class='loading'>")},r}(Backbone.View);


var ProgressView,SortedCollection,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function s(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;ProgressView=function(e){function s(){return this.updateFlot=bind(this.updateFlot,this),this.afterRender=bind(this.afterRender,this),s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="ProgressView",s.prototype.INDIVIDUAL=1,s.prototype.AGGREGATE=2,s.prototype.events={"click .back":"goBack","click .select_itemType":"selectItemType","click .xtick":"selectAssessment"},s.prototype.selectAssessment=function(t){return this.selected.week=parseInt($(t.target).attr("data-index")),this.updateTable(),this.updateFlot()},s.prototype.selectItemType=function(t){var e;return e=$(t.target),this.selected.itemType=e.attr("data-itemType"),this.$el.find(".select_itemType").removeClass("selected"),e.addClass("selected"),this.updateTable(),this.updateFlot()},s.prototype.goBack=function(){return history.go(-1)},s.prototype.initialize=function(t){var e,s,i,r,a,o,n,h,l,d,p,c,u,m,g,y,f,b,k,w,T,v,x,P,B,N,I,D,M,C,L,A,R,G,$,S,V,E,F,O,U,z;if(this.results=t.results,this.student=t.student,this.subtests=t.subtests,this.klass=t.klass,null==this.klass&&Utils.log(this,"No klass."),null==this.subtests&&Utils.log(this,"No progress type subtests."),0===this.results.length)return this.renderReady=!0,void this.render();for(this.mode=null!=this.student?this.INDIVIDUAL:this.AGGREGATE,this.subtestNames={},this.benchmarkScore={},this.rows=[],this.partCount=0,this.flot=null,this.lastPart=Math.max.apply(this,_.compact(this.subtests.pluck("part"))),this.resultsByPart=[],this.itemTypeList={},this.selected={itemType:null,week:0},N=[],C=this.subtests.models,n=0,p=C.length;n<p;n++)O=C[n],~N.indexOf(O.get("part"))||N.push(O.get("part")),r=N.indexOf(O.get("part")),null==this.subtestNames[r]&&(this.subtestNames[r]={}),this.subtestNames[r][O.get("itemType")]=O.get("name");for(this.partCount=N.length,z=this.subtests.indexBy("part"),B=_.keys(z),this.indexByPart=[],r=h=0,c=B.length;h<c;r=++h)P=B[r],this.indexByPart[P]=r;for(this.resultsByPart=this.results.indexBy("part"),L=this.results.models,d=0,u=L.length;d<u;d++)E=L[d],this.itemTypeList[E.get("itemType").toLowerCase()]=!0;for(this.itemTypeList=_.keys(this.itemTypeList),P=k=1,A=this.lastPart;1<=A?k<=A:k>=A;P=1<=A?++k:--k)if(void 0!==this.resultsByPart[P]){for(o={},R=this.resultsByPart[P],r=w=0,m=R.length;w<m;r=++w)E=R[r],this.mode===this.INDIVIDUAL&&E.get("studentId")!==this.student.id||(a=E.get("itemType"),null==this.selected.itemType&&(this.selected.itemType=a),null==o[a]&&(o[a]=[]),o[a].push({name:a.titleize(),key:a,part:E.get("part"),correct:E.get("correct"),attempted:E.get("attempted"),itemsPerMinute:E.getCorrectPerSeconds(60)}),this.benchmarkScore[a]=this.subtests.get(E.get("subtestId")).getNumber("scoreTarget"));this.rows.push({part:P,itemTypes:_.values(o)})}for(this.rows=this.aggregate(this.rows),0!==this.rows.length&&(this.selected={week:this.indexByPart[_.last(this.rows).part],itemType:_.last(this.rows).itemTypes[0].key}),I={},G=this.rows,r=v=0,g=G.length;v<g;r=++v)for(F=G[r],$=F.itemTypes,x=0,y=$.length;x<y;x++)a=$[x],i=this.indexByPart[F.part]+1,null==I[a.key]&&(I[a.key]=[]),I[a.key].push([i,a.itemsPerMinute]);this.flotData=[],this.benchmarkData=[],r=0;for(T in I)e=I[T],l=T.toLowerCase(),this.flotData[l]={data:e,label:T.titleize(),key:l,lines:{show:!0},points:{show:!0}};this.flotBenchmark=[],S=this.subtests.indexBy("itemType");for(a in S){for(U=S[a],s=[],r=D=0,f=U.length;D<f;r=++D)O=U[r],i=this.indexByPart[O.get("part")]+1,s.push([i,O.getNumber("scoreTarget")]);this.flotBenchmark[a.toLowerCase()]={label:"Progress benchmark",data:s,color:"#aaa",lines:{show:!0}}}this.warningThresholds={},V=this.subtests.indexBy("itemType");for(a in V)for(U=V[a],this.warningThresholds[a]=[],r=M=0,b=U.length;M<b;r=++M)O=U[r],this.warningThresholds[a.toLowerCase()][this.indexByPart[O.get("part")]]={target:O.getNumber("scoreTarget"),spread:O.getNumber("scoreSpread"),seconds:O.getNumber("timer")};return this.renderReady=!0,this.render()},s.prototype.render=function(){var e,s,i,r,a,o,n,h,l,d,p;if(this.renderReady){if(e=$(window),p={h:e.height(),w:e.width()},this.mode===this.INDIVIDUAL&&(d="<h2>"+this.student.get("name")+"</h2>"),s="<h1>Progress table</h1> "+(d||""),i="<p>No test data for this type of report. Return to the <a href='#class'>class menu</a> and click the <img src='images/icon_run.png'> icon to collect data.</p>",0===this.results.length)return this.$el.html(s+" "+i),void this.trigger("rendered");for(s+="<div id='flot-menu'>",h=_.uniq(this.subtests.pluck("itemType")),r=0,n=h.length;r<n;r++)a=h[r],o=a.replace(/[_-]/g," ").capitalize(),l=a===this.selected.itemType?"selected":"",s+="<button class='command select_itemType "+l+"' data-itemType='"+a+"'>"+o+"</button>";return s+="</div> <div id='flot-container' style='width: "+.8*window.w+"px; height:300px;'></div>",s+="<div id='table_container'></div> <button class='navigation back'>"+t("back")+"</button>",this.$el.html(s),this.updateTable(),this.trigger("rendered")}},s.prototype.afterRender=function(){return this.updateFlot()},s.prototype.updateTable=function(){var t,e,s,i,r,a,o,n,h,l,d,p,c,u,m,g,y,f,b,k,w,T,v,x,P;for(v=this.selected.itemType,P=this.selected.week,a="<table class='tabular'>",g=this.rows,o=h=0,p=g.length;h<p;o=++h)if(k=g[o],~_.pluck(k.itemTypes,"key").indexOf(v))for(a+="<tr><th>"+this.subtestNames[o][v]+"</th></tr><tr>",y=k.itemTypes,l=0,c=y.length;l<c;l++)n=y[l],n.key===v&&(a+="<tr> <td>"+n.name+" correct</td><td>"+n.correct+"/"+n.attempted+"</td> </tr> <tr> <td>"+n.name+" correct per minute</td><td>"+n.itemsPerMinute+"</td> </tr>");if(a+="</table>",t=_.pluck(null!=(f=this.rows[P])?f.itemTypes:void 0,"key"),P>=this.rows.length||!~t.indexOf(v))a+="<section>No data for this assessment.</section>";else if(this.mode===this.AGGREGATE){for(w=0,e=null!=this.flotData[v]?this.flotData[v].data:[],d=0,u=e.length;d<u;d++)s=e[d],s[0]===P+1&&(w=s[1]);T=this.warningThresholds[v][P],r=T.target+T.spread,m=T.target-T.spread,i=w-T.target,w>r?(b="("+w+"), "+i+" correct items per minute above the benchmark",x="Your class is doing well, "+b+", continue with the reading program. Share your and your class’ great work with parents. Reward your class with some fun reading activities such as reading marathons or competitions. However, look at a student grouping report for this assessment and make sure that those children performing below average get extra attention and practice and don’t fall behind."):w<m?(b="("+w+"), "+Math.abs(i)+" correct items per minute below the benchmark",x="Your class is performing below the grade-level target, "+b+". Plan for additional lesson time focusing on reading in consultation with your principal. Encourage parents to spend more time with reading materials at home – remind them that you are a team working together to help their children learning to read. Think about organizing other events and opportunities for practice, e.g., reading marathons or competitions to motivate students to read more."):(b=0!==i&&i*-1===Math.abs(i)?w-T.target+" correct items per minute above the bench mark":0===i?w+" correct items per minute":"("+w+"), "+Math.abs(w-T.target)+" correct items per minute below the bench mark",x="Your class is in line with expectations, "+b+". Continue with the reading program and keep up the good work! Look at a student grouping report for this assessment and make sure that those children performing below average get extra attention and practice and don’t fall behind."),a+="<section> "+x+" </section>"}return this.$el.find("#table_container").html(a)},s.prototype.updateFlot=function(){var t,e;return this.flotOptions={xaxis:{min:.5,max:this.partCount+.5,ticks:function(){var t,s,i;for(i=[],e=t=1,s=this.partCount;1<=s?t<=s:t>=s;e=1<=s?++t:--t)i.push(String(e));return i}.call(this),tickDecimals:0,tickFormatter:function(t){return function(e){return null!=t.subtestNames[e-1][t.selected.itemType]?"<button class='xtick "+(e-1===t.selected.week?"selected":"")+"' data-index='"+(e-1)+"'>"+t.subtestNames[e-1][t.selected.itemType]+"</button>":""}}(this)},grid:{markings:{color:"#ffc",xaxis:{to:this.selected.week+.5,from:this.selected.week-.5}}}},t=[],this.flotData[this.selected.itemType]&&t.push(this.flotData[this.selected.itemType]),this.flotBenchmark[this.selected.itemType]&&t.push(this.flotBenchmark[this.selected.itemType]),this.flot=$.plot(this.$el.find("#flot-container"),t,this.flotOptions)},s.prototype.aggregate=function(t){var e,s,i,r,a,o,n,h,l,d,p,c,u;for(l=[],e=s=0,a=t.length;s<a;e=++s)for(u=t[e],l[e]={part:u.part,itemTypes:[]},d=u.itemTypes,i=0,o=d.length;i<o;i++){for(c=d[i],h={name:"",key:"",correct:0,attempted:0,itemsPerMinute:0},r=0,n=c.length;r<n;r++)p=c[r],h.name=p.name,h.key=p.key,h.correct+=p.correct,h.attempted+=p.attempted,h.itemsPerMinute+=p.itemsPerMinute;h.correct/=c.length,h.attempted/=c.length,h.itemsPerMinute/=c.length,h.correct=Math.round(h.correct),h.attempted=Math.round(h.attempted),h.itemsPerMinute=Math.round(h.itemsPerMinute),l[e].itemTypes.push(h)}return l},s}(Backbone.View),SortedCollection=function(){function t(t){this.sorted=[],this.models=t.models,this.attribute=t.attribute}return t}();


var ProgressMenuView,extend=function(t,e){function s(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;ProgressMenuView=function(e){function s(){return s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="ProgressMenuView",s.prototype.events={"change .student_selector":"gotoProgressTable"},s.prototype.gotoProgressTable=function(t){return Tangerine.router.navigate("report/progress/"+this.$el.find(t.target).find(":selected").attr("data-studentId")+("/"+this.klass.id),!0)},s.prototype.initialize=function(t){var e;return this.parent=t.parent,this.klass=this.parent.options.klass,this.curricula=this.parent.options.curricula,e=new Students,e.fetch({success:function(t){return function(e){return t.students=e.where({klassId:t.klass.id}),t.ready=!0,t.render()}}(this)})},s.prototype.render=function(){var e,s,r,n,o;if(this.ready){if(0===this.students.length)return void this.$el.html("Please add students to this class.");for(e="<select class='student_selector'> <option disabled='disabled' selected='selected'>"+t("select a student")+"</option> <option data-studentId='all'>"+t("all students")+"</option>",n=this.students,s=0,r=n.length;s<r;s++)o=n[s],e+="<option data-studentId='"+o.id+"'>"+o.get("name")+"</option>";return e+="</select>",this.$el.html(e)}return this.$el.html("<img src='images/loading.gif' class='loading'>")},s}(Backbone.View);


var CsvMenuView,extend=function(t,e){function n(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;CsvMenuView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="CsvMenuView",e.prototype.initialize=function(t){var e,n;return n=t.parent.options.klass.id,e=Tangerine.settings.get("groupName"),document.location="http://databases.tangerinecentral.org/_csv/class/"+e+"/"+n},e}(Backbone.View);


var Curriculum,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function r(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;Curriculum=function(t){function e(){return this.destroy=bind(this.destroy,this),this.updateFromServer=bind(this.updateFromServer,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.url="curriculum",e.prototype.isArchived=function(){return!1},e.prototype.updateFromServer=function(t){var e;return null==t&&(t=this.id.substr(-5,5)),e=JSON.stringify(t.replace(/[^a-f0-9]/g," ").split(/\s+/)),this.trigger("status","import lookup"),$.ajax(Tangerine.settings.urlView("group","byDKey"),{type:"POST",dataType:"jsonp",data:{keys:e},success:function(t){return function(e){var r,n,s,u,i;for(n=[],i=e.rows,s=0,u=i.length;s<u;s++)r=i[s],n.push(r.id);return $.couch.replicate(Tangerine.settings.urlDB("group"),Tangerine.settings.urlDB("local"),{success:function(){return t.trigger("status","import success")},error:function(e,r){return t.trigger("status","import error",e+" "+r)}},{doc_ids:n})}}(this)}),!1},e.prototype.duplicate=function(t,e,r,n){var s,u,i;return i=this.id,u=this.clone(),u.set(t),s=Utils.guid(),u.save({_id:s,curriculumId:s},{success:function(t){return function(){var t;return t=new Questions,t.fetch({key:i,success:function(t){var e;return e=new Subtests,e.fetch({key:i,success:function(e){var r,s,i,o,c,l,d,a,p,f,g,h,y,v,m,_,T,b,k;for(r=e.models,k={},m=[],i=o=0,d=r.length;o<d;i=++o)f=r[i],y=f.clone(),y.set("curriculumId",u.id),v=Utils.guid(),k[y.id]=v,y.set("_id",v),m.push(y);for(i=c=0,a=m.length;c<a;i=++c)f=m[i],s=f.get("gridLinkId"),""!==(s||"")&&f.set("gridLinkId",k[s]),f.save();for(h=[],b=t.models,l=0,p=b.length;l<p;l++)T=b[l],g=T.clone(),_=g.get("subtestId"),g.set("curriculumId",u.id),g.set("_id",Utils.guid()),g.set("subtestId",k[_]),h.push(g),g.save();return n(u)}})}})}}(this)})},e.prototype.destroy=function(t){var r,n;return r=this.id,n=new Subtests,n.fetch({key:r,success:function(t){var e;for(e=[];0!==t.length;)e.push(t.pop().destroy());return e}}),e.__super__.destroy.call(this,{success:function(){return t()}})},e.prototype.destroy=function(){return Tangerine.$db.view(Tangerine.design_doc+"/revByAssessmentId",{keys:[this.id],error:function(){return Utils.midAlert("Delete error.")},success:function(t){return function(e){var r,n,s,u,i,o;for(r=[],u=e.rows,n=0,s=u.length;n<s;n++)o=u[n],o.value._deleted=!0,o.value.deletedAt=Tangerine.settings.get("context"),r.push(o.value);return i={docs:r},$.ajax({type:"POST",contentType:"application/json; charset=UTF-8",dataType:"json",url:Tangerine.settings.urlBulkDocs(),data:JSON.stringify(i),error:function(){return Utils.midAlert("Delete error.")},success:function(e){var r,n,s,u;for(s=0,r=0,n=e.length;r<n;r++)u=e[r],null!=u.ok&&s++;return s===e.length?(t.collection.remove(t.id),t.clear()):Utils.midAlert("Delete error.")}})}}(this)})},e}(Backbone.Model);


var CurriculumView,extend=function(t,e){function r(){this.constructor=t}for(var s in e)hasProp.call(e,s)&&(t[s]=e[s]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;CurriculumView=function(e){function r(){return r.__super__.constructor.apply(this,arguments)}return extend(r,e),r.prototype.className="CurriculumView",r.prototype.events={"click .back":"goBack","click .delete":"deleteCurriculum","click .delete_subtest":"deleteSubtest","click .edit_in_place":"editInPlace","click .new_subtest":"newSubtest","change #file":"uploadFile","focusout .editing":"editing","keyup    .editing":"editing","keydown  .editing":"editing","click .name-controls .edit":"editName","click .name-controls .save":"saveName","click .name-controls .cancel":"cancelEditName"},r.prototype.initialize=function(t){return this.curriculum=t.curriculum,this.subtests=t.subtests,this.questions=t.questions,this.questionsByParentId=this.questions.indexBy("subtestId"),this.totalAssessments=Math.max.apply(Math,this.subtests.pluck("part")),this.subtestsByPart=this.subtests.indexArrayBy("part"),this.subtestProperties={grid:[{key:"itemType",label:"Item type",editable:!0},{key:"part",label:"Term",editable:!0},{key:"grade",label:"Grade",editable:!0},{key:"name",label:"Name",editable:!0,escaped:!0},{key:"timer",label:"Time<br>allowed",editable:!0},{key:"items",label:"Items",count:!0,editable:!0}],survey:[{key:"part",label:"Assessment",editable:!0},{key:"name",label:"Name",editable:!0},{key:"reportType",label:"Report",editable:!0}]}},r.prototype.htmlFileTable=function(){var t,e,r,s,n,i,a,u,l;if(_(this.curriculum.getAttachments()).isEmpty())return"";for(a=["","KB","MB","GB"],r="<h2>Attachments</h2> <table>",u=this.curriculum.getAttachments(),s=0,i=u.length;s<i;s++)t=u[s],e=t.size,n=parseInt(Math.floor(Math.log(e)/Math.log(1024))),l=Math.decimals(e/Math.pow(1024,n),1)+" "+a[n],r+="<tr><td>"+t.filename+" ("+l+")</td></tr>";return r+="</table>"},r.prototype.uploadFile=function(t){var e;return e=t.target.files[0],this.curriculum.addAttachment({file:e,error:function(t){return function(){return Utils.midAlert("Error uploading.")}}(this),success:function(t){return function(){return Utils.midAlert("File uploaded")}}(this),complete:function(t){return function(){return t.curriculum.fetch({success:function(){return t.render()}})}}(this)})},r.prototype.render=function(){var e,r,s,n;return n=this.getSubtestTable(),e="<button class='command_red delete'>Delete</button>",s="<button class='command new_subtest' data-prototype='grid'>New Grid Subtest</button><br> <button class='command new_subtest' data-prototype='survey'>New Survey Subtest</button>",r="<button class='nav-button back'>"+t("back")+"</button> <h1 class='curriculum-name'></h1> <small class='name-controls'></small><br> <div class='small_grey'>Download key <b>"+this.curriculum.id.substr(-5,5)+"</b></div> <div id='subtest_table_container'> "+n+" </div> "+(s||"")+" <br><br> "+e,this.$el.html(r),this.renderName(),this.trigger("rendered")},r.prototype.renderName=function(){return this.$el.find(".curriculum-name").html(this.curriculum.getEscapedString("name")),this.$el.find(".name-controls").html("<span class='edit'>Edit</span>")},r.prototype.editName=function(){var t;return t=this.$el.find(".curriculum-name").html("<input class='new-name' value='"+this.curriculum.getEscapedString("name")+"'>"),t.find("input").select(),this.$el.find(".name-controls").html("<span class='save'>Save</span> <span class='cancel'>Cancel</span>")},r.prototype.saveName=function(){var t;return t=this.$el.find(".new-name").val(),this.curriculum.save({name:t},{success:function(t){return function(){return Utils.topAlert("Name saved"),t.renderName()}}(this),error:function(t){return function(){return Utils.topAlert("New name did not save. Please try again."),t.renderName()}}(this)})},r.prototype.cancelEditName=function(){return this.renderName()},r.prototype.updateTable=function(){return this.$el.find("#subtest_table_container").html(this.getSubtestTable())},r.prototype.getSubtestTable=function(t){var e,r,s,n,i,a,u,l,o,c,d,p,m,b,h,g;s="<table class='subtests'>",s+="<tbody>",this.subtestByItemType=new Backbone.Collection(this.subtests.models.sort(function(t,e){return t=""+t.get("itemType")+t.get("part")+t.get("grade"),e=""+e.get("itemType")+e.get("part")+e.get("grade"),t<e?-1:t>e?1:0})).indexArrayBy("itemType"),m=this.subtestByItemType;for(o in m)for(g=m[o],s+="<tr><td>&nbsp;</td></tr>",n=0,u=g.length;n<u;n++){for(h=g[n],i=null,c=null,r=e="",b=this.subtestProperties[h.get("prototype")],a=0,l=b.length;a<l;a++)d=b[a],r+="<th>"+d.label+"</th>",e+=this.propCook(d,h);s+="<tr>"+r+"</tr>",s+="<tr>"+e,s+="<td> <a href='#class/subtest/"+h.id+"'><img class='link_icon edit' title='Edit' src='images/icon_edit.png'></a> <img class='link_icon delete_subtest' title='Delete' data-subtestId='"+h.id+"' src='images/icon_delete.png'> <a href='#class/run/test/"+h.id+"'><img class='link_icon testRun' title='Test run' src='images/icon_run.png'></a> </td> </tr>","grid"===h.get("prototype")&&(i=h.get("items").join(" "),s+="<tr><td colspan='"+this.subtestProperties.grid.length+"'>"+i+"</td></tr>"),"survey"===h.get("prototype")&&null!=this.questionsByParentId[h.id]&&(c=function(){var t,e,r,s;for(r=this.questionsByParentId[h.id],s=[],t=0,e=r.length;t<e;t++)p=r[t],s.push(p.get("prompt"));return s}.call(this).join(", "),s+="<tr><td colspan='"+this.subtestProperties.survey.length+"'>"+c+"</td></tr>")}return s+="</tbody> </table>"},r.prototype.propCook=function(t,e){var r,s,n;return n=null!=t.key?e.get(t.key):"&nbsp;",n=t.escape?e.escape(t.key):n,null!=t.count&&(n=n.length),null==n&&(n=""),r=t.editable?"class='edit_in_place'":"",s=_.isNumber(n)?"data-isNumber='true'":"data-isNumber='false'","<td class='edit_in_place'><span data-subtestId='"+e.id+"' data-key='"+t.key+"' data-value='"+n+"' "+r+" "+s+">"+n+"</div></td>"},r.prototype.editInPlace=function(t){var e,r,s,n,i,a,u,l,o,c,d,p,m;if(!this.alreadyEditing&&(this.alreadyEditing=!0,e=$(t.target),("TD"!==e.prop("tagName")||(e=e.find("span"),0!==e.length))&&(s=e.parent(),this.$oldSpan=e.clone(),"TEXTAREA"!==e.prop("tagName"))))return a=Utils.guid(),l=e.attr("data-key"),u="true"===e.attr("data-isNumber"),p=e.attr("data-subtestId"),d=this.subtests.get(p),c=d.get(l),r=$(t.target),i=(r.attr("class")||"").replace("settings",""),o=r.css("margin"),"items"===l&&(c=c.join(" ")),m="data-isNumber='"+u+"' data-key='"+l+"' data-subtestId='"+p+"' ",s.html("<textarea id='"+a+"' "+m+" class='editing "+i+"' style='margin:"+o+"'>"+c+"</textarea>"),n=$("#"+a),n.focus()},r.prototype.editing=function(t){var e,r,s,n,i,a,u,l,o;return e=$(t.target),r=e.parent(),27===t.which||"focusout"===t.type?(e.remove(),r.html(this.$oldSpan),void(this.alreadyEditing=!1)):13!==t.which||"keydown"!==t.type||(this.alreadyEditing=!1,i=e.attr("data-key"),n="true"===e.attr("data-isNumber"),o=e.attr("data-subtestId"),l=this.subtests.get(o),u=l.get(i),a=e.val(),a=n?parseInt(a):a,"items"===i&&(a=a.replace(/\s+/g," "),/\t|,/.test(a)&&alert('Please remember\n\nGrid items are space " " delimited'),a=_.compact(a.split(" "))),String(a)!==String(u)&&(s={},s[i]=a,l.save(s,{success:function(t){return function(){return Utils.midAlert("Subtest saved"),l.fetch({success:function(){return t.updateTable()}})}}(this),error:function(t){return function(){return l.fetch({success:function(){return t.updateTable(),alert("Please try to save again, it didn't work that time.")}})}}(this)})),!1)},r.prototype.goBack=function(){return Tangerine.router.navigate("assessments",!0)},r.prototype.deleteCurriculum=function(){if(confirm("Delete curriculum\n"+this.curriculum.get("name")+"?"))return this.curriculum.destroy(function(t){return function(){return Tangerine.router.navigate("assessments",!0)}}(this))},r.prototype.newSubtest=function(t){var e,r,s,n,i;return s=$(t.target).attr("data-prototype"),e=Utils.guid(),i={_id:e,curriculumId:this.curriculum.id,prototype:s,captureLastAttempted:!1,endOfLine:!1},r=Tangerine.templates.get("prototypes"),i=$.extend(r[s],i),n=new Subtest(i),n.save(null,{success:function(){return Tangerine.router.navigate("class/subtest/"+e,!0)},error:function(){return alert("Please try again. There was a problem creating the new subtest.")}})},r.prototype.deleteSubtest=function(t){var e,r;if(r=$(t.target).attr("data-subtestId"),e=this.subtests.get(r),confirm("Delete subtest\n"+e.get("name")+"?"))return e.destroy({success:function(t){return function(){return t.subtests.remove(r),t.updateTable()}}(this),error:function(t){return function(){return alert("Please try again, could not delete subtest.")}}(this)})},r}(Backbone.View);


var Curricula,extend=function(r,t){function o(){this.constructor=r}for(var u in t)hasProp.call(t,u)&&(r[u]=t[u]);return o.prototype=t.prototype,r.prototype=new o,r.__super__=t.prototype,r},hasProp={}.hasOwnProperty;Curricula=function(r){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,r),t.prototype.url="curriculum",t.prototype.model=Curriculum,t}(Backbone.Collection);


var CurriculaView,extend=function(t,r){function o(){this.constructor=t}for(var e in r)hasProp.call(r,e)&&(t[e]=r[e]);return o.prototype=r.prototype,t.prototype=new o,t.__super__=r.prototype,t},hasProp={}.hasOwnProperty;CurriculaView=function(r){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,r),o.prototype.className="CurriculaView",o.prototype.events={"click .import":"gotoImport","click .back":"goBack"},o.prototype.goBack=function(){return history.back()},o.prototype.gotoImport=function(){return Tangerine.router.navigate("curriculumImport",!0)},o.prototype.initialize=function(t){return this.subView=new CurriculaListView({curricula:t.curricula})},o.prototype.render=function(){return this.$el.html("<button class='back nav-button'>"+t("back")+"</button><br> <button class='command import'>"+t("import")+"</button> <br> <div id='curricula_list'></div>"),this.subView.setElement(this.$el.find("#curricula_list")),this.subView.render(),this.trigger("rendered")},o.prototype.onClose=function(){var t;return null!=(t=this.subView)?t.close():void 0},o}(Backbone.View);


var CurriculaListView,bind=function(r,t){return function(){return r.apply(t,arguments)}},extend=function(r,t){function e(){this.constructor=r}for(var i in t)hasProp.call(t,i)&&(r[i]=t[i]);return e.prototype=t.prototype,r.prototype=new e,r.__super__=t.prototype,r},hasProp={}.hasOwnProperty;CurriculaListView=function(r){function t(){return this.render=bind(this.render,this),t.__super__.constructor.apply(this,arguments)}return extend(t,r),t.prototype.className="CurriculaListView",t.prototype.tagName="ul",t.prototype.initialize=function(r){var t;return this.views=[],this.curricula=r.curricula,"function"==typeof(t=this.curricula).on?t.on("all",this.render):void 0},t.prototype.render=function(){if(0!==this.curricula.length)return this.$el.html("<h1>Curricula</h1>"),this.closeViews,this.curricula.each(function(r){return function(t){var e;return e=new CurriculumListElementView({curriculum:t}),e.render(),r.$el.append(e.el),r.views.push(e)}}(this)),this.trigger("rendered")},t.prototype.onClose=function(){return this.closeViews()},t.prototype.closeViews=function(){var r,t,e,i,n;for(e=this.views,i=[],r=0,t=e.length;r<t;r++)n=e[r],i.push("function"==typeof n.close?n.close():void 0);return i},t}(Backbone.View);


var CurriculumListElementView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function i(){this.constructor=e}for(var n in t)hasProp.call(t,n)&&(e[n]=t[n]);return i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;CurriculumListElementView=function(e){function t(){return this["delete"]=bind(this["delete"],this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="CurriculumListElementView",t.prototype.tagName="li",t.prototype.events={"click .toggle_menu":"toggleMenu","click .duplicate":"duplicate","click .delete":"deleteToggle","click .delete_cancel":"deleteToggle","click .delete_confirm":"delete"},t.prototype.initialize=function(e){return this.curriculum=e.curriculum,this.subtests=e.subtests},t.prototype.duplicate=function(){var e;return e="Copy of "+this.curriculum.get("name"),this.curriculum.duplicate({name:e},null,null,function(e){return function(t){return e.curriculum.trigger("new",t)}}(this))},t.prototype.toggleMenu=function(){return this.$el.find(".sp_down, .sp_right").toggleClass("sp_down").toggleClass("sp_right"),this.$el.find(".menu").fadeToggle(150)},t.prototype.deleteToggle=function(){return this.$el.find(".delete_confirm").fadeToggle(250),!1},t.prototype["delete"]=function(){return this.curriculum.destroy()},t.prototype.render=function(){var e,t,i,n,r,l,u,c;return c="<div class='toggle_menu sp_right'><div> </div></div>",r="<a href='#curriculum/"+this.curriculum.id+"'><img class='link_icon edit' title='Edit' src='images/icon_edit.png'></a>",n="<img class='link_icon duplicate' title='Duplicate' src='images/icon_duplicate.png'>",e="<img class='delete link_icon' title='Delete' src='images/icon_delete.png'>",t="<span class='delete_confirm'><div class='menu_box'>Confirm <button class='delete_yes command_red'>Delete</button> <button class='delete_cancel command'>Cancel</button></div></span>",i="<span class='download_key small_grey'>Download key <b>"+this.curriculum.id.substr(-5,5)+"</b></span>",u="<span class='toggle_menu'>"+this.curriculum.escape("name")+"</span>",Tangerine.user.isAdmin()&&(l=r+" "+n+" "+e+" "+i+" "+t),Tangerine.user.isAdmin()||(l=r+" "+i),this.$el.html("<div> "+c+" "+u+" </div> <div> <div class='confirmation menu'> "+l+" </div> </div>"),this.trigger("rendered")},t}(Backbone.View);


var Teacher,extend=function(r,t){function e(){this.constructor=r}for(var o in t)hasProp.call(t,o)&&(r[o]=t[o]);return e.prototype=t.prototype,r.prototype=new e,r.__super__=t.prototype,r},hasProp={}.hasOwnProperty;Teacher=function(r){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,r),t.prototype.url="teacher",t}(Backbone.Model);


var Teachers,extend=function(r,t){function e(){this.constructor=r}for(var o in t)hasProp.call(t,o)&&(r[o]=t[o]);return e.prototype=t.prototype,r.prototype=new e,r.__super__=t.prototype,r},hasProp={}.hasOwnProperty;Teachers=function(r){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,r),t.prototype.model=Teacher,t.prototype.url="teacher",t}(Backbone.Collection);


var TeachersView,extend=function(t,e){function a(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return a.prototype=e.prototype,t.prototype=new a,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;TeachersView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="TeachersView",e.prototype.events={"click .edit_in_place":"editInPlace","focusout .editing":"editing","keyup    .editing":"editing","keydown  .editing":"editing","click    .change_password":"changePassword","change   .show_password":"showPassword","click    .save_password":"savePassword","click    .back":"goBack"},e.prototype.goBack=function(){return window.history.back()},e.prototype.initialize=function(t){return this.teachers=t.teachers,this.users=t.users,this.usersByTeacherId=this.users.indexBy("teacherId"),this.teacherProperties=[{key:"name",editable:!0,headerless:!0},{key:"first",label:"First",editable:!0,escaped:!0},{key:"last",label:"Last",editable:!0,escaped:!0},{key:"gender",label:"Gender",editable:!0},{key:"school",label:"School name",editable:!0},{key:"contact",label:"Contact Information",editable:!0}]},e.prototype.showPassword=function(t){var e,a;return e=$(t.target),a=e.attr("data-teacherId"),"password"===this.$el.find("."+a+"_password").attr("type")?this.$el.find("."+a+"_password").attr("type","text"):this.$el.find("."+a+"_password").attr("type","password")},e.prototype.changePassword=function(t){var e,a;return e=$(t.target),a=e.attr("data-teacherId"),this.$el.find("."+a+"_menu").toggleClass("confirmation"),this.$el.find("."+a).scrollTo(),this.$el.find("."+a+"_password").focus()},e.prototype.savePassword=function(t){var e,a,r,s;return e=$(t.target),a=e.attr("data-teacherId"),r=this.teachers.get(a),s=this.usersByTeacherId[a][0],s.setPassword(this.$el.find("."+a+"_password").val()),s.save(null,{success:function(t){return function(){return Utils.midAlert("Teacher's password saved"),t.$el.find("."+a+"_password").val(""),t.$el.find("."+a+"_menu").toggleClass("confirmation")}}(this),error:function(t){return function(){return Utils.midAlert("Save error")}}(this)})},e.prototype.render=function(){var t,e;return e=this.getTeacherTable(),t="<button class='command_red delete'>Delete</button>",this.$el.html("<h1>Teachers</h1> <div id='teacher_table_container'> "+e+" </div>"),this.trigger("rendered")},e.prototype.updateTable=function(){return this.$el.find("#teacher_table_container").html(this.getTeacherTable())},e.prototype.getTeacherTable=function(){var t,e,a,r,s,i,n,o,d;for(t="",n=this.teachers.models,e=0,r=n.length;e<r;e++){for(d=n[e],t+="<table class='class_table teachers "+d.id+"' > <tbody>",o=this.teacherProperties,a=0,s=o.length;a<s;a++)i=o[a],t+=this.propCookRow(i,d);t+="<tr class='last'><th><button class='change_password command' data-teacherId='"+d.id+"'>Change Password</button><br> <div class='"+d.id+"_menu confirmation'> <div class='menu_box'> <input type='password' class='"+d.id+"_password'> <table><tr> <th style='padding:0;'><label for='"+d.id+"_show_password'>Show password</label></th> <th style='padding:10px'><input type='checkbox' id='"+d.id+"_show_password' class='show_password' data-teacherId='"+d.id+"'></th> </tr></table> <button class='save_password command' data-teacherId='"+d.id+"'>Save</button> </div> </div> </th> </tr> </tbody> </table>"}return t},e.prototype.propCookRow=function(t,e){var a;return t.headerless?t.tagName="th":a="<th>"+t.label+"</th>","<tr>"+(a||"")+this.propCook(t,e)+"</tr>"},e.prototype.propCook=function(t,e){var a,r,s,i;return i=null!=t.key?e.get(t.key):"&nbsp;",i=t.escape?e.escape(t.key):i,null==i&&(i="_"),s=t.tagName||"td",a=t.editable?"edit_in_place":"",r=_.isNumber(i)?"data-isNumber='true'":"data-isNumber='false'","<"+s+" class='"+a+"'><span data-teacherId='"+e.id+"' data-key='"+t.key+"' data-value='"+i+"' "+a+" "+r+">"+i+"</div></"+s+">"},e.prototype.editInPlace=function(t){var e,a,r,s,i,n,o,d,c,l,h,p,u;if(!this.alreadyEditing&&(this.alreadyEditing=!0,e=$(t.target),("TD"!==e.prop("tagName")||(e=e.find("span"),0!==e.length))&&(r=e.parent(),this.$oldSpan=e.clone(),"TEXTAREA"!==e.prop("tagName"))))return n=Utils.guid(),d=e.attr("data-key"),o="true"===e.attr("data-isNumber"),p=e.attr("data-teacherId"),h=this.teachers.get(p),l=o?h.getNumber(d):h.getString(d),a=$(t.target),i=(a.attr("class")||"").replace("settings",""),c=a.css("margin"),"items"===d&&(l=l.join(" ")),u="data-isNumber='"+o+"' data-key='"+d+"' data-teacherId='"+p+"' ",r.html("<textarea id='"+n+"' "+u+" class='editing "+i+"' style='margin:"+c+"'>"+l+"</textarea>"),s=$("#"+n),s.focus()},e.prototype.editing=function(t){var e,a,r,s,i,n,o,d,c;return e=$(t.target),a=e.parent(),27===t.which||"focusout"===t.type?(e.remove(),a.html(this.$oldSpan),void(this.alreadyEditing=!1)):13!==t.which||"keydown"!==t.type||(this.alreadyEditing=!1,i=e.attr("data-key"),s="true"===e.attr("data-isNumber"),c=e.attr("data-teacherId"),d=this.teachers.get(c),o=d.get(i),n=e.val(),n=s?parseInt(n):n,"items"===i&&(n=n.replace(/\s+/g," "),/\t|,/.test(n)&&alert('Please remember\n\nGrid items are space " " delimited'),n=_.compact(n.split(" "))),String(n)!==String(o)&&(r={},r[i]=n,d.save(r,{success:function(t){return function(){return Utils.topAlert("Teacher saved"),d.fetch({success:function(){return t.updateTable()}})}}(this),error:function(t){return function(){return d.fetch({success:function(){return t.updateTable(),alert("Please try to save again, it didn't work that time.")}})}}(this)})),!1)},e}(Backbone.View);


var RegisterTeacherView,extend=function(e,t){function s(){this.constructor=e}for(var r in t)hasProp.call(t,r)&&(e[r]=t[r]);return s.prototype=t.prototype,e.prototype=new s,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;RegisterTeacherView=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="RegisterTeacherView",t.prototype.events={"click .register":"register","click .cancel":"cancel"},t.prototype.initialize=function(e){return this.name=e.name,this.pass=e.pass,this.fields=["first","last","gender","school","contact"]},t.prototype.cancel=function(){return Tangerine.router.login()},t.prototype.register=function(){return this.validate(function(e){return function(){return e.saveUser()}}(this))},t.prototype.validate=function(e){var t,s,r,i,a;for(s=!1,a=this.fields,r=0,i=a.length;r<i;r++)t=a[r],_.isEmpty(this[t].val())?(this.$el.find("#"+t+"_message").html("Please fill out this field."),s=!0):this.$el.find("#"+t+"_message").html("");return s?Utils.midAlert("Please correct the errors on this page."):e()},t.prototype.saveUser=function(){var e,t,s,r,i,a,n;for(n={name:this.name},i=this.fields,s=0,r=i.length;s<r;s++)t=i[s],n[t]=this[t].val();return e={name:this.name},a=new Teacher(n),a.save({_id:Utils.humanGUID()},{success:function(e){return function(){return Tangerine.user.save({teacherId:a.id},{success:function(){return Utils.midAlert("New teacher registered"),Tangerine.user.login(e.name,e.pass,{success:function(){return Tangerine.router.landing()}})},error:function(e){return Utils.midAlert("Registration error<br>"+e,5e3)}})}}(this)})},t.prototype.render=function(){var e,t,s,r,i;for(this.$el.html("<h1>Register new teacher</h1> <table> <tr> <td class='small_grey'><b>Username</b></td> <td class='small_grey'>"+this.name+"</td> <td class='small_grey'><b>Password</b></td> <td class='small_grey'>"+function(){var e,t,s,r;for(s=this.pass,r=[],e=0,t=s.length;e<t;e++)i=s[e],r.push("*");return r}.call(this).join("")+"</td> </tr> </table> <div class='label_value'> <label for='first'>First name</label> <div id='first_message' class='messages'></div> <input id='first'> </div> <div class='label_value'> <label for='last'>Last Name</label> <div id='last_message' class='messages'></div> <input id='last'> </div> <div class='label_value'> <label for='gender'>Gender</label> <div id='gender_message' class='messages'></div> <input id='gender'> </div> <div class='label_value'> <label for='school'>School name</label> <div id='school_message' class='messages'></div> <input id='school'> </div> <div class='label_value'> <label for='contact'>Email address or mobile phone number</label> <div type='email' id='contact_message' class='messages'></div> <input id='contact'> </div> <button class='register command'>Register</button> <button class='cancel command'>Cancel</button>"),r=this.fields,t=0,s=r.length;t<s;t++)e=r[t],this[e]=this.$el.find("#"+e);return this.trigger("rendered")},t}(Backbone.View);


var Student,extend=function(t,e){function o(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return o.prototype=e.prototype,t.prototype=new o,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;Student=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.url="student",e.prototype.defaults={gender:"Not entered",age:"Not entered",name:"Not entered",klassId:null},e.prototype.initialize=function(){},e}(Backbone.Model);


var Students,extend=function(t,o){function r(){this.constructor=t}for(var e in o)hasProp.call(o,e)&&(t[e]=o[e]);return r.prototype=o.prototype,t.prototype=new r,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;Students=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.model=Student,o.prototype.url="student",o.prototype.comparator=function(t){return t.get("name").toLowerCase()},o}(Backbone.Collection);


var StudentListElementView,extend=function(e,t){function n(){this.constructor=e}for(var o in t)hasProp.call(t,o)&&(e[o]=t[o]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;StudentListElementView=function(e){function n(){return n.__super__.constructor.apply(this,arguments)}return extend(n,e),n.prototype.className="student_list_element",n.prototype.tagName="li",n.prototype.events={"click .edit":"edit","click .remove":"toggleRemove","click .remove_cancel":"toggleRemove","click .remove_delete":"removeStudent"},n.prototype.initialize=function(e){return this.student=e.student,this.students=e.students},n.prototype.edit=function(){return Tangerine.router.navigate("class/student/"+this.student.id,!0)},n.prototype.toggleRemove=function(){return this.$el.find(".remove_confirm, .remove").toggle()},n.prototype.removeStudent=function(){return this.student.set({klassId:null}).save(),this.students.remove(this.student)},n.prototype.render=function(){return this.$el.html(this.student.get("name")+" "+this.student.get("gender")+" "+this.student.get("age")+" <img src='images/icon_edit.png' class='edit' title='Edit'> <img src='images/icon_delete.png' class='remove' title='Remove'> <div class='remove_confirm confirmation'> <div class='menu_box'> "+t("remove student")+"<br> <button class='remove_delete command_red'>"+t("remove")+"</button> <button class='remove_cancel command'>"+t("cancel")+"</button> </div> </div>"),this.trigger("rendered")},n}(Backbone.View);


var StudentEditView,extend=function(e,t){function n(){this.constructor=e}for(var s in t)hasProp.call(t,s)&&(e[s]=t[s]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;StudentEditView=function(e){function n(){return n.__super__.constructor.apply(this,arguments)}return extend(n,e),n.prototype.className="StudentEditView",n.prototype.events={"click .done":"done","click .back":"back"},n.prototype.initialize=function(e){return this.student=e.student,this.klasses=e.klasses},n.prototype.done=function(){var e;return e=this.$el.find("#klass_select option:selected").attr("data-id"),"null"===e&&(e=null),this.student.set({name:this.$el.find("#name").val(),gender:this.$el.find("#gender").val(),age:this.$el.find("#age").val(),klassId:e}),this.student.save(),this.back()},n.prototype.back=function(){return window.history.back()},n.prototype.render=function(){var e,n,s,l,a,i,d,o,r;for(o=this.student.get("name")||"",n=this.student.get("gender")||"",e=this.student.get("age")||"",i=this.student.get("klassId"),s="<h1>"+t("edit student")+"</h1> <button class='back navigation'>"+t("back")+"</button><br> <div class='info_box'> <div class='label_value'> <label for='name'>Full name</label> <input id='name' value='"+o+"'> </div> <div class='label_value'> <label for='gender'>"+t("gender")+"</label> <input id='gender' value='"+n+"'> </div> <div class='label_value'> <label for='age'>"+t("age")+"</label> <input id='age' value='"+e+"'> </div> <div class='label_value'> <label for='klass_select'>"+t("class")+"</label><br> <select id='klass_select'>",s+="<option data-id='null' "+(null===i?"selected='selected'":void 0)+">"+t("none")+"</option>",r=this.klasses.models,l=0,d=r.length;l<d;l++)a=r[l],s+="<option data-id='"+a.id+"' "+(a.id===i?"selected='selected'":void 0)+">"+a.get("year")+" - "+a.get("grade")+" - "+a.get("stream")+"</option>";return s+="</select> </div> <button class='done command'>"+t("done")+"</button> </div>",this.$el.html(s),this.trigger("rendered")},n}(Backbone.View);


var Critique,extend=function(t,o){function r(){this.constructor=t}for(var e in o)hasProp.call(o,e)&&(t[e]=o[e]);return r.prototype=o.prototype,t.prototype=new r,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;Critique=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.url="critique",o.prototype.initialize=function(){},o.prototype.shouldShowNotes=function(){return"true"===this.getString("showNotes")||this.getString("showNotes")===!0},o}(Backbone.ChildModel);


var Critiques,extend=function(r,t){function o(){this.constructor=r}for(var e in t)hasProp.call(t,e)&&(r[e]=t[e]);return o.prototype=t.prototype,r.prototype=new o,r.__super__=t.prototype,r},hasProp={}.hasOwnProperty;Critiques=function(r){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,r),t.prototype.model=Critique,t.prototype.comparator=function(r,t){return r.has("order")?parseInt(r.get("order"))-parseInt(t.get("order")):1},t}(Backbone.ChildCollection);


var Loc;Loc=function(){function n(){}return n.query=function(e,r,t,l){var u,i,o,a,c,f,d,g,h,s,p;for(null==r&&(r={}),h=Tangerine.locationList.get("locations"),g=Tangerine.locationList.get("locationsLevels"),p=0,f=[],d=[],i=o=0,a=g.length;o<a;i=++o)c=g[i],_.indexOf(e,c)===-1?d[i]=null:d[i]=c;return u=n.getCurrentLevelIndex(e,r,d),s=n._query(0,u,h,d,r),setTimeout(function(n){return 0===s.length?n.apply(l,[null]):n.apply(l,[s])},0,t)},n._query=function(e,r,t,l,u){var i,o,a,c,f,d;if(e===r)return _.map(t,function(n){return{id:n.id,label:n.label}});if(null!=l[e]&&e<r&&u[l[e]])return n._query(e+1,r,t[u[l[e]]].children,l,u);if(null==l[e]&&e<r){for(f={},i=_.map(t,function(n){return n.children}),o=a=0,c=i.length;a<c;o=++a)d=i[o],_.extend(f,d);return n._query(e+1,r,f,l,u)}return console.log("_query: (depth, targetDepth, data, levelMap, criteria)",e,r,t,l,u),console.log("ERROR: Cannot find location. I should never reach this."),{}},n.getCurrentLevelIndex=function(n,e,r){var t,l,u,i;for(t=l=0,u=n.length;l<u;t=++l)if(i=n[t],null==e[i])return _.indexOf(r,i);return _.indexOf(r,_.last(n))},n}();


var LocView,extend=function(e,t){function n(){this.constructor=e}for(var s in t)hasProp.call(t,s)&&(e[s]=t[s]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;LocView=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.events={"change select":"onChange"},t.prototype.onChange=function(e){var t;return $(e.target).closest("div").nextAll().remove(),t=parseInt($(e.target).attr("data-index")),t+1!==this.levels.length&&this.renderOne(t+1),this.trigger("change")},t.prototype.initialize=function(e){return null==e&&(e={}),this.showTitles=null==e.showTitles||e.showTitles,this.levels=e.levels||["county","zone","school"],this.addedOptions=null!=e.addedOptions&&e.addedOptions,this.selected=e.selected||[],this.render()},t.prototype.isComplete=function(){var e,t,n,s,o;for(o=this.value(),s=this.levels,e=0,t=s.length;e<t;e++)if(n=s[e],!o[n])return!1;return!0},t.prototype.value=function(){var e,t,n,s,o,l;for(l={},o=this.levels,e=t=0,n=o.length;t<n;e=++t)s=o[e],0!==this.$el.find("[data-index='"+e+"']").length&&(l[s]=this.$el.find("[data-index='"+e+"']").val());return l},t.prototype.renderOne=function(e){var t;return t=0===e?{}:this.value(),Loc.query(this.levels,t,function(t){var n,s,o,l;if(this.addedOptions&&(t=this.addedOptions[e].concat(t)),console.log("results: ",t),t=t.sort(function(e,t){return e.label.toLowerCase()<t.label.toLowerCase()?-1:e.label.toLowerCase()>t.label.toLowerCase()?1:0}),n=t.map(function(t){var n;return null!=this.selected[e]&&t.id===this.selected[e]&&(n="selected='selected'"),"<option value='"+t.id+"' "+(n||"")+">"+t.label+"</option>"},this),this.showTitles&&(l=this.levels[e].titleize()),s=null==this.selected[e],s&&(o="selected='selected'"),this.$el.append("<div> <label>"+(l||"")+" <select data-index='"+e+"'> <option "+(o||"")+" disabled='disabled'>Select...</option> "+n+" </select> </label> <br> </div>"),0!==this.selected.length)return e+1===this.selected.length?this.selected=[]:this.renderOne(e+1)},this)},t.prototype.render=function(){return this.renderOne(0)},t}(Backbone.View);


var Feedback,Feedbacks,extend=function(e,t){function o(){this.constructor=e}for(var r in t)hasProp.call(t,r)&&(e[r]=t[r]);return o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;Feedback=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.url="feedback",t.prototype.Child=Critique,t.prototype.ChildCollection=Critiques,t}(Backbone.ParentModel),Feedbacks=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.model=Feedback,t.prototype.url="feedback",t}(Backbone.Collection);


var FeedbackEditView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function r(){this.constructor=e}for(var o in t)hasProp.call(t,o)&&(e[o]=t[o]);return r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;FeedbackEditView=function(e){function t(){return this.render=bind(this.render,this),this.updateEditInPlaceModels=bind(this.updateEditInPlaceModels,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.events=$.extend({"click  .critique-add":"critiqueAdd","click  .critique-remove":"critiqueRemove"},Backbone.EditView.prototype.events),t.prototype.critiqueRemove=function(e){var t,r;return t=$(e.target),r=t.attr("data-model-id"),this.feedback.collection.remove(r),this.feedback.save(null,{success:function(){return Utils.topAlert("Critique removed")}})},t.prototype.initialize=function(e){var t,r;for(t in e)r=e[t],this[t]=r;return this.updateEditInPlaceModels(),this.feedback.collection.on("change add remove",function(e){return function(){return e.feedback.collection.sort(),e.updateEditInPlaceModels(),e.render()}}(this))},t.prototype.updateEditInPlaceModels=function(){return this.models=new Backbone.Collection([this.feedback].concat(this.feedback.collection.models))},t.prototype.render=function(){var e,t;return e="",this.feedback.collection.each(function(t){return function(r){return e+="<li> <table> <tr> <th>Name</th> <td>"+t.getEditable({model:r,attribute:{key:"name",escape:!0},name:"Step name",placeholder:"untitled critique"})+" </td> </tr> <tr> <th>Order</th> <td>"+t.getEditable({model:r,attribute:{key:"order",isNumber:!0},name:"Order",placeholder:"unordered"})+" </td> </tr> <tr> <th>Show notes field</th> <td>"+t.getEditable({model:r,attribute:{key:"showNotes"},name:"Show notes field",placeholder:"true or false"})+" </td> </tr> <tr> <th>Template</th> <td>"+t.getEditable({model:r,attribute:{key:"template",escape:!0},name:"Template",placeholder:"none"})+" </td> </tr> <tr> <th>Feedback Code</th> <td>"+t.getEditable({model:r,attribute:{key:"processingCode",escape:!0,coffee:!0},name:"Feedback code",placeholder:"Feedback code"})+" </td> </tr> <tr> <th>Show feedback when</th> <td>"+t.getEditable({model:r,attribute:{key:"when"},name:"Show when code",placeholder:"Show when code"})+" </td> </tr> <tr> <td><button class='command critique-remove' data-model-id='"+r.id+"'>Remove</button></td> </tr> </table> </li>"}}(this)),t="<h1>"+this.workflow.get("name")+" feedback</h1> <style> #stepList li { margin: 1em 0; border-bottom: 1px solid grey; } </style> <div class='menubox'> <div class='menubox'> <h3>Display Lesson viewer</h3> "+this.getEditable({model:this.feedback,attribute:{key:"showLessonPlan"},name:"Lesson viewer status",placeholder:"true or false",prepare:function(e){return"true"===e}})+" </div> <ul id='stepList'>"+e+"</ul> </div> <div id='controls'> <button class='critique-add command'>Add critique</button> </div>",this.$el.html(t),this.trigger("rendered")},t.prototype.critiqueAdd=function(){return this.feedback.newChild()},t}(Backbone.EditView);


var FeedbackRunView,Namespace,NotesView,extend=function(e,t){function r(){this.constructor=e}for(var n in t)hasProp.call(t,n)&&(e[n]=t[n]);return r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;Namespace=function(){function e(e){var t,r;for(t in e)r=e[t],this[t]=r}return e}(),NotesView=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="NotesView",t.prototype.initialize=function(e){return this.model=e.model,this.models=new Backbone.Collection([this.model])},t.prototype.render=function(){return this.$el.html(this.getEditable({model:this.model,attribute:{key:"notes"},name:"Notes",placeholder:"Tap here to edit"}))},t}(Backbone.EditView),FeedbackRunView=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="FeedbackRunView",t.prototype.initialize=function(e){var t,r;for(t in e)r=e[t],this[t]=r;return this.noteViews=[]},t.prototype.render=function(){var e,t,r;return t="",r=0,this.feedback.collection.each(function(e){return function(n,i){var o,s,a,c,p;a=new Namespace({critique:n,trip:e.trip,getDurationMinutes:function(){var t,r,n,i,o,s,a;i=0,o=0,t=!0,s=e.trip.attributes;for(n in s)a=s[n],(~n.indexOf("timestamp")||~n.indexOf("time_stamp"))&&(r=parseInt(a),Number.isNaN(r)||(t?(i=r,o=r,t=!1):(i=Math.max(r,i),o=Math.min(r,o))));return parseInt((i-o)/1e3/60)}});try{c=CoffeeScript.eval.apply(a,[n.getString("when")])}catch(u){o=u,Utils.midAlert("Show when code error in "+n.getString("name")+"<br>"+o)}if(c){try{CoffeeScript.eval.apply(a,[n.getString("processingCode")])}catch(u){o=u,Utils.midAlert("Processing code error in "+n.getString("name")+"<br>"+o)}try{p=_.template(n.getString("template"))}catch(u){o=u,Utils.midAlert("Error parsing template in "+n.getString("name")+"<br>"+o)}try{s=r>=1&&r<=3?" class='three'":"",t+="<div"+s+"> <h3>"+n.getString("name")+"</h3> <p>"+p(a)+"</p> </div>"}catch(u){o=u,Utils.midAlert("Error compiling template in "+n.getString("name")+"<br>"+o)}return n.shouldShowNotes()&&(t+="<div class='notes NotesView' data-model-id='"+n.id+"'></div>"),r++}}}(this)),this.$el.html("<section>"+t+"</section>"),e=this.$el.find(".notes"),e.length>0&&e.each(function(e){return function(t,r){var n,i;return n=new Result({_id:e.feedback.id+e.trip.id}),i=new NotesView({model:n}),i.setElement($(r)),e.noteViews.push(i),n.fetch({success:function(){return i.render()},error:function(){return n.save({tripId:e.trip.id},{success:function(){return i.render()}})}})}}(this)),this.trigger("rendered")},t.prototype.onClose=function(){var e,t,r,n,i;for(r=this.noteViews,n=[],e=0,t=r.length;e<t;e++)i=r[e],n.push(i.close());return n},t}(Backbone.View);


var FeedbackTripsView,WorkflowResultView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function s(){this.constructor=t}for(var n in e)hasProp.call(e,n)&&(t[n]=e[n]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;FeedbackTripsView=function(t){function e(){return this.render=bind(this.render,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="FeedbackTripsView",e.prototype.events=function(){return{"change #county":"onCountySelectionChange","change #zone":"onZoneSelectionChange","change #school":"onSchoolSelectionChange","click .show-feedback":"showFeedback","click .show-lesson-plan":"showLessonPlan","click .hide-feedback":"hideFeedback","click .hide-lesson-plan":"hideLessonPlan","click .show-survey-data":"showSurveyData","click .hide-survey-data":"hideSurveyData","click .sortable":"sortTable","click .back":"goBack"}},e.prototype.valueToHuman={english_word:"English",word:"Kiswahili",operation:"Mathematics",3:"Mother Tongue"},e.prototype.showSurveyData=function(t){var e,s,n,o;return s=$(t.target),s.toggle(),s.siblings().toggle(),n=s.attr("data-trip-id"),e=this.$el.find("."+n+"-result").append("<div><img class='loading' src='images/loading.gif'></div>").find("div"),o=new WorkflowResultView({workflow:this.workflow,trip:this.trips.get(n)}),o.setElement(e),this.subViews.push(o),this["WorkflowResultView-"+n]=o},e.prototype.hideSurveyData=function(t){var e,s;return e=$(t.target),e.toggle(),e.siblings().toggle(),s=e.attr("data-trip-id"),this.subViews=_(this.subViews).without(this["WorkflowResultView-"+s]),this["WorkflowResultView-"+s].close()},e.prototype.goBack=function(){return Tangerine.router.navigate("",!0)},e.prototype.initialize=function(t){var e,s;for(e in t)s=t[e],this[e]=s;return this.subViews=[],this.locLevels=["county","zone","school"],this.trips=new TripResultCollection,this.trips.fetch({resultView:"tutorTrips",queryKey:"workflow-"+this.workflow.id,success:function(t){return function(){return Loc.query(t.locLevels,null,function(e){return t.countyNames=e.reduce(function(t,e){return t[e.id]=e.label,t},{}),t.isReady=!0,t.render()})}}(this)})},e.prototype.hideLessonPlan=function(t){var e,s;return e=$(t.target),e.toggle(),e.siblings().toggle(),s=e.attr("data-trip-id"),this.$el.find("."+s+"-lesson").empty()},e.prototype.showLessonPlan=function(t){var e,s,n,o,i,r,a,l,c;return e=$(t.target),e.toggle(),e.siblings().toggle(),l=e.attr("data-trip-id"),a=this.trips.get(l),this.$lessonContainer=this.$el.find("."+l+"-lesson"),this.$lessonContainer.html("<img class='loading' src='images/loading.gif'>"),r={bukusu:"bukusu",kamba:"kamba",word:"kiswahili",english_word:"english",operation:"maths"}[a.get("subject")],i=a.get("subject_mother_tongue"),n=a.get("class"),c=a.get("lesson_week"),s=a.get("lesson_day"),o=new Image,$(o).on("load",function(t){return function(e){var s,n;return 0===o.height?("function"==typeof(s=t.$lessonContainer.find("img")).remove&&s.remove(),t.$lessonContainer.html("Sorry, no lesson plan available."),t.$lessonContainer.append(o)):("function"==typeof(n=t.$lessonContainer.find("img")).remove&&n.remove(),t.$lessonContainer.append(o))}}(this)),"3"===r?o.src="/"+Tangerine.db_name+"/_design/assets/lessons/"+i+"_w"+c+"_d"+s+".png":o.src="/"+Tangerine.db_name+"/_design/assets/lessons/"+r+"_c"+n+"_w"+c+"_d"+s+".png"},e.prototype.hideFeedback=function(t){var e,s;return e=$(t.target),e.toggle(),e.siblings().toggle(),s=e.attr("data-trip-id"),this.$el.find("."+s).empty()},e.prototype.showFeedback=function(t){var e,s,n,o;return e=$(t.target),e.toggle(),e.siblings().toggle(),n=e.attr("data-trip-id"),s=this.trips.get(n),o=new FeedbackRunView({trip:s,feedback:this.feedback}),o.render(),this.subViews.push(o),this.$el.find("."+n).empty().append(o.$el)},e.prototype.onClose=function(){var t,e,s,n,o;for(s=this.subViews,t=0,e=s.length;t<e;t++)o=s[t],o.close();return null!=(n=this.$lessonContainer)&&"function"==typeof n.remove?n.remove():void 0},e.prototype.sortTable=function(t){var e;return e=$(t.target).attr("data-attr"),this.sortAttribute!==e||null===this.sortAttribute?(this.sortAttribute=e,this.sortDirection=1):this.sortDirection===-1?(this.sortDirection=1,this.sortAttribute=null):1===this.sortDirection&&(this.sortDirection=-1),this.updateFeedbackList()},e.prototype.render=function(){var t,e,s,n,o;if(this.isReady&&0===this.trips.length)return this.$el.html("<h1>Feedback</h1> <button class='nav-button back'>Back</button> <p>No visits yet.</p>"),this.trigger("rendered");if(this.isReady)return o=this.trips.indexBy("county"),t=_(this.trips.pluck("county")).chain().compact().uniq().value().sort(),s=function(){var s,n,i,r;for(r=[],s=0,n=t.length;s<n;s++)e=t[s],r.push("<option value='"+_(e).escape()+"'>"+_(this.countyNames[e]).escape()+" ("+((null!=(i=o[e])?i.length:void 0)||0)+")</option>");return r}.call(this).join(""),s="<option disabled='disabled' selected='selected'>Select a county</option>"+s,n="<h1>Feedback</h1> <h2>Visits</h2> <div id='county-selection'> <label for='county'>County</label> <select id='county'> "+s+" </select> </div> <div id='zone-selection'> <label for='zone'>Zone</label> <select id='zone'> <option disabled='disabled' selected='selected'></option> </select> </div> <div id='school-selection'> <label for='school'>School</label> <select id='school'> <option disabled='disabled' selected='selected'></option> </select> </div> <br> <div id='feedback-list'> </div>",this.$el.html(n),this.trigger("rendered")},e.prototype.onCountySelectionChange=function(t){var e;return this.selectedCounty=$(t.target).val(),e=this.trips.indexBy("county"),Loc.query(this.locLevels,{county:this.selectedCounty},function(t){return function(s){var n,o,i,r,a,l,c,u,d;for(t.zoneNames=s.reduce(function(t,e){return t[e.id]=e.label,t},{}),d=_(e[t.selectedCounty]).chain().map(function(t){return t.attributes.zone}).compact().uniq().value().sort(),u="",o=0,i=d.length;o<i;o++)c=d[o],n=(null!=(r=e[t.selectedCounty])&&"function"==typeof r.map&&null!=(a=r.map(function(t){return t.get("zone")}).filter(function(t){return t===c}))?a.length:void 0)||0,u+="<option value='"+_(c).escape()+"'>"+t.zoneNames[c]+" ("+n+")</option>";return u="<option disabled='disabled' selected='selected'>Select a zone</option>"+u,t.$el.find("#zone").html(u),null!=(null!=(l=e[t.selectedCounty])&&"function"==typeof l.map?l.map(function(t){return t.get("zone")}).filter:void 0),function(t){return t===c}.length||0}}(this))},e.prototype.onZoneSelectionChange=function(t){var e,s;return this.selectedZone=$(t.target).val(),s=this.trips.indexBy("zone"),e=_(s[this.selectedZone]).chain().map(function(t){return t.attributes.school}).compact().uniq().value().sort(),Loc.query(this.locLevels,{county:this.selectedCounty,zone:this.selectedZone},function(t){return function(n){var o,i,r,a,l,c,u,d;for(t.schoolNames=n.reduce(function(t,e){return t[e.id]=e.label,t},{}),d="",i=0,r=e.length;i<r;i++)u=e[i],o=(null!=(a=s[t.selectedZone])&&"function"==typeof a.map&&null!=(l=a.map(function(t){return t.get("school")}).filter(function(t){return t===u}))?l.length:void 0)||0,d+="<option value='"+_(u).escape()+"'>"+_(t.schoolNames[u]).escape()+" ("+o+")</option>";return d="<option disabled='disabled' selected='selected'>Select a school</option>"+d,t.$el.find("#school").html(d),null!=(null!=(c=s[t.selectedZone])&&"function"==typeof c.map?c.map(function(t){return t.get("school")}).filter:void 0),function(t){return t===zone}.length||0}}(this))},e.prototype.getSortArrow=function(t){return this.sortAttribute===t&&1===this.sortDirection?"&#x25bc;":this.sortAttribute===t&&this.sortDirection===-1?"&#x25b2;":""},e.prototype.onSchoolSelectionChange=function(t){return this.selectedSchool=this.$el.find("#school").val(),this.selectedZone=this.$el.find("#zone").val(),this.selectedCounty=this.$el.find("#county").val(),this.selectedTrips=this.trips.where({county:this.selectedCounty,zone:this.selectedZone,school:this.selectedSchool}),this.updateFeedbackList()},e.prototype.updateFeedbackList=function(){var t,e,s,n,o,i,r,a,l,c,u,d,h;for(c="subject"===(i=this.sortAttribute)||"stream"===i?function(t){return function(e,s){var n;return e=e.getString(t.sortAttribute),s=s.getString(t.sortAttribute),n=e<s?-1:e>s?1:0,n*t.sortDirection}}(this):function(t){return function(e,s){return(s.get(t.sortAttribute)-e.get(t.sortAttribute))*t.sortDirection}}(this),this.selectedTrips=this.selectedTrips.sort(c),t="<h2>"+(this.schoolNames[null!=(r=this.selectedTrips[0])&&"function"==typeof r.get?r.get("school"):void 0]||"")+"</h2> <table id='feedback-table'> <thead> <tr> <th nowrap class='sortable' data-attr='subject'>Subject "+this.getSortArrow("subject")+"</th> <th nowrap class='sortable' data-attr='class'>Class "+this.getSortArrow("class")+"</th> <th nowrap class='sortable' data-attr='stream'>Stream "+this.getSortArrow("stream")+"</th> <th nowrap class='sortable' data-attr='start_time'>Observation Start Time "+this.getSortArrow("start_time")+"</span></th> <th nowrap class='sortable' data-attr=''>&nbsp;</th> </tr> </thead> <tbody>",a=this.selectedTrips,s=e=0,n=a.length;e<n;s=++e)d=a[s],h=d.get("tripId"),this.feedback.get("showLessonPlan")||(o="<button class='command show-lesson-plan' data-trip-id='"+h+"'>Show lesson plan</button> <button class='command hide-lesson-plan' data-trip-id='"+h+"' style='display:none;'>Hide lesson plan</button>"),u=this.valueToHuman[d.get("subject")]||"",l="<button class='command show-survey-data' data-trip-id='"+h+"'>Show survey data</button> <button class='command hide-survey-data' data-trip-id='"+h+"' style='display:none;'>Hide survey data</button>",t+="<tr> <td id='subject-"+s+"'>"+u+"</td> <td>"+d.getString("class")+"</td> <td>"+d.getString("stream")+"</td> <td>"+moment(d.get("start_time")).format("MMM-DD HH:mm")+"</td> <td> <button class='command show-feedback' data-trip-id='"+h+"'>Show feedback</button> <button class='command hide-feedback' data-trip-id='"+h+"' style='display:none;'>Hide feedback</button> </td> <td> "+(o||"")+" </td> <td> "+(l||"")+" </td> </tr> <tr> <td colspan='5' class='"+h+"-result'></td> </tr> <tr> <td colspan='5' class='"+h+"'></td> </tr> <tr> <td colspan='5' class='"+h+"-lesson'></td> </tr>";return t+="</tbody></table>",this.$el.find("#feedback-list").html(t)},e}(Backbone.View),WorkflowResultView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.events={"change select":"updateDisplay"},e.prototype.updateDisplay=function(){var t;return this.$el.find(".result-display").hide(),t=this.$el.find("select").val(),this.$el.find(".subtest-"+t).show()},e.prototype.initialize=function(t){var e,s,n,o,i,r;i=this;for(n in t)r=t[n],this[n]=r;return s=_(this.workflow.getChildren()).where({type:"assessment"}),e=s.map(function(t){return{_id:t.typesId}}),o=function(t){var s,n;return 0===e.length?i.render():(n=e.pop(),s=new Assessment(n),t.push(s),s.fetch({error:function(){return alert("Loading assessment failed. Please try again.")},success:function(){return s.questions=new Questions,s.questions.fetch({key:s.id,success:function(){return o(t)}})}}))},this.assessments=[],o(this.assessments)},e.prototype.render=function(){var t,e,s,n,o,i,r,a,l,c,u,d,h,p,g,f,b,y,m,v,w,k,_,$,S,C,V,z,T;for(y=[],s="",n=!0,v=this.assessments,r=0,u=v.length;r<u;r++)for(e=v[r],w=e.subtests.models,a=0,d=w.length;a<d;a++)if(C=w[a],"survey"===C.get("prototype")){for(o=n?"":"style='display:none;'",n&&(n=!1),s+="<section "+o+" class='subtest-"+C.id+" result-display'>",y+="<option value='"+C.id+"'>"+C.get("name")+"</option>",k=e.questions.models,l=0,h=k.length;l<h;l++)if(m=k[l],m.get("subtestId")===C.id){if(V="",z=m.get("type"),"single"===z)for(_=m.get("options"),c=0,p=_.length;c<p;c++)b=_[c],t=this.trip.get(m.get("name"))?this.trip.get(m.get("name"))===b.value?"<span style='color:green'>checked</span>":"<span style='color:red'>unchecked</span>":"<span color='grey'>no data</span>",V+="<tr> <th>"+b.label+"</th> <td>"+t+"</td> </tr>";else if("multiple"===z)for($=m.get("options"),f=0,g=$.length;f<g;f++)b=$[f],T=this.trip.get(m.get("name")+"_"+b.value),t=T?1===this.trip.get(m.get("name")+"_"+b.value)?"<span style='color:green'>checked</span>":"<span style='color:red'>unchecked</span>":"<span color='grey'>no data</span>",V+="<tr> <th>"+b.label+"</th> <td>"+t+"</td> </tr>";else V+="<tr> <td colspan='2'>"+this.trip.get(m.get("name"))+"</td> </tr>";s+="<h3>"+m.get("prompt")+"</h3> <table>"+V+"</table>"}s+="</section>"}return S="<select>"+y+"</select>",i="<h2>Section</h2> "+S+" "+s,this.$el.html(i)},e}(Backbone.View);


var TripResult,extend=function(t,o){function e(){this.constructor=t}for(var r in o)hasProp.call(o,r)&&(t[r]=o[r]);return e.prototype=o.prototype,t.prototype=new e,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;TripResult=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.initialize=function(){},o.prototype.fetch=function(){},o.prototype.save=function(){},o.prototype.getVariable=function(t){var o;return o=_(this.get("data")).where({key:t}),o.length>0?o[0].value:"not found"},o.prototype.add=function(t){return _(t).isArray()||(t=[t]),this.models=this.models.concat(t)},o}(Backbone.Model);


var User,bind=function(n,e){return function(){return n.apply(e,arguments)}},extend=function(n,e){function t(){this.constructor=n}for(var r in e)hasProp.call(e,r)&&(n[r]=e[r]);return t.prototype=e.prototype,n.prototype=new t,n.__super__=e.prototype,n},hasProp={}.hasOwnProperty;User=function(n){function e(){return this.fetch=bind(this.fetch,this),this.sessionRefresh=bind(this.sessionRefresh,this),this.login=bind(this.login,this),this.signup=bind(this.signup,this),e.__super__.constructor.apply(this,arguments)}return extend(e,n),e.prototype.url="user",e.prototype.initialize=function(n){return this.myRoles=[],this.myName=null,this.myPass=null},e.prototype.name=function(){return this.myName||null},e.prototype.myPass=function(){return this.myPass||null},e.prototype.roles=function(){return this.myRoles||null},e.prototype.recentUsers=function(){return($.cookie("recentUsers")||"").split(",")},e.prototype.signup=function(n,e){return Tangerine.log.app("User-signup",n),Robbert.signup({name:n,pass:e,success:function(t){return function(){if("login"===t.intent)return t.intent="retry_login",t.login(n,e)}}(this),error:function(n){return function(e){return n.intent=null,alert("Signup error\n"+e.toString())}}(this)})},e.prototype.groups=function(){return this.getArray("roles").reduce(function(n,e){return e.indexOf("admin-")!==-1?n.admin.push(e.substr(6,e.length)):e.indexOf("member-")!==-1&&n.member.push(e.substr(7,e.length)),n},{admin:[],member:[]})},e.prototype.login=function(n,e,r){return null==r&&(r={}),Tangerine.log.app("User-login-attempt",n),$.couch.login({name:n,password:e,success:function(t){return function(o){return t.intent="",t.myName=n,t.pass=e,t.myPass=e,t.myRoles=o.roles,Tangerine.log.app("User-login-success",n),t.fetch({success:function(){var n;return"function"==typeof r.success&&r.success(),t.trigger("login"),n=t.recentUsers().filter(function(n){return!~n.indexOf(t.name())}),n.unshift(t.name()),n.length>=t.RECENT_USER_MAX&&n.pop(),$.cookie("recentUsers",n)}})}}(this),error:function(r){return function(o,s,i){return"retry_login"===r.intent?(r.intent="",r.trigger("pass-error",t("LoginView.message.error_password_incorrect")),Tangerine.log.app("User-login-fail",n+" password incorrect")):(r.intent="login",r.signup(n,e))}}(this)})},e.prototype.sessionRefresh=function(n){return $.couch.session({success:function(e){return function(t){return null!=t.userCtx.name?(e.myName=t.userCtx.name,e.myRoles=t.userCtx.roles,e.fetch({success:function(){return e.trigger("login"),n.success.apply(e,arguments),Tangerine.log.app("User-login","Resumed session")}})):n.success.apply(e,arguments)}}(this),error:function(){return alert("Couch session error.\n\n"+arguments.join("\n"))}})},e.prototype.verify=function(n){return null===this.myName?null!=(null!=n?n.isUnregistered:void 0)?n.isUnregistered():Tangerine.router.navigate("login",!0):(null!=n&&"function"==typeof n.isAuthenticated&&n.isAuthenticated(),this.isAdmin()?null!=n&&"function"==typeof n.isAdmin?n.isAdmin():void 0:null!=n&&"function"==typeof n.isUser?n.isUser():void 0)},e.prototype.isAdmin=function(){var n,e;return e=this.getArray("roles").indexOf("_admin")!==-1,n=this.groups().admin.indexOf(Tangerine.settings.get("groupName"))!==-1,!!n||!!e},e.prototype.logout=function(){return $.couch.logout({success:function(n){return function(){return $.removeCookie("AuthSession"),n.myName=null,n.myPass=null,n.pass=null,n.myRoles=[],n.clear(),n.trigger("logout"),Tangerine.log.app("User-logout","logout"),window.location=Tangerine.settings.urlIndex("trunk")}}(this)})},e.prototype.save=function(n,e,t){var r;return r={},_.isObject(n)?(r=$.extend(r,n),t=e):r[n]=value,$.couch.userDb(function(n){return function(e){return e.saveDoc($.extend(n.attributes,r),{success:function(){var e;return null!=(e=t.success)?e.apply(n,arguments):void 0}})}}(this))},e.prototype.fetch=function(n){return null==n&&(n={}),$.couch.userDb(function(e){return function(t){return t.openDoc("org.couchdb.user:"+e.myName,{success:function(t){return e.set(t),"function"==typeof n.success?n.success(t):void 0},error:function(){return"function"==typeof n.error?n.error(userDoc):void 0}})}}(this))},e.prototype.setPreferences=function(n,e,t){var r;return null==n&&(n="general"),null==e&&(e=""),null==t&&(t=""),r=this.get("preferences")||{},null==r[n]&&(r[n]={}),r[n][e]=t,this.save({preferences:r})},e.prototype.getPreferences=function(n,e){var t,r;return null==n&&(n="general"),null==e&&(e=""),t=this.get("preferences"),""===e?(null!=t?t[n]:void 0)||null:(null!=t&&null!=(r=t[n])?r[e]:void 0)||null},e.prototype.joinGroup=function(n,e){return null==e&&(e={}),Utils.working(!0),Robbert.newGroup({name:n,success:function(n){return function(t){return Utils.working(!1),Utils.midAlert(t.message),n.fetch({success:function(){return"function"==typeof e.success&&e.success(t),n.trigger("groups-update")}})}}(this),error:function(n){return function(n){return Utils.working(!1),Utils.midAlert((n.responseJSON||{}).message||"Error creating group"),"function"==typeof e.error?e.error(n):void 0}}(this)})},e.prototype.leaveGroup=function(n,e){return null==e&&(e={}),Utils.working(!0),Robbert.leaveGroup({user:this.get("name"),group:n,success:function(n){return function(t){return n.fetch({success:function(){return Utils.working(!1),n.trigger("groups-update"),Utils.midAlert(t.message),"function"==typeof e.success?e.success(t):void 0}})}}(this),error:function(n){return function(n){return Utils.working(!1),Utils.midAlert("Error leaving group\n"+n.responseJSON),"function"==typeof e.error?e.error(n):void 0}}(this)})},e.prototype.ghostLogin=function(n,e){var t;return Tangerine.log.db("User","ghostLogin"),t=encodeURIComponent(window.location.toString()),document.location=Tangerine.settings.location.group.url.replace(/\:\/\/.*@/,"://")+("_ghost/"+n+"/"+e+"/"+t)},e}(Backbone.Model);


var Users,extend=function(r,t){function o(){this.constructor=r}for(var e in t)hasProp.call(t,e)&&(r[e]=t[e]);return o.prototype=t.prototype,r.prototype=new o,r.__super__=t.prototype,r},hasProp={}.hasOwnProperty;Users=function(r){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,r),t.prototype.url="user",t.prototype.model=User,t}(Backbone.Collection);


var LoginView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function n(){this.constructor=e}for(var r in t)hasProp.call(t,r)&&(e[r]=t[r]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty,indexOf=[].indexOf||function(e){for(var t=0,n=this.length;t<n;t++)if(t in this&&this[t]===e)return t;return-1};LoginView=function(e){function n(){return this.onClose=bind(this.onClose,this),this.afterRender=bind(this.afterRender,this),this.render=bind(this.render,this),this.recenter=bind(this.recenter,this),n.__super__.constructor.apply(this,arguments)}return extend(n,e),n.prototype.className="LoginView",n.prototype.events=Modernizr.touch?{"keypress input":"keyHandler","change input":"onInputChange","change select#name":"onSelectChange","click .mode":"updateMode","click button":"action","click .recent":"showRecent","blur .recent":"blurRecent","keyup #new_name":"checkNewName"}:{"keypress input":"keyHandler","change input":"onInputChange","change select#name":"onSelectChange","click .mode":"updateMode","click button":"action","click .recent":"showRecent","blur .recent":"blurRecent","keyup #new_name":"checkNewName"},n.prototype.initialize=function(e){return $(window).on("orientationchange scroll resize",this.recenter),this.mode="login",this.i18n(),this.users=e.users,this.user=Tangerine.user,this.user.on("login",this.goOn),this.user.on("pass-error",function(e){return function(t){return e.passError(t)}}(this)),this.user.on("name-error",function(e){return function(t){return e.nameError(t)}}(this)),this.oldBackground=$("body").css("background"),$("body").css("background","white"),$("#footer").hide()},n.prototype.checkNewName=function(e){var t,n;return t=$(e.target),n=t.val().toLowerCase()||"",n.length>4&&indexOf.call(this.users.pluck("name"),n)>=0?this.nameError(this.text.error_name_taken):this.clearErrors()},n.prototype.onInputChange=function(e){var t,n;t=$(e.target),n=t.attr("type")},n.prototype.showRecent=function(){return this.$el.find("#name").autocomplete({source:this.user.recentUsers(),minLength:0}).autocomplete("search","")},n.prototype.blurRecent=function(){return this.$el.find("#name").autocomplete("close"),this.initAutocomplete()},n.prototype.recenter=function(){return this.$el.middleCenter()},n.prototype.i18n=function(){return this.text={login:t("LoginView.button.login"),sign_up:t("LoginView.button.sign_up"),login_tab:t("LoginView.label.login"),sign_up_tab:t("LoginView.label.sign_up"),user:_(t("LoginView.label.user")).escape(),teacher:_(t("LoginView.label.teacher")).escape(),enumerator:_(t("LoginView.label.enumerator")).escape(),password:t("LoginView.label.password"),password_confirm:t("LoginView.label.password_confirm"),error_name:t("LoginView.message.error_name_empty"),error_pass:t("LoginView.message.error_password_empty"),error_name_taken:t("LoginView.message.error_name_taken")}},n.prototype.onSelectChange=function(e){var t;return t=$(e.target),"*new"===t.val()?this.updateMode("signup"):this.$el.find("#pass").focus()},n.prototype.goOn=function(){return Tangerine.router.landing()},n.prototype.updateMode=function(e){var t,n,r;switch(r=$(e.target),this.mode=r.attr("data-mode"),r.parent().find(".selected").removeClass("selected"),r.addClass("selected"),t=this.$el.find(".login"),n=this.$el.find(".signup"),this.mode){case"login":t.show(),n.hide();break;case"signup":t.hide(),n.show()}return this.$el.find("input")[0].focus()},n.prototype.render=function(){var e,t;return t=this.text.user,t=t.titleize(),e="<img src='images/tangerine_logo_small.png' id='login_logo'> <div id='name_message' class='messages'></div> <input type='text' id='name' placeholder='"+t+"'> <div id='pass_message' class='messages'></div> <input id='pass' type='password' placeholder='"+this.text.password+"'> <button class='login'>"+this.text.login+"</button>",this.$el.html(e),this.nameMsg=this.$el.find(".name_message"),this.passMsg=this.$el.find(".pass_message"),this.trigger("rendered")},n.prototype.afterRender=function(){return this.recenter()},n.prototype.onClose=function(){return $("#footer").show(),$("body").css("background",this.oldBackground)},n.prototype.keyHandler=function(e){var t,n,r;return r={ENTER:13,TAB:9,BACKSPACE:8},$(".messages").html(""),t=e.which,null==t||(n=t===r.ENTER||e.keyCode===r.TAB||e.keyCode===r.BACKSPACE,t===r.ENTER?this.action():void 0)},n.prototype.action=function(){return"login"===this.mode&&this.login(),"signup"===this.mode&&this.signup(),!1},n.prototype.signup=function(){var e,t,n,r,s,i,o;s=(e=this.$el.find("#new_name")).val().toLowerCase(),i=(t=this.$el.find("#new_pass_1")).val(),o=(n=this.$el.find("#new_pass_2")).val(),i!==o&&this.passError(this.text.pass_mismatch);try{return this.user.signup(s,i)}catch(a){return r=a,console.log(r),this.nameError(r)}},n.prototype.login=function(){var e,t,n,r,s;if(r=(e=this.$el.find("#name")).val(),s=(t=this.$el.find("#pass")).val(),this.clearErrors(),""===r&&this.nameError(this.text.error_name),""===s&&this.passError(this.text.error_pass),0===this.errors)try{this.user.login(r,s)}catch(i){n=i,this.nameError(n)}return!1},n.prototype.passError=function(e){return this.errors++,this.passMsg.html(e),this.$el.find("#pass").focus()},n.prototype.nameError=function(e){return this.errors++,this.nameMsg.html(e),this.$el.find("#name").focus()},n.prototype.clearErrors=function(){return this.nameMsg.html(""),this.passMsg.html(""),this.errors=0},n}(Backbone.View);


var AccountView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function n(){this.constructor=e}for(var r in t)hasProp.call(t,r)&&(e[r]=t[r]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;AccountView=function(e){function t(){return this.renderGroups=bind(this.renderGroups,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="AccountView",t.prototype.events={"click .leave":"leaveGroup","click .join_cancel":"joinToggle","click .join":"joinToggle","click .join_group":"join","click .back":"goBack","click .update":"update","click .restart":"restart","click .send_debug":"sendDebug","click .edit_in_place":"editInPlace","focusout .editing":"editing","keyup    .editing":"editing","keydown  .editing":"editing","click .change_password":"togglePassword","click .confirm_password":"saveNewPassword"},t.prototype.togglePassword=function(){var e;if(e=this.$el.find(".password_menu"),e.toggle(),e.is(":visible"))return this.$el.find("#new_password").focus().scrollTo()},t.prototype.saveNewPassword=function(){var e;return e=this.$el.find(".new_password").val(),Tangerine.user.setPassword(e),Tangerine.user.save(null,{success:function(e){return function(){return e.$el.find(".new_password").val(""),e.togglePassword(),Utils.midAlert("Password changed")}}(this)})},t.prototype.sendDebug=function(){return Tangerine.$db.view(Tangerine.design_doc+"/byCollection",{keys:["teacher","klass","student","config","settings"],success:function(e){var t,n;return t="debug-report-"+Tangerine.settings.get("instanceId"),n=function(e,t,n){var r;return null==t&&(t=null),r={_id:n,_rev:t,docs:_.pluck(e.rows,"value"),collection:"debug_report"},null==r._rev&&delete r._rev,Tangerine.$db.saveDoc(r,{success:function(){return $.couch.replicate(Tangerine.db_name,Tangerine.settings.urlDB("group"),{success:function(){return Utils.sticky("Debug report sent","Ok")}},{doc_ids:[n]})}})},Tangerine.$db.openDoc(t,{success:function(r){return n(e,r._rev,t)},error:function(r){return n(e,null,t)}})}})},t.prototype.update=function(){var e;return e=this.$el.find("#attempt_resolve").is(":checked"),Utils.updateTangerine(e)},t.prototype.restart=function(){return Utils.restartTangerine()},t.prototype.goBack=function(){return Tangerine.router.navigate("groups",!0)},t.prototype.joinToggle=function(){return this.$el.find(".join, .join_confirmation").fadeToggle(0),this.$el.find("#group_name").val("")},t.prototype.join=function(){var e;if(e=this.$el.find("#group_name").val().databaseSafetyDance(),0!==e.length)return this.user.joinGroup(e,function(e){return function(){return e.joinToggle()}}(this))},t.prototype.leaveGroup=function(e){var t;return t=$(e.target).parent().attr("data-group"),this.user.leaveGroup(t)},t.prototype.initialize=function(e){var t;return this.user=e.user,this.teacher=e.teacher,t=[],null!=this.user&&t.push(this.user),null!=this.teacher&&t.push(this.teacher),this.models=new Backbone.Collection(t),this.listenTo(this.user,"groups-update",this.renderGroups)},t.prototype.renderGroups=function(){var e,t;return e=function(e){return"<li data-group='"+_.escape(e)+"'>"+e+" <button class='command leave'>Leave</button></li>"},t="<ul>",t+=this.user.groups().admin.map(function(t){return e(t)}).join(""),t+=this.user.groups().member.map(function(t){return e(t)}).join(""),t+="</ul>",this.$el.find("#group_wrapper").html(t)},t.prototype.render=function(){var e,t,n;return e="<section> <div class='label_value'> <label>Groups</label> <div id='group_wrapper'></div> <button class='command join'>Join or create a group</button> <div class='confirmation join_confirmation'> <div class='menu_box'> <input id='group_name' placeholder='Group name'> <div class='small_grey'>Please be specific.<br> Good examples: malawi_jun_2012, mike_test_group_2012, egra_group_aug-2012<br> Bad examples: group, test, mine</div><br> <button class='command join_group'>Join Group</button> <button class='command join_cancel'>Cancel</button> </div> </div> </section>",n=this.getEditableRow({key:"email",name:"Email"},this.user)+this.getEditableRow({key:"first",name:"First name"},this.user)+this.getEditableRow({key:"last",name:"Last name"},this.user),t="<button class='back navigation'>Back</button> <h1>Manage</h1> <section> <h2>Account</h2> <table class='class_table'> <tr> <td style='color:black'>Name</td> <td style='color:black'>"+this.user.name()+"</td> </tr> "+(n||"")+" </table> </section> "+(e||"")+" </div>",this.$el.html(t),this.renderGroups(),this.trigger("rendered")},t.prototype.getEditableRow=function(e,t){return"<tr><td>"+e.name+"</td><td>"+this.getEditable(e,t)+"</td></tr>"},t.prototype.getEditable=function(e,t){var n,r,i;return i=null!=e.key?t.get(e.key):"&nbsp;",i=e.escape?t.escape(e.key):i,(null==i||_.isEmptyString(i))&&(i="not set"),n=e.editable?"class='edit_in_place'":"",r=_.isNumber(i)?"data-isNumber='true'":"data-isNumber='false'","<div class='edit_in_place'><span data-modelId='"+t.id+"' data-key='"+e.key+"' data-value='"+i+"' data-name='"+e.name+"' "+n+" "+r+">"+i+"</div></div>"},t.prototype.editInPlace=function(e){var t,n,r,i,a,o,s,u,c,l,d,p,g,h;if(!this.alreadyEditing&&(this.alreadyEditing=!0,t=$(e.target),r=t.parent(),this.$oldSpan=t.clone(),!t.hasClass("editing")))return o=Utils.guid(),u=t.attr("data-key"),p=t.attr("data-name"),s="true"===t.attr("data-isNumber"),d=t.attr("data-modelId"),l=this.models.get(d),g=l.get(u)||"","not set"===g&&(g=""),n=$(e.target),a=(n.attr("class")||"").replace("settings",""),c=n.css("margin"),h="data-isNumber='"+s+"' data-key='"+u+"' data-modelId='"+d+"' ",r.html("<textarea placeholder='"+p+"' id='"+o+"' rows='"+(1+g.count("\n"))+"' "+h+" class='editing "+a+"' style='margin:"+c+"' data-name='"+p+"'>"+g+"</textarea>"),i=$("#"+o),i.focus()},t.prototype.editing=function(e){var t,n,r,i,a,o,s,u,c,l;return t=$(e.target),n=t.parent(),27===e.which||"focusout"===e.type?(t.remove(),n.html(this.$oldSpan),void(this.alreadyEditing=!1)):13!==e.which||"keydown"!==e.type||(this.alreadyEditing=!1,a=t.attr("data-key"),i="true"===t.attr("data-isNumber"),s=t.attr("data-modelId"),u=t.attr("data-name"),o=this.models.get(s),l=o.get(a),c=t.val(),c=i?parseInt(c):c,String(c)!==String(l)&&(r={},r[a]=c,o.save(r,{success:function(e){return function(){return Utils.midAlert(u+" saved"),o.fetch({success:function(){return null!=e.updateDisplay?e.updateDisplay():e.render()}})}}(this),error:function(e){return function(){return o.fetch({success:function(){return null!=e.updateDisplay?e.updateDisplay():e.render(),alert("Please try to save again, it didn't work that time.")}})}}(this)})),!1)},t.prototype.goBack=function(){return window.history.back()},t}(Backbone.View);


var GroupsView,extend=function(t,o){function e(){this.constructor=t}for(var r in o)hasProp.call(o,r)&&(t[r]=o[r]);return e.prototype=o.prototype,t.prototype=new e,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;GroupsView=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.className="GroupsView",o.prototype.events={"click .account":"gotoAccount","click .goto":"gotoGroup","click .newProject":"newProject","click .viewProject":"viewProject","contextmenu .viewProject":"showTooltip"},o.prototype.initialize=function(){return Robbert.fetchUsers,$.ajax({url:"/editor/project/listAll",type:"GET",dataType:"json",contentType:"application/json",success:function(t){return function(o){return t.projects=o,console.log("Projects: "+JSON.stringify(t.projects)),t.renderGroups("")}}(this),error:function(t){return function(t){return alert("Error: "+t)}}(this)})},o.prototype.gotoAccount=function(){return Tangerine.router.navigate("account",!0)},o.prototype.gotoGroup=function(t){var o;return o=$(t.target).attr("data-group"),window.location=Tangerine.settings.urlIndex(o,"assessments")},o.prototype.viewProject=function(t){var o;return o=$(t.target).attr("data-group"),console.log("take me to there: "+o),window.location="/editor/projects/"+o+"/content/"},o.prototype.showTooltip=function(t){var o,e;o=$(t.target).attr("data-group"),e=$(t.target).attr("title"),console.log("text: "+e),window.prompt("Copy to clipboard: Ctrl+C, Enter",e)},o.prototype.leaveTooltip=function(t){var o,e,r;return o=$(t.target).attr("data-group"),r="#"+o+"tooltip",e=$(r),e[0].style.display="none"},o.prototype.newProject=function(t){var o;return o=$("#projectName").val(),console.log("projectName: "+o),$.ajax({url:"/editor/project/create",type:"POST",dataType:"json",contentType:"application/json",data:JSON.stringify({projectName:o}),success:function(t){return function(o){return console.log("Project created: "+JSON.stringify(o.dirs)),t.projects=o.dirs,t.$el.find("#group-list-container").html(""),t.renderGroups("")}}(this),error:function(t){return function(t){return console.log("Project creation error: "+JSON.stringify(t)),alert("Project creation error: "+JSON.stringify(t))}}(this)})},o.prototype.renderGroups=function(t){return this.$el.find("#group-list-container").html("<h2>v3 Projects</h2>"+t+" <p>Create new project: <input type='text' id='projectName' style='width: 200px;'> <button class='command newProject'>Create</button></p>\n <p>Right-click on the project name to view its dat id.</p> <p>"+this.projects.map(function(t){return"<button class='command viewProject' data-group='"+_.escape(t.projectName)+"' title='"+t.datKey+"'>"+t.projectName+"</button>"}).join("")+"</p> <h2>v2 Groups</h2> <h3>Admin</h3> <p>"+Tangerine.user.groups().admin.map(function(t){return"<button class='command goto' data-group='"+_.escape(t)+"'>"+t+"</button>"}).join("")+"</p> <h3>Member</h3> "+Tangerine.user.groups().member.map(function(t){return"<button class='command goto' data-group='"+_.escape(t)+"'>"+t+"</button>"}).join(""))},o.prototype.render=function(){return this.$el.html("<button class='account navigation'>Account</button> <h1>Groups</h1> <div id='group-adder'></div> <div id='group-list-container'><img src='images/loading.gif' class='loading'></div>"),this.trigger("rendered")},o}(Backbone.View);


var UsersMenuView,bind=function(e,t){return function(){return e.apply(t,arguments)}},extend=function(e,t){function r(){this.constructor=e}for(var n in t)hasProp.call(t,n)&&(e[n]=t[n]);return r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty;UsersMenuView=function(e){function t(){return this.refreshUsers=bind(this.refreshUsers,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="UsersMenuView",t.prototype.events={"click .admin":"selectAdmin","click .reader":"selectReader","click #add-admin":"addAdmin","click #remove-admin":"removeAdmin","click #add-member":"addMember","click #remove-member":"removeMember"},t.prototype.selectAdmin=function(e){return this.$el.find("#selected-admin").val($(e.target).attr("data-name"))},t.prototype.selectReader=function(e){return this.$el.find("#selected-member").val($(e.target).attr("data-name"))},t.prototype.addAdmin=function(){var e;return e=this.$el.find("#selected-admin").val(),Robbert.addAdmin(e,this.refreshUsers)},t.prototype.removeAdmin=function(){var e;return e=this.$el.find("#selected-admin").val(),Robbert.removeAdmin(e,this.refreshUsers)},t.prototype.addMember=function(){var e;return e=this.$el.find("#selected-member").val(),Robbert.addMember(e,this.refreshUsers)},t.prototype.removeMember=function(){var e;return e=this.$el.find("#selected-member").val(),Robbert.removeMember(e,this.refreshUsers)},t.prototype.refreshUsers=function(){return Robbert.fetchUsers(Tangerine.settings.get("groupName"),function(e){return function(t){return e.renderUsers(t)}}(this))},t.prototype.renderUsers=function(e){var t,r;return t=e.admin.map(function(e){return"<li data-name='"+_.escape(e)+"' class='admin icon'>"+_.escape(e)+"</li>"}).join(""),r=0===e.member.length?"<span class='grey'>No members yet.</span>":e.member.map(function(e){return"<li data-name='"+_.escape(e)+"' class='member icon'>"+_.escape(e)+"</li>"}).join(""),this.$el.find("#users-row").html("<td><ul id='admin-container' multiple='multiple' size='5'>"+t+"</ul></td> <td><ul id='member-container' multiple='multiple' size='5'>"+r+"</ul></td>")},t.prototype.render=function(){return this.$el.html("<h1>Users</h1> <table> <tr> <th>Admins</th> <th>Members</th> </tr> <tr> <td> <input id='selected-admin'  value=''> <button id='add-admin' class='command'>+</button> <button id='remove-admin' class='command'>-</button> </td> <td> <input id='selected-member' value=''> <button id='add-member' class='command'>+</button> <button id='remove-member' class='command'>-</button> </td> </tr> <tr id='users-row'> </tr>"),this.refreshUsers()},t}(Backbone.View);


var AssessmentPrintView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function n(){this.constructor=t}for(var r in e)hasProp.call(e,r)&&(t[r]=e[r]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;AssessmentPrintView=function(t){function e(){return this.afterRender=bind(this.afterRender,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="AssessmentPrintView",e.prototype.initialize=function(t){return this.abortAssessment=!1,this.index=0,this.model=t.model,this.format=t.format,Tangerine.activity="assessment print",this.subtestViews=[],this.model.subtests.sort(),this.model.subtests.each(function(t){return function(e){var n;return n=new SubtestPrintView({model:e,parent:t,format:t.format}),n.on("rendered",function(t){return null!=t&&"function"==typeof t.afterRender?t.afterRender():void 0}),t.subtestViews.push(n)}}(this))},e.prototype.render=function(){return 0===this.model.subtests.length?this.$el.append("<h1>Oops...</h1><p>This assessment is blank. Perhaps you meant to add some subtests.</p>"):(this.$el.addClass("format-"+this.format).append('<style> @page :right { @bottom-right-corner { content: counter(page) " of " counter(pages); }} table.print-metadata td{ border: solid black 1px; } table.print-content.question-attributes{ margin: 10px; } table.print-content.question-options{ margin-bottom: 5px; } table.print-content{ border: solid black 1px; } table.print-content td{ border: solid black 1px; } .AssessmentPrintView #prototype_wrapper .print-page.content { height: auto; } </style> <div class=\'print-page '+this.format+"'> <h2>"+this.model.get("name").titleize()+"</h2> <h3> "+(this.model.has("updated")?"Last Updated: "+moment(this.model.get("updated")):"")+" </h3> <table class='marking-table'> <tr> <td style='vertical-align:middle'>Enumerator Name</td><td class='marking-area'></td> </tr> </table> </div> <hr/>"),_.each(this.subtestViews,function(t){return function(e){return e.render(),t.$el.append(e.el)}}(this))),this.trigger("rendered")},e.prototype.afterRender=function(){return _.delay(function(){return $("#navigation").hide(),$("#footer").hide()},1e3)},e}(Backbone.View);


var QuestionPrintView,extend=function(t,e){function i(){this.constructor=t}for(var s in e)hasProp.call(e,s)&&(t[s]=e[s]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;QuestionPrintView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.initialize=function(t){if(this.model=t.model,this.answer={},this.name=this.model.escape("name").replace(/[^A-Za-z0-9_]/g,"-"),this.type=this.model.get("type"),this.options=this.model.get("options"),this.notAsked=t.notAsked,this.isObservation=t.isObservation,this.parent=t.parent,"true"===this.model.get("skippable")||this.model.get("skippable")===!0?(this.isValid=!0,this.skipped=!0):(this.isValid=!1,this.skipped=!1),this.notAsked===!0)return this.isValid=!0,this.updateResult()},e.prototype.update=function(t){return this.updateResult(),this.updateValidity(),this.trigger("answer",t,this.model.get("order"))},e.prototype.render=function(){return this.$el.attr("id","question-"+this.name),this.notAsked?this.$el.hide():"stimuli"===this.parent.format?this.$el.html("<div class='stimuli-question'>"+this.model.get("prompt")+"</div>"):"backup"===this.parent.format?this.$el.html("<div class='backup-question'> <p> "+this.model.get("prompt")+" "+(""!==this.model.get("hint")?"("+this.model.get("hint")+")":"")+" </p> "+("open"===this.model.get("type")?"<table> <tr> <td class='print-question-label'></td> <td> <div class='free-text'></div> </td> </tr> </table>":_.map(this.model.get("options"),function(t){return function(t){return"<div class='backup-question-checkbox-label'> <span class='checkbox'>&nbsp;</span> <span class='print-question-label'><span class='print-question-option'>"+t.label+"<span></span> </div>"}}(this)).join(""))+" </table> </div>"):"metadata"===this.parent.format?this.$el.html("<tr> "+["name","prompt","type","hint","linkedGridScore"].map(function(t){return function(e){return"<td>"+t.model.get(e)+"</td>"}}(this)).join("")+" <td> "+_.map(this.model.get("options"),function(t){return t.value+' "'+t.label+'" '}).join("")+" </td> </tr>"):"content"===this.parent.format&&this.$el.html("<table class='print-content question-attributes'> "+_("prompt, name, hint, type, skipLogic, skippable, customValidationCode, customValidationMessage".split(/, */)).map(function(t){return function(e){return"<tr> <td class='question-attribute'>"+e.underscore().titleize()+"</td> <td>"+t.model.get(e)+"</td> </tr>"}}(this)).join("")+" <tr> <td class='question-attribute'>Action on Display</td> <td><pre style='font-size:80%'>"+(this.model.get("displayCode")||"")+"</pre></td> </tr> <tr> <td>Options</td> <td> <!-- Hail Flying Spaghetti Monster, Please forgive me for my nested table --> <table class='print-content question-options'> <tbody> <tr> <td>Label</td> <td>Value</td> </tr> "+_.map(this.model.get("options"),function(t){return"<tr> <td>"+t.label+"</td> <td>"+t.value+"</td> </tr>"}).join("")+" </tbody> </table> </td> </tr> </table>"),this.trigger("rendered")},e}(Backbone.View);


var GridPrintView,extend=function(t,e){function r(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;GridPrintView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="grid_prototype",e.prototype.initialize=function(t){return this.model=t.model,this.parent=t.parent},e.prototype.render=function(){switch(this.format){case"content":this.renderContent();break;case"stimuli":this.renderStimuli();break;case"backup":this.renderBackup()}return this.parent.trigger("rendered",this)},e.prototype.renderStimuli=function(){var t;return this.$el.html("<div id='"+this.model.get("_id")+"' class='print-page stimulus-grid'> <table> <tr> "+(t=0,_.map(this.model.get("items"),function(e){return function(r){var i;return t+=1,i="<td class='item'>"+r+"</td>",t%e.model.get("columns")===0&&t!==e.model.get("items").length&&(i+="</tr><tr>"),i}}(this)).join(""))+" </tr> </table> </div>"),_.delay(function(t){return function(){var e,r,i;for(i=100,r=3,console.log("TARGET: "+$("#"+t.model.get("_id"))[0].scrollHeight);$("#"+t.model.get("_id"))[0].scrollWidth>$("#"+t.model.get("_id")+" table").innerWidth()&&$("#"+t.model.get("_id"))[0].scrollHeight>$("#"+t.model.get("_id")+" table").innerHeight()&&(console.log($("#"+t.model.get("_id")+" table").innerHeight()),0!==(i-=1));)e=$("#"+t.model.get("_id")+" td").css("font-size"),$("#"+t.model.get("_id")+" td").css("font-size",parseInt(e)+r+"px");return e=$("#"+t.model.get("_id")+" td").css("font-size"),$("#"+t.model.get("_id")+" td").css("font-size",parseInt(e)-2*r+"px")}}(this),1e3)},e.prototype.renderContent=function(){var t;return t="autostop captureAfterSeconds captureItemAtTime columns endOfLine fontSize layoutMode order randomize timer variableName",t=t.split(/\ +/),this.$el.html("Properties:<br/> <table> "+_.map(t,function(t){return function(e){return"<tr><td>"+e+"</td><td>"+t.model.get(e)+"</td></tr>"}}(this)).join("")+" </table> Items:<br/> "+_.map(this.model.get("items"),function(t){return t}).join(", "))},e.prototype.renderBackup=function(){var t;return this.$el.html("<table class='print-grid'> <tr> "+(t=0,_.map(this.model.get("items"),function(e){return function(r){var i;return t+=1,i="<td class='item'>"+r+"</td>",console.log(e.model.get("columns")),t%e.model.get("columns")===0&&t!==e.model.get("items").length&&(i+="</tr><tr>"),i}}(this)).join(""))+" </tr> </table> <table class='marking-table'> <tr> "+(""!==this.model.get("timer")?"<td style='vertical-align:middle'>Time Remaining</td><td class='marking-area'></td>":"")+" </tr> <tr> "+(this.model.get("autostop")?"<td style='vertical-align:middle'>Autostop?</td><td><span class='checkbox'></span></td>":"")+" </tr> </table> </div>")},e}(Backbone.View);


var ConsentPrintView,extend=function(t,n){function e(){this.constructor=t}for(var o in n)hasProp.call(n,o)&&(t[o]=n[o]);return e.prototype=n.prototype,t.prototype=new e,t.__super__=n.prototype,t},hasProp={}.hasOwnProperty;ConsentPrintView=function(t){function n(){return n.__super__.constructor.apply(this,arguments)}return extend(n,t),n.prototype.className="ConsentPrintView",n.prototype.initialize=function(t){return this.confirmedNonConsent=!1,this.model=t.model,this.parent=t.parent},n.prototype.render=function(){var t,n;if("stimuli"!==this.format)return"content"!==this.format&&"backup"!==this.format||(n="print-question-option",t="☐",this.$el.html("<span class='"+n+"'>"+(this.model.get("prompt")||"Does the child consent?")+" "+t+"</span>")),this.trigger("rendered")},n}(Backbone.View);


var DatetimePrintView,extend=function(t,e){function r(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;DatetimePrintView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="datetime",e.prototype.initialize=function(t){return this.model=t.model,this.parent=t.parent},e.prototype.render=function(){if("stimuli"!==this.format)return"backup"===this.format&&this.$el.html("<table class='marking-table'> "+_("Date,Time".split(/,/)).map(function(t){return"<tr> <td style='vertical-align:middle'>"+t+"</td><td class='marking-area'></td> </tr>"}).join("")+" </table>"),"content"===this.format&&this.$el.html("DateTime"),this.trigger("rendered")},e}(Backbone.View);


var IdPrintView,extend=function(t,r){function e(){this.constructor=t}for(var n in r)hasProp.call(r,n)&&(t[n]=r[n]);return e.prototype=r.prototype,t.prototype=new e,t.__super__=r.prototype,t},hasProp={}.hasOwnProperty;IdPrintView=function(t){function r(){return r.__super__.constructor.apply(this,arguments)}return extend(r,t),r.prototype.className="id",r.prototype.initialize=function(t){},r.prototype.render=function(){if("stimuli"!==this.format)return"backup"!==this.format&&"content"!==this.format||this.$el.html("<table class='marking-table'> <tr> <td style='vertical-align:middle'>"+this.model.get("name")+"</td><td class='marking-area'></td> </tr> </table>"),this.trigger("rendered")},r}(Backbone.View);


var LocationPrintView,extend=function(t,e){function i(){this.constructor=t}for(var o in e)hasProp.call(e,o)&&(t[o]=e[o]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;LocationPrintView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="LocationPrintView",e.prototype.initialize=function(t){if(this.model=t.model,this.parent=t.parent,this.levels=this.model.get("levels")||[],this.locations=this.model.get("locations")||[],1===this.levels.length&&""===this.levels[0]&&(this.levels=[]),1===this.locations.length&&""===this.locations[0])return this.locations=[]},e.prototype.render=function(){if("stimuli"!==this.format)return"content"===this.format&&this.$el.html("School Locations<br/> Levels: "+this.levels+"<br/> Available Locations:<br/> "+this.locations.join("<br/>")+"<br/>"),"backup"===this.format&&this.$el.html("<table class='marking-table'> "+_(this.levels).map(function(t){return"<tr> <td style='vertical-align:middle'>"+t+"</td><td class='marking-area'></td> </tr>"}).join("")+" </table>"),this.trigger("rendered")},e}(Backbone.View);


var SurveyPrintView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function n(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;SurveyPrintView=function(t){function e(){return this.onQuestionRendered=bind(this.onQuestionRendered,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="SurveyPrintView",e.prototype.initialize=function(t){return this.model=t.model,this.parent=t.parent,this.isObservation=t.isObservation,this.questionViews=[],this.answered=[],this.questions=new Questions,this.questions.fetch({key:this.model.get("assessmentId"),success:function(t){return function(e){return t.questions=new Questions(e.where({subtestId:t.model.id})),t.questions.sort(),t.ready=!0,t.render()}}(this)})},e.prototype.render=function(){var t,e,n,i,s,r,o,u;if("metadata"===this.format?this.$el.html("<table class='print-metadata'> <thead> "+["name","prompt","type","hint","linkedGridScore"].map(function(t){return function(t){return"<th>"+t.underscore().humanize()+"</th>"}}(this)).join("")+" <th>Options</th> </thead> <tbody class='survey-questions'> </tbody> </table>"):this.$el.html("<div id='"+this.model.get("_id")+"' class='print-page "+this.format+"'> <div class='survey-questions'></div> </div> <style> .survey-questions .stimuli-question{ padding-bottom: 3%; } </style>"),s=0,this.questions.sort(),null!=this.questions.models)for(u=this.questions.models,e=n=0,i=u.length;n<i;e=++n)o=u[e],r=new QuestionPrintView({model:o,parent:this,isObservation:this.isObservation}),r.on("rendered",this.onQuestionRendered),r.render(),this.questionViews[e]=r,"metadata"===this.format?this.$el.find(".survey-questions").append($(r.el).html()):this.$el.find(".survey-questions").append(r.el);return this.questions.length===s&&"function"==typeof(t=this.parent).next&&t.next(),"stimuli"===this.format&&_.delay(function(t){return function(){return t.increaseFontUntilOverflow($("#"+t.model.get("_id"))[0],$("#"+t.model.get("_id")+" .survey-questions"))}}(this),1e3),this.trigger("rendered")},e.prototype.increaseFontUntilOverflow=function(t,e){var n,i,s;for(s=100,i=3,n=100;t.scrollWidth-1<=$(t).innerWidth()&&t.scrollHeight-1<=$(t).innerHeight()&&0!==(s-=1);)n+=i,e.css("font-size",n+"%");return e.css("font-size",n-2*i+"%")},e.prototype.onQuestionRendered=function(){return this.trigger("subRendered")},e}(Backbone.View);


var ObservationPrintView,bind=function(t,e){return function(){return t.apply(e,arguments)}},extend=function(t,e){function i(){this.constructor=t}for(var s in e)hasProp.call(e,s)&&(t[s]=e[s]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;ObservationPrintView=function(t){function e(){return this.saveCurrentSurvey=bind(this.saveCurrentSurvey,this),this.updateObservationIndex=bind(this.updateObservationIndex,this),this.checkSurveyDisplay=bind(this.checkSurveyDisplay,this),this.checkIfOver=bind(this.checkIfOver,this),this.checkWarning=bind(this.checkWarning,this),this.checkObservationPace=bind(this.checkObservationPace,this),this.tick=bind(this.tick,this),e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="ObservationPrintView",e.prototype.events={"click .start_time":"startObservations","click .stop_time":"stopObservations","click .done":"completeObservation"},e.prototype.initialize=function(t){return this.model=t.model,this.parent=t.parent},e.prototype.initializeSurvey=function(){var t,e,i;return null!=this.survey&&this.onClose(),t=$.extend(this.model.get("surveyAttributes"),{_id:this.model.id}),i=function(){var i,s,n;for(n=[],e=i=1,s=parseInt(this.model.get("totalSeconds")/this.model.get("intervalLength"));1<=s?i<=s:i>=s;e=1<=s?++i:--i)n.push(new Backbone.Model(t));return n}.call(this),i.unshift(""),this.skippableView=new SurveyRunView({model:i[1],parent:this,isObservation:!0}),this.survey={models:i,results:[]}},e.prototype.initializeFlags=function(){return this.iAm={counting:!1,recording:!1},this.iHavent={warned:!0},this.iHave={runOnce:!1,finished:!1},this.my={time:{start:0,elapsed:0},observation:{index:0,oldIndex:0,completed:0,total:parseInt(this.model.get("totalSeconds")/this.model.get("intervalLength"))}}},e.prototype.startObservations=function(){if(!this.iAm.counting&&!this.iHave.runOnce)return this.$el.find(".stop_button_wrapper, .next_display, .completed_display").removeClass("confirmation"),this.$el.find(".start_button_wrapper").addClass("confirmation"),this.timerInterval=setInterval(this.tick,1e3),this.iAm.counting=!0,this.my.time.start=this.getTime(),this.my.time.elapsed=0},e.prototype.stopObservations=function(t){var e,i;return clearInterval(this.timerInterval),e=null!=t,i=null==t,null!=t&&this.trigger("showNext"),i&&!this.iHave.finished?(this.iAm.recording&&(this.resetObservationFlags(),this.saveCurrentSurvey()),this.my.observation.index++,this.renderSurvey()):(this.$el.find(".stop_button_wrapper").addClass("confirmation"),Utils.midAlert("Observations finished")),this.$el.find(".next_display").addClass("confirmation"),this.iHave.finished=!0,this.iHave.runOnce=!0},e.prototype.tick=function(){return this.my.time.elapsed=this.getTime()-this.my.time.start,this.checkIfOver(),this.updateObservationIndex(),this.updateProgressDisplay(),this.checkSurveyDisplay(),this.checkObservationPace(),this.checkWarning()},e.prototype.checkObservationPace=function(){if(this.iAm.recording&&this.my.observation.completed<this.my.observation.index-1&&0!==this.my.observation.index)return this.iHave.forcedProgression=!0,this.resetObservationFlags(),this.saveCurrentSurvey(),this.renderSurvey()},e.prototype.checkWarning=function(){var t,e;if(e=Math.floor((this.my.time.elapsed+this.warningSeconds)/this.model.get("intervalLength")),t=this.my.observation.index<e&&!this.iHave.finished,this.iAm.recording&&this.iHavent.warned&&t&&0!==this.my.observation.index)return Utils.midAlert("Observation ending soon"),this.iHavent.warned=!1},e.prototype.gridWasAutostopped=function(){return!1},e.prototype.checkIfOver=function(){if(this.my.time.elapsed>=this.model.get("totalSeconds"))return this.stopObservations()},e.prototype.checkSurveyDisplay=function(){if(this.my.observation.oldIndex!==this.my.observation.index&&!this.iHave.finished&&!this.iAm.recording)return this.renderSurvey(),this.my.observation.oldIndex=this.my.observation.index},e.prototype.updateObservationIndex=function(){if(this.my.observation.index=Math.floor(this.my.time.elapsed/this.model.get("intervalLength")),this.my.observation.index>this.survey.models.length-1)return this.my.observation.index=this.survey.models.length-1},e.prototype.updateProgressDisplay=function(){var t;if(this.$el.find(".current_observation").html(this.my.observation.index),this.$el.find(".completed_count").html(this.my.observation.completed),t=Math.max((this.my.observation.index+1)*this.model.get("intervalLength")-this.my.time.elapsed,0),this.$el.find(".time_till_next").html(t),!this.iAm.recording&&!this.iHave.finished)return this.$el.find(".next_display, .completed_display").removeClass("confirmation")},e.prototype.resetObservationFlags=function(){return this.iAm.recording=!1,this.iHavent.warned=!0},e.prototype.getTime=function(){return parseInt((new Date).getTime()/1e3)},e.prototype.completeObservation=function(t){return this.survey.view.isValid()?(this.saveCurrentSurvey(),this.iHave.finished&&this.trigger("showNext")):this.survey.view.showErrors(),this.tick()},e.prototype.saveCurrentSurvey=function(){return this.resetObservationFlags(),this.my.observation.completed++,this.survey.results.push({observationNumber:this.survey.view.index,data:this.survey.view.getResult(),saveTime:this.my.time.elapsed}),this.survey.view.close(),this.$el.find(".done").remove()},e.prototype.render=function(){var t;if("stimuli"!==this.format)return this.trigger("hideNext"),t=this.model.get("totalSeconds"),this.$el.html("<div class='timer_wrapper'> <div class='progress clearfix'> <span class='completed_display confirmation'>Completed <div class='info_box completed_count'>"+this.my.observation.completed+"</div></span> <span class='next_display confirmation'>Next observation <div class='info_box time_till_next'>"+this.model.get("intervalLength")+"</div></span> </div> <div> <div class='start_button_wrapper'><button class='start_time command'>Start</button></div> <div class='stop_button_wrapper confirmation'><button class='stop_time command'>Abort <i>all</i> observations</button></div> </div> </div> <div id='current_survey'></div>"),this.trigger("rendered")},e.prototype.renderSurvey=function(t){if(this.iAm.counting)return this.iAm.recording=!0,this.survey.view=new SurveyRunView({model:this.survey.models[this.my.observation.index],parent:this,isObservation:!0}),this.survey.view.index=function(t){return function(){return t.my.observation.index}}(this)(),this.survey.view.on("rendered subRendered",function(t){return function(){return t.trigger("subRendered")}}(this)),this.survey.view.render(),this.$el.find("#current_survey").html("<span class='observation_display confirmation'>Observation <div class='info_box current_observation'>"+this.my.observation.index+"</div></span>"),this.$el.find("#current_survey").append(this.survey.view.el),this.$el.find("#current_survey").append("<button class='command done'>Done with <i>this</i> observation</button>"),this.$el.find("#current_survey").scrollTo(250,function(t){return function(){return t.iHave.forcedProgression?(Utils.midAlert("Please continue with the next observation."),t.iHave.forcedProgression=!1):t.iHave.finished?Utils.midAlert("Please enter last observation"):void 0}}(this))},e.prototype.onClose=function(){var t;return null!=(t=this.survey.view)&&t.close(),this.skippableView.close()},e.prototype.getResult=function(){return{surveys:this.survey.results,variableName:this.model.get("variableName"),totalTime:this.model.get("totalTime"),intervalLength:this.model.get("intervalTime"),completedObservations:this.my.observation.completed}},e.prototype.getSum=function(){return{total:this.my.observation.completed}},e.prototype.getSkipped=function(){var t,e,i,s,n;for(n=this.skippableView.getSkipped(),s=[],t=e=1,i=this.survey.models.length-1;1<=i?e<=i:e>=i;t=1<=i?++e:--e)s.push({observationNumber:t,data:n,saveTime:"skipped"});return{surveys:s,variableName:"skipped",totalTime:"skipped",intervalLength:"skipped",completedObservations:"skipped"}},e.prototype.isValid=function(){return this.iHave.finished},e.prototype.showErrors=function(){return this.$el.find("messages").html(this.validator.getErrors().join(", "))},e.prototype.updateNavigation=function(){return Tangerine.nav.setStudent(this.$el.find("#participant_id").val())},e}(Backbone.View);


var SubtestPrintView,extend=function(t,e){function r(){this.constructor=t}for(var o in e)hasProp.call(e,o)&&(t[o]=e[o]);return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;SubtestPrintView=function(t){function e(){return e.__super__.constructor.apply(this,arguments)}return extend(e,t),e.prototype.className="SubtestPrintView",e.prototype.initialize=function(t){return this.protoViews=Tangerine.config.prototypeViews,this.model=t.model,this.parent=t.parent,this.format=t.format,this.prototypeRendered=!1},e.prototype.render=function(){var t,e,r,o,i;return e=""!==(this.model.get("enumeratorHelp")||"")?"<div class='enumerator_help_print'>"+this.model.get("enumeratorHelp")+"</div>":"",i=""!==(this.model.get("studentDialog")||"")?"<div class='student_dialog_print'>"+this.model.get("studentDialog")+"</div>":"",r="<button class='skip navigation'>Skip</button>",o=this.model.getBoolean("skippable"),"content"===this.format?this.$el.html("<h2>"+this.model.get("name")+"</h2> "+(t=this.model.get("displayCode"),null!=t&&""!==t?"Subtest Action on Display:<pre style='font-size:80%'>"+t+"</pre>":"")+" Enumerator Help:<br/> "+e+" Student Dialog:<br/> "+i+" <div class='format-"+this.format+"' id='prototype_wrapper'></div> <hr/>"):"backup"===this.format?this.$el.html("<div class='subtest-title'>"+this.model.get("name")+"</div> <div class='student-dialog'>"+i+"</div> <div class='format-"+this.format+"' id='prototype_wrapper'></div> <hr/>"):this.$el.append("<div class='format-"+this.format+"' id='prototype_wrapper'></div>"),console.log(this.model.get("prototype").humanize()+"PrintView"),this.prototypeView=new(window[this.model.get("prototype").humanize()+"PrintView"])({model:this.model,parent:this}),this.prototypeView.on("rendered",function(t){return function(){return t.trigger("rendered")}}(this)),this.prototypeView.on("subRendered",function(t){return function(){return t.trigger("subRendered")}}(this)),this.prototypeView.setElement(this.$el.find("#prototype_wrapper")),this.prototypeView.format=this.format,this.prototypeView.render(),this.prototypeRendered=!0,this.trigger("rendered")},e}(Backbone.View);


var Config,extend=function(t,o){function r(){this.constructor=t}for(var e in o)hasProp.call(o,e)&&(t[e]=o[e]);return r.prototype=o.prototype,t.prototype=new r,t.__super__=o.prototype,t},hasProp={}.hasOwnProperty;Config=function(t){function o(){return o.__super__.constructor.apply(this,arguments)}return extend(o,t),o.prototype.url="config",o.prototype.save=null,o.prototype.getDefault=function(t){return this.get("defaults")[t]},o}(Backbone.Model);


var Log,LogView,Logs,extend=function(e,t){function n(){this.constructor=e}for(var r in t)hasProp.call(t,r)&&(e[r]=t[r]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty,bind=function(e,t){return function(){return e.apply(t,arguments)}};Log=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.url="log",t.prototype.app=function(e,t){if(null==e&&(e=""),null==t&&(t=""),~Tangerine.settings.get("log").indexOf("app"))return this.add({type:"app",code:e,details:t,timestamp:(new Date).getTime()})},t.prototype.db=function(e,t){if(null==e&&(e=""),null==t&&(t=""),~Tangerine.settings.get("log").indexOf("db"))return this.add({type:"db",code:e,details:t,timestamp:(new Date).getTime()})},t.prototype.ui=function(e,t){if(null==e&&(e=""),null==t&&(t=""),~Tangerine.settings.get("log").indexOf("ui"))return this.add({type:"ui",code:e,details:t,timestamp:(new Date).getTime()})},t.prototype.err=function(e,t){return null==e&&(e=""),null==t&&(t=""),!~Tangerine.settings.get("log").indexOf("err")},t.prototype.add=function(e){var t,n;return t=new Date,n="not-signed-in",null!=Tangerine.user.name()&&(n=Tangerine.user.name()),this.unset("_rev"),this.save({_id:this.calcName(),year:t.getFullYear(),month:t.getMonth(),date:t.getDate(),timestamp:t.getTime(),user:n,event:e})},t.prototype.calcName=function(){var e,t;return e=new Date,t="not-signed-in",null!=Tangerine.user.name()&&(t=Tangerine.user.name()),hex_sha1(t+"_"+e.getTime())},t}(Backbone.Model),Logs=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.url="log",t.prototype.model=Log,t.prototype.comparator=function(e){return e.get("timestamp")},t}(Backbone.Collection),LogView=function(e){function t(){return this.render=bind(this.render,this),t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.className="LogView",t.prototype.events={"change #user_selector":"update"},t.prototype.initialize=function(e){return this.logs=e.logs,this.logsByUser=this.logs.indexBy("user"),this.selectedUser=_.first(_.keys(this.logsByUser))},t.prototype.render=function(){var e,t;return e=function(){var e,n,r,o;for(r=_.keys(this.logsByUser),o=[],e=0,n=r.length;e<n;e++)t=r[e],o.push("<option data-user='"+t+"' "+((this.selectedUser===t?"selected='selected'":void 0)||"")+">"+t+"</option>");return o}.call(this).join(""),this.$el.html("<h1>Logs</h1> <select id='user_selector'>"+e+"</select> <div class='log_container'></div>"),this.update(),this.trigger("rendered")},t.prototype.update=function(){var e,t,n,r,o,i,s,a,l,u;for(this.selectedUser=this.$el.find("#user_selector option:selected").attr("data-user"),a=this.logsByUser[this.selectedUser],r="<h2>User "+this.selectedUser+"</h2> <table> <tr> <th>Code</th> <th>Details</th> <th>Time</th> </tr>",o=0,i=a.length;o<i;o++){if(s=a[o],null==s.get("event"))return;n=s.get("event"),l=s.get("user"),e=n.code,t=n.details,u=new Date(parseInt(n.timestamp)).toString(),r+="<tr> <td>"+e+"</td> <td>"+t+"</td> <td>"+u+"</td> </tr>"}return r+="</table>",this.$el.find(".log_container").html(r)},t}(Backbone.View);


var Template,extend=function(t,r){function e(){this.constructor=t}for(var o in r)hasProp.call(r,o)&&(t[o]=r[o]);return e.prototype=r.prototype,t.prototype=new e,t.__super__=r.prototype,t},hasProp={}.hasOwnProperty;Template=function(t){function r(){return r.__super__.constructor.apply(this,arguments)}return extend(r,t),r.prototype.url="template",r}(Backbone.Model);


var Settings,bind=function(t,n){return function(){return t.apply(n,arguments)}},extend=function(t,n){function i(){this.constructor=t}for(var o in n)hasProp.call(n,o)&&(t[o]=n[o]);return i.prototype=n.prototype,t.prototype=new i,t.__super__=n.prototype,t},hasProp={}.hasOwnProperty;Settings=function(t){function n(){return this.update=bind(this.update,this),n.__super__.constructor.apply(this,arguments)}return extend(n,t),n.prototype.url="settings",n.prototype.initialize=function(){var t;return this.ipRange=_.uniq(function(){var n,i;for(i=[],t=n=100;n<=200;t=++n)i.push(t);return i}().concat(function(){var n,i;for(i=[],t=n=0;n<=255;t=++n)i.push(t);return i}())),this.config=Tangerine.config,this.on("all",function(t){return function(){return t.update()}}(this))},n.prototype.update=function(){var t,n,i,o,e,r,u,s,h,p,c;return i=this.get("groupHost"),o=this.get("groupName"),n=this.get("groupDDoc"),this.upUser="uploader-"+o,this.upPass=this.get("upPass"),p=this.config.get("update"),h=this.config.get("trunk"),e=this.config.get("local"),r=this.config.get("port"),t=Tangerine.design_doc,u=this.config.get("groupDBPrefix"),this.groupDB=""+u+o,this.trunkDB=h.dbName,s=this.config.get("subnet").base,this.location={local:{url:e.host+":"+r+"/",db:"/"+Tangerine.db_name+"/"},trunk:{url:"http://"+h.host+"/",db:"http://"+h.host+"/"+h.dbName+"/"},group:{url:i+"/",db:i+"/db/"+u+o+"/"},update:{url:"http://"+p.host+"/",db:"http://"+p.host+"/"+p.dbName+"/",target:p.target},subnet:{url:function(){var t,n;for(n=[],c=t=0;t<=255;c=++t)n.push("http://"+s+this.ipRange[c]+":"+r+"/");return n}.call(this),db:function(){var t,n;for(n=[],c=t=0;t<=255;c=++t)n.push("http://"+s+this.ipRange[c]+":"+r+"/"+Tangerine.db_name+"/");return n}.call(this)},satellite:{url:function(){var t,n;for(n=[],c=t=0;t<=255;c=++t)n.push(""+s+c+":"+r+"/");return n}(),db:function(){var t,n;for(n=[],c=t=0;t<=255;c=++t)n.push(""+s+c+":"+r+"/"+u+o+"/");return n}()}},this.couch={view:"_design/"+t+"/_view/",show:"_design/"+t+"/_show/",list:"_design/"+t+"/_list/",index:"_design/"+t+"/index.html"},this.spa={view:"db/_design/"+t+"/_view/",show:"db/_design/"+t+"/_show/",list:"db/_design/"+t+"/_list/",index:"index.html"},this.groupCouch={view:"_design/"+n+"/_view/",show:"_design/"+n+"/_show/",list:"_design/"+n+"/_list/",index:"_design/"+n+"/index.html"}},n.prototype.urlBulkDocs=function(){var t;return t="/db/"+Tangerine.db_name+"/_bulk_docs"},n.prototype.urlIndex=function(t,n){var i,o;return null==n&&(n=null),i=this.get("groupHost"),o="local"===t?":"+this.config.get("port"):"",n=null!=n?"#"+n:"",t="trunk"===t?"tangerine":this.config.get("groupDBPrefix")+t,""+i+o+"/app/"+t+"/"+this.spa.index+n},n.prototype.urlHost=function(t){return""+this.location[t].url},n.prototype.urlDB=function(t,n){var i,o;return null==n&&(n=null),i="local"===t?(""+this.location[t].db).slice(1,-1):(""+this.location[t].db).slice(0,-1),o=i.split("://"),null!=n&&(i=o[0]+"://"+Tangerine.user.name()+":"+n+"@"+o[1]),i},n.prototype.urlDDoc=function(t){var n;return n=Tangerine.designDoc,this.urlDB("trunk")+"/_design/"+n},n.prototype.urlView=function(t,n){return"group"===t?""+this.location[t].db+this.groupCouch.view+n:""+this.location[t].db+this.couch.view+n},n.prototype.urlList=function(t,n){return"group"===t?""+this.location[t].db+this.groupCouch.list+n:""+this.location[t].db+this.couch.list+n},n.prototype.urlShow=function(t,n){return"group"===t?""+this.location[t].db+this.groupCouch.show+n:""+this.location[t].db+this.couch.show+n},n.prototype.urlSubnet=function(t){var n,i;return i=this.config.get("port"),n=Tangerine.db_name,"http://"+t+":"+i+"/"+n},n.prototype.subnetIP=function(t){var n;return n=this.config.get("subnet").base,""+n+this.ipRange[t]},n}(Backbone.Model);


var SettingsView,extend=function(t,e){function s(){this.constructor=t}for(var i in e)hasProp.call(e,i)&&(t[i]=e[i]);return s.prototype=e.prototype,t.prototype=new s,t.__super__=e.prototype,t},hasProp={}.hasOwnProperty;SettingsView=function(e){function s(){return s.__super__.constructor.apply(this,arguments)}return extend(s,e),s.prototype.className="SettingsView",s.prototype.events={"click .save":"save","click .back":"goBack"},s.prototype.goBack=function(){return window.history.back()},s.prototype.i18n=function(){return this.text={save:t("Tangerine.actions.button.save"),back:t("Tangerine.navigation.button.back"),saved:t("Tangerine.message.saved"),saveError:t("Tangerine.message.save_error"),settings:t("SettingsView.label.settings"),warning:t("SettingsView.message.warning"),contextHelp:t("SettingsView.help.context"),languageHelp:t("SettingsView.help.language"),groupHandleHelp:t("SettingsView.help.group_handle"),groupNameHelp:t("SettingsView.help.group_name"),groupHostHelp:t("SettingsView.help.group_host"),uploadPasswordHelp:t("SettingsView.help.upload_password"),logEventsHelp:t("SettingsView.help.log_events"),context:t("SettingsView.label.context"),language:t("SettingsView.label.language"),groupHandle:t("SettingsView.label.group_handle"),groupName:t("SettingsView.label.group_name"),groupHost:t("SettingsView.label.group_host"),uploadPassword:t("SettingsView.label.upload_password"),logEvents:t("SettingsView.label.log_events")}},s.prototype.initialize=function(t){return this.i18n(),this.settings=Tangerine.settings},s.prototype.save=function(){return this.settings.save({groupHandle:this.$el.find("#group_handle").val(),context:this.$el.find("#context").val(),language:this.$el.find("#language").val(),groupName:this.$el.find("#group_name").val(),groupHost:this.$el.find("#group_host").val(),upPass:this.$el.find("#up_pass").val(),log:this.$el.find("#log").val().split(/[\s,]+/)},{success:function(t){return function(){return Utils.midAlert(t.text.saved)}}(this),error:function(){return Utils.midAlert(this.text.saveError)}})},s.prototype.render=function(){var t,e,s,i,a,n,l;return t=this.settings.getEscapedString("context"),a=this.settings.getEscapedString("language"),i=this.settings.getEscapedString("groupName"),e=this.settings.getEscapedString("groupHandle"),s=this.settings.getEscapedString("groupHost"),l=this.settings.getEscapedString("upPass"),n=_.escape(this.settings.getArray("log").join(", ")),this.$el.html("<button class='back navigation'>"+this.text.back+"</button> <h1>"+this.text.settings+"</h1> <p><img src='images/icon_warn.png' title='Warning'>"+this.text.warning+"</p> <div class='menu_box'> <div class='label_value'> <label for='context' title='"+this.text.contextHelp+"'>"+this.text.context+"</label><br> <input id='context' type='text' value='"+t+"'> </div> <div class='label_value'> <label for='language' title='"+this.text.languageHelp+"'>"+this.text.language+"</label><br> <input id='language' type='text' value='"+a+"'> </div> <div class='label_value'> <label for='group_handle' title='"+this.text.groupHandleHelp+"'>"+this.text.groupHandle+"</label><br> <input id='group_handle' type='text' value='"+e+"'> </div> <div class='label_value'> <label for='group_name' title='"+this.text.groupNameHelp+"'>"+this.text.groupName+"</label><br> <input id='group_name' type='text' value='"+i+"'> </div> <div class='label_value'> <label for='group_host' title='"+this.text.groupHostHelp+"'>"+this.text.groupHost+"</label><br> <input id='group_host' type='text' value='"+s+"'> </div> <div class='label_value'> <label for='up_pass' title='"+this.text.uploadPasswordHelp+"'>"+this.text.uploadPassword+"</label><br> <input id='up_pass' type='text' value='"+l+"'> </div> <div class='label_value'> <label for='log' title='"+this.text.logEventsHelp+"'>"+this.text.logEvents+"</label><br> <input id='log' value='"+n+"'> </div> </div><br> <button class='command save'>"+this.text.save+"</button>"),this.trigger("rendered")},s}(Backbone.View);


var ViewManager,bind=function(t,n){return function(){return t.apply(n,arguments)}},extend=function(t,n){function r(){this.constructor=t}for(var e in n)hasProp.call(n,e)&&(t[e]=n[e]);return r.prototype=n.prototype,t.prototype=new r,t.__super__=n.prototype,t},hasProp={}.hasOwnProperty;ViewManager=function(t){function n(){return this.show=bind(this.show,this),n.__super__.constructor.apply(this,arguments)}return extend(n,t),n.prototype.show=function(t){var n;return window.scrollTo(0,0),null!=(n=this.currentView)&&n.close(),this.currentView=t,this.className=this.currentView.className,Tangerine.log.app("show",this.className),this.currentView.on("rendered",function(t){return function(){var n;return Utils.working(!1),$("#content").append(t.currentView.el),t.currentView.$el.find(".buttonset").buttonset(),"function"==typeof(n=t.currentView).afterRender?n.afterRender():void 0}}(this)),this.currentView.on("subRendered",function(t){return function(){return t.currentView.$el.find(".buttonset").buttonset()}}(this)),this.currentView.on("start_work",function(t){return function(){return Utils.working(!0)}}(this)),this.currentView.on("end_work",function(t){return function(){return Utils.working(!1)}}(this)),this.currentView.render()},n}(Backbone.View);


var NavigationView,bind=function(t,i){return function(){return t.apply(i,arguments)}},extend=function(t,i){function n(){this.constructor=t}for(var e in i)hasProp.call(i,e)&&(t[e]=i[e]);return n.prototype=i.prototype,t.prototype=new n,t.__super__=i.prototype,t},hasProp={}.hasOwnProperty;NavigationView=function(i){function n(){return this.handleMenu=bind(this.handleMenu,this),this.initialize=bind(this.initialize,this),this.userMenuOut=bind(this.userMenuOut,this),this.userMenuIn=bind(this.userMenuIn,this),n.__super__.constructor.apply(this,arguments)}return extend(n,i),n.prototype.el="#navigation",n.prototype.events=Modernizr.touch?{"click #logout":"logout","click #navigation-logo":"logoClick","click #username":"gotoAccount"}:{"click #logout":"logout","click #navigation-logo":"logoClick","click #username":"gotoAccount"},n.prototype.refreshDropDownPosition=function(){var t,i;return i=this.$el.find("#username-container").position(),t=this.$el.find("#username-dropdown"),t.css({left:Math.min(i.left,$(window).width()-t.width())})},n.prototype.userMenuIn=function(){return this.refreshDropDownPosition(),this.$el.find("#username-dropdown").show()},n.prototype.userMenuOut=function(){return this.refreshDropDownPosition(),this.$el.find("#username-dropdown").hide()},n.prototype.gotoAccount=function(){if(this.user.isAdmin())return Tangerine.router.navigate("account",!0)},n.prototype.logoClick=function(){return this.user.isAdmin()?(Tangerine.activity="",this.router.landing(!0)):"assessment run"!==Tangerine.activity?this.router.landing(!0):confirm(this.text.incomplete_main)?this.router.landing(!0):void 0},n.prototype.logout=function(){if(this.user.isAdmin())return Tangerine.activity="",Tangerine.user.logout();if("assessment run"===Tangerine.activity){if(confirm(this.text.incomplete_logout))return Tangerine.activity="",Tangerine.user.logout()}else if(confirm(this.text.confirm_logout))return Tangerine.activity="",Tangerine.user.logout()},n.prototype.onClose=function(){},n.prototype.initialize=function(t){return this.$el.addClass("NavigationView"),this.i18n(),this.render(),this.user=t.user,this.router=t.router,this.whoAmI=this.text.user,this.router.on("all",this.handleMenu),this.user.on("login logout",this.handleMenu)},n.prototype.i18n=function(){return this.text={logout:t("NavigationView.button.logout"),account_button:t("NavigationView.button.account"),settings_button:t("NavigationView.button.settings"),user:t("NavigationView.label.user"),teacher:t("NavigationView.label.teacher"),enumerator:t("NavigationView.label.enumerator"),student_id:t("NavigationView.label.student_id"),version:t("NavigationView.label.version"),account:t("NavigationView.help.account"),logo:t("NavigationView.help.logo"),incomplete_logout:t("NavigationView.message.incomplete_logout"),confirm_logout:t("NavigationView.message.logout_confirm"),incomplete_main:t("NavigationView.message.incomplete_main_screen")}},n.prototype.render=function(){var t;return this.$el.html("<img id='navigation-logo' src='images/navigation-logo.png' title='"+this.text.logo+"'> <ul> <li id='student-container' class='hidden'> <label>"+this.text.student_id+"</label> <div id='student-id'></div> </li> <li id='username-container'> <label title='"+this.text.account+"'>"+this.whoAmI+"</label> <div id='username'>"+(Tangerine.user.name()||"")+"</div> <ul id='username-dropdown'> <li><a href='#account'>"+this.text.account_button+"</a></li> <li><a href='#settings'>"+this.text.settings_button+"</a></li> </ul> </li> <li id='logout'>"+this.text.logout+"</li> </ul>"),(null!=(t=this.user)&&"function"==typeof t.isAdmin?t.isAdmin():void 0)&&this.$el.find("#username-container").hover(this.userMenuIn,this.userMenuOut),$(document).ajaxStart(function(){if("images/navigation-logo-spin.gif"!==$("#navigation-logo").attr("src"))return $("#navigation-logo").attr("src","images/navigation-logo-spin.gif")}),$(document).ajaxStop(function(){if("images/navigation-logo.png"!==$("#navigation-logo").attr("src"))return $("#navigation-logo").attr("src","images/navigation-logo.png")})},n.prototype.setStudent=function(t){return""===t?(this.$el.find("#student-container").addClass("hidden"),this.$el.find("#student-id").html("")):(this.$el.find("#student-container").removeClass("hidden"),this.$el.find("#student-id").html(t))},n.prototype.handleMenu=function(t){return $("#username_label").html(this.whoAmI),$("#username").html(this.user.name()),~window.location.toString().indexOf("name=")?this.$el.find("#logout_link").hide():this.$el.find("#logout_link").show(),this.user.verify({isAuthenticated:function(t){return function(){return t.render(),$("#navigation").fadeIn(250)}}(this),isUnregistered:function(t){return function(){return t.render(),$("#navigation").fadeOut(250)}}(this)})},n}(Backbone.View);


var Router,extend=function(e,t){function n(){this.constructor=e}for(var r in t)hasProp.call(t,r)&&(e[r]=t[r]);return n.prototype=t.prototype,e.prototype=new n,e.__super__=t.prototype,e},hasProp={}.hasOwnProperty,indexOf=[].indexOf||function(e){for(var t=0,n=this.length;t<n;t++)if(t in this&&this[t]===e)return t;return-1};Router=function(e){function t(){return t.__super__.constructor.apply(this,arguments)}return extend(t,e),t.prototype.execute=function(e,t,n){if($("#footer").show(),e)return e.apply(this,t)},t.prototype.routes={"workflow/edit/:workflowId":"workflowEdit","workflow/run/:workflowId":"workflowRun","workflow/resume/:workflowId/:tripId":"workflowResume","feedback/edit/:workflowId":"feedbackEdit","feedback/:workflowId":"feedback",login:"login",register:"register",logout:"logout",account:"account",transfer:"transfer",settings:"settings",update:"update","":"landing",logs:"logs","class":"klass","class/edit/:id":"klassEdit","class/student/:studentId":"studentEdit","class/student/report/:studentId":"studentReport","class/subtest/:id":"editKlassSubtest","class/question/:id":"editKlassQuestion","class/:id/:part":"klassPartly","class/:id":"klassPartly","class/run/:studentId/:subtestId":"runSubtest","class/result/student/subtest/:studentId/:subtestId":"studentSubtest",curricula:"curricula","curriculum/:id":"curriculum",curriculumImport:"curriculumImport","report/klassGrouping/:klassId/:part":"klassGrouping","report/masteryCheck/:studentId":"masteryCheck","report/progress/:studentId/:klassId":"progressReport",groups:"groups",assessments:"assessments","run/:id":"run","print/:id/:format":"print","dataEntry/:id":"dataEntry","resume/:assessmentId/:resultId":"resume","restart/:id":"restart","edit/:id":"edit","results/:id":"results","import":"import","subtest/:id":"editSubtest","question/:id":"editQuestion",dashboard:"dashboard","dashboard/*options":"dashboard",admin:"admin","sync/:id":"sync"},t.prototype.feedbackEdit=function(e){return Tangerine.user.verify({isAuthenticated:function(){var t,n;return t=function(e,t){var n;return e.updateCollection(),n=new FeedbackEditView({feedback:e,workflow:t}),vm.show(n)},n=new Workflow({_id:e}),n.fetch({success:function(){var r,s;return s=e+"-feedback",r=new Feedback({_id:s}),r.fetch({error:function(){return r.save(null,{success:function(){return t(r,n)}})},success:function(){return t(r,n)}})}})}})},t.prototype.feedback=function(e){return Tangerine.user.verify({isAuthenticated:function(){var t;return t=new Workflow({_id:e}),t.fetch({success:function(){var n,r;return r=e+"-feedback",n=new Feedback({_id:r}),n.fetch({error:function(){return Utils.midAlert("No feedback defined")},success:function(){var e;return n.updateCollection(),e=new FeedbackTripsView({feedback:n,workflow:t}),vm.show(e)}})}})}})},t.prototype.workflowEdit=function(e){return Tangerine.user.verify({isAuthenticated:function(){var t;return t=new Workflow({_id:e}),t.fetch({success:function(){var e;return e=new WorkflowEditView({workflow:t}),vm.show(e)}})}})},t.prototype.workflowRun=function(e){return Tangerine.user.verify({isAuthenticated:function(){var t;return t=new Workflow({_id:e}),t.fetch({success:function(){var e;return t.updateCollection(),e=new WorkflowRunView({workflow:t}),vm.show(e)}})}})},t.prototype.workflowResume=function(e,t){return Tangerine.user.verify({isAuthenticated:function(){var n;return n=new Workflow({_id:e}),n.fetch({success:function(){return Tangerine.$db.view(Tangerine.design_doc+"/tripsAndUsers",{key:t,include_docs:!0,success:function(r){var s,u,i,c,o,a,f,d,l;for(i=Math.max(r.rows.length-1,0),l=[],c=u=0,o=i;0<=o?u<=o:u>=o;c=0<=o?++u:--u)l.push({result:new Result(r.rows[c].doc)});return s=(null!=(a=r.rows[i])&&null!=(f=a.doc)&&null!=(d=f.subtestData)?d.length:void 0)||0,n=new Workflow({_id:e}),n.fetch({success:function(){var r,u;return r=Tangerine.user.getPreferences("tutor-workflows","incomplete"),r[e]=_(r[e]).without(t),Tangerine.user.getPreferences("tutor-workflows","incomplete",r),n.updateCollection(),u=new WorkflowRunView({assessmentResumeIndex:s,workflow:n,tripId:t,index:i,steps:l}),vm.show(u)}})}})}})}})},t.prototype.admin=function(e){return Tangerine.user.verify({isAdmin:function(){return $.couch.allDbs({success:function(e){return function(e){var t,n;return t=e.filter(function(e){return 0===e.indexOf("group-")}),n=new AdminView({groups:t}),vm.show(n)}}(this)})}})},t.prototype.dashboard=function(e){var t,n;return e=null!=e?e.split(/\//):void 0,console.log("options: "+e),t={assessment:"All",groupBy:"enumerator"},_.each(e,function(n,r){if(!(r%2))return t[n]=e[r+1]}),n=new DashboardView(t),vm.show(n)},t.prototype.landing=function(){return~String(window.location.href).indexOf("app/tangerine/")?Tangerine.router.navigate("groups",!0):Tangerine.router.navigate("assessments",!0)},t.prototype.groups=function(){return Tangerine.user.verify({isAuthenticated:function(){var e;return e=new GroupsView,vm.show(e)}})},t.prototype.curricula=function(){return Tangerine.user.verify({isAuthenticated:function(){var e;return e=new Curricula,e.fetch({success:function(e){var t;return t=new CurriculaView({curricula:e}),vm.show(t)}})}})},t.prototype.curriculum=function(e){return Tangerine.user.verify({isAuthenticated:function(){var t;return t=new Curriculum({_id:e}),t.fetch({success:function(){var n;return n=new Subtests,n.fetch({success:function(){var r,s;return s=new Subtests(n.where({curriculumId:e})),r=new Questions,r.fetch({success:function(){var e,n;return e=[],s.each(function(t){return e=e.concat(r.where({subtestId:t.id}))}),e=new Questions(e),n=new CurriculumView({curriculum:t,subtests:s,questions:e}),vm.show(n)}})}})}})}})},t.prototype.curriculumEdit=function(e){return Tangerine.user.verify({isAuthenticated:function(){var t;return t=new Curriculum({_id:e}),t.fetch({success:function(){var n;return n=new Subtests,n.fetch({success:function(){var r,s,u,i,c;return i=n.where({curriculumId:e}),r=function(){var e,t,n;for(n=[],e=0,t=i.length;e<t;e++)u=i[e],n.push(u.get("part"));return n}(),s=Math.max.apply(Math,r),c=new CurriculumView({curriculum:t,subtests:i,parts:s}),vm.show(c)}})}})}})},t.prototype.curriculumImport=function(){return Tangerine.user.verify({isAuthenticated:function(){var e;return e=new AssessmentImportView({noun:"curriculum"}),vm.show(e)}})},t.prototype.klass=function(){return Tangerine.user.verify({isAuthenticated:function(){var e;return e=new Klasses,e.fetch({success:function(e){var t;return t=new Teachers,t.fetch({success:function(){var n;return n=new Curricula,n.fetch({success:function(n){var r;return Tangerine.user.isAdmin()||(e=new Klasses(e.where({teacherId:Tangerine.user.get("teacherId")}))),r=new KlassesView({klasses:e,curricula:n,teachers:t}),vm.show(r)}})}})}})}})},t.prototype.klassEdit=function(e){return Tangerine.user.verify({isAuthenticated:function(){var t;return t=new Klass({_id:e}),t.fetch({success:function(t){var n;return n=new Teachers,n.fetch({success:function(){var r;return r=new Students,r.fetch({success:function(r){var s,u;return s=new Students(r.where({klassId:e})),u=new KlassEditView({klass:t,students:s,allStudents:r,teachers:n}),vm.show(u)}})}})}})}})},t.prototype.klassPartly=function(e,t){return null==t&&(t=null),Tangerine.user.verify({isAuthenticated:function(){var n;return n=new Klass({_id:e}),n.fetch({success:function(){var r;return r=new Curriculum({_id:n.get("curriculumId")}),r.fetch({success:function(){var s;return s=new Students,s.fetch({success:function(s){var u,i;return i=new Students(s.where({klassId:e})),u=new KlassResults,u.fetch({success:function(s){var u,c;return c=new KlassResults(s.where({klassId:e})),u=new Subtests,u.fetch({success:function(e){var s,u;return s=new Subtests(e.where({curriculumId:n.get("curriculumId")})),u=new KlassPartlyView({part:t,subtests:s,results:c,students:i,curriculum:r,klass:n}),vm.show(u)}})}})}})}})}})}})},t.prototype.studentSubtest=function(e,t){return Tangerine.user.verify({isAuthenticated:function(){var n;return n=new Student({_id:e}),n.fetch({success:function(){var r;return r=new Subtest({_id:t}),r.fetch({success:function(){return Tangerine.$db.view(Tangerine.design_doc+"/resultsByStudentSubtest",{key:[e,t],success:function(s){return function(s){var u;return u=new KlassResults,u.fetch({success:function(i){var c,o;return c=i.where({subtestId:t,studentId:e,klassId:n.get("klassId")}),o=new KlassSubtestResultView({allResults:u,results:c,subtest:r,student:n,previous:s.rows.length}),vm.show(o)}})}}(this)})}})}})}})},t.prototype.runSubtest=function(e,t){return Tangerine.user.verify({isAuthenticated:function(){var n;return n=new Subtest({_id:t}),n.fetch({success:function(){var r,s;return s=new Student({_id:e}),r=function(n,r){return n.fetch({success:function(){var s,u;return s=function(e,t,n,r){var s;return null==n&&(n=null),null==r&&(r={}),s=new KlassSubtestRunView({student:e,subtest:t,questions:u,linkedResult:r}),vm.show(s)},u=null,"survey"===r.get("prototype")?Tangerine.$db.view(Tangerine.design_doc+"/resultsByStudentSubtest",{key:[e,r.get("gridLinkId")],success:function(e){return function(e){var i,c;return 0!==e.rows&&(i=new KlassResult(null!=(c=_.last(e.rows))?c.value:void 0)),u=new Questions,u.fetch({key:"q"+r.get("curriculumId"),success:function(){return u=new Questions(u.where({subtestId:t})),s(n,r,u,i)}})}}(this)}):s(n,r)}})},"test"===e?s.fetch({success:function(){return r(s,n)},error:function(){return s.save(null,{success:function(){return r(s,n)}})}}):s.fetch({success:function(){return r(s,n)}})}})}})},t.prototype.register=function(){return Tangerine.user.verify({isUnregistered:function(){var e;return e=new RegisterTeacherView({user:new User}),vm.show(e)},isAuthenticated:function(){return Tangerine.router.landing()}})},t.prototype.studentEdit=function(e){return Tangerine.user.verify({isAuthenticated:function(){var t;return t=new Student({_id:e}),t.fetch({success:function(e){var t;return t=new Klasses,t.fetch({success:function(t){var n;return n=new StudentEditView({student:e,klasses:t}),vm.show(n)}})}})}})},t.prototype.dataEntry=function(e){return Tangerine.user.verify({isAdmin:function(){var t;return t=new Assessment({_id:e}),t.fetch({success:function(){var n;return n=new Questions,n.fetch({key:"q"+e,success:function(){var e,r;e=n.indexBy("subtestId");for(r in e)n=e[r],t.subtests.get(r).questions=new Questions(n);return vm.show(new AssessmentDataEntryView({assessment:t}))}})}})}})},t.prototype.sync=function(e){return Tangerine.user.verify({isAdmin:function(){var t;return t=new Assessment({_id:e}),t.fetch({success:function(){return vm.show(new AssessmentSyncView({assessment:t}))}})}})},t.prototype["import"]=function(){return Tangerine.user.verify({isAuthenticated:function(){var e;return e=new AssessmentImportView({noun:"assessment"}),vm.show(e)}})},t.prototype.assessments=function(){return Tangerine.user.verify({isAuthenticated:function(){var e;return(e=new Workflows).fetch({success:function(){var t,n;return e.length>0&&"server"!==Tangerine.settings.get("context")&&(n=new Feedbacks(n),n.fetch({success:function(){var t;return t=new WorkflowMenuView({workflows:e,feedbacks:n}),vm.show(t)}})),t=["Klasses","Teachers","Curricula","Assessments","Workflows"],t.push("Users"),Utils.loadCollections({collections:t,complete:function(e){return n=e.workflows.models.map(function(e){return new Feedback({_id:e.id+"-feedback"})}),n=new Feedbacks(n),n.fetch({success:function(){var t;return e.feedbacks=n,e.users=e.tabletUsers||e.users,Tangerine.user.isAdmin()||Tangerine.settings.get("showWorkflows")!==!0?vm.show(new AssessmentsMenuView(e)):(t=new WorkflowMenuMemberView(e),vm.show(t),$("#content").html(t.el))}})}})}})}})},t.prototype.editId=function(e){return e=Utils.cleanURL(e),Tangerine.user.verify({isAdmin:function(){var t;return t=new Assessment({_id:e}),t.superFetch({success:function(e){var t;return t=new AssessmentEditView({model:e}),vm.show(t)}})},isUser:function(){return Tangerine.router.landing()}})},t.prototype.edit=function(e){return Tangerine.user.verify({isAdmin:function(){var t;return t=new Assessment({_id:e}),t.fetch({success:function(e){var t;return t=new AssessmentEditView({model:e}),vm.show(t)}})},isUser:function(){return Tangerine.router.landing()}})},t.prototype.restart=function(e){return Tangerine.router.navigate("run/"+e,!0)},t.prototype.run=function(e){return Tangerine.user.verify({isAuthenticated:function(){var t,n;return t=JSON.stringify(e.substr(-5,5)),n=Tangerine.settings.urlView("group","byDKey"),$.ajax({url:n,type:"GET",dataType:"json",data:{key:t},error:function(e){return function(t,n){return e.trigger("status","import error",t+" "+n)}}(this),success:function(e){return function(e){var t,n,r,s,u,i;for(n=["location-list"],i=e.rows,r=0,u=i.length;r<u;r++)t=i[r],n.push(t.id);return s=_.uniq(n),Tangerine.$db.allDocs({keys:s,include_docs:!0,success:function(e){var t,n,r,s,u,i;for(t=[],s=e.rows,n=0,r=s.length;n<r;n++)u=s[n],t.push(u.doc);return i=new WidgetRunView({model:t}),vm.show(i)}})}}(this)})}})},t.prototype.print=function(e,t){return Tangerine.user.verify({isAuthenticated:function(){var n;return n=new Assessment({_id:e}),n.fetch({success:function(e){var n;return n=new AssessmentPrintView({model:e,format:t}),vm.show(n)}})}})},t.prototype.resume=function(e,t){return Tangerine.user.verify({isAuthenticated:function(){var n;return n=new Assessment({_id:e}),n.fetch({success:function(e){var n;return n=new Result({_id:t}),n.fetch({success:function(t){var n,r,s,u,i,c;for(c=new AssessmentRunView({model:e}),t.has("order_map")&&(s=t.get("order_map").slice(),c.orderMap=s),u=t.get("subtestData"),n=0,r=u.length;n<r;n++)i=u[n],null!=i.data&&null!=i.data.participant_id&&Tangerine.nav.setStudent(i.data.participant_id);return c.result=t,c.subtestViews.pop(),c.subtestViews.push(new ResultView({model:t,assessment:e,assessmentView:c})),c.index=t.get("subtestData").length,vm.show(c)}})}})}})},t.prototype.results=function(e){return Tangerine.user.verify({isAuthenticated:function(){var t,n;return t=function(e,t){var n;return null==e&&(e=new Assessment({_id:t})),n=new Results,n.fetch({include_docs:!1,key:"r"+t,success:function(t){return function(t){var n;return n=new ResultsView({assessment:e,results:t.models}),vm.show(n)}}(this)})},n=new Assessment({_id:e}),n.fetch({success:function(){return t(n,e)},error:function(){return t(n,e)}})}})},t.prototype.klassGrouping=function(e,t){return t=parseInt(t),Tangerine.user.verify({isAuthenticated:function(){var n;return n=new Subtests,n.fetch({success:function(n){var r,s;return s=new Subtests(n.where({part:t})),r=new KlassResults,r.fetch({success:function(t){var n;return t=new KlassResults(t.where({klassId:e})),n=new Students,n.fetch({success:function(){var r,u,i,c,o,a,f,d,l;for(n=new Students(n.where({klassId:e})),d=n.pluck("_id"),f=[],c=t.models,u=0,i=c.length;u<i;u++)a=c[u],o=a.get("studentId"),indexOf.call(d,o)>=0&&f.push(a);return r=new KlassResults(f),l=new KlassGroupingView({students:n,subtests:s,results:r}),vm.show(l)}})}})}})}})},t.prototype.masteryCheck=function(e){return Tangerine.user.verify({isAuthenticated:function(){var t;return t=new Student({_id:e}),t.fetch({success:function(t){var n,r;return r=t.get("klassId"),n=new Klass({_id:t.get("klassId")}),n.fetch({success:function(n){var s;return s=new KlassResults,s.fetch({success:function(s){var u,i,c,o,a,f,d,l,w,h;for(d=new KlassResults(s.where({studentId:e,reportType:"mastery",klassId:r})),h={},a=d.models,u=0,c=a.length;u<c;u++)f=a[u],h[f.get("subtestId")]=!0;for(h=_.keys(h),l=new Subtests,i=0,o=h.length;i<o;i++)w=h[i],l.add(new Subtest({_id:w}));return l.fetch({success:function(){var e;return e=new MasteryCheckView({student:t,results:d,klass:n,subtests:l}),vm.show(e)}})}})}})}})}})},t.prototype.progressReport=function(e,t){return Tangerine.user.verify({isAuthenticated:function(){var n,r,s;return n=function(e,n){var r;return r=new Klass({_id:t}),r.fetch({success:function(r){var s;return s=new Subtests,s.fetch({success:function(s){var u,i;return i=new Subtests(s.where({curriculumId:r.get("curriculumId"),reportType:"progress"})),u=new KlassResults,u.fetch({success:function(s){var u,c,o,a,f,d,l,w,h;if(d=new KlassResults(s.where({klassId:t,reportType:"progress"})),console.log(n),null!=n){for(w=n.pluck("_id"),l=[],o=d.models,u=0,c=o.length;u<c;u++)f=o[u],a=f.get("studentId"),indexOf.call(w,a)>=0&&l.push(f);d=new KlassResults(l)}return h=new ProgressView({subtests:i,student:e,results:d,klass:r}),vm.show(h)}})}})}})},"all"!==e?(r=new Student({_id:e}),r.fetch({success:function(){return n(r)}})):(s=new Students,s.fetch({success:function(){return n(null,s)}}))}})},t.prototype.editSubtest=function(e){return Tangerine.user.verify({isAdmin:function(){var t;return e=Utils.cleanURL(e),t=new Subtest({_id:e}),t.fetch({success:function(e,n){var r;return r=new Assessment({_id:t.get("assessmentId")}),r.fetch({success:function(){var t,n;return n=new Subtests,n.fetch({key:"s"+r.id,success:function(){return console.log("SubtestsPrimeThePump success callback called")},error:function(){return console.log("SubtestsPrimeThePump error callback called")}}),t=new Subtests,t.fetch({key:"s"+r.id,success:function(n){return function(n){var s;return s=new SubtestEditView({model:e,subtests:t,assessment:r}),vm.show(s)}}(this)})}})}})},isUser:function(){return Tangerine.router.landing()}})},t.prototype.editKlassSubtest=function(e){var t;return t=function(e,t,n){var r;return null==n&&(n=null),r=new KlassSubtestEditView({model:e,curriculum:t,questions:n}),vm.show(r)},Tangerine.user.verify({isAdmin:function(){var n;return e=Utils.cleanURL(e),n=new Subtest({_id:e}),n.fetch({success:function(){var e;return e=new Curriculum({_id:n.get("curriculumId")}),e.fetch({success:function(){var r;return"survey"===n.get("prototype")?(r=new Questions,r.fetch({key:e.id,success:function(){return r=new Questions(r.where({subtestId:n.id})),t(n,e,r)}})):t(n,e)}})}})},isUser:function(){return Tangerine.router.landing()}})},t.prototype.editQuestion=function(e){return Tangerine.user.verify({isAdmin:function(){var t;return e=Utils.cleanURL(e),t=new Question({_id:e}),t.fetch({success:function(e,t){var n;return n=new Assessment({_id:e.get("assessmentId")}),n.fetch({success:function(){var t;return t=new Subtest({_id:e.get("subtestId")}),t.fetch({success:function(){var r;return r=new QuestionEditView({question:e,subtest:t,assessment:n}),vm.show(r)}})}})}})},isUser:function(){return Tangerine.router.landing()}})},t.prototype.editKlassQuestion=function(e){return Tangerine.user.verify({isAdmin:function(){var t;return e=Utils.cleanURL(e),t=new Question({_id:e}),t.fetch({success:function(e,t){var n;return n=new Curriculum({_id:e.get("curriculumId")}),n.fetch({success:function(){var t;return t=new Subtest({_id:e.get("subtestId")}),t.fetch({success:function(){var r;return r=new QuestionEditView({question:e,subtest:t,assessment:n}),vm.show(r)}})}})}})}})},t.prototype.login=function(){return Tangerine.user.verify({isAuthenticated:function(){return Tangerine.router.landing()},isUnregistered:function(){var e;return(e=function(e){var t;return null==e&&(e=[]),t=new LoginView({users:e}),vm.show(t)})()}})},t.prototype.logout=function(){return Tangerine.user.logout()},t.prototype.account=function(){return"tangerine"!==Tangerine.db_name?window.location=Tangerine.settings.urlIndex("trunk","account"):Tangerine.user.verify({isAuthenticated:function(){var e;return e=new AccountView({user:Tangerine.user}),vm.show(e)}})},t.prototype.settings=function(){return Tangerine.user.verify({isAuthenticated:function(){var e;return e=new SettingsView,vm.show(e)}})},t.prototype.logs=function(){return Tangerine.user.verify({isAuthenticated:function(){var e;return e=new Logs,e.fetch({success:function(t){return function(){var t;return t=new LogView({logs:e}),vm.show(t)}}(this)})}})},t.prototype.transfer=function(){var e,t;return e=Utils.$_GET(),t=e.name,$.couch.logout({success:function(e){return function(){return $.cookie("AuthSession",null),$.couch.login({name:t,password:t,success:function(){return Tangerine.router.landing(),window.location.reload()},error:function(){return $.couch.signup({name:t,roles:["_admin"]},t,{success:function(){var e;return e=new User,e.save({name:t,id:"tangerine.user:"+t,roles:[],from:"tc"},{wait:!0,success:function(){return $.couch.login({name:t,password:t,success:function(){return Tangerine.router.landing(),window.location.reload()},error:function(){return Utils.sticky("Error transfering user.")}})}})}})}})}}(this)})},t}(Backbone.Router);


Tangerine.locales["en-US"]={translation:{Tangerine:{message:{save_error:"Save error",saved:"Saved"},navigation:{button:{back:"Back"}},actions:{button:{save:"Save"}}},TabletManagerView:{message:{found:"__count__ tablets found.",detecting:"Please wait, detecting tablets...",searching:"Searching. __percentage__% complete.",confirm_pull:"Confirm __found__ tablets found. Start data pull?",pull_status:"Pulling from __tabletCount__ tablets.",pull_complete:"Pull finished. <br>__successful__ out of __total__ successful.",syncing:"Syncing: <br>__done__ out of __total__.",successful_count:"__successful__ out of  __total__ succesful."},label:{sync_complete:"Sync Complete"}},ResultsView:{label:{save_options:"Save options",advanced:"Advanced",pagination:"Results __start__-__end__ of __total__",cloud:"Cloud",csv:"CSV",tablets:"Tablets",status:"Status",started:"Started",results:"Results",details:"Details",page:"Page",per_page:"per page"},button:{refresh:"Refresh",detect:"Detect options"}},ResultSumView:{button:{resume:"Resume"},message:{no_results:"No results yet!"}},SettingsView:{message:{warning:"Please be careful with the following settings."},help:{context:"Sets the general behavior and appearance of Tangerine. Do not change this setting.",language:"Contact a Tangerine admin for more information on what languages are currently available.",group_handle:"A human readable name. Only for display purposes. Any change here will not affect the address of the group or any internal functionality.",group_name:"The group connected to this instance of Tangerine, and any APKs made from this instance.",group_host:"The URL of the server.",upload_password:"The password for uploading to your group.",log_events:"app, ui, db, err"},label:{settings:"Settings",context:"Context",language:"Language",group_handle:"Group handle",group_name:"Group name",group_host:"Group host",upload_password:"Upload password",log_events:"Log events"}},ResultView:{label:{assessment_complete:"Assessment complete",comments:"Additional comments (optional)",subtests_completed:"Subtests completed"},message:{saved:"Result saved",not_saved:"Not saved yet"},button:{save:"Save result",another:"Perform another assessment"}},AssessmentMenuView:{button:{"new":"New","import":"Import",apk:"APK",groups:"Groups",universal_upload:"Universal Upload",sync_tablets:"Sync tablets",results:"Results",save:"Save",cancel:"Cancel"},label:{assessment:"Assessment",assessments:"Assessments",curriculum:"Curriculum"}},GridRunView:{label:{input_mode:"Input Mode",was_autostopped:"Was autostopped",time_remaining:"Time remaining",item_at_seconds:"Item at __seconds__ seconds"},message:{touch_last_item:"Please touch last item read.",time_still_running:"Time still running.",subtest_not_complete:"Subtest not complete.",autostop:"Autostop activated. Discontinue test.",autostop_cancel:"Autostop removed. Continue.",last_item_confirm:'Was the last item "__item__"?\nOk to confirm. Cancel to place bracket.'},button:{restart:"Restart",start:"Start",stop:"Stop",mark:"Mark",last_attempted:"Last attempted",item_at_seconds:"Item at __seconds__ seconds"}},SubtestRunView:{button:{help:"Help",skip:"Skip",next:"Next",back:"Back"}},DatetimeRunView:{label:{year:"Year",month:"Month",day:"Day",time:"Time"}},ConsentRunView:{label:{default_consent_prompt:"Does the child consent?",confirm_nonconsent:"Click to confirm consent not obtained."},button:{confirm:"Confirm",yes_continue:"Yes, continue",no_stop:"No, stop"},message:{confirm:"Please confirm.",select:"Please select one."}},IdRunView:{label:{identifier:"Random identifier"},button:{generate:"Generate"}},LocationRunView:{button:{clear:"Clear"},message:{must_be_filled:"__levelName__ must be filled.",please_select:"Please select a(n) __levelName__"}},SurveyRunView:{button:{next_question:"Next question",previous_question:"Previous question"},message:{please_answer:"Please answer this question.",not_enough:"Student did not read enough words to ask comprehension questions.",correct_errors:"Please correct the errors on this page."}},NavigationView:{label:{teacher:"Teacher",user:"User",enumerator:"Enumerator",student_id:"Student ID",version:"Version"},button:{logout:"Logout",account:"Account",settings:"Settings"},help:{logo:"Go to main screen.",account:"Go to account screen."},message:{incomplete_main_screen:"Assessment not finished. Continue to main screen?",incomplete_logout:"Assessment not finished. Continue to logout?",logout_confirm:"Are you sure you want to logout?"}},LoginView:{message:{error_password_incorrect:"Incorrect password.",error_password_empty:"Please enter a password.",error_name_empty:"Please enter a name.",error_name_taken:"Name already taken.",pass_mismatch:"Passwords do not match"},button:{sign_up:"Sign up",login:"Login",logout:"Logout"},label:{login:"Login",sign_up:"Sign up",teacher:"Teacher name",user:"User name",enumerator:"Enumerator name",password:"Password",password_confirm:"Confirm Password"}},QuestionsEditListElementView:{help:{copy_to:"Copy to","delete":"Delete",edit:"Edit"},button:{"delete":"Delete",cancel:"Cancel"},label:{delete_confirm:"Delete?",loading:"Loading...",select:"Select a subtest"}},GpsRunView:{button:{clear:"Clear"},label:{good:"Good",ok:"Ok",poor:"Poor",meters:"meters",latitude:"Latitude",longitude:"Longitude",accuracy:"Accuracy",gps_status:"GPS Status",best_reading:"Best reading",current_reading:"Current reading"},message:{gps_ok:"GPS signal ok.",attempt:"Attempt #__count__",retrying:"Retrying...",searching:"Searching...",not_supported:"Your system does not support geolocations."}},WidgetRunView:{button:{save:"Save result to server",saved:"Result saved to Couchdb"}}}};
Tangerine.locales.fr={translation:{Tangerine:{message:{save_error:"Save error",saved:"Saved"},navigation:{button:{back:"Back"}},actions:{button:{save:"Save"}}},TabletManagerView:{message:{found:"__count__ tablettes trouvées.",detecting:"Veuillez patienter, detection de tablettes en cours...",searching:"Cherchant: __percentage__% Complété",confirm_pull:"À confirmer / __found__ tablettes trouvées. Commencer tirage des données?",pull_status:"Tirant dès __tabletCount__ tablettes.",pull_complete:"Tirage complète. Réussite chez __successful__ parmi __total__.",syncing:"Synchronisant / __done__ parmi __total__.",successful_count:"Réussite chez __successful__ parmi __total__."},label:{sync_complete:"Synchronisation complète."}},ResultsView:{label:{save_options:"Modalités d’enregistrement disponibles",advanced:"Avancé",pagination:"Résultats __start__-__end__ de __total__",cloud:"Serveur",csv:"CSV",tablets:"Tablettes",status:"État actuel",started:"Démarrée",results:"Résultats",details:"Détails",page:"Page",per_page:"par page"},button:{refresh:"Actualiser",detect:"Identifier possibilités"}},ResultSumView:{button:{resume:"Reprendre"},message:{no_results:"Pas encore de résultats !"}},SettingsView:{message:{warning:"Please be careful with the following settings."},help:{context:"Sets the general behavior and appearance of Tangerine. Do not change this setting.",language:"Contact a Tangerine admin for more information on what languages are currently available.",group_handle:"A human readable name. Only for display purposes. Any change here will not affect the address of the group or any internal functionality.",group_name:"The group connected to this instance of Tangerine, and any APKs made from this instance.",group_host:"The URL of the server.",upload_password:"The password for uploading to your group.",log_events:"app, ui, db, err"},label:{settings:"Settings",context:"Context",language:"Language",group_handle:"Group handle",group_name:"Group name",group_host:"Group host",upload_password:"Upload password",log_events:"Log events"}},AssessmentMenuView:{button:{"new":"Nouvelle","import":"Importer",apk:"APK",groups:"Groupes",universal_upload:"Envoi universel",sync_tablets:"Synchroniser tablettes",results:"Résultats",save:"Enregistrer",cancel:"Annuler"},label:{assessment:"Évaluation",assessments:"Évaluations",curriculum:"Programme"}},ResultView:{label:{assessment_complete:"Test complété",comments:"Commentaires à rajouter (facultatif)",subtests_completed:"Tâches complétées"},message:{saved:"Résultats Enregistrés",not_saved:" Pas encore enregistrés"},button:{save:"Enregistrer résultats",another:"Faire encore un test"}},GridRunView:{label:{input_mode:"Mode d'entrée",was_autostopped:"Arrêtée automatiquement",time_remaining:"Temps restant"},message:{touch_last_item:"Veuillez indiquer le dernier item tenté.",time_still_running:"Le compte à rebours continue.",subtest_not_complete:"Tâche incomplète.",autostop:"Auto-arrêt activé. Cessez la tâche.",autostop_cancel:"Auto-arrêt retiré. Continuez.",last_item_confirm:"Le dernier item était-il __item__?\n Confirmez avec Ok. Annulez pour mettre le crochet."},button:{restart:"Redémarrer",start:"Démarrer",stop:"Arrêter",mark:"Marquer",last_attempted:"Dernier item essayé",item_at_seconds:"Item à __seconds__ secondes"}},SubtestRunView:{button:{help:"Aide",skip:"Passer",next:"Prochaine",back:"Retour"}},DatetimeRunView:{label:{year:"Année",month:"Mois",day:"Jour",time:"Heure"}},ConsentRunView:{label:{default_consent_prompt:"Consentement obtenu?",confirm_nonconsent:"Cliquer pour confirmer que le consentement n’a pas été obtenu."},button:{confirm:"Confirmer",yes_continue:"Oui, continuer",no_stop:"Non, arrêter"},message:{confirm:"Veuillez confirmer.",select:"Veuillez en sélectionner une."}},IdRunView:{label:{identifier:"Identifiant aléatoire"},button:{generate:"Générer"}},LocationRunView:{button:{clear:"Vider"},message:{please_select:"Veuillez sélectionner un(e) __levelName__",must_be_filled:"__levelName__ doit être rempli."}},SurveyRunView:{button:{next_question:"Prochaine question",previous_question:"Question précédente"},message:{please_answer:"Veuillez répondre à cette question.",not_enough:"L'élève n'a pas lu suffisamment de mots pour lui poser des questions de compréhension.",correct_errors:"Veuillez corriger les erreurs sur la page."}},NavigationView:{label:{teacher:"Enseignant",user:"Utilisateur",enumerator:"Énumérateur",student_id:"Identifiant de l'élève",version:"Version"},button:{logout:"Fermeture",account:"Compte",settings:"Paramètres"},help:{logo:"Aller à l'écran principal.",account:"Aller à l'écran de comptes."},message:{incomplete_main_screen:"Test incomplet. Continuer à l'écran principal?",incomplete_logout:"Test incomplet. Continuer à l'écran de fermeture?",logout_confirm:"Vous êtes sûr de vouloir fermer la session?"}},LoginView:{message:{error_password_incorrect:"Mot de passe incorrect.",error_password_empty:"Veuillez fournir un mot de passe.",error_name_empty:"Veuillez fournir un nom.",error_name_taken:"Nom déjà pris.",pass_mismatch:"Les mots de passe ne correspondent pas."},button:{sign_up:"Abonnement",login:"Ouverture"},label:{login:"Ouverture",sign_up:"Abonnement",teacher:"Nom d'enseignant",user:"Nom d'utilisateur",enumerator:"Nom d'énumérateur",password:"Mot de passe",password_confirm:"Confirmez le mot de passe"}},QuestionsEditListElementView:{help:{copy_to:"Copier vers","delete":"Éffacer",edit:"Modifier"},button:{"delete":"Éffacer",cancel:"Annuler"},label:{delete_confirm:"Éffacer?",loading:"Chargement en cours…",select:"Sélectionner une tâche"}},GpsRunView:{button:{clear:"Vider"},label:{good:"Bon",ok:"Okay",poor:"Mauvais",meters:"mètre",latitude:"Latitude",longitude:"Longitude",accuracy:"Exactitude",gps_status:"État GPS",best_reading:"Meilleure indication",current_reading:"Indication actuelle"},message:{gps_ok:"Signal GPS ok.",attempt:"Essai __count__",retrying:"Réessayant…",searching:"Cherchant…",not_supported:"Votre système n'est pas compatible avec la géolocalisation."}}}};
Tangerine.bootSequence={basicConfig:function(e){var n;return $.couch.urlPrefix="/db",Tangerine.db_name=window.location.pathname.split("/")[2],Tangerine.design_doc="ojai",Tangerine.$db=$.couch.db(Tangerine.db_name),n=document.createElement("a"),n.href=window.location,Backbone.couch_connector.config.base_url=n.protocol+"//"+n.host+"/db",Backbone.couch_connector.config.db_name=Tangerine.db_name,Backbone.couch_connector.config.ddoc_name=Tangerine.design_doc,Backbone.couch_connector.config.global_changes=!1,_.templateSettings={interpolate:/\{\{(.+?)\}\}/g},e()},fetchConfiguration:function(e){return Tangerine.config=new Config({_id:"configuration"}),Tangerine.config.fetch({error:function(){return alert("Could not fetch configuration")},success:e})},fetchSettings:function(e){return Tangerine.settings=new Settings({_id:"settings"}),Tangerine.settings.fetch({success:e,error:function(){var n,t;return n=null!=(t=Tangerine.config.get("defaults"))?t.settings:void 0,null==n&&alert("Missing default settings in configuration"),Tangerine.settings.set(n),Tangerine.settings.save(null,{error:function(){return alert("Could not save default settings")},success:e})}})},guaranteeInstanceId:function(e){return Tangerine.settings.has("instanceId")?e():Tangerine.settings.save({instanceId:Utils.humanGUID()},{error:function(){return alert("Could not save new Instance Id")},success:e})},fetchTemplates:function(e){return(Tangerine.templates=new Template({_id:"templates"})).fetch({error:function(){return alert("Could not load templates.")},success:e})},documentReady:function(e){return $(function(){return e()})},loadI18n:function(e){return i18n.init({fallbackLng:"en-US",lng:Tangerine.settings.get("language"),resStore:Tangerine.locales},function(){return window.t=i18n.t,e()})},loadSingletons:function(e){return window.vm=new ViewManager,Tangerine.router=new Router,Tangerine.user=new User,Tangerine.nav=new NavigationView({user:Tangerine.user,router:Tangerine.router}),Tangerine.log=new Log,e()},reloadUserSession:function(e){return Tangerine.user.sessionRefresh({error:function(){return Tangerine.user.logout()},success:function(){return e()}})},startBackbone:function(e){return Backbone.history.start(),e()},getLocationList:function(e){return Tangerine.locationList=new Backbone.Model({_id:"location-list"}),Tangerine.locationList.fetch({error:e,success:e})}},Tangerine.boot=function(e){var n;return n=[Tangerine.bootSequence.basicConfig,Tangerine.bootSequence.fetchConfiguration,Tangerine.bootSequence.fetchSettings,Tangerine.bootSequence.guaranteeInstanceId,Tangerine.bootSequence.fetchTemplates,Tangerine.bootSequence.documentReady,Tangerine.bootSequence.getLocationList,Tangerine.bootSequence.loadI18n,Tangerine.bootSequence.loadSingletons,Tangerine.bootSequence.reloadUserSession,Tangerine.bootSequence.startBackbone],null!=e&&n.push(e),Utils.execute(n)},Tangerine.boot();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9nbG9iYWxzLmNvZmZlZSIsImFwcC9oZWxwZXJzLmNvZmZlZSIsImhlbHBlcnMuanMiLCJjbGllbnQvRG9jdW1lbnRzRm9yQ2xpZW50LmNvZmZlZSIsIkRvY3VtZW50c0ZvckNsaWVudC5qcyIsImJ1dHRvbi9CdXR0b25WaWV3LmNvZmZlZSIsIkJ1dHRvblZpZXcuanMiLCJhc3Nlc3NtZW50L0Fzc2Vzc21lbnQuY29mZmVlIiwiQXNzZXNzbWVudC5qcyIsImFzc2Vzc21lbnQvQXNzZXNzbWVudHMuY29mZmVlIiwiQXNzZXNzbWVudHMuanMiLCJhc3Nlc3NtZW50L0Fzc2Vzc21lbnRzVmlldy5jb2ZmZWUiLCJBc3Nlc3NtZW50c1ZpZXcuanMiLCJhc3Nlc3NtZW50L0Fzc2Vzc21lbnRMaXN0RWxlbWVudFZpZXcuY29mZmVlIiwiQXNzZXNzbWVudExpc3RFbGVtZW50Vmlldy5qcyIsImFzc2Vzc21lbnQvQXNzZXNzbWVudHNNZW51Vmlldy5jb2ZmZWUiLCJBc3Nlc3NtZW50c01lbnVWaWV3LmpzIiwiYXNzZXNzbWVudC9Bc3Nlc3NtZW50RWRpdFZpZXcuY29mZmVlIiwiQXNzZXNzbWVudEVkaXRWaWV3LmpzIiwiYXNzZXNzbWVudC9Bc3Nlc3NtZW50UnVuVmlldy5jb2ZmZWUiLCJBc3Nlc3NtZW50UnVuVmlldy5qcyIsImFzc2Vzc21lbnQvQXNzZXNzbWVudEltcG9ydFZpZXcuY29mZmVlIiwiQXNzZXNzbWVudEltcG9ydFZpZXcuanMiLCJhc3Nlc3NtZW50L0Fzc2Vzc21lbnRTeW5jVmlldy5jb2ZmZWUiLCJBc3Nlc3NtZW50U3luY1ZpZXcuanMiLCJhc3Nlc3NtZW50L0Fzc2Vzc21lbnREYXRhRW50cnlWaWV3LmNvZmZlZSIsIkFzc2Vzc21lbnREYXRhRW50cnlWaWV3LmpzIiwid2lkZ2V0L1dpZGdldFJ1blZpZXcuY29mZmVlIiwiV2lkZ2V0UnVuVmlldy5qcyIsInN1YnRlc3QvU3VidGVzdC5jb2ZmZWUiLCJTdWJ0ZXN0LmpzIiwic3VidGVzdC9TdWJ0ZXN0cy5jb2ZmZWUiLCJTdWJ0ZXN0cy5qcyIsInN1YnRlc3QvU3VidGVzdExpc3RFZGl0Vmlldy5jb2ZmZWUiLCJTdWJ0ZXN0TGlzdEVkaXRWaWV3LmpzIiwic3VidGVzdC9TdWJ0ZXN0TGlzdEVsZW1lbnRWaWV3LmNvZmZlZSIsIlN1YnRlc3RMaXN0RWxlbWVudFZpZXcuanMiLCJzdWJ0ZXN0L1N1YnRlc3RFZGl0Vmlldy5jb2ZmZWUiLCJTdWJ0ZXN0RWRpdFZpZXcuanMiLCJzdWJ0ZXN0L1N1YnRlc3RSdW5WaWV3LmNvZmZlZSIsIlN1YnRlc3RSdW5WaWV3LmpzIiwic3VidGVzdC9wcm90b3R5cGVzL0NvbnNlbnRSdW5WaWV3LmNvZmZlZSIsIkNvbnNlbnRSdW5WaWV3LmpzIiwic3VidGVzdC9wcm90b3R5cGVzL0NvbnNlbnRFZGl0Vmlldy5jb2ZmZWUiLCJDb25zZW50RWRpdFZpZXcuanMiLCJzdWJ0ZXN0L3Byb3RvdHlwZXMvRGF0ZXRpbWVSdW5WaWV3LmNvZmZlZSIsIkRhdGV0aW1lUnVuVmlldy5qcyIsInN1YnRlc3QvcHJvdG90eXBlcy9EYXRldGltZUVkaXRWaWV3LmNvZmZlZSIsIkRhdGV0aW1lRWRpdFZpZXcuanMiLCJzdWJ0ZXN0L3Byb3RvdHlwZXMvTG9jYXRpb25SdW5WaWV3LmNvZmZlZSIsIkxvY2F0aW9uUnVuVmlldy5qcyIsInN1YnRlc3QvcHJvdG90eXBlcy9Mb2NhdGlvbkVkaXRWaWV3LmNvZmZlZSIsIkxvY2F0aW9uRWRpdFZpZXcuanMiLCJzdWJ0ZXN0L3Byb3RvdHlwZXMvU3VydmV5UnVuVmlldy5jb2ZmZWUiLCJTdXJ2ZXlSdW5WaWV3LmpzIiwic3VidGVzdC9wcm90b3R5cGVzL1N1cnZleUVkaXRWaWV3LmNvZmZlZSIsIlN1cnZleUVkaXRWaWV3LmpzIiwic3VidGVzdC9wcm90b3R5cGVzL0lkUnVuVmlldy5jb2ZmZWUiLCJJZFJ1blZpZXcuanMiLCJzdWJ0ZXN0L3Byb3RvdHlwZXMvSWRFZGl0Vmlldy5jb2ZmZWUiLCJJZEVkaXRWaWV3LmpzIiwic3VidGVzdC9wcm90b3R5cGVzL0dyaWRSdW5WaWV3LmNvZmZlZSIsIkdyaWRSdW5WaWV3LmpzIiwic3VidGVzdC9wcm90b3R5cGVzL0dyaWRFZGl0Vmlldy5jb2ZmZWUiLCJHcmlkRWRpdFZpZXcuanMiLCJzdWJ0ZXN0L3Byb3RvdHlwZXMvT2JzZXJ2YXRpb25SdW5WaWV3LmNvZmZlZSIsIk9ic2VydmF0aW9uUnVuVmlldy5qcyIsInN1YnRlc3QvcHJvdG90eXBlcy9PYnNlcnZhdGlvbkVkaXRWaWV3LmNvZmZlZSIsIk9ic2VydmF0aW9uRWRpdFZpZXcuanMiLCJzdWJ0ZXN0L3Byb3RvdHlwZXMvR3BzUnVuVmlldy5jb2ZmZWUiLCJHcHNSdW5WaWV3LmpzIiwic3VidGVzdC9wcm90b3R5cGVzL0dwc0VkaXRWaWV3LmNvZmZlZSIsIkdwc0VkaXRWaWV3LmpzIiwic3VidGVzdC9wcm90b3R5cGVzL0dwc1ByaW50Vmlldy5jb2ZmZWUiLCJHcHNQcmludFZpZXcuanMiLCJyZXN1bHQvUmVzdWx0LmNvZmZlZSIsIlJlc3VsdC5qcyIsInJlc3VsdC9SZXN1bHRzLmNvZmZlZSIsIlJlc3VsdHMuanMiLCJyZXN1bHQvUmVzdWx0Vmlldy5jb2ZmZWUiLCJSZXN1bHRWaWV3LmpzIiwicmVzdWx0L1Jlc3VsdHNWaWV3LmNvZmZlZSIsIlJlc3VsdHNWaWV3LmpzIiwicmVzdWx0L1RhYmxldE1hbmFnZXJWaWV3LmNvZmZlZSIsIlRhYmxldE1hbmFnZXJWaWV3LmpzIiwicmVzdWx0L1Jlc3VsdFN1bVZpZXcuY29mZmVlIiwiUmVzdWx0U3VtVmlldy5qcyIsInJlc3VsdC9EYXNoYm9hcmRWaWV3LmNvZmZlZSIsIkRhc2hib2FyZFZpZXcuanMiLCJhZG1pbi9BZG1pblZpZXcuY29mZmVlIiwiQWRtaW5WaWV3LmpzIiwicXVlc3Rpb24vUXVlc3Rpb24uY29mZmVlIiwiUXVlc3Rpb24uanMiLCJxdWVzdGlvbi9RdWVzdGlvbnMuY29mZmVlIiwiUXVlc3Rpb25zLmpzIiwicXVlc3Rpb24vUXVlc3Rpb25SdW5WaWV3LmNvZmZlZSIsIlF1ZXN0aW9uUnVuVmlldy5qcyIsInF1ZXN0aW9uL1F1ZXN0aW9uRWRpdFZpZXcuY29mZmVlIiwiUXVlc3Rpb25FZGl0Vmlldy5qcyIsInF1ZXN0aW9uL1F1ZXN0aW9uc0VkaXRWaWV3LmNvZmZlZSIsIlF1ZXN0aW9uc0VkaXRWaWV3LmpzIiwicXVlc3Rpb24vUXVlc3Rpb25zRWRpdExpc3RFbGVtZW50Vmlldy5jb2ZmZWUiLCJRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LmpzIiwid29ya2Zsb3cvV29ya2Zsb3dTdGVwLmNvZmZlZSIsIldvcmtmbG93U3RlcC5qcyIsIndvcmtmbG93L1dvcmtmbG93U3RlcHMuY29mZmVlIiwiV29ya2Zsb3dTdGVwcy5qcyIsIndvcmtmbG93L1dvcmtmbG93LmNvZmZlZSIsIldvcmtmbG93LmpzIiwid29ya2Zsb3cvV29ya2Zsb3dzLmNvZmZlZSIsIldvcmtmbG93cy5qcyIsIndvcmtmbG93L1NjaG9vbExpc3RWaWV3LmNvZmZlZSIsIlNjaG9vbExpc3RWaWV3LmpzIiwid29ya2Zsb3cvV29ya2Zsb3dNZW51Vmlldy5jb2ZmZWUiLCJXb3JrZmxvd01lbnVWaWV3LmpzIiwid29ya2Zsb3cvVmFsaWRPYnNlcnZhdGlvblZpZXcuY29mZmVlIiwiVmFsaWRPYnNlcnZhdGlvblZpZXcuanMiLCJ3b3JrZmxvdy9Xb3JrZmxvd0VkaXRWaWV3LmNvZmZlZSIsIldvcmtmbG93RWRpdFZpZXcuanMiLCJ3b3JrZmxvdy9Xb3JrZmxvd1J1blZpZXcuY29mZmVlIiwiV29ya2Zsb3dSdW5WaWV3LmpzIiwid29ya2Zsb3cvV29ya2Zsb3dTZWxlY3RWaWV3LmNvZmZlZSIsIldvcmtmbG93U2VsZWN0Vmlldy5qcyIsIndvcmtmbG93L1dvcmtmbG93TWVudU1lbWJlclZpZXcuY29mZmVlIiwiV29ya2Zsb3dNZW51TWVtYmVyVmlldy5qcyIsImtsYXNzL0tsYXNzLmNvZmZlZSIsIktsYXNzLmpzIiwia2xhc3MvS2xhc3NWaWV3LmNvZmZlZSIsIktsYXNzVmlldy5qcyIsImtsYXNzL0tsYXNzRWRpdFZpZXcuY29mZmVlIiwiS2xhc3NFZGl0Vmlldy5qcyIsImtsYXNzL0tsYXNzZXMuY29mZmVlIiwiS2xhc3Nlcy5qcyIsImtsYXNzL0tsYXNzZXNWaWV3LmNvZmZlZSIsIktsYXNzZXNWaWV3LmpzIiwia2xhc3MvS2xhc3NMaXN0RWxlbWVudFZpZXcuY29mZmVlIiwiS2xhc3NMaXN0RWxlbWVudFZpZXcuanMiLCJrbGFzcy9LbGFzc1N1YnRlc3RSdW5WaWV3LmNvZmZlZSIsIktsYXNzU3VidGVzdFJ1blZpZXcuanMiLCJrbGFzcy9LbGFzc1N1YnRlc3RSZXN1bHRWaWV3LmNvZmZlZSIsIktsYXNzU3VidGVzdFJlc3VsdFZpZXcuanMiLCJrbGFzcy9LbGFzc01lbnVWaWV3LmNvZmZlZSIsIktsYXNzTWVudVZpZXcuanMiLCJrbGFzcy9LbGFzc1BhcnRseVZpZXcuY29mZmVlIiwiS2xhc3NQYXJ0bHlWaWV3LmpzIiwia2xhc3MvS2xhc3NSZXN1bHQuY29mZmVlIiwiS2xhc3NSZXN1bHQuanMiLCJrbGFzcy9LbGFzc1Jlc3VsdHMuY29mZmVlIiwiS2xhc3NSZXN1bHRzLmpzIiwic3VidGVzdC9LbGFzc1N1YnRlc3RFZGl0Vmlldy5jb2ZmZWUiLCJLbGFzc1N1YnRlc3RFZGl0Vmlldy5qcyIsInJlcG9ydC9LbGFzc0dyb3VwaW5nVmlldy5jb2ZmZWUiLCJLbGFzc0dyb3VwaW5nVmlldy5qcyIsInJlcG9ydC9LbGFzc0dyb3VwaW5nTWVudVZpZXcuY29mZmVlIiwiS2xhc3NHcm91cGluZ01lbnVWaWV3LmpzIiwicmVwb3J0L01hc3RlcnlDaGVja1ZpZXcuY29mZmVlIiwiTWFzdGVyeUNoZWNrVmlldy5qcyIsInJlcG9ydC9NYXN0ZXJ5Q2hlY2tNZW51Vmlldy5jb2ZmZWUiLCJNYXN0ZXJ5Q2hlY2tNZW51Vmlldy5qcyIsInJlcG9ydC9Qcm9ncmVzc1ZpZXcuY29mZmVlIiwiUHJvZ3Jlc3NWaWV3LmpzIiwicmVwb3J0L1Byb2dyZXNzTWVudVZpZXcuY29mZmVlIiwiUHJvZ3Jlc3NNZW51Vmlldy5qcyIsInJlcG9ydC9Dc3ZNZW51Vmlldy5jb2ZmZWUiLCJDc3ZNZW51Vmlldy5qcyIsImN1cnJpY3VsdW0vQ3VycmljdWx1bS5jb2ZmZWUiLCJDdXJyaWN1bHVtLmpzIiwiY3VycmljdWx1bS9DdXJyaWN1bHVtVmlldy5jb2ZmZWUiLCJDdXJyaWN1bHVtVmlldy5qcyIsImN1cnJpY3VsdW0vQ3VycmljdWxhLmNvZmZlZSIsIkN1cnJpY3VsYS5qcyIsImN1cnJpY3VsdW0vQ3VycmljdWxhVmlldy5jb2ZmZWUiLCJDdXJyaWN1bGFWaWV3LmpzIiwiY3VycmljdWx1bS9DdXJyaWN1bGFMaXN0Vmlldy5jb2ZmZWUiLCJDdXJyaWN1bGFMaXN0Vmlldy5qcyIsImN1cnJpY3VsdW0vQ3VycmljdWx1bUxpc3RFbGVtZW50Vmlldy5jb2ZmZWUiLCJDdXJyaWN1bHVtTGlzdEVsZW1lbnRWaWV3LmpzIiwidGVhY2hlci9UZWFjaGVyLmNvZmZlZSIsIlRlYWNoZXIuanMiLCJ0ZWFjaGVyL1RlYWNoZXJzLmNvZmZlZSIsIlRlYWNoZXJzLmpzIiwidGVhY2hlci9UZWFjaGVyc1ZpZXcuY29mZmVlIiwiVGVhY2hlcnNWaWV3LmpzIiwidGVhY2hlci9SZWdpc3RlclRlYWNoZXJWaWV3LmNvZmZlZSIsIlJlZ2lzdGVyVGVhY2hlclZpZXcuanMiLCJzdHVkZW50L1N0dWRlbnQuY29mZmVlIiwiU3R1ZGVudC5qcyIsInN0dWRlbnQvU3R1ZGVudHMuY29mZmVlIiwiU3R1ZGVudHMuanMiLCJzdHVkZW50L1N0dWRlbnRMaXN0RWxlbWVudFZpZXcuY29mZmVlIiwiU3R1ZGVudExpc3RFbGVtZW50Vmlldy5qcyIsInN0dWRlbnQvU3R1ZGVudEVkaXRWaWV3LmNvZmZlZSIsIlN0dWRlbnRFZGl0Vmlldy5qcyIsImZlZWRiYWNrL0NyaXRpcXVlLmNvZmZlZSIsIkNyaXRpcXVlLmpzIiwiZmVlZGJhY2svQ3JpdGlxdWVzLmNvZmZlZSIsIkNyaXRpcXVlcy5qcyIsImxvYy9Mb2MuY29mZmVlIiwiTG9jLmpzIiwibG9jL0xvY1ZpZXcuY29mZmVlIiwiTG9jVmlldy5qcyIsImZlZWRiYWNrL0ZlZWRiYWNrLmNvZmZlZSIsIkZlZWRiYWNrLmpzIiwiZmVlZGJhY2svRmVlZGJhY2tFZGl0Vmlldy5jb2ZmZWUiLCJGZWVkYmFja0VkaXRWaWV3LmpzIiwiZmVlZGJhY2svRmVlZGJhY2tSdW5WaWV3LmNvZmZlZSIsIkZlZWRiYWNrUnVuVmlldy5qcyIsImZlZWRiYWNrL0ZlZWRiYWNrVHJpcHNWaWV3LmNvZmZlZSIsIkZlZWRiYWNrVHJpcHNWaWV3LmpzIiwicmVzdWx0L1RyaXBSZXN1bHQuY29mZmVlIiwiVHJpcFJlc3VsdC5qcyIsInVzZXIvVXNlci5jb2ZmZWUiLCJVc2VyLmpzIiwidXNlci9Vc2Vycy5jb2ZmZWUiLCJVc2Vycy5qcyIsInVzZXIvTG9naW5WaWV3LmNvZmZlZSIsIkxvZ2luVmlldy5qcyIsInVzZXIvQWNjb3VudFZpZXcuY29mZmVlIiwiQWNjb3VudFZpZXcuanMiLCJ1c2VyL0dyb3Vwc1ZpZXcuY29mZmVlIiwiR3JvdXBzVmlldy5qcyIsInVzZXIvVXNlcnNNZW51Vmlldy5jb2ZmZWUiLCJVc2Vyc01lbnVWaWV3LmpzIiwiYXNzZXNzbWVudC9Bc3Nlc3NtZW50UHJpbnRWaWV3LmNvZmZlZSIsIkFzc2Vzc21lbnRQcmludFZpZXcuanMiLCJxdWVzdGlvbi9RdWVzdGlvblByaW50Vmlldy5jb2ZmZWUiLCJRdWVzdGlvblByaW50Vmlldy5qcyIsInN1YnRlc3QvcHJvdG90eXBlcy9HcmlkUHJpbnRWaWV3LmNvZmZlZSIsIkdyaWRQcmludFZpZXcuanMiLCJzdWJ0ZXN0L3Byb3RvdHlwZXMvQ29uc2VudFByaW50Vmlldy5jb2ZmZWUiLCJDb25zZW50UHJpbnRWaWV3LmpzIiwic3VidGVzdC9wcm90b3R5cGVzL0RhdGV0aW1lUHJpbnRWaWV3LmNvZmZlZSIsIkRhdGV0aW1lUHJpbnRWaWV3LmpzIiwic3VidGVzdC9wcm90b3R5cGVzL0lkUHJpbnRWaWV3LmNvZmZlZSIsIklkUHJpbnRWaWV3LmpzIiwic3VidGVzdC9wcm90b3R5cGVzL0xvY2F0aW9uUHJpbnRWaWV3LmNvZmZlZSIsIkxvY2F0aW9uUHJpbnRWaWV3LmpzIiwic3VidGVzdC9wcm90b3R5cGVzL1N1cnZleVByaW50Vmlldy5jb2ZmZWUiLCJTdXJ2ZXlQcmludFZpZXcuanMiLCJzdWJ0ZXN0L3Byb3RvdHlwZXMvT2JzZXJ2YXRpb25QcmludFZpZXcuY29mZmVlIiwiT2JzZXJ2YXRpb25QcmludFZpZXcuanMiLCJzdWJ0ZXN0L1N1YnRlc3RQcmludFZpZXcuY29mZmVlIiwiU3VidGVzdFByaW50Vmlldy5qcyIsImNvbmZpZy9Db25maWcuY29mZmVlIiwiQ29uZmlnLmpzIiwibG9nL0xvZy5jb2ZmZWUiLCJMb2cuanMiLCJ0ZW1wbGF0ZS9UZW1wbGF0ZS5jb2ZmZWUiLCJUZW1wbGF0ZS5qcyIsInNldHRpbmdzL1NldHRpbmdzLmNvZmZlZSIsIlNldHRpbmdzLmpzIiwic2V0dGluZ3MvU2V0dGluZ3NWaWV3LmNvZmZlZSIsIlNldHRpbmdzVmlldy5qcyIsInZpZXdNYW5hZ2VyL1ZpZXdNYW5hZ2VyLmNvZmZlZSIsIlZpZXdNYW5hZ2VyLmpzIiwibmF2aWdhdGlvbi9OYXZpZ2F0aW9uVmlldy5jb2ZmZWUiLCJOYXZpZ2F0aW9uVmlldy5qcyIsImFwcC9yb3V0ZXIuY29mZmVlIiwicm91dGVyLmpzIiwibG9jYWxlcy5qcyIsImFwcC9ib290LmNvZmZlZSIsImJvb3QuanMiXSwibmFtZXMiOlsiVGFuZ2VyaW5lIiwibG9jYWxlcyIsIlJlc3VsdE9mR3JpZCIsIlJlc3VsdE9mTXVsdGlwbGUiLCJSZXN1bHRPZlByZXZpb3VzIiwiUmVzdWx0T2ZRdWVzdGlvbiIsIlJvYmJlcnQiLCJUYW5nZXJpbmVUcmVlIiwiVXRpbHMiLCJpIiwia20iLCJza3MiLCJiaW5kIiwiZm4iLCJtZSIsImFwcGx5IiwiYXJndW1lbnRzIiwiZXh0ZW5kIiwiY2hpbGQiLCJwYXJlbnQiLCJjdG9yIiwidGhpcyIsImNvbnN0cnVjdG9yIiwia2V5IiwiaGFzUHJvcCIsImNhbGwiLCJwcm90b3R5cGUiLCJfX3N1cGVyX18iLCJoYXNPd25Qcm9wZXJ0eSIsImluZGV4T2YiLCJpdGVtIiwibCIsImxlbmd0aCIsInNsaWNlIiwiQmFja2JvbmUiLCJFZGl0VmlldyIsInN1cGVyQ2xhc3MiLCJlZGl0aW5nIiwiZWRpdEluUGxhY2UiLCJnZXRFZGl0YWJsZSIsImV2ZW50cyIsImNsaWNrIC5lZGl0X2luX3BsYWNlIiwiZm9jdXNvdXQgLmVkaXRpbmciLCJrZXl1cCAgICAuZWRpdGluZyIsImtleWRvd24gIC5lZGl0aW5nIiwib3B0aW9ucyIsImF0dHJpYnV0ZSIsImh0bWxGdW5jdGlvbiIsIm1vZGVsIiwibmFtZSIsInBsYWNlaG9sZGVyIiwicHJlcGFyZSIsInByZXBhcmF0aW9ucyIsImlkIiwiaHRtbEdlbkNhdGVsb2ciLCJlZGl0T3JOb3QiLCJlc2NhcGUiLCJudW1iZXJPck5vdCIsInJlc3VsdCIsInR5cGUiLCJ1bnRpdGxlZCIsInZhbHVlIiwiaGFzIiwiZ2V0IiwiXyIsImlzRW1wdHlTdHJpbmciLCJlZGl0YWJsZSIsInNldHRpbmdzIiwiaXNOdW1iZXIiLCJldmVudCIsIiRwYXJlbnQiLCIkc3BhbiIsIiR0YXJnZXQiLCIkdGV4dGFyZWEiLCJjbGFzc2VzIiwiZ3VpZCIsIm1hcmdpbnMiLCJtb2RlbElkIiwib2xkVmFsdWUiLCJyb3dzIiwidHJhbnNmZXJWYXJpYWJsZXMiLCJhbHJlYWR5RWRpdGluZyIsIiQiLCJ0YXJnZXQiLCJoYXNDbGFzcyIsImF0dHIiLCJtb2RlbHMiLCJyZXBsYWNlIiwiY3NzIiwiY291bnQiLCJwYXJzZUludCIsIk1hdGgiLCJtYXgiLCJodG1sIiwic2VsZWN0IiwiYWx0S2V5IiwiYXR0cmlidXRlcyIsImJhc2UiLCJiYXNlMSIsImUiLCJlbnRlciIsImtleURvd24iLCJuZXdWYWx1ZSIsInJlZiIsInJlZjEiLCJ3aGljaCIsInZhbCIsIiRlbCIsImZpbmQiLCJTdHJpbmciLCJlcnJvcjEiLCJzdGlja3kiLCJtZXNzYWdlIiwic2F2ZSIsInN1Y2Nlc3MiLCJfdGhpcyIsInRvcEFsZXJ0IiwiZXJyb3IiLCJhbGVydCIsInJlbmRlciIsIlZpZXciLCJDaGlsZE1vZGVsIiwibm9vcCIsInNldCIsImNoaWxkU2VsZiIsImNoaWxkU2F2ZSIsIk1vZGVsIiwiQ2hpbGRDb2xsZWN0aW9uIiwiQ29sbGVjdGlvbiIsIlBhcmVudE1vZGVsIiwibmV3Q2hpbGQiLCJ1cGRhdGVDb2xsZWN0aW9uIiwiY29sbGVjdGlvbiIsIm9uIiwidXBkYXRlQXR0cmlidXRlcyIsIkNoaWxkIiwiZ2V0TGVuZ3RoIiwiY2hpbGRyZW4iLCJmZXRjaCIsIm9sZFN1Y2Nlc3MiLCJyZXNwb25zZSIsImNoaWxkTW9kZWwiLCJjaGlsZHJlbk1vZGVscyIsImsiLCJsZW4iLCJnZXRDaGlsZHJlbiIsInB1c2giLCJyZXNldCIsInNvcnQiLCJnZXRBcnJheSIsInJlc3VsdHMiLCJlYWNoIiwiYWRkIiwiYSIsImIiLCJjIiwiY2FuZGlkYXRlVmlldyIsImluZGV4IiwicmV0dXJuVmlldyIsInZtIiwiY3VycmVudFZpZXciLCJvcmRlck1hcCIsInN1YnRlc3RWaWV3cyIsInByb3RvdHlwZVZpZXciLCJxdWVzdGlvblZpZXdzIiwiUmVmZXJlbmNlRXJyb3IiLCJhbnN3ZXIiLCJnZXRWYXJpYWJsZSIsImdldEl0ZW1SZXN1bHRDb3VudEJ5VmFyaWFibGVOYW1lIiwib25CYWNrQnV0dG9uIiwiYWN0aXZpdHkiLCJjb25maXJtIiwidCIsIndpbmRvdyIsImhpc3RvcnkiLCJiYWNrIiwiY2xvc2UiLCJyZW1vdmUiLCJ1bmJpbmQiLCJvbkNsb3NlIiwiaW5kZXhCeSIsIm9uZU1vZGVsIiwiaW5kZXhBcnJheUJ5IiwiY29uZm9ybSIsInN0YW5kYXJkIiwiaXNFbXB0eSIsInBydW5lIiwic2hhcGUiLCJ1bnNldCIsInRvSGFzaCIsInNpZ25pZmljYW50QXR0cmlidXRlcyIsImI2NF9zaGExIiwiSlNPTiIsInN0cmluZ2lmeSIsIl9iZWZvcmVTYXZlIiwiYmVmb3JlU2F2ZSIsInN0YW1wIiwiZWRpdGVkQnkiLCJ1c2VyIiwidXBkYXRlZCIsIkRhdGUiLCJ0b1N0cmluZyIsImhhc2giLCJmcm9tSW5zdGFuY2VJZCIsImdldFN0cmluZyIsImdldE51bWJlciIsImdldEVzY2FwZWRTdHJpbmciLCJnZXRCb29sZWFuIiwic2Nyb2xsVG8iLCJzcGVlZCIsImNhbGxiYWNrIiwiYW5pbWF0ZSIsInNjcm9sbFRvcCIsIm9mZnNldCIsInRvcCIsImNvbnNvbGUiLCJsb2ciLCJ0b3BDZW50ZXIiLCJ3aWR0aCIsIm91dGVyV2lkdGgiLCJzY3JvbGxMZWZ0IiwibWlkZGxlQ2VudGVyIiwiaGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJ3aWR0aFBlcmNlbnRhZ2UiLCJyb3VuZCIsIm9mZnNldFBhcmVudCIsImhlaWdodFBlcmNlbnRhZ2UiLCJnZXRTdHlsZU9iamVjdCIsImNhbWVsIiwiY2FtZWxpemUiLCJkb20iLCJsZW4xIiwicHJvcCIsInJldHVybnMiLCJzdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJ0b1VwcGVyQ2FzZSIsImdldFByb3BlcnR5VmFsdWUiLCJjdXJyZW50U3R5bGUiLCJqUXVlcnkiLCJhamF4U2V0dXAiLCJzdGF0dXNDb2RlIiwiNDA0IiwieGhyIiwic3RhdHVzIiwiY29kZSIsInNlZVVuYXV0aG9yaXplZCIsInN0YXR1c1RleHQiLCJyZXNwb25zZVRleHQiLCJtaWRBbGVydCIsImxvZ291dCIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCJkIiwiZiIsImciLCJoIiwiaiIsIm0iLCJuIiwibyIsInAiLCJxIiwiciIsInMiLCJ1IiwidiIsInciLCJ4IiwieSIsInoiLCJ1cGRhdGVUYW5nZXJpbmUiLCJkb2N1bWVudCIsImtleWRvd24iLCJzayIsImtleUNvZGUiLCJzYWZldHlEYW5jZSIsImRhdGFiYXNlU2FmZXR5RGFuY2UiLCJ0b0xvd2VyQ2FzZSIsInN1YnN0cmluZyIsIm1hdGNoIiwiUmVnRXhwIiwiYXZlIiwiaXNJbnQiLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJkZWNpbWFscyIsIm51bSIsInBvdyIsImNvbW1hcyIsImxpbWl0IiwibWluIiwiYVN0cmluZyIsImlzU3RyaW5nIiwiX3dyYXBwZWQiLCJwcm9wZXJ0eU5hbWUiLCJvYmplY3RBcnJheSIsIm9uZU9iamVjdCIsImFuQXJyYXkiLCJ0YWxseSIsImNvdW50cyIsImVsZW1lbnQiLCJjaGFuZ2VMYW5ndWFnZSIsImkxOG4iLCJzZXRMbmciLCJyZXNhdmUiLCJ1cGRhdGVDb2xsZWN0aW9ucyIsInVwZGF0ZU1vZGVscyIsInBvcCIsInVybCIsImNvbGxlY3Rpb25zIiwiQXNzZXNzbWVudHMiLCJTdWJ0ZXN0cyIsIlF1ZXN0aW9ucyIsImV4ZWN1dGUiLCJmdW5jdGlvbnMiLCJzdGVwIiwibmV4dEZ1bmN0aW9uIiwic2hpZnQiLCJsb2FkQ29sbGVjdGlvbnMiLCJsb2FkT3B0aW9ucyIsImdldE5leHQiLCJ0b0xvYWQiLCJjb21wbGV0ZSIsImN1cnJlbnQiLCJtZW1iZXJOYW1lIiwidW5kZXJzY29yZSIsInVuaXZlcnNhbFVwbG9hZCIsImFqYXgiLCJ1cmxWaWV3IiwiZGF0YVR5cGUiLCJjb250ZW50VHlwZSIsImRhdGEiLCJrZXlzIiwiZG9jTGlzdCIsInBsdWNrIiwiY291Y2giLCJyZXBsaWNhdGUiLCJ1cmxEQiIsImRvY19pZHMiLCJyZXN0YXJ0VGFuZ2VyaW5lIiwiZGVsYXkiLCJsb2NhdGlvbiIsInJlbG9hZCIsIm9uVXBkYXRlU3VjY2VzcyIsInRvdGFsRG9jcyIsImRvY3VtZW50Q291bnRlciIsInJvdXRlciIsIm5hdmlnYXRlIiwiZG9SZXNvbHZlIiwiZERvYyIsImRvY0lkcyIsInRhcmdldERCIiwiaXNBZG1pbiIsImRiX25hbWUiLCJ3b3JraW5nIiwiJGRiIiwiYWxsRG9jcyIsIm9sZERvY3MiLCJyb3ciLCJfaWQiLCJfcmV2IiwicmV2IiwiZG9jSWQiLCJvbGREb2MiLCJvcGVuRG9jIiwiY29uZmxpY3RzIiwiX2NvbmZsaWN0cyIsInJlbW92ZURvYyIsInNlbGYiLCJjbGFzc05hbWUiLCJhcmciLCJhcmdzIiwidGVtcERhdGEiLCJpc09iamVjdCIsImlzV29ya2luZyIsImxvYWRpbmdUaW1lciIsInNldFRpbWVvdXQiLCJzaG93TG9hZGluZ0luZGljYXRvciIsImNsZWFyVGltZW91dCIsImFwcGVuZFRvIiwibmF2aWdhdG9yIiwibm90aWZpY2F0aW9uIiwiaW5wdXQiLCJ0aXRsZSIsImFjdGlvbiIsImdldFZhbHVlcyIsInNlbGVjdG9yIiwidmFsdWVzIiwiY2xlYW5VUkwiLCJkZWNvZGVVUklDb21wb25lbnQiLCJhbGVydFRleHQiLCJ3aGVyZSIsIiRhbGVydCIsImFsaWduZXIiLCJjb21wdXRlZERlbGF5IiwiZmFkZU91dCIsImJ1dHRvblRleHQiLCJwb3NpdGlvbiIsImRpdiIsImNsaWNrIiwidG9wU3RpY2t5IiwibW9kYWwiLCJwcmVwZW5kIiwicGFzc3dvcmRQcm9tcHQiLCIkYnV0dG9uIiwiJHBhc3MiLCJvZmYiLCJTNCIsInJhbmRvbSIsImh1bWFuR1VJRCIsInJhbmRvbUxldHRlcnMiLCJzYWZlTGV0dGVycyIsInNwbGl0IiwiZmxvb3IiLCJmbGFzaCIsImNvbG9yIiwic2hvdWxkVHVybkl0T24iLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZENvbG9yIiwiJF9HRVQiLCJwYXJ0cyIsInZhcnMiLCJocmVmIiwicmVzaXplU2Nyb2xsUGFuZSIsImFza1RvTG9nb3V0Iiwib2xkQ29uc29sZUxvZyIsImVuYWJsZUNvbnNvbGVMb2ciLCJkaXNhYmxlQ29uc29sZUxvZyIsIm9sZENvbnNvbGVBc3NlcnQiLCJlbmFibGVDb25zb2xlQXNzZXJ0IiwiYXNzZXJ0IiwiZGlzYWJsZUNvbnNvbGVBc3NlcnQiLCJmZXRjaFVzZXJzIiwiZ3JvdXAiLCJyZXEiLCJjb25maWciLCJhY2NlcHQiLCJmZXRjaFVzZXIiLCJuZXdHcm91cCIsImxlYXZlR3JvdXAiLCJzaWdudXAiLCJwYXNzIiwicm9sZVBvc3QiLCJyZXMiLCJyZXNwb25zZUpTT04iLCJhZGRBZG1pbiIsImFkZE1lbWJlciIsInJlbW92ZUFkbWluIiwicmVtb3ZlTWVtYmVyIiwibWFrZSIsImNyb3NzRG9tYWluIiwicGFyc2UiLCJlbXB0eSIsInNob3ciLCJhbGVydF90ZXh0IiwiZGlzcG9zYWJsZUFsZXJ0Iiwic3RvcCIsIkRvY3VtZW50c0ZvckNsaWVudCIsIkJ1dHRvblZpZXciLCJNb2Rlcm5penIiLCJ0b3VjaCIsInRvdWNoc3RhcnQgLmJ1dHRvbiIsImNsaWNrIC5idXR0b24iLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwiaXNBcnJheSIsInVuaW9uIiwibWFwIiwiam9pbiIsInJlbW92ZUNsYXNzIiwiYWRkQ2xhc3MiLCJvbkNoYW5nZSIsInRyaWdnZXIiLCJlbCIsImh5YnJpZENsaWNrIiwib3B0cyIsImNoZWNrZWRCZWZvcmUiLCJzaW5nbGVDbGljayIsIm11bHRpcGxlQ2xpY2siLCJvbkNsaWNrIiwibW9kZSIsImluaXRpYWxpemUiLCJmb250RmFtaWx5IiwiZm9udFN0eWxlIiwiZm9yRWFjaCIsIm9wdGlvbiIsImh0bWxPcHRpb25zIiwibGFiZWwiLCJzZWxlY3RlZENsYXNzIiwic3R5bGVDbGFzcyIsIkFzc2Vzc21lbnQiLCJkZXN0cm95IiwidXBkYXRlRnJvbUlyaXNDb3VjaCIsImNoZWNrQ29uZmxpY3RzIiwidXBkYXRlRnJvbVNlcnZlciIsImdldFJlc3VsdENvdW50IiwidmVyaWZ5Q29ubmVjdGlvbiIsImNhbGNES2V5IiwiVkVSSUZZX1RJTUVPVVQiLCJzdWJ0ZXN0cyIsInN1YnN0ciIsImNhbGxiYWNrcyIsInRpbWVyIiwidGltZW91dCIsImdyb3VwX2xldmVsIiwicmVzdWx0Q291bnQiLCJhbGxTdWJ0ZXN0cyIsImVuc3VyZU9yZGVyIiwic3BsaXRES2V5cyIsImRLZXkiLCJkS2V5cyIsImxvY2FsREtleSIsInNvdXJjZURCIiwic291cmNlREtleSIsImxhc3RES2V5IiwiZ3JvdXBEQiIsImRiIiwidmlldyIsImRhdHVtIiwidW5pcSIsImRvYyIsImRvY3MiLCJvcGVuX3JldnMiLCJyZXN1bHRzMSIsIm9rIiwiZGVsZXRlZEF0IiwiX2RlbGV0ZWQiLCJjaGVja2VkIiwiZHVwbGljYXRlIiwiY2xvbmVkQXR0cmlidXRlcyIsImdldFF1ZXN0aW9ucyIsImdldFN1YnRlc3RzIiwibW9kZWxzVG9TYXZlIiwibmV3SWQiLCJuZXdNb2RlbCIsIm9sZE1vZGVsIiwicHJvY2Vzc0RvY3MiLCJxdWVzdGlvbnMiLCJhc3Nlc3NtZW50SWQiLCJsZW4yIiwibmV3QXR0cmlidXRlcyIsIm5ld1N1YnRlc3RJZCIsIm9sZFN1YnRlc3RJZCIsInF1ZXN0aW9uIiwicmVxdWVzdERhdGEiLCJzdWJ0ZXN0Iiwic3VidGVzdElkTWFwIiwiU3VidGVzdCIsImdyaWRMaW5rSWQiLCJzdWJ0ZXN0SWQiLCJRdWVzdGlvbiIsInVybEJ1bGtEb2NzIiwicmVzcG9uc2VzIiwiZGVzaWduX2RvYyIsImVyciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsIm9rQ291bnQiLCJyZXNwIiwiY2xlYXIiLCJpc0FjdGl2ZSIsImlzQXJjaGl2ZWQiLCJhcmNoaXZlZCIsImNvbXBhcmF0b3IiLCJBc3Nlc3NtZW50c1ZpZXciLCJ0YWdOYW1lIiwiY2xpY2sgLnRvZ2dsZV9hcmNoaXZlZCIsInRvZ2dsZUFyY2hpdmVkIiwiJGNvbnRhaW5lciIsImFyY2hpdmVkSXNWaXNpYmxlIiwiYXNzZXNzbWVudHMiLCJzdWJ2aWV3cyIsIiR1bCIsImFjdGl2ZVZpZXdzIiwiYXJjaGl2ZWRDb250YWluZXIiLCJhcmNoaXZlZFZpZXdzIiwiYXNzZXNzbWVudCIsIm5ld1ZpZXciLCJzaG93QXJjaGl2ZWQiLCJjbG9zZVZpZXdzIiwiQXNzZXNzbWVudExpc3RFbGVtZW50VmlldyIsInNob3dBbGwiLCJjb25jYXQiLCJhcHBlbmQiLCJhc3Nlc3NtZW50RGVsZXRlIiwidXBkYXRlUmVzdWx0Q291bnQiLCJ1cGRhdGUiLCJnaG9zdExvZ2luIiwiY2xpY2sgLmFzc2Vzc21lbnRfbWVudV90b2dnbGUiLCJjbGljayAuYWRtaW5fbmFtZSIsImNsaWNrIC5zcF9hc3Nlc3NtZW50X2RlbGV0ZSIsImNsaWNrIC5zcF9hc3Nlc3NtZW50X2RlbGV0ZV9jYW5jZWwiLCJjbGljayAuc3BfYXNzZXNzbWVudF9kZWxldGVfY29uZmlybSIsImNsaWNrIC5zcF9jb3B5IiwiY2xpY2sgLnNwX2R1cGxpY2F0ZSIsImNsaWNrIC5zcF91cGRhdGUiLCJjbGljayAuc3BfcHJpbnQiLCJjbGljayAuYXJjaGl2ZSIsImNsaWNrIGEiLCJjaGFuZ2UgI3ByaW50X2Zvcm1hdCIsImJsYW5rUmVzdWx0Q291bnQiLCJyZXNwb25kVG9MaW5rIiwicm91dGUiLCJuZXdOYW1lIiwiY29weVRvIiwidXJsSW5kZXgiLCJ1cFVzZXIiLCJ1cFBhc3MiLCJ0b2dnbGVQcmludCIsInRvZ2dsZSIsInByaW50IiwiZm9ybWF0IiwiYXJjaGl2ZSIsImFzc2Vzc21lbnRNZW51VG9nZ2xlIiwidG9nZ2xlQ2xhc3MiLCJhc3Nlc3NtZW50RGVsZXRlVG9nZ2xlIiwic3ByaXRlTGlzdExpbmsiLCJuYW1lcyIsInRpdGxlaXplIiwic3ByaXRlRXZlbnRzIiwidWwiLCJjc3NDbGFzcyIsImxpbmtzIiwib3RoZXIiLCJhZG1pbk5hbWUiLCJhZG1pblJlc3VsdENvdW50IiwiYXJjaGl2ZUNsYXNzIiwiYXJjaGl2ZVN3aXRjaCIsImRlbGV0ZUNvbmZpcm0iLCJkb3dubG9hZEtleSIsInByaW50U2VsZWN0b3IiLCJzZWxlY3RlZCIsInRvZ2dsZUJ1dHRvbiIsIkFzc2Vzc21lbnRzTWVudVZpZXciLCJuZXdTYXZlIiwiYWRkQ3VycmljdWx1bSIsImFkZEFzc2Vzc21lbnQiLCJzeW5jVGFibGV0cyIsImtleXByZXNzIC5uZXdfbmFtZSIsImNsaWNrIC5uZXdfc2F2ZSIsImNsaWNrIC5uZXdfY2FuY2VsIiwiY2xpY2sgLm5ldyIsImNsaWNrIC5pbXBvcnQiLCJjbGljayAuYXBrIiwiY2xpY2sgLmdyb3VwcyIsImNsaWNrIC51bml2ZXJzYWxfdXBsb2FkIiwiY2xpY2sgLnN5bmNfdGFibGV0cyIsImNsaWNrIC5yZXN1bHRzIiwiY2xpY2sgLnNldHRpbmdzIiwia2V5dXAgLmVkaXRfaW5fcGxhY2UiLCJjaGFuZ2UgLmVkaXRfaW5fcGxhY2UiLCJ0YWJsZXRNYW5hZ2VyIiwic3luYyIsIm9sZFRhcmdldCIsImNsb25lIiwiYWZ0ZXIiLCJuZXh0IiwiZm9jdXMiLCJzYXZlSW5QbGFjZSIsInVwZGF0ZWRBdHRyaWJ1dGVzIiwiYWxyZWFkeVNhdmluZyIsImFwayIsImNyZWF0ZUVsZW1lbnQiLCJob3N0IiwidG9rZW4iLCJnb3RvR3JvdXBzIiwidGV4dCIsIm5ldyIsImltcG9ydCIsImdyb3VwcyIsInVuaXZlcnNhbF91cGxvYWQiLCJzeW5jX3RhYmxldHMiLCJjYW5jZWwiLCJjdXJyaWN1bHVtIiwiY3VycmljdWxhIiwiY3VycmljdWxhTGlzdFZpZXciLCJDdXJyaWN1bGFMaXN0VmlldyIsImFzc2Vzc21lbnRzVmlldyIsInVzZXJzTWVudVZpZXciLCJVc2Vyc01lbnVWaWV3IiwiYXBrQnV0dG9uIiwiY29udGFpbmVycyIsImdyb3VwSGFuZGxlIiwiZ3JvdXBzQnV0dG9uIiwiaW1wb3J0QnV0dG9uIiwibmV3QnV0dG9uIiwicmVzdWx0c0J1dHRvbiIsInN5bmNUYWJsZXRzQnV0dG9uIiwidXBsb2FkQnV0dG9uIiwia2xhc3NlcyIsInRlYWNoZXJzIiwic2V0RWxlbWVudCIsImtsYXNzZXNWaWV3IiwiS2xhc3Nlc1ZpZXciLCJ0ZWFjaGVyc1ZpZXciLCJUZWFjaGVyc1ZpZXciLCJ1c2VycyIsIndvcmtmbG93TWVudVZpZXciLCJXb3JrZmxvd01lbnVWaWV3Iiwid29ya2Zsb3dzIiwiZmVlZGJhY2tzIiwibmV3T25lIiwibmV3VG9nZ2xlIiwibmV3T2JqZWN0IiwibmV3VHlwZSIsIkN1cnJpY3VsdW0iLCJjdXJyaWN1bHVtSWQiLCJBc3Nlc3NtZW50RWRpdFZpZXciLCJ1cGRhdGVTdWJ0ZXN0TGVnZW5kIiwic2F2ZU5ld1N1YnRlc3QiLCJ1cGRhdGVNb2RlbCIsImNsaWNrICNhcmNoaXZlX2J1dHRvbnMgaW5wdXQiLCJjbGljayAuYmFjayIsImNsaWNrIC5uZXdfc3VidGVzdF9idXR0b24iLCJjbGljayAubmV3X3N1YnRlc3RfY2FuY2VsIiwia2V5cHJlc3MgI25ld19zdWJ0ZXN0X25hbWUiLCJjbGljayAubmV3X3N1YnRlc3Rfc2F2ZSIsImNoYW5nZSAjYmFzaWMgaW5wdXQiLCJjbGljayAuc2F2ZSIsInN1YnRlc3RMaXN0RWRpdFZpZXciLCJTdWJ0ZXN0TGlzdEVkaXRWaWV3IiwiZ29CYWNrIiwiZG91Ymxlc0Vycm9yIiwiZW1wdHlFcnJvciIsInJhbmdlRXJyb3IiLCJzZXF1ZW5jZSIsInNlcXVlbmNlRXJyb3JzIiwic2VxdWVuY2VzIiwic2VxdWVuY2VzVmFsdWUiLCJzdWJ0ZXN0Q291bnQiLCJ0b29GZXdFcnJvciIsInRvb01hbnlFcnJvciIsInZhbGlkYXRlZFNlcXVlbmNlcyIsInJlamVjdCIsImZsYXR0ZW4iLCJ0b2dnbGVOZXdTdWJ0ZXN0Rm9ybSIsIm5ld1N1YnRlc3QiLCJwcm90b3R5cGVUZW1wbGF0ZSIsInVzZVR5cGUiLCJ1c2VUeXBlVGVtcGxhdGUiLCJ0ZW1wbGF0ZXMiLCJvcmRlciIsImNyZWF0ZSIsImFyY2giLCJhcmNoaXZlQ2hlY2tlZCIsIm5vdEFyY2hpdmVDaGVja2VkIiwic3ViS2V5Iiwic3ViVmFsdWUiLCJzdWJ0ZXN0TGVnZW5kIiwic3VidGVzdFR5cGVTZWxlY3QiLCJodW1hbml6ZSIsInNvcnRhYmxlIiwiaGFuZGxlIiwic3RhcnQiLCJ1aSIsImxpIiwic2lsZW50IiwiJHN1YnRlc3RXcmFwcGVyIiwiQXNzZXNzbWVudFJ1blZpZXciLCJzYXZlUmVzdWx0Iiwic2tpcCIsImhhc1NlcXVlbmNlcyIsInBsYWNlcyIsInJlc3VsdFZpZXciLCJhYm9ydEFzc2Vzc21lbnQiLCJlbmFibGVDb3JyZWN0aW9ucyIsInJlbmRlcmVkIiwiU3VidGVzdFJ1blZpZXciLCJjb21wYWN0IiwiUmVzdWx0IiwiYXNzZXNzbWVudE5hbWUiLCJibGFuayIsIm9yZGVyX21hcCIsIlJlc3VsdFZpZXciLCJhc3Nlc3NtZW50VmlldyIsInByb2dyZXNzYmFyIiwiZmxhZ1JlbmRlciIsIm9iamVjdCIsImFmdGVyUmVuZGVyIiwibmF2Iiwic2V0U3R1ZGVudCIsImFib3J0IiwiZ2V0U2tpcHBlZCIsInNraXBwZWQiLCJpbmNyZW1lbnQiLCJpc1ZhbGlkIiwic2hvd0Vycm9ycyIsInN1YnRlc3RSZXBsYWNlIiwic3VidGVzdFJlc3VsdCIsImdldFJlc3VsdCIsImluc2VydCIsImJvZHkiLCJzdWJ0ZXN0SGFzaCIsIm1ldGEiLCJBc3Nlc3NtZW50SW1wb3J0VmlldyIsInVwZGF0ZVByb2dyZXNzIiwidXBkYXRlQWN0aXZpdHkiLCJ1cGRhdGVGcm9tQWN0aXZlVGFza3MiLCJjbGljayAudmVyaWZ5IiwiY2xpY2sgLmdyb3VwX2ltcG9ydCIsImdyb3VwSW1wb3J0Iiwia2V5TGlzdCIsIm5ld0Fzc2Vzc21lbnQiLCJ2ZXJpZnkiLCJub3VuIiwiY29ubmVjdGlvblZlcmlmaWVkIiwiZG9jc1JlbWFpbmluZyIsInNlcnZlclN0YXR1cyIsInVwZGF0ZVNlcnZlclN0YXR1cyIsImxhbmRpbmciLCJzZWxlY3RlZEdyb3VwIiwiYWN0aXZlVGFza0ludGVydmFsIiwiYWN0aXZlVGFza3MiLCJ0YXNrcyIsInRhc2siLCJjaGFuZ2VzIiwiZmFpbGVkIiwiZmFpbHVyZXMiLCJoZWFkbGluZSIsInJlYWQiLCJ3cml0dGVuIiwid3JpdHRlblBsdXJhbCIsImRvY3NfcmVhZCIsImRvY3Nfd3JpdHRlbiIsImRvY193cml0ZV9mYWlsdXJlcyIsIm5vX2NoYW5nZXMiLCJmYWRlSW4iLCJjbGVhckludGVydmFsIiwicHJvZ3Jlc3NIVE1MIiwiaW1wb3J0TGlzdCIsInBsdXJhbGl6ZSIsImdyb3VwU2VsZWN0b3IiLCJpbXBvcnRTdGVwIiwiYWRtaW4iLCJBc3Nlc3NtZW50U3luY1ZpZXciLCJlbnN1cmVDcmVkZW50aWFscyIsInZlcmlmeVRpbWVvdXQiLCJvblZlcmlmeVN1Y2Nlc3MiLCJnZXREb2NJZHMiLCJ1cGxvYWQiLCJkb3dubG9hZCIsImNsaWNrIC5zaG93X2RldGFpbHMiLCJjbGljayAua2VlcCIsImNsaWNrIC5zaG93X2xvZ2luIiwiY2xpY2sgLmxvZ2luIiwiY2xpY2sgLmRvd25sb2FkIiwiY2xpY2sgLnVwbG9hZCIsImxvY2FsREIiLCJ1cGRhdGVDb25mbGljdHMiLCJncm91cERLZXkiLCJzaG93TG9naW4iLCJsb2dpbiIsInNlcnZlcl91c2VyIiwic2VydmVyX3Bhc3MiLCJsb2dpbkJ1dHRvbiIsInJlbW92ZUNyZWRlbnRpYWxzIiwia2VlcCIsImRvY1JldiIsImRvY3NCeUlkIiwib25Db21wbGV0ZSIsImRlbGV0ZWRDb3VudCIsInRvRGVsZXRlQ291bnQiLCJsb2FkZWREb2NzIiwic2hvd0RldGFpbHMiLCJyZWFkeVRlbXBsYXRlcyIsImNvbm5lY3Rpb25Cb3giLCJvbmVEb2MiLCJjb21iaW5lZCIsImRpZmZlcmVuY2VzIiwiZG9jQ291bnQiLCJoS2V5IiwicHJlc2VudGFibGVzIiwicmV2Q291bnQiLCJ0b3RhbCIsImNhcGl0YWxpemUiLCJ0ZW1wbGF0ZSIsIkFzc2Vzc21lbnREYXRhRW50cnlWaWV3IiwidXBkYXRlQ3VycmVudCIsImNoYW5nZSAjc3VidGVzdF9zZWxlY3QiLCJjbGljayAucHJldl9zdWJ0ZXN0IiwiY2xpY2sgLm5leHRfc3VidGVzdCIsInByZXZTdWJ0ZXN0IiwiZ2V0RWxlbWVudEJ5SWQiLCJzZWxlY3RlZEluZGV4IiwibmV4dFN1YnRlc3QiLCJzYXZlZE9uIiwiZGF0YUVudHJ5Iiwidmlld3MiLCJ2aWV3c0J5U3VidGVzdElkIiwiJHN1YkVsIiwic3VidGVzdERhdGFPYmplY3QiLCJjb21tZW50IiwiZW5kX3RpbWUiLCJnZXRUaW1lIiwiaGlkZSIsIm1vbWVudCIsIm1zZyIsInVwZGF0ZUNvbXBsZXRlZFJlc3VsdCIsImNvbXBsZXRlZEFscmVhZHkiLCJyZXN1bHRTYXZlIiwiZ3JpZEluaXQiLCJHcmlkUnVuVmlldyIsImFkZFJlbmRlclZpZXciLCJzdXJ2ZXlJbml0IiwiU3VydmV5UnVuVmlldyIsImdyaWRXYXNBdXRvc3RvcHBlZCIsImxvY2F0aW9uSW5pdCIsIkxvY2F0aW9uUnVuVmlldyIsImRhdGV0aW1lSW5pdCIsIkRhdGV0aW1lUnVuVmlldyIsImlkSW5pdCIsIklkUnVuVmlldyIsImNvbnNlbnRJbml0IiwiQ29uc2VudFJ1blZpZXciLCIkZWxlbWVudCIsIldpZGdldFJ1blZpZXciLCJjbGljayAuc2F2ZVRvQ291Y2hEQiIsInNhdmVkIiwiJGFzc2Vzc21lbnRXaWRnZXQiLCJnZXRBdHRyaWJ1dGUiLCJsb2FkUHJvdG90eXBlVGVtcGxhdGUiLCJxdWVzdGlvbkNvbGxlY3Rpb24iLCJkb09uZSIsInN1YnRlc3RRdWVzdGlvbnMiLCJuZXdRdWVzdGlvbiIsIm9yZGVyZWQiLCJ0ZXN0IiwiZGVsZXRlU3VidGVzdCIsImNvcHlTdWJ0ZXN0Iiwib25lVmlldyIsIlN1YnRlc3RMaXN0RWxlbWVudFZpZXciLCJ0YXJnZXRBc3Nlc3NtZW50SWQiLCJ0YXJnZXRTdWJ0ZXN0Q291bnQiLCJmaWx0ZXIiLCJuZXdTdWJ0ZXN0Q291bnQiLCJwb3B1bGF0ZUFzc2Vzc21lbnRTZWxlY3RvciIsImZldGNoQXNzZXNzbWVudHMiLCJjbGljayAuaWNvbl9lZGl0IiwiY2xpY2sgLmljb25fZGVsZXRlIiwiY2xpY2sgLmRlbGV0ZV9jYW5jZWwiLCJjbGljayAuZGVsZXRlX2RlbGV0ZSIsImNsaWNrIC5pY29uX2NvcHkiLCJjbGljayAuZG9fY29weSIsImNsaWNrIC5jYW5jZWxfY29weSIsImNsaWNrIC5uYW1lIiwidG9nZ2xlU2VsZWN0ZWQiLCJ0b2dnbGVEZWxldGVDb25maXJtIiwiZmFkZVRvZ2dsZSIsImVkaXQiLCJvcGVuQ29weU1lbnUiLCJncm91cEFzc2Vzc21lbnRzIiwiJHNlbGVjdCIsIm9wdGlvbkxpc3QiLCJkb0NvcHkiLCJjYW5jZWxDb3B5IiwiY29weUljb24iLCJjb3B5TWVudSIsImljb25EZWxldGUiLCJpY29uRHJhZyIsImljb25FZGl0Iiwic3VidGVzdE5hbWUiLCJTdWJ0ZXN0RWRpdFZpZXciLCJjbGljayAuYmFja19idXR0b24iLCJjbGljayAuc2F2ZV9zdWJ0ZXN0IiwiY2xpY2sgLnJpY2h0ZXh0X2VkaXQiLCJjbGljayAucmljaHRleHRfc2F2ZSIsImNsaWNrIC5yaWNodGV4dF9jYW5jZWwiLCJjaGFuZ2UgI2Rpc3BsYXlfY29kZSIsInJpY2h0ZXh0Q29uZmlnIiwiYXR0cmlidXRlTmFtZSIsInJpY2h0ZXh0S2V5cyIsInByb3RvdHlwZVZpZXdzIiwicHJvdG90eXBlRWRpdG9yIiwicXVlc3Rpb25JZCIsInF1ZXN0aW9uU2F2ZSIsInZhbGlkYXRlU3ludGF4Iiwib2xkQW5zd2VyIiwiQ29mZmVlU2NyaXB0IiwiY29tcGlsZSIsImV4ZWMiLCJnZXRSaWNodGV4dENvbmZpZyIsImRhdGFLZXkiLCJyaWNodGV4dEVkaXQiLCJlZGl0b3IiLCJDS0VESVRPUiIsInJpY2h0ZXh0U2F2ZSIsImdldERhdGEiLCJyaWNodGV4dENhbmNlbCIsIiRwcmV2aWV3Iiwic2F2ZVN1YnRlc3QiLCJwcm90b3R5cGVTYXZlIiwicHJvcm90eXBlU2F2ZSIsImVudW1lcmF0b3JIZWxwIiwic3R1ZGVudERpYWxvZyIsInRyYW5zaXRpb25Db21tZW50Iiwic2tpcHBhYmxlIiwicnRsIiwiYmFja0J1dHRvbiIsImxhbmd1YWdlIiwiZGlzcGxheUNvZGUiLCJkaWFsb2ciLCJlbnVtbWVyYXRvciIsInJ0bEVkaXRIdG1sIiwidHJhbnNpdGlvbiIsImhpZGVOZXh0Iiwic2hvd05leHQiLCJjbGljayAuc3VidGVzdC1uZXh0IiwiY2xpY2sgLnN1YnRlc3QtYmFjayIsImNsaWNrIC5zdWJ0ZXN0X2hlbHAiLCJjbGljayAuc2tpcCIsInRvZ2dsZUhlbHAiLCJoZWxwIiwicHJvdG9WaWV3cyIsInByb3RvdHlwZVJlbmRlcmVkIiwiX3JlbmRlciIsImJhY2thYmxlIiwic2tpcEJ1dHRvbiIsImRlbGVnYXRlRXZlbnRzIiwiZmxhZyIsInJlbmRlckZsYWdzIiwib25TaG93IiwidXBkYXRlRXhlY3V0ZVJlYWR5IiwiZ2V0R3JpZFNjb3JlIiwiZ3JpZCIsImdyaWRTY29yZSIsImxpbmsiLCJnZXRTdW0iLCJjb3JyZWN0IiwiaW5jb3JyZWN0IiwibWlzc2luZyIsIm9uQ29uc2VudENoYW5nZSIsImNsaWNrICNub25fY29uc2VudF9jb25maXJtIiwiY29uc2VudEJ1dHRvbiIsImNsZWFyTWVzc2FnZXMiLCJzaG93Tm9uQ29uc2VudCIsImRlZmF1bHRDb25zZW50IiwiY29uZmlybU5vbmNvbnNlbnQiLCJ5ZXMiLCJubyIsImNvbmZpcm1lZE5vbkNvbnNlbnQiLCJwcmV2aW91cyIsImdldEJ5SGFzaCIsImNvbnNlbnQiLCJub0NvbnNlbnQiLCJDb25zZW50RWRpdFZpZXciLCJwcm9tcHQiLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJ0aW1lIiwiZGF0ZVRpbWUiLCJtaW51dGVzIiwibW9udGhzIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRNaW51dGVzIiwiZ2V0SG91cnMiLCJEYXRldGltZUVkaXRWaWV3IiwiY2xpY2sgLmNsZWFyIiwiY2hhbmdlIHNlbGVjdCIsImxldmVsIiwibGV2ZWxzIiwibG9jYXRpb25Db2xzIiwibG9jYXRpb25zIiwic2VsZWN0ZWRMb2NhdGlvbiIsImxldmVsQ29sTWFwIiwiY2xlYXJJbnB1dHMiLCJyZXNldFNlbGVjdHMiLCJsb2NWaWV3IiwiTG9jVmlldyIsIm9uU2VsZWN0Q2hhbmdlIiwiZXhwZWN0ZWRDb3VudCIsImxldmVsQ2hhbmdlZCIsImxldmVsVmFscyIsIm1hdGNoQ291bnQiLCJuZXh0TGV2ZWwiLCJyZW1vdmVBdHRyIiwiZ2V0T3B0aW9ucyIsImFyciIsImN1cnJlbnRPcHRpb25zIiwiZG9uZU9wdGlvbnMiLCJpc05vdENoaWxkIiwiaXNWYWxpZENoaWxkIiwibGV2ZWxPcHRpb25zIiwibG9jYXRpb25OYW1lIiwicGFyZW50VmFsdWVzIiwicmVmMiIsInJlZjMiLCJ0YXJnZXRJbmRleCIsInNvcnRCeSIsImZpbHRlcmVkIiwibGFiZWxzIiwiT2JqZWN0IiwiY29sdW1uIiwic2VsZWN0cyIsIiRpbnB1dCIsIkxvY2F0aW9uRWRpdFZpZXciLCJrZXl1cCAjZGF0YSIsImtleXVwICNsZXZlbHMiLCJjbGljayAjZGF0YV9mb3JtYXQgaW5wdXQiLCJjbGljayAjbGV2ZWxzX2Zvcm1hdCBpbnB1dCIsInVwZGF0ZURhdGEiLCJoYXNUYWJzIiwiYnV0dG9uIiwiaGFzQ29tbWFzIiwiZGF0YUNvbW1hVG9UYWIiLCJkYXRhVGFiVG9Db21tYSIsInVwZGF0ZUxldmVscyIsImxldmVsc0NvbW1hVG9UYWIiLCJsZXZlbHNUYWJUb0NvbW1hIiwiY29sIiwibG9jYXRpb25zVmFsdWUiLCJ0cmltIiwiZXJyb3JzIiwiZXJyb3JNZXNzYWdlcyIsImNvbHVtbl9tYXRjaCIsImxldmVsX2NvbHVtbl9tYXRjaCIsIm9uUXVlc3Rpb25SZW5kZXJlZCIsInVwZGF0ZVNraXBMb2dpYyIsIm9uUXVlc3Rpb25BbnN3ZXIiLCJjbGljayAubmV4dF9xdWVzdGlvbiIsImNsaWNrIC5wcmV2X3F1ZXN0aW9uIiwibmV4dFF1ZXN0aW9uIiwiY3VycmVudFF1ZXN0aW9uVmlldyIsImlzQXV0b3N0b3BwZWQiLCJpc0F2YWlsYWJsZSIsImlzTG9naWNTa2lwcGVkIiwicGxhbm5lZEluZGV4IiwicXVlc3Rpb25JbmRleCIsInVwZGF0ZVF1ZXN0aW9uVmlzaWJpbGl0eSIsInVwZGF0ZVByb2dyZXNzQnV0dG9ucyIsInByZXZRdWVzdGlvbiIsIiRuZXh0IiwiJHByZXYiLCJtYXhpbXVtIiwibWluaW11bSIsInJlYWR5IiwiZXhlY3V0ZVJlYWR5IiwidHJpZ2dlclNob3dMaXN0IiwiJHF1ZXN0aW9ucyIsImVxIiwic2hvd1F1ZXN0aW9uIiwicGxlYXNlQW5zd2VyIiwiY29ycmVjdEVycm9ycyIsIm5vdEVub3VnaCIsInByZXZpb3VzUXVlc3Rpb24iLCJpc09ic2VydmF0aW9uIiwiZm9jdXNNb2RlIiwiYW5zd2VyZWQiLCJyZW5kZXJDb3VudCIsImF1dG9zdG9wQ291bnQiLCJhdXRvc3RvcExpbWl0IiwiY2lkIiwiY3VycmVudEFuc3dlciIsImxvbmdlc3RTZXF1ZW5jZSIsImF1dG9zdG9wcGVkIiwiYXV0b3N0b3BJbmRleCIsInVwZGF0ZUF1dG9zdG9wIiwicXVlc3Rpb25WaWV3Iiwic2tpcExvZ2ljQ29kZSIsInVwZGF0ZVZhbGlkaXR5IiwicXYiLCJub3RBc2tlZCIsIm5vdEFza2VkUmVzdWx0Iiwic2tpcHBlZFJlc3VsdCIsImxvZ2ljU2tpcHBlZFJlc3VsdCIsIm5vdEFza2VkQXV0b3N0b3BSZXN1bHQiLCJjdXN0b21NZXNzYWdlIiwiZmlyc3QiLCJzZXRNZXNzYWdlIiwiaXNOb3RBc2tlZCIsIm5vdEFza2VkQ291bnQiLCJyZXF1aXJlZCIsIlF1ZXN0aW9uUnVuVmlldyIsIlN1cnZleUVkaXRWaWV3IiwicmVuZGVyUXVlc3Rpb25zIiwidG9nZ2xlQWRkUXVlc3Rpb24iLCJjbGljayAuYWRkX3F1ZXN0aW9uIiwiY2xpY2sgLmFkZF9xdWVzdGlvbl9jYW5jZWwiLCJjbGljayAuYWRkX3F1ZXN0aW9uX2FkZCIsImtleXByZXNzICNxdWVzdGlvbl9uYW1lIiwicXVlc3Rpb25zRWRpdFZpZXciLCJRdWVzdGlvbnNFZGl0VmlldyIsImlzIiwiYWRkUXVlc3Rpb24iLCJucSIsIl9oYXMiLCJfcXVlc3Rpb24iLCJfcmVxdWlyZSIsImFXYXJuaW5ncyIsImFwcGxpY2FibGUiLCJkdXBsaWNhdGVWYXJpYWJsZXMiLCJlbXB0eU9wdGlvbnMiLCJsaW5rZWRRdWVzdGlvbnMiLCJub3RTYXZlZCIsInBsdXJhbCIsInJlcXVpcmVzR3JpZCIsInRXYXJuaW5ncyIsInZhcmlhYmxlTmFtZXMiLCJpdGVtTnVtYmVyQnlMaW5rSWQiLCJxdWVzdGlvbnNMaXN0RWRpdCIsImdyaWRTdWJ0ZXN0cyIsImxpbmtTZWxlY3QiLCJjbGljayAjZ2VuZXJhdGUiLCJjaGFuZ2UgI3BhcnRpY2lwYW50X2lkIiwiaWRlbnRpZmllciIsImdlbmVyYXRlIiwidmFsaWRhdG9yIiwiQ2hlY2tEaWdpdCIsInBhcnRpY2lwYW50SWQiLCJwYXJ0aWNpcGFudF9pZCIsInNldFZhbGlkYXRvciIsInVwZGF0ZU5hdmlnYXRpb24iLCJnZXRFcnJvcnMiLCJJZEVkaXRWaWV3IiwidXBkYXRlTW9kZSIsInVwZGF0ZUNvdW50ZG93biIsInJlbW92ZVVuZG8iLCJsYXN0SGFuZGxlciIsImludGVybWVkaWF0ZUl0ZW1IYW5kbGVyIiwibWFya0hhbmRsZXIiLCJncmlkQ2xpY2siLCJjbGljayAuZ3JpZF9lbGVtZW50IiwiY2xpY2sgLmVuZF9vZl9ncmlkX2xpbmUiLCJjbGljayAuc3RhcnRfdGltZSIsImNsaWNrIC5zdG9wX3RpbWUiLCJjbGljayAucmVzdGFydCIsInJlc3RhcnRUaW1lciIsInRpbWVSdW5uaW5nIiwic3RvcFRpbWVyIiwic2ltcGxlU3RvcCIsInJlc2V0VmFyaWFibGVzIiwicHJldmVudERlZmF1bHQiLCJtb2RlSGFuZGxlcnMiLCJjb3JyZWN0aW9uc0Rpc2FibGVkIiwiaW5kZXhJc250QmVsb3dMYXN0QXR0ZW1wdGVkIiwibGFzdEF0dGVtcHRlZElzbnRaZXJvIiwibGFzdEF0dGVtcHRlZCIsIm1hcmtFbGVtZW50IiwiYXV0b3N0b3AiLCJjaGVja0F1dG9zdG9wIiwidGltZUludGVybWVkaWF0ZUNhcHR1cmVkIiwic3RhcnRUaW1lIiwiaXRlbUF0VGltZSIsImF1dG9Db3VudCIsImdyaWRPdXRwdXQiLCJhdXRvc3RvcFRlc3QiLCJ1bmRvYWJsZSIsInVuQXV0b3N0b3BUZXN0IiwibWFya1JlY29yZCIsImVuZE9mR3JpZExpbmVDbGljayIsImNvbHVtbnMiLCJsYXN0SW5kZXhPZiIsInN0YXJ0VGltZXIiLCJ0aW1lclN0b3BwZWQiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiZW5hYmxlR3JpZCIsIml0ZW1zIiwic3RvcFRpbWUiLCJ0aW1lRWxhcHNlZCIsInRpbWVSZW1haW5pbmciLCJjYXB0dXJlTGFzdEF0dGVtcHRlZCIsInRvdWNoTGFzdEl0ZW0iLCJjYXB0dXJlSXRlbUF0VGltZSIsImdvdEludGVybWVkaWF0ZSIsIm1pbnV0ZU1lc3NhZ2UiLCJjYXB0dXJlQWZ0ZXJTZWNvbmRzIiwibW9kZUJ1dHRvbiIsInVudGltZWQiLCJnb3RNaW51dGVJdGVtIiwiaXRlbU1hcCIsIm1hcEl0ZW0iLCJ0ZW1wIiwidGVtcFZhbHVlIiwiY2FwdHVyZV9sYXN0X2F0dGVtcHRlZCIsIml0ZW1fYXRfdGltZSIsInRpbWVfaW50ZXJtZWRpYXRlX2NhcHR1cmVkIiwiY2FwdHVyZV9pdGVtX2F0X3RpbWUiLCJhdXRvX3N0b3AiLCJhdHRlbXB0ZWQiLCJ0aW1lX3JlbWFpbiIsIm1hcmtfcmVjb3JkIiwic3VidGVzdE5vdENvbXBsZXRlIiwiaW5wdXRNb2RlIiwid2FzQXV0b3N0b3BwZWQiLCJtYXJrIiwicmVzdGFydCIsImZvbnRTaXplQ2xhc3MiLCJlbmRPZkxpbmUiLCJsYXlvdXRNb2RlIiwiZm9udFNpemUiLCJ0b3RhbFRpbWUiLCJsYXN0IiwibWludXRlSXRlbSIsImRpc2FibGVkIiwiZ3JpZEVsZW1lbnQiLCJ2YXJpYWJsZUdyaWRFbGVtZW50IiwiZW5kT2ZHcmlkTGluZSIsImJ1dHRvbkNvbmZpZyIsImRpc2FibGluZyIsImRpc3BsYXlSdGwiLCJkb25lIiwiZmlyc3RSb3ciLCJncmlkSFRNTCIsIm1vZGVTZWxlY3RvciIsInJlc2V0QnV0dG9uIiwic3RhcnRUaW1lckhUTUwiLCJzdG9wVGltZXJIVE1MIiwic2Vjb25kcyIsIm1lc3NhZ2VzIiwibm9MYXN0SXRlbSIsInRpbWVTdGlsbFJ1bm5pbmciLCJ0aW1lckhhc250UnVuIiwidGltZVJ1bmluZyIsImNvbXBsZXRlUmVzdWx0cyIsIml0ZW1SZXN1bHRzIiwiaXRlbVJlc3VsdCIsIml0ZW1MYWJlbCIsInZhcmlhYmxlX25hbWUiLCJHcmlkRWRpdFZpZXciLCJibHVyICNzdWJ0ZXN0X2l0ZW1zIiwiY2xlYW5XaGl0ZXNwYWNlIiwicmFuZG9taXplIiwidmFyaWFibGVOYW1lIiwiT2JzZXJ2YXRpb25SdW5WaWV3Iiwic2F2ZUN1cnJlbnRTdXJ2ZXkiLCJ1cGRhdGVPYnNlcnZhdGlvbkluZGV4IiwiY2hlY2tTdXJ2ZXlEaXNwbGF5IiwiY2hlY2tJZk92ZXIiLCJjaGVja1dhcm5pbmciLCJjaGVja09ic2VydmF0aW9uUGFjZSIsInRpY2siLCJjbGljayAuZG9uZSIsIkZPUkNFIiwid2FybmluZ1NlY29uZHMiLCJpbml0aWFsaXplRmxhZ3MiLCJpbml0aWFsaXplU3VydmV5Iiwic3VydmV5IiwidW5zaGlmdCIsInNraXBwYWJsZVZpZXciLCJpQW0iLCJjb3VudGluZyIsInJlY29yZGluZyIsImlIYXZlbnQiLCJ3YXJuZWQiLCJpSGF2ZSIsInJ1bk9uY2UiLCJmaW5pc2hlZCIsIm15IiwiZWxhcHNlZCIsIm9ic2VydmF0aW9uIiwib2xkSW5kZXgiLCJjb21wbGV0ZWQiLCJzdGFydE9ic2VydmF0aW9ucyIsInRpbWVySW50ZXJ2YWwiLCJzdG9wT2JzZXJ2YXRpb25zIiwiZnJvbUNsaWNrIiwiaXNudFByZW1hdHVyZVN0b3AiLCJyZXNldE9ic2VydmF0aW9uRmxhZ3MiLCJyZW5kZXJTdXJ2ZXkiLCJ1cGRhdGVQcm9ncmVzc0Rpc3BsYXkiLCJmb3JjZWRQcm9ncmVzc2lvbiIsImlTaG91bGRXYXJuIiwicHJvamVjdGVkSW5kZXgiLCJ0aW1lVGlsbE5leHQiLCJjb21wbGV0ZU9ic2VydmF0aW9uIiwib2JzZXJ2YXRpb25OdW1iZXIiLCJzYXZlVGltZSIsInRvdGFsU2Vjb25kcyIsInN1cnZleXMiLCJpbnRlcnZhbExlbmd0aCIsImNvbXBsZXRlZE9ic2VydmF0aW9ucyIsInNraXBwZWRSZXN1bHRzIiwidmlld1Jlc3VsdCIsIk9ic2VydmF0aW9uRWRpdFZpZXciLCJzdXJ2ZXlBdHRyaWJ1dGVzIiwic3VydmV5TW9kZWwiLCJzdXJ2ZXlWaWV3IiwiR3BzUnVuVmlldyIsInBvbGwiLCJ1cGRhdGVEaXNwbGF5IiwicmV0cnlDb3VudCIsImdvb2QiLCJwb29yIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJhY2N1cmFjeSIsIm1ldGVycyIsInNhdmVkUmVhZGluZyIsImN1cnJlbnRSZWFkaW5nIiwiYmVzdFJlYWRpbmciLCJncHNTdGF0dXMiLCJncHNPayIsInJldHJ5aW5nIiwic2VhcmNoaW5nIiwibm90U3VwcG9ydGVkIiwiZ2VvbG9jYXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJ1cGRhdGVQb3NpdGlvbiIsInVwZGF0ZVN0YXR1cyIsInN0b3BQb2xsaW5nIiwicG9zaXRpb25FcnJvciIsIm1heGltdW1BZ2UiLCJlbmFibGVIaWdoQWNjdXJhY3kiLCJlYXNpZnkiLCJyZWY0IiwicmVmNSIsInJlZjYiLCJsYXQiLCJjb29yZHMiLCJsb25nIiwiYWx0IiwiYWx0aXR1ZGUiLCJhY2MiLCJhbHRBY2MiLCJhbHRpdHVkZUFjY3VyYWN5IiwiaGVhZGluZyIsInRpbWVzdGFtcCIsIm5ld1Bvc2l0aW9uIiwicG9zIiwicG9zaXRpb25zIiwidG9GaXhlZCIsInBvbGxpbmciLCJyZXRyaWVzIiwiR3BzRWRpdFZpZXciLCJzaW1wbGVNb2RlIiwic2ltcGxlTW9kZVN0YXRlIiwiR3BzUHJpbnRWaWV3Iiwic3VidGVzdERhdGEiLCJlbnVtZXJhdG9yIiwidGFuZ2VyaW5lVmVyc2lvbiIsInZlcnNpb24iLCJkZXZpY2UiLCJ1c2VyQWdlbnQiLCJpbnN0YW5jZUlkIiwic3VidGVzdERhdGFFbGVtZW50Iiwic2V0U3VidGVzdERhdGEiLCJuZXdFbGVtZW50IiwibmV3U3VidGVzdERhdGEiLCJvbGRFbGVtZW50Iiwib2xkU3VidGVzdERhdGEiLCJzdGF0ZSIsInZhcmlhYmxlIiwiZm91bmQiLCJFcnJvciIsIlJlc3VsdHMiLCJpbmNsdWRlX2RvY3MiLCJjbGljayAuYW5vdGhlciIsImFub3RoZXIiLCJhc3Nlc3NtZW50Q29tcGxldGUiLCJjb21tZW50cyIsInN1YnRlc3RzQ29tcGxldGVkIiwicmVzdWx0U3VtVmlldyIsIlJlc3VsdFN1bVZpZXciLCJmaW5pc2hDaGVjayIsIlJlc3VsdHNWaWV3IiwidXBkYXRlUmVzdWx0cyIsInVwZGF0ZU9wdGlvbnMiLCJkZXRlY3RUYWJsZXRzIiwiY2xpY2sgLmNsb3VkIiwiY2xpY2sgLnRhYmxldHMiLCJjbGljayAuZGV0ZWN0IiwiY2xpY2sgLmRldGFpbHMiLCJjbGljayAucmVmcmVzaCIsImNsaWNrIC5zaG93X2FkdmFuY2VkIiwiY2hhbmdlICNsaW1pdCIsImNoYW5nZSAjcGFnZSIsInRvZ2dsZUFkdmFuY2VkIiwicmVmcmVzaCIsInNob3dSZXN1bHRTdW1WaWV3IiwiJGRldGFpbHMiLCJ0YXJnZXRJZCIsImNsb3VkIiwiYXZhaWxhYmxlIiwidGFibGV0cyIsImlwIiwiaXBzIiwidXJsU3VibmV0IiwiaW5pdERldGVjdE9wdGlvbnMiLCJkZXRlY3RPcHRpb25zIiwiZGV0ZWN0Q2xvdWQiLCJ1cmxIb3N0IiwibG9jYWwiLCJzdWJuZXRJUCIsInBlcmNlbnRhZ2UiLCJ0YWJsZXRNZXNzYWdlIiwic2F2ZU9wdGlvbnMiLCJjc3YiLCJzdGFydGVkIiwiZGV0YWlscyIsInBhZ2UiLCJwZXJQYWdlIiwiYWR2YW5jZWQiLCJub1Jlc3VsdHMiLCJkZXRlY3QiLCJyZXN1bHRMaW1pdCIsInJlc3VsdE9mZnNldCIsInN1YlZpZXdzIiwiY2xlYXJTdWJWaWV3cyIsInNldExpbWl0Iiwic2V0T2Zmc2V0IiwiY2FsY3VsYXRlZCIsIm1heFBhZ2UiLCJjdXJyZW50UGFnZSIsImVuZCIsImVuZFRpbWUiLCJmcm9tTm93IiwiaHRtbFJvd3MiLCJtYXhSZXN1bHRzIiwic3RhcnRfdGltZSIsIlRhYmxldE1hbmFnZXJWaWV3IiwicHVzaERvY3MiLCJ1cGRhdGVQdWxsUmVzdWx0IiwidXBkYXRlUHVsbCIsInB1bGxEb2NzIiwiZGV0ZWN0aW5nVGFibGV0cyIsInN5bmNDb21wbGV0ZSIsImlwQmxvY2siLCJ0b3RhbElwcyIsInRhYmxldE9mZnNldCIsImRvY1R5cGVzIiwic3VjY2Vzc2Z1bCIsInJhbmRvbUlkRG9jIiwiaGV4X3NoYTEiLCJzYXZlRG9jIiwicmFuZG9tRG9jIiwiaW50ZXJuYWxFcnJvciIsIl9fZm91bmRfXyIsInRhYmxldENvdW50Iiwic2VsZlJlcSIsInNlbGZTdWJuZXRJcCIsInZpZXdSZXEiLCJjb21wbGV0ZVB1bGwiLCJ3aXRob3V0IiwidG9nZ2xlRGV0YWlscyIsInJlc3VtZSIsInN0dWRlbnRJZCIsInN1bSIsIkRhc2hib2FyZFZpZXciLCJyZW5kZXJSZXN1bHRzIiwic3ludGF4SGlnaGxpZ2h0Iiwic2hvd1Jlc3VsdCIsImNoYW5nZSAjZ3JvdXBCeSIsImNoYW5nZSAjYXNzZXNzbWVudCIsImNoYW5nZSAjc2hpZnRIb3VycyIsImNsaWNrIC5yZXN1bHQiLCJyZXN1bHREZXRhaWxzIiwicmVzdWx0SWQiLCJsZWZ0IiwianNvbiIsImNscyIsImdyb3VwQnkiLCJzaGlmdEhvdXJzIiwicmVkdWNlIiwiZGF0ZXMiLCJwcm9wZXJ0aWVzVG9Hcm91cEJ5IiwidGFibGVSb3dzIiwiZGlzcGxheURhdGUiLCJsZWZ0Q29sdW1uIiwic29ydGluZ0RhdGUiLCJqc3R6IiwiZGV0ZXJtaW5lIiwiZGF0YUZvckRhdGVzIiwiQWRtaW5WaWV3IiwiY2xpY2sgLnVwZGF0ZSAiLCJnZXRWZXJzaW9uTnVtYmVyIiwic29ydFRhYmxlIiwidGFibGVzb3J0ZXIiLCJ3aWRnZXRzIiwic29ydExpc3QiLCJoZWFkZXIiLCIkZ3JvdXAiLCJyZXN1bHRDb3VudHMiLCJncm91cFRvdGFsUmVzdWx0cyIsImRlc2NlbmRpbmciLCJ0eXBlcyIsImhpbnQiLCJvdGhlcldyaXRlSW4iLCJsaW5rZWRHcmlkU2NvcmUiLCJza2lwTGluayIsInNraXBSZXF1aXJlbWVudCIsIlN1cnZleVJldmlld1ZpZXciLCJnZXROYW1lIiwic2V0TmFtZSIsInNldEhpbnQiLCJzZXRQcm9tcHQiLCJzZXRBbnN3ZXIiLCJzZXRPcHRpb25zIiwidXBkYXRlUmVzdWx0IiwicHJldmlvdXNBbnN3ZXIiLCJjaGFuZ2UgaW5wdXQiLCJjaGFuZ2UgdGV4dGFyZWEiLCJjbGljayAuYXV0b3Njcm9sbF9pY29uIiwic2Nyb2xsIiwiZGVmaW5lU3BlY2lhbENhc2VSZXN1bHRzIiwic2hvd0NvZGUiLCJjdXN0b21WYWxpZGF0aW9uQ29kZSIsImlzU2tpcHBhYmxlIiwiYW5zd2VyVmFsdWUiLCJsaXN0IiwiYW5zd2VycyIsIlF1ZXN0aW9uRWRpdFZpZXciLCJjbGljayAuYWRkX29wdGlvbiIsImNsaWNrIC5kZWxldGVfb3B0aW9uIiwiY2xpY2sgI3F1ZXN0aW9uX3R5cGUgaW5wdXQ6cmFkaW8iLCJjaGFuZ2UgLm9wdGlvbl9zZWxlY3QiLCJrZXlwcmVzcyAub3B0aW9uX3ZhbHVlIiwia2V5cHJlc3MgLm9wdGlvbl9sYWJlbCIsImNoYW5nZSAjY3VzdG9tX3ZhbGlkYXRpb25fY29kZSIsImNoYW5nZSAjc2tpcF9sb2dpYyIsInF1aWNrQWRkV2l0aEVudGVyIiwiYWRkT3B0aW9uIiwicXVpY2tGb2N1c1ZhbHVlIiwidGVtcGxhdGVGaWxsIiwib3B0aW9uVGVtcGxhdGVzIiwiZ2V0T3B0aW9uTGlzdCIsIm9wdGlvbkxpc3RFbGVtZW50cyIsInJlZnJlc2hPcHRpb25MaXN0IiwiY2hlY2tPclJhZGlvIiwiY3VzdG9tVmFsaWRhdGlvbk1lc3NhZ2UiLCJvcHRpb25IVE1MIiwic2tpcExvZ2ljIiwicmVmcmVzaFNvcnRhYmxlIiwiaGlqYWNrRW50ZXIiLCJibHVyIiwiY2hhbmdlUXVlc3Rpb25UeXBlIiwiY2xhc3NPck5vdCIsInNob3dEZWxldGVDb25maXJtIiwiaGlkZURlbGV0ZUNvbmZpcm0iLCJkZWxldGVPcHRpb24iLCJzcGxpY2UiLCJRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3IiwicmVmZXRjaEFuZFJlbmRlciIsImZvcmNlSGVscGVyU2l6ZSIsImZvcmNlUGxhY2Vob2xkZXJTaXplIiwiaWRMaXN0IiwibmV3RG9jIiwibmV3RG9jcyIsImFueVF1ZXN0aW9uIiwiY29weSIsImdldFN1cnZleXMiLCJjbGljayAuZWRpdCIsImNsaWNrIC5zaG93X2NvcHkiLCJjaGFuZ2UgLmNvcHlfc2VsZWN0IiwiY2xpY2sgLmRlbGV0ZSIsInNob3dDb3B5IiwiJGNvcHkiLCJwb3B1bGF0ZVN1cnZleVNlbGVjdCIsImNhbmNlbF9idXR0b24iLCJhdHRycyIsInRvZ2dsZURlbGV0ZSIsImRlbGV0ZSIsImRlbGV0ZV9idXR0b24iLCJsb2FkaW5nIiwiZGVsZXRlX2NvbmZpcm0iLCJXb3JrZmxvd1N0ZXAiLCJnZXRUeXBlIiwiZ2V0VmlldyIsImFyZ09wdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsInZpZXdPcHRpb25zIiwiZ2V0Vmlld09wdGlvbnMiLCJpbldvcmtmbG93IiwiZ2V0Q29mZmVlTWVzc2FnZSIsImdldENvbnRlbnQiLCJldmFsIiwiZ2V0VHlwZU1vZGVsIiwiZ2V0VHlwZXNJZCIsImdldFVzZXJUeXBlIiwiZ2V0Q3VycmljdWx1bUl0ZW1UeXBlIiwiZ2V0Q3VycmljdWx1bVdlZWsiLCJnZXRDdXJyaWN1bHVtR3JhZGUiLCJnZXRTaG93TGVzc29uIiwiV29ya2Zsb3dTdGVwcyIsIldvcmtmbG93Iiwic3RlcE1vZGVsQnlJbmRleCIsInZhbGlkYXRlIiwiV29ya2Zsb3dzIiwiU2Nob29sTGlzdFZpZXciLCJXT1JLRkxPV19OT19CT09LUyIsIldPUktGTE9XX1dJVEhfQk9PS1MiLCJjbGljayAuc2Nob29scy1sZWZ0IiwidG9nZ2xlU2Nob29sTGlzdCIsImxvY0xldmVscyIsImdlb2dyYXBoeSIsInZpc2l0ZWQiLCJzY2hvb2xzIiwiY3VycmVudExvY2F0aW9uIiwiaW52YWxpZCIsImxvY2F0aW9uU3VidGVzdCIsInZhbGlkT2JzZXJ2YXRpb25WaWV3IiwiVmFsaWRPYnNlcnZhdGlvblZpZXciLCJsaXN0ZW5UbyIsImZldGNoTG9jYXRpb25zIiwiZmV0Y2hUcmlwcyIsIkxvYyIsInF1ZXJ5IiwiY291bnR5Iiwiem9uZSIsImFsbFNjaG9vbHMiLCJzY2hvb2xOYW1lcyIsIm9iaiIsImN1ciIsImNvdW50eU5hbWVzIiwiem9uZU5hbWVzIiwidHJpcHMiLCJUcmlwUmVzdWx0Q29sbGVjdGlvbiIsInF1ZXJ5S2V5IiwiZmluaXNoIiwiaW5jb21wbGV0ZSIsImluY29tcGxldGVUcmlwcyIsImlzUmlnaHRXb3JrZmxvdyIsImlzVGhpc1R1dG9yIiwic2Nob29sSWRzIiwidHJpcCIsInRyaXBJZHMiLCJ3b3JrZmxvd0lkIiwiem9uZXMiLCJnZXRQcmVmZXJlbmNlcyIsInZhbGlkVHJpcHMiLCJzY2hvb2xJZCIsImNvbnRhaW5zIiwiYWxsIiwiZGlmZmVyZW5jZSIsInNjaG9vbCIsInJlbmRlck1vYmlsZSIsImNsaWNrIC53b3JrZmxvdy1uZXciLCJjbGljayAud29ya2Zsb3ctZGVsZXRlIiwiY2xpY2sgLndvcmtmbG93LXJ1biIsImNsaWNrIC53b3JrZmxvdy1lZGl0IiwiY2xpY2sgLndvcmtmbG93LWNzdiIsImNsaWNrIC5yZW1vdmUtcmVzdW1lIiwicmVtb3ZlUmVzdW1lIiwidHJpcElkIiwic2V0UHJlZmVyZW5jZXMiLCJ1cGRhdGVXb3JrZmxvd3MiLCJ3b3JrZmxvdyIsIldvcmtmbG93RWRpdFZpZXciLCJNT05USFMiLCJjc3ZQcm9tcHRNb250aCIsIm1vZGFsQ29udGVudCIsInJlcG9ydFVybCIsInRoaXNNb250aCIsInRoaXNZZWFyIiwid29ya2Zsb3dUaXRsZSIsIiRjc3ZNb250aCIsIiRjc3ZVcmwiLCIkY3N2WWVhciIsIkZlZWRiYWNrcyIsImNzdlVybCIsImZlZWRiYWNrIiwiZmVlZGJhY2tIdG1sIiwiaHRtbFdvcmtmbG93cyIsImhpZGRlbldvcmtmbG93cyIsInJlbmRlclJlc3VtZUluZm8iLCJpbmNvbXBsZXRlV29ya2Zsb3dzIiwidGltZUFnbyIsInZhbGlkQ291bnQiLCJsYXN0TW9udGgiLCJmZXRjaFRyaXBJZHMiLCJ0aGlzVXNlciIsImJlc3RQcmFjdGljZXMiLCJmdWxsUHJpbXIiLCJ3b3JrZmxvd0tleXMiLCJ0aGVzZVdvcmtmbG93cyIsImludGVyc2VjdGlvbiIsIm1heFRpbWUiLCJ1cGRhdGVTZWxlY3RvciIsIm9uVHlwZVNlbGVjdG9yQ2hhbmdlIiwidXBkYXRlRWRpdEluUGxhY2VNb2RlbHMiLCJjbGljayAgLmFkZCIsImNoYW5nZSAudHlwZS1zZWxlY3RvciIsImNoYW5nZSAudHlwZXMtaWQiLCJjaGFuZ2UgLnVzZXItdHlwZSIsImNoYW5nZSBpbnB1dFt0eXBlPXJhZGlvXSIsImNsaWNrIC5vcGVuLXNlbGVjdG9yIiwiY2xpY2sgLnJlbW92ZS1zdGVwIiwicmVtb3ZlU3RlcCIsIm9wZW5TZWxlY3RvciIsInN0ZXBUeXBlIiwib25UeXBlc0lkQ2hhbmdlIiwic3RlcElkIiwidHlwZUlkIiwidHlwZXNJZCIsIm9uVXNlclR5cGVDaGFuZ2UiLCJ1c2VyVHlwZSIsIm9uUmFkaW9DaGFuZ2UiLCJkYXRhSWQiLCJzdGVwTGlzdCIsIm5lZWROYW1lcyIsIm5lZWRTZWxlY3RvciIsInN0ZXBNb2RlbCIsImRpc3BsYXlBc3Nlc3NtZW50IiwiZGlzcGxheUN1cnJpY3VsdW0iLCJkaXNwbGF5TG9naW4iLCJkaXNwbGF5TWVzc2FnZSIsImRpc3BsYXlOZXciLCJzZWxlY3RlZEFzc2Vzc21lbnQiLCJzZWxlY3RlZEN1cnJpY3VsdW0iLCJzZWxlY3RlZExvZ2luIiwic2VsZWN0ZWRNZXNzYWdlIiwic2VsZWN0ZWROZXdPYmplY3QiLCJzZWxlY3RlZE5vVHlwZSIsInR5cGVTZWxlY3RvciIsInR5cGVNb2RlbCIsIm9uZVNlbGVjdGVkIiwicG9zc2libGVUeXBlcyIsInByb21wdFNlbGVjdGlvbiIsIkN1cnJpY3VsYSIsInN0ZXBBZGQiLCJXb3JrZmxvd1J1blZpZXciLCJyZW5kZXJTdGVwIiwibmV4dFN0ZXAiLCJvblN1YlZpZXdEb25lIiwiY2xpY2sgLnByZXZpb3VzIiwiY2xpY2sgLm5leHQiLCIkbGVzc29uQ29udGFpbmVyIiwic3RlcHMiLCJjdXJyZW50U3RlcCIsInN1YlZpZXdSZW5kZXJlZCIsInNob3VsZFNraXAiLCJuZXh0QnV0dG9uIiwic3RlcEluZGljYXRvciIsImNoZWNrSW5jb21wbGV0ZXMiLCJzdWJWaWV3Iiwic3ViVmlld0RvbmUiLCJpdEV4aXN0cyIsIml0SXNSZW5kZXJlZCIsIml0SXNudERvbmUiLCJpdHNBQ3VycmljdWx1bSIsIml0c0FOZXdPYmplY3QiLCJpdHNBbkFzc2Vzc21lbnQiLCJjaGVja2luZ0luY29tcGxldGVzIiwicHJldmlvdXNTdGVwIiwiJGNvbnRlbnQiLCJncmFkZSIsImxlc3NvbkltYWdlIiwibW90aGVyVG9uZ3VlIiwic3ViamVjdCIsIndlZWsiLCJyZW5kZXJOZXciLCJyZW5kZXJBc3Nlc3NtZW50IiwicmVuZGVyQ3VycmljdWx1bSIsInJlbmRlck1lc3NhZ2UiLCJ3b3JkIiwiZW5nbGlzaF93b3JkIiwib3BlcmF0aW9uIiwiSW1hZ2UiLCJzcmMiLCJsZXNzb25Db250YWluZXIiLCJjb2ZmZWVNZXNzYWdlIiwiaHRtbE1lc3NhZ2UiLCJqc01lc3NhZ2UiLCJzaG93VmlldyIsImFzc2Vzc21lbnRSZXN1bWVJbmRleCIsImNyaXRlcmlhIiwiaXRlbVR5cGUiLCJub3ciLCJ0ZXJtIiwidGVybTFFbmQiLCJ0ZXJtMVN0YXJ0IiwidGVybTJFbmQiLCJ0ZXJtMlN0YXJ0IiwidGVybTNFbmQiLCJ0ZXJtM1N0YXJ0IiwicGFydCIsIktsYXNzU3VidGVzdFJ1blZpZXciLCJzdHVkZW50IiwiU3R1ZGVudCIsImxpbmtlZFJlc3VsdCIsIktsYXNzUmVzdWx0IiwicmVuZGVyRW5kIiwiZ3BzUGluZyIsImFwcHJvcHJpYXRlIiwiV29ya2Zsb3dTZWxlY3RWaWV3IiwiY2hhbmdlIGlucHV0W3R5cGU9Y2hlY2tib3hdIiwiYnV0dG9ucyIsImNoZWNrZWRIdG1sIiwib25DaGVja2JveENoYW5nZSIsImlzQ2hlY2tlZCIsIldvcmtmbG93TWVudU1lbWJlclZpZXciLCJLbGFzcyIsImFsbFJlc3VsdHMiLCJhbGxTdHVkZW50cyIsImtsYXNzSWQiLCJTdHVkZW50cyIsInN0dWRlbnRDb2xsZWN0aW9uIiwic3R1ZGVudHMiLCJyZXN1bHRDb2xsZWN0aW9uIiwiY2FsY0N1cnJlbnRQYXJ0IiwibWlsbGlzZWNvbmRzIiwibWlsbGlzZWNvbmRzUGVyRGF5IiwibWlsbGlzZWNvbmRzUGVySG91ciIsIm1pbGxpc2Vjb25kc1Blck1pbnV0ZSIsIm1pbGxpc2Vjb25kc1BlcldlZWsiLCJLbGFzc1ZpZXciLCJhbGxBc3Nlc3NtZW50cyIsImtsYXNzIiwiS2xhc3NBc3Nlc3NtZW50cyIsImFzc2Vzc21lbnRDb2xsZWN0aW9uIiwic3RyZWFtIiwiS2xhc3NFZGl0VmlldyIsInJlbmRlclN0dWRlbnRzIiwib25TdWJ2aWV3UmVuZGVyZWQiLCJyZWdpc3RlclN0dWRlbnQiLCJjbGljayAuYmFzaWNfaW5mb19lZGl0IiwiY2xpY2sgLmJhc2ljX2luZm9fY2FuY2VsIiwiY2hhbmdlICN0ZWFjaGVyX3NlbGVjdCIsImNsaWNrIC5hZGRfc3R1ZGVudCIsImNsaWNrIC5hZGRfc3R1ZGVudF9jYW5jZWwiLCJjbGljayAuYWRkX3N0dWRlbnRfYWRkIiwiY2xpY2sgLnJlZ2lzdGVyX3N0dWRlbnQiLCJjbGljayAucmVnaXN0ZXJfc3R1ZGVudF9jYW5jZWwiLCJjbGljayAucmVnaXN0ZXJfc3R1ZGVudF9zYXZlIiwidGVhY2hlclNlbGVjdCIsInRlYWNoZXJJZCIsImFkZFN0dWRlbnRUb2dnbGUiLCJyZWdpc3RlclN0dWRlbnRUb2dnbGUiLCJhZGRTdHVkZW50IiwibmV3U3R1ZGVudCIsImdlbmRlciIsImFnZSIsImJhc2ljSW5mb1RvZ2dsZSIsIiRiYXNpY0luZm8iLCJiYXNpY0luZm9TYXZlIiwiaW5wdXRzIiwibmV3RGF0ZSIsInNldEZ1bGxZZWFyIiwic2V0TW9udGgiLCJzZXREYXRlIiwic2Nob29sTmFtZSIsInN0YXJ0RGF0ZSIsIlN0dWRlbnRMaXN0RWxlbWVudFZpZXciLCJodG1sSW5mb1RlYWNoZXIiLCJodG1sVGVhY2hlclNlbGVjdCIsInRlYWNoZXIiLCJ0ZWFjaGVyTmFtZSIsIktsYXNzZXMiLCJ1cGRhdGVVcGxvYWRlciIsImNsaWNrIC5rbGFzc19hZGQiLCJjbGljayAua2xhc3NfY2FuY2VsIiwiY2xpY2sgLmtsYXNzX3NhdmUiLCJjbGljayAua2xhc3NfY3VycmljdWxhIiwiY2xpY2sgLmdvdG9fY2xhc3MiLCJjbGljayAucHVsbF9kYXRhIiwiY2xpY2sgLnVwbG9hZF9kYXRhIiwidmVyUmVxIiwidXBsb2FkRGF0YSIsInB1bGxEYXRhIiwicmVuZGVyS2xhc3NlcyIsImdvdG9DdXJyaWN1bGEiLCJzYXZlTmV3S2xhc3MiLCJnb3RvS2xhc3MiLCJ0b2dnbGVBZGRGb3JtIiwiS2xhc3NMaXN0RWxlbWVudFZpZXciLCJjdXJyaWN1bGFPcHRpb25MaXN0IiwiYWRtaW5QYW5lbCIsImN1cnJpY3VsYUJ1dHRvbiIsImNsaWNrIC5rbGFzc19ydW4iLCJjbGljayAua2xhc3NfcmVzdWx0cyIsImNoYW5nZSAjcmVwb3J0IiwiY2xpY2sgLmNhbmNlbF9yZXBvcnQiLCJjbGljayAua2xhc3NfZWRpdCIsImNsaWNrIC5rbGFzc19kZWxldGUiLCJjbGljayAua2xhc3NfZGVsZXRlX2NhbmNlbCIsImNsaWNrIC5rbGFzc19kZWxldGVfZGVsZXRlIiwiYXZhaWxhYmxlUmVwb3J0cyIsImdldFJlcG9ydE1lbnUiLCJzdWJNZW51VmlldyIsInNob3dSZXBvcnRTZWxlY3QiLCJjYW5jZWxSZXBvcnQiLCJydW4iLCJodG1sVGVhY2hlciIsIm1lbnVPcHRpb25zIiwicmVwb3J0IiwiY29udGV4dCIsIm1lbnVWaWV3Iiwib25Qcm90b3R5cGVSZW5kZXJlZCIsImNsaWNrIC5jYW5jZWwiLCJyZXBvcnRUeXBlIiwidGltZUFsbG93ZWQiLCJvbGQiLCJLbGFzc1N1YnRlc3RSZXN1bHRWaWV3IiwiY2xpY2sgLnJ1biIsImNsaWNrIC5zaG93X2l0ZW1pemVkIiwiZ290b1J1biIsImNoZWNrUnVuIiwiaGFzR3JpZExpbmsiLCJzaG93SXRlbWl6ZWQiLCJyZXN1bHRIVE1MIiwicnVuQnV0dG9uIiwidGFrZW4iLCJLbGFzc01lbnVWaWV3IiwiY2xpY2sgLnJlZ2lzdHJhdGlvbiIsImdvdG9LbGFzc2VzIiwiS2xhc3NQYXJ0bHlWaWV3IiwiY2xpY2sgLm5leHRfcGFydCIsImNsaWNrIC5wcmV2X3BhcnQiLCJjbGljayAuc3R1ZGVudF9zdWJ0ZXN0Iiwia2V5dXAgI2N1cnJlbnRfcGFydCIsImtleXVwICNzZWFyY2hfc3R1ZGVudF9uYW1lIiwiZm9jdXMgI3NlYXJjaF9zdHVkZW50X25hbWUiLCJzY3JvbGxUb05hbWUiLCJmaWx0ZXJTdHVkZW50cyIsInNlYXJjaCIsInVwZGF0ZUdyaWRQYWdlIiwiZ290b0Fzc2Vzc21lbnQiLCJjdXJyZW50UGFydCIsImdvdG9TdHVkZW50U3VidGVzdCIsIm5leHRQYXJ0IiwibGFzdFBhcnQiLCJwcmV2UGFydCIsInN1YnRlc3RzQnlQYXJ0IiwiZ2V0R3JpZFBhZ2UiLCJjZWxsIiwiZ3JpZFBhZ2UiLCJsZW4zIiwibGVuNCIsInBhcnRUZXN0IiwicmVjZW5jeSIsInJlc3VsdHNGb3JUaGlzU3R1ZGVudCIsInN0dWRlbnRSZXN1bHQiLCJzdWJ0ZXN0c1RoaXNQYXJ0IiwidGFibGUiLCJ0YWtlbkNsYXNzIiwiS2xhc3NSZXN1bHRzIiwiY29udGVudCIsInN0dWRlbnROYW1lIiwiZ2V0SXRlbWl6ZWQiLCJpdGVtaXplZCIsImdyaWRDb3VudCIsImdldEF0dGVtcHRlZCIsImdldFRpbWVSZW1haW4iLCJnZXRDb3JyZWN0UGVyU2Vjb25kcyIsInNlY29uZHNBbGxvd2VkIiwic2hvd09sZCIsInRvUmVtb3ZlIiwiS2xhc3NTdWJ0ZXN0RWRpdFZpZXciLCJzdXJ2ZXlFZGl0b3IiLCJzY29yZVRhcmdldCIsInNjb3JlU3ByZWFkIiwiY3VycmljdWx1bU5hbWUiLCJwcm90b3R5cGVPcHRpb25zIiwiS2xhc3NHcm91cGluZ1ZpZXciLCJub3JtYWxDdXJ2ZSIsImNvbG9yQ2xhc3MiLCJjaGFuZ2UgI3NlbGVjdG9yX2NvbnRhaW5lciBpbnB1dCIsImNsaWNrIC5zdHVkZW50X25hbWUiLCIkc3R1ZGVudFJlc3VsdHMiLCJ1cGRhdGVUYWJsZSIsImFDb3JyZWN0IiwiY2xhc3NOb3RSZWFkeSIsImNsYXNzUmVhZHkiLCJkZXYiLCJkZXZJbmRleCIsImlzQ2xhc3NSZWFkeSIsIm5TdHVkZW50c05vdFJlYWR5IiwicE5vdFJlYWR5IiwicGMiLCJwZXJjZW50aWxlIiwicGVyc29uIiwid2FybmluZ0ljb24iLCJzdW1tYXJ5IiwiY2xhc3NTaXplIiwiYW5Db3JyZWN0Iiwic3RkRGV2IiwidG90YWxJdGVtcyIsIndhdGNoTGlzdCIsInBDb3JyZWN0IiwibkNvcnJlY3QiLCJkZXZpYXRpb24iLCJyZWFkeVBlcmNlbnRhZ2UiLCJyZWFkaW5lc3NXYXJuaW5nIiwiY2hlY2tlZEF0dHJpYnV0ZSIsImRldGFpbHNIVE1MIiwiZW1wdHlIVE1MIiwiaXRlbWl6ZWRSZXN1bHRzIiwibWVudUhUTUwiLCJzdW1tYXJ5SFRNTCIsIndhcm5pbmdzSFRNTCIsImdldFF1YXJ0aWxlIiwiS2xhc3NHcm91cGluZ01lbnVWaWV3IiwiY2hhbmdlIC5wYXJ0X3NlbGVjdG9yIiwiZ290b0tsYXNzR3JvdXBpbmdSZXBvcnQiLCJjdXJyaWN1bGFJZCIsImZsYWdGb3JDdXJyZW50IiwiTWFzdGVyeUNoZWNrVmlldyIsInJlc3VsdHNCeVBhcnQiLCJpc0Zpbml0ZSIsImh0bWxXYXJuaW5nIiwiTWFzdGVyeUNoZWNrTWVudVZpZXciLCJjaGFuZ2UgLnN0dWRlbnRfc2VsZWN0b3IiLCJnb3RvTWFzdGVyeUNoZWNrUmVwb3J0IiwiUHJvZ3Jlc3NWaWV3IiwiU29ydGVkQ29sbGVjdGlvbiIsInVwZGF0ZUZsb3QiLCJJTkRJVklEVUFMIiwiQUdHUkVHQVRFIiwiY2xpY2sgLnNlbGVjdF9pdGVtVHlwZSIsImNsaWNrIC54dGljayIsInNlbGVjdEFzc2Vzc21lbnQiLCJzZWxlY3RJdGVtVHlwZSIsImdvIiwiZGF0YUZvckJlbmNobWFyayIsImdyYXBoSW5kZXgiLCJpdGVtVHlwZXMiLCJsZW41IiwibGVuNiIsImxlbjciLCJwYXJ0QnlJbmRleCIsInBvaW50c0J5SXRlbVR5cGUiLCJyZWY3IiwicmVuZGVyUmVhZHkiLCJzdWJ0ZXN0TmFtZXMiLCJiZW5jaG1hcmtTY29yZSIsInBhcnRDb3VudCIsImZsb3QiLCJpdGVtVHlwZUxpc3QiLCJpbmRleEJ5UGFydCIsIml0ZW1zUGVyTWludXRlIiwiYWdncmVnYXRlIiwiZmxvdERhdGEiLCJiZW5jaG1hcmtEYXRhIiwibGluZXMiLCJwb2ludHMiLCJmbG90QmVuY2htYXJrIiwid2FybmluZ1RocmVzaG9sZHMiLCJzcHJlYWQiLCIkd2luZG93Iiwid2luIiwiYXZhaWxhYmxlSXRlbVR5cGVzVGhpc1dlZWsiLCJoaWdoIiwibG93Iiwic2NvcmUiLCJ0aHJlc2hvbGQiLCJ3YXJuaW5ncyIsImFicyIsImRpc3BsYXlEYXRhIiwiZmxvdE9wdGlvbnMiLCJ4YXhpcyIsInRpY2tzIiwidGlja0RlY2ltYWxzIiwidGlja0Zvcm1hdHRlciIsIm1hcmtpbmdzIiwidG8iLCJmcm9tIiwicGxvdCIsIm9sZFJvd3MiLCJtZWFuIiwibmV3Um93cyIsInNvcnRlZCIsIlByb2dyZXNzTWVudVZpZXciLCJnb3RvUHJvZ3Jlc3NUYWJsZSIsIkNzdk1lbnVWaWV3IiwiZ3JvdXBOYW1lIiwiYXNzZXNzbWVudEF0dHJpYnV0ZXMiLCJzdWJ0ZXN0QXR0cmlidXRlcyIsInF1ZXN0aW9uQXR0cmlidXRlcyIsIm9yaWdpbmFsSWQiLCJmaWx0ZXJlZFN1YnRlc3RzIiwiZ3JpZElkIiwibmV3UXVlc3Rpb25zIiwibmV3U3VidGVzdHMiLCJvbGRJZCIsIkN1cnJpY3VsdW1WaWV3IiwiY2xpY2sgLmRlbGV0ZV9zdWJ0ZXN0IiwiY2xpY2sgLm5ld19zdWJ0ZXN0IiwiY2hhbmdlICNmaWxlIiwiY2xpY2sgLm5hbWUtY29udHJvbHMgLmVkaXQiLCJjbGljayAubmFtZS1jb250cm9scyAuc2F2ZSIsImNsaWNrIC5uYW1lLWNvbnRyb2xzIC5jYW5jZWwiLCJxdWVzdGlvbnNCeVBhcmVudElkIiwidG90YWxBc3Nlc3NtZW50cyIsInN1YnRlc3RQcm9wZXJ0aWVzIiwiZXNjYXBlZCIsImh0bWxGaWxlVGFibGUiLCJhdHRhY2htZW50IiwiYnl0ZXMiLCJwcmVmaXhlcyIsInNpemUiLCJnZXRBdHRhY2htZW50cyIsImZpbGVuYW1lIiwidXBsb2FkRmlsZSIsImZpbGUiLCJmaWxlcyIsImFkZEF0dGFjaG1lbnQiLCJkZWxldGVCdXR0b24iLCJuZXdCdXR0b25zIiwic3VidGVzdFRhYmxlIiwiZ2V0U3VidGVzdFRhYmxlIiwicmVuZGVyTmFtZSIsImVkaXROYW1lIiwiJGgxIiwic2F2ZU5hbWUiLCJjYW5jZWxFZGl0TmFtZSIsImJvZHlIdG1sIiwiaGVhZGVySHRtbCIsInByb21wdHMiLCJzdWJ0ZXN0QnlJdGVtVHlwZSIsInByb3BDb29rIiwiJHRkIiwiJG9sZFNwYW4iLCJkZWxldGVDdXJyaWN1bHVtIiwicHJvdG9UZW1wcyIsIkN1cnJpY3VsYVZpZXciLCJnb3RvSW1wb3J0IiwiQ3VycmljdWx1bUxpc3RFbGVtZW50VmlldyIsImNsaWNrIC50b2dnbGVfbWVudSIsImNsaWNrIC5kdXBsaWNhdGUiLCJjbGljayAuZGVsZXRlX2NvbmZpcm0iLCJ0b2dnbGVNZW51IiwiZGVsZXRlVG9nZ2xlIiwiZHVwbGljYXRlQnV0dG9uIiwiZWRpdEJ1dHRvbiIsIm1lbnUiLCJUZWFjaGVyIiwiVGVhY2hlcnMiLCJjbGljayAgICAuY2hhbmdlX3Bhc3N3b3JkIiwiY2hhbmdlICAgLnNob3dfcGFzc3dvcmQiLCJjbGljayAgICAuc2F2ZV9wYXNzd29yZCIsImNsaWNrICAgIC5iYWNrIiwidXNlcnNCeVRlYWNoZXJJZCIsInRlYWNoZXJQcm9wZXJ0aWVzIiwiaGVhZGVybGVzcyIsInNob3dQYXNzd29yZCIsImNoYW5nZVBhc3N3b3JkIiwic2F2ZVBhc3N3b3JkIiwidGVhY2hlck1vZGVsIiwidXNlck1vZGVsIiwic2V0UGFzc3dvcmQiLCJ0ZWFjaGVyVGFibGUiLCJnZXRUZWFjaGVyVGFibGUiLCJwcm9wQ29va1JvdyIsIlJlZ2lzdGVyVGVhY2hlclZpZXciLCJjbGljayAucmVnaXN0ZXIiLCJmaWVsZHMiLCJyZWdpc3RlciIsInNhdmVVc2VyIiwiY291Y2hVc2VyRG9jIiwidGVhY2hlckRvYyIsImRlZmF1bHRzIiwiY2xpY2sgLnJlbW92ZSIsImNsaWNrIC5yZW1vdmVfY2FuY2VsIiwiY2xpY2sgLnJlbW92ZV9kZWxldGUiLCJ0b2dnbGVSZW1vdmUiLCJyZW1vdmVTdHVkZW50IiwiU3R1ZGVudEVkaXRWaWV3IiwiQ3JpdGlxdWUiLCJzaG91bGRTaG93Tm90ZXMiLCJDcml0aXF1ZXMiLCJxQ2FsbGJhY2siLCJjdXJyZW50TGV2ZWxJbmRleCIsImxldmVsSURzIiwibGV2ZWxNYXAiLCJsb2NhdGlvbkxldmVscyIsInRhcmdldExldmVsSW5kZXgiLCJsb2NhdGlvbkxpc3QiLCJnZXRDdXJyZW50TGV2ZWxJbmRleCIsIl9xdWVyeSIsImNiIiwiZGVwdGgiLCJ0YXJnZXREZXB0aCIsImFsbENoaWxkcmVuIiwibGV2ZWxEYXRhIiwibG9jIiwiY2xvc2VzdCIsIm5leHRBbGwiLCJyZW5kZXJPbmUiLCJzaG93VGl0bGVzIiwiYWRkZWRPcHRpb25zIiwiaXNDb21wbGV0ZSIsIm5vUHJlU2VsZWN0aW9uIiwiRmVlZGJhY2siLCJGZWVkYmFja0VkaXRWaWV3IiwiY2xpY2sgIC5jcml0aXF1ZS1hZGQiLCJjbGljayAgLmNyaXRpcXVlLXJlbW92ZSIsImNyaXRpcXVlUmVtb3ZlIiwiY3JpdGlxdWVMaXN0IiwiY3JpdGlxdWVNb2RlbCIsImNvZmZlZSIsImNyaXRpcXVlQWRkIiwiRmVlZGJhY2tSdW5WaWV3IiwiTmFtZXNwYWNlIiwiTm90ZXNWaWV3Iiwibm90ZVZpZXdzIiwiJG5vdGVzIiwic2hvd25Db3VudCIsImNyaXRpcXVlIiwiZmlyc3RUaHJlZUNsYXNzIiwibmFtZXNwYWNlIiwic2hvdWxkRGlzcGxheSIsImdldER1cmF0aW9uTWludXRlcyIsImludFZhbHVlIiwibWluVGltZSIsIk51bWJlciIsIm5vdGUiLCJub3RlVmlldyIsIkZlZWRiYWNrVHJpcHNWaWV3IiwiV29ya2Zsb3dSZXN1bHRWaWV3IiwiY2hhbmdlICNjb3VudHkiLCJjaGFuZ2UgI3pvbmUiLCJjaGFuZ2UgI3NjaG9vbCIsImNsaWNrIC5zaG93LWZlZWRiYWNrIiwiY2xpY2sgLnNob3ctbGVzc29uLXBsYW4iLCJjbGljayAuaGlkZS1mZWVkYmFjayIsImNsaWNrIC5oaWRlLWxlc3Nvbi1wbGFuIiwiY2xpY2sgLnNob3ctc3VydmV5LWRhdGEiLCJjbGljayAuaGlkZS1zdXJ2ZXktZGF0YSIsImNsaWNrIC5zb3J0YWJsZSIsInZhbHVlVG9IdW1hbiIsInNob3dTdXJ2ZXlEYXRhIiwiJG91dHB1dCIsInNpYmxpbmdzIiwiaGlkZVN1cnZleURhdGEiLCJpc1JlYWR5IiwiaGlkZUxlc3NvblBsYW4iLCJzaG93TGVzc29uUGxhbiIsImJ1a3VzdSIsImthbWJhIiwiaGlkZUZlZWRiYWNrIiwic2hvd0ZlZWRiYWNrIiwibmV3U29ydEF0dHJpYnV0ZSIsInNvcnRBdHRyaWJ1dGUiLCJzb3J0RGlyZWN0aW9uIiwidXBkYXRlRmVlZGJhY2tMaXN0IiwiY291bnRpZXMiLCJjb3VudHlPcHRpb25zIiwidHJpcHNCeUNvdW50eSIsImNoYWluIiwib25Db3VudHlTZWxlY3Rpb25DaGFuZ2UiLCJzZWxlY3RlZENvdW50eSIsImNvdW50SW5ab25lIiwiem9uZU9wdGlvbnMiLCJvblpvbmVTZWxlY3Rpb25DaGFuZ2UiLCJ0cmlwc0J5Wm9uZSIsInNlbGVjdGVkWm9uZSIsImNvdW50SW5TY2hvb2wiLCJzY2hvb2xPcHRpb25zIiwiZ2V0U29ydEFycm93Iiwib25TY2hvb2xTZWxlY3Rpb25DaGFuZ2UiLCJzZWxlY3RlZFNjaG9vbCIsInNlbGVjdGVkVHJpcHMiLCJsZXNzb25QbGFuQnV0dG9uc0h0bWwiLCJyZXN1bHRCdXR0b25IdG1sIiwic29ydEZ1bmN0aW9uIiwic2VsZWN0ZWRJZCIsImFzc2Vzc21lbnRNb2RlbEJsYW5rcyIsImFzc2Vzc21lbnRTdGVwcyIsImxvYWRPbmUiLCJkaXNwbGF5SHRtbCIsImhpZGRlbiIsIm9wdGlvbnNIdG1sIiwic2VsZWN0b3JIdG1sIiwidGFibGVIdG1sIiwiVHJpcFJlc3VsdCIsIlVzZXIiLCJzZXNzaW9uUmVmcmVzaCIsIm15Um9sZXMiLCJteU5hbWUiLCJteVBhc3MiLCJyb2xlcyIsInJlY2VudFVzZXJzIiwiY29va2llIiwiYXBwIiwiaW50ZW50Iiwicm9sZSIsIm1lbWJlciIsInBhc3N3b3JkIiwiUkVDRU5UX1VTRVJfTUFYIiwic2Vzc2lvbiIsInVzZXJDdHgiLCJpc1VucmVnaXN0ZXJlZCIsImlzQXV0aGVudGljYXRlZCIsImlzVXNlciIsImFtR3JvdXBBZG1pbiIsImFtU2VydmVyQWRtaW4iLCJyZW1vdmVDb29raWUiLCJrZXlPYmplY3QiLCJ2YWx1ZU9wdGlvbnMiLCJ1c2VyRGIiLCJ1c2VyRG9jIiwiZG9tYWluIiwicHJlZmVyZW5jZXMiLCJwcmVmcyIsImpvaW5Hcm91cCIsImVuY29kZVVSSUNvbXBvbmVudCIsIlVzZXJzIiwiTG9naW5WaWV3IiwicmVjZW50ZXIiLCJrZXlwcmVzcyBpbnB1dCIsImNoYW5nZSBzZWxlY3QjbmFtZSIsImNsaWNrIC5tb2RlIiwiY2xpY2sgYnV0dG9uIiwiY2xpY2sgLnJlY2VudCIsImJsdXIgLnJlY2VudCIsImtleXVwICNuZXdfbmFtZSIsImdvT24iLCJwYXNzRXJyb3IiLCJuYW1lRXJyb3IiLCJvbGRCYWNrZ3JvdW5kIiwiY2hlY2tOZXdOYW1lIiwiY2xlYXJFcnJvcnMiLCJvbklucHV0Q2hhbmdlIiwic2hvd1JlY2VudCIsImF1dG9jb21wbGV0ZSIsInNvdXJjZSIsIm1pbkxlbmd0aCIsImJsdXJSZWNlbnQiLCJpbml0QXV0b2NvbXBsZXRlIiwic2lnbl91cCIsImxvZ2luX3RhYiIsInNpZ25fdXBfdGFiIiwicGFzc3dvcmRfY29uZmlybSIsImVycm9yX25hbWUiLCJlcnJvcl9wYXNzIiwiZXJyb3JfbmFtZV90YWtlbiIsIiRsb2dpbiIsIiRzaWdudXAiLCJuYW1lTmFtZSIsIm5hbWVNc2ciLCJwYXNzTXNnIiwia2V5SGFuZGxlciIsImNoYXIiLCJpc1NwZWNpYWwiLCJFTlRFUiIsIlRBQiIsIkJBQ0tTUEFDRSIsIiRuYW1lIiwiJHBhc3MxIiwiJHBhc3MyIiwicGFzczEiLCJwYXNzMiIsInBhc3NfbWlzbWF0Y2giLCJBY2NvdW50VmlldyIsInJlbmRlckdyb3VwcyIsImNsaWNrIC5sZWF2ZSIsImNsaWNrIC5qb2luX2NhbmNlbCIsImNsaWNrIC5qb2luIiwiY2xpY2sgLmpvaW5fZ3JvdXAiLCJjbGljayAudXBkYXRlIiwiY2xpY2sgLnNlbmRfZGVidWciLCJjbGljayAuY2hhbmdlX3Bhc3N3b3JkIiwiY2xpY2sgLmNvbmZpcm1fcGFzc3dvcmQiLCJ0b2dnbGVQYXNzd29yZCIsIiRtZW51Iiwic2F2ZU5ld1Bhc3N3b3JkIiwic2VuZERlYnVnIiwic2F2ZVJlcG9ydCIsIm9sZFJldiIsImpvaW5Ub2dnbGUiLCJncm91cExpIiwiZ3JvdXBTZWN0aW9uIiwidXNlckVkaXRzIiwiZ2V0RWRpdGFibGVSb3ciLCJHcm91cHNWaWV3IiwiY2xpY2sgLmFjY291bnQiLCJjbGljayAuZ290byIsImNsaWNrIC5uZXdQcm9qZWN0IiwiY2xpY2sgLnZpZXdQcm9qZWN0IiwiY29udGV4dG1lbnUgLnZpZXdQcm9qZWN0IiwicHJvamVjdHMiLCJnb3RvQWNjb3VudCIsImdvdG9Hcm91cCIsInZpZXdQcm9qZWN0Iiwic2hvd1Rvb2x0aXAiLCJsZWF2ZVRvb2x0aXAiLCJ0b29sdGlwIiwidG9vbHRpcElkIiwiZGlzcGxheSIsIm5ld1Byb2plY3QiLCJwcm9qZWN0TmFtZSIsImRpcnMiLCJkYXRLZXkiLCJyZWZyZXNoVXNlcnMiLCJjbGljayAuYWRtaW4iLCJjbGljayAucmVhZGVyIiwiY2xpY2sgI2FkZC1hZG1pbiIsImNsaWNrICNyZW1vdmUtYWRtaW4iLCJjbGljayAjYWRkLW1lbWJlciIsImNsaWNrICNyZW1vdmUtbWVtYmVyIiwic2VsZWN0QWRtaW4iLCJzZWxlY3RSZWFkZXIiLCJyZW5kZXJVc2VycyIsImFkbWluSHRtbCIsIm1lbWJlckh0bWwiLCJBc3Nlc3NtZW50UHJpbnRWaWV3Iiwic3VidGVzdFZpZXciLCJTdWJ0ZXN0UHJpbnRWaWV3IiwiUXVlc3Rpb25QcmludFZpZXciLCJHcmlkUHJpbnRWaWV3IiwicmVuZGVyQ29udGVudCIsInJlbmRlclN0aW11bGkiLCJyZW5kZXJCYWNrdXAiLCJpdGVtVGV4dCIsImN1cnJlbnRTaXplIiwiaW5jcmVtZW50QW1vdW50Iiwib3ZlcmZsb3ciLCJzY3JvbGxIZWlnaHQiLCJzY3JvbGxXaWR0aCIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImZpZWxkIiwiQ29uc2VudFByaW50VmlldyIsIm1hcmtpbmdBcmVhIiwic3BhbkNsYXNzIiwiRGF0ZXRpbWVQcmludFZpZXciLCJsb2NhdGlvbkxldmVsIiwiSWRQcmludFZpZXciLCJMb2NhdGlvblByaW50VmlldyIsIlN1cnZleVByaW50VmlldyIsImluY3JlYXNlRm9udFVudGlsT3ZlcmZsb3ciLCJvdXRlckRpdiIsImlubmVyRGl2IiwiY3VycmVudFBlcmNlbnRhZ2UiLCJPYnNlcnZhdGlvblByaW50VmlldyIsIkNvbmZpZyIsImdldERlZmF1bHQiLCJMb2ciLCJMb2dWaWV3IiwiTG9ncyIsImxvZ0V2ZW50IiwiY2FsY05hbWUiLCJkYXRlIiwiY2hhbmdlICN1c2VyX3NlbGVjdG9yIiwibG9ncyIsImxvZ3NCeVVzZXIiLCJzZWxlY3RlZFVzZXIiLCJldiIsImh0bWxUYWJsZSIsIlRlbXBsYXRlIiwiU2V0dGluZ3MiLCJpcFJhbmdlIiwiZGVzaWduRG9jIiwiZ3JvdXBERG9jIiwiZ3JvdXBIb3N0IiwicG9ydCIsInByZWZpeCIsInN1Ym5ldEJhc2UiLCJ0cnVuayIsInRydW5rREIiLCJkYk5hbWUiLCJzdWJuZXQiLCJzYXRlbGxpdGUiLCJzcGEiLCJncm91cENvdWNoIiwiYnVsa0RvY3NVUkwiLCJzcGxpdERCIiwidXJsRERvYyIsInVybExpc3QiLCJ1cmxTaG93IiwiU2V0dGluZ3NWaWV3Iiwic2F2ZUVycm9yIiwid2FybmluZyIsImNvbnRleHRIZWxwIiwibGFuZ3VhZ2VIZWxwIiwiZ3JvdXBIYW5kbGVIZWxwIiwiZ3JvdXBOYW1lSGVscCIsImdyb3VwSG9zdEhlbHAiLCJ1cGxvYWRQYXNzd29yZEhlbHAiLCJsb2dFdmVudHNIZWxwIiwidXBsb2FkUGFzc3dvcmQiLCJsb2dFdmVudHMiLCJWaWV3TWFuYWdlciIsImJ1dHRvbnNldCIsIk5hdmlnYXRpb25WaWV3IiwiaGFuZGxlTWVudSIsInVzZXJNZW51T3V0IiwidXNlck1lbnVJbiIsImNsaWNrICNsb2dvdXQiLCJjbGljayAjbmF2aWdhdGlvbi1sb2dvIiwiY2xpY2sgI3VzZXJuYW1lIiwicmVmcmVzaERyb3BEb3duUG9zaXRpb24iLCJ1c2VyUG9zaXN0aW9uIiwibG9nb0NsaWNrIiwiaW5jb21wbGV0ZV9tYWluIiwiaW5jb21wbGV0ZV9sb2dvdXQiLCJjb25maXJtX2xvZ291dCIsIndob0FtSSIsImFjY291bnRfYnV0dG9uIiwic2V0dGluZ3NfYnV0dG9uIiwic3R1ZGVudF9pZCIsImFjY291bnQiLCJsb2dvIiwiaG92ZXIiLCJhamF4U3RhcnQiLCJhamF4U3RvcCIsIlJvdXRlciIsInJvdXRlcyIsIndvcmtmbG93L2VkaXQvOndvcmtmbG93SWQiLCJ3b3JrZmxvdy9ydW4vOndvcmtmbG93SWQiLCJ3b3JrZmxvdy9yZXN1bWUvOndvcmtmbG93SWQvOnRyaXBJZCIsImZlZWRiYWNrL2VkaXQvOndvcmtmbG93SWQiLCJmZWVkYmFjay86d29ya2Zsb3dJZCIsInRyYW5zZmVyIiwiIiwiY2xhc3MiLCJjbGFzcy9lZGl0LzppZCIsImNsYXNzL3N0dWRlbnQvOnN0dWRlbnRJZCIsImNsYXNzL3N0dWRlbnQvcmVwb3J0LzpzdHVkZW50SWQiLCJjbGFzcy9zdWJ0ZXN0LzppZCIsImNsYXNzL3F1ZXN0aW9uLzppZCIsImNsYXNzLzppZC86cGFydCIsImNsYXNzLzppZCIsImNsYXNzL3J1bi86c3R1ZGVudElkLzpzdWJ0ZXN0SWQiLCJjbGFzcy9yZXN1bHQvc3R1ZGVudC9zdWJ0ZXN0LzpzdHVkZW50SWQvOnN1YnRlc3RJZCIsImN1cnJpY3VsdW0vOmlkIiwiY3VycmljdWx1bUltcG9ydCIsInJlcG9ydC9rbGFzc0dyb3VwaW5nLzprbGFzc0lkLzpwYXJ0IiwicmVwb3J0L21hc3RlcnlDaGVjay86c3R1ZGVudElkIiwicmVwb3J0L3Byb2dyZXNzLzpzdHVkZW50SWQvOmtsYXNzSWQiLCJydW4vOmlkIiwicHJpbnQvOmlkLzpmb3JtYXQiLCJkYXRhRW50cnkvOmlkIiwicmVzdW1lLzphc3Nlc3NtZW50SWQvOnJlc3VsdElkIiwicmVzdGFydC86aWQiLCJlZGl0LzppZCIsInJlc3VsdHMvOmlkIiwic3VidGVzdC86aWQiLCJxdWVzdGlvbi86aWQiLCJkYXNoYm9hcmQiLCJkYXNoYm9hcmQvKm9wdGlvbnMiLCJzeW5jLzppZCIsImZlZWRiYWNrRWRpdCIsInNob3dGZWVkYmFja0VkaXRvciIsImZlZWRiYWNrSWQiLCJ3b3JrZmxvd0VkaXQiLCJ3b3JrZmxvd1J1biIsIndvcmtmbG93UmVzdW1lIiwiYWxsRGJzIiwiZGF0YWJhc2VzIiwiZGF0YWJhc2UiLCJyZXBvcnRWaWV3T3B0aW9ucyIsImFsbFF1ZXN0aW9ucyIsImN1cnJpY3VsdW1FZGl0IiwiYWxsUGFydHMiLCJhbGxLbGFzc2VzIiwia2xhc3NDb2xsZWN0aW9uIiwiYWxsQ3VycmljdWxhIiwiY3VycmljdWxhQ29sbGVjdGlvbiIsImtsYXNzRWRpdCIsImtsYXNzU3R1ZGVudHMiLCJrbGFzc1BhcnRseSIsInN0dWRlbnRTdWJ0ZXN0IiwicnVuU3VidGVzdCIsIm9uU3R1ZGVudFJlYWR5Iiwib25TdWNjZXNzIiwic3R1ZGVudEVkaXQiLCJxdWVzdGlvbnNCeVN1YnRlc3RJZCIsInRhYmxldFVzZXJzIiwiZWRpdElkIiwic3VwZXJGZXRjaCIsImFmdGVyRmV0Y2giLCJrbGFzc0dyb3VwaW5nIiwiZmlsdGVyZWRSZXN1bHRzIiwicmVzdWx0c0Zyb21DdXJyZW50U3R1ZGVudHMiLCJzdHVkZW50SWRzIiwibWFzdGVyeUNoZWNrIiwic3VidGVzdENvbGxlY3Rpb24iLCJzdWJ0ZXN0SWRMaXN0IiwicHJvZ3Jlc3NSZXBvcnQiLCJlZGl0U3VidGVzdCIsInN1YnRlc3RzUHJpbWVUaGVQdW1wIiwiZWRpdEtsYXNzU3VidGVzdCIsImVkaXRRdWVzdGlvbiIsImVkaXRLbGFzc1F1ZXN0aW9uIiwiZ2V0VmFycyIsIndhaXQiLCJib290U2VxdWVuY2UiLCJiYXNpY0NvbmZpZyIsInVybFBhcnNlciIsInVybFByZWZpeCIsInBhdGhuYW1lIiwiY291Y2hfY29ubmVjdG9yIiwiYmFzZV91cmwiLCJwcm90b2NvbCIsImRkb2NfbmFtZSIsImdsb2JhbF9jaGFuZ2VzIiwidGVtcGxhdGVTZXR0aW5ncyIsImludGVycG9sYXRlIiwiZmV0Y2hDb25maWd1cmF0aW9uIiwiZmV0Y2hTZXR0aW5ncyIsImRlZmF1bHRTZXR0aW5ncyIsImd1YXJhbnRlZUluc3RhbmNlSWQiLCJmZXRjaFRlbXBsYXRlcyIsImRvY3VtZW50UmVhZHkiLCJsb2FkSTE4biIsImluaXQiLCJmYWxsYmFja0xuZyIsImxuZyIsInJlc1N0b3JlIiwibG9hZFNpbmdsZXRvbnMiLCJyZWxvYWRVc2VyU2Vzc2lvbiIsInN0YXJ0QmFja2JvbmUiLCJnZXRMb2NhdGlvbkxpc3QiLCJib290Il0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxVQUFBQSxZQUNFQzs7O0FDREYsR0FBQUMsY0FBQUMsaUJBQUFDLGlCQUFBQyxpQkFBQUMsUUFBQU4sVUFBQU8sY0FBQUMsTUFBQUMsRUFBQUMsR0FBQUMsSUFBQUMsS0FBQSxTQUFBQyxFQUFBQyxHQUFBLE1BQUEsWUFBQSxNQUFBRCxHQUFBRSxNQUFBRCxFQUFBRSxhQ0VFQyxPQUFTLFNBQVNDLEVBQU9DLEdBQStGLFFBQVNDLEtBQVNDLEtBQUtDLFlBQWNKLEVBQTFILElBQUssR0FBSUssS0FBT0osR0FBY0ssUUFBUUMsS0FBS04sRUFBUUksS0FBTUwsRUFBTUssR0FBT0osRUFBT0ksR0FBMkosT0FBckdILEdBQUtNLFVBQVlQLEVBQU9PLFVBQVdSLEVBQU1RLFVBQVksR0FBSU4sR0FBUUYsRUFBTVMsVUFBWVIsRUFBT08sVUFBa0JSLEdBQ2xSTSxXQUFhSSxlQUNiQyxXQUFhQSxTQUFXLFNBQVNDLEdBQVEsSUFBSyxHQUFJckIsR0FBSSxFQUFHc0IsRUFBSVYsS0FBS1csT0FBUXZCLEVBQUlzQixFQUFHdEIsSUFBTyxHQUFJQSxJQUFLWSxPQUFRQSxLQUFLWixLQUFPcUIsRUFBTSxNQUFPckIsRUFBSyxXQUN2SXdCLFNBQVdBLEtETFBDLFVBQVNDLFNBQUEsU0FBQUMsR0NVYixRQUFTRCxLQUlQLE1BSEFkLE1BQUtnQixRQUFVekIsS0FBS1MsS0FBS2dCLFFBQVNoQixNQUNsQ0EsS0FBS2lCLFlBQWMxQixLQUFLUyxLQUFLaUIsWUFBYWpCLE1B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UyxPQUFTLE1BQVEsT0FBUyxPQUFTLE9BQVMsTUFBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE1BQVMsT0FBUSxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFRLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVEsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUSxPQUFTLE1BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLEtBQVMsS0FBUyxPQUFRLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVEsTUFBUyxNQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUSxPQUFTLE9BQVMsTUFBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFRLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVEsTUFBUyxNQUFTLE9BQVMsT0FBUyxNQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUSxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxNQUFTLE9BQVMsT0FBUyxPQUFRLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVEsT0FBUyxPQUFTLE9BQVMsTUFBUyxPQUFTLE9BQVMsS0FBUyxPQUFTLE9BQVMsTUFBUSxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxNQUFTLE9BQVMsT0FBUyxPQUFRLE9BQVMsT0FBUyxLQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsS0FBUyxPQUFTLE9BQVEsTUFBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxNQUFTLE1BQVMsT0FBUSxPQUFTLE9BQVMsT0FBUyxNQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFRLE1BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVEsT0FBUyxPQUFTLE9BQVMsTUFBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsTUFBUSxPQUFTLE9BQVMsTUFBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFRLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsTUFBUyxPQUFTLE9BQVEsT0FBUyxPQUFTLE1BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUSxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFRLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLEtBQVEsT0FBUyxPQUFTLE1BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUSxPQUFTLE9BQVMsT0FBUyxPQUFTLE1BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxNQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxNQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVEsT0FBUyxPQUFTLE9BQVMsTUFBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUSxPQUFTLE9BQVMsT0FBUyxPQUFTLE1BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFRLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVEsT0FBUyxNQUFTLE1BQVMsTUFBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUSxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFRLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVEsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FBUyxPQUFTLE9BQVMsUUNTemtIRCxFQUFrQjUrRCxVRFJsQjgrRCxZQUFlLGFBQWMsT0FBUSxPQUFRLFNDVTdDRixFQUFrQjUrRCxVRFRsQjJOLFFBQWUsYUFBYyxPQUFRLE9BQVEsU0NXN0NpeEQsRUFBa0I1K0QsVURUbEJjLFFBQ0V5cUIsY0FBcUMsU0FDckN3ekMsbUNBQXFDLFdBQ3JDQyxzQkFBd0IsZ0JDWTFCSixFQUFrQjUrRCxVRFZsQnE3RCxhQUFjLFNBQUMxNEQsR0FDYixHQUFBczhELEdBQUFuOEQsRUFBQW04QyxDQUlBLE9BSkFuOEMsR0FBVVUsRUFBRWIsRUFBTWMsUUFDbEJ3N0MsRUFBWXo3QyxFQUFFYixFQUFNYyxRQUFRRSxLQUFLLGtCQUNqQ3M3RCxFQUFrQnQvRCxLQUFDc0YsSUFBSUMsS0FBSyxZQUFZKzVDLEdBRXJDZ2dCLEVBQWdCbDJCLEdBQUcsYUFDcEJrMkIsRUFBZ0IzaUQsU0FBUyxnQkFDekJ4WixFQUFRZ0IsS0FBSWlWLE1BQVUsWUFFdEJwWixLQUFDc0YsSUFBSUMsS0FBSyxpQkFBaUJwQixLQUFJaVYsTUFBVSxVQUN6Q2pXLEVBQVFnQixLQUFJaVYsTUFBVSxVQUN0QnBaLEtBQUNzRixJQUFJQyxLQUFLLHFCQUFxQm9YLFNBQVMsZ0JBQ3hDM2MsS0FBQ3NGLElBQUlDLEtBQUssWUFBWSs1QyxHQUFhNWlDLFlBQVksa0JDb0JuRHVpRCxFQUFrQjUrRCxVRGxCbEJrWCxTQUFVLFdBQ1IsR0FBQW1LLEVDeUJBLE9EekJBQSxHQUFZMWhCLEtBQUNzRixJQUFJQyxLQUFLLHFDQUFxQ3ZCLEtBQUssa0JBQ2hFaEUsS0FBQzJtQixTQUFTakYsVUFBWUEsRUFDdEIxaEIsS0FBQzJtQixTQUFTMWUsUUFBWWpJLEtBQUNpSSxRQUFRMlAsT0FBTThKLFVBQWNBLElBRW5EMWhCLEtBQUN1L0QsY0FDRHYvRCxLQUFDa0csVUN1QkgrNEQsRUFBa0I1K0QsVURyQmxCZ3NCLE9BQVEsV0NzQk4sTUR0QlM1aUIsU0FBUUMsUUN5Qm5CdTFELEVBQWtCNStELFVEdkJsQmlkLFdBQVksU0FBRTliLEdBRVosR0FBQXBDLEdBQUFpUSxFQUFBMUgsRUFBQXpDLEVBQUFvYyxDQU1BLEtBTkF0aEIsS0FBQ2lJLFFBQVV6RyxFQUFReUcsUUFDbkJqSSxLQUFDd2UsU0FBV2hkLEVBQVFnZCxTQUNwQnhlLEtBQUNxMUQsU0FBVzd6RCxFQUFRNnpELFNBRXBCcjFELEtBQUMybUIsWUFFRHpoQixFQUFBbEYsS0FBQXdlLFNBQUF2YSxPQUFBN0UsRUFBQWlRLEVBQUEsRUFBQTFILEVBQUF6QyxFQUFBdkUsT0FBQTBPLEVBQUExSCxJQ3VCRTJaLEVBQVVwYyxFQUFJOUYsR0R0QmRZLEtBQUMybUIsU0FBU2pGLFVBQVkxaEIsS0FBQ3dlLFNBQVN2YSxPQUFPN0UsR0FBRzRDLEdBQ3dDLEtBQXhFaEMsS0FBQzJtQixTQUFTMWUsUUFBVWpJLEtBQUNpSSxRQUFRMlAsT0FBTThKLFVBQWNKLEVBQVF0ZixNQUFLckIsUUFGMUV2QixJQUFBaVEsR0MrQkEsTUQzQkFyUCxNQUFDdS9ELGVDOEJITixFQUFrQjUrRCxVRDVCbEJrL0QsWUFBYSxXQUVYLEdBQUFDLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUF4Z0UsRUFBQW9KLEVBQUFxM0QsRUFBQXh3RCxFQUFBM0gsRUFBQWhILEVBQUFpSCxFQUFBd0YsRUFBQTZULEVBQUFzOEMsRUFBQWh1RCxFQUFBd3dELEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFoN0QsRUFBQUMsRUFBQWcrQixFQUFBQyxFQUFBK1QsRUFBQTkwQyxFQUFBODlELENBZUEsS0FmQW5nRSxLQUFDNjlELFNBQ0QyQixFQUFXLEVBRVh4L0QsS0FBQ3NoQixRQUFVdGhCLEtBQUN3ZSxTQUFTOWIsSUFBSTFDLEtBQUMybUIsU0FBU2pGLFdBQ25DMWhCLEtBQUNvZ0UsU0FDQ3grRCxLQUFnQjVCLEtBQUNzaEIsUUFBUTVlLElBQUksUUFDN0IyOUQsVUFBZ0JyZ0UsS0FBQ3ExRCxTQUFTMTBELE9BQzFCbWUsWUFBZ0I5ZSxLQUFDMm1CLFNBQVMxZSxRQUFRdEgsT0FDbEM2K0QsU0FBZ0IsRUFDaEJjLFVBQWdCLEVBQ2hCQyxPQUFnQixFQUNoQmx4QixVQUFnQixFQUNoQm14QixXQUFBLE9BQUF0N0QsRUFBQWxGLEtBQUEybUIsU0FBQTFlLFFBQUEsSUFBQS9DLEVBQXNDeEMsSUFBSSxTQUExQixPQUNoQis5RCxjQUVGdDdELEVBQUFuRixLQUFBMm1CLFNBQUExZSxRQUFBb0gsRUFBQSxFQUFBMUgsRUFBQXhDLEVBQUF4RSxPQUFBME8sRUFBQTFILEVBQUEwSCxJQzZCRWhOLEVBQVM4QyxFQUFLa0ssR0Q1QmQ2d0QsR0FDRTVnQixVQUFlajlDLEVBQU9LLElBQUksYUFDMUJxckMsTUFBZTFyQyxFQUFPNjdELGNBQ3RCdDhELEtBQWU1QixLQUFDcTFELFNBQVMzeUQsSUFBS0wsRUFBT0ssSUFBSSxjQUFlQSxJQUFJLFFBQzVEZytELFNBQWUsRUFDZkMsU0FBZXQrRCxFQUFPSyxJQUFJLFdBQzFCMnNDLFVBQWVodEMsRUFBT0ssSUFBSSxTQUFXTCxFQUFPSyxJQUFJLFdBQ2hEbXpCLE1BQWV4ekIsRUFBT0ssSUFBSSxTQUMxQmsrRCxVQUFlLEVBQ2ZYLFdBQWUsRUFDZmp5RCxPQUFlLElBRWpCa3lELEVBQU9RLFNBQVdwOEQsS0FBS3NJLE1BQU1zekQsRUFBT1MsU0FBV1QsRUFBTzd3QixVQUFZLEtBRWxFcnZDLEtBQUNvZ0UsUUFBUVosVUFBWVUsRUFBT1EsU0FDNUIxZ0UsS0FBQ29nRSxRQUFRRSxXQUFhSixFQUFPUyxTQUM3QjNnRSxLQUFDb2dFLFFBQVEvd0IsV0FBYTZ3QixFQUFPN3dCLFVBRTdCcnZDLEtBQUM2OUQsTUFBTWgyRCxLQUFLcTRELEVBTWQsS0FKQWxnRSxLQUFDb2dFLFFBQVFaLFNBQVlsN0QsS0FBSzRNLFNBQVVsUixLQUFDb2dFLFFBQVFaLFNBQVd4L0QsS0FBQzY5RCxNQUFNbDlELE9BQVEsR0FDdkVYLEtBQUNvZ0UsUUFBUUUsVUFBWWg4RCxLQUFLNE0sU0FBVWxSLEtBQUNvZ0UsUUFBUUUsVUFBWXRnRSxLQUFDNjlELE1BQU1sOUQsT0FBUSxHQUN4RVgsS0FBQ29nRSxRQUFRL3dCLFVBQVkvcUMsS0FBSzRNLFNBQVVsUixLQUFDb2dFLFFBQVEvd0IsVUFBWXJ2QyxLQUFDNjlELE1BQU1sOUQsT0FBUSxHQUV4RXdpQyxFQUFBbmpDLEtBQUE2OUQsTUFBQW4yRCxFQUFBLEVBQUF5RixFQUFBZzJCLEVBQUF4aUMsT0FBQStHLEVBQUF5RixFQUFBekYsSUM0QkV3NEQsRUFBUy84QixFQUFLejdCLEdEM0JkMUgsS0FBQ29nRSxRQUFRRyxRQUFVajhELEtBQUs4TSxJQUFJOHVELEVBQU9RLFNBQVcxZ0UsS0FBQ29nRSxRQUFRWixTQUFVLEVBSW5FLEtBRkF4L0QsS0FBQ29nRSxRQUFRRyxPQUFTajhELEtBQUs0TSxTQUFTNU0sS0FBSzhNLElBQUtwUixLQUFDb2dFLFFBQVFHLE9BQVN2Z0UsS0FBQzY5RCxNQUFNbDlELE9BQVEsSUFBTSxHQUVqRnlpQyxFQUFBcGpDLEtBQUE2OUQsTUFBQXorRCxFQUFBc0IsRUFBQSxFQUFBc2dCLEVBQUFvaUIsRUFBQXppQyxPQUFBRCxFQUFBc2dCLEVBQUE1aEIsSUFBQXNCLEVDNkJFdy9ELEVBQVM5OEIsRUFBS2hrQyxHRDNCZHVnRSxHQUFPTyxFQUFPUSxTQUFXMWdFLEtBQUNvZ0UsUUFBUVosVUFBWXgvRCxLQUFDb2dFLFFBQVFHLE9BRXZEWCxFQUFXdDdELEtBQUtzSSxNQUFZLElBQU4reUQsR0FFdEJNLEVBQWdCTCxFQUFXLEtBQU9BLE9BQzlCLEVBQ01BLEVBQVcsRUFDakIsSUFBTXQ3RCxLQUFLc0ksTUFBTSxHQUFLLElBQU01TSxLQUFDay9ELFlBQVlVLElBQWMsSUFDakRBLEVBQVcsRUFDakIsSUFBTXQ3RCxLQUFLc0ksTUFBTSxHQUFLLElBQU01TSxLQUFDay9ELFlBQVlVLE9BQW1CLElBRTVELEdBRUpJLEVBQUtFLEVBQU9RLFNBRVpsNEQsRUFFSUEsRUFEQ3czRCxHQUFNLEdBQ0MsRUFDRkEsR0FBTSxJQUFNQSxHQUFNLEdBQ2hCLEVBQ0ZBLEdBQU0sSUFBTUEsR0FBTSxHQUNoQixFQUVBLEVBV1poZ0UsS0FBQzY5RCxNQUFNeitELEdBQUd3aEUsVUFBYWhCLEVBQVcsSUFDbEM1L0QsS0FBQzY5RCxNQUFNeitELEdBQUc2Z0UsV0FBYUEsRUFDdkJqZ0UsS0FBQzY5RCxNQUFNeitELEdBQUdvSixNQUFhQSxFQUN2QnhJLEtBQUM2OUQsTUFBTXorRCxHQUFHNE8sT0FBYWhPLEtBQUNnTyxPQUFPeEYsR0FFaUIsSUFBVEEsSUFBZ0J4SSxLQUFDb2dFLFFBQVFLLFVBQVVqZ0UsUUFBUTAvRCxFQUFPdCtELE9BQXpGNUIsS0FBQ29nRSxRQUFRSyxVQUFVNTRELEtBQUtxNEQsRUFBT3QrRCxLQVFqQyxLQUxBNUIsS0FBQzY5RCxNQUFNOTFELEtBQUssU0FBQ0ssRUFBR0MsR0NLZCxNRExvQkEsR0FBRXE0RCxTQUFXdDRELEVBQUVzNEQsV0FJckNaLEVBQW9CLEVBQ3BCM29CLEVBQUFuM0MsS0FBQTY5RCxNQUFBdnVELEVBQUEsRUFBQWd1RCxFQUFBbm1CLEVBQUF4MkMsT0FBQTJPLEVBQUFndUQsRUFBQWh1RCxJQ0tFNHdELEVBQVMvb0IsRUFBSzduQyxHRExRNHdELEVBQU9RLFNBQVcsSUFBekNaLEdDZ0JELE9EZkFDLEdBQWFELEVBQWtCOS9ELEtBQUM2OUQsTUFBTWw5RCxPQUFVLElBQ2hEay9ELEVBQWVFLEVBQVksR0FFM0JJLEVBQWMsbUNBQ2RuZ0UsS0FBQzZnRSxnQkFBa0IsTUFBTXY4RCxLQUFLc0ksTUFBTW16RCxHQUFXLHVFQUUvQ0wsRUFBYSxxU0FDYkQsRUFBZ0Isc2FBRWhCei9ELEtBQUM4Z0UsaUJBQXNCakIsRUFBa0JILEVBQWdCRCxHQ1MzRFIsRUFBa0I1K0QsVURQbEI2RixPQUFRLFdBTU4sR0FBQTY2RCxHQUFBcGhELEVBQUFxaEQsRUFBQUMsRUFBQXo4RCxFQUFBcEYsRUFBQThoRSxFQUFBN3hELEVBQUEzSCxFQUFBaEgsRUFBQWlILEVBQUF3RixFQUFBNlQsRUFBQW1nRCxFQUFBakIsRUFBQWg3RCxFQUFBQyxFQUFBZytCLEVBQUE3aEIsRUFBQTgvQyxFQUFBQyxDQWlDQSxNQWpDS3JoRSxLQUFDd2UsU0FBU3JLLE1BQU0sY0FBYzNULFFBQVEsY0FHekM2Z0UsRUFBZSxhQUVYcmhFLEtBQUM2Z0UsZ0JBQWdCLElBQ2pCN2dFLEtBQUM4Z0UsaUJBQWlCLGNBSXRCTyxHQUFnQiw0c0JBY2xCSixFQUFZLE9BQ0oxM0QsRUFBRSwyQkFBMkIsbUNBQ1B2SixLQUFDd2UsU0FBUzliLElBQUkxQyxLQUFDMm1CLFNBQVNqRixXQUFXaGYsSUFBSSxRQUFRLG1CQUFrQjFDLEtBQUN3ZSxTQUFTdmEsT0FBTyxHQUFHdkIsSUFBSSxRQUFRLDhIQU0vSHkrRCxFQUFXLGtEQUNYajhELEVBQUFsRixLQUFBd2UsU0FBQXZhLE9BQUFvTCxFQUFBLEVBQUExSCxFQUFBekMsRUFBQXZFLE9BQUEwTyxFQUFBMUgsRUFBQTBILElDdEJFaVMsRUFBVXBjLEVBQUltSyxHRHVCZDB4RCxFQUFzQnovQyxFQUFRdGYsS0FBTWhDLEtBQUMybUIsU0FBU2pGLFVBQWUsb0JBQXlCLEdBQ3RGeS9DLEdBQVksZUFDSTcvQyxFQUFRdGYsR0FBRyxLQUFJc2YsRUFBUTVlLElBQUksUUFBUSxxRUFDVTRlLEVBQVF0ZixHQUFHLHFCQUFvQnNmLEVBQVF0ZixHQUFHLEtBQUkrK0QsRUFBaUIsR0FnQzlILEtBOUJBSSxHQUFZLFNBS1pDLEVBQWMsbUZBRTZCcGhFLEtBQUNvZ0UsUUFBUXgrRCxLQUFLLHFEQUNkNUIsS0FBQ29nRSxRQUFRQyxVQUFVLHFEQUNuQnJnRSxLQUFDb2dFLFFBQVF0aEQsWUFBWSxxREFDckI5ZSxLQUFDb2dFLFFBQVFaLFNBQVMsc0RBQ2xCeC9ELEtBQUNvZ0UsUUFBUUUsVUFBVSxNQUFLdGdFLEtBQUNvZ0UsUUFBUS93QixVQUFVLHFEQUMzQ3J2QyxLQUFDb2dFLFFBQVFLLFVBQVVoa0QsS0FBSyxNQUFNLHNCQU16RXVrRCxFQUFjLGdIQVVkRSxFQUFrQixHQUVsQi83RCxFQUFBbkYsS0FBQTY5RCxNQUFBbjJELEVBQUEsRUFBQXlGLEVBQUFoSSxFQUFBeEUsT0FBQStHLEVBQUF5RixFQUFBekYsSUFBQSxDQWNFLElDOURBdzRELEVBQVMvNkQsRUFBS3VDLEdEaURkczVELEdBQWUsY0FDQWhoRSxLQUFDbS9ELFdBQVdlLEVBQU8xM0QsT0FBTyxvREFDVzAzRCxFQUFPNWdCLFVBQVUsS0FBSTRnQixFQUFPdCtELEtBQUssYUFDM0VzK0QsRUFBT1EsU0FBUyxhQUNoQlIsRUFBT2x5RCxPQUFPLGNBSXhCa3pELEdBQW1CLHVEQUNxQ2hCLEVBQU81Z0IsVUFBVSxrREFJekVuYyxFQUFBKzhCLEVBQUFueUIsTUFBQTN1QyxFQUFBc0IsRUFBQSxFQUFBc2dCLEVBQUFtaUIsRUFBQXhpQyxPQUFBRCxFQUFBc2dCLEVBQUE1aEIsSUFBQXNCLEVDekRFaWYsRUFBUXdqQixFQUFLL2pDLEdEMERiOGhFLEdBQW1CLFdBQVd2aEQsRUFBTWd5QixVQUFVLFlBQVdwb0MsRUFBRW9XLEVBQU0reEIsWUFBWSxZQUMvRXd2QixJQUFtQixtQkMvQ3JCLE1Ea0RBRixJQUFlLFdBS2J4OEQsRUFENkIsSUFBNUJ4RSxLQUFDMm1CLFNBQVMxZSxRQUFRdEgsT0FFZndnRSxFQUFTLElBQ1RDLEVBQVksSUFDWkosRUFBWSxJQUNaRSxFQUFnQixLQUNoQkcsR0FBZ0IsSUFBRyxpREFLbkJGLEVBQVMsSUFDVEYsRUFBVSxpREFJaEJqaEUsS0FBQ3NGLElBQUlkLEtBQUtBLEdBQ1Z4RSxLQUFDNmMsUUFBUSxhQ3BFWG9pRCxFQUFrQjUrRCxVRHVFbEJpaEUsWUFBYSxTQUFDckIsR0N0RVosTURzRTJCMzdELE1BQUtzSSxNQUFRcXpELEVBQWEsSUFBTyxJQ25FdkRoQixHRHBOdUJwK0QsU0FBU3NGOzs7QUVBekMsR0FBQW83RCx1QkFBQTNoRSxPQUFBLFNBQUFDLEVBQUFDLEdBQUEsUUFBQUMsS0FBQUMsS0FBQUMsWUFBQUosRUFBQSxJQUFBLEdBQUFLLEtBQUFKLEdBQUFLLFFBQUFDLEtBQUFOLEVBQUFJLEtBQUFMLEVBQUFLLEdBQUFKLEVBQUFJLEdBQUEsT0FBQUgsR0FBQU0sVUFBQVAsRUFBQU8sVUFBQVIsRUFBQVEsVUFBQSxHQUFBTixHQUFBRixFQUFBUyxVQUFBUixFQUFBTyxVQUFBUixHQ0VFTSxXQUFhSSxjREZUZ2hFLHVCQUFBLFNBQUF4Z0UsR0NPSixRQUFTd2dFLEtBQ1AsTUFBT0EsR0FBc0JqaEUsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0E4RWpFLE1BakZBQyxRQUFPMmhFLEVBQXVCeGdFLEdBTTlCd2dFLEVBQXNCbGhFLFVEVHRCaVcsVUFBVyx3QkNXWGlyRCxFQUFzQmxoRSxVRFR0QmMsUUFDRXFnRSx3QkFBMEIsMkJDWTVCRCxFQUFzQmxoRSxVRFZ0Qm9oRSx3QkFBeUIsU0FBQ3orRCxHQ1d4QixNRFZBckUsV0FBVW9XLE9BQU9DLFNBQVMsd0JBQXdCaFYsS0FBQysxRCxNQUFNL3pELEdBQUcsSUFBS2hDLEtBQUNzRixJQUFJQyxLQUFLdkMsRUFBTWMsUUFBUXlCLEtBQUssYUFBYXZCLEtBQUssY0FBYyxJQ2FoSXU5RCxFQUFzQmxoRSxVRFh0QmlkLFdBQVksU0FBQzliLEdDaUJYLE1EaEJBeEIsTUFBQ0YsT0FBWTBCLEVBQVExQixPQUNyQkUsS0FBQysxRCxNQUFZLzFELEtBQUNGLE9BQU8wQixRQUFRdTBELE1BQzdCLzFELEtBQUNzcEIsVUFBWXRwQixLQUFDRixPQUFPMEIsUUFBUThuQixVQUM3QnRwQixLQUFDNjhELFlBQWM3OEQsS0FBQysxRCxNQUFNUixrQkFFdEJ2MUQsS0FBQ3ExRCxTQUFXLEdBQUlGLFVBQ2hCbjFELEtBQUNxMUQsU0FBU2h1RCxPQUNSNnRELFFBQVVsMUQsS0FBQysxRCxNQUFNL3pELEdBQ2pCNkQsUUFBUyxTQUFBQyxHQ1dQLE1EWE8sWUFDUCxHQUFBaVosRUNhRSxPRGJGQSxHQUFjLEdBQUluTSxVQUNsQm1NLEVBQVkxWCxPQUNWeEIsUUFBUyxTQUFDa0IsR0FDUixHQUFBM0gsR0FBQXVJLEVBQUFvc0QsRUFBQXp5QyxFQUFBOUMsQ0FHQSxLQUhBQSxFQUFXelgsRUFBVzZRLE9BQ3BCOHBELFlBQWM1N0QsRUFBQ3dqQixVQUFVdG5CLEtBQzNCOEQsRUFBQzJULFNBQ0RyYSxFQUFBLEVBQUF1SSxFQUFBNlcsRUFBQTdkLE9BQUF2QixFQUFBdUksRUFBQXZJLElDZUlraUIsRUFBVTlDLEVBQVNwZixHRGJyQjIwRCxFQUFPenlDLEVBQVE1ZSxJQUFJLFFBRWMsTUFBQW9ELEVBQUEyVCxNQUFBczZDLEtBQWpDanVELEVBQUMyVCxNQUFNczZDLE9BQ1BqdUQsRUFBQzJULE1BQU1zNkMsR0FBTSxHQUFVenlDLEVBQVF0ZixHQUU1QixNQUFBOEQsRUFBQTJULE1BQUFzNkMsR0FBQSxLQUNEanVELEVBQUMyVCxNQUFNczZDLEdBQU0sTUFBVyxJQUFNenlDLEVBQVE1ZSxJQUFJLFFBRTFDb0QsRUFBQzJULE1BQU1zNkMsR0FBTSxLQUFVenlDLEVBQVE1ZSxJQUFJLFFBQ3JDb0QsRUFBQzJULE1BQU1zNkMsR0FBTSxXQUFnQnp5QyxFQUFRNWUsSUFBSSxhQ2tCekMsT0RoQkZvRCxHQUFDdWdDLE9BQVEsRUFDVHZnQyxFQUFDSSxjQXJCRWxHLFNDNENidWhFLEVBQXNCbGhFLFVEckJ0QjZGLE9BQVEsV0FFTixHQUFBeTdELEdBQUFuOUQsRUFBQXBGLEVBQUF1SSxFQUFBb3NELEVBQUE3dUQsRUFBQW9jLENBQUEsSUFBR3RoQixLQUFDcW1DLE1BQUosQ0FHRSxHQUFPLE1BQUFybUMsS0FBQXExRCxVQUFrQyxJQUFwQnIxRCxLQUFDcTFELFNBQVMxMEQsT0FFN0IsV0FEQVgsTUFBQ3NGLElBQUlkLEtBQUsscUNBT1osS0FKQUEsRUFBTywrR0FJUFUsRUFBQWxGLEtBQUF5WixNQUFBczZDLEVBQUEzMEQsRUFBQSxFQUFBdUksRUFBQXpDLEVBQUF2RSxPQUFBdkIsRUFBQXVJLEVBQUFvc0QsSUFBQTMwRCxFQ2tCRWtpQixFQUFVcGMsRUFBSTZ1RCxHRGpCWCxPQUFBLE1BQUF6eUMsRUFBQUEsRUFBQXRmLEdBQUEsVUFDRDIvRCxFQUFvQjNoRSxLQUFDNjhELGNBQWU5SSxFQUFVLEtBQVUsR0FDeER2dkQsR0FBUSxzQkFBc0J1dkQsRUFBSyxxQkFBb0J6eUMsRUFBUXRmLEdBQUcsS0FBSTIvRCxFQUFlLElBQUc1TixFQUFLLElBQUd6eUMsRUFBUTFmLEtBQUssWUNzQmpILE9EckJBNEMsSUFBUSxZQUVSeEUsS0FBQ3NGLElBQUlkLEtBQUtBLEdDcUJWLE1EbkJBeEUsTUFBQ3NGLElBQUlkLEtBQUssbURDdUJQKzhELEdEdEYyQjFnRSxTQUFTc0Y7OztBRUE3QyxHQUFBeTdELGtCQUFBaGlFLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlRxaEUsa0JBQUEsU0FBQTdnRSxHQ09KLFFBQVM2Z0UsS0FDUCxNQUFPQSxHQUFpQnRoRSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQW9ENUQsTUF2REFDLFFBQU9naUUsRUFBa0I3Z0UsR0FNekI2Z0UsRUFBaUJ2aEUsVURUakJpVyxVQUFZLG1CQ1dac3JELEVBQWlCdmhFLFVEVGpCYyxRQUNFeXFCLGNBQWdCLFVDWWxCZzJDLEVBQWlCdmhFLFVEVmpCZ3NCLE9BQVEsV0NXTixNRFhTNWlCLFNBQVFDLFFDY25CazRELEVBQWlCdmhFLFVEWmpCaWQsV0FBWSxTQUFDOWIsR0FVWCxHQVJBeEIsS0FBQ3dlLFNBQVdoZCxFQUFRZ2QsU0FDcEJ4ZSxLQUFDaUksUUFBV3pHLEVBQVF5RyxRQUNwQmpJLEtBQUNpMEQsUUFBV3p5RCxFQUFReXlELFFBQ3BCajBELEtBQUMrMUQsTUFBV3YwRCxFQUFRdTBELE1BRXBCLzFELEtBQUM2aEUsY0FBZ0I3aEUsS0FBQ2lJLFFBQVE4QixRQUFRLFFBRWxDL0osS0FBQ2c5RCxTQUFXMTRELEtBQUtDLElBQUk3RSxNQUFNTSxLQUFHQSxLQUFDaUksUUFBUWtNLE1BQU0sVUFDeEIydEQsU0FBUzloRSxLQUFDZzlELFVDVTdCLE1EVkZoOUQsTUFBQ2c5RCxTQUFXLEdDY2Q0RSxFQUFpQnZoRSxVRFpqQjZGLE9BQVEsV0FFTixHQUFBMUIsR0FBQXU5RCxFQUFBM2lFLEVBQUFpUSxFQUFBMUgsRUFBQW9zRCxFQUFBN3VELEVBQUFDLEVBQUE5QyxFQUFBKzRCLENBVUEsSUFWQTUyQixFQUFPLDZDQUVTeEUsS0FBQ2kwRCxRQUFRdnhELElBQUksUUFBUSxRQU1yQ3EvRCxFQUFjLGlLQUVRLElBQW5CL2hFLEtBQUNpSSxRQUFRdEgsT0FNVixNQUxBWCxNQUFDc0YsSUFBSWQsS0FDREEsRUFBSyxJQUNMdTlELE9BRUovaEUsTUFBQzZjLFFBQVEsV0FNWCxLQURBclksR0FBUSxVQUNJdXZELEVBQUEzMEQsRUFBQSxFQUFBOEYsRUFBQWxGLEtBQUFnOUQsU0FBQSxHQUFBOTNELEVBQUE5RixHQUFBOEYsRUFBQTlGLEdBQUE4RixFQUFBNnVELEVBQUEsR0FBQTd1RCxJQUFBOUYsSUFBQUEsRUFFVixHQUFPLE1BQUFZLEtBQUE2aEUsY0FBQTlOLEdBS1AsSUFKQXZ2RCxHQUFRLHNCQUNldXZELEVBQUssa0JBRzVCNXVELEVBQUFuRixLQUFBNmhFLGNBQUE5TixHQUFBMWtELEVBQUEsRUFBQTFILEVBQUF4QyxFQUFBeEUsT0FBQTBPLEVBQUExSCxFQUFBMEgsSUNERWhOLEVBQVM4QyxFQUFLa0ssR0RFZCtyQixFQUFjcDdCLEtBQUN3ZSxTQUFTOWIsSUFBSUwsRUFBT0ssSUFBSSxjQUFjQSxJQUFJLFFBQ3pEOEIsR0FBUSxRQUVGbkMsRUFBT0ssSUFBSSxZQUFZb2pCLFdBQVcsZ0JBQ2xDc1YsRUFBWSxjQUVWLzRCLEVBQU9LLElBQUksV0FBVyxJQUFHTCxFQUFPSyxJQUFJLFNBQVMsT0NEekQsT0RHQThCLElBQVEsNENBRTBCK0UsRUFBRSxRQUFRLFlBRTVDdkosS0FBQ3NGLElBQUlkLEtBQUtBLEdBRVZ4RSxLQUFDNmMsUUFBUSxhQ05KK2tELEdENURzQi9nRSxTQUFTc0Y7OztBRUF4QyxHQUFBNjdELHNCQUFBcGlFLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlR5aEUsc0JBQUEsU0FBQWpoRSxHQ09KLFFBQVNpaEUsS0FDUCxNQUFPQSxHQUFxQjFoRSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQW9EaEUsTUF2REFDLFFBQU9vaUUsRUFBc0JqaEUsR0FNN0JpaEUsRUFBcUIzaEUsVURUckJpVyxVQUFZLHVCQ1daMHJELEVBQXFCM2hFLFVEVHJCYyxRQUNFOGdFLDJCQUE2QiwwQkNZL0JELEVBQXFCM2hFLFVEVnJCNmhFLHVCQUF3QixTQUFDbC9ELEdDV3ZCLE1EVkFyRSxXQUFVb1csT0FBT0MsU0FBUyx1QkFBeUJoVixLQUFDc0YsSUFBSUMsS0FBS3ZDLEVBQU1jLFFBQVF5QixLQUFLLGFBQWF2QixLQUFLLG1CQUFtQixJQ2F2SGcrRCxFQUFxQjNoRSxVRFhyQmlkLFdBQVksU0FBQzliLEdBQ1gsR0FBQXl6RCxFQ2dCQSxPRGhCQWoxRCxNQUFDRixPQUFZMEIsRUFBUTFCLE9BQ3JCRSxLQUFDKzFELE1BQVkvMUQsS0FBQ0YsT0FBTzBCLFFBQVF1MEQsTUFDN0IvMUQsS0FBQ3NwQixVQUFZdHBCLEtBQUNGLE9BQU8wQixRQUFROG5CLFVBQzdCMnJDLEVBQWMsR0FBSUUsVUFDbEJGLEVBQVk1dEQsT0FDVnhCLFFBQVMsU0FBQUMsR0NhUCxNRGJPLFVBQUNpQixHQ2tCTixNRGpCRmpCLEdBQUN1dkQsU0FBV3R1RCxFQUFXNlEsT0FDckJzOUMsUUFBVXB2RCxFQUFDaXdELE1BQU0vekQsS0FDbkI4RCxFQUFDdWdDLE9BQVEsRUFDVHZnQyxFQUFDSSxXQUpNbEcsU0N3QmJnaUUsRUFBcUIzaEUsVURsQnJCNkYsT0FBUSxXQUVOLEdBQUExQixHQUFBcEYsRUFBQXVJLEVBQUF6QyxFQUFBK3VELENBQUEsSUFBR2owRCxLQUFDcW1DLE1BQUosQ0FHRSxHQUF1QixJQUFwQnJtQyxLQUFDcTFELFNBQVMxMEQsT0FFWCxXQURBWCxNQUFDc0YsSUFBSWQsS0FBSyxxQ0FPWixLQUpBQSxFQUFPLHFGQUUrQytFLEVBQUUsb0JBQW9CLFlBRTVFckUsRUFBQWxGLEtBQUFxMUQsU0FBQWoyRCxFQUFBLEVBQUF1SSxFQUFBekMsRUFBQXZFLE9BQUF2QixFQUFBdUksRUFBQXZJLElDZUU2MEQsRUFBVS91RCxFQUFJOUYsR0RkZG9GLEdBQVEsMkJBQTJCeXZELEVBQVFqeUQsR0FBRyxLQUFJaXlELEVBQVF2eEQsSUFBSSxRQUFRLFdDa0J4RSxPRGpCQThCLElBQVEsWUFFUnhFLEtBQUNzRixJQUFJZCxLQUFLQSxHQ2lCVixNRGZBeEUsTUFBQ3NGLElBQUlkLEtBQUssbURDbUJQdzlELEdENUQwQm5oRSxTQUFTc0Y7OztBRUE1QyxHQUFBZzhELGNBQUFDLGlCQUFBN2lFLEtBQUEsU0FBQUMsRUFBQUMsR0FBQSxNQUFBLFlBQUEsTUFBQUQsR0FBQUUsTUFBQUQsRUFBQUUsYUNFRUMsT0FBUyxTQUFTQyxFQUFPQyxHQUErRixRQUFTQyxLQUFTQyxLQUFLQyxZQUFjSixFQUExSCxJQUFLLEdBQUlLLEtBQU9KLEdBQWNLLFFBQVFDLEtBQUtOLEVBQVFJLEtBQU1MLEVBQU1LLEdBQU9KLEVBQU9JLEdBQTJKLE9BQXJHSCxHQUFLTSxVQUFZUCxFQUFPTyxVQUFXUixFQUFNUSxVQUFZLEdBQUlOLEdBQVFGLEVBQU1TLFVBQVlSLEVBQU9PLFVBQWtCUixHQUNsUk0sV0FBYUksY0RIVDRoRSxjQUFBLFNBQUFwaEUsR0NRSixRQUFTb2hFLEtBR1AsTUFGQW5pRSxNQUFLcWlFLFdBQWE5aUUsS0FBS1MsS0FBS3FpRSxXQUFZcmlFLE1BQ3hDQSxLQUFLOHZCLFlBQWN2d0IsS0FBS1MsS0FBSzh2QixZQUFhOXZCLE1BQ25DbWlFLEVBQWE3aEUsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0FnWXhELE1BcllBQyxRQUFPdWlFLEVBQWNwaEUsR0FRckJvaEUsRUFBYTloRSxVRFpiaVcsVUFBWSxlQ2NaNnJELEVBQWE5aEUsVURaYmlpRSxXQUFhLEVDY2JILEVBQWE5aEUsVURiYmtpRSxVQUFhLEVDZWJKLEVBQWE5aEUsVURiYmMsUUFDRXlxQixjQUEyQixTQUMzQjQyQyx5QkFBMkIsaUJBQzNCQyxlQUEyQixvQkNnQjdCTixFQUFhOWhFLFVEWmJxaUUsaUJBQWtCLFNBQUMxL0QsR0NlakIsTURkQWhELE1BQUMybUIsU0FBUzByQyxLQUFPaHVELFNBQVNSLEVBQUViLEVBQU1jLFFBQVFFLEtBQUssZUFDL0NoRSxLQUFDdS9ELGNBQ0R2L0QsS0FBQ3FpRSxjQ2VIRixFQUFhOWhFLFVEYmJzaUUsZUFBZ0IsU0FBQzMvRCxHQUNmLEdBQUFHLEVDbUJBLE9EbkJBQSxHQUFVVSxFQUFFYixFQUFNYyxRQUNsQjlELEtBQUMybUIsU0FBUzJzQyxTQUFXbndELEVBQVFhLEtBQUssaUJBQ2xDaEUsS0FBQ3NGLElBQUlDLEtBQUssb0JBQW9CbVgsWUFBWSxZQUMxQ3ZaLEVBQVF3WixTQUFTLFlBQ2pCM2MsS0FBQ3UvRCxjQUNEdi9ELEtBQUNxaUUsY0NpQkhGLEVBQWE5aEUsVURmYmdzQixPQUFRLFdDZ0JOLE1EaEJTNWlCLFNBQVFtNUQsUUNtQm5CVCxFQUFhOWhFLFVEakJiaWQsV0FBWSxTQUFDOWIsR0FLWCxHQUFBd1MsR0FBQTZ1RCxFQUFBQyxFQUFBMWpFLEVBQUFrMEQsRUFBQXlQLEVBQUExekQsRUFBQTNILEVBQUF4SCxFQUFBUSxFQUFBaUgsRUFBQXdGLEVBQUE2VCxFQUFBczhDLEVBQUFDLEVBQUF5RixFQUFBQyxFQUFBQyxFQUFBNXpELEVBQUFDLEVBQUEzTixFQUFBNE4sRUFBQUMsRUFBQXNrRCxFQUFBb1AsRUFBQTFwRCxFQUFBMnBELEVBQUExekQsRUFBQUMsRUFBQXpLLEVBQUFDLEVBQUFnK0IsRUFBQUMsRUFBQStULEVBQUFDLEVBQUFDLEVBQUFnc0IsRUFBQWhoRSxFQUFBc1QsRUFBQTJMLEVBQUE5QyxFQUFBMCtDLENBUUEsSUFSQWw5RCxLQUFDaUksUUFBZXpHLEVBQVF5RyxRQUN4QmpJLEtBQUNpMEQsUUFBZXp5RCxFQUFReXlELFFBQ3hCajBELEtBQUN3ZSxTQUFlaGQsRUFBUWdkLFNBQ3hCeGUsS0FBQysxRCxNQUFldjBELEVBQVF1MEQsTUFHakIsTUFBQS8xRCxLQUFBKzFELE9BQXNCNTJELE1BQU1nTixJQUFJbk0sS0FBRyxhQUNuQyxNQUFBQSxLQUFBd2UsVUFBc0JyZixNQUFNZ04sSUFBSW5NLEtBQUcsOEJBQ3BCLElBQW5CQSxLQUFDaUksUUFBUXRILE9BR1YsTUFGQVgsTUFBQ3NqRSxhQUFjLE1BQ2Z0akUsTUFBQ2tHLFFBdUJILEtBbkJBbEcsS0FBQ3FkLEtBQVUsTUFBQXJkLEtBQUFpMEQsUUFBZWowRCxLQUFDc2lFLFdBQWdCdGlFLEtBQUN1aUUsVUFFNUN2aUUsS0FBQ3VqRSxnQkFDRHZqRSxLQUFDd2pFLGtCQUNEeGpFLEtBQUMwRCxRQUNEMUQsS0FBQ3lqRSxVQUFpQixFQUNsQnpqRSxLQUFDMGpFLEtBQWlCLEtBQ2xCMWpFLEtBQUNnOUQsU0FBaUIxNEQsS0FBS0MsSUFBSTdFLE1BQU1NLEtBQUcyQyxFQUFFeXNCLFFBQVFwdkIsS0FBQ3dlLFNBQVNySyxNQUFNLFVBQzlEblUsS0FBQzZoRSxpQkFDRDdoRSxLQUFDMmpFLGdCQUNEM2pFLEtBQUMybUIsVUFDQzJzQyxTQUFhLEtBQ2JqQixLQUFhLEdBTWY1NEMsS0FDQXZVLEVBQUFsRixLQUFBd2UsU0FBQXZhLE9BQUFvTCxFQUFBLEVBQUExSCxFQUFBekMsRUFBQXZFLE9BQUEwTyxFQUFBMUgsRUFBQTBILElDWUVpUyxFQUFVcGMsRUFBSW1LLElEWHNCb0ssRUFBTWpaLFFBQVE4Z0IsRUFBUTVlLElBQUksVUFBOUQrVyxFQUFNNVIsS0FBS3laLEVBQVE1ZSxJQUFJLFNBR3ZCdEQsRUFBSXFhLEVBQU1qWixRQUFROGdCLEVBQVE1ZSxJQUFJLFNBQ0QsTUFBQTFDLEtBQUF1akUsYUFBQW5rRSxLQUE3QlksS0FBQ3VqRSxhQUFhbmtFLE9BQ2RZLEtBQUN1akUsYUFBYW5rRSxHQUFHa2lCLEVBQVE1ZSxJQUFJLGFBQWU0ZSxFQUFRNWUsSUFBSSxPQVUxRCxLQVJBMUMsS0FBQ3lqRSxVQUFZaHFELEVBQU05WSxPQUtuQnU4RCxFQUFpQmw5RCxLQUFDd2UsU0FBU3pVLFFBQVEsUUFDbkNvNUQsRUFBY3hnRSxFQUFFc1IsS0FBS2lwRCxHQUNyQmw5RCxLQUFDNGpFLGVBQ0R4a0UsRUFBQXNJLEVBQUEsRUFBQXlGLEVBQUFnMkQsRUFBQXhpRSxPQUFBK0csRUFBQXlGLEVBQUEvTixJQUFBc0ksRUNXRXFzRCxFQUFPb1AsRUFBWS9qRSxHRFZuQlksS0FBQzRqRSxZQUFZN1AsR0FBUTMwRCxDQU92QixLQURBWSxLQUFDNmhFLGNBQWdCN2hFLEtBQUNpSSxRQUFROEIsUUFBUSxRQUNsQzVFLEVBQUFuRixLQUFBaUksUUFBQWhFLE9BQUF2RCxFQUFBLEVBQUFzZ0IsRUFBQTdiLEVBQUF4RSxPQUFBRCxFQUFBc2dCLEVBQUF0Z0IsSUNTRTJCLEVBQVM4QyxFQUFLekUsR0RUaEJWLEtBQUMyakUsYUFBYXRoRSxFQUFPSyxJQUFJLFlBQVlnTyxnQkFBaUIsQ0FTdEQsS0FSQTFRLEtBQUMyakUsYUFBZWhoRSxFQUFFc1IsS0FBS2pVLEtBQUMyakUsY0FRWjVQLEVBQUF6a0QsRUFBQSxFQUFBNnpCLEVBQUFuakMsS0FBQWc5RCxTQUFBLEdBQUE3NUIsRUFBQTd6QixHQUFBNnpCLEVBQUE3ekIsR0FBQTZ6QixFQUFBNHdCLEVBQUEsR0FBQTV3QixJQUFBN3pCLElBQUFBLEVBRVYsR0FBMkIsU0FBeEJ0UCxLQUFDNmhFLGNBQWM5TixHQUFsQixDQUlBLElBREFnUCxLQUNBMy9CLEVBQUFwakMsS0FBQTZoRSxjQUFBOU4sR0FBQTMwRCxFQUFBbVEsRUFBQSxFQUFBK3RELEVBQUFsNkIsRUFBQXppQyxPQUFBNE8sRUFBQSt0RCxFQUFBbCtELElBQUFtUSxFQ0tFbE4sRUFBUytnQyxFQUFLaGtDLEdESFhZLEtBQUNxZCxPQUFRcmQsS0FBQ3NpRSxZQUFjamdFLEVBQU9LLElBQUksZUFBZ0IxQyxLQUFDaTBELFFBQVFqeUQsS0FFL0RzeEQsRUFBV2p4RCxFQUFPSyxJQUFJLFlBR2UsTUFBQTFDLEtBQUEybUIsU0FBQTJzQyxXQUFyQ3R6RCxLQUFDMm1CLFNBQVMyc0MsU0FBV0EsR0FHVyxNQUFBeVAsRUFBQXpQLEtBQWhDeVAsRUFBVXpQLE9BQ1Z5UCxFQUFVelAsR0FBVXpyRCxNQUNsQmpHLEtBQW1CMHhELEVBQVN4dEMsV0FDNUI1bEIsSUFBbUJvekQsRUFDbkJTLEtBQW1CMXhELEVBQU9LLElBQUksUUFDOUI2OEIsUUFBbUJsOUIsRUFBT0ssSUFBSSxXQUM5QjJzQyxVQUFtQmh0QyxFQUFPSyxJQUFJLGFBQzlCbWhFLGVBQW1CeGhFLEVBQU9rOEQscUJBQXFCLE1BRWpEditELEtBQUN3akUsZUFBZWxRLEdBQVl0ekQsS0FBQ3dlLFNBQVM5YixJQUFJTCxFQUFPSyxJQUFJLGNBQWM4SSxVQUFVLGVBRy9FeEwsTUFBQzBELEtBQUttRSxNQUNKa3NELEtBQWNBLEVBQ2RnUCxVQUFlcGdFLEVBQUU2VSxPQUFPdXJELEtBb0I1QixJQWZBL2lFLEtBQUMwRCxLQUFPMUQsS0FBQzhqRSxVQUFVOWpFLEtBQUMwRCxNQU1ELElBQWhCMUQsS0FBQzBELEtBQUsvQyxTQUNQWCxLQUFDMm1CLFVBQ0MwckMsS0FBV3J5RCxLQUFDNGpFLFlBQVlqaEUsRUFBRXV0QyxLQUFLbHdDLEtBQUMwRCxNQUFNLE1BQ3RDNHZELFNBQVczd0QsRUFBRXV0QyxLQUFLbHdDLEtBQUMwRCxNQUFNLFVBQWEsR0FBR3hELE1BSzdDa2pFLEtBQ0Fqc0IsRUFBQW4zQyxLQUFBMEQsS0FBQXRFLEVBQUFvUSxFQUFBLEVBQUErdEQsRUFBQXBtQixFQUFBeDJDLE9BQUE2TyxFQUFBK3RELEVBQUFuK0QsSUFBQW9RLEVBQ0UsSUNKQW1HLEVBQU13aEMsRUFBSy8zQyxHRElYZzRDLEVBQUF6aEMsRUFBQW90RCxVQUFBdHpELEVBQUEsRUFBQXV6RCxFQUFBNXJCLEVBQUF6MkMsT0FBQThPLEVBQUF1ekQsRUFBQXZ6RCxJQ0RFNmpELEVBQVdsYyxFQUFLM25DLEdERWhCcXpELEVBQWE5aUUsS0FBQzRqRSxZQUFZanVELEVBQUlvK0MsTUFBUSxFQUNLLE1BQUFxUCxFQUFBOVAsRUFBQXB6RCxPQUEzQ2tqRSxFQUFpQjlQLEVBQVNwekQsU0FDMUJrakUsRUFBaUI5UCxFQUFTcHpELEtBQUsySCxNQUFNaTdELEVBQVl4UCxFQUFTdVEsZ0JBQzlEN2pFLE1BQUMrakUsWUFDRC9qRSxLQUFDZ2tFLGlCQUNENWtFLEVBQUksQ0FFSixLQUFBd0MsSUFBQXdoRSxHQ0dFcHZELEVBQU9vdkQsRUFBaUJ4aEUsR0RGeEIxQixFQUFNMEIsRUFBSzhPLGNBQ1gxUSxLQUFDK2pFLFNBQVM3akUsSUFDUjhULEtBQVVBLEVBQ1Y0SixNQUFVaGMsRUFBS2trQixXQUNmNWxCLElBQVVBLEVBQ1YrakUsT0FDRXZvRCxNQUFTLEdBQ1h3b0QsUUFDRXhvRCxNQUFTLEdBT2YxYixNQUFDbWtFLGlCQUNEOXNCLEVBQUFyM0MsS0FBQXdlLFNBQUF6VSxRQUFBLFdBQUEsS0FBQXVwRCxJQUFBamMsR0FBQSxDQUVFLElDQ0E3NEIsRUFBVzY0QixFQUFLaWMsR0RGaEJ1UCxLQUNBempFLEVBQUFzUSxFQUFBLEVBQUF1ekQsRUFBQXprRCxFQUFBN2QsT0FBQStPLEVBQUF1ekQsRUFBQTdqRSxJQUFBc1EsRUNJRTRSLEVBQVU5QyxFQUFTcGYsR0RIbkIwakUsRUFBYTlpRSxLQUFDNGpFLFlBQVl0aUQsRUFBUTVlLElBQUksU0FBVyxFQUNqRG1nRSxFQUFpQmg3RCxNQUFNaTdELEVBQVl4aEQsRUFBUTlWLFVBQVUsZ0JBRXZEeEwsTUFBQ21rRSxjQUFjN1EsRUFBUzVpRCxnQkFDdEJrTixNQUFVLHFCQUNWNUosS0FBUzZ1RCxFQUNUenBELE1BQVUsT0FDVjZxRCxPQUNFdm9ELE1BQVUsSUFNaEIxYixLQUFDb2tFLHFCQUNEZixFQUFBcmpFLEtBQUF3ZSxTQUFBelUsUUFBQSxXQUFBLEtBQUF1cEQsSUFBQStQLEdBRUUsSUNFQTdrRCxFQUFXNmtELEVBQUsvUCxHREhoQnR6RCxLQUFDb2tFLGtCQUFrQjlRLE1BQ25CbDBELEVBQUF1USxFQUFBLEVBQUF1ekQsRUFBQTFrRCxFQUFBN2QsT0FBQWdQLEVBQUF1ekQsRUFBQTlqRSxJQUFBdVEsRUNLRTJSLEVBQVU5QyxFQUFTcGYsR0RKbkJZLEtBQUNva0Usa0JBQWtCOVEsRUFBUzVpRCxlQUFlMVEsS0FBQzRqRSxZQUFZdGlELEVBQVE1ZSxJQUFJLFdBQ2xFb0IsT0FBUXdkLEVBQVE5VixVQUFVLGVBQzFCNjRELE9BQVEvaUQsRUFBUTlWLFVBQVUsZUFDMUIwbEMsUUFBUzV2QixFQUFROVYsVUFBVSxTQ1VqQyxPRFBBeEwsTUFBQ3NqRSxhQUFjLEVBQ2Z0akUsS0FBQ2tHLFVDU0hpOEQsRUFBYTloRSxVRFBiNkYsT0FBUSxXQUVOLEdBQUFvK0QsR0FBQTkvRCxFQUFBdTlELEVBQUExeUQsRUFBQW5QLEVBQUEwZCxFQUFBalcsRUFBQXpDLEVBQUEyWSxFQUFBb2dELEVBQUFzRyxDQUFBLElBQWN2a0UsS0FBQ3NqRSxZQUFmLENBb0JBLEdBbkJBZ0IsRUFBVXpnRSxFQUFFMkYsUUFDWis2RCxHQUNFbjFELEVBQUlrMUQsRUFBUTczRCxTQUNac0QsRUFBSXUwRCxFQUFRajRELFNBSVRyTSxLQUFDcWQsT0FBUXJkLEtBQUNzaUUsYUFGZnJFLEVBQWMsT0FDTmorRCxLQUFDaTBELFFBQVF2eEQsSUFBSSxRQUFRLFNBRzdCOEIsRUFBTyw0QkFFSHk1RCxHQUFlLElBTW5COEQsRUFBYyxpS0FFUSxJQUFuQi9oRSxLQUFDaUksUUFBUXRILE9BTVYsTUFMQVgsTUFBQ3NGLElBQUlkLEtBQ0RBLEVBQUssSUFDTHU5RCxPQUVKL2hFLE1BQUM2YyxRQUFRLFdBV1gsS0FKQXJZLEdBQVEsdUJBSVJVLEVBQUF2QyxFQUFBaWQsS0FBQTVmLEtBQUF3ZSxTQUFBckssTUFBQSxhQUFBOUUsRUFBQSxFQUFBMUgsRUFBQXpDLEVBQUF2RSxPQUFBME8sRUFBQTFILEVBQUEwSCxJQ1JFblAsRUFBTWdGLEVBQUltSyxHRFNWdU8sRUFBUTFkLEVBQUlnRSxRQUFRLFFBQVMsS0FBSzR4QixhQUNsQ2pZLEVBQW1CM2QsSUFBT0YsS0FBQzJtQixTQUFTMnNDLFNBQWMsV0FBZ0IsR0FDbEU5dUQsR0FBUSwwQ0FBMENxWixFQUFjLG9CQUFtQjNkLEVBQUksS0FBSTBkLEVBQU0sV0NGbkcsT0RJQXBaLElBQVEsaURBRTRDLEdBQVRnRixPQUFPdUcsRUFBTSw0QkFNeER2TCxHQUFRLG9FQUUwQitFLEVBQUUsUUFBUSxZQUc1Q3ZKLEtBQUNzRixJQUFJZCxLQUFLQSxHQUNWeEUsS0FBQ3UvRCxjQUNEdi9ELEtBQUM2YyxRQUFRLGNDaEJYc2xELEVBQWE5aEUsVURrQmJ5dkIsWUFBYSxXQ2pCWCxNRGtCQTl2QixNQUFDcWlFLGNDZkhGLEVBQWE5aEUsVURpQmJrL0QsWUFBYSxXQUVYLEdBQUFpRixHQUFBeHdELEVBQUEyTCxFQUFBc3JDLEVBQUF3WixFQUFBamdFLEVBQUFwRixFQUFBazBELEVBQUFqa0QsRUFBQTNILEVBQUFoSCxFQUFBaUgsRUFBQXdGLEVBQUE2VCxFQUFBMGpELEVBQUF4L0QsRUFBQUMsRUFBQWcrQixFQUFBOWdDLEVBQUFzVCxFQUFBZ3ZELEVBQUFDLEVBQUF0aUUsRUFBQXVpRSxFQUFBeFMsQ0FJQSxLQUpBL3ZELEVBQU90QyxLQUFDMm1CLFNBQVMyc0MsU0FDakJqQixFQUFPcnlELEtBQUMybUIsU0FBUzByQyxLQUVqQjd0RCxFQUFPLDBCQUNQVSxFQUFBbEYsS0FBQTBELEtBQUF0RSxFQUFBaVEsRUFBQSxFQUFBMUgsRUFBQXpDLEVBQUF2RSxPQUFBME8sRUFBQTFILEVBQUF2SSxJQUFBaVEsRUFFRSxHQ2xCQXNHLEVBQU16USxFQUFJOUYsSURrQkl1RCxFQUFFd1IsTUFBTXdCLEVBQUlvdEQsVUFBVyxPQUFPdmlFLFFBQVE4QixHQUVwRCxJQURBa0MsR0FBUSxXQUFXeEUsS0FBQ3VqRSxhQUFhbmtFLEdBQUdrRCxHQUFNLGlCQUMxQzZDLEVBQUF3USxFQUFBb3RELFVBQUFyN0QsRUFBQSxFQUFBeUYsRUFBQWhJLEVBQUF4RSxPQUFBK0csRUFBQXlGLEVBQUF6RixJQ2JFNHJELEVBQVdudUQsRUFBS3VDLEdEY2I0ckQsRUFBU3B6RCxNQUFPb0MsSUFDbkJrQyxHQUFRLFlBRUU4dUQsRUFBUzF4RCxLQUFLLG9CQUFtQjB4RCxFQUFTL3pCLFFBQVEsSUFBRyt6QixFQUFTamtCLFVBQVUsd0JBR3hFaWtCLEVBQVMxeEQsS0FBSywrQkFBOEIweEQsRUFBU3VRLGVBQWUsY0FXbEYsSUFSQXIvRCxHQUFRLFdBTVJnZ0UsRUFBNkI3aEUsRUFBRXdSLE1BQUYsT0FBQWd2QixFQUFBbmpDLEtBQUEwRCxLQUFBMnVELElBQUFsdkIsRUFBcUI0L0IsVUFBQSxPQUFXLE9BRTFEMVEsR0FBUXJ5RCxLQUFDMEQsS0FBSy9DLFVBQVk2akUsRUFBMkJoa0UsUUFBUThCLEdBQzlEa0MsR0FBUSxzREFDTCxJQUFHeEUsS0FBQ3FkLE9BQVFyZCxLQUFDdWlFLFVBQWIsQ0FTSCxJQVBBb0MsRUFBUSxFQUVSM3dELEVBQVUsTUFBQWhVLEtBQUErakUsU0FBQXpoRSxHQUNSdEMsS0FBQytqRSxTQUFTemhFLEdBQU0wUixRQUlsQnRULEVBQUEsRUFBQXNnQixFQUFBaE4sRUFBQXJULE9BQUFELEVBQUFzZ0IsRUFBQXRnQixJQzNCRWlmLEVBQVEzTCxFQUFLdFQsR0Q0QlZpZixFQUFNLEtBQU0weUMsRUFBSyxJQUNsQnNTLEVBQVFobEQsRUFBTSxHQUVsQmlsRCxHQUFZNWtFLEtBQUNva0Usa0JBQWtCOWhFLEdBQU0rdkQsR0FFckNvUyxFQUFPRyxFQUFVOWdFLE9BQVM4Z0UsRUFBVVAsT0FDcENLLEVBQU9FLEVBQVU5Z0UsT0FBUzhnRSxFQUFVUCxPQUNwQ3BaLEVBQWEwWixFQUFRQyxFQUFVOWdFLE9BRTVCNmdFLEVBQVFGLEdBQ1RwaUUsRUFBUyxJQUFJc2lFLEVBQU0sTUFBSzFaLEVBQVcsZ0RBQ25DNFosRUFBVyw2QkFBNkJ4aUUsRUFBTyw0V0FDekNzaUUsRUFBUUQsR0FDZHJpRSxFQUFTLElBQUlzaUUsRUFBTSxNQUFLcmdFLEtBQUt3Z0UsSUFBSTdaLEdBQVksZ0RBQzdDNFosRUFBVywwREFBMER4aUUsRUFBTyw4WUFHMUVBLEVBRGUsSUFBZDRvRCxHQUFtQkEsT0FBbUIzbUQsS0FBS3dnRSxJQUFJN1osR0FDdEMwWixFQUFRQyxFQUFVOWdFLE9BQVUsaURBQ2xCLElBQWRtbkQsRUFDTTBaLEVBQU0sNEJBRVQsSUFBSUEsRUFBTSxNQUFPcmdFLEtBQUt3Z0UsSUFBSUgsRUFBUUMsRUFBVTlnRSxRQUFVLGlEQUdqRStnRSxFQUFXLDRDQUE0Q3hpRSxFQUFPLDJPQUVoRW1DLEdBQVEsYUFFRnFnRSxFQUFTLGNDN0JqQixNRGlDQTdrRSxNQUFDc0YsSUFBSUMsS0FBSyxvQkFBb0JmLEtBQUtBLElDOUJyQzI5RCxFQUFhOWhFLFVEaUNiZ2lFLFdBQVksV0FLVixHQUFBMEMsR0FBQTNsRSxDQ0lBLE9ESkFZLE1BQUNnbEUsYUFDQ0MsT0FDRTF6RCxJQUFrQixHQUNsQmhOLElBQWtCdkUsS0FBQ3lqRSxVQUFZLEdBQy9CeUIsTUFBQSxXQ25DRSxHQUFJNzFELEdBQUduSyxFQUFLOGEsQ0FFWixLRGlDa0JBLEtBQXFCNWdCLEVBQUFpUSxFQUFBLEVBQUFuSyxFQUFBbEYsS0FBQXlqRSxVQUFBLEdBQUF2K0QsRUFBQW1LLEdBQUFuSyxFQUFBbUssR0FBQW5LLEVBQUE5RixFQUFBLEdBQUE4RixJQUFBbUssSUFBQUEsRUNoQ3JDMlEsRUFBU25ZLEtEZ0NPckMsT0FBUXBHLEdDOUIxQixPQUFPNGdCLElBQ041ZixLQUFLSixNRDhCUm1sRSxhQUFrQixFQUNsQkMsY0FBa0IsU0FBQXQvRCxHQzVCaEIsTUQ0QmdCLFVBQUVxTCxHQUNsQixNQUFHLE9BQUFyTCxFQUFBeTlELGFBQUFweUQsRUFBQSxHQUFBckwsRUFBQTZnQixTQUFBMnNDLFVBQ00seUJBQTJCbmlELEVBQUksSUFBR3JMLEVBQUM2Z0IsU0FBUzByQyxLQUFVLFdBQWdCLElBQUcsa0JBQWdCbGhELEVBQUksR0FBRSxLQUFJckwsRUFBQ3k5RCxhQUFhcHlELEVBQUksR0FBR3JMLEVBQUM2Z0IsU0FBUzJzQyxVQUFVLFlBRW5KLEtBSmN0ekQsT0FLcEJtL0IsTUFDRWttQyxVQUNFanNELE1BQVcsT0FDWDZyRCxPQUNFSyxHQUFTdGxFLEtBQUMybUIsU0FBUzByQyxLQUFPLEdBQzFCa1QsS0FBU3ZsRSxLQUFDMm1CLFNBQVMwckMsS0FBTyxPQUdsQzBTLEtBQ3VEL2tFLEtBQUMrakUsU0FBUy9qRSxLQUFDMm1CLFNBQVMyc0MsV0FBM0V5UixFQUFZbDlELEtBQUs3SCxLQUFDK2pFLFNBQVMvakUsS0FBQzJtQixTQUFTMnNDLFdBQ2tCdHpELEtBQUNta0UsY0FBY25rRSxLQUFDMm1CLFNBQVMyc0MsV0FBaEZ5UixFQUFZbDlELEtBQUs3SCxLQUFDbWtFLGNBQWNua0UsS0FBQzJtQixTQUFTMnNDLFdBRTFDdHpELEtBQUMwakUsS0FBTzcvRCxFQUFFMmhFLEtBQUt4bEUsS0FBQ3NGLElBQUlDLEtBQUssbUJBQW9Cdy9ELEVBQWEva0UsS0FBQ2dsRSxjQ2hCN0Q3QyxFQUFhOWhFLFVEbUJieWpFLFVBQVcsU0FBQzJCLEdBRVYsR0FBQXJtRSxHQUFBaVEsRUFBQTNILEVBQUFoSCxFQUFBaUgsRUFBQXdGLEVBQUE2VCxFQUFBMGtELEVBQUFDLEVBQUF6Z0UsRUFBQTdDLEVBQUE0RixFQUFBME4sQ0FDQSxLQURBZ3dELEtBQ0F2bUUsRUFBQWlRLEVBQUEsRUFBQTFILEVBQUE4OUQsRUFBQTlrRSxPQUFBME8sRUFBQTFILEVBQUF2SSxJQUFBaVEsRUFLRSxJQ3ZCQXNHLEVBQU04dkQsRUFBUXJtRSxHRG1CZHVtRSxFQUFRdm1FLElBQ04yMEQsS0FBY3ArQyxFQUFJbytDLEtBQ2xCZ1AsY0FFRjc5RCxFQUFBeVEsRUFBQW90RCxVQUFBcjdELEVBQUEsRUFBQXlGLEVBQUFqSSxFQUFBdkUsT0FBQStHLEVBQUF5RixFQUFBekYsSUFBQSxDQVdFLElDM0JBTyxFQUFVL0MsRUFBSXdDLEdEbUJkZytELEdBQ0U5akUsS0FBbUIsR0FDbkIxQixJQUFtQixHQUNuQnEvQixRQUFtQixFQUNuQjhQLFVBQW1CLEVBQ25CdzBCLGVBQW1CLEdBR3JCbmpFLEVBQUEsRUFBQXNnQixFQUFBL1ksRUFBQXRILE9BQUFELEVBQUFzZ0IsRUFBQXRnQixJQ2xCRTJCLEVBQVM0RixFQUFRdkgsR0RtQmpCZ2xFLEVBQUs5akUsS0FBaUJTLEVBQU9ULEtBQzdCOGpFLEVBQUt4bEUsSUFBaUJtQyxFQUFPbkMsSUFDN0J3bEUsRUFBS25tQyxTQUFrQmw5QixFQUFPazlCLFFBQzlCbW1DLEVBQUtyMkIsV0FBa0JodEMsRUFBT2d0QyxVQUM5QnEyQixFQUFLN0IsZ0JBQWtCeGhFLEVBQU93aEUsY0FHaEM2QixHQUFLbm1DLFNBQWtCdDNCLEVBQVF0SCxPQUMvQitrRSxFQUFLcjJCLFdBQWtCcG5DLEVBQVF0SCxPQUMvQitrRSxFQUFLN0IsZ0JBQWtCNTdELEVBQVF0SCxPQUcvQitrRSxFQUFLbm1DLFFBQVVqN0IsS0FBS3NJLE1BQU04NEQsRUFBS25tQyxTQUMvQm1tQyxFQUFLcjJCLFVBQVkvcUMsS0FBS3NJLE1BQU04NEQsRUFBS3IyQixXQUNqQ3EyQixFQUFLN0IsZUFBaUJ2L0QsS0FBS3NJLE1BQU04NEQsRUFBSzdCLGdCQUd0QzhCLEVBQVF2bUUsR0FBRzJqRSxVQUFVbDdELEtBQUs2OUQsR0FFOUIsTUFBT0MsSUNuQkZ4RCxHRDNZa0J0aEUsU0FBU3NGLE1BZ2E5Qmk4RCxpQkFBQSxXQUNTLFFBQUFBLEdBQUM1Z0UsR0FDWnhCLEtBQUM0bEUsVUFDRDVsRSxLQUFDaUUsT0FBWXpDLEVBQVF5QyxPQUNyQmpFLEtBQUN5QixVQUFZRCxFQUFRQyxVQ2R2QixNQUFPMmdFOzs7QUN0WlQsR0FBQXlELGtCQUFBam1FLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlRzbEUsa0JBQUEsU0FBQTlrRSxHQ09KLFFBQVM4a0UsS0FDUCxNQUFPQSxHQUFpQnZsRSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQW9ENUQsTUF2REFDLFFBQU9pbUUsRUFBa0I5a0UsR0FNekI4a0UsRUFBaUJ4bEUsVURUakJpVyxVQUFZLG1CQ1dadXZELEVBQWlCeGxFLFVEVGpCYyxRQUNFOGdFLDJCQUE2QixxQkNZL0I0RCxFQUFpQnhsRSxVRFZqQnlsRSxrQkFBbUIsU0FBQzlpRSxHQ1dsQixNRFZBckUsV0FBVW9XLE9BQU9DLFNBQVMsbUJBQXFCaFYsS0FBQ3NGLElBQUlDLEtBQUt2QyxFQUFNYyxRQUFReUIsS0FBSyxhQUFhdkIsS0FBSyxtQkFBb0IsSUFBSWhFLEtBQUMrMUQsTUFBTS96RCxLQUFNLElDYXJJNmpFLEVBQWlCeGxFLFVEWGpCaWQsV0FBWSxTQUFDOWIsR0FFWCxHQUFBeXpELEVDZUEsT0RmQWoxRCxNQUFDRixPQUFZMEIsRUFBUTFCLE9BRXJCRSxLQUFDKzFELE1BQVkvMUQsS0FBQ0YsT0FBTzBCLFFBQVF1MEQsTUFDN0IvMUQsS0FBQ3NwQixVQUFZdHBCLEtBQUNGLE9BQU8wQixRQUFROG5CLFVBRTdCMnJDLEVBQWMsR0FBSUUsVUFDbEJGLEVBQVk1dEQsT0FDVnhCLFFBQVMsU0FBQUMsR0NVUCxNRFZPLFVBQUNpQixHQ2VOLE1EZEZqQixHQUFDdXZELFNBQVd0dUQsRUFBVzZRLE9BQ3JCczlDLFFBQVVwdkQsRUFBQ2l3RCxNQUFNL3pELEtBQ25COEQsRUFBQ3VnQyxPQUFRLEVBQ1R2Z0MsRUFBQ0ksV0FKTWxHLFNDcUJiNmxFLEVBQWlCeGxFLFVEZmpCNkYsT0FBUSxXQUVOLEdBQUExQixHQUFBcEYsRUFBQXVJLEVBQUF6QyxFQUFBK3VELENBQUEsSUFBR2owRCxLQUFDcW1DLE1BQUosQ0FHRSxHQUF1QixJQUFwQnJtQyxLQUFDcTFELFNBQVMxMEQsT0FFWCxXQURBWCxNQUFDc0YsSUFBSWQsS0FBSyxxQ0FTWixLQU5BQSxFQUFPLHFGQUUrQytFLEVBQUUsb0JBQW9CLDBDQUN6Q0EsRUFBRSxnQkFBZ0IsWUFHckRyRSxFQUFBbEYsS0FBQXExRCxTQUFBajJELEVBQUEsRUFBQXVJLEVBQUF6QyxFQUFBdkUsT0FBQXZCLEVBQUF1SSxFQUFBdkksSUNVRTYwRCxFQUFVL3VELEVBQUk5RixHRFRkb0YsR0FBUSwyQkFBMkJ5dkQsRUFBUWp5RCxHQUFHLEtBQUlpeUQsRUFBUXZ4RCxJQUFJLFFBQVEsV0NheEUsT0RaQThCLElBQVEsWUFFUnhFLEtBQUNzRixJQUFJZCxLQUFLQSxHQ1lWLE1EVkF4RSxNQUFDc0YsSUFBSWQsS0FBSyxtRENjUHFoRSxHRDVEc0JobEUsU0FBU3NGOzs7QUVBeEMsR0FBQTQvRCxhQUFBbm1FLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlR3bEUsYUFBQSxTQUFBaGxFLEdDT0osUUFBU2dsRSxLQUNQLE1BQU9BLEdBQVl6bEUsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0FZdkQsTUFmQUMsUUFBT21tRSxFQUFhaGxFLEdBTXBCZ2xFLEVBQVkxbEUsVURUWmlXLFVBQVksY0NXWnl2RCxFQUFZMWxFLFVEVFppZCxXQUFZLFNBQUM5YixHQUNYLEdBQUF3a0UsR0FBQTlRLENDWUEsT0RaQUEsR0FBWTF6RCxFQUFRMUIsT0FBTzBCLFFBQVF1MEQsTUFBTS96RCxHQUN6Q2drRSxFQUFZcm5FLFVBQVVtRSxTQUFTSixJQUFJLGFBQ25DME4sU0FBU3NFLFNBQVcsb0RBQW9Ec3hELEVBQVUsSUFBRzlRLEdDYWhGNlEsR0RwQmlCbGxFLFNBQVNzRjs7O0FFQW5DLEdBQUFrbEIsWUFBQTlyQixLQUFBLFNBQUFDLEVBQUFDLEdBQUEsTUFBQSxZQUFBLE1BQUFELEdBQUFFLE1BQUFELEVBQUFFLGFDRUVDLE9BQVMsU0FBU0MsRUFBT0MsR0FBK0YsUUFBU0MsS0FBU0MsS0FBS0MsWUFBY0osRUFBMUgsSUFBSyxHQUFJSyxLQUFPSixHQUFjSyxRQUFRQyxLQUFLTixFQUFRSSxLQUFNTCxFQUFNSyxHQUFPSixFQUFPSSxHQUEySixPQUFyR0gsR0FBS00sVUFBWVAsRUFBT08sVUFBV1IsRUFBTVEsVUFBWSxHQUFJTixHQUFRRixFQUFNUyxVQUFZUixFQUFPTyxVQUFrQlIsR0FDbFJNLFdBQWFJLGNESFQ4cUIsWUFBQSxTQUFBdHFCLEdDUUosUUFBU3NxQixLQUdQLE1BRkFyckIsTUFBS2dlLFFBQVV6ZSxLQUFLUyxLQUFLZ2UsUUFBU2hlLE1BQ2xDQSxLQUFLbWUsaUJBQW1CNWUsS0FBS1MsS0FBS21lLGlCQUFrQm5lLE1BQzdDcXJCLEVBQVcvcUIsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0F5THRELE1BOUxBQyxRQUFPeXJCLEVBQVl0cUIsR0FRbkJzcUIsRUFBV2hyQixVRFpYb1MsSUFBTSxhQ2NONFksRUFBV2hyQixVRFpYZ2lCLFdBQVksV0NhVixPRGJhLEdDZ0JmZ0osRUFBV2hyQixVRGRYOGQsaUJBQWtCLFNBQUVlLEdBR2xCLEdBQUFDLEVDOENBLE9BakNZLE9BQVJELElEaEJjQSxFQUFPbGYsS0FBQ2dDLEdBQUd5YyxVQUFVLElBR3ZDVSxFQUFReFUsS0FBS0MsVUFBVXNVLEVBQUtoYixRQUFRLGFBQWEsS0FBSytVLE1BQU0sUUFFNURqWixLQUFDNmMsUUFBUSxTQUFVLGlCQUVuQmhaLEVBQUUrUCxLQUFLalYsVUFBVW1FLFNBQVMrUSxRQUFRLFFBQVMsV0FDekN2UixLQUFNLE9BQ053UixTQUFVLFFBQ1ZFLE1BQU1DLEtBQU1rTCxHQUNadFosUUFBUyxTQUFBQyxHQ2lCUCxNRGpCTyxVQUFDa08sR0FDUixHQUFBMkwsR0FBQXpMLEVBQUE3RSxFQUFBMUgsRUFBQXpDLENBQ0EsS0FEQWdQLEtBQ0FoUCxFQUFBOE8sRUFBQXRRLEtBQUEyTCxFQUFBLEVBQUExSCxFQUFBekMsRUFBQXZFLE9BQUEwTyxFQUFBMUgsRUFBQTBILElDb0JJc1EsRUFBUXphLEVBQUltSyxHRG5CZDZFLEVBQVFyTSxLQUFLOFgsRUFBTTNkLEdDc0JuQixPRHJCRjZCLEdBQUV1USxNQUFNQyxVQUNOMVYsVUFBVW1FLFNBQVN3UixNQUFNLFNBQ3pCM1YsVUFBVW1FLFNBQVN3UixNQUFNLFVBQ3ZCek8sUUFBYyxXQ29CWixNRHBCZUMsR0FBQytXLFFBQVEsU0FBVSxtQkFDcEM3VyxNQUFPLFNBQUNvQyxFQUFHQyxHQ3NCVCxNRHRCZXZDLEdBQUMrVyxRQUFRLFNBQVUsZUFBbUJ6VSxFQUFFLElBQUdDLE1BRTVEa00sUUFBU0wsTUFWTmxVLFNBYVgsR0M0QkZxckIsRUFBV2hyQixVRHpCWGdnQixVQUFXLFNBQUM0bEQsRUFBc0JDLEVBQW1CQyxFQUFvQnQ2RCxHQUV2RSxHQUFBNlUsR0FBQUMsRUFBQXlsRCxDQzZCQSxPRDdCQUEsR0FBYXBtRSxLQUFDZ0MsR0FFZDJlLEVBQVczZ0IsS0FBQ2tvQixRQUNadkgsRUFBU3JhLElBQUkyL0QsR0FDYnZsRCxFQUFRdmhCLE1BQU1tRSxPQUVkcWQsRUFBUy9hLE1BQ1BnUSxJQUFpQjhLLEVBQ2pCNEssYUFBaUI1SyxJQUVqQjdhLFFBQVMsU0FBQUMsR0N3QlAsTUR4Qk8sWUFDUCxHQUFBZ2IsRUMwQkUsT0QxQkZBLEdBQVksR0FBSWpPLFdBQ2hCaU8sRUFBVXpaLE9BQ1JuSCxJQUFLa21FLEVBQ0x2Z0UsUUFBUyxTQUFFaWIsR0FDVCxHQUFBdEMsRUMyQkUsT0QzQkZBLEdBQVcsR0FBSTVMLFVBQ2Y0TCxFQUFTblgsT0FDUG5ILElBQUtrbUUsRUFDTHZnRSxRQUFTLFNBQUUyWSxHQUNULEdBQUE2bkQsR0FBQUMsRUFBQWxuRSxFQUFBaVEsRUFBQTNILEVBQUFoSCxFQUFBaUgsRUFBQXdGLEVBQUE2VCxFQUFBcmYsRUFBQXEzQixFQUFBdXRDLEVBQUFuNUMsRUFBQWxNLEVBQUFzbEQsRUFBQUMsRUFBQXJsRCxFQUFBbGMsRUFBQXFjLENBSUEsS0FKQThrRCxFQUFtQjduRCxFQUFTdmEsT0FDNUJzZCxLQUNBaWxELEtBRUFwbkUsRUFBQWlRLEVBQUEsRUFBQTFILEVBQUEwK0QsRUFBQTFsRSxPQUFBME8sRUFBQTFILEVBQUF2SSxJQUFBaVEsRUMyQkkxTixFQUFRMGtFLEVBQWlCam5FLEdEMUIzQmd1QixFQUFhenJCLEVBQU11bUIsUUFDbkJrRixFQUFXOW1CLElBQUksZUFBZ0JxYSxFQUFTM2UsSUFDeENrZixFQUFlL2hCLE1BQU1tRSxPQUNyQmllLEVBQWE2TCxFQUFXcHJCLElBQU1rZixFQUM5QmtNLEVBQVc5bUIsSUFBSSxNQUFPNGEsR0FDdEJzbEQsRUFBWTMrRCxLQUFLdWxCLEVBSW5CLEtBQUFodUIsRUFBQXNJLEVBQUEsRUFBQXlGLEVBQUFxNUQsRUFBQTdsRSxPQUFBK0csRUFBQXlGLEVBQUEvTixJQUFBc0ksRUMwQkkvRixFQUFRNmtFLEVBQVlwbkUsR0R6QnRCa25FLEVBQVMza0UsRUFBTWUsSUFBSyxjQUNHLE1BQWxCNGpFLEdBQVUsS0FDYjNrRSxFQUFNMkUsSUFBSSxhQUFjaWIsRUFBYStrRCxJQUN2QzNrRSxFQUFNaUUsTUFJUixLQUZBMmdFLEtBRUFyaEUsRUFBQTRiLEVBQUE3YyxPQUFBdkQsRUFBQSxFQUFBc2dCLEVBQUE5YixFQUFBdkUsT0FBQUQsRUFBQXNnQixFQUFBdGdCLElDNEJJMGdCLEVBQVdsYyxFQUFJeEUsR0QzQmpCczRCLEVBQWM1WCxFQUFTOEcsUUFDdkJ1K0MsRUFBUXp0QyxFQUFZdDJCLElBQUksYUFDeEJzMkIsRUFBWTF5QixJQUFJLGVBQWdCcWEsRUFBUzNlLElBQ3pDZzNCLEVBQVkxeUIsSUFBSSxNQUFPbkgsTUFBTW1FLFFBQzdCMDFCLEVBQVkxeUIsSUFBSSxZQUFhaWIsRUFBYWtsRCxJQUMxQ0YsRUFBYTErRCxLQUFLbXhCLEdBQ2xCQSxFQUFZcHpCLE1DOEJaLE9EN0JGaUcsR0FBUzhVLFdBdkNWM2dCLFNDOEVicXJCLEVBQVdockIsVURwQ1gyZCxRQUFTLFNBQUNuUyxHQUdSLEdBQUF5ZixHQUFBOU0sQ0NnREEsT0RoREE4TSxHQUFldHJCLEtBQUNnQyxHQUNoQndjLEVBQVcsR0FBSTVMLFVBQ2Y0TCxFQUFTblgsT0FDUG5ILElBQUtvckIsRUFDTHpsQixRQUFTLFNBQUNrQixHQUFlLEdBQUFrQixFQ3NDdkIsS0R0Q2tEQSxLQUEyQixJQUFyQmxCLEVBQVdwRyxRQ3VDakVzSCxFQUFRSixLRHZDYWQsRUFBV3lMLE1BQU13TCxVQ3lDeEMsT0FBTy9WLE1EdENYb2pCLEVBQUEvcUIsVUFBQTBkLFFBQUE1ZCxLQUFBSixNQUNFNkYsUUFBUyxXQzBDUCxNRHpDQWdHLFNDOENOd2YsRUFBV2hyQixVRDNDWDJkLFFBQVMsV0M0Q1AsTUR6Q0FyZixXQUFVNlcsSUFBSWtLLEtBQUsvZ0IsVUFBVW1qQixXQUFhLHNCQUN4QzdOLE1BQU9qVSxLQUFDZ0MsSUFDUmdFLE1BQU8sV0MwQ0wsTUR6Q0E3RyxPQUFNa1AsU0FBUyxrQkFDakJ4SSxRQUFTLFNBQUFDLEdDMkNQLE1EM0NPLFVBQUN5QixHQUNSLEdBQUF1WSxHQUFBelEsRUFBQTFILEVBQUF6QyxFQUFBbWMsRUFBQTFMLENBQ0EsS0FEQW1LLEtBQ0E1YSxFQUFBcUMsRUFBQTdELEtBQUEyTCxFQUFBLEVBQUExSCxFQUFBekMsRUFBQXZFLE9BQUEwTyxFQUFBMUgsRUFBQTBILElDOENJc0csRUFBTXpRLEVBQUltSyxHRDVDWnNHLEVBQUluVCxNQUFNLFVBQWMsRUFDeEJtVCxFQUFJblQsTUFBTSxVQUFlN0QsVUFBVW1FLFNBQVNKLElBQUksV0FDaERvZCxFQUFLalksS0FBSzhOLEVBQUluVCxNQ2tEZCxPRGhERjZlLElBQ0V2QixLQUFTQSxHQUVYamMsRUFBRStQLE1BQ0F0UixLQUFNLE9BQ055UixZQUFhLGtDQUNiRCxTQUFVLE9BQ1ZyQixJQUFLOVQsVUFBVW1FLFNBQVM4ZSxjQUN4QjVOLEtBQU1ySixLQUFLQyxVQUFVeVcsR0FDckJyYixNQUFPLFdDOENILE1EN0NGN0csT0FBTWtQLFNBQVMsa0JBQ2pCeEksUUFBUyxTQUFDZ2MsR0FDUixHQUFBbmEsR0FBQXlGLEVBQUE4VSxFQUFBQyxDQUNBLEtBREFELEVBQVUsRUFDVnZhLEVBQUEsRUFBQXlGLEVBQUEwVSxFQUFBbGhCLE9BQUErRyxFQUFBeUYsRUFBQXpGLElDZ0RJd2EsRUFBT0wsRUFBVW5hLEdEaERQLE1BQUF3YSxFQUFBakMsSUFBYmdDLEdBQ0QsT0FBR0EsS0FBV0osRUFBVWxoQixRQUN0Qm1GLEVBQUNpQixXQUFXNkMsT0FBTzlELEVBQUM5RCxJQUNwQjhELEVBQUNxYyxTQUVEaGpCLE1BQU1rUCxTQUFTLHNCQTFCZHJPLFNDdUZOcXJCLEdEcE1nQnhxQixTQUFTNEY7OztBRUNsQyxHQUFBaWdFLGdCQUFBOW1FLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDQ0VNLFdBQWFJLGNERFRtbUUsZ0JBQUEsU0FBQTNsRSxHQ01KLFFBQVMybEUsS0FDUCxNQUFPQSxHQUFlcG1FLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBNFkxRCxNQS9ZQUMsUUFBTzhtRSxFQUFnQjNsRSxHQU12QjJsRSxFQUFlcm1FLFVEUmZpVyxVQUFXLGlCQ1VYb3dELEVBQWVybUUsVURSZmMsUUFDRXlxQixjQUEwQixTQUMxQnM2QixnQkFBMEIsbUJBQzFCeWdCLHdCQUEwQixnQkFDMUJ2bEUsdUJBQTBCLGNBQzFCd2xFLHFCQUEwQixhQUUxQkMsZUFBaUIsYUFFakJ4bEUsb0JBQXNCLFVBQ3RCQyxvQkFBc0IsVUFDdEJDLG9CQUFzQixVQUV0QnVsRSw2QkFBaUMsV0FDakNDLDZCQUFpQyxXQUNqQ0MsK0JBQWlDLGtCQ1FuQ04sRUFBZXJtRSxVRExmaWQsV0FBWSxTQUFDOWIsR0NZWCxNRFRBeEIsTUFBQ3FwQixXQUFhN25CLEVBQVE2bkIsV0FDdEJycEIsS0FBQ3dlLFNBQWFoZCxFQUFRZ2QsU0FDdEJ4ZSxLQUFDOGdCLFVBQWF0ZixFQUFRc2YsVUFDdEI5Z0IsS0FBQ2luRSxvQkFBc0JqbkUsS0FBQzhnQixVQUFVL1csUUFBUSxhQUcxQy9KLEtBQUNrbkUsaUJBQW9CNWlFLEtBQUtDLElBQUk3RSxNQUFNNEUsS0FBTXRFLEtBQUN3ZSxTQUFTckssTUFBTSxTQUMxRG5VLEtBQUNrOUQsZUFBb0JsOUQsS0FBQ3dlLFNBQVN2VSxhQUFhLFFBQzVDakssS0FBQ21uRSxtQkFDQ2hvQyxPQUVJai9CLElBQWEsV0FDYjBkLE1BQWEsWUFDYi9hLFVBQWEsSUFHYjNDLElBQWEsT0FDYjBkLE1BQWEsT0FDYi9hLFVBQWEsSUFHYjNDLElBQWEsUUFDYjBkLE1BQWEsUUFDYi9hLFVBQWEsSUFHYjNDLElBQWEsT0FDYjBkLE1BQWEsT0FDYi9hLFVBQWEsRUFDYnVrRSxTQUFhLElBR2JsbkUsSUFBYSxRQUNiMGQsTUFBYSxrQkFDYi9hLFVBQWEsSUFHYjNDLElBQWEsUUFDYjBkLE1BQWEsUUFDYnhaLE9BQWEsRUFDYnZCLFVBQWEsSUFHakJrd0MsU0FFSTd5QyxJQUFRLE9BQ1IwZCxNQUFVLGFBQ1YvYSxVQUFhLElBR2IzQyxJQUFRLE9BQ1IwZCxNQUFVLE9BQ1YvYSxVQUFhLElBR2IzQyxJQUFhLGFBQ2IwZCxNQUFhLFNBQ2IvYSxVQUFhLE1DQXJCNmpFLEVBQWVybUUsVURJZmduRSxjQUFlLFdBRWIsR0FBQUMsR0FBQUMsRUFBQS9pRSxFQUFBcEYsRUFBQW9KLEVBQUFiLEVBQUE2L0QsRUFBQXRpRSxFQUFBdWlFLENBQUEsSUFBYTlrRSxFQUFFM0MsS0FBQ3FwQixXQUFXcStDLGtCQUFrQnQ5RCxVQUE3QyxNQUFPLEVBT1AsS0FMQW85RCxHQUFZLEdBQUksS0FBTSxLQUFNLE1BQzVCaGpFLEVBQU8sK0JBSVBVLEVBQUFsRixLQUFBcXBCLFdBQUFxK0MsaUJBQUF0b0UsRUFBQSxFQUFBdUksRUFBQXpDLEVBQUF2RSxPQUFBdkIsRUFBQXVJLEVBQUF2SSxJQ0pFa29FLEVBQWFwaUUsRUFBSTlGLEdES2pCbW9FLEVBQVFELEVBQVdHLEtBQ25Cai9ELEVBQVNuRSxTQUFTQyxLQUFLNFUsTUFBTTVVLEtBQUs2SCxJQUFJbzdELEdBQVNqakUsS0FBSzZILElBQUksUUFDeERzN0QsRUFBU25qRSxLQUFLNE0sU0FBU3EyRCxFQUFRampFLEtBQUs4TSxJQUFJLEtBQU01SSxHQUFRLEdBQUssSUFBTWcvRCxFQUFTaC9ELEdBQzFFaEUsR0FBUSxXQUFXOGlFLEVBQVdLLFNBQVMsS0FBSUYsRUFBSyxhQUlsRCxPQUZBampFLElBQVEsWUNBVmtpRSxFQUFlcm1FLFVESWZ1bkUsV0FBWSxTQUFDNWtFLEdBRVgsR0FBQTZrRSxFQ0hBLE9ER0FBLEdBQU83a0UsRUFBTWMsT0FBT2drRSxNQUFNLEdBRTFCOW5FLEtBQUNxcEIsV0FBVzArQyxlQUNWRixLQUFNQSxFQUNON2hFLE1BQU8sU0FBQUYsR0NKTCxNRElLLFlDSEgsTURJRjNHLE9BQU1rUCxTQUFTLHNCQURWck8sTUFFUDZGLFFBQVMsU0FBQUMsR0NEUCxNRENPLFlDQUwsTURDRjNHLE9BQU1rUCxTQUFTLG1CQURSck8sTUFFVHVULFNBQVUsU0FBQXpOLEdDRVIsTURGUSxZQ0dOLE1ERkZBLEdBQUN1akIsV0FBV2hpQixPQUNWeEIsUUFBUyxXQ0dMLE1ESFFDLEdBQUNJLGNBRlBsRyxTQ2FkMG1FLEVBQWVybUUsVURSZjZGLE9BQVEsV0FFTixHQUFBOGhFLEdBQUF4akUsRUFBQXlqRSxFQUFBQyxDQ2NBLE9EZEFBLEdBQWVsb0UsS0FBQ21vRSxrQkFFaEJILEVBQWUscURBRWZDLEVBQWEsa0xBTWJ6akUsRUFBTyxtQ0FFNkIrRSxFQUFFLFFBQVEsaUlBSUZ2SixLQUFDcXBCLFdBQVdybkIsR0FBR3ljLFVBQVUsR0FBRyxpREFHbEV5cEQsRUFBYSxZQUdmRCxHQUFjLElBQUcsYUFHakJELEVBSUpob0UsS0FBQ3NGLElBQUlkLEtBQUtBLEdBRVZ4RSxLQUFDb29FLGFBRURwb0UsS0FBQzZjLFFBQVEsYUNoQlg2cEQsRUFBZXJtRSxVRGtCZituRSxXQUFZLFdDaEJWLE1EaUJBcG9FLE1BQUNzRixJQUFJQyxLQUFLLG9CQUFvQmYsS0FBS3hFLEtBQUNxcEIsV0FBVzVkLGlCQUFpQixTQUNoRXpMLEtBQUNzRixJQUFJQyxLQUFLLGtCQUFrQmYsS0FBSyxtQ0NmbkNraUUsRUFBZXJtRSxVRG1CZmdvRSxTQUFVLFdBQ1IsR0FBQUMsRUNoQkEsT0RnQkFBLEdBQU10b0UsS0FBQ3NGLElBQUlDLEtBQUssb0JBQW9CZixLQUFLLGtDQUFrQ3hFLEtBQUNxcEIsV0FBVzVkLGlCQUFpQixRQUFRLE1BQ2hINjhELEVBQUkvaUUsS0FBSyxTQUFTZCxTQUNsQnpFLEtBQUNzRixJQUFJQyxLQUFLLGtCQUFrQmYsS0FBSyxzRUNmbkNraUUsRUFBZXJtRSxVRG9CZmtvRSxTQUFVLFdBQ1IsR0FBQXhqRCxFQ2xCQSxPRGtCQUEsR0FBVS9rQixLQUFDc0YsSUFBSUMsS0FBSyxhQUFhRixNQUNqQ3JGLEtBQUNxcEIsV0FBV3pqQixNQUNWaEUsS0FBT21qQixJQUVQbGYsUUFBUyxTQUFBQyxHQ2xCUCxNRGtCTyxZQ2hCTCxNRGlCRjNHLE9BQU00RyxTQUFTLGNBQ2ZELEVBQUNzaUUsZUFGTXBvRSxNQUdUZ0csTUFBTyxTQUFBRixHQ2ZMLE1EZUssWUNiSCxNRGNGM0csT0FBTTRHLFNBQVMsNENBQ2ZELEVBQUNzaUUsZUFGSXBvRSxTQ1BYMG1FLEVBQWVybUUsVURXZm1vRSxlQUFnQixXQ1ZkLE1EVWlCeG9FLE1BQUNvb0UsY0NQcEIxQixFQUFlcm1FLFVEU2ZrL0QsWUFBYSxXQ1JYLE1EUWN2L0QsTUFBQ3NGLElBQUlDLEtBQUssNEJBQTRCZixLQUFLeEUsS0FBQ21vRSxvQkNMNUR6QixFQUFlcm1FLFVET2Y4bkUsZ0JBQWlCLFNBQUNsVyxHQUVoQixHQUFBd1csR0FBQUMsRUFBQWxrRSxFQUFBcEYsRUFBQTJ1QyxFQUFBMStCLEVBQUExSCxFQUFBd0YsRUFBQTRtRCxFQUFBNFUsRUFBQXY3RCxFQUFBZ1UsRUFBQWxjLEVBQUFDLEVBQUFtYyxFQUFBOUMsQ0FBQWhhLEdBQU8sMkJBRVBBLEdBQVEsVUFTUnhFLEtBQUM0b0Usa0JBQW9CLEdBQUkvbkUsVUFBUzhGLFdBQVczRyxLQUFDd2UsU0FBU3ZhLE9BQU84RCxLQUFNLFNBQUNLLEVBQUVDLEdBR3JFLE1BRkFELEdBQUksR0FBR0EsRUFBRTFGLElBQUksWUFBYzBGLEVBQUUxRixJQUFJLFFBQVUwRixFQUFFMUYsSUFBSSxTQUNqRDJGLEVBQUksR0FBR0EsRUFBRTNGLElBQUksWUFBYzJGLEVBQUUzRixJQUFJLFFBQVUyRixFQUFFM0YsSUFBSSxTQUM1QzBGLEVBQUlDLEtBRUpELEVBQUlDLEVBQ0EsRUFDRixLQUNONEIsYUFBYSxZQUVoQi9FLEVBQUFsRixLQUFBNG9FLGlCQUFBLEtBQUE3VSxJQUFBN3VELEdBRUUsSUNmQXNaLEVBQVd0WixFQUFJNnVELEdEY2Z2dkQsR0FBUSwyQkFDUnBGLEVBQUEsRUFBQXVJLEVBQUE2VyxFQUFBN2QsT0FBQXZCLEVBQUF1SSxFQUFBdkksSUFBQSxDQUtFLElDakJBa2lCLEVBQVU5QyxFQUFTcGYsR0RhbkIydUMsRUFBUSxLQUNSNDZCLEVBQVUsS0FDVkQsRUFBYUQsRUFBVyxHQUV4QnRqRSxFQUFBbkYsS0FBQW1uRSxrQkFBQTdsRCxFQUFBNWUsSUFBQSxjQUFBMk0sRUFBQSxFQUFBbEMsRUFBQWhJLEVBQUF4RSxPQUFBME8sRUFBQWxDLEVBQUFrQyxJQ1hFakMsRUFBT2pJLEVBQUtrSyxHRFlacTVELEdBQWMsT0FBT3Q3RCxFQUFLd1EsTUFBTSxRQUNoQzZxRCxHQUFZem9FLEtBQUM2b0UsU0FBU3o3RCxFQUFNa1UsRUFFOUI5YyxJQUFRLE9BQU9ra0UsRUFBVyxRQUMxQmxrRSxHQUFRLE9BQU9pa0UsRUFJZmprRSxHQUFRLGdDQUVzQjhjLEVBQVF0ZixHQUFHLG1KQUNrQ3NmLEVBQVF0ZixHQUFHLDREQUN2RHNmLEVBQVF0ZixHQUFHLCtGQU1YLFNBQTVCc2YsRUFBUTVlLElBQUksZUFDYnFyQyxFQUFRenNCLEVBQVE1ZSxJQUFJLFNBQVMrWixLQUFLLEtBQ2xDalksR0FBUSxvQkFBb0J4RSxLQUFDbW5FLGtCQUFrQixLQUFReG1FLE9BQU8sS0FBSW90QyxFQUFNLGNBRTNDLFdBQTVCenNCLEVBQVE1ZSxJQUFJLGNBQTRCLE1BQUExQyxLQUFBaW5FLG9CQUFBM2xELEVBQUF0ZixNQUN6QzJtRSxFQUFVLFdDdEJSLEdBQUlqaEUsR0FBR3NaLEVBQU1taUIsRUFBTWw3QixDQUduQixLRG1CU2s3QixFQUFBbmpDLEtBQUFpbkUsb0JBQUEzbEQsRUFBQXRmLElBQUFpRyxLQUFBUCxFQUFBLEVBQUFzWixFQUFBbWlCLEVBQUF4aUMsT0FBQStHLEVBQUFzWixFQUFBdFosSUNsQlAwWixFQUFXK2hCLEVBQUt6N0IsR0FDaEJPLEVBQVFKLEtEaUJEdVosRUFBUzFlLElBQUksVUNmdEIsT0FBT3VGLElBQ043SCxLQUFLSixNRGM0RXljLEtBQUssTUFDekZqWSxHQUFRLG9CQUFvQnhFLEtBQUNtbkUsa0JBQWtCLE9BQVV4bUUsT0FBTyxLQUFJZ29FLEVBQVEsY0FRbEYsTUFMQW5rRSxJQUFRLHFCQ1RWa2lFLEVBQWVybUUsVURnQmZ3b0UsU0FBVSxTQUFDejdELEVBQU1rVSxHQUdmLEdBQUFwZixHQUFBRSxFQUFBSSxDQVVBLE9BVkFBLEdBQVcsTUFBQTRLLEVBQUFsTixJQUFpQm9oQixFQUFRNWUsSUFBSTBLLEVBQUtsTixLQUFhLFNBQzFEc0MsRUFBVzRLLEVBQUtqTCxPQUFZbWYsRUFBUW5mLE9BQU9pTCxFQUFLbE4sS0FBVXNDLEVBQ2xDLE1BQUE0SyxFQUFBaEosUUFBeEI1QixFQUFRQSxFQUFNN0IsUUFDSSxNQUFBNkIsSUFBbEJBLEVBQVEsSUFHUk4sRUFBaUJrTCxFQUFLdkssU0FBYyx3QkFBNkIsR0FFakVULEVBQWlCTyxFQUFFSSxTQUFTUCxHQUFZLHVCQUE0Qix3QkFFN0QsbURBQW1EOGUsRUFBUXRmLEdBQUcsZUFBY29MLEVBQUtsTixJQUFJLGlCQUFnQnNDLEVBQU0sS0FBSU4sRUFBVSxJQUFHRSxFQUFZLElBQUdJLEVBQU0sZUNkMUpra0UsRUFBZXJtRSxVRGlCZlksWUFBYSxTQUFDK0IsR0FFWixHQUFBRSxHQUFBQyxFQUFBMmxFLEVBQUExbEUsRUFBQUMsRUFBQUMsRUFBQVAsRUFBQTdDLEVBQUFxRCxFQUFBRSxFQUFBNmQsRUFBQUksRUFBQS9kLENBQUEsS0FBVTNELEtBQUM0RCxpQkFDWDVELEtBQUM0RCxnQkFBaUIsRUFLbEJWLEVBQVFXLEVBQUViLEVBQU1jLFNBRVksT0FBekJaLEVBQU1rSyxLQUFLLGFBQ1psSyxFQUFRQSxFQUFNcUMsS0FBSyxRQUNPLElBQWhCckMsRUFBTXZDLFdBQ2xCbW9FLEVBQU81bEUsRUFBTXBELFNBRWJFLEtBQUMrb0UsU0FBVzdsRSxFQUFNZ2xCLFFBRWlCLGFBQXpCaGxCLEVBQU1rSyxLQUFLLGFDRHJCLE1ER0E5SixHQUFlbkUsTUFBTW1FLE9BRXJCcEQsRUFBZWdELEVBQU1jLEtBQUssWUFDMUJqQixFQUE4QyxTQUEvQkcsRUFBTWMsS0FBSyxpQkFFMUIwZCxFQUFleGUsRUFBTWMsS0FBSyxrQkFDMUJzZCxFQUFldGhCLEtBQUN3ZSxTQUFTOWIsSUFBSWdmLEdBQzdCamUsRUFBZTZkLEVBQVE1ZSxJQUFJeEMsR0FFM0JpRCxFQUFVVSxFQUFFYixFQUFNYyxRQUNsQlQsR0FBV0YsRUFBUWEsS0FBSyxVQUFZLElBQUlFLFFBQVEsV0FBVyxJQUMzRFgsRUFBVUosRUFBUWdCLElBQUksVUFHaUIsVUFBUGpFLElBQWhDdUQsRUFBV0EsRUFBU2daLEtBQUssTUFFekI5WSxFQUFvQixrQkFBa0JaLEVBQVMsZUFBYzdDLEVBQUkscUJBQW9Cd2hCLEVBQVUsS0FHL0ZvbkQsRUFBSXRrRSxLQUFLLGlCQUFpQmxCLEVBQUssS0FBSUssRUFBa0IsbUJBQWtCTixFQUFRLG1CQUFrQkUsRUFBUSxLQUFJRSxFQUFTLGVBRXRITCxFQUFZUyxFQUFFLElBQUlQLEdBQ2xCRixFQUFVaWxCLFNDdEJacStDLEVBQWVybUUsVUR3QmZXLFFBQVMsU0FBQ2dDLEdBRVIsR0FBQUcsR0FBQTJsRSxFQUFBbmtFLEVBQUE1QixFQUFBN0MsRUFBQStFLEVBQUF4QixFQUFBNmQsRUFBQUksQ0FHQSxPQUhBdmUsR0FBVVUsRUFBRWIsRUFBTWMsUUFDbEJnbEUsRUFBTTNsRSxFQUFRckQsU0FFSSxLQUFma0QsRUFBTW9DLE9BQTZCLGFBQWRwQyxFQUFNVixNQUM1QmEsRUFBUXlHLFNBQ1JrL0QsRUFBSXRrRSxLQUFLeEUsS0FBQytvRSxlQUNWL29FLEtBQUM0RCxnQkFBaUIsSUFJYyxLQUFmWixFQUFNb0MsT0FBOEIsWUFBZHBDLEVBQU1WLE9BRS9DdEMsS0FBQzRELGdCQUFpQixFQUVsQjFELEVBQWVpRCxFQUFRYSxLQUFLLFlBQzVCakIsRUFBZ0QsU0FBakNJLEVBQVFhLEtBQUssaUJBRTVCMGQsRUFBZXZlLEVBQVFhLEtBQUssa0JBQzVCc2QsRUFBZXRoQixLQUFDd2UsU0FBUzliLElBQUlnZixHQUM3QmplLEVBQWU2ZCxFQUFRNWUsSUFBSXhDLEdBRTNCK0UsRUFBVzlCLEVBQVFrQyxNQUNuQkosRUFBY2xDLEVBQWNzQixTQUFTWSxHQUFlQSxFQUsxQyxVQUFQL0UsSUFFRCtFLEVBQVdBLEVBQVNmLFFBQVEsT0FBUSxLQUNqQyxPQUFPZzFCLEtBQUtqMEIsSUFBZWdCLE1BQU0seURBQ3BDaEIsRUFBV3RDLEVBQUV5c0IsUUFBUW5xQixFQUFTZ1UsTUFBTSxPQUduQ3pULE9BQU9QLEtBQWFPLE9BQU8vQixLQUM1QmtCLEtBQ0FBLEVBQVd6RSxHQUFPK0UsRUFDbEJxYyxFQUFRMWIsS0FBS2pCLEdBQ1hrQixRQUFTLFNBQUFDLEdDL0JQLE1EK0JPLFlDN0JMLE1EOEJGM0csT0FBTWtQLFNBQVMsaUJBQ2ZpVCxFQUFRamEsT0FDTnhCLFFBQVMsV0M5QkwsTUQrQkZDLEdBQUN5NUQsbUJBSkV2L0QsTUFLVGdHLE1BQU8sU0FBQUYsR0MxQkwsTUQwQkssWUN6QkgsTUQwQkZ3YixHQUFRamEsT0FDTnhCLFFBQVMsV0N4QkwsTUR5QkZDLEdBQUN5NUQsY0FHRHQ1RCxNQUFNLDREQU5MakcsVUFTSixJQ3JCVDBtRSxFQUFlcm1FLFVEdUJmZ3NCLE9BQVEsV0N0Qk4sTUR1QkExdEIsV0FBVW9XLE9BQU9DLFNBQVMsZUFBZSxJQ3BCM0MweEQsRUFBZXJtRSxVRHNCZjJvRSxpQkFBa0IsV0FDaEIsR0FBRzEvRCxRQUFRLHNCQUFzQnRKLEtBQUNxcEIsV0FBVzNtQixJQUFJLFFBQVEsS0NyQnZELE1Ec0JBMUMsTUFBQ3FwQixXQUFXckwsUUFBUSxTQUFBbFksR0NyQmxCLE1EcUJrQixZQ3BCaEIsTURvQm1CbkgsV0FBVW9XLE9BQU9DLFNBQVMsZUFBZSxLQUE1Q2hWLFFDZHhCMG1FLEVBQWVybUUsVURtQmYrc0IsV0FBWSxTQUFDcHFCLEdBQ1gsR0FBQU0sR0FBQTJsRSxFQUFBNW9FLEVBQUFpaEIsRUFBQTRrRCxDQ05BLE9ETUE3bEUsR0FBWXdELEVBQUViLEVBQU1jLFFBQVFFLEtBQUssa0JBQ2pDVixFQUFPbkUsTUFBTW1FLE9BRWI0aUUsR0FDRXR3RCxJQUFpQnRTLEVBQ2pCZ29CLGFBQWlCdHJCLEtBQUNxcEIsV0FBV3JuQixHQUM3QjNCLFVBQWlCQSxFQUNqQjh0QyxzQkFBeUIsRUFDekIyQixXQUFjLEdBRWhCbTVCLEVBQWF0cUUsVUFBVTZ1QixVQUFVOXFCLElBQUksY0FDckN3akUsRUFBb0JyaUUsRUFBRWpFLE9BQU9xcEUsRUFBVzVvRSxHQUFZNmxFLEdBRXBENWtELEVBQVUsR0FBSUUsU0FBUTBrRCxHQUN0QjVrRCxFQUFRMWIsS0FBSyxNQUNYQyxRQUFTLFdDbkJQLE1Eb0JBbEgsV0FBVW9XLE9BQU9DLFNBQVMsaUJBQWlCMVIsR0FBUSxJQUNyRDBDLE1BQU8sV0NsQkwsTURtQkFDLE9BQU0sdUVDZFp5Z0UsRUFBZXJtRSxVRGdCZjg0QixjQUFlLFNBQUNuMkIsR0FDZCxHQUFBc2UsR0FBQUksQ0FFQSxJQUZBQSxFQUFZN2QsRUFBRWIsRUFBTWMsUUFBUUUsS0FBSyxrQkFDakNzZCxFQUFVdGhCLEtBQUN3ZSxTQUFTOWIsSUFBSWdmLEdBQ3JCcFksUUFBUSxtQkFBbUJnWSxFQUFRNWUsSUFBSSxRQUFRLEtDZGhELE1EZUE0ZSxHQUFRdEQsU0FDTm5ZLFFBQVMsU0FBQUMsR0NkUCxNRGNPLFlDWkwsTURhRkEsR0FBQzBZLFNBQVM1VSxPQUFPOFgsR0FDakI1YixFQUFDeTVELGdCQUZNdi9ELE1BR1RnRyxNQUFPLFNBQUFGLEdDWEwsTURXSyxZQ1ZILE1EV0ZHLE9BQU0saURBRERqRyxTQ0hOMG1FLEdEblpvQjdsRSxTQUFTc0Y7OztBRUR0QyxHQUFBbXFELFdBQUExd0QsT0FBQSxTQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEtBQUFDLEtBQUFDLFlBQUFKLEVBQUEsSUFBQSxHQUFBSyxLQUFBSixHQUFBSyxRQUFBQyxLQUFBTixFQUFBSSxLQUFBTCxFQUFBSyxHQUFBSixFQUFBSSxHQUFBLE9BQUFILEdBQUFNLFVBQUFQLEVBQUFPLFVBQUFSLEVBQUFRLFVBQUEsR0FBQU4sR0FBQUYsRUFBQVMsVUFBQVIsRUFBQU8sVUFBQVIsR0NFRU0sV0FBYUksY0RGVCt2RCxXQUFBLFNBQUF2dkQsR0NPSixRQUFTdXZELEtBQ1AsTUFBT0EsR0FBVWh3RCxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQU9yRCxNQVZBQyxRQUFPMHdELEVBQVd2dkQsR0FNbEJ1dkQsRUFBVWp3RCxVRFRWb1MsSUFBTSxhQ1dONjlDLEVBQVVqd0QsVURWVnNCLE1BQVEwcEIsV0NZRGlsQyxHRGZlenZELFNBQVM4Rjs7O0FFQWpDLEdBQUF1aUUsZUFBQXRwRSxPQUFBLFNBQUFDLEVBQUFDLEdBQUEsUUFBQUMsS0FBQUMsS0FBQUMsWUFBQUosRUFBQSxJQUFBLEdBQUFLLEtBQUFKLEdBQUFLLFFBQUFDLEtBQUFOLEVBQUFJLEtBQUFMLEVBQUFLLEdBQUFKLEVBQUFJLEdBQUEsT0FBQUgsR0FBQU0sVUFBQVAsRUFBQU8sVUFBQVIsRUFBQVEsVUFBQSxHQUFBTixHQUFBRixFQUFBUyxVQUFBUixFQUFBTyxVQUFBUixHQ0VFTSxXQUFhSSxjREZUMm9FLGVBQUEsU0FBQW5vRSxHQ09KLFFBQVNtb0UsS0FDUCxNQUFPQSxHQUFjNW9FLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBb0N6RCxNQXZDQUMsUUFBT3NwRSxFQUFlbm9FLEdBTXRCbW9FLEVBQWM3b0UsVURUZGlXLFVBQVksZ0JDV1o0eUQsRUFBYzdvRSxVRFRkYyxRQUNFbW1CLGdCQUFrQixhQUNsQnNFLGNBQWtCLFVDWXBCczlDLEVBQWM3b0UsVURWZGdzQixPQUFRLFdDV04sTURYUzVpQixTQUFRQyxRQ2NuQncvRCxFQUFjN29FLFVEWmQ4b0UsV0FBWSxXQ2FWLE1EWkF4cUUsV0FBVW9XLE9BQU9DLFNBQVMsb0JBQW9CLElDZWhEazBELEVBQWM3b0UsVURiZGlkLFdBQVksU0FBQzliLEdDY1gsTURiQXhCLE1BQUNzeEQsUUFBVSxHQUFJOW5DLG9CQUNiRixVQUFZOW5CLEVBQVE4bkIsYUNpQnhCNC9DLEVBQWM3b0UsVURmZDZGLE9BQVEsV0NtQk4sTURsQkFsRyxNQUFDc0YsSUFBSWQsS0FBSyxtQ0FDMEIrRSxFQUFFLFFBQVEsZ0RBQ1hBLEVBQUUsVUFBVSxrREFLL0N2SixLQUFDc3hELFFBQVEvbUMsV0FBV3ZxQixLQUFDc0YsSUFBSUMsS0FBSyxvQkFDOUJ2RixLQUFDc3hELFFBQVFwckQsU0FFVGxHLEtBQUM2YyxRQUFRLGFDV1hxc0QsRUFBYzdvRSxVRFRkeUosUUFBUyxXQUNQLEdBQUE1RSxFQ1VBLE9BQStCLFFBQXZCQSxFQUFNbEYsS0FBS3N4RCxTQUFtQnBzRCxFRFY1QnlFLFFBQVYsUUNhS3UvRCxHRDVDbUJyb0UsU0FBU3NGOzs7QUVBckMsR0FBQXFqQixtQkFBQWpxQixLQUFBLFNBQUFDLEVBQUFDLEdBQUEsTUFBQSxZQUFBLE1BQUFELEdBQUFFLE1BQUFELEVBQUFFLGFDRUVDLE9BQVMsU0FBU0MsRUFBT0MsR0FBK0YsUUFBU0MsS0FBU0MsS0FBS0MsWUFBY0osRUFBMUgsSUFBSyxHQUFJSyxLQUFPSixHQUFjSyxRQUFRQyxLQUFLTixFQUFRSSxLQUFNTCxFQUFNSyxHQUFPSixFQUFPSSxHQUEySixPQUFyR0gsR0FBS00sVUFBWVAsRUFBT08sVUFBV1IsRUFBTVEsVUFBWSxHQUFJTixHQUFRRixFQUFNUyxVQUFZUixFQUFPTyxVQUFrQlIsR0FDbFJNLFdBQWFJLGNESFRpcEIsbUJBQUEsU0FBQXpvQixHQ1FKLFFBQVN5b0IsS0FFUCxNQURBeHBCLE1BQUtrRyxPQUFTM0csS0FBS1MsS0FBS2tHLE9BQVFsRyxNQUN6QndwQixFQUFrQmxwQixVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQWlEN0QsTUFyREFDLFFBQU80cEIsRUFBbUJ6b0IsR0FPMUJ5b0IsRUFBa0JucEIsVURYbEJpVyxVQUFXLG9CQ2FYa1QsRUFBa0JucEIsVURabEJvaUIsUUFBUyxLQ2NUK0csRUFBa0JucEIsVURabEJpZCxXQUFZLFNBQUM5YixHQUNYLEdBQUFvRCxFQ2VBLE9EZkE1RSxNQUFDMjJCLFNBQ0QzMkIsS0FBQ3NwQixVQUFZOW5CLEVBQVE4bkIsVUNjd0IsbUJBQTlCMWtCLEVBQU81RSxLQUFLc3BCLFdBQVd0aUIsR0FBb0JwQyxFRGIvQ29DLEdBQUksTUFBT2hILEtBQUNrRyxRQUFBLFFDZ0J6QnNqQixFQUFrQm5wQixVRGJsQjZGLE9BQVEsV0FDTixHQUErQixJQUFyQmxHLEtBQUNzcEIsVUFBVTNvQixPQzZCckIsTUQ1QkFYLE1BQUNzRixJQUFJZCxLQUFLLHNCQUNWeEUsS0FBQ3VqQixXQUNEdmpCLEtBQUNzcEIsVUFBVXBoQixLQUFLLFNBQUFwQyxHQ2dCZCxNRGhCYyxVQUFDdWpCLEdBQ2YsR0FBQTNKLEVDc0JFLE9EdEJGQSxHQUFPLEdBQUkwcEQsNEJBQ1QvL0MsV0FBZUEsSUFDakIzSixFQUFLeFosU0FDTEosRUFBQ1IsSUFBSXFlLE9BQU9qRSxFQUFLNUMsSUFDakJoWCxFQUFDNndCLE1BQU05dUIsS0FBSzZYLEtBTEUxZixPQU9oQkEsS0FBQzZjLFFBQVEsYUNzQlgyTSxFQUFrQm5wQixVRHBCbEJ5SixRQUFTLFdDcUJQLE1EcEJBOUosTUFBQ3VqQixjQ3VCSGlHLEVBQWtCbnBCLFVEckJsQmtqQixXQUFZLFdBQ1YsR0FBQW5rQixHQUFBdUksRUFBQXpDLEVBQUErQyxFQUFBeVgsQ0N3QkEsS0R4QkF4YSxFQUFBbEYsS0FBQTIyQixNQUFBMXVCLEtBQUE3SSxFQUFBLEVBQUF1SSxFQUFBekMsRUFBQXZFLE9BQUF2QixFQUFBdUksRUFBQXZJLElDeUJFc2dCLEVBQU94YSxFQUFJOUYsR0FDWDZJLEVBQVFKLEtBQTJCLGtCQUFmNlgsR0FBSy9WLE1EekJ6QitWLEVBQUsvVixRQUFBLE9DMkJQLE9BQU8xQixJQUdGdWhCLEdEM0R1QjNvQixTQUFTc0Y7OztBRUF6QyxHQUFBaWpFLDJCQUFBN3BFLEtBQUEsU0FBQUMsRUFBQUMsR0FBQSxNQUFBLFlBQUEsTUFBQUQsR0FBQUUsTUFBQUQsRUFBQUUsYUNFRUMsT0FBUyxTQUFTQyxFQUFPQyxHQUErRixRQUFTQyxLQUFTQyxLQUFLQyxZQUFjSixFQUExSCxJQUFLLEdBQUlLLEtBQU9KLEdBQWNLLFFBQVFDLEtBQUtOLEVBQVFJLEtBQU1MLEVBQU1LLEdBQU9KLEVBQU9JLEdBQTJKLE9BQXJHSCxHQUFLTSxVQUFZUCxFQUFPTyxVQUFXUixFQUFNUSxVQUFZLEdBQUlOLEdBQVFGLEVBQU1TLFVBQVlSLEVBQU9PLFVBQWtCUixHQUNsUk0sV0FBYUksY0RIVDZvRSwyQkFBQSxTQUFBcm9FLEdDUUosUUFBU3FvRSxLQUVQLE1BREFwcEUsTUFBSyxVQUFZVCxLQUFLUyxLQUFLLFVBQVdBLE1BQy9Cb3BFLEVBQTBCOW9FLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBaUVyRSxNQXJFQUMsUUFBT3dwRSxFQUEyQnJvRSxHQU9sQ3FvRSxFQUEwQi9vRSxVRFgxQmlXLFVBQVksNEJDYVo4eUQsRUFBMEIvb0UsVURaMUJvaUIsUUFBUyxLQ2NUMm1ELEVBQTBCL29FLFVEWjFCYyxRQUNFa29FLHFCQUF1QixhQUN2QkMsbUJBQXVCLFlBQ3ZCcGpCLGdCQUEwQixlQUMxQm5zQix1QkFBMEIsZUFDMUJ3dkMsd0JBQTBCLFVDZTVCSCxFQUEwQi9vRSxVRFYxQmlkLFdBQVksU0FBQzliLEdDWVgsTURYQXhCLE1BQUNxcEIsV0FBYTduQixFQUFRNm5CLFdBQ3RCcnBCLEtBQUN3ZSxTQUFXaGQsRUFBUWdkLFVDYXRCNHFELEVBQTBCL29FLFVEWDFCZ2dCLFVBQVcsV0FDVCxHQUFBMEUsRUNhQSxPRGJBQSxHQUFVLFdBQWEva0IsS0FBQ3FwQixXQUFXM21CLElBQUksUUFDdkMxQyxLQUFDcXBCLFdBQVdoSixXQUFZemUsS0FBT21qQixHQUFXLEtBQU0sS0FBTSxTQUFBamYsR0NlcEQsTURmb0QsVUFBQ3VqQixHQ2dCbkQsTURmRnZqQixHQUFDdWpCLFdBQVd4TSxRQUFRLE1BQU93TSxLQUR5QnJwQixRQ3FCeERvcEUsRUFBMEIvb0UsVURsQjFCbXBFLFdBQVksV0NvQlYsTURuQkF4cEUsTUFBQ3NGLElBQUlDLEtBQUssdUJBQXVCbWdCLFlBQVksV0FBV0EsWUFBWSxZQUNwRTFsQixLQUFDc0YsSUFBSUMsS0FBSyxTQUFTZzFCLFdBQVcsTUNxQmhDNnVDLEVBQTBCL29FLFVEbkIxQm9wRSxhQUFjLFdDcUJaLE1EckJlenBFLE1BQUNzRixJQUFJQyxLQUFLLG1CQUFtQmcxQixXQUFXLE1BQU0sR0N3Qi9ENnVDLEVBQTBCL29FLFVBQVUsVURyQjVCLFdDc0JOLE1EcEJBTCxNQUFDcXBCLFdBQVdyTCxXQ3VCZG9yRCxFQUEwQi9vRSxVRHBCMUI2RixPQUFRLFdBQ04sR0FBQThoRSxHQUFBeGhELEVBQUFDLEVBQUFpakQsRUFBQUMsRUFBQUMsRUFBQWhvRSxFQUFBZ2xCLENDbUNBLE9EbkNBQSxHQUFrQix1REFDbEIraUQsRUFBa0Isd0JBQXdCM3BFLEtBQUNxcEIsV0FBV3JuQixHQUFHLDZFQUN6RDBuRSxFQUFrQixzRkFDbEIxQixFQUFrQiw2RUFDbEJ4aEQsRUFBa0IsdUxBQ2xCQyxFQUFrQix5REFBeUR6bUIsS0FBQ3FwQixXQUFXcm5CLEdBQUd5YyxVQUFVLEdBQUcsY0FFdkc3YyxFQUFPLDZCQUE2QjVCLEtBQUNxcEIsV0FBV2xuQixPQUFPLFFBQVEsVUFPMUR4RCxVQUFVc00sS0FBS29LLFlBTnBCdTBELEVBQ0lELEVBQVcsSUFDWEQsRUFBZ0IsSUFDaEIxQixFQUFhLElBQ2J2aEQsRUFBWSxJQUNaRCxHQU1LN25CLFVBQVVzTSxLQUFLb0ssWUFIeEJ1MEQsRUFDSUQsRUFBVyxJQUNYbGpELEdBR0p6bUIsS0FBQ3NGLElBQUlkLEtBQUssU0FFSm9pQixFQUFhLElBQ2JobEIsRUFBSyxpREFJSGdvRSxFQUFLLGtCQUtiNXBFLEtBQUM2YyxRQUFRLGFDS0p1c0QsR0QzRStCdm9FLFNBQVNzRjs7O0FFQWpELEdBQUEwakUsU0FBQWpxRSxPQUFBLFNBQUFDLEVBQUFDLEdBQUEsUUFBQUMsS0FBQUMsS0FBQUMsWUFBQUosRUFBQSxJQUFBLEdBQUFLLEtBQUFKLEdBQUFLLFFBQUFDLEtBQUFOLEVBQUFJLEtBQUFMLEVBQUFLLEdBQUFKLEVBQUFJLEdBQUEsT0FBQUgsR0FBQU0sVUFBQVAsRUFBQU8sVUFBQVIsRUFBQVEsVUFBQSxHQUFBTixHQUFBRixFQUFBUyxVQUFBUixFQUFBTyxVQUFBUixHQ0VFTSxXQUFhSSxjREZUc3BFLFNBQUEsU0FBQTlvRSxHQ09KLFFBQVM4b0UsS0FDUCxNQUFPQSxHQUFRdnBFLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBS25ELE1BUkFDLFFBQU9pcUUsRUFBUzlvRSxHQU1oQjhvRSxFQUFReHBFLFVEVlJvUyxJQUFNLFVDWUNvM0QsR0RiYWhwRSxTQUFTNEY7OztBRUEvQixHQUFBcWpFLFVBQUFscUUsT0FBQSxTQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEtBQUFDLEtBQUFDLFlBQUFKLEVBQUEsSUFBQSxHQUFBSyxLQUFBSixHQUFBSyxRQUFBQyxLQUFBTixFQUFBSSxLQUFBTCxFQUFBSyxHQUFBSixFQUFBSSxHQUFBLE9BQUFILEdBQUFNLFVBQUFQLEVBQUFPLFVBQUFSLEVBQUFRLFVBQUEsR0FBQU4sR0FBQUYsRUFBQVMsVUFBQVIsRUFBQU8sVUFBQVIsR0NFRU0sV0FBYUksY0RGVHVwRSxVQUFBLFNBQUEvb0UsR0NPSixRQUFTK29FLEtBQ1AsTUFBT0EsR0FBU3hwRSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQU9wRCxNQVZBQyxRQUFPa3FFLEVBQVUvb0UsR0FNakIrb0UsRUFBU3pwRSxVRFZUc0IsTUFBUWtvRSxRQ1lSQyxFQUFTenBFLFVEWFRvUyxJQUFNLFVDYUNxM0QsR0RmY2pwRSxTQUFTOEY7OztBRUFoQyxHQUFBZ2tCLGNBQUEvcUIsT0FBQSxTQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEtBQUFDLEtBQUFDLFlBQUFKLEVBQUEsSUFBQSxHQUFBSyxLQUFBSixHQUFBSyxRQUFBQyxLQUFBTixFQUFBSSxLQUFBTCxFQUFBSyxHQUFBSixFQUFBSSxHQUFBLE9BQUFILEdBQUFNLFVBQUFQLEVBQUFPLFVBQUFSLEVBQUFRLFVBQUEsR0FBQU4sR0FBQUYsRUFBQVMsVUFBQVIsRUFBQU8sVUFBQVIsR0NFRU0sV0FBYUksY0RGVG9xQixjQUFBLFNBQUE1cEIsR0NPSixRQUFTNHBCLEtBQ1AsTUFBT0EsR0FBYXJxQixVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQW1QeEQsTUF0UEFDLFFBQU8rcUIsRUFBYzVwQixHQU1yQjRwQixFQUFhdHFCLFVEVGJpVyxVQUFXLGVDV1hxVSxFQUFhdHFCLFVEVGJjLFFBQ0VDLHVCQUEwQixjQUMxQkMsb0JBQXNCLFVBQ3RCQyxvQkFBc0IsVUFDdEJDLG9CQUFzQixVQUN0QndvRSw0QkFBOEIsaUJBQzlCQywwQkFBNEIsZUFDNUJDLDBCQUE0QixlQUM1QkMsaUJBQW1CLFVDWXJCdi9DLEVBQWF0cUIsVURWYmdzQixPQUFRLFdDV04sTURWQTdpQixRQUFPQyxRQUFRQyxRQ2FqQmloQixFQUFhdHFCLFVEWGJpZCxXQUFZLFNBQUM5YixHQ2VYLE1EZEF4QixNQUFDc3FCLFNBQVc5b0IsRUFBUThvQixTQUNwQnRxQixLQUFDNHFCLE1BQVdwcEIsRUFBUW9wQixNQUVwQjVxQixLQUFDbXFFLGlCQUFtQm5xRSxLQUFDNHFCLE1BQU03Z0IsUUFBUSxhQUVuQy9KLEtBQUNvcUUsb0JBR0tscUUsSUFBYSxPQUNiMkMsVUFBYSxFQUNid25FLFlBQWUsSUFHZm5xRSxJQUFhLFFBQ2IwZCxNQUFhLFFBQ2IvYSxVQUFhLEVBQ2J1a0UsU0FBYSxJQUdibG5FLElBQWEsT0FDYjBkLE1BQWEsT0FDYi9hLFVBQWEsRUFDYnVrRSxTQUFhLElBR2JsbkUsSUFBYSxTQUNiMGQsTUFBYSxTQUNiL2EsVUFBYSxJQUdiM0MsSUFBYSxTQUNiMGQsTUFBYSxjQUNiL2EsVUFBYSxJQUdiM0MsSUFBYSxVQUNiMGQsTUFBYSxzQkFDYi9hLFVBQWEsS0NRckI4bkIsRUFBYXRxQixVREpiaXFFLGFBQWMsU0FBQ3RuRSxHQUNiLEdBQUFHLEdBQUE4ekQsQ0FFQSxPQUZBOXpELEdBQVVVLEVBQUViLEVBQU1jLFFBQ2xCbXpELEVBQVk5ekQsRUFBUWEsS0FBSyxrQkFDOEIsYUFBcERoRSxLQUFDc0YsSUFBSUMsS0FBSyxJQUFJMHhELEVBQVUsYUFBWWp6RCxLQUFLLFFBQzFDaEUsS0FBQ3NGLElBQUlDLEtBQUssSUFBSTB4RCxFQUFVLGFBQVlqekQsS0FBSyxPQUFRLFFBRWpEaEUsS0FBQ3NGLElBQUlDLEtBQUssSUFBSTB4RCxFQUFVLGFBQVlqekQsS0FBSyxPQUFRLGFDU3JEMm1CLEVBQWF0cUIsVUROYmtxRSxlQUFnQixTQUFDdm5FLEdBQ2YsR0FBQUcsR0FBQTh6RCxDQ1dBLE9EWEE5ekQsR0FBVVUsRUFBRWIsRUFBTWMsUUFDbEJtekQsRUFBWTl6RCxFQUFRYSxLQUFLLGtCQUN6QmhFLEtBQUNzRixJQUFJQyxLQUFLLElBQUkweEQsRUFBVSxTQUFRdnhDLFlBQVksZ0JBQzVDMWxCLEtBQUNzRixJQUFJQyxLQUFLLElBQUkweEQsR0FBYXRyRCxXQUMzQjNMLEtBQUNzRixJQUFJQyxLQUFLLElBQUkweEQsRUFBVSxhQUFZNXVDLFNDVXRDc0MsRUFBYXRxQixVRFJibXFFLGFBQWMsU0FBQ3huRSxHQUNiLEdBQUFHLEdBQUE4ekQsRUFBQXdULEVBQUFDLENDY0EsT0RkQXZuRSxHQUFVVSxFQUFFYixFQUFNYyxRQUNsQm16RCxFQUFZOXpELEVBQVFhLEtBQUssa0JBRXpCeW1FLEVBQWV6cUUsS0FBQ3NxQixTQUFTNW5CLElBQUl1MEQsR0FDN0J5VCxFQUFlMXFFLEtBQUNtcUUsaUJBQWlCbFQsR0FBVyxHQUM1Q3lULEVBQVVDLFlBQVkzcUUsS0FBQ3NGLElBQUlDLEtBQUssSUFBSTB4RCxFQUFVLGFBQVk1eEQsT0FDMURxbEUsRUFBVTlrRSxLQUFLLE1BQ2JDLFFBQVMsU0FBQUMsR0NTUCxNRFRPLFlDWUwsTURYRjNHLE9BQU1rUCxTQUFTLDRCQUNmdkksRUFBQ1IsSUFBSUMsS0FBSyxJQUFJMHhELEVBQVUsYUFBWTV4RCxJQUFJLElBQ3hDUyxFQUFDUixJQUFJQyxLQUFLLElBQUkweEQsRUFBVSxTQUFRdnhDLFlBQVksa0JBSHJDMWxCLE1BSVRnRyxNQUFPLFNBQUFGLEdDWUwsTURaSyxZQ2FILE1EWkYzRyxPQUFNa1AsU0FBUyxnQkFEVnJPLFNDbUJYMnFCLEVBQWF0cUIsVURkYjZGLE9BQVEsV0FDTixHQUFBOGhFLEdBQUE0QyxDQ2tCQSxPRGxCQUEsR0FBZTVxRSxLQUFDNnFFLGtCQUNoQjdDLEVBQWUscURBRWZob0UsS0FBQ3NGLElBQUlkLEtBQUssd0RBSUpvbUUsRUFBYSxXQUluQjVxRSxLQUFDNmMsUUFBUSxhQ1VYOE4sRUFBYXRxQixVRFJiay9ELFlBQWEsV0NTWCxNRFRjdi9ELE1BQUNzRixJQUFJQyxLQUFLLDRCQUE0QmYsS0FBS3hFLEtBQUM2cUUsb0JDWTVEbGdELEVBQWF0cUIsVURWYndxRSxnQkFBaUIsV0FFZixHQUFBcm1FLEdBQUFwRixFQUFBaVEsRUFBQTFILEVBQUF3RixFQUFBQyxFQUFBbEksRUFBQUMsRUFBQWt6RCxDQUVBLEtBRkE3ekQsRUFBTyxHQUVQVSxFQUFBbEYsS0FBQXNxQixTQUFBcm1CLE9BQUE3RSxFQUFBLEVBQUF1SSxFQUFBekMsRUFBQXZFLE9BQUF2QixFQUFBdUksRUFBQXZJLElBQUEsQ0FPRSxJQ0lBaTVELEVBQVVuekQsRUFBSTlGLEdEVGRvRixHQUFRLHNDQUM2QjZ6RCxFQUFRcjJELEdBQUcsY0FJaERtRCxFQUFBbkYsS0FBQW9xRSxrQkFBQS82RCxFQUFBLEVBQUFsQyxFQUFBaEksRUFBQXhFLE9BQUEwTyxFQUFBbEMsRUFBQWtDLElDUUVqQyxFQUFPakksRUFBS2tLLEdEUFo3SyxHQUFReEUsS0FBQzhxRSxZQUFZMTlELEVBQU1pckQsRUFFN0I3ekQsSUFBUSxnRkFDMkU2ekQsRUFBUXIyRCxHQUFHLDhDQUUxRXEyRCxFQUFRcjJELEdBQUcsNkVBRVdxMkQsRUFBUXIyRCxHQUFHLDhEQUVKcTJELEVBQVFyMkQsR0FBRyxrR0FDTXEyRCxFQUFRcjJELEdBQUcseURBQXdEcTJELEVBQVFyMkQsR0FBRywrRUFFOUVxMkQsRUFBUXIyRCxHQUFHLDhEQVUvRSxNQUFPd0MsSUNQVG1tQixFQUFhdHFCLFVEVWJ5cUUsWUFBYSxTQUFDMTlELEVBQU1pckQsR0FFbEIsR0FBQTdXLEVDTEEsT0RLR3AwQyxHQUFLaTlELFdBQ05qOUQsRUFBS3FWLFFBQVUsS0FFZisrQixFQUFTLE9BQU9wMEMsRUFBS3dRLE1BQU0sUUFFN0IsUUFBTzRqQyxHQUFRLElBQUt4aEQsS0FBQzZvRSxTQUFTejdELEVBQU1pckQsR0FBUyxTQ1AvQzF0QyxFQUFhdHFCLFVEU2J3b0UsU0FBVSxTQUFDejdELEVBQU1pckQsR0FHZixHQUFBbjJELEdBQUFFLEVBQUFxZ0IsRUFBQWpnQixDQVlBLE9BWkFBLEdBQVcsTUFBQTRLLEVBQUFsTixJQUFpQm00RCxFQUFRMzFELElBQUkwSyxFQUFLbE4sS0FBYSxTQUMxRHNDLEVBQVc0SyxFQUFLakwsT0FBWWsyRCxFQUFRbDJELE9BQU9pTCxFQUFLbE4sS0FBVXNDLEVBQ3ZDLE1BQUFBLElBQW5CQSxFQUFRLEtBR1JpZ0IsRUFBVXJWLEVBQUtxVixTQUFXLEtBRzFCdmdCLEVBQWlCa0wsRUFBS3ZLLFNBQWMsZ0JBQXFCLEdBRXpEVCxFQUFpQk8sRUFBRUksU0FBU1AsR0FBWSx1QkFBNEIsd0JBRTdELElBQUlpZ0IsRUFBUSxXQUFVdmdCLEVBQVUsMkJBQTBCbTJELEVBQVFyMkQsR0FBRyxlQUFjb0wsRUFBS2xOLElBQUksaUJBQWdCc0MsRUFBTSxLQUFJTixFQUFVLElBQUdFLEVBQVksSUFBR0ksRUFBTSxXQUFVaWdCLEVBQVEsS0NYbkxrSSxFQUFhdHFCLFVEY2JZLFlBQWEsU0FBQytCLEdBRVosR0FBQUUsR0FBQUMsRUFBQTJsRSxFQUFBMWxFLEVBQUFDLEVBQUFDLEVBQUFQLEVBQUE3QyxFQUFBcUQsRUFBQUUsRUFBQTQwRCxFQUFBcEIsRUFBQXR6RCxDQUFBLEtBQVUzRCxLQUFDNEQsaUJBQ1g1RCxLQUFDNEQsZ0JBQWlCLEVBS2xCVixFQUFRVyxFQUFFYixFQUFNYyxTQUVZLE9BQXpCWixFQUFNa0ssS0FBSyxhQUNabEssRUFBUUEsRUFBTXFDLEtBQUssUUFDTyxJQUFoQnJDLEVBQU12QyxXQUNsQm1vRSxFQUFPNWxFLEVBQU1wRCxTQUViRSxLQUFDK29FLFNBQVc3bEUsRUFBTWdsQixRQUVpQixhQUF6QmhsQixFQUFNa0ssS0FBSyxhQ0VyQixNREFBOUosR0FBZW5FLE1BQU1tRSxPQUVyQnBELEVBQWVnRCxFQUFNYyxLQUFLLFlBQzFCakIsRUFBOEMsU0FBL0JHLEVBQU1jLEtBQUssaUJBRTFCaXpELEVBQWUvekQsRUFBTWMsS0FBSyxrQkFDMUJxMEQsRUFBZXI0RCxLQUFDc3FCLFNBQVM1bkIsSUFBSXUwRCxHQUM3Qnh6RCxFQUNLVixFQUNEczFELEVBQVE3c0QsVUFBVXRMLEdBRWxCbTRELEVBQVE5c0QsVUFBVXJMLEdBRXRCaUQsRUFBVVUsRUFBRWIsRUFBTWMsUUFDbEJULEdBQVdGLEVBQVFhLEtBQUssVUFBWSxJQUFJRSxRQUFRLFdBQVcsSUFDM0RYLEVBQVVKLEVBQVFnQixJQUFJLFVBR2lCLFVBQVBqRSxJQUFoQ3VELEVBQVdBLEVBQVNnWixLQUFLLE1BRXpCOVksRUFBb0Isa0JBQWtCWixFQUFTLGVBQWM3QyxFQUFJLHFCQUFvQisyRCxFQUFVLEtBRy9GNlIsRUFBSXRrRSxLQUFLLGlCQUFpQmxCLEVBQUssS0FBSUssRUFBa0IsbUJBQWtCTixFQUFRLG1CQUFrQkUsRUFBUSxLQUFJRSxFQUFTLGVBRXRITCxFQUFZUyxFQUFFLElBQUlQLEdBQ2xCRixFQUFVaWxCLFNDdkJac0MsRUFBYXRxQixVRHlCYlcsUUFBUyxTQUFDZ0MsR0FFUixHQUFBRyxHQUFBMmxFLEVBQUFua0UsRUFBQTVCLEVBQUE3QyxFQUFBK0UsRUFBQXhCLEVBQUE0MEQsRUFBQXBCLENBR0EsT0FIQTl6RCxHQUFVVSxFQUFFYixFQUFNYyxRQUNsQmdsRSxFQUFNM2xFLEVBQVFyRCxTQUVJLEtBQWZrRCxFQUFNb0MsT0FBNkIsYUFBZHBDLEVBQU1WLE1BQzVCYSxFQUFReUcsU0FDUmsvRCxFQUFJdGtFLEtBQUt4RSxLQUFDK29FLGVBQ1Yvb0UsS0FBQzRELGdCQUFpQixJQUljLEtBQWZaLEVBQU1vQyxPQUE4QixZQUFkcEMsRUFBTVYsT0FFL0N0QyxLQUFDNEQsZ0JBQWlCLEVBRWxCMUQsRUFBZWlELEVBQVFhLEtBQUssWUFDNUJqQixFQUFnRCxTQUFqQ0ksRUFBUWEsS0FBSyxpQkFFNUJpekQsRUFBZTl6RCxFQUFRYSxLQUFLLGtCQUM1QnEwRCxFQUFlcjRELEtBQUNzcUIsU0FBUzVuQixJQUFJdTBELEdBQzdCeHpELEVBQWU0MEQsRUFBUTMxRCxJQUFJeEMsR0FFM0IrRSxFQUFXOUIsRUFBUWtDLE1BQ25CSixFQUFjbEMsRUFBY3NCLFNBQVNZLEdBQWVBLEVBSzFDLFVBQVAvRSxJQUVEK0UsRUFBV0EsRUFBU2YsUUFBUSxPQUFRLEtBQ2pDLE9BQU9nMUIsS0FBS2owQixJQUFlZ0IsTUFBTSx5REFDcENoQixFQUFXdEMsRUFBRXlzQixRQUFRbnFCLEVBQVNnVSxNQUFNLE9BR25DelQsT0FBT1AsS0FBYU8sT0FBTy9CLEtBQzVCa0IsS0FDQUEsRUFBV3pFLEdBQU8rRSxFQUNsQm96RCxFQUFRenlELEtBQUtqQixHQUNYa0IsUUFBUyxTQUFBQyxHQ2hDUCxNRGdDTyxZQzlCTCxNRCtCRjNHLE9BQU00RyxTQUFTLGlCQUNmc3lELEVBQVFoeEQsT0FDTnhCLFFBQVMsV0MvQkwsTURnQ0ZDLEdBQUN5NUQsbUJBSkV2L0QsTUFLVGdHLE1BQU8sU0FBQUYsR0MzQkwsTUQyQkssWUMxQkgsTUQyQkZ1eUQsR0FBUWh4RCxPQUNOeEIsUUFBUyxXQ3pCTCxNRDBCRkMsR0FBQ3k1RCxjQUdEdDVELE1BQU0sNERBTkxqRyxVQVNKLElDdEJGMnFCLEdEM1BrQjlwQixTQUFTc0Y7OztBRUFwQyxHQUFBNGtFLHFCQUFBbnJFLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlR3cUUscUJBQUEsU0FBQWhxRSxHQ09KLFFBQVNncUUsS0FDUCxNQUFPQSxHQUFvQnpxRSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQTJHL0QsTUE5R0FDLFFBQU9tckUsRUFBcUJocUUsR0FNNUJncUUsRUFBb0IxcUUsVURUcEJpVyxVQUFZLHNCQ1daeTBELEVBQW9CMXFFLFVEVHBCYyxRQUNFNnBFLGtCQUFvQixXQUNwQmhRLGdCQUFrQixVQ1lwQitQLEVBQW9CMXFFLFVEVnBCaWQsV0FBWSxTQUFFOWIsR0NhWixNRFpBeEIsTUFBQzRCLEtBQU9KLEVBQVFJLEtBQ2hCNUIsS0FBQzhhLEtBQU90WixFQUFRc1osS0FDaEI5YSxLQUFDaXJFLFFBQVUsUUFBUyxPQUFRLFNBQVUsU0FBVSxZQ2FsREYsRUFBb0IxcUUsVURYcEIrb0IsT0FBUSxXQ1lOLE1EWEF6cUIsV0FBVW9XLE9BQU93ZixTQ2NuQncyQyxFQUFvQjFxRSxVRFpwQjZxRSxTQUFVLFdDYVIsTURaQWxyRSxNQUFDa29ELFNBQVMsU0FBQXBpRCxHQ2FSLE1EYlEsWUNjTixNRGRTQSxHQUFDcWxFLGFBQUpuckUsUUNtQlorcUUsRUFBb0IxcUUsVURqQnBCNm5ELFNBQVUsU0FBQ3I4QyxHQUVULEdBQUFvRyxHQUFBNnlCLEVBQUExbEMsRUFBQXVJLEVBQUF6QyxDQUNBLEtBREE0L0IsR0FBUyxFQUNUNS9CLEVBQUFsRixLQUFBaXJFLE9BQUE3ckUsRUFBQSxFQUFBdUksRUFBQXpDLEVBQUF2RSxPQUFBdkIsRUFBQXVJLEVBQUF2SSxJQ21CRTZTLEVBQVUvTSxFQUFJOUYsR0RsQlh1RCxFQUFFeUgsUUFBUXBLLEtBQUVpUyxHQUFTNU0sUUFDdEJyRixLQUFDc0YsSUFBSUMsS0FBSyxJQUFJME0sRUFBUSxZQUFXek4sS0FBSywrQkFDdENzZ0MsR0FBUyxHQUVUOWtDLEtBQUNzRixJQUFJQyxLQUFLLElBQUkwTSxFQUFRLFlBQVd6TixLQUFLLEdBQzFDLE9BQUdzZ0MsR0FDRDNsQyxNQUFNa1AsU0FBUywyQ0FFZnhDLEtDeUJKay9ELEVBQW9CMXFFLFVEdkJwQjhxRSxTQUFVLFdBRVIsR0FBQUMsR0FBQW41RCxFQUFBN1MsRUFBQXVJLEVBQUF6QyxFQUFBbXpELEVBQUFnVCxDQUdBLEtBSEFBLEdBQ0V6cEUsS0FBUzVCLEtBQUM0QixNQUVac0QsRUFBQWxGLEtBQUFpckUsT0FBQTdyRSxFQUFBLEVBQUF1SSxFQUFBekMsRUFBQXZFLE9BQUF2QixFQUFBdUksRUFBQXZJLElDeUJFNlMsRUFBVS9NLEVBQUk5RixHRHpCZmlzRSxFQUFXcDVELEdBQVdqUyxLQUFFaVMsR0FBUzVNLEtDZ0NsQyxPRDlCQStsRSxJQUNFeHBFLEtBQVM1QixLQUFDNEIsTUFFWnkyRCxFQUFVLEdBQUl3UixTQUFRd0IsR0FDdEJoVCxFQUFRenlELE1BQ05nUSxJQUFRelcsTUFBTTJaLGNBRWRqVCxRQUFTLFNBQUFDLEdDMkJQLE1EM0JPLFlDNEJMLE1EM0JGbkgsV0FBVXNNLEtBQUtyRixNQUNicXhELFVBQWNvQixFQUFRcjJELEtBRXRCNkQsUUFBUyxXQzZCTCxNRDVCRjFHLE9BQU1rUCxTQUFTLDBCQUNmMVAsVUFBVXNNLEtBQUtzcEIsTUFBTXp1QixFQUFDbEUsS0FBTWtFLEVBQUNnVixNQUFNalYsUUFBUyxXQzZCdEMsTUQ3QnlDbEgsV0FBVW9XLE9BQU84YyxjQUNsRTdyQixNQUFPLFNBQUNBLEdDaUNKLE1EaENGN0csT0FBTWtQLFNBQVMseUJBQXlCckksRUFBUyxVQVI5Q2hHLFNDZ0RiK3FFLEVBQW9CMXFFLFVEckNwQjZGLE9BQVEsV0FDTixHQUFBK0wsR0FBQTdTLEVBQUF1SSxFQUFBekMsRUFBQThLLENBcUNBLEtBckNBaFEsS0FBQ3NGLElBQUlkLEtBQUssaUhBS3FCeEUsS0FBQzRCLEtBQUssNEVBRU4sV0NnQzdCLEdBQUl4QyxHQUFHdUksRUFBS3pDLEVBQUsrQyxDQUdqQixLRG5DOEIvQyxFQUFBbEYsS0FBQThhLEtBQUE3UyxLQUFBN0ksRUFBQSxFQUFBdUksRUFBQXpDLEVBQUF2RSxPQUFBdkIsRUFBQXVJLEVBQUF2SSxJQ29DNUI0USxFQUFJOUssRUFBSTlGLEdBQ1I2SSxFQUFRSixLRHJDb0IsSUN1QzlCLE9BQU9JLElBQ043SCxLQUFLSixNRHhDNEN5YyxLQUFLLElBQUksdzFCQThCN0R2WCxFQUFBbEYsS0FBQWlyRSxPQUFBN3JFLEVBQUEsRUFBQXVJLEVBQUF6QyxFQUFBdkUsT0FBQXZCLEVBQUF1SSxFQUFBdkksSUNhRTZTLEVBQVUvTSxFQUFJOUYsR0RaZFksS0FBRWlTLEdBQVdqUyxLQUFDc0YsSUFBSUMsS0FBSyxJQUFJME0sRUNlN0IsT0RkQWpTLE1BQUM2YyxRQUFRLGFDaUJKa3VELEdEbkh5QmxxRSxTQUFTc0Y7OztBRUEzQyxHQUFBK3RELFNBQUF0MEQsT0FBQSxTQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEtBQUFDLEtBQUFDLFlBQUFKLEVBQUEsSUFBQSxHQUFBSyxLQUFBSixHQUFBSyxRQUFBQyxLQUFBTixFQUFBSSxLQUFBTCxFQUFBSyxHQUFBSixFQUFBSSxHQUFBLE9BQUFILEdBQUFNLFVBQUFQLEVBQUFPLFVBQUFSLEVBQUFRLFVBQUEsR0FBQU4sR0FBQUYsRUFBQVMsVUFBQVIsRUFBQU8sVUFBQVIsR0NFRU0sV0FBYUksY0RGVDJ6RCxTQUFBLFNBQUFuekQsR0NPSixRQUFTbXpELEtBQ1AsTUFBT0EsR0FBUTV6RCxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQWNuRCxNQWpCQUMsUUFBT3MwRCxFQUFTbnpELEdBTWhCbXpELEVBQVE3ekQsVURUUm9TLElBQU0sVUNXTnloRCxFQUFRN3pELFVEVFJpckUsVUFDRWhVLE9BQVUsY0FDVkMsSUFBVSxjQUNWMzFELEtBQVUsY0FDVnN6RCxRQUFVLE1DWVpoQixFQUFRN3pELFVEVlJpZCxXQUFZLGFDWUw0MkMsR0R0QmFyekQsU0FBUzRGOzs7QUVBL0IsR0FBQTB1RCxVQUFBdjFELE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlQ0MEQsVUFBQSxTQUFBcDBELEdDT0osUUFBU28wRCxLQUNQLE1BQU9BLEdBQVM3MEQsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0FXcEQsTUFkQUMsUUFBT3UxRCxFQUFVcDBELEdBTWpCbzBELEVBQVM5MEQsVURUVHNCLE1BQU91eUQsUUNXUGlCLEVBQVM5MEQsVURWVG9TLElBQUssVUNZTDBpRCxFQUFTOTBELFVEVlRraUIsV0FBWSxTQUFDNWdCLEdDV1gsTURWQUEsR0FBTWUsSUFBSSxRQUFRZ08sZUNhYnlrRCxHRG5CY3QwRCxTQUFTOEY7OztBRUFoQyxHQUFBdXhELHdCQUFBdDRELE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlQyM0Qsd0JBQUEsU0FBQW4zRCxHQ09KLFFBQVNtM0QsS0FDUCxNQUFPQSxHQUF1QjUzRCxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQXVDbEUsTUExQ0FDLFFBQU9zNEQsRUFBd0JuM0QsR0FNL0JtM0QsRUFBdUI3M0QsVURUdkJpVyxVQUFXLHVCQ1dYNGhELEVBQXVCNzNELFVEVnZCb2lCLFFBQVUsS0NZVnkxQyxFQUF1QjczRCxVRFZ2QmMsUUFDRTRrRCxjQUF5QixPQUN6QndsQixnQkFBeUIsZUFDekJDLHVCQUF5QixlQUN6QkMsdUJBQXlCLGlCQ2EzQnZULEVBQXVCNzNELFVEWHZCaWQsV0FBWSxTQUFDOWIsR0NhWCxNRFpBeEIsTUFBQ2kwRCxRQUFVenlELEVBQVF5eUQsUUFDbkJqMEQsS0FBQ3ExRCxTQUFXN3pELEVBQVE2ekQsVUNjdEI2QyxFQUF1QjczRCxVRFp2Qm02QixLQUFTLFdDYVAsTURiVTc3QixXQUFVb1csT0FBT0MsU0FBUyxpQkFBaUJoVixLQUFDaTBELFFBQVFqeUQsSUFBTSxJQ2dCdEVrMkQsRUFBdUI3M0QsVURmdkJxckUsYUFBYyxXQ2dCWixNRGhCZTFyRSxNQUFDc0YsSUFBSUMsS0FBSyw0QkFBNEI4ZixVQ21CdkQ2eUMsRUFBdUI3M0QsVURsQnZCc3JFLGNBQWUsV0NzQmIsTURyQkEzckUsTUFBQ2kwRCxRQUFRM3RELEtBQUk0dUQsUUFBVSxPQUFNdHZELE9BQzdCNUYsS0FBQ3ExRCxTQUFTenJELE9BQU81SixLQUFDaTBELFVDdUJwQmlFLEVBQXVCNzNELFVEckJ2QjZGLE9BQVEsV0N1Qk4sTUR0QkFsRyxNQUFDc0YsSUFBSWQsS0FDRHhFLEtBQUNpMEQsUUFBUXZ4RCxJQUFJLFFBQU8sSUFDcEIxQyxLQUFDaTBELFFBQVF2eEQsSUFBSSxVQUFTLElBQ3RCMUMsS0FBQ2kwRCxRQUFRdnhELElBQUksT0FBTSxpTUFLZjZHLEVBQUUsa0JBQWtCLGtEQUNzQkEsRUFBRSxVQUFVLG1EQUNoQkEsRUFBRSxVQUFVLDJCQUsxRHZKLEtBQUM2YyxRQUFRLGFDVUpxN0MsR0QvQzRCcjNELFNBQVNzRjs7O0FFQTlDLEdBQUF5bEUsaUJBQUFoc0UsT0FBQSxTQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEtBQUFDLEtBQUFDLFlBQUFKLEVBQUEsSUFBQSxHQUFBSyxLQUFBSixHQUFBSyxRQUFBQyxLQUFBTixFQUFBSSxLQUFBTCxFQUFBSyxHQUFBSixFQUFBSSxHQUFBLE9BQUFILEdBQUFNLFVBQUFQLEVBQUFPLFVBQUFSLEVBQUFRLFVBQUEsR0FBQU4sR0FBQUYsRUFBQVMsVUFBQVIsRUFBQU8sVUFBQVIsR0NFRU0sV0FBYUksY0RGVHFyRSxpQkFBQSxTQUFBN3FFLEdDT0osUUFBUzZxRSxLQUNQLE1BQU9BLEdBQWdCdHJFLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBcUQzRCxNQXhEQUMsUUFBT2dzRSxFQUFpQjdxRSxHQU14QjZxRSxFQUFnQnZyRSxVRFRoQmlXLFVBQVcsa0JDV1hzMUQsRUFBZ0J2ckUsVURUaEJjLFFBQ0V1eEMsY0FBZ0IsT0FDaEI5bUIsY0FBZ0IsUUNZbEJnZ0QsRUFBZ0J2ckUsVURWaEJpZCxXQUFZLFNBQUU5YixHQ1laLE1EWEF4QixNQUFDaTBELFFBQVV6eUQsRUFBUXl5RCxRQUNuQmowRCxLQUFDcXFCLFFBQVU3b0IsRUFBUTZvQixTQ2FyQnVoRCxFQUFnQnZyRSxVRFhoQnN3QyxLQUFNLFdBQ0osR0FBQXVrQixFQ3VCQSxPRHZCQUEsR0FBVWwxRCxLQUFDc0YsSUFBSUMsS0FBSyxpQ0FBaUN2QixLQUFLLFdBQzdCLFNBQVhreEQsSUFBbEJBLEVBQVUsTUFDVmwxRCxLQUFDaTBELFFBQVEzdEQsS0FDUDFFLEtBQVU1QixLQUFDc0YsSUFBSUMsS0FBSyxTQUFTRixNQUM3Qml5RCxPQUFVdDNELEtBQUNzRixJQUFJQyxLQUFLLFdBQVdGLE1BQy9Ca3lELElBQVV2M0QsS0FBQ3NGLElBQUlDLEtBQUssUUFBUUYsTUFDNUI2dkQsUUFBVUEsSUFDWmwxRCxLQUFDaTBELFFBQVFydUQsT0FDVDVGLEtBQUMwSixRQ2tCSGtpRSxFQUFnQnZyRSxVRGhCaEJxSixLQUFNLFdDaUJKLE1EaEJBRixRQUFPQyxRQUFRQyxRQ21CakJraUUsRUFBZ0J2ckUsVURqQmhCNkYsT0FBUSxXQUNOLEdBQUFxeEQsR0FBQUQsRUFBQTl5RCxFQUFBcEYsRUFBQTIyRCxFQUFBYixFQUFBdnRELEVBQUEvRixFQUFBc0QsQ0F5QkEsS0F6QkF0RCxFQUFTNUIsS0FBQ2kwRCxRQUFRdnhELElBQUksU0FBYSxHQUNuQzQwRCxFQUFTdDNELEtBQUNpMEQsUUFBUXZ4RCxJQUFJLFdBQWEsR0FDbkM2MEQsRUFBU3YzRCxLQUFDaTBELFFBQVF2eEQsSUFBSSxRQUFhLEdBRW5Dd3lELEVBQVVsMUQsS0FBQ2kwRCxRQUFRdnhELElBQUksV0FDdkI4QixFQUFPLE9BQ0QrRSxFQUFFLGdCQUFnQix5Q0FDVUEsRUFBRSxRQUFRLDhIQUlkM0gsRUFBSywyREFHVDJILEVBQUUsVUFBVSxzQ0FDTit0RCxFQUFPLHdEQUdoQi90RCxFQUFFLE9BQU8sbUNBQ0hndUQsRUFBSSxpRUFHRGh1RCxFQUFFLFNBQVMsMENBRTNDL0UsR0FBUSwyQkFBd0MsT0FBWDB3RCxFQUFxQixzQkFBeEIsUUFBOEMsSUFBRzNyRCxFQUFFLFFBQVEsWUFDN0ZyRSxFQUFBbEYsS0FBQXFxQixRQUFBcG1CLE9BQUE3RSxFQUFBLEVBQUF1SSxFQUFBekMsRUFBQXZFLE9BQUF2QixFQUFBdUksRUFBQXZJLElDQ0UyMkQsRUFBUTd3RCxFQUFJOUYsR0RBWm9GLEdBQVEsb0JBQW9CdXhELEVBQU0vekQsR0FBRyxNQUFPK3pELEVBQU0vekQsS0FBTWt6RCxFQUFhLHNCQUE1QixRQUFrRCxJQUFHYSxFQUFNcnpELElBQUksUUFBTyxNQUFLcXpELEVBQU1yekQsSUFBSSxTQUFRLE1BQUtxekQsRUFBTXJ6RCxJQUFJLFVBQVMsV0NLaEssT0RIQThCLElBQVEsaURBR3lCK0UsRUFBRSxRQUFRLG1CQUkzQ3ZKLEtBQUNzRixJQUFJZCxLQUFLQSxHQUNWeEUsS0FBQzZjLFFBQVEsYUNGSit1RCxHRDdEcUIvcUUsU0FBU3NGOzs7QUVBdkMsR0FBQTBsRSxVQUFBanNFLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlRzckUsVUFBQSxTQUFBOXFFLEdDT0osUUFBUzhxRSxLQUNQLE1BQU9BLEdBQVN2ckUsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0FXcEQsTUFkQUMsUUFBT2lzRSxFQUFVOXFFLEdBTWpCOHFFLEVBQVN4ckUsVURUVG9TLElBQUssV0NXTG81RCxFQUFTeHJFLFVEVFRpZCxXQUFZLGFDV1p1dUQsRUFBU3hyRSxVRFRUeXJFLGdCQUFpQixXQ1VmLE1EVDJCLFNBQTNCOXJFLEtBQUN1TCxVQUFVLGNBQTBCdkwsS0FBQ3VMLFVBQVUsZ0JBQWdCLEdDWTNEc2dFLEdEbkJjaHJFLFNBQVN1Rjs7O0FFQWhDLEdBQUEybEUsV0FBQW5zRSxPQUFBLFNBQUFDLEVBQUFDLEdBQUEsUUFBQUMsS0FBQUMsS0FBQUMsWUFBQUosRUFBQSxJQUFBLEdBQUFLLEtBQUFKLEdBQUFLLFFBQUFDLEtBQUFOLEVBQUFJLEtBQUFMLEVBQUFLLEdBQUFKLEVBQUFJLEdBQUEsT0FBQUgsR0FBQU0sVUFBQVAsRUFBQU8sVUFBQVIsRUFBQVEsVUFBQSxHQUFBTixHQUFBRixFQUFBUyxVQUFBUixFQUFBTyxVQUFBUixHQ0VFTSxXQUFhSSxjREZUd3JFLFdBQUEsU0FBQWhyRSxHQ09KLFFBQVNnckUsS0FDUCxNQUFPQSxHQUFVenJFLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBWXJELE1BZkFDLFFBQU9tc0UsRUFBV2hyRSxHQU1sQmdyRSxFQUFVMXJFLFVEVFZzQixNQUFPa3FFLFNDV1BFLEVBQVUxckUsVURUVmtpQixXQUFZLFNBQUNuYSxFQUFHQyxHQUNkLE1BQWdCRCxHQUFFM0YsSUFBSSxTQUN0QjRCLFNBQVMrRCxFQUFFMUYsSUFBSSxVQUFZMkIsU0FBU2dFLEVBQUUzRixJQUFJLFVBRG5DLEdDZUZxcEUsR0RwQmVsckUsU0FBUzZGOzs7QUVDakMsR0FBQTJpRCxJQUFNQSxLQUFBLFdDRUosUUFBU0EsTUF5RVQsTUR2RUFBLEdBQUNDLE1BQU8sU0FBQzVuQixFQUFRMnhCLEVBQWUyWSxFQUFXblIsR0FFekMsR0FBQW9SLEdBQUE3c0UsRUFBQWlRLEVBQUExSCxFQUFBODVCLEVBQUF5cUMsRUFBQUMsRUFBQUMsRUFBQXhxQyxFQUFBMWYsRUFBQW1xRCxDQU9BLEtDUGdCLE1BQVpoWixJREZXQSxNQUVmenhCLEVBQVlqakMsVUFBVTJ0RSxhQUFhNXBFLElBQUksYUFDdkMwcEUsRUFBaUJ6dEUsVUFBVTJ0RSxhQUFhNXBFLElBQUksbUJBRTVDMnBFLEVBQW1CLEVBQ25CSCxLQUNBQyxLQUVBL3NFLEVBQUFpUSxFQUFBLEVBQUExSCxFQUFBeWtFLEVBQUF6ckUsT0FBQTBPLEVBQUExSCxFQUFBdkksSUFBQWlRLEVDRUVveUIsRUFBUTJxQyxFQUFlaHRFLEdERHBCdUQsRUFBRW5DLFFBQVFraEMsRUFBUUQsUUFDbkIwcUMsRUFBUy9zRSxHQUFLLEtBRWQrc0UsRUFBUy9zRSxHQUFLcWlDLENDT2xCLE9ETEF3cUMsR0FBb0I1aUIsRUFBSWtqQixxQkFBcUI3cUMsRUFBUTJ4QixFQUFVOFksR0FHL0RqcUQsRUFBT21uQyxFQUFJbWpCLE9BQU8sRUFBR1AsRUFBbUJycUMsRUFBV3VxQyxFQUFVOVksR0FFN0R4OEMsV0FBVyxTQUFDNDFELEdBQ1YsTUFBa0IsS0FBZnZxRCxFQUFLdmhCLE9BQ044ckUsRUFBRy9zRSxNQUFNbTdELEdBQVUsT0FFbkI0UixFQUFHL3NFLE1BQU1tN0QsR0FBVTM0QyxLQUNyQixFQUFHOHBELElBT1AzaUIsRUFBQ21qQixPQUFRLFNBQUNFLEVBQU9DLEVBQWEzNEQsRUFBTW00RCxFQUFVOVksR0FJNUMsR0FBQXVaLEdBQUF4dEUsRUFBQWlRLEVBQUExSCxFQUFBa2xFLEVBQUEvOEQsQ0FBQSxJQUFHNDhELElBQVNDLEVBQ1YsTUFBT2hxRSxHQUFFNlosSUFBSXhJLEVBQU0sU0FBQzIxQyxHQUNsQixPQUFTM25ELEdBQUkybkQsRUFBSTNuRCxHQUFJNGIsTUFBTytyQyxFQUFJL3JDLFFBRXBDLElBQUksTUFBQXV1RCxFQUFBTyxJQUF1QkEsRUFBUUMsR0FDOUJ0WixFQUFTOFksRUFBU08sSUFFbkIsTUFBT3JqQixHQUFJbWpCLE9BQVFFLEVBQVEsRUFBSUMsRUFBYTM0RCxFQUFLcS9DLEVBQVM4WSxFQUFTTyxLQUFTdGxFLFNBQVUra0UsRUFBVTlZLEVBRXBHLElBQVEsTUFBQThZLEVBQUFPLElBQXVCQSxFQUFRQyxFQUF2QyxDQUtFLElBSkFFLEtBRUFELEVBQWNqcUUsRUFBRTZaLElBQUl4SSxFQUFNLFNBQUM4NEQsR0FDekIsTUFBT0EsR0FBSTFsRSxXQUNiaEksRUFBQWlRLEVBQUEsRUFBQTFILEVBQUFpbEUsRUFBQWpzRSxPQUFBME8sRUFBQTFILEVBQUF2SSxJQUFBaVEsRUNBRVMsRUFBSTg4RCxFQUFZeHRFLEdEQ2hCdUQsRUFBRS9DLE9BQU9pdEUsRUFBVy84RCxFQUV0QixPQUFPdTVDLEdBQUltakIsT0FBUUUsRUFBUSxFQUFJQyxFQUFhRSxFQUFXVixFQUFVOVksR0FHbkUsTUFGQW5uRCxTQUFRQyxJQUFJLHlEQUEwRHVnRSxFQUFPQyxFQUFhMzRELEVBQU1tNEQsRUFBVTlZLEdBQzFHbm5ELFFBQVFDLElBQUksK0RBR2RrOUMsRUFBQ2tqQixxQkFBc0IsU0FBQzdxQyxFQUFRMnhCLEVBQVU4WSxHQUN4QyxHQUFBL3NFLEdBQUFpUSxFQUFBMUgsRUFBQTg1QixDQUFBLEtBQUFyaUMsRUFBQWlRLEVBQUEsRUFBQTFILEVBQUErNUIsRUFBQS9nQyxPQUFBME8sRUFBQTFILEVBQUF2SSxJQUFBaVEsRUFDRSxHQ0dBb3lCLEVBQVFDLEVBQU90aUMsR0RIUixNQUFBaTBELEVBQUE1eEIsR0FDTCxNQUFPOStCLEdBQUVuQyxRQUFRMnJFLEVBQVUxcUMsRUFDL0IsT0FBTzkrQixHQUFFbkMsUUFBUTJyRSxFQUFVeHBFLEVBQUV1dEMsS0FBS3hPLEtDUzdCMm5COzs7QUMzRVQsR0FBQW5uQixTQUFBdGlDLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDQ0VNLFdBQWFJLGNERFQyaEMsU0FBQSxTQUFBbmhDLEdDTUosUUFBU21oQyxLQUNQLE1BQU9BLEdBQVE1aEMsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0F5R25ELE1BNUdBQyxRQUFPc2lDLEVBQVNuaEMsR0FNaEJtaEMsRUFBUTdoQyxVRFJSYyxRQUNFcWdDLGdCQUFrQixZQ1dwQlUsRUFBUTdoQyxVRFRSdWMsU0FBVSxTQUFDNVosR0FFVCxHQUFBd0YsRUNjQSxPRGRBM0UsR0FBRWIsRUFBTWMsUUFBUWlwRSxRQUFRLE9BQU9DLFVBQVVwakUsU0FFekNwQixFQUFRbkUsU0FBU1IsRUFBRWIsRUFBTWMsUUFBUUUsS0FBSyxlQUNQd0UsRUFBUSxJQUFLeEksS0FBQzBoQyxPQUFPL2dDLFFBQXBEWCxLQUFDaXRFLFVBQVd6a0UsRUFBUSxHQUNwQnhJLEtBQUM2YyxRQUFRLFdDYVhxbEIsRUFBUTdoQyxVRFhSaWQsV0FBWSxTQUFDOWIsR0NtQlgsTUFQZSxPQUFYQSxJRFpPQSxNQUNYeEIsS0FBQ2t0RSxXQUFnQixNQUFBMXJFLEVBQUEwckUsWUFBeUIxckUsRUFBUTByRSxXQUNsRGx0RSxLQUFDMGhDLE9BQVNsZ0MsRUFBUWtnQyxTQUFXLFNBQVUsT0FBUSxVQUMvQzFoQyxLQUFDbXRFLGFBQWtCLE1BQUEzckUsRUFBQTJyRSxjQUEyQjNyRSxFQUFRMnJFLGFBQ3REbnRFLEtBQUMybUIsU0FBV25sQixFQUFRbWxCLGFBQ3BCM21CLEtBQUNrRyxVQ2lCSGc4QixFQUFRN2hDLFVEZlIrc0UsV0FBWSxXQUNWLEdBQUEvOUQsR0FBQTFILEVBQUE4NUIsRUFBQXY4QixFQUFBMUMsQ0FDQSxLQURBQSxFQUFReEMsS0FBQ3dDLFFBQ1QwQyxFQUFBbEYsS0FBQTBoQyxPQUFBcnlCLEVBQUEsRUFBQTFILEVBQUF6QyxFQUFBdkUsT0FBQTBPLEVBQUExSCxFQUFBMEgsSUFDRSxHQ2lCQW95QixFQUFRdjhCLEVBQUltSyxJRGpCUTdNLEVBQU1pL0IsR0FBMUIsT0FBTyxDQUNULFFBQU8sR0N3QlRTLEVBQVE3aEMsVURyQlJtQyxNQUFPLFdBQ0wsR0FBQXBELEdBQUFpUSxFQUFBMUgsRUFBQTg1QixFQUFBdjhCLEVBQUE3QyxDQUNBLEtBREFBLEtBQ0E2QyxFQUFBbEYsS0FBQTBoQyxPQUFBdGlDLEVBQUFpUSxFQUFBLEVBQUExSCxFQUFBekMsRUFBQXZFLE9BQUEwTyxFQUFBMUgsRUFBQXZJLElBQUFpUSxFQ3dCRW95QixFQUFRdjhCLEVBQUk5RixHRHZCb0MsSUFBN0NZLEtBQUNzRixJQUFJQyxLQUFLLGdCQUFnQm5HLEVBQUUsTUFBS3VCLFNBQ2xDMEIsRUFBT28vQixHQUFTemhDLEtBQUNzRixJQUFJQyxLQUFLLGdCQUFnQm5HLEVBQUUsTUFBS2lHLE1BQ3JELE9BQU9oRCxJQzZCVDYvQixFQUFRN2hDLFVEM0JSNHNFLFVBQVcsU0FBQ3prRSxHQUNWLEdBQUE2cUQsRUNpQ0EsT0RoQ0VBLEdBRFUsSUFBVDdxRCxLQUdVeEksS0FBQ3dDLFFBRWQ2bUQsSUFBSUMsTUFBTXRwRCxLQUFDMGhDLE9BQVEyeEIsRUFBVSxTQUFDcjRDLEdBRTVCLEdBQUEyQyxHQUFBMHZELEVBQUExbUQsRUFBQXZQLENBa0NBLElBbENHcFgsS0FBQ210RSxlQUNGbnlELEVBQU1oYixLQUFDbXRFLGFBQWEza0UsR0FBT2tiLE9BQU8xSSxJQUNwQzlPLFFBQVFDLElBQUksWUFBYTZPLEdBQ3pCQSxFQUFNQSxFQUFJalQsS0FBSyxTQUFDSyxFQUFFQyxHQUNoQixNQUFHRCxHQUFFd1YsTUFBTWxOLGNBQWdCckksRUFBRXVWLE1BQU1sTixpQkFFM0J0SSxFQUFFd1YsTUFBTWxOLGNBQWdCckksRUFBRXVWLE1BQU1sTixjQUMvQixFQUVBLElBRVhpTixFQUFjM0MsRUFBSXdCLElBQUksU0FBQ00sR0FDckIsR0FBQTZKLEVDa0NBLE9EbENHLE9BQUEzbUIsS0FBQTJtQixTQUFBbmUsSUFBc0JzVSxFQUFHOWEsS0FBTWhDLEtBQUMybUIsU0FBU25lLEtBQzFDbWUsRUFBVyx1QkFDYixrQkFBa0I3SixFQUFHOWEsR0FBRyxNQUFJMmtCLEdBQVUsSUFBRyxJQUFHN0osRUFBR2MsTUFBTSxhQUNyRDVkLE1BRW1DQSxLQUFDa3RFLGFBQXRDOTFELEVBQVFwWCxLQUFDMGhDLE9BQU9sNUIsR0FBT3NkLFlBRXZCdW5ELEVBQXFCLE1BQUFydEUsS0FBQTJtQixTQUFBbmUsR0FDbEI2a0UsSUFDRDFtRCxFQUFXLHVCQUViM21CLEtBQUNzRixJQUFJcWUsT0FBTyxpQkFFQ3ZNLEdBQVMsSUFBRyx3QkFDRzVPLEVBQU0sZUFDaEJtZSxHQUFVLElBQUcsMkNBQ3JCaEosRUFBWSxtQ0FNRyxJQUF0QjNkLEtBQUMybUIsU0FBU2htQixPQUNYLE1BQUc2SCxHQUFRLElBQUt4SSxLQUFDMm1CLFNBQVNobUIsT0FDeEJYLEtBQUMybUIsWUFFRDNtQixLQUFDaXRFLFVBQVV6a0UsRUFBTSxJQUNyQnhJLE9DMkJKa2lDLEVBQVE3aEMsVUR2QlI2RixPQUFRLFdDd0JOLE1EdkJBbEcsTUFBQ2l0RSxVQUFVLElDMEJOL3FDLEdEaEhhcmhDLFNBQVNzRjs7O0FFRC9CLEdBQUFtbkUsVUFBQTVnQixVQUFBOXNELE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlQrc0UsVUFBQSxTQUFBdnNFLEdDT0osUUFBU3VzRSxLQUNQLE1BQU9BLEdBQVNodEUsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0FTcEQsTUFaQUMsUUFBTzB0RSxFQUFVdnNFLEdBTWpCdXNFLEVBQVNqdEUsVURUVG9TLElBQU0sV0NXTjY2RCxFQUFTanRFLFVEVFQ2RyxNQUFrQjJrRSxTQ1dsQnlCLEVBQVNqdEUsVURWVHFHLGdCQUFrQnFsRSxVQ1lYdUIsR0RqQmN6c0UsU0FBUytGLGFBUTFCOGxELFVBQUEsU0FBQTNyRCxHQ2dCSixRQUFTMnJELEtBQ1AsTUFBT0EsR0FBVXBzRCxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQU9yRCxNQVZBQyxRQUFPOHNELEVBQVczckQsR0FNbEIyckQsRUFBVXJzRCxVRGxCVnNCLE1BQVEyckUsU0NvQlI1Z0IsRUFBVXJzRCxVRG5CVm9TLElBQU0sV0NxQkNpNkMsR0R4QmU3ckQsU0FBUzhGOzs7QUVQakMsR0FBQTRtRSxrQkFBQWh1RSxLQUFBLFNBQUFDLEVBQUFDLEdBQUEsTUFBQSxZQUFBLE1BQUFELEdBQUFFLE1BQUFELEVBQUFFLGFDQ0VDLE9BQVMsU0FBU0MsRUFBT0MsR0FBK0YsUUFBU0MsS0FBU0MsS0FBS0MsWUFBY0osRUFBMUgsSUFBSyxHQUFJSyxLQUFPSixHQUFjSyxRQUFRQyxLQUFLTixFQUFRSSxLQUFNTCxFQUFNSyxHQUFPSixFQUFPSSxHQUEySixPQUFyR0gsR0FBS00sVUFBWVAsRUFBT08sVUFBV1IsRUFBTVEsVUFBWSxHQUFJTixHQUFRRixFQUFNUyxVQUFZUixFQUFPTyxVQUFrQlIsR0FDbFJNLFdBQWFJLGNERlRndEUsa0JBQUEsU0FBQXhzRSxHQ09KLFFBQVN3c0UsS0FHUCxNQUZBdnRFLE1BQUtrRyxPQUFTM0csS0FBS1MsS0FBS2tHLE9BQVFsRyxNQUNoQ0EsS0FBSyt0RCx3QkFBMEJ4dUQsS0FBS1MsS0FBSyt0RCx3QkFBeUIvdEQsTUFDM0R1dEUsRUFBaUJqdEUsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0FrSDVELE1BdkhBQyxRQUFPMnRFLEVBQWtCeHNFLEdBUXpCd3NFLEVBQWlCbHRFLFVEWGpCYyxPQUFTMEMsRUFBRWpFLFFBQ1Q0dEUsdUJBQTRCLGNBQzVCQywwQkFBNEIsa0JBQzVCNXNFLFNBQVNDLFNBQVNULFVBQVVjLFFDYTlCb3NFLEVBQWlCbHRFLFVEVmpCcXRFLGVBQWdCLFNBQUMxcUUsR0FDZixHQUFBRyxHQUFBSyxDQ2NBLE9EZEFMLEdBQVVVLEVBQUViLEVBQU1jLFFBQ2xCTixFQUFVTCxFQUFRYSxLQUFLLGlCQUN2QmhFLEtBQUM0c0QsU0FBUzdsRCxXQUFXNkMsT0FBT3BHLEdBQzVCeEQsS0FBQzRzRCxTQUFTaG5ELEtBQUssTUFDYkMsUUFBUyxXQ1lQLE1EWEExRyxPQUFNNEcsU0FBUyx3QkNnQnJCd25FLEVBQWlCbHRFLFVEZGpCaWQsV0FBWSxTQUFDOWIsR0FDWCxHQUFBdEIsR0FBQXNDLENBQUEsS0FBQXRDLElBQUFzQixHQ2dCRWdCLEVBQVFoQixFQUFRdEIsR0RoQmxCRixLQUFFRSxHQUFPc0MsQ0NvQlQsT0RuQkF4QyxNQUFDK3RELDBCQUNEL3RELEtBQUM0c0QsU0FBUzdsRCxXQUFXQyxHQUFHLG9CQUFxQixTQUFBbEIsR0NtQjNDLE1EbkIyQyxZQ3NCekMsTURyQkZBLEdBQUM4bUQsU0FBUzdsRCxXQUFXZ0IsT0FDckJqQyxFQUFDaW9ELDBCQUNEam9ELEVBQUNJLFdBSDBDbEcsUUMyQi9DdXRFLEVBQWlCbHRFLFVEdEJqQjB0RCx3QkFBeUIsV0N1QnZCLE1EdEJBL3RELE1BQUNpRSxPQUFTLEdBQUlwRCxVQUFTOEYsWUFBWTNHLEtBQUM0c0QsVUFBVWxwQyxPQUFPMWpCLEtBQUM0c0QsU0FBUzdsRCxXQUFXOUMsVUN5QjVFc3BFLEVBQWlCbHRFLFVEdkJqQjZGLE9BQVEsV0FFTixHQUFBeW5FLEdBQUFucEUsQ0N3RkEsT0R4RkFtcEUsR0FBZSxHQUVmM3RFLEtBQUM0c0QsU0FBUzdsRCxXQUFXbUIsS0FBSyxTQUFBcEMsR0N1QnhCLE1EdkJ3QixVQUFDOG5FLEdDd0J2QixNRHRCRkQsSUFBZ0IsdUNBT0Y3bkUsRUFBQzVFLGFBQ0xTLE1BQU9pc0UsRUFDUG5zRSxXQUNFdkIsSUFBTSxPQUNOaUMsUUFBUyxHQUNYUCxLQUFNLFlBQ05DLFlBQWMsc0JBQ2Isd0NBTUdpRSxFQUFDNUUsYUFDSFMsTUFBT2lzRSxFQUNQbnNFLFdBQ0V2QixJQUFNLFFBQ042QyxVQUFXLEdBQ2JuQixLQUFPLFFBQ1BDLFlBQWEsY0FDZCxtREFNR2lFLEVBQUM1RSxhQUNMUyxNQUFPaXNFLEVBQ1Buc0UsV0FDRXZCLElBQU0sYUFDUjBCLEtBQU0sbUJBQ05DLFlBQWEsa0JBQ1osMkNBTUdpRSxFQUFDNUUsYUFDTFMsTUFBT2lzRSxFQUNQbnNFLFdBQ0V2QixJQUFNLFdBQ05pQyxRQUFTLEdBQ1hQLEtBQU0sV0FDTkMsWUFBYSxTQUNaLGdEQU1HaUUsRUFBQzVFLGFBQ0xTLE1BQU9pc0UsRUFDUG5zRSxXQUNFdkIsSUFBTSxpQkFDTmlDLFFBQVEsRUFDUjByRSxRQUFRLEdBQ1Zqc0UsS0FBTSxnQkFDTkMsWUFBYSxrQkFDWixxREFNR2lFLEVBQUM1RSxhQUNMUyxNQUFPaXNFLEVBQ1Buc0UsV0FDRXZCLElBQU0sUUFDUjBCLEtBQU0saUJBQ05DLFlBQWEsbUJBQ1osZ0ZBSzBEK3JFLEVBQWM1ckUsR0FBRyxnREFyRjlEaEMsT0EyRjFCd0UsRUFBTyxPQUNDeEUsS0FBQzhyRCxTQUFTcHBELElBQUksUUFBUSw2S0FXdEIxQyxLQUFDa0IsYUFDRFMsTUFBTzNCLEtBQUM0c0QsU0FDUm5yRCxXQUNFdkIsSUFBTSxrQkFDUjBCLEtBQU0sdUJBQ05DLFlBQWEsZ0JBQ2JDLFFBQVMsU0FBQ1UsR0MzQmQsTUQyQmlDLFNBQVRBLEtBQ3JCLDZCQUdpQm1yRSxFQUFhLHFHQU9yQzN0RSxLQUFDc0YsSUFBSWQsS0FBS0EsR0FFVnhFLEtBQUM2YyxRQUFRLGFDakNYMHdELEVBQWlCbHRFLFVEbUNqQnl0RSxZQUFhLFdDbENYLE1Ea0NjOXRFLE1BQUM0c0QsU0FBUy9sRCxZQy9CbkIwbUUsR0Q1SHNCMXNFLFNBQVNDOzs7QUVEeEMsR0FBQWl0RSxpQkFBQUMsVUFBQUMsVUFBQXJ1RSxPQUFBLFNBQUFDLEVBQUFDLEdBQUEsUUFBQUMsS0FBQUMsS0FBQUMsWUFBQUosRUFBQSxJQUFBLEdBQUFLLEtBQUFKLEdBQUFLLFFBQUFDLEtBQUFOLEVBQUFJLEtBQUFMLEVBQUFLLEdBQUFKLEVBQUFJLEdBQUEsT0FBQUgsR0FBQU0sVUFBQVAsRUFBQU8sVUFBQVIsRUFBQVEsVUFBQSxHQUFBTixHQUFBRixFQUFBUyxVQUFBUixFQUFBTyxVQUFBUixHQ0VFTSxXQUFhSSxjREZUeXRFLFdBQUEsV0FDUyxRQUFBQSxHQUFDeHNFLEdBQ1osR0FBQXRCLEdBQUFzQyxDQUFBLEtBQUF0QyxJQUFBc0IsR0NNRWdCLEVBQVFoQixFQUFRdEIsR0RObEJGLEtBQUVFLEdBQU9zQyxFQ1dYLE1BQU93ckUsTURUSEMsVUFBQSxTQUFBbHRFLEdDZ0JKLFFBQVNrdEUsS0FDUCxNQUFPQSxHQUFVM3RFLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBcUJyRCxNQXhCQUMsUUFBT3F1RSxFQUFXbHRFLEdBTWxCa3RFLEVBQVU1dEUsVURsQlZpVyxVQUFZLFlDb0JaMjNELEVBQVU1dEUsVURsQlZpZCxXQUFZLFNBQUU5YixHQ29CWixNRG5CQXhCLE1BQUMyQixNQUFRSCxFQUFRRyxNQUNqQjNCLEtBQUNpRSxPQUFTLEdBQUlwRCxVQUFTOEYsWUFBWTNHLEtBQUMyQixTQ3FCdENzc0UsRUFBVTV0RSxVRG5CVjZGLE9BQVEsV0NvQk4sTURuQkFsRyxNQUFDc0YsSUFBSWQsS0FBS3hFLEtBQUNrQixhQUNUUyxNQUFPM0IsS0FBQzJCLE1BQ1JGLFdBQ0V2QixJQUFNLFNBQ1IwQixLQUFNLFFBQ05DLFlBQWEsdUJDd0JWb3NFLEdEdENlcHRFLFNBQVNDLFVBaUIzQml0RSxnQkFBQSxTQUFBaHRFLEdDNEJKLFFBQVNndEUsS0FDUCxNQUFPQSxHQUFnQnp0RSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQWdJM0QsTUFuSUFDLFFBQU9tdUUsRUFBaUJodEUsR0FNeEJndEUsRUFBZ0IxdEUsVUQ5QmhCaVcsVUFBVyxrQkNnQ1h5M0QsRUFBZ0IxdEUsVUQ5QmhCaWQsV0FBWSxTQUFDOWIsR0FDWCxHQUFBdEIsR0FBQXNDLENBQUEsS0FBQXRDLElBQUFzQixHQ2dDRWdCLEVBQVFoQixFQUFRdEIsR0RoQ2xCRixLQUFFRSxHQUFPc0MsQ0NtQ1QsT0RsQ0F4QyxNQUFDa3VFLGNDcUNISCxFQUFnQjF0RSxVRG5DaEI2RixPQUFRLFdBQ04sR0FBQWlvRSxHQUFBM3BFLEVBQUE0cEUsQ0NzSUEsT0R0SUE1cEUsR0FBTyxHQUNQNHBFLEVBQWEsRUFFYnB1RSxLQUFDNHNELFNBQVM3bEQsV0FBV21CLEtBQUssU0FBQXBDLEdDb0N4QixNRHBDd0IsVUFBQ3VvRSxFQUFVanZFLEdBRW5DLEdBQUEwRixHQUFBd3BFLEVBQUFDLEVBQUFDLEVBQUF6NEMsQ0FBQXc0QyxHQUFZLEdBQUlQLFlBQ2RLLFNBQVdBLEVBQ1g3akIsS0FBVzFrRCxFQUFDMGtELEtBQ1ppa0IsbUJBQXFCLFdBQ25CLEdBQUFwbUMsR0FBQXFtQyxFQUFBeHVFLEVBQUEwdEQsRUFBQStnQixFQUFBenBFLEVBQUExQyxDQUFBb3JELEdBQVUsRUFDVitnQixFQUFVLEVBQ1Z0bUMsR0FBUSxFQUNSbmpDLEVBQUFZLEVBQUEwa0QsS0FBQTdsRCxVQUFBLEtBQUF6RSxJQUFBZ0YsR0N1Q0kxQyxFQUFRMEMsRUFBSWhGLEtEdENWQSxFQUFJTSxRQUFRLGVBQWlCTixFQUFJTSxRQUFRLGlCQUMzQ2t1RSxFQUFXcnFFLFNBQVM3QixHQUNib3NFLE9BQU8zOUQsTUFBTXk5RCxLQUNmcm1DLEdBQ0R1bEIsRUFBVThnQixFQUNWQyxFQUFVRCxFQUNWcm1DLEdBQVEsSUFFUnVsQixFQUFVdHBELEtBQUtDLElBQUltcUUsRUFBVTlnQixHQUM3QitnQixFQUFVcnFFLEtBQUtpTixJQUFJbTlELEVBQVVDLEtBQ3JDLE9BQU90cUUsV0FBV3VwRCxFQUFVK2dCLEdBQVksSUFBTyxNQUduRCxLQUNFSCxFQUFnQm55QyxhQUFZLEtBQU0zOEIsTUFBTTZ1RSxHQUFZRixFQUFTOWlFLFVBQVUsVUFEekUsTUFBQXZGLEdBRU1sQixFQUFBa0IsRUFDSjdHLE1BQU1rUCxTQUFTLDJCQUEyQmdnRSxFQUFTOWlFLFVBQVUsUUFBUSxPQUFNekcsR0FFN0UsR0FBYzBwRSxFQUFkLENBRUEsSUFDRW55QyxhQUFZLEtBQU0zOEIsTUFBTTZ1RSxHQUFZRixFQUFTOWlFLFVBQVUsb0JBRHpELE1BQUF2RixHQUVNbEIsRUFBQWtCLEVBQ0o3RyxNQUFNa1AsU0FBUyw0QkFBNEJnZ0UsRUFBUzlpRSxVQUFVLFFBQVEsT0FBTXpHLEdBRTlFLElBQ0VpeEIsRUFBV3B6QixFQUFFb3pCLFNBQVNzNEMsRUFBUzlpRSxVQUFVLGFBRDNDLE1BQUF2RixHQUVNbEIsRUFBQWtCLEVBQ0o3RyxNQUFNa1AsU0FBUyw2QkFBNkJnZ0UsRUFBUzlpRSxVQUFVLFFBQVEsT0FBTXpHLEdBRy9FLElBRUV3cEUsRUFBcUJGLEdBQWMsR0FBTUEsR0FBYyxFQUFPLGlCQUFzQixHQUNwRjVwRSxHQUFRLE9BQ0Y4cEUsRUFBZ0IsU0FDZEQsRUFBUzlpRSxVQUFVLFFBQVEsWUFDNUJ3cUIsRUFBU3c0QyxHQUFXLGNBTjdCLE1BQUF2b0UsR0FTTWxCLEVBQUFrQixFQUNKN0csTUFBTWtQLFNBQVMsK0JBQStCZ2dFLEVBQVM5aUUsVUFBVSxRQUFRLE9BQU16RyxHQzhDL0UsTUQ1Q0N1cEUsR0FBU3ZDLG9CQUVWdG5FLEdBQVEsK0NBQStDNnBFLEVBQVNyc0UsR0FBRyxZQUVyRW9zRSxPQXpEd0JwdUUsT0E0RDFCQSxLQUFDc0YsSUFBSWQsS0FBSyxZQUFZQSxFQUFLLGNBRzNCMnBFLEVBQVNudUUsS0FBQ3NGLElBQUlDLEtBQUssVUFDaEI0b0UsRUFBT3h0RSxPQUFTLEdBQ2pCd3RFLEVBQU9qbUUsS0FBSyxTQUFBcEMsR0N1Q1YsTUR2Q1UsVUFBQzFHLEVBQUd5dkUsR0FFZCxHQUFBbHRFLEdBQUFtdEUsQ0MrQ0UsT0QvQ0ZudEUsR0FBUSxHQUFJMHRCLFNBQ1Z6WixJQUFROVAsRUFBQzhtRCxTQUFTNXFELEdBQUs4RCxFQUFDMGtELEtBQUt4b0QsS0FFL0I4c0UsRUFBVyxHQUFJYixZQUNidHNFLE1BQU9BLElBQ1RtdEUsRUFBU3ZrRCxXQUFXMW1CLEVBQUVnckUsSUFDdEIvb0UsRUFBQ29vRSxVQUFVcm1FLEtBQUtpbkUsR0FFaEJudEUsRUFBTTBGLE9BQ0p4QixRQUFTLFdDd0NMLE1EdkNGaXBFLEdBQVM1b0UsVUFDWEYsTUFBTyxXQ3lDSCxNRHhDRnJFLEdBQU1pRSxNQUNKK2xELE9BQVc3bEQsRUFBQzBrRCxLQUFLeG9ELEtBRWpCNkQsUUFBUyxXQ3lDTCxNRHhDRmlwRSxHQUFTNW9FLGlCQWxCUGxHLE9Bb0JkQSxLQUFDNmMsUUFBUSxhQ2lEWGt4RCxFQUFnQjF0RSxVRC9DaEJ5SixRQUFTLFdBQ1AsR0FBQXVGLEdBQUExSCxFQUFBekMsRUFBQStDLEVBQUF5WCxDQ2tEQSxLRGxEQXhhLEVBQUFsRixLQUFBa3VFLFVBQUFqbUUsS0FBQW9ILEVBQUEsRUFBQTFILEVBQUF6QyxFQUFBdkUsT0FBQTBPLEVBQUExSCxFQUFBMEgsSUNtREVxUSxFQUFPeGEsRUFBSW1LLEdBQ1hwSCxFQUFRSixLRG5EUjZYLEVBQUsvVixRQ3FEUCxPQUFPMUIsSUFHRjhsRSxHRDdKcUJsdEUsU0FBU3NGOzs7QUVyQnZDLEdBQUE0b0UsbUJBQUFDLG1CQUFBenZFLEtBQUEsU0FBQUMsRUFBQUMsR0FBQSxNQUFBLFlBQUEsTUFBQUQsR0FBQUUsTUFBQUQsRUFBQUUsYUNFRUMsT0FBUyxTQUFTQyxFQUFPQyxHQUErRixRQUFTQyxLQUFTQyxLQUFLQyxZQUFjSixFQUExSCxJQUFLLEdBQUlLLEtBQU9KLEdBQWNLLFFBQVFDLEtBQUtOLEVBQVFJLEtBQU1MLEVBQU1LLEdBQU9KLEVBQU9JLEdBQTJKLE9BQXJHSCxHQUFLTSxVQUFZUCxFQUFPTyxVQUFXUixFQUFNUSxVQUFZLEdBQUlOLEdBQVFGLEVBQU1TLFVBQVlSLEVBQU9PLFVBQWtCUixHQUNsUk0sV0FBYUksY0RIVHd1RSxtQkFBQSxTQUFBaHVFLEdDUUosUUFBU2d1RSxLQUVQLE1BREEvdUUsTUFBS2tHLE9BQVMzRyxLQUFLUyxLQUFLa0csT0FBUWxHLE1BQ3pCK3VFLEVBQWtCenVFLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBc1c3RCxNQTFXQUMsUUFBT212RSxFQUFtQmh1RSxHQU8xQmd1RSxFQUFrQjF1RSxVRFhsQmlXLFVBQVcsb0JDYVh5NEQsRUFBa0IxdUUsVURYbEJjLE9BQVEsV0NZTixPRFZBOHRFLGlCQUFtQiwwQkFDbkJDLGVBQW1CLHdCQUNuQkMsaUJBQW1CLDBCQUVuQkMsdUJBQTRCLGVBQzVCQywwQkFBNEIsaUJBRTVCQyx1QkFBNEIsZUFDNUJDLDBCQUE0QixpQkFFNUJDLDBCQUE0QixpQkFDNUJDLDBCQUE0QixpQkFFNUJDLGtCQUFvQixZQUNwQjlqRCxjQUFnQixXQ1dsQm1qRCxFQUFrQjF1RSxVRFRsQnN2RSxjQUNFaGQsYUFBaUIsVUFDakJELEtBQWlCLFlBQ2pCRSxVQUFpQixjQUNqQmxrRCxFQUFpQixpQkNZbkJxZ0UsRUFBa0IxdUUsVURUbEJ1dkUsZUFBZ0IsU0FBQzVzRSxHQUNmLEdBQUE2c0UsR0FBQTFzRSxFQUFBd29ELEVBQUFqc0MsQ0NxQkEsT0RyQkF2YyxHQUFVVSxFQUFFYixFQUFNYyxRQUVsQlgsRUFBUWtpQixTQUNSbGlCLEVBQVEyc0UsV0FBV3pxRCxTQUVuQnNtQyxFQUFTeG9ELEVBQVFhLEtBQUssZ0JBQ3RCNnJFLEVBQVU3dkUsS0FBQ3NGLElBQUlDLEtBQUssSUFBSW9tRCxFQUFPLFdBQVVob0MsT0FBTyw2REFBNkRwZSxLQUFLLE9BRWxIbWEsRUFBTyxHQUFJc3ZELHFCQUNUbGpCLFNBQVc5ckQsS0FBQzhyRCxTQUNadEIsS0FBT3hxRCxLQUFDK3BELE1BQU1ybkQsSUFBSWlwRCxLQUNwQmpzQyxFQUFLNkssV0FBV3NsRCxHQUVoQjd2RSxLQUFDKzhDLFNBQVNsMUMsS0FBSzZYLEdBQ2YxZixLQUFFLHNCQUFzQjJyRCxHQUFZanNDLEdDVXRDcXZELEVBQWtCMXVFLFVEUmxCMHZFLGVBQWdCLFNBQUMvc0UsR0FDZixHQUFBRyxHQUFBd29ELENDY0EsT0RkQXhvRCxHQUFVVSxFQUFFYixFQUFNYyxRQUVsQlgsRUFBUWtpQixTQUNSbGlCLEVBQVEyc0UsV0FBV3pxRCxTQUVuQnNtQyxFQUFTeG9ELEVBQVFhLEtBQUssZ0JBRXRCaEUsS0FBQys4QyxTQUFXcDZDLEVBQUUzQyxLQUFDKzhDLFVBQVVvQyxRQUFRbi9DLEtBQUUsc0JBQXNCMnJELElBQ3pEM3JELEtBQUUsc0JBQXNCMnJELEdBQVVoaUQsU0NTcENvbEUsRUFBa0IxdUUsVURQbEJnc0IsT0FBUSxXQ1FOLE1EUEExdEIsV0FBVW9XLE9BQU9DLFNBQVMsSUFBSSxJQ1VoQys1RCxFQUFrQjF1RSxVRFJsQmlkLFdBQVksU0FBQzliLEdBQ1gsR0FBQXRCLEdBQUFzQyxDQUFBLEtBQUF0QyxJQUFBc0IsR0NVRWdCLEVBQVFoQixFQUFRdEIsR0RWbEJGLEtBQUVFLEdBQU9zQyxDQ2dCVCxPRGRBeEMsTUFBQys4QyxZQUVELzhDLEtBQUN5b0QsV0FBYSxTQUFVLE9BQVEsVUFFaEN6b0QsS0FBQytwRCxNQUFRLEdBQUlDLHNCQUNiaHFELEtBQUMrcEQsTUFBTTFpRCxPQUNMMG5CLFdBQWEsYUFDYms3QixTQUFhLFlBQVlqcUQsS0FBQzhyRCxTQUFTOXBELEdBQ25DNkQsUUFBUyxTQUFBQyxHQ1VQLE1EVk8sWUNXTCxNRFRGdWpELEtBQUlDLE1BQU14akQsRUFBQzJpRCxVQUFXLEtBQU0sU0FBQ3p0QyxHQ2V6QixNRGRGbFYsR0FBQytqRCxZQUFjN3VDLEVBQUl1bEMsT0FBTyxTQUFHb0osRUFBS0MsR0FBK0IsTUFBdkJELEdBQUlDLEVBQUk1bkQsSUFBSTRuRCxFQUFJaHNDLE1BQWMrckMsT0FFeEU3akQsRUFBQ2txRSxTQUFVLEVBQ1hscUUsRUFBQ0ksYUFOSWxHLFNDd0JiK3VFLEVBQWtCMXVFLFVEaEJsQjR2RSxlQUFnQixTQUFDanRFLEdBRWYsR0FBQUcsR0FBQXdvRCxDQ29CQSxPRHBCQXhvRCxHQUFVVSxFQUFFYixFQUFNYyxRQUVsQlgsRUFBUWtpQixTQUNSbGlCLEVBQVEyc0UsV0FBV3pxRCxTQUVuQnNtQyxFQUFTeG9ELEVBQVFhLEtBQUssZ0JBQ3RCaEUsS0FBQ3NGLElBQUlDLEtBQUssSUFBSW9tRCxFQUFPLFdBQVVsd0MsU0NpQmpDc3pELEVBQWtCMXVFLFVEZGxCNnZFLGVBQWdCLFNBQUNsdEUsR0FFZixHQUFBRyxHQUFBeTlCLEVBQUFxeEIsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQTVILEVBQUFtQixFQUFBMEcsQ0FnQ0EsT0FoQ0FsdkQsR0FBVVUsRUFBRWIsRUFBTWMsUUFFbEJYLEVBQVFraUIsU0FDUmxpQixFQUFRMnNFLFdBQVd6cUQsU0FFbkJzbUMsRUFBU3hvRCxFQUFRYSxLQUFLLGdCQUN0QndtRCxFQUFTeHFELEtBQUMrcEQsTUFBTXJuRCxJQUFJaXBELEdBRXBCM3JELEtBQUM4d0QsaUJBQW1COXdELEtBQUNzRixJQUFJQyxLQUFLLElBQUlvbUQsRUFBTyxXQUV6QzNyRCxLQUFDOHdELGlCQUFpQnRzRCxLQUFLLGtEQUd2QjR0RCxHQUFZK2QsT0FBVSxTQUFTQyxNQUFTLFFBQVExZCxLQUFRLFlBQWFDLGFBQWlCLFVBQVdDLFVBQWMsU0FBVXBJLEVBQUs5bkQsSUFBSSxZQUVsSXl2RCxFQUFlM0gsRUFBSzluRCxJQUFJLHlCQUN4QnV2RCxFQUFVekgsRUFBSzluRCxJQUFJLFNBQ25CMnZELEVBQVU3SCxFQUFLOW5ELElBQUksZUFDbkJrK0IsRUFBVTRwQixFQUFLOW5ELElBQUksY0FFbkJ3dkQsRUFBYyxHQUFJVyxPQUNsQmh2RCxFQUFFcXVELEdBQWFsckQsR0FBRyxPQUNoQixTQUFBbEIsR0NZQSxNRFpBLFVBQUM5QyxHQUNDLEdBQUE0QixHQUFBQyxDQUFBLE9BQXlCLEtBQXRCcXRELEVBQVl6bEQsUUNjcUQsbUJBQXREN0gsRUFBT2tCLEVBQU1nckQsaUJBQWlCdnJELEtBQUssUUFBUXFFLFFBQ3JEaEYsRURkNkJnRixTQUMvQjlELEVBQUNnckQsaUJBQWlCdHNELEtBQUssb0NBQ3ZCc0IsRUFBQ2dyRCxpQkFBaUJudEMsT0FBT3V1QyxLQ2lCMEMsbUJBQXZEcnRELEVBQVFpQixFQUFNZ3JELGlCQUFpQnZyRCxLQUFLLFFBQVFxRSxRQUN0RC9FLEVEaEI0QitFLFNBQzlCOUQsRUFBQ2dyRCxpQkFBaUJudEMsT0FBT3V1QyxNQVA3Qmx5RCxPQVVZLE1BQVhveUQsRUFDREYsRUFBWVksSUFBTSxJQUFJbjBELFVBQVUyVyxRQUFRLDJCQUEwQjY4QyxFQUFhLEtBQUlFLEVBQUssS0FBSXp4QixFQUFJLE9BRWhHc3hCLEVBQVlZLElBQU0sSUFBSW4wRCxVQUFVMlcsUUFBUSwyQkFBMEI4OEMsRUFBUSxLQUFJSCxFQUFNLEtBQUlJLEVBQUssS0FBSXp4QixFQUFJLFFDc0J6R211QyxFQUFrQjF1RSxVRG5CbEJnd0UsYUFBYyxTQUFDcnRFLEdBRWIsR0FBQUcsR0FBQXdvRCxDQ3VCQSxPRHZCQXhvRCxHQUFVVSxFQUFFYixFQUFNYyxRQUVsQlgsRUFBUWtpQixTQUNSbGlCLEVBQVEyc0UsV0FBV3pxRCxTQUVuQnNtQyxFQUFTeG9ELEVBQVFhLEtBQUssZ0JBQ3RCaEUsS0FBQ3NGLElBQUlDLEtBQUssSUFBSW9tRCxHQUFVbHdDLFNDb0IxQnN6RCxFQUFrQjF1RSxVRGpCbEJpd0UsYUFBYyxTQUFDdHRFLEdBQ2IsR0FBQUcsR0FBQXFuRCxFQUFBbUIsRUFBQWpzQyxDQzZCQSxPRDdCQXZjLEdBQVVVLEVBQUViLEVBQU1jLFFBRWxCWCxFQUFRa2lCLFNBQ1JsaUIsRUFBUTJzRSxXQUFXenFELFNBR25Cc21DLEVBQVN4b0QsRUFBUWEsS0FBSyxnQkFFdEJ3bUQsRUFBT3hxRCxLQUFDK3BELE1BQU1ybkQsSUFBSWlwRCxHQUVsQmpzQyxFQUFPLEdBQUlxdUQsa0JBQ1R2akIsS0FBV0EsRUFDWG9DLFNBQVc1c0QsS0FBQzRzRCxXQUVkbHRDLEVBQUt4WixTQUVMbEcsS0FBQys4QyxTQUFTbDFDLEtBQUs2WCxHQUVmMWYsS0FBQ3NGLElBQUlDLEtBQUssSUFBSW9tRCxHQUFVbHdDLFFBQVFrSSxPQUFPakUsRUFBS3BhLE1DYzlDeXBFLEVBQWtCMXVFLFVEWmxCeUosUUFBUyxXQUNQLEdBQUExSyxHQUFBdUksRUFBQXpDLEVBQUFDLEVBQUF1YSxDQUFBLEtBQUF4YSxFQUFBbEYsS0FBQSs4QyxTQUFBMzlDLEVBQUEsRUFBQXVJLEVBQUF6QyxFQUFBdkUsT0FBQXZCLEVBQUF1SSxFQUFBdkksSUNlRXNnQixFQUFPeGEsRUFBSTlGLEdEZFhzZ0IsRUFBSy9WLE9DaUJQLE9BQXlDLFFBQWpDeEUsRUFBT25GLEtBQUs4d0QsbUJBQW1ELGtCQUFoQjNyRCxHQUFLeUUsT0FBd0J6RSxFRGhCakV5RSxTQUFBLFFDbUJyQm1sRSxFQUFrQjF1RSxVRGpCbEIrZ0QsVUFBVyxTQUFFcCtDLEdBQ1gsR0FBQXV0RSxFQzhCQSxPRDlCQUEsR0FBbUIxc0UsRUFBRWIsRUFBTWMsUUFBUUUsS0FBSyxhQUNyQ2hFLEtBQUN3d0UsZ0JBQW1CRCxHQUFzQyxPQUFsQnZ3RSxLQUFDd3dFLGVBQzFDeHdFLEtBQUN3d0UsY0FBZ0JELEVBQ2pCdndFLEtBQUN5d0UsY0FBZ0IsR0FFZHp3RSxLQUFDeXdFLG9CQUNGendFLEtBQUN5d0UsY0FBZ0IsRUFDakJ6d0UsS0FBQ3d3RSxjQUFnQixNQUNPLElBQWxCeHdFLEtBQUN5d0UsZ0JBQ1B6d0UsS0FBQ3l3RSxrQkFFTHp3RSxLQUFDMHdFLHNCQ3NCSDNCLEVBQWtCMXVFLFVEbkJsQjZGLE9BQVEsV0FDTixHQUFBeXFFLEdBQUFwbkIsRUFBQXFuQixFQUFBcHNFLEVBQUFxc0UsQ0FBQSxJQUFHN3dFLEtBQUNnd0UsU0FBNkIsSUFBakJod0UsS0FBQytwRCxNQUFNcHBELE9BTXJCLE1BTEFYLE1BQUNzRixJQUFJZCxLQUFLLHlGQUtIeEUsS0FBQzZjLFFBQVEsV0FHbEIsSUFBYzdjLEtBQUNnd0UsUUNnQ2YsTUQvQkFhLEdBQWdCN3dFLEtBQUMrcEQsTUFBTWhnRCxRQUFRLFVBQy9CNG1FLEVBQVdodUUsRUFBRTNDLEtBQUMrcEQsTUFBTTUxQyxNQUFNLFdBQVcyOEQsUUFBUTFoRCxVQUFVeFAsT0FBT3BkLFFBQVF1RixPQUN0RTZvRSxFQUFnQixXQ2tCZCxHQUFJeHhFLEdBQUd1SSxFQUFLekMsRUFBSytDLENBRWpCLEtEcEJlQSxLQUFBN0ksRUFBQSxFQUFBdUksRUFBQWdwRSxFQUFBaHdFLE9BQUF2QixFQUFBdUksRUFBQXZJLElDcUJibXFELEVBQVNvbkIsRUFBU3Z4RSxHQUNsQjZJLEVBQVFKLEtEdEJLLGtCQUFrQmxGLEVBQUU0bUQsR0FBUXBuRCxTQUFTLEtBQUlRLEVBQUUzQyxLQUFDNnBELFlBQVlOLElBQVNwbkQsU0FBUyxPQUFHLE9BQUErQyxFQUFBMnJFLEVBQUF0bkIsSUFBQXJrRCxFQUF3QnZFLE9BQUEsU0FBVSxHQUFFLGFDd0JoSSxPQUFPc0gsSUFDTjdILEtBQUtKLE1EekI4SnljLEtBQUssSUFDM0ttMEQsRUFBZ0IsMkVBQTZFQSxFQUU3RnBzRSxFQUFPLHlIQU1Db3NFLEVBQWMsK1dBdUJ0QjV3RSxLQUFDc0YsSUFBSWQsS0FBS0EsR0FFVnhFLEtBQUM2YyxRQUFRLGFDRlhreUQsRUFBa0IxdUUsVURJbEIwd0Usd0JBQXlCLFNBQUMvdEUsR0FFeEIsR0FBQTZ0RSxFQ0ZBLE9ERUE3d0UsTUFBQ2d4RSxlQUFpQm50RSxFQUFFYixFQUFNYyxRQUFRdUIsTUFDbEN3ckUsRUFBaUI3d0UsS0FBQytwRCxNQUFNaGdELFFBQVEsVUFHaENzL0MsSUFBSUMsTUFBTXRwRCxLQUFDeW9ELFdBQVdjLE9BQVF2cEQsS0FBQ2d4RSxnQkFDN0IsU0FBQWxyRSxHQ0pBLE1ESUEsVUFBQ2tWLEdBQ0QsR0FBQWkyRCxHQUFBN3hFLEVBQUF1SSxFQUFBekMsRUFBQUMsRUFBQWcrQixFQUFBcW1CLEVBQUEwbkIsRUFBQXZtQixDQUtBLEtBTEE3a0QsRUFBQ2drRCxVQUFZOXVDLEVBQUl1bEMsT0FBTyxTQUFHb0osRUFBS0MsR0FBK0IsTUFBdkJELEdBQUlDLEVBQUk1bkQsSUFBSTRuRCxFQUFJaHNDLE1BQWMrckMsT0FFdEVnQixFQUFRaG9ELEVBQUVrdUUsRUFBYy9xRSxFQUFDa3JFLGlCQUFpQkYsUUFBUXQwRCxJQUFJLFNBQUNwVSxHQ0FuRCxNREF1REEsR0FBRXpELFdBQVcsT0FBU3lxQixVQUFVeFAsT0FBT3BkLFFBQVF1RixPQUUxR21wRSxFQUFjLEdBQ2Q5eEUsRUFBQSxFQUFBdUksRUFBQWdqRCxFQUFBaHFELE9BQUF2QixFQUFBdUksRUFBQXZJLElDQ0lvcUQsRUFBT21CLEVBQU12ckQsR0RBZjZ4RSxHQUFBLE9BQUEvckUsRUFBQTJyRSxFQUFBL3FFLEVBQUFrckUsa0JBQUEsa0JBQUE5ckUsR0FBQXNYLEtDS1MsT0RMVHJYLEVBQUFELEVBQUFzWCxJQUFBLFNBQUFwVSxHQ0VJLE1BQU9BLEdBQUUxRixJQUFJLFVBQ1orMkIsT0FBTyxTQUFTcnhCLEdBQ2pCLE1BQU9BLEtBQU1vaEQsS0FDRHJrRCxFREwrRXhFLE9BQUEsU0FBVSxFQUN6R3V3RSxHQUFlLGtCQUFrQnZ1RSxFQUFFNm1ELEdBQU1ybkQsU0FBUyxLQUFJMkQsRUFBQ2drRCxVQUFVTixHQUFNLEtBQUl5bkIsRUFBWSxZQ1l2RixPRFhGQyxHQUFjLHlFQUEyRUEsRUFHekZwckUsRUFBQ1IsSUFBSUMsS0FBSyxTQUFTZixLQUFLMHNFLEdDT1UsT0RMbEMsT0FBQS90QyxFQUFBMHRDLEVBQUEvcUUsRUFBQWtyRSxrQkFBQSxrQkFBQTd0QyxHQUFBM21CLElBQUEybUIsRUFBQTNtQixJQUFBLFNBQUFwVSxHQ0lJLE1BQU9BLEdBQUUxRixJQUFJLFVBQ1orMkIsT0FBa0IsUURKdkIsU0FBRXJ4QixHQ01FLE1ETkVBLEtBQUdvaEQsR0FBTTdvRCxRQUFVLElBZnpCWCxRQzJCSit1RSxFQUFrQjF1RSxVRFZsQjh3RSxzQkFBdUIsU0FBRW51RSxHQUN2QixHQUFBNGxELEdBQUF3b0IsQ0NnQkEsT0RoQkFweEUsTUFBQ3F4RSxhQUFleHRFLEVBQUViLEVBQU1jLFFBQVF1QixNQUNoQytyRSxFQUFlcHhFLEtBQUMrcEQsTUFBTWhnRCxRQUFRLFFBRTlCNitDLEVBQVVqbUQsRUFBRXl1RSxFQUFZcHhFLEtBQUNxeEUsZUFBZVAsUUFBUXQwRCxJQUFJLFNBQUNwVSxHQ1duRCxNRFh1REEsR0FBRXpELFdBQVcsU0FBV3lxQixVQUFVeFAsT0FBT3BkLFFBQVF1RixPQUsxR3NoRCxJQUFJQyxNQUFNdHBELEtBQUN5b0QsV0FDVGMsT0FBU3ZwRCxLQUFDZ3hFLGVBQ1Z4bkIsS0FBU3hwRCxLQUFDcXhFLGNBQ1YsU0FBQXZyRSxHQ1NBLE1EVEEsVUFBQ2tWLEdBQ0QsR0FBQXMyRCxHQUFBbHlFLEVBQUF1SSxFQUFBekMsRUFBQUMsRUFBQWcrQixFQUFBK25CLEVBQUFxbUIsQ0FHQSxLQUhBenJFLEVBQUM0akQsWUFBYzF1QyxFQUFJdWxDLE9BQU8sU0FBR29KLEVBQUtDLEdBQStCLE1BQXZCRCxHQUFJQyxFQUFJNW5ELElBQUk0bkQsRUFBSWhzQyxNQUFjK3JDLE9BRXhFNG5CLEVBQWdCLEdBQ2hCbnlFLEVBQUEsRUFBQXVJLEVBQUFpaEQsRUFBQWpvRCxPQUFBdkIsRUFBQXVJLEVBQUF2SSxJQ2FJOHJELEVBQVN0QyxFQUFReHBELEdEWm5Ca3lFLEdBQUEsT0FBQXBzRSxFQUFBa3NFLEVBQUF0ckUsRUFBQXVyRSxnQkFBQSxrQkFBQW5zRSxHQUFBc1gsS0NpQlMsT0RqQlRyWCxFQUFBRCxFQUFBc1gsSUFBQSxTQUFBcFUsR0NjSSxNQUFPQSxHQUFFMUYsSUFBSSxZQUNaKzJCLE9BQU8sU0FBU3J4QixHQUNqQixNQUFPQSxLQUFNOGlELEtBQ0QvbEQsRURqQmlGeEUsT0FBQSxTQUFVLEVBQzNHNHdFLEdBQWlCLGtCQUFrQjV1RSxFQUFFdW9ELEdBQVEvb0QsU0FBUyxLQUFJUSxFQUFFbUQsRUFBQzRqRCxZQUFZd0IsSUFBUy9vRCxTQUFTLEtBQUltdkUsRUFBYyxZQ3dCN0csT0R2QkZDLEdBQWdCLDJFQUE2RUEsRUFFN0Z6ckUsRUFBQ1IsSUFBSUMsS0FBSyxXQUFXZixLQUFLK3NFLEdDb0JRLE9EbEJsQyxPQUFBcHVDLEVBQUFpdUMsRUFBQXRyRSxFQUFBdXJFLGdCQUFBLGtCQUFBbHVDLEdBQUEzbUIsSUFBQTJtQixFQUFBM21CLElBQUEsU0FBQXBVLEdDaUJJLE1BQU9BLEdBQUUxRixJQUFJLFlBQ1orMkIsT0FBa0IsUURqQnZCLFNBQUVyeEIsR0NtQkUsTURuQkVBLEtBQUdvaEQsTUFBTTdvRCxRQUFVLElBWnpCWCxRQ3FDSit1RSxFQUFrQjF1RSxVRHZCbEJteEUsYUFBYyxTQUFDMzFDLEdBQ2IsTUFBcUI3N0IsTUFBQ3d3RSxnQkFBaUIzMEMsR0FBb0MsSUFBbEI3N0IsS0FBQ3l3RSxjQUFuRCxXQUNjendFLEtBQUN3d0UsZ0JBQWlCMzBDLEdBQWtCNzdCLEtBQUN5d0UsbUJBQW5ELFdBQ0EsSUM4QlQxQixFQUFrQjF1RSxVRDVCbEJveEUsd0JBQXlCLFNBQUV6dUUsR0NxQ3pCLE1EbkNBaEQsTUFBQzB4RSxlQUFpQjF4RSxLQUFDc0YsSUFBSUMsS0FBSyxXQUFXRixNQUN2Q3JGLEtBQUNxeEUsYUFBaUJyeEUsS0FBQ3NGLElBQUlDLEtBQUssU0FBU0YsTUFDckNyRixLQUFDZ3hFLGVBQWlCaHhFLEtBQUNzRixJQUFJQyxLQUFLLFdBQVdGLE1BRXZDckYsS0FBQzJ4RSxjQUFnQjN4RSxLQUFDK3BELE1BQU1ueUMsT0FDdEIyeEMsT0FBU3ZwRCxLQUFDZ3hFLGVBQ1Z4bkIsS0FBU3hwRCxLQUFDcXhFLGFBQ1ZubUIsT0FBU2xyRCxLQUFDMHhFLGlCQUVaMXhFLEtBQUMwd0Usc0JDNkJIM0IsRUFBa0IxdUUsVUQzQmxCcXdFLG1CQUFvQixXQUVsQixHQUFBN2pCLEdBQUF6dEQsRUFBQW9KLEVBQUFiLEVBQUFpcUUsRUFBQTFzRSxFQUFBQyxFQUFBZytCLEVBQUEwdUMsRUFBQUMsRUFBQTFmLEVBQUE1SCxFQUFBbUIsQ0FxQ0EsS0FsQ0VtbUIsRUFIcUIsYUFBdkI1c0UsRUFBR2xGLEtBQUN3d0UsZ0JBQThCLFdBQS9CdHJFLEVBR2MsU0FBQVksR0MwQmIsTUQxQmEsVUFBQ3NDLEVBQUdDLEdBQ2pCLEdBQUFoRyxFQVFBLE9BUkErRixHQUFJQSxFQUFFbUQsVUFBVXpGLEVBQUMwcUUsZUFDakJub0UsRUFBSUEsRUFBRWtELFVBQVV6RixFQUFDMHFFLGVBRWZudUUsRUFERStGLEVBQUlDLEtBRUNELEVBQUlDLEVBQ0YsRUFFQSxFQUNKaEcsRUFBU3lELEVBQUMycUUsZ0JBVEp6d0UsTUFlQSxTQUFBOEYsR0MyQmIsTUQzQmEsVUFBQ3NDLEVBQUdDLEdDNEJmLE9ENUJ1QkEsRUFBRTNGLElBQUlvRCxFQUFDMHFFLGVBQWlCcG9FLEVBQUUxRixJQUFJb0QsRUFBQzBxRSxnQkFBbUIxcUUsRUFBQzJxRSxnQkFBL0R6d0UsTUFFakJBLEtBQUMyeEUsY0FBZ0IzeEUsS0FBQzJ4RSxjQUFjNXBFLEtBQUsrcEUsR0FFckNqbEIsRUFBZSxRQUNQN3NELEtBQUMwcEQsWUFBWSxPQUFBdmtELEVBQUFuRixLQUFBMnhFLGNBQUEsS0FBQSxrQkFBQXhzRSxHQUFBekMsSUFBQXlDLEVBQW1CekMsSUFBSyxVQUFBLFNBQWMsSUFBRywwR0FJSTFDLEtBQUN3eEUsYUFBYSxXQUFXLDZEQUM3Qnh4RSxLQUFDd3hFLGFBQWEsU0FBUywrREFDckJ4eEUsS0FBQ3d4RSxhQUFhLFVBQVUsbUZBQ0p4eEUsS0FBQ3d4RSxhQUFhLGNBQWMsMkZBT2hIcnVDLEVBQUFuakMsS0FBQTJ4RSxjQUFBbnBFLEVBQUFwSixFQUFBLEVBQUF1SSxFQUFBdzdCLEVBQUF4aUMsT0FBQXZCLEVBQUF1SSxFQUFBYSxJQUFBcEosRUNpQkVvckQsRUFBT3JuQixFQUFLMzZCLEdEZlptakQsRUFBU25CLEVBQUs5bkQsSUFBSSxVQUtUMUMsS0FBQzRzRCxTQUFTbHFELElBQUksb0JBSHZCa3ZFLEVBQXdCLDBEQUNtQ2ptQixFQUFPLHNGQUNQQSxFQUFPLHFEQUdsRXlHLEVBQVVweUQsS0FBQzJ2RSxhQUFhbmxCLEVBQUs5bkQsSUFBSSxhQUFjLEdBRS9DbXZFLEVBQW1CLDBEQUN3Q2xtQixFQUFPLHNGQUNQQSxFQUFPLG9EQUlsRWtCLEdBQWdCLHdCQUVNcmtELEVBQU0sS0FBSTRwRCxFQUFRLGFBQzlCNUgsRUFBS2ovQyxVQUFVLFNBQVMsYUFDeEJpL0MsRUFBS2ovQyxVQUFVLFVBQVUsYUFDekI0ckIsT0FBT3F6QixFQUFLOW5ELElBQUksZUFBZTZpQixPQUFPLGdCQUFnQixrRUFFSm9tQyxFQUFPLGdGQUNQQSxFQUFPLDhEQUczRGltQixHQUF5QixJQUFHLGdCQUc1QkMsR0FBb0IsSUFBRyw0Q0FLRmxtQixFQUFPLG9EQUdQQSxFQUFPLDZDQUdQQSxFQUFPLHNCQ2Z0QyxPRGtCQWtCLElBQWdCLG1CQUVoQjdzRCxLQUFDc0YsSUFBSUMsS0FBSyxrQkFBa0JmLEtBQUtxb0QsSUNqQjVCa2lCLEdEaFh1Qmx1RSxTQUFTc0YsTUFvWW5DNm9FLG1CQUFBLFNBQUFqdUUsR0NiSixRQUFTaXVFLEtBQ1AsTUFBT0EsR0FBbUIxdUUsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0F3SDlELE1BM0hBQyxRQUFPb3ZFLEVBQW9CanVFLEdBTTNCaXVFLEVBQW1CM3VFLFVEV25CYyxRQUNFcWdDLGdCQUFrQixpQkNScEJ3dEMsRUFBbUIzdUUsVURVbkJxMUMsY0FBZSxXQUNiLEdBQUFxOEIsRUNQQSxPRE9BL3hFLE1BQUNzRixJQUFJQyxLQUFLLG1CQUFtQjJ4QixPQUM3QjY2QyxFQUFhL3hFLEtBQUNzRixJQUFJQyxLQUFLLFVBQVVGLE1BQ2pDckYsS0FBQ3NGLElBQUlDLEtBQUssWUFBWXdzRSxHQUFjcjJELFFDTnRDc3pELEVBQW1CM3VFLFVEUW5CaWQsV0FBWSxTQUFDOWIsR0FFWCxHQUFBd3dFLEdBQUFDLEVBQUEveEUsRUFBQWd5RSxFQUFBNzdELEVBQUE3VCxDQUFBNlQsR0FBT3JXLElBQ1AsS0FBQUUsSUFBQXNCLEdDUEVnQixFQUFRaEIsRUFBUXRCLEdET2xCRixLQUFFRSxHQUFPc0MsQ0M2QlQsT0QzQkF5dkUsR0FBa0J0dkUsRUFBRTNDLEtBQUM4ckQsU0FBU2xrRCxlQUFlZ1EsT0FBT3RWLEtBQU8sZUFDM0QwdkUsRUFBd0JDLEVBQWdCejFELElBQUssU0FBQ00sR0NINUMsT0RHcURsSCxJQUFRa0gsRUFBRyt4QyxXQUNsRXFqQixFQUFVLFNBQUNwdkQsR0FFVCxHQUFBTSxHQUFBbU0sQ0FBQSxPQUFtQyxLQUFoQ3lpRCxFQUFzQnJ4RSxPQUN2QjBWLEVBQUtuUSxVQUVMcXBCLEVBQVF5aUQsRUFBc0J4L0QsTUFDOUI0USxFQUFhLEdBQUlyRixZQUFXd1IsR0FDNUJ6TSxFQUFZamIsS0FBS3ViLEdBQ2pCQSxFQUFXL2IsT0FDVHJCLE1BQU8sV0NDTCxNRERRQyxPQUFNLGlEQUNoQkosUUFBUyxXQ0lQLE1ESEF1ZCxHQUFXdEMsVUFBWSxHQUFJak8sV0FDM0J1USxFQUFXdEMsVUFBVXpaLE9BQ25CbkgsSUFBTWtqQixFQUFXcGhCLEdBQ2pCNkQsUUFBUyxXQ0dQLE1ERkFxc0UsR0FBUXB2RCxXQUVwQjlpQixLQUFDOGlCLGVBQ0RvdkQsRUFBUWx5RSxLQUFDOGlCLGNDVVhrc0QsRUFBbUIzdUUsVURSbkI2RixPQUFRLFdBQ04sR0FBQStDLEdBQUFtYSxFQUFBK3VELEVBQUE5cEMsRUFBQStwQyxFQUFBNXRFLEVBQUFwRixFQUFBaVEsRUFBQTNILEVBQUFoSCxFQUFBaUgsRUFBQXdGLEVBQUE2VCxFQUFBczhDLEVBQUFDLEVBQUFqdUQsRUFBQW9PLEVBQUEyMEQsRUFBQWp4RCxFQUFBbGMsRUFBQUMsRUFBQWcrQixFQUFBQyxFQUFBK1QsRUFBQW03QixFQUFBaHhELEVBQUFpeEQsRUFBQWp3RSxFQUFBRSxDQUlBLEtBSkE2dkUsS0FDQUYsRUFBYyxHQUNkOXBDLEdBQVEsRUFFUm5qQyxFQUFBbEYsS0FBQThpQixZQUFBMWpCLEVBQUEsRUFBQXVJLEVBQUF6QyxFQUFBdkUsT0FBQXZCLEVBQUF1SSxFQUFBdkksSUFDRSxJQ1NBZ2tCLEVBQWFsZSxFQUFJOUYsR0RUakIrRixFQUFBaWUsRUFBQTVFLFNBQUF2YSxPQUFBb0wsRUFBQSxFQUFBbEMsRUFBQWhJLEVBQUF4RSxPQUFBME8sRUFBQWxDLEVBQUFrQyxJQUNFLEdDV0FpUyxFQUFVbmMsRUFBS2tLLEdEWGdCLFdBQTVCaVMsRUFBUTVlLElBQUksYUFBZixDQU9FLElBTEEwdkUsRUFBZ0IvcEMsRUFBd0MsR0FBN0Isd0JBQ1ZBLElBQWpCQSxHQUFRLEdBQ1I4cEMsR0FBZSxZQUFZQyxFQUFPLG1CQUFrQjl3RCxFQUFRdGYsR0FBRyxvQkFDL0Rxd0UsR0FBZSxrQkFBa0Ivd0QsRUFBUXRmLEdBQUcsS0FBSXNmLEVBQVE1ZSxJQUFJLFFBQVEsWUFFcEV5Z0MsRUFBQS9mLEVBQUF0QyxVQUFBN2MsT0FBQXlELEVBQUEsRUFBQXNaLEVBQUFtaUIsRUFBQXhpQyxPQUFBK0csRUFBQXNaLEVBQUF0WixJQUVFLEdDWUEwWixFQUFXK2hCLEVBQUt6N0IsR0RaSjBaLEVBQVMxZSxJQUFJLGVBQWtCNGUsRUFBUXRmLEdBQW5ELENBTUEsR0FKQXV3RSxFQUFZLEdBRVpqd0UsRUFBTzhlLEVBQVMxZSxJQUFJLFFBRVQsV0FBUkosRUFDRCxJQUFBOGdDLEVBQUFoaUIsRUFBQTFlLElBQUEsV0FBQWhDLEVBQUEsRUFBQTQ4RCxFQUFBbDZCLEVBQUF6aUMsT0FBQUQsRUFBQTQ4RCxFQUFBNThELElDY0VnZCxFQUFTMGxCLEVBQUsxaUMsR0RWWnVJLEVBSEtqSixLQUFDd3FELEtBQUs5bkQsSUFBSTBlLEVBQVMxZSxJQUFJLFNBR2hCMUMsS0FBQ3dxRCxLQUFLOW5ELElBQUkwZSxFQUFTMWUsSUFBSSxXQUFZZ2IsRUFBT2xiLE1BQVcsMkNBQWdELDJDQUZ4RyxvQ0FHWCt2RSxHQUFhLFlBRUg3MEQsRUFBT0UsTUFBTSxhQUNiM1UsRUFBTyxrQkFHaEIsSUFBVyxhQUFSM0csRUFDTixJQUFBNjBDLEVBQUEvMUIsRUFBQTFlLElBQUEsV0FBQTRNLEVBQUEsRUFBQWl1RCxFQUFBcG1CLEVBQUF4MkMsT0FBQTJPLEVBQUFpdUQsRUFBQWp1RCxJQ2FFb08sRUFBU3k1QixFQUFLN25DLEdEWmQ5TSxFQUFReEMsS0FBQ3dxRCxLQUFLOW5ELElBQU8wZSxFQUFTMWUsSUFBSSxRQUFRLElBQUdnYixFQUFPbGIsT0FJbER5RyxFQUhLekcsRUFHK0QsSUFBeER4QyxLQUFDd3FELEtBQUs5bkQsSUFBTzBlLEVBQVMxZSxJQUFJLFFBQVEsSUFBR2diLEVBQU9sYixPQUFtQiwyQ0FBZ0QsMkNBRmxILG9DQUdYK3ZFLEdBQWEsWUFFSDcwRCxFQUFPRSxNQUFNLGFBQ2IzVSxFQUFPLGtCQUluQnNwRSxJQUFhLHdCQUVTdnlFLEtBQUN3cUQsS0FBSzluRCxJQUFJMGUsRUFBUzFlLElBQUksU0FBUyxhQUd4RHl2RSxJQUFlLE9BQ1Avd0QsRUFBUzFlLElBQUksVUFBVSxnQkFDcEI2dkUsRUFBVSxXQUV2QkosR0FBZSxhQ1dyQixNRFZBRyxHQUFlLFdBQVdELEVBQVksWUFHdEM3dEUsRUFBTyxvQkFFSDh0RSxFQUFhLElBQ2JILEVBR0pueUUsS0FBQ3NGLElBQUlkLEtBQUtBLElDSUx3cUUsR0Q1R3dCbnVFLFNBQVNzRjs7O0FFcFkxQyxHQUFBcXNFLFlBQUE1eUUsT0FBQSxTQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEtBQUFDLEtBQUFDLFlBQUFKLEVBQUEsSUFBQSxHQUFBSyxLQUFBSixHQUFBSyxRQUFBQyxLQUFBTixFQUFBSSxLQUFBTCxFQUFBSyxHQUFBSixFQUFBSSxHQUFBLE9BQUFILEdBQUFNLFVBQUFQLEVBQUFPLFVBQUFSLEVBQUFRLFVBQUEsR0FBQU4sR0FBQUYsRUFBQVMsVUFBQVIsRUFBQU8sVUFBQVIsR0NFRU0sV0FBYUksY0RGVGl5RSxZQUFBLFNBQUF6eEUsR0NPSixRQUFTeXhFLEtBQ1AsTUFBT0EsR0FBV2x5RSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQTJCdEQsTUE5QkFDLFFBQU80eUUsRUFBWXp4RSxHQU1uQnl4RSxFQUFXbnlFLFVEVFhpZCxXQUFZLGFDV1prMUQsRUFBV255RSxVRFRYZ0gsTUFBTyxhQ1dQbXJFLEVBQVdueUUsVURSWHVGLEtBQU0sYUNVTjRzRSxFQUFXbnlFLFVEUFg2SSxZQUFhLFNBQUVoSixHQUNiLEdBQUFtQyxFQUNBLE9BREFBLEdBQVNNLEVBQUUzQyxLQUFDMEMsSUFBSSxTQUFTa1YsT0FBTTFYLElBQU1BLElBQ1htQyxFQUFPMUIsT0FBUyxFQUFuQzBCLEVBQU8sR0FBR0csTUFDVixhQ2VUZ3dFLEVBQVdueUUsVURiWDhILElBQUssU0FBQ0YsR0NpQkosTURoQjJCdEYsR0FBRXNGLEdBQVNxVSxZQUF0Q3JVLEdBQVdBLElBQ1hqSSxLQUFDaUUsT0FBU2pFLEtBQUNpRSxPQUFPeWYsT0FBT3piLElDa0JwQnVxRSxHRG5DZ0IzeEUsU0FBUzRGOzs7QUVHbEMsR0FBQWdzRSxNQUFBbHpFLEtBQUEsU0FBQUMsRUFBQUMsR0FBQSxNQUFBLFlBQUEsTUFBQUQsR0FBQUUsTUFBQUQsRUFBQUUsYUNERUMsT0FBUyxTQUFTQyxFQUFPQyxHQUErRixRQUFTQyxLQUFTQyxLQUFLQyxZQUFjSixFQUExSCxJQUFLLEdBQUlLLEtBQU9KLEdBQWNLLFFBQVFDLEtBQUtOLEVBQVFJLEtBQU1MLEVBQU1LLEdBQU9KLEVBQU9JLEdBQTJKLE9BQXJHSCxHQUFLTSxVQUFZUCxFQUFPTyxVQUFXUixFQUFNUSxVQUFZLEdBQUlOLEdBQVFGLEVBQU1TLFVBQVlSLEVBQU9PLFVBQWtCUixHQUNsUk0sV0FBYUksY0RBVGt5RSxNQUFBLFNBQUExeEUsR0NLSixRQUFTMHhFLEtBS1AsTUFKQXp5RSxNQUFLcUgsTUFBUTlILEtBQUtTLEtBQUtxSCxNQUFPckgsTUFDOUJBLEtBQUsweUUsZUFBaUJuekUsS0FBS1MsS0FBSzB5RSxlQUFnQjF5RSxNQUNoREEsS0FBS3UwQixNQUFRaDFCLEtBQUtTLEtBQUt1MEIsTUFBT3YwQixNQUM5QkEsS0FBSzZhLE9BQVN0YixLQUFLUyxLQUFLNmEsT0FBUTdhLE1BQ3pCeXlFLEVBQUtueUUsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0EyV2hELE1BbFhBQyxRQUFPNnlFLEVBQU0xeEUsR0FVYjB4RSxFQUFLcHlFLFVEWExvUyxJQUFLLE9DYUxnZ0UsRUFBS3B5RSxVRFhMaWQsV0FBWSxTQUFDOWIsR0NjWCxNRGJBeEIsTUFBQzJ5RSxXQUNEM3lFLEtBQUM0eUUsT0FBUyxLQUNWNXlFLEtBQUM2eUUsT0FBUyxNQ21CWkosRUFBS3B5RSxVRGRMdUIsS0FBTyxXQ2VMLE1EZlE1QixNQUFDNHlFLFFBQVcsTUNrQnRCSCxFQUFLcHlFLFVEakJMd3lFLE9BQVMsV0NrQlAsTURsQlU3eUUsTUFBQzZ5RSxRQUFXLE1DcUJ4QkosRUFBS3B5RSxVRHBCTHl5RSxNQUFPLFdDcUJMLE1EckJROXlFLE1BQUMyeUUsU0FBVyxNQ3dCdEJGLEVBQUtweUUsVUR2QkwweUUsWUFBYSxXQ3dCWCxPRHhCZWx2RSxFQUFFbXZFLE9BQU8sZ0JBQWdCLElBQUkvNUQsTUFBTSxNQzJCcER3NUQsRUFBS3B5RSxVRHhCTHdhLE9BQVEsU0FBRWpaLEVBQU1rWixHQzBCZCxNRHpCQW5jLFdBQVV3TixJQUFJOG1FLElBQUksY0FBZXJ4RSxHQUNqQzNDLFFBQVE0YixRQUNOalosS0FBT0EsRUFDUGtaLEtBQU9BLEVBQ1BqVixRQUFTLFNBQUFDLEdDeUJQLE1EekJPLFlBQ1AsR0FBYyxVQUFYQSxFQUFDb3RFLE9DMkJBLE1EMUJGcHRFLEdBQUNvdEUsT0FBUyxjQUNWcHRFLEVBQUN5dUIsTUFBTTN5QixFQUFNa1osS0FIUjlhLE1BSVRnRyxNQUFPLFNBQUFGLEdDNkJMLE1EN0JLLFVBQUNpYyxHQytCSixNRDlCRmpjLEdBQUNvdEUsT0FBUyxLQUNWanRFLE1BQU0saUJBQWlCOGIsRUFBSTNXLGNBRnRCcEwsU0NxQ1h5eUUsRUFBS3B5RSxVRGpDTDRvQixPQUFRLFdDa0NOLE1EakNBanBCLE1BQUNnSSxTQUFTLFNBQVN1NEMsT0FBTyxTQUFDbCtDLEVBQVE4d0UsR0FLakMsTUFKR0EsR0FBSzN5RSxRQUFRLGVBQ2Q2QixFQUFPZ3hCLE1BQU14ckIsS0FBS3NyRSxFQUFLMTBELE9BQU8sRUFBRzAwRCxFQUFLeHlFLFNBQ2hDd3lFLEVBQUszeUUsUUFBUSxpQkFDbkI2QixFQUFPK3dFLE9BQU92ckUsS0FBS3NyRSxFQUFLMTBELE9BQU8sRUFBRzAwRCxFQUFLeHlFLFNBQ2xDMEIsSUFDTGd4QixTQUFZKy9DLGFDd0NsQlgsRUFBS3B5RSxVRHRDTGswQixNQUFPLFNBQUUzeUIsRUFBTWtaLEVBQU00RCxHQzJDbkIsTUFKaUIsT0FBYkEsSUR2Q2VBLE1BRW5CL2YsVUFBVXdOLElBQUk4bUUsSUFBSSxxQkFBc0JyeEUsR0FDeENpQyxFQUFFdVEsTUFBTW1nQixPQUNOM3lCLEtBQVdBLEVBQ1h5eEUsU0FBV3Y0RCxFQUNYalYsUUFBUyxTQUFBQyxHQ3lDUCxNRHpDTyxVQUFFbUYsR0NnRFAsTUQ5Q0ZuRixHQUFDb3RFLE9BQVMsR0FDVnB0RSxFQUFDOHNFLE9BQVNoeEUsRUFDVmtFLEVBQUNnVixLQUFPQSxFQUNSaFYsRUFBQytzRSxPQUFTLzNELEVBQ1ZoVixFQUFDNnNFLFFBQVcxbkUsRUFBSzZuRSxNQUNqQm4wRSxVQUFVd04sSUFBSThtRSxJQUFJLHFCQUFzQnJ4RSxHQUN4Q2tFLEVBQUN1QixPQUNDeEIsUUFBUyxXQUNQLEdBQUFrdEUsRUNvREUsT0FYaUMsa0JBQXRCcjBELEdBQVU3WSxTRHpDdkI2WSxFQUFVN1ksVUFDVkMsRUFBQytXLFFBQVEsU0FDVGsyRCxFQUFjanRFLEVBQUNpdEUsY0FBY3Q1QyxPQUFRLFNBQUNyeEIsR0M0Q2xDLFFENUMwQ0EsRUFBRTVILFFBQVFzRixFQUFDbEUsVUFDekRteEUsRUFBWS8vQixRQUFRbHRDLEVBQUNsRSxRQUNBbXhFLEVBQVlweUUsUUFBVW1GLEVBQUN3dEUsaUJBQTVDUCxFQUFZdmdFLE1BQ1ozTyxFQUFFbXZFLE9BQU8sY0FBZUQsUUFmckIveUUsTUFpQlRnRyxNQUFPLFNBQUFGLEdDbURMLE1EbkRLLFVBQUVrSSxFQUFRaEksRUFBT0wsR0FDdEIsTUFBYyxnQkFBWEcsRUFBQ290RSxRQUNGcHRFLEVBQUNvdEUsT0FBUyxHQUNWcHRFLEVBQUMrVyxRQUFRLGFBQWN0VCxFQUFFLCtDQUN6QjVLLFVBQVV3TixJQUFJOG1FLElBQUksa0JBQW1CcnhFLEVBQU8seUJBRTVDa0UsRUFBQ290RSxPQUFTLFFBQ1ZwdEUsRUFBQytVLE9BQU9qWixFQUFNa1osTUFQWDlhLFNDaUVYeXlFLEVBQUtweUUsVUR2RExxeUUsZUFBZ0IsU0FBQ2gwRCxHQ3dEZixNRHZEQTdhLEdBQUV1USxNQUFNbS9ELFNBQ04xdEUsUUFBUyxTQUFBQyxHQ3dEUCxNRHhETyxVQUFDeUIsR0FDUixNQUFHLE9BQUFBLEVBQUFpc0UsUUFBQTV4RSxNQUNEa0UsRUFBQzhzRSxPQUFVcnJFLEVBQVNpc0UsUUFBUTV4RSxLQUM1QmtFLEVBQUM2c0UsUUFBVXByRSxFQUFTaXNFLFFBQVFWLE1BQzVCaHRFLEVBQUN1QixPQUNDeEIsUUFBUyxXQzJETCxNRDFERkMsR0FBQytXLFFBQVEsU0FDVDZCLEVBQVU3WSxRQUFRbkcsTUFBTW9HLEVBQUduRyxXQUMzQmhCLFVBQVV3TixJQUFJOG1FLElBQUksYUFBYyx1QkFFcEN2MEQsRUFBVTdZLFFBQVFuRyxNQUFNb0csRUFBR25HLGFBVnRCSyxNQVdUZ0csTUFBTyxXQzhETCxNRDdEQUMsT0FBTSwyQkFBMkJ0RyxVQUFVOGMsS0FBSyxXQ2tFdERnMkQsRUFBS3B5RSxVRC9ETGt4QixPQUFRLFNBQUU3UyxHQUNSLE1BQWMsUUFBWDFlLEtBQUM0eUUsT0FDQyxPQUFBLE1BQUFsMEQsRUFBQUEsRUFBQSswRCxlQUFBLFFBQ0QvMEQsRUFBVSswRCxpQkFFVjkwRSxVQUFVb1csT0FBT0MsU0FBUyxTQUFTLElDa0VwQixNQUFiMEosR0FDdUMsa0JBQTlCQSxHQUFVZzFELGlCRGpFdkJoMUQsRUFBV2cxRCxrQkFDUjF6RSxLQUFDcVYsVUNxRWtCLE1BQWJxSixHQUFpRCxrQkFBdEJBLEdBQVVySixRRHBFNUNxSixFQUFXckosVUFBQSxPQ3NFUyxNQUFicUosR0FBZ0Qsa0JBQXJCQSxHQUFVaTFELE9EcEU1Q2oxRCxFQUFXaTFELFNBQUEsU0N5RWpCbEIsRUFBS3B5RSxVRHZFTGdWLFFBQVMsV0FDUCxHQUFBdStELEdBQUFDLENBRUEsT0FGQUEsR0FBZ0I3ekUsS0FBQ2dJLFNBQVMsU0FBU3hILFFBQVEsZUFDM0NvekUsRUFBZTV6RSxLQUFDaXBCLFNBQVNvSyxNQUFNN3lCLFFBQVE3QixVQUFVbUUsU0FBU0osSUFBSSxxQkFDL0NreEUsS0FDQUMsR0NnRmpCcEIsRUFBS3B5RSxVRDdFTGlPLE9BQVEsV0M4RU4sTUQ3RUF6SyxHQUFFdVEsTUFBTTlGLFFBQ056SSxRQUFTLFNBQUFDLEdDOEVQLE1EOUVPLFlDdUZMLE1EdEZGakMsR0FBRWl3RSxhQUFhLGVBQ2ZodUUsRUFBQzhzRSxPQUFVLEtBQ1g5c0UsRUFBQytzRSxPQUFVLEtBQ1gvc0UsRUFBQ2dWLEtBQU8sS0FDUmhWLEVBQUM2c0UsV0FDRDdzRSxFQUFDcWMsUUFDRHJjLEVBQUMrVyxRQUFRLFVBQ1RsZSxVQUFVd04sSUFBSThtRSxJQUFJLGNBQWUsVUFDakN6cEUsT0FBT2tMLFNBQVcvVixVQUFVbUUsU0FBU21pQixTQUFTLFdBVHZDamxCLFNDb0dieXlFLEVBQUtweUUsVURuRkx1RixLQUFNLFNBQUNtdUUsRUFBV0MsRUFBY3h5RSxHQUM5QixHQUFBK2tELEVDMkZBLE9EM0ZBQSxNQUNHNWpELEVBQUUrVCxTQUFTcTlELElBQ1p4dEIsRUFBUTFpRCxFQUFFakUsT0FBTzJtRCxFQUFPd3RCLEdBQ3hCdnlFLEVBQVV3eUUsR0FFVnp0QixFQUFNd3RCLEdBQWF2eEUsTUFFckJxQixFQUFFdVEsTUFBTTYvRCxPQUFPLFNBQUFudUUsR0NxRmIsTURyRmEsVUFBQzJaLEdDc0ZaLE1EckZGQSxHQUFHaS9CLFFBQVE3NkMsRUFBRWpFLE9BQU9rRyxFQUFDbkIsV0FBWTRoRCxJQUMvQjFnRCxRQUFTLFdBQ1AsR0FBQVgsRUNzRkUsT0FBa0MsUUFBMUJBLEVBQU0xRCxFQUFRcUUsU0FBbUJYLEVEdEYxQnhGLE1BQU1vRyxFQUFHbkcsV0FBMUIsWUFIU0ssUUNxR2pCeXlFLEVBQUtweUUsVUQ3RkxnSCxNQUFPLFNBQUVxWCxHQ2lHUCxNQUhpQixPQUFiQSxJRDlGR0EsTUFDUDdhLEVBQUV1USxNQUFNNi9ELE9BQU8sU0FBQW51RSxHQ2lHYixNRGpHYSxVQUFDMlosR0NrR1osTURqR0ZBLEdBQUd4SixRQUFRLG9CQUFvQm5RLEVBQUM4c0UsUUFDOUIvc0UsUUFBUyxTQUFFcXVFLEdDbUdQLE1EbEdGcHVFLEdBQUNRLElBQUk0dEUsR0NrR2lDLGtCQUF0QngxRCxHQUFVN1ksUURqRzFCNlksRUFBVTdZLFFBQVNxdUUsR0FBQSxRQUNyQmx1RSxNQUFPLFdDbUdILE1BQWtDLGtCQUFwQjBZLEdBQVUxWSxNRGxHMUIwWSxFQUFVMVksTUFBT2t1RSxTQUFBLFlBTlJsMEUsUUNxSGpCeXlFLEVBQUtweUUsVURyR0x1ckQsZUFBZ0IsU0FBRXVvQixFQUFvQmowRSxFQUFVc0MsR0FDOUMsR0FBQTR4RSxFQ29IQSxPQWRjLE9BQVZELElEdkdZQSxFQUFTLFdDMEdkLE1BQVBqMEUsSUQxR2dDQSxFQUFNLElDNkc3QixNQUFUc0MsSUQ3RzBDQSxFQUFRLElBQ3RENHhFLEVBQWNwMEUsS0FBQzBDLElBQUksbUJBQ2EsTUFBQTB4RSxFQUFBRCxLQUFoQ0MsRUFBWUQsT0FDWkMsRUFBWUQsR0FBUWowRSxHQUFPc0MsRUFDM0J4QyxLQUFDNEYsTUFBS3d1RSxZQUFlQSxLQ3NIdkIzQixFQUFLcHlFLFVEcEhMdXFELGVBQWdCLFNBQUV1cEIsRUFBb0JqMEUsR0FDcEMsR0FBQW0wRSxHQUFBbnZFLENBQ0EsT0NvSGMsT0FBVml2RSxJRHRIWUEsRUFBUyxXQ3lIZCxNQUFQajBFLElEekhnQ0EsRUFBTSxJQUMxQ20wRSxFQUFRcjBFLEtBQUMwQyxJQUFJLGVBQzJCLEtBQVB4QyxHQUFqQyxNQUFBbTBFLEVBQU9BLEVBQU9GLEdBQUEsU0FBVyxNQUN6QixNQUFBRSxHQUFBLE9BQUFudkUsRUFBQW12RSxFQUFBRixJQUFBanZFLEVBQXVCaEYsR0FBQSxTQUFRLE1Dc0lqQ3V5RSxFQUFLcHlFLFVENUhMaTBFLFVBQVcsU0FBQzF5RSxFQUFNOGMsR0NpSWhCLE1BSmlCLE9BQWJBLElEN0hZQSxNQUNoQnZmLE1BQU1vVyxTQUFRLEdBQ2R0VyxRQUFRMGIsVUFDTi9ZLEtBQVFBLEVBQ1JpRSxRQUFVLFNBQUFDLEdDZ0lSLE1EaElRLFVBQUV5QixHQ21JUixNRGxJRnBJLE9BQU1vVyxTQUFRLEdBQ2RwVyxNQUFNa1AsU0FBUzlHLEVBQVM1QixTQUN4QkcsRUFBQ3VCLE9BQ0N4QixRQUFTLFdDb0lMLE1BSGlDLGtCQUF0QjZZLEdBQVU3WSxTRGhJdkI2WSxFQUFVN1ksUUFBUzBCLEdBQ25CekIsRUFBQytXLFFBQVEsc0JBTkw3YyxNQU9WZ0csTUFBUSxTQUFBRixHQ3VJTixNRHZJTSxVQUFDeUIsR0MwSUwsTUR6SUZwSSxPQUFNb1csU0FBUSxHQUNkcFcsTUFBTWtQLFVBQVU5RyxFQUFTMFQsa0JBQWtCdFYsU0FBVyx3QkN3SWxCLGtCQUFwQitZLEdBQVUxWSxNRHZJMUIwWSxFQUFVMVksTUFBT3VCLEdBQUEsU0FIWHZILFNDZ0paeXlFLEVBQUtweUUsVUQzSUx1YSxXQUFZLFNBQUNOLEVBQU9vRSxHQ2dKbEIsTUFKaUIsT0FBYkEsSUQ1SWNBLE1BQ2xCdmYsTUFBTW9XLFNBQVEsR0FDZHRXLFFBQVEyYixZQUNOM1AsS0FBU2pMLEtBQUMwQyxJQUFJLFFBQ2Q0WCxNQUFTQSxFQUNUelUsUUFBVSxTQUFBQyxHQytJUixNRC9JUSxVQUFDeUIsR0NnSlAsTUQvSUZ6QixHQUFDdUIsT0FDQ3hCLFFBQVMsV0NtSkwsTURsSkYxRyxPQUFNb1csU0FBUSxHQUNkelAsRUFBQytXLFFBQVEsaUJBQ1QxZCxNQUFNa1AsU0FBUzlHLEVBQVM1QixTQ2dKYyxrQkFBdEIrWSxHQUFVN1ksUUQvSTFCNlksRUFBVTdZLFFBQVMwQixHQUFBLFlBTmZ2SCxNQVFWZ0csTUFBUSxTQUFBRixHQ21KTixNRG5KTSxVQUFDeUIsR0NzSkwsTURySkZwSSxPQUFNb1csU0FBUSxHQUNkcFcsTUFBTWtQLFNBQVMsd0JBQXdCOUcsRUFBUzBULGNDb0paLGtCQUFwQnlELEdBQVUxWSxNRG5KMUIwWSxFQUFVMVksTUFBT3VCLEdBQUEsU0FIWHZILFNDNEpaeXlFLEVBQUtweUUsVUR0SkwwakIsV0FBWSxTQUFDOVksRUFBTTZQLEdBQ2pCLEdBQUFwRyxFQ3lKQSxPRHpKQS9WLFdBQVV3TixJQUFJc1QsR0FBRyxPQUFRLGNBQ3pCL0ssRUFBVzYvRCxtQkFBbUIvcUUsT0FBT2tMLFNBQVN0SixZQUM5Q2dGLFNBQVNzRSxTQUFXL1YsVUFBVW1FLFNBQVM0UixTQUFTNEYsTUFBTTdILElBQUl2TyxRQUFRLFlBQVksUUFBTyxVQUFVK0csRUFBSyxJQUFHNlAsRUFBSyxJQUFHcEcsSUMwSjFHKzlELEdEclhVNXhFLFNBQVM0Rjs7O0FFSDVCLEdBQUErdEUsT0FBQTUwRSxPQUFBLFNBQUFDLEVBQUFDLEdBQUEsUUFBQUMsS0FBQUMsS0FBQUMsWUFBQUosRUFBQSxJQUFBLEdBQUFLLEtBQUFKLEdBQUFLLFFBQUFDLEtBQUFOLEVBQUFJLEtBQUFMLEVBQUFLLEdBQUFKLEVBQUFJLEdBQUEsT0FBQUgsR0FBQU0sVUFBQVAsRUFBQU8sVUFBQVIsRUFBQVEsVUFBQSxHQUFBTixHQUFBRixFQUFBUyxVQUFBUixFQUFBTyxVQUFBUixHQ0VFTSxXQUFhSSxjREZUaTBFLE9BQUEsU0FBQXp6RSxHQ09KLFFBQVN5ekUsS0FDUCxNQUFPQSxHQUFNbDBFLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBT2pELE1BVkFDLFFBQU80MEUsRUFBT3p6RSxHQU1keXpFLEVBQU1uMEUsVURWTm9TLElBQVEsT0NZUitoRSxFQUFNbjBFLFVEWE5zQixNQUFROHdFLEtDYUQrQixHRGZXM3pFLFNBQVM4Rjs7O0FFQTdCLEdBQUE4dEUsV0FBQWwxRSxLQUFBLFNBQUFDLEVBQUFDLEdBQUEsTUFBQSxZQUFBLE1BQUFELEdBQUFFLE1BQUFELEVBQUFFLGFDRUVDLE9BQVMsU0FBU0MsRUFBT0MsR0FBK0YsUUFBU0MsS0FBU0MsS0FBS0MsWUFBY0osRUFBMUgsSUFBSyxHQUFJSyxLQUFPSixHQUFjSyxRQUFRQyxLQUFLTixFQUFRSSxLQUFNTCxFQUFNSyxHQUFPSixFQUFPSSxHQUEySixPQUFyR0gsR0FBS00sVUFBWVAsRUFBT08sVUFBV1IsRUFBTVEsVUFBWSxHQUFJTixHQUFRRixFQUFNUyxVQUFZUixFQUFPTyxVQUFrQlIsR0FDbFJNLFdBQWFJLGVBQ2JDLFdBQWFBLFNBQVcsU0FBU0MsR0FBUSxJQUFLLEdBQUlyQixHQUFJLEVBQUdzQixFQUFJVixLQUFLVyxPQUFRdkIsRUFBSXNCLEVBQUd0QixJQUFPLEdBQUlBLElBQUtZLE9BQVFBLEtBQUtaLEtBQU9xQixFQUFNLE1BQU9yQixFQUFLLFVESm5JcTFFLFdBQUEsU0FBQTF6RSxHQ1NKLFFBQVMwekUsS0FLUCxNQUpBejBFLE1BQUs4SixRQUFVdkssS0FBS1MsS0FBSzhKLFFBQVM5SixNQUNsQ0EsS0FBSzh2QixZQUFjdndCLEtBQUtTLEtBQUs4dkIsWUFBYTl2QixNQUMxQ0EsS0FBS2tHLE9BQVMzRyxLQUFLUyxLQUFLa0csT0FBUWxHLE1BQ2hDQSxLQUFLMDBFLFNBQVduMUUsS0FBS1MsS0FBSzAwRSxTQUFVMTBFLE1BQzdCeTBFLEVBQVVuMEUsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0FnUHJELE1BdlBBQyxRQUFPNjBFLEVBQVcxekUsR0FVbEIwekUsRUFBVXAwRSxVRGZWaVcsVUFBVyxZQ2lCWG0rRCxFQUFVcDBFLFVEZlZjLE9BQ0s2YSxVQUFVQyxPQUNYMDRELGlCQUF1QixhQUN2Qi94QixlQUF1QixnQkFDdkJneUIscUJBQXVCLGlCQUN2QkMsY0FBa0IsYUFDbEJDLGVBQWtCLFNBQ2xCQyxnQkFBa0IsYUFDbEJDLGVBQXVCLGFBQ3ZCQyxrQkFBdUIsaUJBRXZCTixpQkFBdUIsYUFDdkIveEIsZUFBdUIsZ0JBQ3ZCZ3lCLHFCQUF1QixpQkFDdkJDLGNBQXVCLGFBQ3ZCQyxlQUF1QixTQUN2QkMsZ0JBQXVCLGFBQ3ZCQyxlQUF1QixhQUN2QkMsa0JBQXVCLGdCQ2lCM0JSLEVBQVVwMEUsVURmVmlkLFdBQVksU0FBQzliLEdDa0NYLE1EakNBcUMsR0FBRTJGLFFBQVF4QyxHQUFHLGtDQUFtQ2hILEtBQUMwMEUsVUFDakQxMEUsS0FBQ3FkLEtBQU8sUUFDUnJkLEtBQUNtUyxPQUNEblMsS0FBQzRxQixNQUFRcHBCLEVBQVFvcEIsTUFDakI1cUIsS0FBQ2lMLEtBQU90TSxVQUFVc00sS0FDbEJqTCxLQUFDaUwsS0FBS2pFLEdBQUcsUUFBU2hILEtBQUNrMUUsTUFDbkJsMUUsS0FBQ2lMLEtBQUtqRSxHQUFHLGFBQWMsU0FBQWxCLEdDZ0JyQixNRGhCcUIsVUFBQ0UsR0NpQnBCLE1EakI4QkYsR0FBQ3F2RSxVQUFVbnZFLEtBQXRCaEcsT0FDdkJBLEtBQUNpTCxLQUFLakUsR0FBRyxhQUFjLFNBQUFsQixHQ29CckIsTURwQnFCLFVBQUNFLEdDcUJwQixNRHJCOEJGLEdBQUNzdkUsVUFBVXB2RSxLQUF0QmhHLE9BQ3ZCQSxLQUFDcTFFLGNBQWdCeHhFLEVBQUUsUUFBUU0sSUFBSSxjQUMvQk4sRUFBRSxRQUFRTSxJQUFJLGFBQWMsU0FDNUJOLEVBQUUsV0FBV3F6QixRQzBCZnU5QyxFQUFVcDBFLFVEeEJWaTFFLGFBQWMsU0FBQ3R5RSxHQUNiLEdBQUFHLEdBQUF2QixDQUVBLE9BRkF1QixHQUFVVSxFQUFFYixFQUFNYyxRQUNsQmxDLEVBQVN1QixFQUFRa0MsTUFBTXFMLGVBQWlCLEdBQ3JDOU8sRUFBS2pCLE9BQVMsR0FBTUgsUUFBQUosS0FBUUosS0FBQzRxQixNQUFNelcsTUFBTSxRQUFyQnZTLElBQUEsRUFDckI1QixLQUFDbzFFLFVBQVVwMUUsS0FBQzhvQixLQUFLLGtCQUVqQjlvQixLQUFDdTFFLGVDNkJMZCxFQUFVcDBFLFVEMUJWbTFFLGNBQWUsU0FBQ3h5RSxHQUNkLEdBQUFHLEdBQUFiLENBQUFhLEdBQVVVLEVBQUViLEVBQU1jLFFBQ2xCeEIsRUFBT2EsRUFBUWEsS0FBSyxTQ2lDdEJ5d0UsRUFBVXAwRSxVRDlCVm8xRSxXQUFZLFdDK0JWLE1EOUJBejFFLE1BQUNzRixJQUFJQyxLQUFLLFNBQVNtd0UsY0FDakJDLE9BQVEzMUUsS0FBQ2lMLEtBQUs4bkUsY0FDZDZDLFVBQVcsSUFDWEYsYUFBYSxTQUFVLEtDaUMzQmpCLEVBQVVwMEUsVUQvQlZ3MUUsV0FBWSxXQ2lDVixNRGhDQTcxRSxNQUFDc0YsSUFBSUMsS0FBSyxTQUFTbXdFLGFBQWEsU0FDaEMxMUUsS0FBQzgxRSxvQkNrQ0hyQixFQUFVcDBFLFVEaENWcTBFLFNBQVUsV0NpQ1IsTURoQ0ExMEUsTUFBQ3NGLElBQUlrSCxnQkNtQ1Bpb0UsRUFBVXAwRSxVRGpDVjhSLEtBQU0sV0NrQ0osTURqQ0FuUyxNQUFDOG9CLE1BQ0N5TCxNQUFlaHJCLEVBQUUsMEJBQ2pCd3NFLFFBQWV4c0UsRUFBRSw0QkFFakJ5c0UsVUFBZXpzRSxFQUFFLHlCQUNqQjBzRSxZQUFpQjFzRSxFQUFFLDJCQUVuQjBCLEtBQWV0SSxFQUFFNEcsRUFBRSx5QkFBeUJwSCxTQUM1Q2syRCxRQUFlMTFELEVBQUU0RyxFQUFFLDRCQUE0QnBILFNBQy9DdzJDLFdBQWVoMkMsRUFBRTRHLEVBQUUsK0JBQStCcEgsU0FDbERreEUsU0FBZTlwRSxFQUFFLDRCQUNqQjJzRSxpQkFBcUIzc0UsRUFBRSxvQ0FDdkI0c0UsV0FBZTVzRSxFQUFFLHNDQUNqQjZzRSxXQUFlN3NFLEVBQUUsMENBQ2pCOHNFLGlCQUFxQjlzRSxFQUFFLHdDQ21DM0JrckUsRUFBVXAwRSxVRGhDVjhoQyxlQUFnQixTQUFDbi9CLEdBQ2YsR0FBQUcsRUFDQSxPQURBQSxHQUFVVSxFQUFFYixFQUFNYyxRQUNFLFNBQWpCWCxFQUFRa0MsTUFDVHJGLEtBQUNvckMsV0FBVyxVQUVacHJDLEtBQUNzRixJQUFJQyxLQUFLLFNBQVM4aUIsU0NxQ3ZCb3NELEVBQVVwMEUsVURuQ1Y2MEUsS0FBTSxXQ29DSixNRHBDT3YyRSxXQUFVb1csT0FBTzhjLFdDdUMxQjRpRCxFQUFVcDBFLFVEckNWK3FDLFdBQVksU0FBQ3BvQyxHQUNYLEdBQUFzekUsR0FBQUMsRUFBQXB6RSxDQU9BLFFBUEFBLEVBQVVVLEVBQUViLEVBQU1jLFFBQ2xCOUQsS0FBQ3FkLEtBQU9sYSxFQUFRYSxLQUFLLGFBQ3JCYixFQUFRckQsU0FBU3lGLEtBQUssYUFBYW1YLFlBQVksWUFDL0N2WixFQUFRd1osU0FBUyxZQUNqQjI1RCxFQUFVdDJFLEtBQUNzRixJQUFJQyxLQUFLLFVBQ3BCZ3hFLEVBQVV2MkUsS0FBQ3NGLElBQUlDLEtBQUssV0FFYnZGLEtBQUNxZCxNQUFSLElBQ08sUUFDSGk1RCxFQUFPNTZELE9BQ1A2NkQsRUFBUXIvQyxNQUZMLE1BRFAsS0FJTyxTQUNIby9DLEVBQU9wL0MsT0FDUHEvQyxFQUFRNzZELE9Dd0NaLE1EdENBMWIsTUFBQ3NGLElBQUlDLEtBQUssU0FBUyxHQUFHOGlCLFNDeUN4Qm9zRCxFQUFVcDBFLFVEdkNWNkYsT0FBUSxXQUVOLEdBQUExQixHQUFBZ3lFLENDNkNBLE9EN0NBQSxHQUFZeDJFLEtBQUM4b0IsS0FBSzdkLEtBRWxCdXJFLEVBQVdBLEVBQVMxd0QsV0FFcEJ0aEIsRUFBTyx3SkFHdUNneUUsRUFBUyxtR0FFTHgyRSxLQUFDOG9CLEtBQUt1cUQsU0FBUyw0QkFDdkNyekUsS0FBQzhvQixLQUFLeUwsTUFBTSxZQUd0Q3YwQixLQUFDc0YsSUFBSWQsS0FBS0EsR0FHVnhFLEtBQUN5MkUsUUFBVXoyRSxLQUFDc0YsSUFBSUMsS0FBSyxpQkFDckJ2RixLQUFDMDJFLFFBQVUxMkUsS0FBQ3NGLElBQUlDLEtBQUssaUJBRXJCdkYsS0FBQzZjLFFBQVEsYUM2Qlg0M0QsRUFBVXAwRSxVRDNCVnl2QixZQUFhLFdDNEJYLE1EM0JBOXZCLE1BQUMwMEUsWUM4QkhELEVBQVVwMEUsVUQ1QlZ5SixRQUFTLFdDOEJQLE1EN0JBakcsR0FBRSxXQUFXNlgsT0FDYjdYLEVBQUUsUUFBUU0sSUFBSSxhQUFjbkUsS0FBQ3ExRSxnQkMrQi9CWixFQUFVcDBFLFVEN0JWczJFLFdBQVksU0FBQzN6RSxHQUVYLEdBQUE0ekUsR0FBQUMsRUFBQTMyRSxDQU9BLE9BUEFBLElBQ0U0MkUsTUFBWSxHQUNaQyxJQUFZLEVBQ1pDLFVBQVksR0FFZG56RSxFQUFFLGFBQWFXLEtBQUssSUFDcEJveUUsRUFBTzV6RSxFQUFNb0MsTUFDVixNQUFBd3hFLElBQ0RDLEVBQ0VELElBQVExMkUsRUFBSTQyRSxPQUNaOXpFLEVBQU11TixVQUFXclEsRUFBSTYyRSxLQUNyQi96RSxFQUFNdU4sVUFBV3JRLEVBQUk4MkUsVUFDSEosSUFBUTEyRSxFQUFJNDJFLE1BQXpCOTJFLEtBQUNxWCxTQUFSLFNDa0NKbzlELEVBQVVwMEUsVUQ5QlZnWCxPQUFRLFdBR04sTUFGc0IsVUFBVHJYLEtBQUNxZCxNQUFkcmQsS0FBQ3UwQixRQUNxQixXQUFUdjBCLEtBQUNxZCxNQUFkcmQsS0FBQzZhLFVBQ00sR0NxQ1Q0NUQsRUFBVXAwRSxVRG5DVndhLE9BQVEsV0FDTixHQUFBbzhELEdBQUFDLEVBQUFDLEVBQUFyeUUsRUFBQWxELEVBQUF3MUUsRUFBQUMsQ0FBQXoxRSxJQUFTcTFFLEVBQVNqM0UsS0FBQ3NGLElBQUlDLEtBQUssY0FBY0YsTUFBTXFMLGNBQ2hEMG1FLEdBQVNGLEVBQVNsM0UsS0FBQ3NGLElBQUlDLEtBQUssZ0JBQWdCRixNQUM1Q2d5RSxHQUFTRixFQUFTbjNFLEtBQUNzRixJQUFJQyxLQUFLLGdCQUFnQkYsTUFFVCt4RSxJQUFXQyxHQUE5Q3IzRSxLQUFDbTFFLFVBQVVuMUUsS0FBQzhvQixLQUFLd3VELGNBRWpCLEtDcUNFLE1EcENBdDNFLE1BQUNpTCxLQUFLNFAsT0FBT2paLEVBQU13MUUsR0FEckIsTUFBQTN4RSxHQ3lDRSxNRHZDSVgsR0FBQVcsRUFDSnlHLFFBQVFDLElBQUlySCxHQUNaOUUsS0FBQ28xRSxVQUFVdHdFLEtDeUNmMnZFLEVBQVVwMEUsVUR2Q1ZrMEIsTUFBTyxXQUNMLEdBQUEwaUQsR0FBQXYrRCxFQUFBNVQsRUFBQWxELEVBQUFrWixDQVFBLElBUkFsWixHQUFRcTFFLEVBQVFqM0UsS0FBQ3NGLElBQUlDLEtBQUssVUFBVUYsTUFDcEN5VixHQUFRcEMsRUFBUTFZLEtBQUNzRixJQUFJQyxLQUFLLFVBQVVGLE1BRXBDckYsS0FBQ3UxRSxjQUV1QyxLQUFSM3pFLEdBQWhDNUIsS0FBQ28xRSxVQUFVcDFFLEtBQUM4b0IsS0FBS3F0RCxZQUN1QixLQUFScjdELEdBQWhDOWEsS0FBQ20xRSxVQUFVbjFFLEtBQUM4b0IsS0FBS3N0RCxZQUVILElBQVhwMkUsS0FBQzhrQyxPQUNGLElBQ0U5a0MsS0FBQ2lMLEtBQUtzcEIsTUFBTTN5QixFQUFNa1osR0FEcEIsTUFBQXJWLEdBRU1YLEVBQUFXLEVBQ0p6RixLQUFDbzFFLFVBQVV0d0UsR0FFZixPQUFPLEdDOENUMnZFLEVBQVVwMEUsVUQ1Q1Y4MEUsVUFBVyxTQUFDbnZFLEdDK0NWLE1EOUNBaEcsTUFBQzhrQyxTQUNEOWtDLEtBQUMwMkUsUUFBUWx5RSxLQUFLd0IsR0FDZGhHLEtBQUNzRixJQUFJQyxLQUFLLFNBQVM4aUIsU0MrQ3JCb3NELEVBQVVwMEUsVUQ3Q1YrMEUsVUFBVyxTQUFDcHZFLEdDZ0RWLE1EL0NBaEcsTUFBQzhrQyxTQUNEOWtDLEtBQUN5MkUsUUFBUWp5RSxLQUFLd0IsR0FDZGhHLEtBQUNzRixJQUFJQyxLQUFLLFNBQVM4aUIsU0NnRHJCb3NELEVBQVVwMEUsVUQ5Q1ZrMUUsWUFBYSxXQ2lEWCxNRGhEQXYxRSxNQUFDeTJFLFFBQVFqeUUsS0FBSyxJQUNkeEUsS0FBQzAyRSxRQUFRbHlFLEtBQUssSUFDZHhFLEtBQUM4a0MsT0FBUyxHQ2lETDJ2QyxHRDlQZTV6RSxTQUFTc0Y7OztBRUFqQyxHQUFBb3hFLGFBQUFoNEUsS0FBQSxTQUFBQyxFQUFBQyxHQUFBLE1BQUEsWUFBQSxNQUFBRCxHQUFBRSxNQUFBRCxFQUFBRSxhQ0VFQyxPQUFTLFNBQVNDLEVBQU9DLEdBQStGLFFBQVNDLEtBQVNDLEtBQUtDLFlBQWNKLEVBQTFILElBQUssR0FBSUssS0FBT0osR0FBY0ssUUFBUUMsS0FBS04sRUFBUUksS0FBTUwsRUFBTUssR0FBT0osRUFBT0ksR0FBMkosT0FBckdILEdBQUtNLFVBQVlQLEVBQU9PLFVBQVdSLEVBQU1RLFVBQVksR0FBSU4sR0FBUUYsRUFBTVMsVUFBWVIsRUFBT08sVUFBa0JSLEdBQ2xSTSxXQUFhSSxjREhUZzNFLGFBQUEsU0FBQXgyRSxHQ1FKLFFBQVN3MkUsS0FFUCxNQURBdjNFLE1BQUt3M0UsYUFBZWo0RSxLQUFLUyxLQUFLdzNFLGFBQWN4M0UsTUFDckN1M0UsRUFBWWozRSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQWdTdkQsTUFwU0FDLFFBQU8yM0UsRUFBYXgyRSxHQU9wQncyRSxFQUFZbDNFLFVEWFppVyxVQUFXLGNDYVhpaEUsRUFBWWwzRSxVRFhaYyxRQUNFczJFLGVBQXVCLGFBQ3ZCQyxxQkFBdUIsYUFDdkJDLGNBQXVCLGFBQ3ZCQyxvQkFBdUIsT0FDdkJoc0QsY0FBdUIsU0FDdkJpc0QsZ0JBQWtCLFNBQ2xCOXJDLGlCQUFtQixVQUNuQityQyxvQkFBc0IsWUFFdEIxMkUsdUJBQTBCLGNBQzFCQyxvQkFBc0IsVUFDdEJDLG9CQUFzQixVQUN0QkMsb0JBQXNCLFVBRXRCdzJFLHlCQUEyQixpQkFDM0JDLDBCQUE0QixtQkNZOUJULEVBQVlsM0UsVURWWjQzRSxlQUFnQixXQUNkLEdBQUFDLEVBRUEsSUFGQUEsRUFBUWw0RSxLQUFDc0YsSUFBSUMsS0FBSyxrQkFDbEIyeUUsRUFBTTd5RCxTQUNINnlELEVBQU05dUMsR0FBRyxZQ1lWLE1EWEFwcEMsTUFBQ3NGLElBQUlDLEtBQUssaUJBQWlCOGlCLFFBQVExYyxZQ2V2QzRyRSxFQUFZbDNFLFVEWlo4M0UsZ0JBQWlCLFdBQ2YsR0FBQXI5RCxFQ2VBLE9EZkFBLEdBQU85YSxLQUFDc0YsSUFBSUMsS0FBSyxpQkFBaUJGLE1BQ2xDMUcsVUFBVXNNLEtBQUswL0QsWUFBWTd2RCxHQUMzQm5jLFVBQVVzTSxLQUFLckYsS0FBSyxNQUNsQkMsUUFBUyxTQUFBQyxHQ2NQLE1EZE8sWUNpQkwsTURoQkZBLEdBQUNSLElBQUlDLEtBQUssaUJBQWlCRixJQUFJLElBQy9CUyxFQUFDbXlFLGlCQUNEOTRFLE1BQU1rUCxTQUFTLHNCQUhSck8sU0N1QmJ1M0UsRUFBWWwzRSxVRGpCWiszRSxVQUFXLFdDa0JULE1EakJBejVFLFdBQVU2VyxJQUFJa0ssS0FBUS9nQixVQUFVbWpCLFdBQVcsaUJBR3pDN04sTUFBTyxVQUFXLFFBQVMsVUFBVyxTQUFVLFlBRWhEcE8sUUFBUyxTQUFDMEIsR0FFUixHQUFBd08sR0FBQXNpRSxDQ3lDQSxPRHpDQXRpRSxHQUFRLGdCQUFnQnBYLFVBQVVtRSxTQUFTSixJQUFJLGNBRS9DMjFFLEVBQWEsU0FBQzl3RSxFQUFVK3dFLEVBQWV2aUUsR0FDckMsR0FBQThKLEVDMEJBLE9BWmMsT0FBVnk0RCxJRGZrQkEsRUFBUyxNQUMvQno0RCxHQUNFakssSUFBYUcsRUFDYkYsS0FBYXlpRSxFQUNieDRELEtBQWFuZCxFQUFFd1IsTUFBTTVNLEVBQVM3RCxLQUFLLFNBQ25DcUQsV0FBYSxnQkFFUSxNQUFBOFksRUFBQWhLLFlBQWhCZ0ssR0FBSWhLLEtBRVhsWCxVQUFVNlcsSUFBSWtwQyxRQUFRNytCLEdBQ3BCaGEsUUFBUyxXQ21CUCxNRGxCQWhDLEdBQUV1USxNQUFNQyxVQUFVMVYsVUFBVTJXLFFBQVMzVyxVQUFVbUUsU0FBU3dSLE1BQU0sVUFDNUR6TyxRQUFTLFdDbUJQLE1EbEJBMUcsT0FBTXVHLE9BQU8sb0JBQXFCLFNBRXBDNk8sU0FBVXdCLFNBR2xCcFgsVUFBVTZXLElBQUlTLFFBQVFGLEdBQ3BCbFEsUUFBUyxTQUFDbVEsR0NzQlIsTURyQkFxaUUsR0FBVzl3RSxFQUFVeU8sRUFBT0gsS0FBTUUsSUFDcEMvUCxNQUFPLFNBQUNBLEdDdUJOLE1EdEJBcXlFLEdBQVc5d0UsRUFBVSxLQUFNd08sVUM2QnJDd2hFLEVBQVlsM0UsVUQxQlp5akIsT0FBUSxXQUNOLEdBQUE3TyxFQzRCQSxPRDVCQUEsR0FBWWpWLEtBQUNzRixJQUFJQyxLQUFLLG9CQUFvQjZqQyxHQUFHLFlBRTdDanFDLE1BQU1nUixnQkFBZ0I4RSxJQzZCeEJzaUUsRUFBWWwzRSxVRDNCWnV2QyxRQUFTLFdDNEJQLE1EM0JBendDLE9BQU1xVixvQkM4QlIraUUsRUFBWWwzRSxVRDVCWmdzQixPQUFRLFdDNkJOLE1ENUJBMXRCLFdBQVVvVyxPQUFPQyxTQUFTLFVBQVUsSUMrQnRDdWlFLEVBQVlsM0UsVUQ3QlprNEUsV0FBWSxXQytCVixNRDlCQXY0RSxNQUFDc0YsSUFBSUMsS0FBSyw2QkFBNkJnMUIsV0FBVyxHQUNsRHY2QixLQUFDc0YsSUFBSUMsS0FBSyxlQUFlRixJQUFJLEtDZ0MvQmt5RSxFQUFZbDNFLFVEOUJab2MsS0FBTSxXQUNKLEdBQUFuQyxFQUNBLElBREFBLEVBQVF0YSxLQUFDc0YsSUFBSUMsS0FBSyxlQUFlRixNQUFNb0wsc0JBQ2IsSUFBaEI2SixFQUFNM1osT0NrQ2hCLE1EakNBWCxNQUFDaUwsS0FBS3FwRSxVQUFVaDZELEVBQU8sU0FBQXhVLEdDa0NyQixNRGxDcUIsWUNtQ25CLE1EbENGQSxHQUFDeXlFLGVBRG9CdjRFLFFDd0N6QnUzRSxFQUFZbDNFLFVEckNadWEsV0FBWSxTQUFDNVgsR0FDWCxHQUFBc1gsRUN1Q0EsT0R2Q0FBLEdBQVF6VyxFQUFFYixFQUFNYyxRQUFRaEUsU0FBU2tFLEtBQUssY0FDdENoRSxLQUFDaUwsS0FBSzJQLFdBQVdOLElDeUNuQmk5RCxFQUFZbDNFLFVEdkNaaWQsV0FBWSxTQUFFOWIsR0FFWixHQUFBeUMsRUNpREEsT0RqREFqRSxNQUFDaUwsS0FBT3pKLEVBQVF5SixLQUNoQmpMLEtBQUNxNEQsUUFBVTcyRCxFQUFRNjJELFFBRW5CcDBELEtBQ3FCLE1BQUFqRSxLQUFBaUwsTUFBckJoSCxFQUFPNEQsS0FBSzdILEtBQUNpTCxNQUNXLE1BQUFqTCxLQUFBcTRELFNBQXhCcDBELEVBQU80RCxLQUFLN0gsS0FBQ3E0RCxTQUVicjRELEtBQUNpRSxPQUFTLEdBQUlwRCxVQUFTOEYsV0FBVzFDLEdBQ2xDakUsS0FBQ2twRCxTQUFTbHBELEtBQUNpTCxLQUFNLGdCQUFpQmpMLEtBQUN3M0UsZUM0Q3JDRCxFQUFZbDNFLFVEMUNabTNFLGFBQWMsV0FDWixHQUFBZ0IsR0FBQWgwRSxDQ3NEQSxPRHREQWcwRSxHQUFVLFNBQUNsK0QsR0M0Q1QsTUQ1Q21CLG1CQUFtQjNYLEVBQUVSLE9BQU9tWSxHQUFPLEtBQUlBLEVBQU0sc0RBQ2xFOVYsRUFBTyxPQUNQQSxHQUFReEUsS0FBQ2lMLEtBQUtnZSxTQUFTb0ssTUFBTTdXLElBQUksU0FBQ3JOLEdDOENoQyxNRDlDc0NxcEUsR0FBUXJwRSxLQUFJc04sS0FBSyxJQUN6RGpZLEdBQVF4RSxLQUFDaUwsS0FBS2dlLFNBQVNtcUQsT0FBTzUyRCxJQUFJLFNBQUNyTixHQ2dEakMsTURoRHVDcXBFLEdBQVFycEUsS0FBSXNOLEtBQUssSUFDMURqWSxHQUFRLFFBQ1J4RSxLQUFDc0YsSUFBSUMsS0FBSyxrQkFBa0JmLEtBQUtBLElDb0RuQyt5RSxFQUFZbDNFLFVEbERaNkYsT0FBUSxXQUVOLEdBQUF1eUUsR0FBQWowRSxFQUFBazBFLENDZ0VBLE9EaEVBRCxHQUFlLHlqQkFtQmZDLEVBQ0UxNEUsS0FBQzI0RSxnQkFBZ0J6NEUsSUFBSSxRQUFTMEIsS0FBSyxTQUFVNUIsS0FBQ2lMLE1BQzlDakwsS0FBQzI0RSxnQkFBZ0J6NEUsSUFBSSxRQUFTMEIsS0FBSyxjQUFlNUIsS0FBQ2lMLE1BQ25EakwsS0FBQzI0RSxnQkFBZ0J6NEUsSUFBSSxPQUFRMEIsS0FBSyxhQUFjNUIsS0FBQ2lMLE1BRW5EekcsRUFBTyx1TEFTNkJ4RSxLQUFDaUwsS0FBS3JKLE9BQU8sZ0JBRXZDODJFLEdBQWEsSUFBRyx5QkFHdEJELEdBQWdCLElBQUcsVUFJdkJ6NEUsS0FBQ3NGLElBQUlkLEtBQUtBLEdBQ1Z4RSxLQUFDdzNFLGVBRUR4M0UsS0FBQzZjLFFBQVEsYUNzQlgwNkQsRUFBWWwzRSxVRG5CWnM0RSxlQUFnQixTQUFDdnJFLEVBQU16TCxHQ29CckIsTURuQkEsV0FBV3lMLEVBQUt4TCxLQUFLLFlBQVc1QixLQUFDa0IsWUFBWWtNLEVBQU16TCxHQUFPLGNDc0I1RDQxRSxFQUFZbDNFLFVEcEJaYSxZQUFhLFNBQUNrTSxFQUFNekwsR0FHbEIsR0FBQU8sR0FBQUUsRUFBQUksQ0FTQSxPQVRBQSxHQUFXLE1BQUE0SyxFQUFBbE4sSUFBaUJ5QixFQUFNZSxJQUFJMEssRUFBS2xOLEtBQWEsU0FDeERzQyxFQUFXNEssRUFBS2pMLE9BQVlSLEVBQU1RLE9BQU9pTCxFQUFLbE4sS0FBVXNDLEdBQy9CLE1BQUFBLEdBQVVHLEVBQUVDLGNBQWNKLE1BQW5EQSxFQUFRLFdBR1JOLEVBQWlCa0wsRUFBS3ZLLFNBQWMsd0JBQTZCLEdBRWpFVCxFQUFpQk8sRUFBRUksU0FBU1AsR0FBWSx1QkFBNEIsd0JBRTdELGtEQUFrRGIsRUFBTUssR0FBRyxlQUFjb0wsRUFBS2xOLElBQUksaUJBQWdCc0MsRUFBTSxnQkFBZTRLLEVBQUt4TCxLQUFLLEtBQUlNLEVBQVUsSUFBR0UsRUFBWSxJQUFHSSxFQUFNLGdCQ29CaEwrMEUsRUFBWWwzRSxVRGpCWlksWUFBYSxTQUFDK0IsR0FFWixHQUFBRSxHQUFBQyxFQUFBMmxFLEVBQUExbEUsRUFBQUMsRUFBQUMsRUFBQVAsRUFBQTdDLEVBQUFxRCxFQUFBNUIsRUFBQTZCLEVBQUE1QixFQUFBNkIsRUFBQUUsQ0FBQSxLQUFVM0QsS0FBQzRELGlCQUNYNUQsS0FBQzRELGdCQUFpQixFQUtsQlYsRUFBUVcsRUFBRWIsRUFBTWMsUUFFaEJnbEUsRUFBTzVsRSxFQUFNcEQsU0FFYkUsS0FBQytvRSxTQUFXN2xFLEVBQU1nbEIsU0FFUmhsQixFQUFNYSxTQUFTLFlDK0J6QixNRDdCQVQsR0FBV25FLE1BQU1tRSxPQUVqQnBELEVBQVdnRCxFQUFNYyxLQUFLLFlBQ3RCcEMsRUFBV3NCLEVBQU1jLEtBQUssYUFDdEJqQixFQUEwQyxTQUEvQkcsRUFBTWMsS0FBSyxpQkFFdEJSLEVBQVdOLEVBQU1jLEtBQUssZ0JBQ3RCckMsRUFBVzNCLEtBQUNpRSxPQUFPdkIsSUFBSWMsR0FDdkJDLEVBQVc5QixFQUFNZSxJQUFJeEMsSUFBUSxHQUNBLFlBQVp1RCxJQUFqQkEsRUFBVyxJQUVYTixFQUFVVSxFQUFFYixFQUFNYyxRQUNsQlQsR0FBV0YsRUFBUWEsS0FBSyxVQUFZLElBQUlFLFFBQVEsV0FBVyxJQUMzRFgsRUFBVUosRUFBUWdCLElBQUksVUFFdEJSLEVBQW9CLGtCQUFrQlosRUFBUyxlQUFjN0MsRUFBSSxtQkFBa0JzRCxFQUFRLEtBRzNGc2xFLEVBQUl0a0UsS0FBSywwQkFBMEI1QyxFQUFLLFNBQVEwQixFQUFLLFlBQVUsRUFBRUcsRUFBU1csTUFBTSxPQUFNLEtBQUlULEVBQWtCLG1CQUFrQk4sRUFBUSxtQkFBa0JFLEVBQVEsZ0JBQWUzQixFQUFLLEtBQUk2QixFQUFTLGVBRWpNTCxFQUFZUyxFQUFFLElBQUlQLEdBQ2xCRixFQUFVaWxCLFNDV1prdkQsRUFBWWwzRSxVRFRaVyxRQUFTLFNBQUNnQyxHQUVSLEdBQUFHLEdBQUEybEUsRUFBQW5rRSxFQUFBNUIsRUFBQTdDLEVBQUF5QixFQUFBNkIsRUFBQTVCLEVBQUFxRCxFQUFBeEIsQ0FHQSxPQUhBTixHQUFVVSxFQUFFYixFQUFNYyxRQUNsQmdsRSxFQUFNM2xFLEVBQVFyRCxTQUVJLEtBQWZrRCxFQUFNb0MsT0FBNkIsYUFBZHBDLEVBQU1WLE1BQzVCYSxFQUFReUcsU0FDUmsvRCxFQUFJdGtFLEtBQUt4RSxLQUFDK29FLGVBQ1Yvb0UsS0FBQzRELGdCQUFpQixJQUljLEtBQWZaLEVBQU1vQyxPQUE4QixZQUFkcEMsRUFBTVYsT0FJL0N0QyxLQUFDNEQsZ0JBQWlCLEVBRWxCMUQsRUFBYWlELEVBQVFhLEtBQUssWUFDMUJqQixFQUE4QyxTQUFqQ0ksRUFBUWEsS0FBSyxpQkFFMUJSLEVBQWFMLEVBQVFhLEtBQUssZ0JBQzFCcEMsRUFBYXVCLEVBQVFhLEtBQUssYUFFMUJyQyxFQUFhM0IsS0FBQ2lFLE9BQU92QixJQUFJYyxHQUN6QkMsRUFBYTlCLEVBQU1lLElBQUl4QyxHQUV2QitFLEVBQVc5QixFQUFRa0MsTUFDbkJKLEVBQWNsQyxFQUFjc0IsU0FBU1ksR0FBZUEsRUFHakRPLE9BQU9QLEtBQWFPLE9BQU8vQixLQUM1QmtCLEtBQ0FBLEVBQVd6RSxHQUFPK0UsRUFDbEJ0RCxFQUFNaUUsS0FBS2pCLEdBQ1RrQixRQUFTLFNBQUFDLEdDQ1AsTURETyxZQ0dMLE1ERkYzRyxPQUFNa1AsU0FBWXpNLEVBQUssVUFDdkJELEVBQU0wRixPQUNKeEIsUUFBUyxXQUNQLE1BQUcsT0FBQUMsRUFBQTR2QyxjQUNENXZDLEVBQUM0dkMsZ0JBRUQ1dkMsRUFBQ0ksY0FQQWxHLE1BUVRnRyxNQUFPLFNBQUFGLEdDT0wsTURQSyxZQ1FILE1EUEZuRSxHQUFNMEYsT0FDSnhCLFFBQVMsV0NhTCxNRFpDLE9BQUFDLEVBQUE0dkMsY0FDRDV2QyxFQUFDNHZDLGdCQUVENXZDLEVBQUNJLFNBR0hELE1BQU0sNERBVExqRyxVQVlKLElDYVR1M0UsRUFBWWwzRSxVRFhaZ3NCLE9BQVEsV0NZTixNRFhBN2lCLFFBQU9DLFFBQVFDLFFDY1Y2dEUsR0QxU2lCMTJFLFNBQVNzRjs7O0FFQW5DLEdBQUF5eUUsWUFBQWg1RSxPQUFBLFNBQUFDLEVBQUFDLEdBQUEsUUFBQUMsS0FBQUMsS0FBQUMsWUFBQUosRUFBQSxJQUFBLEdBQUFLLEtBQUFKLEdBQUFLLFFBQUFDLEtBQUFOLEVBQUFJLEtBQUFMLEVBQUFLLEdBQUFKLEVBQUFJLEdBQUEsT0FBQUgsR0FBQU0sVUFBQVAsRUFBQU8sVUFBQVIsRUFBQVEsVUFBQSxHQUFBTixHQUFBRixFQUFBUyxVQUFBUixFQUFBTyxVQUFBUixHQ0VFTSxXQUFhSSxjREZUcTRFLFlBQUEsU0FBQTczRSxHQ09KLFFBQVM2M0UsS0FDUCxNQUFPQSxHQUFXdDRFLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBZ0h0RCxNQW5IQUMsUUFBT2c1RSxFQUFZNzNFLEdBTW5CNjNFLEVBQVd2NEUsVURSWGlXLFVBQVcsYUNVWHNpRSxFQUFXdjRFLFVEUlhjLFFBQ0UwM0UsaUJBQW1CLGNBQ25CQyxjQUFtQixZQUNuQkMsb0JBQXlCLGFBQ3pCQyxxQkFBMEIsY0FDMUJDLDJCQUFnQyxlQ1dsQ0wsRUFBV3Y0RSxVRFJYaWQsV0FBWSxXQ1VWLE1EVEFyZSxTQUFRb2IsV0FDUnhXLEVBQUUrUCxNQUNBbkIsSUFBSywwQkFDTG5RLEtBQU0sTUFDTndSLFNBQVUsT0FDVkMsWUFBYSxtQkFDYmxPLFFBQVMsU0FBQUMsR0NTUCxNRFRPLFVBQUVrTyxHQ1lQLE1EVkZsTyxHQUFDb3pFLFNBQVdsbEUsRUFDWjlILFFBQVFDLElBQUksYUFBZXhCLEtBQUtDLFVBQVU5RSxFQUFDb3pFLFdBQzNDcHpFLEVBQUMweEUsYUFBYSxNQUpQeDNFLE1BS1RnRyxNQUFPLFNBQUFGLEdDV0wsTURYSyxVQUFFaWMsR0NZTCxNRFhGOWIsT0FBTSxVQUFZOGIsS0FEYi9oQixTQ2tCWDQ0RSxFQUFXdjRFLFVEZlg4NEUsWUFBYSxXQ2dCWCxNRGZBeDZFLFdBQVVvVyxPQUFPQyxTQUFTLFdBQVcsSUNrQnZDNGpFLEVBQVd2NEUsVURoQlgrNEUsVUFBVyxTQUFDcDJFLEdBQ1YsR0FBQXNYLEVDa0JBLE9EbEJBQSxHQUFRelcsRUFBRWIsRUFBTWMsUUFBUUUsS0FBSyxjQUM3QndGLE9BQU9rTCxTQUFXL1YsVUFBVW1FLFNBQVNtaUIsU0FBUzNLLEVBQU8sZ0JDb0J2RHMrRCxFQUFXdjRFLFVEbEJYZzVFLFlBQWEsU0FBQ3IyRSxHQUNaLEdBQUFzWCxFQ3FCQSxPRHJCQUEsR0FBUXpXLEVBQUViLEVBQU1jLFFBQVFFLEtBQUssY0FDN0JrSSxRQUFRQyxJQUFJLHFCQUF1Qm1PLEdBQ25DOVEsT0FBT2tMLFNBQVcsb0JBQXNCNEYsRUFBUSxhQ3NCbERzK0QsRUFBV3Y0RSxVRG5CWGk1RSxZQUFhLFNBQUN0MkUsR0FDWixHQUFBc1gsR0FBQWxELENBQUFrRCxHQUFRelcsRUFBRWIsRUFBTWMsUUFBUUUsS0FBSyxjQUM3Qm9ULEVBQVF2VCxFQUFFYixFQUFNYyxRQUFRRSxLQUFLLFNBSTdCa0ksUUFBUUMsSUFBSSxTQUFXaUwsR0FHdkI1TixPQUFPaTNCLE9BQU8sbUNBQW9DcnBCLElDa0JwRHdoRSxFQUFXdjRFLFVETFhrNUUsYUFBYyxTQUFDdjJFLEdBQ2IsR0FBQXNYLEdBQUFrL0QsRUFBQUMsQ0NTQSxPRFRBbi9ELEdBQVF6VyxFQUFFYixFQUFNYyxRQUFRRSxLQUFLLGNBQzdCeTFFLEVBQVksSUFBTW4vRCxFQUFRLFVBQzFCay9ELEVBQVUzMUUsRUFBRTQxRSxHQUNaRCxFQUFRLEdBQUdsc0UsTUFBTW9zRSxRQUFVLFFDUzdCZCxFQUFXdjRFLFVEUFhzNUUsV0FBWSxTQUFDMzJFLEdBQ1gsR0FBQTQyRSxFQ1VBLE9EVkFBLEdBQWMvMUUsRUFBRSxnQkFBZ0J3QixNQUNoQzZHLFFBQVFDLElBQUksZ0JBQWtCeXRFLEdBQzlCLzFFLEVBQUUrUCxNQUNBbkIsSUFBSyx5QkFDTG5RLEtBQU0sT0FDTndSLFNBQVUsT0FDVkMsWUFBYSxtQkFDYkMsS0FBTXJKLEtBQUtDLFdBQ1RndkUsWUFBY0EsSUFFaEIvekUsUUFBUyxTQUFBQyxHQ1NQLE1EVE8sVUFBRWtPLEdDYVAsTURaRjlILFNBQVFDLElBQUksb0JBQXNCeEIsS0FBS0MsVUFBVW9KLEVBQUs2bEUsT0FDdEQvekUsRUFBQ296RSxTQUFXbGxFLEVBQUs2bEUsS0FDakIvekUsRUFBQ1IsSUFBSUMsS0FBSyx5QkFBeUJmLEtBQUssSUFDeENzQixFQUFDMHhFLGFBQWEsTUFKUHgzRSxNQUtUZ0csTUFBTyxTQUFBRixHQ1lMLE1EWkssVUFBRWtPLEdDY0wsTURiRjlILFNBQVFDLElBQUksMkJBQTZCeEIsS0FBS0MsVUFBVW9KLElBQ3hEL04sTUFBTSwyQkFBNkIwRSxLQUFLQyxVQUFVb0osTUFGN0NoVSxTQ29CWDQ0RSxFQUFXdjRFLFVEZlhtM0UsYUFBYyxTQUFDN3hFLEdDZ0JiLE1EZkEzRixNQUFDc0YsSUFBSUMsS0FBSyx5QkFBeUJmLEtBQUssdUJBQ2hCbUIsRUFBUSw2TUFHdkIzRixLQUFDazVFLFNBQVMxOEQsSUFBSyxTQUFDbEMsR0NZdkIsTURaaUMsbURBQW1EM1gsRUFBRVIsT0FBT21ZLEVBQU1zL0QsYUFBYSxZQUFXdC9ELEVBQU13L0QsT0FBTyxLQUFJeC9ELEVBQU1zL0QsWUFBWSxjQUFZbjlELEtBQUssSUFBSSw2Q0FHNUs5ZCxVQUFVc00sS0FBS2dlLFNBQVNvSyxNQUFNN1csSUFBSyxTQUFDbEMsR0NXM0MsTURYcUQsNENBQTRDM1gsRUFBRVIsT0FBT21ZLEdBQU8sS0FBSUEsRUFBTSxjQUFZbUMsS0FBSyxJQUFJLHdCQUU1STlkLFVBQVVzTSxLQUFLZ2UsU0FBU21xRCxPQUFPNTJELElBQUssU0FBQ2xDLEdDV3pDLE1EWG1ELDRDQUE0QzNYLEVBQUVSLE9BQU9tWSxHQUFPLEtBQUlBLEVBQU0sY0FBWW1DLEtBQUssTUNlOUltOEQsRUFBV3Y0RSxVRFpYNkYsT0FBUSxXQ2NOLE1EYkFsRyxNQUFDc0YsSUFBSWQsS0FBSyx3TEFPVnhFLEtBQUM2YyxRQUFRLGFDU0orN0QsR0R4SGdCLzNFLFNBQVNzRjs7O0FFQWxDLEdBQUF3akIsZUFBQXBxQixLQUFBLFNBQUFDLEVBQUFDLEdBQUEsTUFBQSxZQUFBLE1BQUFELEdBQUFFLE1BQUFELEVBQUFFLGFDRUVDLE9BQVMsU0FBU0MsRUFBT0MsR0FBK0YsUUFBU0MsS0FBU0MsS0FBS0MsWUFBY0osRUFBMUgsSUFBSyxHQUFJSyxLQUFPSixHQUFjSyxRQUFRQyxLQUFLTixFQUFRSSxLQUFNTCxFQUFNSyxHQUFPSixFQUFPSSxHQUEySixPQUFyR0gsR0FBS00sVUFBWVAsRUFBT08sVUFBV1IsRUFBTVEsVUFBWSxHQUFJTixHQUFRRixFQUFNUyxVQUFZUixFQUFPTyxVQUFrQlIsR0FDbFJNLFdBQWFJLGNESFRvcEIsZUFBQSxTQUFBNW9CLEdDUUosUUFBUzRvQixLQUVQLE1BREEzcEIsTUFBSys1RSxhQUFleDZFLEtBQUtTLEtBQUsrNUUsYUFBYy81RSxNQUNyQzJwQixFQUFjcnBCLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBMEV6RCxNQTlFQUMsUUFBTytwQixFQUFlNW9CLEdBT3RCNG9CLEVBQWN0cEIsVURYZGlXLFVBQVcsZ0JDYVhxVCxFQUFjdHBCLFVEWGRjLFFBQ0U2NEUsZUFBaUIsY0FDakJDLGdCQUFrQixlQUNsQkMsbUJBQXlCLFdBQ3pCQyxzQkFBeUIsY0FDekJDLG9CQUF5QixZQUN6QkMsdUJBQXlCLGdCQ2MzQjF3RCxFQUFjdHBCLFVEWmRpNkUsWUFBYSxTQUFFdDNFLEdDYWIsTURaQWhELE1BQUNzRixJQUFJQyxLQUFLLG1CQUFtQkYsSUFBSXhCLEVBQUViLEVBQU1jLFFBQVFFLEtBQUssZUNleEQybEIsRUFBY3RwQixVRGJkazZFLGFBQWMsU0FBRXYzRSxHQ2NkLE1EYkFoRCxNQUFDc0YsSUFBSUMsS0FBSyxvQkFBb0JGLElBQUl4QixFQUFFYixFQUFNYyxRQUFRRSxLQUFLLGVDZ0J6RDJsQixFQUFjdHBCLFVEZGQ2YSxTQUFVLFdBQ1IsR0FBQWpRLEVDZ0JBLE9EaEJBQSxHQUFPakwsS0FBQ3NGLElBQUlDLEtBQUssbUJBQW1CRixNQUNwQ3BHLFFBQVFpYyxTQUFTalEsRUFBTWpMLEtBQUMrNUUsZUNrQjFCcHdELEVBQWN0cEIsVURoQmQrYSxZQUFhLFdBQ1gsR0FBQW5RLEVDa0JBLE9EbEJBQSxHQUFPakwsS0FBQ3NGLElBQUlDLEtBQUssbUJBQW1CRixNQUNwQ3BHLFFBQVFtYyxZQUFZblEsRUFBTWpMLEtBQUMrNUUsZUNvQjdCcHdELEVBQWN0cEIsVURsQmQ4YSxVQUFXLFdBQ1QsR0FBQWxRLEVDb0JBLE9EcEJBQSxHQUFPakwsS0FBQ3NGLElBQUlDLEtBQUssb0JBQW9CRixNQUNyQ3BHLFFBQVFrYyxVQUFVbFEsRUFBTWpMLEtBQUMrNUUsZUNzQjNCcHdELEVBQWN0cEIsVURwQmRnYixhQUFjLFdBQ1osR0FBQXBRLEVDc0JBLE9EdEJBQSxHQUFPakwsS0FBQ3NGLElBQUlDLEtBQUssb0JBQW9CRixNQUNyQ3BHLFFBQVFvYyxhQUFhcFEsRUFBTWpMLEtBQUMrNUUsZUN3QjlCcHdELEVBQWN0cEIsVUR0QmQwNUUsYUFBYyxXQ3VCWixNRHRCQTk2RSxTQUFRb2IsV0FBVzFiLFVBQVVtRSxTQUFTSixJQUFJLGFBQWMsU0FBQW9ELEdDdUJ0RCxNRHZCc0QsVUFBQzhrQixHQ3dCckQsTUR4QitEOWtCLEdBQUMwMEUsWUFBWTV2RCxLQUF4QjVxQixRQzZCMUQycEIsRUFBY3RwQixVRDNCZG02RSxZQUFhLFNBQUM1dkQsR0FFWixHQUFBNnZELEdBQUFDLENDcUNBLE9EckNBRCxHQUFZN3ZELEVBQU15SSxNQUFNN1csSUFBSyxTQUFDNlcsR0M0QjVCLE1EM0JBLGtCQUFrQjF3QixFQUFFUixPQUFPa3hCLEdBQU8sd0JBQXVCMXdCLEVBQUVSLE9BQU9reEIsR0FBTyxVQUN6RTVXLEtBQUssSUFFTGkrRCxFQUR3QixJQUF2Qjl2RCxFQUFNd29ELE9BQU96eUUsT0FDRCw0Q0FFQWlxQixFQUFNd29ELE9BQU81MkQsSUFBSyxTQUFDNDJELEdDNEI5QixNRDNCQSxrQkFBa0J6d0UsRUFBRVIsT0FBT2l4RSxHQUFRLHlCQUF3Qnp3RSxFQUFFUixPQUFPaXhFLEdBQVEsVUFDNUUzMkQsS0FBSyxJQUVUemMsS0FBQ3NGLElBQUlDLEtBQUssY0FBY2YsS0FBSyw2REFDaUNpMkUsRUFBVSx5RUFDVEMsRUFBVyxlQzRCNUUvd0QsRUFBY3RwQixVRHpCZDZGLE9BQVEsV0MyQk4sTUR6QkFsRyxNQUFDc0YsSUFBSWQsS0FBSyw2WkF1QlZ4RSxLQUFDKzVFLGdCQ0tJcHdELEdEcEZtQjlvQixTQUFTc0Y7OztBRUFyQyxHQUFBdzBFLHFCQUFBcDdFLEtBQUEsU0FBQUMsRUFBQUMsR0FBQSxNQUFBLFlBQUEsTUFBQUQsR0FBQUUsTUFBQUQsRUFBQUUsYUNFRUMsT0FBUyxTQUFTQyxFQUFPQyxHQUErRixRQUFTQyxLQUFTQyxLQUFLQyxZQUFjSixFQUExSCxJQUFLLEdBQUlLLEtBQU9KLEdBQWNLLFFBQVFDLEtBQUtOLEVBQVFJLEtBQU1MLEVBQU1LLEdBQU9KLEVBQU9JLEdBQTJKLE9BQXJHSCxHQUFLTSxVQUFZUCxFQUFPTyxVQUFXUixFQUFNUSxVQUFZLEdBQUlOLEdBQVFGLEVBQU1TLFVBQVlSLEVBQU9PLFVBQWtCUixHQUNsUk0sV0FBYUksY0RIVG82RSxxQkFBQSxTQUFBNTVFLEdDUUosUUFBUzQ1RSxLQUVQLE1BREEzNkUsTUFBSzh2QixZQUFjdndCLEtBQUtTLEtBQUs4dkIsWUFBYTl2QixNQUNuQzI2RSxFQUFvQnI2RSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQW1EL0QsTUF2REFDLFFBQU8rNkUsRUFBcUI1NUUsR0FPNUI0NUUsRUFBb0J0NkUsVURYcEJpVyxVQUFXLHNCQ2FYcWtFLEVBQW9CdDZFLFVEWHBCaWQsV0FBWSxTQUFDOWIsR0NtQlgsTURsQkF4QixNQUFDZ3ZCLGlCQUFrQixFQUNuQmh2QixLQUFDd0ksTUFBUSxFQUNUeEksS0FBQzJCLE1BQVFILEVBQVFHLE1BQ2pCM0IsS0FBQ3VsQixPQUFTL2pCLEVBQVErakIsT0FFbEI1bUIsVUFBVTBLLFNBQVcsbUJBQ3JCckosS0FBQzZJLGdCQUNEN0ksS0FBQzJCLE1BQU02YyxTQUFTelcsT0FDaEIvSCxLQUFDMkIsTUFBTTZjLFNBQVN0VyxLQUFLLFNBQUFwQyxHQ1duQixNRFhtQixVQUFFd2IsR0FDckIsR0FBQXM1RCxFQ29CRSxPRHBCRkEsR0FBYyxHQUFJQyxtQkFDaEJsNUUsTUFBUzJmLEVBQ1R4aEIsT0FBU2dHLEVBQ1R5ZixPQUFTemYsRUFBQ3lmLFNBQ1pxMUQsRUFBWTV6RSxHQUFHLFdBQVksU0FBRTBZLEdDY3pCLE1BQWUsT0FBUkEsR0FBMkMsa0JBQXJCQSxHQUFLb1EsWURicENwUSxFQUFNb1EsY0FBQSxTQUNSaHFCLEVBQUMrQyxhQUFhaEIsS0FBSyt5RSxLQVBBNTZFLFFDMEJ2QjI2RSxFQUFvQnQ2RSxVRGpCcEI2RixPQUFRLFdDNkJOLE1ENUI2QixLQUExQmxHLEtBQUMyQixNQUFNNmMsU0FBUzdkLE9BQ2pCWCxLQUFDc0YsSUFBSXFlLE9BQU8sNkZBRVozakIsS0FBQ3NGLElBQUlxWCxTQUFTLFVBQVUzYyxLQUFDdWxCLFFBQVU1QixPQUFPLDZkQXdCZjNqQixLQUFDdWxCLE9BQU8sVUFDekJ2bEIsS0FBQzJCLE1BQU1lLElBQUksUUFBUW9qQixXQUFXLGVBRzdCOWxCLEtBQUMyQixNQUFNYyxJQUFJLFdBQ1osaUJBQWlCMDBCLE9BQU9uM0IsS0FBQzJCLE1BQU1lLElBQUksWUFFbkMsSUFDSCw4SkFVUEMsRUFBRXVGLEtBQUtsSSxLQUFDNkksYUFBZSxTQUFBL0MsR0N2QnJCLE1EdUJxQixVQUFDODBFLEdDckJwQixNRHVCRkEsR0FBWTEwRSxTQUNaSixFQUFDUixJQUFJcWUsT0FBT2kzRCxFQUFZOTlELE1BSEg5YyxRQUt6QkEsS0FBQzZjLFFBQVEsYUNuQlg4OUQsRUFBb0J0NkUsVURxQnBCeXZCLFlBQWEsV0NwQlgsTURxQkFudEIsR0FBRThSLE1BQU0sV0NuQk4sTURvQkE1USxHQUFFLGVBQWVxekIsT0FDakJyekIsRUFBRSxXQUFXcXpCLFFBQ2IsTUNsQkd5akQsR0Q3RHlCOTVFLFNBQVNzRjs7O0FFQTNDLEdBQUEyMEUsbUJBQUFsN0UsT0FBQSxTQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEtBQUFDLEtBQUFDLFlBQUFKLEVBQUEsSUFBQSxHQUFBSyxLQUFBSixHQUFBSyxRQUFBQyxLQUFBTixFQUFBSSxLQUFBTCxFQUFBSyxHQUFBSixFQUFBSSxHQUFBLE9BQUFILEdBQUFNLFVBQUFQLEVBQUFPLFVBQUFSLEVBQUFRLFVBQUEsR0FBQU4sR0FBQUYsRUFBQVMsVUFBQVIsRUFBQU8sVUFBQVIsR0NFRU0sV0FBYUksY0RGVHU2RSxtQkFBQSxTQUFBLzVFLEdDT0osUUFBUys1RSxLQUNQLE1BQU9BLEdBQWtCeDZFLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBaUU3RCxNQXBFQUMsUUFBT2s3RSxFQUFtQi81RSxHQU0xQis1RSxFQUFrQno2RSxVRFBsQmlkLFdBQVksU0FBQzliLEdBbUJYLEdBbEJBeEIsS0FBQzJCLE1BQVFILEVBQVFHLE1BRWpCM0IsS0FBQ2lKLFVBQ0RqSixLQUFDNEIsS0FBVzVCLEtBQUMyQixNQUFNUSxPQUFPLFFBQVErQixRQUFRLGlCQUFrQixLQUM1RGxFLEtBQUNzQyxLQUFXdEMsS0FBQzJCLE1BQU1lLElBQUksUUFDdkIxQyxLQUFDd0IsUUFBV3hCLEtBQUMyQixNQUFNZSxJQUFJLFdBQ3ZCMUMsS0FBQytuQyxTQUFXdm1DLEVBQVF1bUMsU0FDcEIvbkMsS0FBQyttQyxjQUFnQnZsQyxFQUFRdWxDLGNBQ3pCL21DLEtBQUNGLE9BQVMwQixFQUFRMUIsT0FHWSxTQUEzQkUsS0FBQzJCLE1BQU1lLElBQUksY0FBMEIxQyxLQUFDMkIsTUFBTWUsSUFBSSxnQkFBZ0IsR0FDakUxQyxLQUFDcXdCLFNBQVUsRUFDWHJ3QixLQUFDbXdCLFNBQVUsSUFFWG53QixLQUFDcXdCLFNBQVUsRUFDWHJ3QixLQUFDbXdCLFNBQVUsR0FFVm53QixLQUFDK25DLFlBQVksRUNNZCxNRExBL25DLE1BQUNxd0IsU0FBVSxFQUNYcndCLEtBQUMwaUQsZ0JDUUxvNEIsRUFBa0J6NkUsVURObEJ5akIsT0FBUSxTQUFDOWdCLEdDU1AsTURSQWhELE1BQUMwaUQsZUFDRDFpRCxLQUFDNm5DLGlCQUNEN25DLEtBQUM2YyxRQUFRLFNBQVU3WixFQUFPaEQsS0FBQzJCLE1BQU1lLElBQUksV0NTdkNvNEUsRUFBa0J6NkUsVURQbEI2RixPQUFRLFdDc0NOLE1EcENBbEcsTUFBQ3NGLElBQUl0QixLQUFLLEtBQU0sWUFBWWhFLEtBQUM0QixNQUV0QjVCLEtBQUMrbkMsU0F5R04vbkMsS0FBQ3NGLElBQUk0eEIsT0F2R2dCLFlBQWxCbDNCLEtBQUNGLE9BQU95bEIsT0FDVHZsQixLQUFDc0YsSUFBSWQsS0FBSyxpQ0FDd0J4RSxLQUFDMkIsTUFBTWUsSUFBSSxVQUFTLFVBRzlCLFdBQWxCMUMsS0FBQ0YsT0FBT3lsQixPQUNkdmxCLEtBQUNzRixJQUFJZCxLQUFLLHFDQUdGeEUsS0FBQzJCLE1BQU1lLElBQUksVUFBUyxLQUNRLEtBQXhCMUMsS0FBQzJCLE1BQU1lLElBQUksUUFBcUIsSUFBSTFDLEtBQUMyQixNQUFNZSxJQUFJLFFBQU8sSUFBUSxJQUFHLFVBRzlDLFNBQXRCMUMsS0FBQzJCLE1BQU1lLElBQUksUUFDWiw4R0FTQUMsRUFBRTZaLElBQUl4YyxLQUFDMkIsTUFBTWUsSUFBSSxXQUFZLFNBQUFvRCxHQ2ZuQyxNRGVtQyxVQUFDNFgsR0NkbEMsTURlTSw0SkFHNkVBLEVBQU9FLE1BQU0seUJBSi9ENWQsT0FPM0J5YyxLQUFLLEtBQ1Ysb0JBS21CLGFBQWxCemMsS0FBQ0YsT0FBT3lsQixPQUNkdmxCLEtBQUNzRixJQUFJZCxLQUFLLFNBR0gsT0FBUSxTQUFVLE9BQVEsT0FBUSxtQkFBbUJnWSxJQUFLLFNBQUExVyxHQzFCL0QsTUQwQitELFVBQUNyRSxHQ3pCOUQsTUQwQkksT0FDUXFFLEVBQUNuRSxNQUFNZSxJQUFJakIsR0FBVSxVQUY0QnpCLE9BSXpEeWMsS0FBSyxJQUNSLFNBR0s5WixFQUFFNlosSUFBSXhjLEtBQUMyQixNQUFNZSxJQUFJLFdBQVksU0FBQ2diLEdDOUJ0QyxNRCtCYUEsR0FBT2xiLE1BQU0sS0FBS2tiLEVBQU9FLE1BQU0sT0FDbENuQixLQUFLLElBQ1IsZ0JBTWUsWUFBbEJ6YyxLQUFDRixPQUFPeWxCLFFBRWR2bEIsS0FBQ3NGLElBQUlkLEtBQUsscURBR0o3QixFQUFFLGdHQUFnR3NXLE1BQU0sUUFBUXVELElBQUssU0FBQTFXLEdDeEN6SCxNRHdDeUgsVUFBQ3JFLEdDdkN4SCxNRHdDSSx1Q0FFcUNBLEVBQVVpUyxhQUFhb1MsV0FBVyxhQUM3RGhnQixFQUFDbkUsTUFBTWUsSUFBSWpCLEdBQVUsZ0JBSm9GekIsT0FPbkh5YyxLQUFLLElBQ1IsK0ZBR2tDemMsS0FBQzJCLE1BQU1lLElBQUksZ0JBQWtCLElBQUcsOE5BYXpEQyxFQUFFNlosSUFBSXhjLEtBQUMyQixNQUFNZSxJQUFJLFdBQVksU0FBQ2diLEdDNUQxQyxNRDZEYyxZQUVVQSxFQUFPRSxNQUFNLGFBQ2JGLEVBQU9sYixNQUFNLGdCQUd2QmlhLEtBQUssSUFDUiwyQ0FZakJ6YyxLQUFDNmMsUUFBUSxhQ3ZFSmkrRCxHRHpFdUJqNkUsU0FBU3NGOzs7QUVBekMsR0FBQTQwRSxlQUFBbjdFLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlR3NkUsZUFBQSxTQUFBaDZFLEdDT0osUUFBU2c2RSxLQUNQLE1BQU9BLEdBQWN6NkUsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0EwRnpELE1BN0ZBQyxRQUFPbTdFLEVBQWVoNkUsR0FNdEJnNkUsRUFBYzE2RSxVRFRkaVcsVUFBVyxpQkNXWHlrRSxFQUFjMTZFLFVEVGRpZCxXQUFZLFNBQUM5YixHQ1dYLE1EVkF4QixNQUFDMkIsTUFBU0gsRUFBUUcsTUFDbEIzQixLQUFDRixPQUFTMEIsRUFBUTFCLFFDWXBCaTdFLEVBQWMxNkUsVURWZDZGLE9BQVEsV0FDTixPQUFPbEcsS0FBQ3VsQixRQUFSLElBQ08sVUFBZXZsQixLQUFDZzdFLGVBQWhCLE1BRFAsS0FFTyxVQUFlaDdFLEtBQUNpN0UsZUFBaEIsTUFGUCxLQUdPLFNBQWVqN0UsS0FBQ2s3RSxlQ2lCdkIsTURoQkFsN0UsTUFBQ0YsT0FBTytjLFFBQVEsV0FBWTdjLE9DbUI5Qis2RSxFQUFjMTZFLFVEaEJkNDZFLGNBQWUsV0FDYixHQUFBenlFLEVDOEJBLE9EOUJBeEksTUFBQ3NGLElBQUlkLEtBQUssWUFDR3hFLEtBQUMyQixNQUFNZSxJQUFJLE9BQU0scURBSXBCOEYsRUFBUSxFQUNSN0YsRUFBRTZaLElBQUl4YyxLQUFDMkIsTUFBTWUsSUFBSSxTQUFVLFNBQUFvRCxHQ1luQyxNRFptQyxVQUFDckYsR0FDMUIsR0FBQTA2RSxFQ29CUixPRHBCUTN5RSxJQUFTLEVBQ1QyeUUsRUFBVyxvQkFBb0IxNkUsRUFBSyxRQUNqQytILEVBQVExQyxFQUFDbkUsTUFBTWUsSUFBSSxhQUFjLEdBQU04RixJQUFXMUMsRUFBQ25FLE1BQU1lLElBQUksU0FBUy9CLFNBQVl3NkUsR0FBWSxhQUNqR0EsSUFKeUJuN0UsT0FLekJ5YyxLQUFLLEtBQ1IsMEJBTVQ5WixFQUFFOFIsTUFBTSxTQUFBM08sR0NhTixNRGJNLFlBQ04sR0FBQXMxRSxHQUFBQyxFQUFBQyxDQUdBLEtBSEFBLEVBQVcsSUFDWEQsRUFBa0IsRUFDbEJudkUsUUFBUUMsSUFBSSxXQUFhdEksRUFBRSxJQUFJaUMsRUFBQ25FLE1BQU1lLElBQUksUUFBUyxHQUFHNjRFLGNBQ2hEMTNFLEVBQUUsSUFBSWlDLEVBQUNuRSxNQUFNZSxJQUFJLFFBQVMsR0FBRzg0RSxZQUFjMzNFLEVBQUUsSUFBSWlDLEVBQUNuRSxNQUFNZSxJQUFJLE9BQU0sVUFBUys0RSxjQUFrQjUzRSxFQUFFLElBQUlpQyxFQUFDbkUsTUFBTWUsSUFBSSxRQUFTLEdBQUc2NEUsYUFBZTEzRSxFQUFFLElBQUlpQyxFQUFDbkUsTUFBTWUsSUFBSSxPQUFNLFVBQVNnNUUsZ0JBQzdLeHZFLFFBQVFDLElBQUl0SSxFQUFFLElBQUlpQyxFQUFDbkUsTUFBTWUsSUFBSSxPQUFNLFVBQVNnNUUsZUFDbEIsS0FBaEJKLEdBQVUsS0FFcEJGLEVBQWN2M0UsRUFBRSxJQUFJaUMsRUFBQ25FLE1BQU1lLElBQUksT0FBTSxPQUFNeUIsSUFBSSxhQUUvQ04sRUFBRSxJQUFJaUMsRUFBQ25FLE1BQU1lLElBQUksT0FBTSxPQUFNeUIsSUFBSSxZQUFnQkUsU0FBUysyRSxHQUFhQyxFQUFnQixLQ2lCdkYsT0RoQkZELEdBQWN2M0UsRUFBRSxJQUFJaUMsRUFBQ25FLE1BQU1lLElBQUksT0FBTSxPQUFNeUIsSUFBSSxhQUMvQ04sRUFBRSxJQUFJaUMsRUFBQ25FLE1BQU1lLElBQUksT0FBTSxPQUFNeUIsSUFBSSxZQUFnQkUsU0FBUysyRSxHQUFhLEVBQUdDLEVBQWlCLFFBWnJGcjdFLE1BYVAsTUNtQkgrNkUsRUFBYzE2RSxVRGpCZDI2RSxjQUFlLFdBQ2IsR0FBQS9QLEVDb0JBLE9EcEJBQSxHQUFTLDBIQVlUQSxFQUFTQSxFQUFPaHlELE1BQU0sT0FFdEJqWixLQUFDc0YsSUFBSWQsS0FBSyw0QkFJTjdCLEVBQUU2WixJQUFJeXVELEVBQVEsU0FBQW5sRSxHQ0doQixNREhnQixVQUFDNjFFLEdDSWYsTURIRSxXQUFXQSxFQUFNLFlBQVc3MUUsRUFBQ25FLE1BQU1lLElBQUlpNUUsR0FBTSxlQURqQzM3RSxPQUVaeWMsS0FBSyxJQUNSLHlCQUlDOVosRUFBRTZaLElBQUl4YyxLQUFDMkIsTUFBTWUsSUFBSSxTQUFVLFNBQUNqQyxHQ0E5QixNRENJQSxLQUNBZ2MsS0FBSyxRQ0VicytELEVBQWMxNkUsVURFZDY2RSxhQUFjLFdBRVosR0FBQTF5RSxFQ0ZBLE9ERUF4SSxNQUFDc0YsSUFBSWQsS0FBSyxvQ0FJQWdFLEVBQVEsRUFDUjdGLEVBQUU2WixJQUFJeGMsS0FBQzJCLE1BQU1lLElBQUksU0FBVSxTQUFBb0QsR0NObkMsTURNbUMsVUFBQ3JGLEdBQzFCLEdBQUEwNkUsRUNHUixPREhRM3lFLElBQVMsRUFDVDJ5RSxFQUFXLG9CQUFvQjE2RSxFQUFLLFFBRXBDeUwsUUFBUUMsSUFBSXJHLEVBQUNuRSxNQUFNZSxJQUFJLFlBQ3BCOEYsRUFBUTFDLEVBQUNuRSxNQUFNZSxJQUFJLGFBQWMsR0FBTThGLElBQVcxQyxFQUFDbkUsTUFBTWUsSUFBSSxTQUFTL0IsU0FBWXc2RSxHQUFZLGFBQ2pHQSxJQU55Qm43RSxPQU96QnljLEtBQUssS0FDUix1REFPNkIsS0FBekJ6YyxLQUFDMkIsTUFBTWUsSUFBSSxTQUNaLHNGQUlBLElBRUgsZ0JBSUkxQyxLQUFDMkIsTUFBTWUsSUFBSSxZQUNaLDBGQUlBLElBRUgsMkJDeEJKcTRFLEdEbEdtQmw2RSxTQUFTc0Y7OztBRUFyQyxHQUFBeTFFLGtCQUFBaDhFLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlRxN0Usa0JBQUEsU0FBQTc2RSxHQ09KLFFBQVM2NkUsS0FDUCxNQUFPQSxHQUFpQnQ3RSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQXdCNUQsTUEzQkFDLFFBQU9nOEUsRUFBa0I3NkUsR0FNekI2NkUsRUFBaUJ2N0UsVURUakJpVyxVQUFZLG1CQ1dac2xFLEVBQWlCdjdFLFVEVGpCaWQsV0FBWSxTQUFDOWIsR0NZWCxNRFhBeEIsTUFBQ21nQyxxQkFBc0IsRUFDdkJuZ0MsS0FBQzJCLE1BQVNILEVBQVFHLE1BQ2xCM0IsS0FBQ0YsT0FBUzBCLEVBQVExQixRQ1lwQjg3RSxFQUFpQnY3RSxVRFZqQjZGLE9BQVEsV0FDTixHQUFBMjFFLEdBQUFDLENBQUEsSUFBcUIsWUFBWDk3RSxLQUFDdWxCLE9DbUJYLE1EbEJjLFlBQVh2bEIsS0FBQ3VsQixRQUFrQyxXQUFYdmxCLEtBQUN1bEIsU0FDMUJ1MkQsRUFBWSx3QkFDWkQsRUFBYyxJQUNkNzdFLEtBQUNzRixJQUFJZCxLQUFLLGdCQUNPczNFLEVBQVUsTUFBSTk3RSxLQUFDMkIsTUFBTWUsSUFBSSxXQUFhLDJCQUEwQixJQUFHbTVFLEVBQVksWUFHbEc3N0UsS0FBQzZjLFFBQVEsYUNjSisrRCxHRGhDc0IvNkUsU0FBU3NGOzs7QUVBeEMsR0FBQTQxRSxtQkFBQW44RSxPQUFBLFNBQUFDLEVBQUFDLEdBQUEsUUFBQUMsS0FBQUMsS0FBQUMsWUFBQUosRUFBQSxJQUFBLEdBQUFLLEtBQUFKLEdBQUFLLFFBQUFDLEtBQUFOLEVBQUFJLEtBQUFMLEVBQUFLLEdBQUFKLEVBQUFJLEdBQUEsT0FBQUgsR0FBQU0sVUFBQVAsRUFBQU8sVUFBQVIsRUFBQVEsVUFBQSxHQUFBTixHQUFBRixFQUFBUyxVQUFBUixFQUFBTyxVQUFBUixHQ0VFTSxXQUFhSSxjREZUdzdFLG1CQUFBLFNBQUFoN0UsR0NPSixRQUFTZzdFLEtBQ1AsTUFBT0EsR0FBa0J6N0UsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0F5QjdELE1BNUJBQyxRQUFPbThFLEVBQW1CaDdFLEdBTTFCZzdFLEVBQWtCMTdFLFVEVGxCaVcsVUFBVyxXQ1dYeWxFLEVBQWtCMTdFLFVEVGxCaWQsV0FBWSxTQUFDOWIsR0NXWCxNRFZBeEIsTUFBQzJCLE1BQVNILEVBQVFHLE1BQ2xCM0IsS0FBQ0YsT0FBUzBCLEVBQVExQixRQ1lwQmk4RSxFQUFrQjE3RSxVRFZsQjZGLE9BQVEsV0FDTixHQUFxQixZQUFYbEcsS0FBQ3VsQixPQ3FCWCxNRG5CYyxXQUFYdmxCLEtBQUN1bEIsUUFFRnZsQixLQUFDc0YsSUFBSWQsS0FBSyxpQ0FHSjdCLEVBQUUsWUFBWXNXLE1BQU0sTUFBTXVELElBQUssU0FBQ3cvRCxHQ1FwQyxNRFBNLDBDQUV3Q0EsRUFBYyw4Q0FHdER2L0QsS0FBSyxJQUNOLGFBSUssWUFBWHpjLEtBQUN1bEIsUUFDRnZsQixLQUFDc0YsSUFBSWQsS0FBSyxZQUVaeEUsS0FBQzZjLFFBQVEsYUNHSmsvRCxHRGpDdUJsN0UsU0FBU3NGOzs7QUVBekMsR0FBQTgxRSxhQUFBcjhFLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlQwN0UsYUFBQSxTQUFBbDdFLEdDT0osUUFBU2s3RSxLQUNQLE1BQU9BLEdBQVkzN0UsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0FpQnZELE1BcEJBQyxRQUFPcThFLEVBQWFsN0UsR0FNcEJrN0UsRUFBWTU3RSxVRFRaaVcsVUFBVyxLQ1dYMmxFLEVBQVk1N0UsVURUWmlkLFdBQVksU0FBQzliLEtDV2J5NkUsRUFBWTU3RSxVRFRaNkYsT0FBUSxXQUNOLEdBQXFCLFlBQVhsRyxLQUFDdWxCLE9DZVgsTURkYyxXQUFYdmxCLEtBQUN1bEIsUUFBaUMsWUFBWHZsQixLQUFDdWxCLFFBRXpCdmxCLEtBQUNzRixJQUFJZCxLQUFLLHdFQUdrQ3hFLEtBQUMyQixNQUFNZSxJQUFJLFFBQU8sc0RBSWhFMUMsS0FBQzZjLFFBQVEsYUNRSm8vRCxHRHpCaUJwN0UsU0FBU3NGOzs7QUVBbkMsR0FBQSsxRSxtQkFBQXQ4RSxPQUFBLFNBQUFDLEVBQUFDLEdBQUEsUUFBQUMsS0FBQUMsS0FBQUMsWUFBQUosRUFBQSxJQUFBLEdBQUFLLEtBQUFKLEdBQUFLLFFBQUFDLEtBQUFOLEVBQUFJLEtBQUFMLEVBQUFLLEdBQUFKLEVBQUFJLEdBQUEsT0FBQUgsR0FBQU0sVUFBQVAsRUFBQU8sVUFBQVIsRUFBQVEsVUFBQSxHQUFBTixHQUFBRixFQUFBUyxVQUFBUixFQUFBTyxVQUFBUixHQ0VFTSxXQUFhSSxjREZUMjdFLG1CQUFBLFNBQUFuN0UsR0NPSixRQUFTbTdFLEtBQ1AsTUFBT0EsR0FBa0I1N0UsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0FpQzdELE1BcENBQyxRQUFPczhFLEVBQW1CbjdFLEdBTTFCbTdFLEVBQWtCNzdFLFVEVGxCaVcsVUFBVyxvQkNXWDRsRSxFQUFrQjc3RSxVRFRsQmlkLFdBQVksU0FBQzliLEdBVVgsR0FSQXhCLEtBQUMyQixNQUFTSCxFQUFRRyxNQUNsQjNCLEtBQUNGLE9BQVMwQixFQUFRMUIsT0FFbEJFLEtBQUMwaEMsT0FBUzFoQyxLQUFDMkIsTUFBTWUsSUFBSSxjQUNyQjFDLEtBQUM0aEMsVUFBWTVoQyxLQUFDMkIsTUFBTWUsSUFBSSxpQkFFSCxJQUFsQjFDLEtBQUMwaEMsT0FBTy9nQyxRQUE2QixLQUFkWCxLQUFDMGhDLE9BQU8sS0FDaEMxaEMsS0FBQzBoQyxXQUNxQixJQUFyQjFoQyxLQUFDNGhDLFVBQVVqaEMsUUFBZ0MsS0FBakJYLEtBQUM0aEMsVUFBVSxHQ1F0QyxNRFBBNWhDLE1BQUM0aEMsY0NXTHM2QyxFQUFrQjc3RSxVRFBsQjZGLE9BQVEsV0FDTixHQUFxQixZQUFYbEcsS0FBQ3VsQixPQ2tCWCxNRGhCYyxZQUFYdmxCLEtBQUN1bEIsUUFFRnZsQixLQUFDc0YsSUFBSWQsS0FBSyxpQ0FFRXhFLEtBQUMwaEMsT0FBTyxtQ0FFaEIxaEMsS0FBQzRoQyxVQUFVbmxCLEtBQUssU0FBUyxTQUdqQixXQUFYemMsS0FBQ3VsQixRQUVGdmxCLEtBQUNzRixJQUFJZCxLQUFLLGlDQUdKN0IsRUFBRTNDLEtBQUMwaEMsUUFBUWxsQixJQUFLLFNBQUN3L0QsR0NEckIsTURFTSwwQ0FFd0NBLEVBQWMsOENBR3REdi9ELEtBQUssSUFDTixhQUlUemMsS0FBQzZjLFFBQVEsYUNOSnEvRCxHRHpDdUJyN0UsU0FBU3NGOzs7QUVBekMsR0FBQWcyRSxpQkFBQTU4RSxLQUFBLFNBQUFDLEVBQUFDLEdBQUEsTUFBQSxZQUFBLE1BQUFELEdBQUFFLE1BQUFELEVBQUFFLGFDRUVDLE9BQVMsU0FBU0MsRUFBT0MsR0FBK0YsUUFBU0MsS0FBU0MsS0FBS0MsWUFBY0osRUFBMUgsSUFBSyxHQUFJSyxLQUFPSixHQUFjSyxRQUFRQyxLQUFLTixFQUFRSSxLQUFNTCxFQUFNSyxHQUFPSixFQUFPSSxHQUEySixPQUFyR0gsR0FBS00sVUFBWVAsRUFBT08sVUFBV1IsRUFBTVEsVUFBWSxHQUFJTixHQUFRRixFQUFNUyxVQUFZUixFQUFPTyxVQUFrQlIsR0FDbFJNLFdBQWFJLGNESFQ0N0UsaUJBQUEsU0FBQXA3RSxHQ1FKLFFBQVNvN0UsS0FFUCxNQURBbjhFLE1BQUtrbEMsbUJBQXFCM2xDLEtBQUtTLEtBQUtrbEMsbUJBQW9CbGxDLE1BQ2pEbThFLEVBQWdCNzdFLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBNkYzRCxNQWpHQUMsUUFBT3U4RSxFQUFpQnA3RSxHQU94Qm83RSxFQUFnQjk3RSxVRFhoQmlXLFVBQVcsa0JDYVg2bEUsRUFBZ0I5N0UsVURYaEJpZCxXQUFZLFNBQUM5YixHQ2tCWCxNRGpCQXhCLE1BQUMyQixNQUFnQkgsRUFBUUcsTUFDekIzQixLQUFDRixPQUFnQjBCLEVBQVExQixPQUN6QkUsS0FBQyttQyxjQUFnQnZsQyxFQUFRdWxDLGNBQ3pCL21DLEtBQUMrSSxpQkFDRC9JLEtBQUNpbkMsWUFDRGpuQyxLQUFDOGdCLFVBQWdCLEdBQUlqTyxXQUNyQjdTLEtBQUM4Z0IsVUFBVXpaLE9BQ1RuSCxJQUFLRixLQUFDMkIsTUFBTWUsSUFBSSxnQkFDaEJtRCxRQUFTLFNBQUFDLEdDWVAsTURaTyxVQUFDaUIsR0NrQk4sTURqQkZqQixHQUFDZ2IsVUFBWSxHQUFJak8sV0FBVTlMLEVBQVc2USxPQUFPOEosVUFBWTViLEVBQUNuRSxNQUFNSyxNQUNoRThELEVBQUNnYixVQUFVL1ksT0FDWGpDLEVBQUN1Z0MsT0FBUSxFQUNUdmdDLEVBQUNJLFdBSk1sRyxTQ3dCYm04RSxFQUFnQjk3RSxVRGxCaEI2RixPQUFRLFdBQ04sR0FBQXRCLEdBQUF4RixFQUFBaVEsRUFBQTFILEVBQUE2Z0MsRUFBQW5QLEVBQUFqWSxFQUFBbGMsQ0E4QkEsSUE5QmMsYUFBWGxGLEtBQUN1bEIsT0FDRnZsQixLQUFDc0YsSUFBSWQsS0FBSywyQ0FJRCxPQUFRLFNBQVUsT0FBUSxPQUFRLG1CQUFtQmdZLElBQUssU0FBQTFXLEdDZ0JqRSxNRGhCaUUsVUFBQ3JFLEdDaUJoRSxNRGhCTSxPQUFPQSxFQUFVaVMsYUFBYXdhLFdBQVcsVUFEZ0JsdUIsT0FFekR5YyxLQUFLLElBQ1IsaUZBU1B6YyxLQUFDc0YsSUFBSWQsS0FBSyxZQUNHeEUsS0FBQzJCLE1BQU1lLElBQUksT0FBTSx1QkFBc0IxQyxLQUFDdWxCLE9BQU8sOEhBVTlEaWpCLEVBQWdCLEVBQ2hCeG9DLEtBQUM4Z0IsVUFBVS9ZLE9BQ1IsTUFBQS9ILEtBQUE4Z0IsVUFBQTdjLE9BQ0QsSUFBQWlCLEVBQUFsRixLQUFBOGdCLFVBQUE3YyxPQUFBN0UsRUFBQWlRLEVBQUEsRUFBQTFILEVBQUF6QyxFQUFBdkUsT0FBQTBPLEVBQUExSCxFQUFBdkksSUFBQWlRLEVDRUUrUixFQUFXbGMsRUFBSTlGLEdEQWZpNkIsRUFBVSxHQUFJeWhELG9CQUNabjVFLE1BQWdCeWYsRUFDaEJ0aEIsT0FBZ0JFLEtBQ2hCK21DLGNBQWdCL21DLEtBQUMrbUMsZ0JBQ25CMU4sRUFBUXJ5QixHQUFHLFdBQVloSCxLQUFDa2xDLG9CQUV4QjdMLEVBQVFuekIsU0FDUmxHLEtBQUMrSSxjQUFjM0osR0FBS2k2QixFQUNOLGFBQVhyNUIsS0FBQ3VsQixPQUNGdmxCLEtBQUNzRixJQUFJQyxLQUFLLHFCQUFxQm9lLE9BQU85ZixFQUFFdzFCLEVBQVF2YyxJQUFJdFksUUFFcER4RSxLQUFDc0YsSUFBSUMsS0FBSyxxQkFBcUJvZSxPQUFPMFYsRUFBUXZjLEdDaUJwRCxPRGZHOWMsTUFBQzhnQixVQUFVbmdCLFNBQVU2bkMsR0NJbUIsbUJBQTdCNWpDLEVBQU81RSxLQUFLRixRQUFRc29CLE1BQzlCeGpCLEVETCtDd2pCLE9BRXJDLFlBQVhwb0IsS0FBQ3VsQixRQUNGNWlCLEVBQUU4UixNQUFNLFNBQUEzTyxHQ09OLE1EUE0sWUNRSixNRFBGQSxHQUFDczJFLDBCQUEwQnY0RSxFQUFFLElBQUlpQyxFQUFDbkUsTUFBTWUsSUFBSSxRQUFTLEdBQUltQixFQUFFLElBQUlpQyxFQUFDbkUsTUFBTWUsSUFBSSxPQUFNLHlCQUQxRTFDLE1BRVAsS0FFSEEsS0FBQzZjLFFBQVEsYUNXWHMvRCxFQUFnQjk3RSxVRFRoQis3RSwwQkFBMkIsU0FBQ0MsRUFBU0MsR0FDbkMsR0FBQUMsR0FBQWxCLEVBQUFDLENBR0EsS0FIQUEsRUFBVyxJQUNYRCxFQUFrQixFQUNsQmtCLEVBQW9CLElBQ2RGLEVBQVNiLFlBQVksR0FBSzMzRSxFQUFFdzRFLEdBQVVaLGNBQWlCWSxFQUFTZCxhQUFhLEdBQUsxM0UsRUFBRXc0RSxHQUFVWCxlQUN4RSxLQUFoQkosR0FBVSxJQUNwQmlCLEdBQXFCbEIsRUFDckJpQixFQUFTbjRFLElBQUksWUFBYW80RSxFQUFvQixJQ2NoRCxPRGJBRCxHQUFTbjRFLElBQUksWUFBYW80RSxFQUFxQixFQUFFbEIsRUFBbUIsTUNnQnRFYyxFQUFnQjk3RSxVRGRoQjZrQyxtQkFBb0IsV0NlbEIsTURkQWxsQyxNQUFDNmMsUUFBUSxnQkNpQkpzL0QsR0R2R3FCdDdFLFNBQVNzRjs7O0FFQXZDLEdBQUFxMkUsc0JBQUFqOUUsS0FBQSxTQUFBQyxFQUFBQyxHQUFBLE1BQUEsWUFBQSxNQUFBRCxHQUFBRSxNQUFBRCxFQUFBRSxhQ0VFQyxPQUFTLFNBQVNDLEVBQU9DLEdBQStGLFFBQVNDLEtBQVNDLEtBQUtDLFlBQWNKLEVBQTFILElBQUssR0FBSUssS0FBT0osR0FBY0ssUUFBUUMsS0FBS04sRUFBUUksS0FBTUwsRUFBTUssR0FBT0osRUFBT0ksR0FBMkosT0FBckdILEdBQUtNLFVBQVlQLEVBQU9PLFVBQVdSLEVBQU1RLFVBQVksR0FBSU4sR0FBUUYsRUFBTVMsVUFBWVIsRUFBT08sVUFBa0JSLEdBQ2xSTSxXQUFhSSxjREhUaThFLHNCQUFBLFNBQUF6N0UsR0NRSixRQUFTeTdFLEtBUVAsTUFQQXg4RSxNQUFLbXlDLGtCQUFvQjV5QyxLQUFLUyxLQUFLbXlDLGtCQUFtQm55QyxNQUN0REEsS0FBS295Qyx1QkFBeUI3eUMsS0FBS1MsS0FBS295Qyx1QkFBd0JweUMsTUFDaEVBLEtBQUtxeUMsbUJBQXFCOXlDLEtBQUtTLEtBQUtxeUMsbUJBQW9CcnlDLE1BQ3hEQSxLQUFLc3lDLFlBQWMveUMsS0FBS1MsS0FBS3N5QyxZQUFhdHlDLE1BQzFDQSxLQUFLdXlDLGFBQWVoekMsS0FBS1MsS0FBS3V5QyxhQUFjdnlDLE1BQzVDQSxLQUFLd3lDLHFCQUF1Qmp6QyxLQUFLUyxLQUFLd3lDLHFCQUFzQnh5QyxNQUM1REEsS0FBS3l5QyxLQUFPbHpDLEtBQUtTLEtBQUt5eUMsS0FBTXp5QyxNQUNyQnc4RSxFQUFxQmw4RSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQWtUaEUsTUE1VEFDLFFBQU80OEUsRUFBc0J6N0UsR0FhN0J5N0UsRUFBcUJuOEUsVURqQnJCaVcsVUFBVyx1QkNtQlhrbUUsRUFBcUJuOEUsVURqQnJCYyxRQUNFMHFDLG9CQUFzQixvQkFDdEJDLG1CQUFzQixtQkFDdEI0RyxjQUFnQix1QkNvQmxCOHBDLEVBQXFCbjhFLFVEbEJyQmlkLFdBQVksU0FBQzliLEdDb0JYLE1EbEJBeEIsTUFBQzJCLE1BQVNILEVBQVFHLE1BQ2xCM0IsS0FBQ0YsT0FBUzBCLEVBQVExQixRQ29CcEIwOEUsRUFBcUJuOEUsVURoQnJCeXlDLGlCQUFrQixXQUNoQixHQUFBbnVDLEdBQUF2RixFQUFBNkUsQ0NxQ0EsT0RyQ2MsT0FBQWpFLEtBQUEreUMsUUFBZC95QyxLQUFDOEosVUFFRG5GLEVBQWFkLEVBQUVqRSxPQUFPSSxLQUFDMkIsTUFBTWUsSUFBSSxxQkFBdUJrVCxJQUFRNVYsS0FBQzJCLE1BQU1LLEtBSXZFaUMsRUFBQSxXQ2tCRSxHQUFJb0wsR0FBR25LLEVBQUsrQyxDQUVaLEtEcEJRQSxLQUF1QzdJLEVBQUFpUSxFQUFBLEVBQUFuSyxFQUFBYixTQUFBckUsS0FBQTJCLE1BQUFlLElBQUEsZ0JBQUExQyxLQUFBMkIsTUFBQWUsSUFBQSxtQkFBQSxHQUFBd0MsRUFBQW1LLEdBQUFuSyxFQUFBbUssR0FBQW5LLEVBQUE5RixFQUFBLEdBQUE4RixJQUFBbUssSUFBQUEsRUNxQjdDcEgsRUFBUUosS0RyQkYsR0FBSWhILFVBQVM0RixNQUFNOUIsR0N1QjNCLE9BQU9zRCxJQUNON0gsS0FBS0osTUR2QlJpRSxFQUFPK3VDLFFBQVEsSUFFZmh6QyxLQUFDaXpDLGNBQWdCLEdBQUlyYixnQkFDbkJqMkIsTUFBa0JzQyxFQUFPLEdBQ3pCbkUsT0FBa0JFLEtBQ2xCK21DLGVBQWtCLElBR3BCL21DLEtBQUMreUMsUUFDQzl1QyxPQUFjQSxFQUNkZ0UsYUMwQkp1MEUsRUFBcUJuOEUsVUR4QnJCd3lDLGdCQUFpQixXQ29DZixNRG5DQTd5QyxNQUFDa3pDLEtBQ0NDLFVBQWEsRUFDYkMsV0FBYyxHQUNoQnB6QyxLQUFDcXpDLFNBQ0NDLFFBQVcsR0FDYnR6QyxLQUFDdXpDLE9BQ0NDLFNBQVksRUFDWkMsVUFBYSxHQUNmenpDLEtBQUMwekMsSUFDQzdTLE1BQ0V4UyxNQUFZLEVBQ1pzbEIsUUFBWSxHQUNkQyxhQUNFcHJDLE1BQWMsRUFDZHFyQyxTQUFjLEVBQ2RDLFVBQWMsRUFDZGplLE1BQWN4eEIsU0FBVXJFLEtBQUMyQixNQUFNZSxJQUFJLGdCQUFrQjFDLEtBQUMyQixNQUFNZSxJQUFJLHNCQ2lDdEU4NUUsRUFBcUJuOEUsVUQ5QnJCMHpDLGtCQUFtQixXQUVqQixJQUFHL3pDLEtBQUNrekMsSUFBSUMsV0FBWW56QyxLQUFDdXpDLE1BQU1DLFFDcUMzQixNRG5DQXh6QyxNQUFDc0YsSUFBSUMsS0FBSywyREFBMkRtWCxZQUFZLGdCQUNqRjFjLEtBQUNzRixJQUFJQyxLQUFLLHlCQUF5Qm9YLFNBQVMsZ0JBQzVDM2MsS0FBQ2cwQyxjQUFrQm5HLFlBQVk3dEMsS0FBQ3l5QyxLQUFNLEtBQ3RDenlDLEtBQUNrekMsSUFBSUMsVUFBYyxFQUNuQm56QyxLQUFDMHpDLEdBQUc3UyxLQUFLeFMsTUFBVXJ1QixLQUFDaTNCLFVBQ3BCajNCLEtBQUMwekMsR0FBRzdTLEtBQUs4UyxRQUFVLEdDaUNyQjZvQyxFQUFxQm44RSxVRC9CckI0ekMsaUJBQWtCLFNBQUNudkMsR0FDakIsR0FBQW92QyxHQUFBQyxDQ21EQSxPRG5EQXBoQixlQUFjL3lCLEtBQUNnMEMsZUFDZkUsRUFBWSxNQUFBcHZDLEVBQ1pxdkMsRUFBc0IsTUFBQXJ2QyxFQUNuQixNQUFBQSxHQUNEOUUsS0FBQzZjLFFBQVEsWUFFUnMzQixJQUF5Qm4wQyxLQUFDdXpDLE1BQU1FLFVBQzlCenpDLEtBQUNrekMsSUFBSUUsWUFDTnB6QyxLQUFDbzBDLHdCQUNEcDBDLEtBQUNteUMscUJBQ0hueUMsS0FBQzB6QyxHQUFHRSxZQUFZcHJDLFFBQ2hCeEksS0FBQ3EwQyxpQkFFRHIwQyxLQUFDc0YsSUFBSUMsS0FBSyx3QkFBd0JvWCxTQUFTLGdCQUMzQ3hkLE1BQU1rUCxTQUFTLDBCQUNqQnJPLEtBQUNzRixJQUFJQyxLQUFLLGlCQUFpQm9YLFNBQVMsZ0JBQ3BDM2MsS0FBQ3V6QyxNQUFNRSxVQUFXLEVBQ2xCenpDLEtBQUN1ekMsTUFBTUMsU0FBVSxHQ3FDbkJncEMsRUFBcUJuOEUsVURqQ3JCb3lDLEtBQU0sV0N3Q0osTUR2Q0F6eUMsTUFBQzB6QyxHQUFHN1MsS0FBSzhTLFFBQVUzekMsS0FBQ2kzQixVQUFZajNCLEtBQUMwekMsR0FBRzdTLEtBQUt4UyxNQUN6Q3J1QixLQUFDc3lDLGNBQ0R0eUMsS0FBQ295Qyx5QkFDRHB5QyxLQUFDczBDLHdCQUNEdDBDLEtBQUNxeUMscUJBQ0RyeUMsS0FBQ3d5Qyx1QkFDRHh5QyxLQUFDdXlDLGdCQ29DSGlxQyxFQUFxQm44RSxVRGxDckJteUMscUJBQXNCLFdBRXBCLEdBQUd4eUMsS0FBQ2t6QyxJQUFJRSxXQUFhcHpDLEtBQUMwekMsR0FBR0UsWUFBWUUsVUFBYTl6QyxLQUFDMHpDLEdBQUdFLFlBQVlwckMsTUFBTSxHQUErQixJQUF6QnhJLEtBQUMwekMsR0FBR0UsWUFBWXByQyxNQ3FDNUYsTURwQ0F4SSxNQUFDdXpDLE1BQU1nQixtQkFBb0IsRUFDM0J2MEMsS0FBQ28wQyx3QkFDRHAwQyxLQUFDbXlDLG9CQUNEbnlDLEtBQUNxMEMsZ0JDcUNMbW9DLEVBQXFCbjhFLFVEbkNyQmt5QyxhQUFjLFdBQ1osR0FBQWlDLEdBQUFDLENBR0EsSUFIQUEsRUFBaUJud0MsS0FBSzRVLE9BQVFsWixLQUFDMHpDLEdBQUc3UyxLQUFLOFMsUUFBVTN6QyxLQUFDNHlDLGdCQUFrQjV5QyxLQUFDMkIsTUFBTWUsSUFBSSxtQkFDL0U4eEMsRUFBY3gwQyxLQUFDMHpDLEdBQUdFLFlBQVlwckMsTUFBUWlzQyxJQUFvQnowQyxLQUFDdXpDLE1BQU1FLFNBRTlEenpDLEtBQUNrekMsSUFBSUUsV0FBYXB6QyxLQUFDcXpDLFFBQVFDLFFBQVVrQixHQUF3QyxJQUF6QngwQyxLQUFDMHpDLEdBQUdFLFlBQVlwckMsTUNxQ3JFLE1EcENBckosT0FBTWtQLFNBQVMsMkJBQ2ZyTyxLQUFDcXpDLFFBQVFDLFFBQVMsR0N1Q3RCa3BDLEVBQXFCbjhFLFVEckNyQnczQixtQkFBb0IsV0FDbEIsT0FBTyxHQ3dDVDJrRCxFQUFxQm44RSxVRHRDckJpeUMsWUFBYSxXQUNYLEdBQUd0eUMsS0FBQzB6QyxHQUFHN1MsS0FBSzhTLFNBQVczekMsS0FBQzJCLE1BQU1lLElBQUksZ0JDdUNoQyxNRHRDQTFDLE1BQUNpMEMsb0JDMENMdW9DLEVBQXFCbjhFLFVEeENyQmd5QyxtQkFBb0IsV0FFbEIsR0FBR3J5QyxLQUFDMHpDLEdBQUdFLFlBQVlDLFdBQVk3ekMsS0FBQzB6QyxHQUFHRSxZQUFZcHJDLFFBQVV4SSxLQUFDdXpDLE1BQU1FLFdBQWF6ekMsS0FBQ2t6QyxJQUFJRSxVQ3lDaEYsTUR4Q0FwekMsTUFBQ3EwQyxlQUNEcjBDLEtBQUMwekMsR0FBR0UsWUFBWUMsU0FBVzd6QyxLQUFDMHpDLEdBQUdFLFlBQVlwckMsT0MyQy9DZzBFLEVBQXFCbjhFLFVEekNyQit4Qyx1QkFBd0IsV0FFdEIsR0FEQXB5QyxLQUFDMHpDLEdBQUdFLFlBQVlwckMsTUFBUWxFLEtBQUs0VSxNQUFTbFosS0FBQzB6QyxHQUFHN1MsS0FBSzhTLFFBQVkzekMsS0FBQzJCLE1BQU1lLElBQUksbUJBQ25FMUMsS0FBQzB6QyxHQUFHRSxZQUFZcHJDLE1BQVF4SSxLQUFDK3lDLE9BQU85dUMsT0FBT3RELE9BQVMsRUMwQ2pELE1EekNBWCxNQUFDMHpDLEdBQUdFLFlBQVlwckMsTUFBUXhJLEtBQUMreUMsT0FBTzl1QyxPQUFPdEQsT0FBUyxHQzZDcEQ2N0UsRUFBcUJuOEUsVUQzQ3JCaTBDLHNCQUF1QixXQUVyQixHQUFBSSxFQU1BLElBTkExMEMsS0FBQ3NGLElBQUlDLEtBQUssd0JBQXdCZixLQUFLeEUsS0FBQzB6QyxHQUFHRSxZQUFZcHJDLE9BQ3ZEeEksS0FBQ3NGLElBQUlDLEtBQUssb0JBQW9CZixLQUFTeEUsS0FBQzB6QyxHQUFHRSxZQUFZRSxXQUV2RFksRUFBZXB3QyxLQUFLQyxLQUFNdkUsS0FBQzB6QyxHQUFHRSxZQUFZcHJDLE1BQVEsR0FBS3hJLEtBQUMyQixNQUFNZSxJQUFJLGtCQUFxQjFDLEtBQUMwekMsR0FBRzdTLEtBQUs4UyxRQUFTLEdBQ3pHM3pDLEtBQUNzRixJQUFJQyxLQUFLLG1CQUFtQmYsS0FBS2t3QyxJQUUzQjEwQyxLQUFDa3pDLElBQUlFLFlBQWlCcHpDLEtBQUN1ekMsTUFBTUUsU0MwQ2xDLE1EekNBenpDLE1BQUNzRixJQUFJQyxLQUFLLHFDQUFxQ21YLFlBQVksaUJDNkMvRDgvRCxFQUFxQm44RSxVRDNDckIrekMsc0JBQXVCLFdDNkNyQixNRDVDQXAwQyxNQUFDa3pDLElBQUlFLFdBQWEsRUFDbEJwekMsS0FBQ3F6QyxRQUFRQyxRQUFTLEdDOENwQmtwQyxFQUFxQm44RSxVRDVDckI0MkIsUUFBUyxXQzZDUCxNRDdDVTV5QixXQUFVLEdBQU04RyxPQUFTOHJCLFVBQVksTUNnRGpEdWxELEVBQXFCbjhFLFVEOUNyQnMwQyxvQkFBcUIsU0FBQ2ozQixHQ3VEcEIsTURyREcxZCxNQUFDK3lDLE9BQU9yekIsS0FBSzJRLFdBQ2Ryd0IsS0FBQ215QyxvQkFDc0JueUMsS0FBQ3V6QyxNQUFNRSxVQUE5Qnp6QyxLQUFDNmMsUUFBUSxhQUVUN2MsS0FBQyt5QyxPQUFPcnpCLEtBQUs0USxhQUVmdHdCLEtBQUN5eUMsUUNrREgrcEMsRUFBcUJuOEUsVUQ3Q3JCOHhDLGtCQUFtQixXQ3NEakIsTURyREFueUMsTUFBQ28wQyx3QkFDRHAwQyxLQUFDMHpDLEdBQUdFLFlBQVlFLFlBQ2hCOXpDLEtBQUMreUMsT0FBTzlxQyxRQUFRSixNQUNkK3NDLGtCQUFvQjUwQyxLQUFDK3lDLE9BQU9yekIsS0FBS2xYLE1BQ2pDd0wsS0FBb0JoVSxLQUFDK3lDLE9BQU9yekIsS0FBSytRLFlBQ2pDb2tCLFNBQW9CNzBDLEtBQUMwekMsR0FBRzdTLEtBQUs4UyxVQUMvQjN6QyxLQUFDK3lDLE9BQU9yekIsS0FBSy9WLFFBQ2IzSixLQUFDc0YsSUFBSUMsS0FBSyxTQUFTcUUsVUNpRHJCNHlFLEVBQXFCbjhFLFVEOUNyQjZGLE9BQVEsV0FDTixHQUFBNHVDLEVBQUEsSUFBcUIsWUFBWDkwQyxLQUFDdWxCLE9DcURYLE1EbkRBdmxCLE1BQUM2YyxRQUFRLFlBQ1RpNEIsRUFBZTkwQyxLQUFDMkIsTUFBTWUsSUFBSSxnQkFFMUIxQyxLQUFDc0YsSUFBSWQsS0FBSyw0SkFHMkZ4RSxLQUFDMHpDLEdBQUdFLFlBQVlFLFVBQVUsK0dBQ3pCOXpDLEtBQUMyQixNQUFNZSxJQUFJLGtCQUFrQixtU0FVbkkxQyxLQUFDNmMsUUFBUSxhQ3FDWDIvRCxFQUFxQm44RSxVRG5DckJnMEMsYUFBYyxTQUFDdnZDLEdBQ2IsR0FBTzlFLEtBQUNrekMsSUFBSUMsU0MwRFosTUR6REFuekMsTUFBQ2t6QyxJQUFJRSxXQUFZLEVBRWpCcHpDLEtBQUMreUMsT0FBT3J6QixLQUFRLEdBQUlrWSxnQkFDbEJqMkIsTUFBa0IzQixLQUFDK3lDLE9BQU85dUMsT0FBT2pFLEtBQUMwekMsR0FBR0UsWUFBWXByQyxPQUNqRDFJLE9BQWtCRSxLQUNsQittQyxlQUFrQixJQUNwQi9tQyxLQUFDK3lDLE9BQU9yekIsS0FBS2xYLE1BQVcsU0FBQTFDLEdDc0N0QixNRHRDc0IsWUN1Q3BCLE1EdkN1QkEsR0FBQzR0QyxHQUFHRSxZQUFZcHJDLFFBQW5CeEksUUFHeEJBLEtBQUMreUMsT0FBT3J6QixLQUFLMVksR0FBRyx1QkFBd0IsU0FBQWxCLEdDd0N0QyxNRHhDc0MsWUN5Q3BDLE1EekN1Q0EsR0FBQytXLFFBQVEsaUJBQVo3YyxPQUV4Q0EsS0FBQyt5QyxPQUFPcnpCLEtBQUt4WixTQUVibEcsS0FBQ3NGLElBQUlDLEtBQUssbUJBQW1CZixLQUFLLHdHQUF3R3hFLEtBQUMwekMsR0FBR0UsWUFBWXByQyxNQUFNLGlCQUNoS3hJLEtBQUNzRixJQUFJQyxLQUFLLG1CQUFtQm9lLE9BQU8zakIsS0FBQyt5QyxPQUFPcnpCLEtBQUs1QyxJQUNqRDljLEtBQUNzRixJQUFJQyxLQUFLLG1CQUFtQm9lLE9BQU8sMkVBRXBDM2pCLEtBQUNzRixJQUFJQyxLQUFLLG1CQUFtQm9HLFNBQVMsSUFBSyxTQUFBN0YsR0N5Q3pDLE1EekN5QyxZQUN6QyxNQUFHQSxHQUFDeXRDLE1BQU1nQixtQkFDUnAxQyxNQUFNa1AsU0FBUyw4Q0FDZnZJLEVBQUN5dEMsTUFBTWdCLG1CQUFvQixHQUNyQnp1QyxFQUFDeXRDLE1BQU1FLFNBQ2J0MEMsTUFBTWtQLFNBQVMsaUNBRFosU0FKb0NyTyxRQ29EN0N3OEUsRUFBcUJuOEUsVUQ1Q3JCeUosUUFBUyxXQUNQLEdBQUE1RSxFQ2dEQSxPQUhnQyxRQUEzQkEsRUFBTWxGLEtBQUsreUMsT0FBT3J6QixPQUNyQnhhLEVEOUNZeUUsUUFDZDNKLEtBQUNpekMsY0FBY3RwQyxTQ2tEakI2eUUsRUFBcUJuOEUsVURoRHJCb3dCLFVBQVcsV0NpRFQsT0QvQ0Vza0IsUUFBMEIvMEMsS0FBQyt5QyxPQUFPOXFDLFFBQ2xDZ3FDLGFBQTBCanlDLEtBQUMyQixNQUFNZSxJQUFJLGdCQUNyQ3V0QyxVQUEwQmp3QyxLQUFDMkIsTUFBTWUsSUFBSSxhQUNyQ3N5QyxlQUEwQmgxQyxLQUFDMkIsTUFBTWUsSUFBSSxnQkFDckN1eUMsc0JBQTBCajFDLEtBQUMwekMsR0FBR0UsWUFBWUUsWUNvRDlDMG9DLEVBQXFCbjhFLFVEakRyQmkvQixPQUFRLFdDa0ROLE9EaERFekosTUFBVTcxQixLQUFDMHpDLEdBQUdFLFlBQVlFLFlDcUQ5QjBvQyxFQUFxQm44RSxVRGxEckI2dkIsV0FBWSxXQUNWLEdBQUE5d0IsR0FBQWlRLEVBQUFuSyxFQUFBZ3dDLEVBQUFDLENBRUEsS0FGQUEsRUFBYW4xQyxLQUFDaXpDLGNBQWMvaUIsYUFDNUJnbEIsS0FDUzkxQyxFQUFBaVEsRUFBQSxFQUFBbkssRUFBQWxGLEtBQUEreUMsT0FBQTl1QyxPQUFBdEQsT0FBQSxFQUFBLEdBQUF1RSxFQUFBbUssR0FBQW5LLEVBQUFtSyxHQUFBbkssRUFBQTlGLEVBQUEsR0FBQThGLElBQUFtSyxJQUFBQSxFQUNQNmxDLEVBQWVydEMsTUFDYitzQyxrQkFBb0J4MUMsRUFDcEI0VSxLQUFvQm1oQyxFQUNwQk4sU0FBb0IsV0FFeEIsUUFDRUUsUUFBMEJHLEVBQzFCakQsYUFBMEIsVUFDMUJoQyxVQUEwQixVQUMxQitFLGVBQTBCLFVBQzFCQyxzQkFBMEIsWUN3RDlCdW5DLEVBQXFCbjhFLFVEckRyQmd3QixRQUFTLFdDc0RQLE1EckRBcndCLE1BQUN1ekMsTUFBTUUsVUN3RFQrb0MsRUFBcUJuOEUsVUR0RHJCaXdCLFdBQVksV0N1RFYsTUR0REF0d0IsTUFBQ3NGLElBQUlDLEtBQUssWUFBWWYsS0FBS3hFLEtBQUM0cUMsVUFBVU0sWUFBWXp1QixLQUFLLFFDeUR6RCsvRCxFQUFxQm44RSxVRHZEckI0cUMsaUJBQWtCLFdDd0RoQixNRHZEQXRzQyxXQUFVb3hCLElBQUlDLFdBQVdod0IsS0FBQ3NGLElBQUlDLEtBQUssbUJBQW1CRixRQzBEakRtM0UsR0RsVTBCMzdFLFNBQVNzRjs7O0FFQTVDLEdBQUEwMEUsa0JBQUFqN0UsT0FBQSxTQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEtBQUFDLEtBQUFDLFlBQUFKLEVBQUEsSUFBQSxHQUFBSyxLQUFBSixHQUFBSyxRQUFBQyxLQUFBTixFQUFBSSxLQUFBTCxFQUFBSyxHQUFBSixFQUFBSSxHQUFBLE9BQUFILEdBQUFNLFVBQUFQLEVBQUFPLFVBQUFSLEVBQUFRLFVBQUEsR0FBQU4sR0FBQUYsRUFBQVMsVUFBQVIsRUFBQU8sVUFBQVIsR0NFRU0sV0FBYUksY0RGVHM2RSxrQkFBQSxTQUFBOTVFLEdDT0osUUFBUzg1RSxLQUNQLE1BQU9BLEdBQWlCdjZFLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBZ0Q1RCxNQW5EQUMsUUFBT2k3RSxFQUFrQjk1RSxHQU16Qjg1RSxFQUFpQng2RSxVRFRqQmlXLFVBQVksbUJDV1p1a0UsRUFBaUJ4NkUsVURUakJpZCxXQUFZLFNBQUM5YixHQ2NYLE1EYkF4QixNQUFDdytCLFdBQWM3L0IsVUFBVTZiLE9BQU91aEIsZUFDaEMvN0IsS0FBQzJCLE1BQWNILEVBQVFHLE1BQ3ZCM0IsS0FBQ0YsT0FBYzBCLEVBQVExQixPQUN2QkUsS0FBQ3VsQixPQUFjL2pCLEVBQVErakIsT0FFdkJ2bEIsS0FBQ3krQixtQkFBb0IsR0NXdkJvOEMsRUFBaUJ4NkUsVURUakI2RixPQUFRLFdBRU4sR0FBQXkzQixHQUFBUCxFQUFBd0IsRUFBQXJCLEVBQUFGLENDdUNBLE9EdkNBRCxHQUE0RCxNQUF2Q3A5QixLQUFDMkIsTUFBTWUsSUFBSSxtQkFBcUIsSUFBZSxzQ0FBc0MxQyxLQUFDMkIsTUFBTWUsSUFBSSxrQkFBaUIsU0FBYSxHQUNuSjI2QixFQUE0RCxNQUF2Q3I5QixLQUFDMkIsTUFBTWUsSUFBSSxrQkFBcUIsSUFBZSxxQ0FBcUMxQyxLQUFDMkIsTUFBTWUsSUFBSSxpQkFBZ0IsU0FBYSxHQUNqSms4QixFQUFhLGdEQUNickIsRUFBWXY5QixLQUFDMkIsTUFBTStKLFdBQVcsYUFFaEIsWUFBWDFMLEtBQUN1bEIsT0FFRnZsQixLQUFDc0YsSUFBSWQsS0FBSyxPQUNGeEUsS0FBQzJCLE1BQU1lLElBQUksUUFBTyxVQUV0Qmk3QixFQUFjMzlCLEtBQUMyQixNQUFNZSxJQUFJLGVBQ3RCLE1BQUFpN0IsR0FBa0MsS0FBakJBLEVBQ2xCLHdEQUF3REEsRUFBWSxTQUVwRSxJQUNILDBCQUVDUCxFQUFlLHlCQUVmQyxFQUFjLHVCQUNLcjlCLEtBQUN1bEIsT0FBTyx5Q0FJZCxXQUFYdmxCLEtBQUN1bEIsT0FDUHZsQixLQUFDc0YsSUFBSWQsS0FBSyw4QkFDcUJ4RSxLQUFDMkIsTUFBTWUsSUFBSSxRQUFPLHNDQUNqQjI2QixFQUFjLDZCQUN2QnI5QixLQUFDdWxCLE9BQU8seUNBSy9CdmxCLEtBQUNzRixJQUFJcWUsT0FBTyxzQkFDVzNqQixLQUFDdWxCLE9BQU8sbUNBSWpDclosUUFBUUMsSUFBSW5NLEtBQUMyQixNQUFNZSxJQUFJLGFBQWF3ckIsV0FBYSxhQUVqRGx1QixLQUFDOEksY0FBZ0IsSUFBSVUsT0FBT3hKLEtBQUMyQixNQUFNZSxJQUFJLGFBQWF3ckIsV0FBYSxlQUMvRHZzQixNQUFPM0IsS0FBQzJCLE1BQ1I3QixPQUFRRSxPQUNWQSxLQUFDOEksY0FBYzlCLEdBQUcsV0FBZSxTQUFBbEIsR0NqQi9CLE1EaUIrQixZQ2hCN0IsTURnQmdDQSxHQUFDK1csUUFBUSxjQUFaN2MsT0FDakNBLEtBQUM4SSxjQUFjOUIsR0FBRyxjQUFlLFNBQUFsQixHQ2IvQixNRGErQixZQ1o3QixNRFlnQ0EsR0FBQytXLFFBQVEsaUJBQVo3YyxPQUNqQ0EsS0FBQzhJLGNBQWN5aEIsV0FBV3ZxQixLQUFDc0YsSUFBSUMsS0FBSyx1QkFDcEN2RixLQUFDOEksY0FBY3ljLE9BQVN2bEIsS0FBQ3VsQixPQUN6QnZsQixLQUFDOEksY0FBYzVDLFNBQ2ZsRyxLQUFDeStCLG1CQUFvQixFQUVyQnorQixLQUFDNmMsUUFBUSxhQ1JKZytELEdEeERzQmg2RSxTQUFTc0Y7OztBRUF4QyxHQUFBczJFLFFBQUE3OEUsT0FBQSxTQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEtBQUFDLEtBQUFDLFlBQUFKLEVBQUEsSUFBQSxHQUFBSyxLQUFBSixHQUFBSyxRQUFBQyxLQUFBTixFQUFBSSxLQUFBTCxFQUFBSyxHQUFBSixFQUFBSSxHQUFBLE9BQUFILEdBQUFNLFVBQUFQLEVBQUFPLFVBQUFSLEVBQUFRLFVBQUEsR0FBQU4sR0FBQUYsRUFBQVMsVUFBQVIsRUFBQU8sVUFBQVIsR0NFRU0sV0FBYUksY0RGVGs4RSxRQUFBLFNBQUExN0UsR0NPSixRQUFTMDdFLEtBQ1AsTUFBT0EsR0FBT244RSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQVdsRCxNQWRBQyxRQUFPNjhFLEVBQVExN0UsR0FNZjA3RSxFQUFPcDhFLFVEVFBvUyxJQUFNLFNDV05ncUUsRUFBT3A4RSxVRFRQdUYsS0FBTyxLQ1dQNjJFLEVBQU9wOEUsVURUUHE4RSxXQUFZLFNBQUN4OEUsR0NVWCxNRFRBRixNQUFDMEMsSUFBSSxZQUFZeEMsSUNZWnU4RSxHRG5CWTU3RSxTQUFTNEY7OztBRUE5QixHQUFBazJFLEtBQUFDLFFBQUFDLEtBQUFqOUUsT0FBQSxTQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEtBQUFDLEtBQUFDLFlBQUFKLEVBQUEsSUFBQSxHQUFBSyxLQUFBSixHQUFBSyxRQUFBQyxLQUFBTixFQUFBSSxLQUFBTCxFQUFBSyxHQUFBSixFQUFBSSxHQUFBLE9BQUFILEdBQUFNLFVBQUFQLEVBQUFPLFVBQUFSLEVBQUFRLFVBQUEsR0FBQU4sR0FBQUYsRUFBQVMsVUFBQVIsRUFBQU8sVUFBQVIsR0NFRU0sV0FBYUksZUFDYmhCLEtBQU8sU0FBU0MsRUFBSUMsR0FBSyxNQUFPLFlBQVksTUFBT0QsR0FBR0UsTUFBTUQsRUFBSUUsWURINURnOUUsS0FBQSxTQUFBNTdFLEdDUUosUUFBUzQ3RSxLQUNQLE1BQU9BLEdBQUlyOEUsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0F3Ry9DLE1BM0dBQyxRQUFPKzhFLEVBQUs1N0UsR0FNWjQ3RSxFQUFJdDhFLFVEVkpvUyxJQUFLLE1DWUxrcUUsRUFBSXQ4RSxVRExKNHlFLElBQUssU0FBRWhsRSxFQUFXc3VDLEdBQ2hCLEdDS1ksTUFBUnR1QyxJRE5DQSxFQUFPLElDU0csTUFBWHN1QyxJRFRZQSxFQUFVLEtBQ2Q1OUMsVUFBVW1FLFNBQVNKLElBQUksT0FBT2xDLFFBQVEsT0NjbEQsTURiQVIsTUFBQ21JLEtBQ0M3RixLQUFjLE1BQ2QyTCxLQUFjQSxFQUNkc3VDLFFBQWNBLEVBQ2R4RSxXQUFjLEdBQUs1c0MsT0FBUThyQixhQ2lCL0IwbEQsRUFBSXQ4RSxVRGRKb2YsR0FBSSxTQUFFeFIsRUFBV3N1QyxHQUNmLEdDY1ksTUFBUnR1QyxJRGZBQSxFQUFPLElDa0JJLE1BQVhzdUMsSURsQldBLEVBQVUsS0FDYjU5QyxVQUFVbUUsU0FBU0osSUFBSSxPQUFPbEMsUUFBUSxNQ3VCbEQsTUR0QkFSLE1BQUNtSSxLQUNDN0YsS0FBYyxLQUNkMkwsS0FBY0EsRUFDZHN1QyxRQUFjQSxFQUNkeEUsV0FBYyxHQUFLNXNDLE9BQVE4ckIsYUMwQi9CMGxELEVBQUl0OEUsVUR2QkppdUIsR0FBSSxTQUFFcmdCLEVBQVdzdUMsR0FDZixHQ3VCWSxNQUFSdHVDLElEeEJBQSxFQUFPLElDMkJJLE1BQVhzdUMsSUQzQldBLEVBQVUsS0FDYjU5QyxVQUFVbUUsU0FBU0osSUFBSSxPQUFPbEMsUUFBUSxNQ2dDbEQsTUQvQkFSLE1BQUNtSSxLQUNDN0YsS0FBYyxLQUNkMkwsS0FBY0EsRUFDZHN1QyxRQUFjQSxFQUNkeEUsV0FBYyxHQUFLNXNDLE9BQVE4ckIsYUNtQy9CMGxELEVBQUl0OEUsVURoQ0owaEIsSUFBSyxTQUFFOVQsRUFBV3N1QyxHQUNoQixNQ2dDWSxPQUFSdHVDLElEakNDQSxFQUFPLElDb0NHLE1BQVhzdUMsSURwQ1lBLEVBQVUsTUFDakI1OUMsVUFBVW1FLFNBQVNKLElBQUksT0FBT2xDLFFBQVEsUUMrQ2pEbThFLEVBQUl0OEUsVUR0Q0o4SCxJQUFLLFNBQUUyMEUsR0FDTCxHQUFBN3RFLEdBQUFyTixDQzZDQSxPRDdDQXFOLEdBQUksR0FBSTlELE1BQ1J2SixFQUFPLGdCQUN5QixNQUFBakQsVUFBQXNNLEtBQUFySixTQUFoQ0EsRUFBT2pELFVBQVVzTSxLQUFLckosUUFDdEI1QixLQUFDdUssTUFBTSxRQUNQdkssS0FBQzRGLE1BQ0NnUSxJQUFjNVYsS0FBQys4RSxXQUNmcjhDLEtBQWN6eEIsRUFBRWd5QixjQUNoQk4sTUFBYzF4QixFQUFFaXlCLFdBQ2hCODdDLEtBQWMvdEUsRUFBRWt5QixVQUNoQjRXLFVBQWM5b0MsRUFBRWdvQixVQUNoQmhzQixLQUFjckosRUFDZG9CLE1BQWM4NUUsS0M2Q2xCSCxFQUFJdDhFLFVEM0NKMDhFLFNBQVUsV0FDUixHQUFBOXRFLEdBQUFoRSxDQUdBLE9BSEFnRSxHQUFJLEdBQUk5RCxNQUNSRixFQUFPLGdCQUN5QixNQUFBdE0sVUFBQXNNLEtBQUFySixTQUFoQ3FKLEVBQU90TSxVQUFVc00sS0FBS3JKLFFBQ2Y2OEMsU0FBWXh6QyxFQUFLLElBQUdnRSxFQUFFZ29CLFlDaUR4QjBsRCxHRGpIUzk3RSxTQUFTNEYsT0FrRXJCbzJFLEtBQUEsU0FBQTk3RSxHQ3NESixRQUFTODdFLEtBQ1AsTUFBT0EsR0FBS3Y4RSxVQUFVTCxZQUFZUCxNQUFNTSxLQUFNTCxXQVdoRCxNQWRBQyxRQUFPaTlFLEVBQU05N0UsR0FNYjg3RSxFQUFLeDhFLFVEekRMb1MsSUFBSyxNQzJETG9xRSxFQUFLeDhFLFVEMURMc0IsTUFBT2c3RSxJQzREUEUsRUFBS3g4RSxVRDNETGtpQixXQUFZLFNBQUM1Z0IsR0FBVSxNQUFPQSxHQUFNZSxJQUFJLGNDK0RqQ202RSxHRGxFVWg4RSxTQUFTOEYsWUFLdEJpMkUsUUFBQSxTQUFBNzdFLEdDb0VKLFFBQVM2N0UsS0FFUCxNQURBNThFLE1BQUtrRyxPQUFTM0csS0FBS1MsS0FBS2tHLE9BQVFsRyxNQUN6QjQ4RSxFQUFRdDhFLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBcURuRCxNQXpEQUMsUUFBT2c5RSxFQUFTNzdFLEdBT2hCNjdFLEVBQVF2OEUsVUR2RVJpVyxVQUFZLFVDeUVac21FLEVBQVF2OEUsVUR4RVJjLFFBQ0U4N0Usd0JBQTBCLFVDMkU1QkwsRUFBUXY4RSxVRHpFUmlkLFdBQVksU0FBQzliLEdDNEVYLE1EM0VBeEIsTUFBQ2s5RSxLQUFPMTdFLEVBQVEwN0UsS0FDaEJsOUUsS0FBQ205RSxXQUFjbjlFLEtBQUNrOUUsS0FBS256RSxRQUFRLFFBQzdCL0osS0FBQ285RSxhQUFlejZFLEVBQUUwbEMsTUFBTTFsQyxFQUFFc1IsS0FBS2pVLEtBQUNtOUUsY0M0RWxDUCxFQUFRdjhFLFVEMUVSNkYsT0FBUSxXQUVOLEdBQUF5WCxHQUFBMVMsQ0NzRkEsT0R0RkEwUyxHQUFjLFdDMkVaLEdBQUl2ZSxHQUFHdUksRUFBS3pDLEVBQUsrQyxDQUdqQixLRDlFYS9DLEVBQUF2QyxFQUFBc1IsS0FBQWpVLEtBQUFtOUUsWUFBQWwxRSxLQUFBN0ksRUFBQSxFQUFBdUksRUFBQXpDLEVBQUF2RSxPQUFBdkIsRUFBQXVJLEVBQUF2SSxJQytFWDZMLEVBQU8vRixFQUFJOUYsR0FDWDZJLEVBQVFKLEtEaEZHLHNCQUFzQm9ELEVBQUssT0FBOEJqTCxLQUFDbzlFLGVBQWdCbnlFLEVBQTFDLHNCQUFBLFNBQW1ELElBQUcsSUFBR0EsRUFBSyxZQ2tGM0csT0FBT2hELElBQ043SCxLQUFLSixNRG5GaUp5YyxLQUFLLElBQzlKemMsS0FBQ3NGLElBQUlkLEtBQUssNENBR3FCbVosRUFBWSwrQ0FHM0MzZCxLQUFDOGpCLFNBQ0Q5akIsS0FBQzZjLFFBQVEsYUNpRlgrL0QsRUFBUXY4RSxVRC9FUnlqQixPQUFRLFdBRU4sR0FBQTdWLEdBQUFzdUMsRUFBQThnQyxFQUFBQyxFQUFBbCtFLEVBQUF1SSxFQUFBd0UsRUFBQSt3RSxFQUFBdDdFLEVBQUFpL0IsQ0FnQkEsS0FoQkE3Z0MsS0FBQ285RSxhQUFlcDlFLEtBQUNzRixJQUFJQyxLQUFLLGtDQUFrQ3ZCLEtBQUssYUFFakVrNUUsRUFBT2w5RSxLQUFDbTlFLFdBQVduOUUsS0FBQ285RSxjQUVwQkUsRUFBWSxZQUNEdDlFLEtBQUNvOUUsYUFBYSx3RUFXekJoK0UsRUFBQSxFQUFBdUksRUFBQXUxRSxFQUFBdjhFLE9BQUF2QixFQUFBdUksRUFBQXZJLElBQUEsQ0FDRSxHQ2tFQStNLEVBQU0rd0UsRUFBSzk5RSxHRGxFRyxNQUFBK00sRUFBQXpKLElBQUEsU0FBZCxNQUVBMjZFLEdBQVVseEUsRUFBSXpKLElBQUksU0FDbEJkLEVBQVV1SyxFQUFJekosSUFBSSxRQUNsQnVMLEVBQVVvdkUsRUFBR3B2RSxLQUNic3VDLEVBQVU4Z0MsRUFBRzlnQyxRQUNiMWIsRUFBVSxHQUFLMTFCLE1BQUs5RyxTQUFTZzVFLEVBQUd0bEMsWUFBYTNzQyxXQUU3Q2t5RSxHQUFhLFlBRUhydkUsRUFBSyxhQUNMc3VDLEVBQVEsYUFDUjFiLEVBQUssY0NrRWpCLE1EOURBeThDLElBQWEsV0FFYnQ5RSxLQUFDc0YsSUFBSUMsS0FBSyxrQkFBa0JmLEtBQUs4NEUsSUMrRDVCVixHRDNIYS83RSxTQUFTc0Y7OztBRXZFL0IsR0FBQW8zRSxVQUFBMzlFLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlRnOUUsVUFBQSxTQUFBeDhFLEdDT0osUUFBU3c4RSxLQUNQLE1BQU9BLEdBQVNqOUUsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0FLcEQsTUFSQUMsUUFBTzI5RSxFQUFVeDhFLEdBTWpCdzhFLEVBQVNsOUUsVURWVm9TLElBQU0sV0NZRThxRSxHRGJjMThFLFNBQVM0Rjs7O0FFQ2hDLEdBQUErMkUsVUFBQWorRSxLQUFBLFNBQUFDLEVBQUFDLEdBQUEsTUFBQSxZQUFBLE1BQUFELEdBQUFFLE1BQUFELEVBQUFFLGFDQ0VDLE9BQVMsU0FBU0MsRUFBT0MsR0FBK0YsUUFBU0MsS0FBU0MsS0FBS0MsWUFBY0osRUFBMUgsSUFBSyxHQUFJSyxLQUFPSixHQUFjSyxRQUFRQyxLQUFLTixFQUFRSSxLQUFNTCxFQUFNSyxHQUFPSixFQUFPSSxHQUEySixPQUFyR0gsR0FBS00sVUFBWVAsRUFBT08sVUFBV1IsRUFBTVEsVUFBWSxHQUFJTixHQUFRRixFQUFNUyxVQUFZUixFQUFPTyxVQUFrQlIsR0FDbFJNLFdBQWFJLGNERlRpOUUsVUFBQSxTQUFBejhFLEdDT0osUUFBU3k4RSxLQUVQLE1BREF4OUUsTUFBSzhqQixPQUFTdmtCLEtBQUtTLEtBQUs4akIsT0FBUTlqQixNQUN6Qnc5RSxFQUFTbDlFLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBOE1wRCxNQWxOQUMsUUFBTzQ5RSxFQUFVejhFLEdBT2pCeThFLEVBQVNuOUUsVURWVG9TLElBQU0sV0NZTitxRSxFQUFTbjlFLFVEVlRpZCxXQUFZLFdBRVYsR0FBQXROLEVDMEJBLE9EMUJBaFEsTUFBQ3k5RSxRQUFVOTZFLEVBQUVpZCxLQUFLLFdDV2hCLEdBQUl4Z0IsR0FBRzZJLENBRVAsS0RiaUJBLEtBQVcrSCxFQUFBNVEsRUFBQSxJQUFBQSxHQUFBLElBQUE0USxJQUFBNVEsRUNjMUI2SSxFQUFRSixLRGRPbUksRUNnQmpCLE9BQU8vSCxNRGhCaUN5YixPQUF4QixXQ2tCaEIsR0FBSXRrQixHQUFHNkksQ0FFUCxLRHBCZ0RBLEtBQVcrSCxFQUFBNVEsRUFBQSxFQUFBQSxHQUFBLElBQUE0USxJQUFBNVEsRUNxQnpENkksRUFBUUosS0RyQnNDbUksRUN1QmhELE9BQU8vSCxRRHRCVGpJLEtBQUN3YSxPQUFTN2IsVUFBVTZiLE9BQ3BCeGEsS0FBQ2dILEdBQUcsTUFBTyxTQUFBbEIsR0N5QlQsTUR6QlMsWUMwQlAsTUQxQlVBLEdBQUNnZSxXQUFKOWpCLFFDK0JidzlFLEVBQVNuOUUsVUQ3QlR5akIsT0FBUSxXQUNOLEdBQUE0NUQsR0FBQUMsRUFBQUMsRUFBQTVYLEVBQUFocUIsRUFBQTZoQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBbDZELEVBQUE5VCxDQytHQSxPRC9HQTR0RSxHQUFZNTlFLEtBQUMwQyxJQUFJLGFBQ2pCc2pFLEVBQVlobUUsS0FBQzBDLElBQUksYUFDakJpN0UsRUFBWTM5RSxLQUFDMEMsSUFBSSxhQUVqQjFDLEtBQUNrbEIsT0FBUyxZQUFZOGdELEVBQ3RCaG1FLEtBQUNtbEIsT0FBU25sQixLQUFDMEMsSUFBSSxVQUVmb2hCLEVBQWE5akIsS0FBQ3dhLE9BQU85WCxJQUFJLFVBRXpCczdFLEVBQWFoK0UsS0FBQ3dhLE9BQU85WCxJQUFJLFNBQ3pCczVDLEVBQWFoOEMsS0FBQ3dhLE9BQU85WCxJQUFJLFNBQ3pCbTdFLEVBQWE3OUUsS0FBQ3dhLE9BQU85WCxJQUFJLFFBRXpCZzdFLEVBQWEvK0UsVUFBVW1qQixXQUV2Qmc4RCxFQUFhOTlFLEtBQUN3YSxPQUFPOVgsSUFBSSxpQkFFekIxQyxLQUFDd2YsUUFBVSxHQUFHcytELEVBQVM5WCxFQUN2QmhtRSxLQUFDaStFLFFBQVVELEVBQU1FLE9BRWpCSCxFQUFhLzlFLEtBQUN3YSxPQUFPOVgsSUFBSSxVQUFVa0MsS0FFbkM1RSxLQUFDMFUsVUFDQ3NuQyxPQUNFdnBDLElBQVN1cEMsRUFBTXJ6QixLQUFLLElBQUdrMUQsRUFBSyxJQUM1QnArRCxHQUFNLElBQUk5Z0IsVUFBVTJXLFFBQVEsS0FDOUIwb0UsT0FDRXZyRSxJQUFNLFVBQVV1ckUsRUFBTXIxRCxLQUFLLElBQzNCbEosR0FBTSxVQUFVdStELEVBQU1yMUQsS0FBSyxJQUFHcTFELEVBQU1FLE9BQU8sS0FDN0M1akUsT0FDRTdILElBQVNtckUsRUFBVSxJQUNuQm4rRCxHQUFTbStELEVBQVUsT0FBTUUsRUFBUzlYLEVBQVUsS0FDOUNsaUQsUUFDRXJSLElBQU0sVUFBVXFSLEVBQU82RSxLQUFLLElBQzVCbEosR0FBTSxVQUFVcUUsRUFBTzZFLEtBQUssSUFBRzdFLEVBQU9vNkQsT0FBTyxJQUM3Q3A2RSxPQUFTZ2dCLEVBQU9oZ0IsUUFDbEJxNkUsUUFDRTFyRSxJQUFBLFdDMkJFLEdBQUlyVCxHQUFHNkksQ0FFUCxLRDdCS0EsS0FBNEUrSCxFQUFBNVEsRUFBQSxFQUFBQSxHQUFBLElBQUE0USxJQUFBNVEsRUM4Qi9FNkksRUFBUUosS0Q5QkwsVUFBVWsyRSxFQUFhLzlFLEtBQUN5OUUsUUFBUXp0RSxHQUFHLElBQUc2dEUsRUFBSyxJQ2dDaEQsT0FBTzUxRSxJQUNON0gsS0FBS0osTURoQ1J5ZixHQUFBLFdDa0NFLEdBQUlyZ0IsR0FBRzZJLENBRVAsS0RwQ0tBLEtBQTRFK0gsRUFBQTVRLEVBQUEsRUFBQUEsR0FBQSxJQUFBNFEsSUFBQTVRLEVDcUMvRTZJLEVBQVFKLEtEckNMLFVBQVVrMkUsRUFBYS85RSxLQUFDeTlFLFFBQVF6dEUsR0FBRyxJQUFHNnRFLEVBQUssSUFBR2wvRSxVQUFVMlcsUUFBUSxJQ3VDckUsT0FBT3JOLElBQ043SCxLQUFLSixPRHZDVm8rRSxXQUNFM3JFLElBQUEsV0MwQ0UsR0FBSXJULEdBQUc2SSxDQUVQLEtENUNLQSxLQUE0RCtILEVBQUE1USxFQUFBLEVBQUFBLEdBQUEsSUFBQTRRLElBQUE1USxFQzZDL0Q2SSxFQUFRSixLRDdDTCxHQUFHazJFLEVBQWEvdEUsRUFBRSxJQUFHNnRFLEVBQUssSUMrQy9CLE9BQU81MUUsTUQ5Q1R3WCxHQUFBLFdDaURFLEdBQUlyZ0IsR0FBRzZJLENBRVAsS0RuREtBLEtBQTREK0gsRUFBQTVRLEVBQUEsRUFBQUEsR0FBQSxJQUFBNFEsSUFBQTVRLEVDb0QvRDZJLEVBQVFKLEtEcERMLEdBQUdrMkUsRUFBYS90RSxFQUFFLElBQUc2dEUsRUFBSyxJQUFHQyxFQUFTOVgsRUFBVSxJQ3NEckQsT0FBTy85RCxRRHBEYmpJLEtBQUNvVSxPQUNDc0wsS0FBUSxXQUFXZytELEVBQVUsVUFDN0JoaUUsS0FBUSxXQUFXZ2lFLEVBQVUsVUFDN0JyNkIsS0FBUSxXQUFXcTZCLEVBQVUsVUFDN0JsMUUsTUFBUSxXQUFXazFFLEVBQVUsZUFFL0IxOUUsS0FBQ3ErRSxLQUNDMytELEtBQVEsY0FBY2crRCxFQUFVLFVBQ2hDaGlFLEtBQVEsY0FBY2dpRSxFQUFVLFVBQ2hDcjZCLEtBQVEsY0FBY3E2QixFQUFVLFVBQ2hDbDFFLE1BQVEsY0FFVnhJLEtBQUNzK0UsWUFDQzUrRCxLQUFRLFdBQVdpK0QsRUFBVSxVQUM3QmppRSxLQUFRLFdBQVdpaUUsRUFBVSxVQUM3QnQ2QixLQUFRLFdBQVdzNkIsRUFBVSxVQUM3Qm4xRSxNQUFRLFdBQVdtMUUsRUFBVSxnQkM0RGpDSCxFQUFTbjlFLFVEMURUdWhCLFlBQWMsV0FDWixHQUFBMjhELEVDMkRBLE9EM0RBQSxHQUFjLE9BQVM1L0UsVUFBVTJXLFFBQVUsZUM4RDdDa29FLEVBQVNuOUUsVUQzRFQ0a0IsU0FBVyxTQUFFK2dELEVBQVczNkQsR0FDdEIsR0FBQXV5RSxHQUFBQyxDQVdBLE9DaURZLE9BQVJ4eUUsSUQ3RGtCQSxFQUFPLE1BQzdCdXlFLEVBQVk1OUUsS0FBQzBDLElBQUksYUFHakJtN0UsRUFBeUIsVUFBYjdYLEVBQTBCLElBQUlobUUsS0FBQ3dhLE9BQU85WCxJQUFJLFFBQWEsR0FDbkUySSxFQUFZLE1BQUFBLEVBQVcsSUFBSUEsRUFBWSxHQUdyQzI2RCxFQURjLFVBQWJBLEVBQ1csWUFFQWhtRSxLQUFDd2EsT0FBTzlYLElBQUksaUJBQW1Cc2pFLEVBRXRDLEdBQUc0WCxFQUFZQyxFQUFLLFFBQU83WCxFQUFVLElBQUdobUUsS0FBQ3ErRSxJQUFJNzFFLE1BQVE2QyxHQytEOURteUUsRUFBU245RSxVRDdEVDA3QyxRQUFXLFNBQUVybkMsR0M4RFgsTUQ5RHlCLEdBQUcxVSxLQUFDMFUsU0FBU0EsR0FBVWpDLEtDaUVsRCtxRSxFQUFTbjlFLFVEL0RUaVUsTUFBVyxTQUFFSSxFQUFVb0csR0FDckIsR0FBQXpZLEdBQUFtOEUsQ0FVQSxPQ3NEWSxPQUFSMWpFLElEakVpQkEsRUFBTyxNQUUxQnpZLEVBRGEsVUFBWnFTLEdBQ1EsR0FBRzFVLEtBQUMwVSxTQUFTQSxHQUFVK0ssSUFBSzdlLE1BQU0sT0FFbEMsR0FBR1osS0FBQzBVLFNBQVNBLEdBQVUrSyxJQUFLN2UsTUFBTSxNQUU3QzQ5RSxFQUFVbjhFLEVBQU80VyxNQUFNLE9BRXBCLE1BQUE2QixJQUNEelksRUFBWW04RSxFQUFRLEdBQUcsTUFBSzcvRSxVQUFVc00sS0FBS3JKLE9BQU8sSUFBR2taLEVBQUssSUFBRzBqRSxFQUFRLElBRWhFbjhFLEdDcUVUbTdFLEVBQVNuOUUsVURuRVRvK0UsUUFBVSxTQUFFL3BFLEdBQ1YsR0FBQVEsRUFDQSxPQURBQSxHQUFPdlcsVUFBVSsrRSxVQUNQMTlFLEtBQUNzVSxNQUFNLFNBQVMsWUFBV1ksR0N1RXZDc29FLEVBQVNuOUUsVURyRVR3VCxRQUFXLFNBQUVhLEVBQVVnTCxHQUNyQixNQUFlLFVBQVpoTCxFQUNELEdBQUcxVSxLQUFDMFUsU0FBU0EsR0FBVStLLEdBQUt6ZixLQUFDcytFLFdBQVc1K0QsS0FBT0EsRUFFL0MsR0FBRzFmLEtBQUMwVSxTQUFTQSxHQUFVK0ssR0FBS3pmLEtBQUNvVSxNQUFNc0wsS0FBT0EsR0N5RTlDODlELEVBQVNuOUUsVUR2RVRxK0UsUUFBVyxTQUFFaHFFLEVBQVUydUMsR0FDckIsTUFBZSxVQUFaM3VDLEVBQ0QsR0FBRzFVLEtBQUMwVSxTQUFTQSxHQUFVK0ssR0FBS3pmLEtBQUNzK0UsV0FBV2o3QixLQUFPQSxFQUUvQyxHQUFHcmpELEtBQUMwVSxTQUFTQSxHQUFVK0ssR0FBS3pmLEtBQUNvVSxNQUFNaXZDLEtBQU9BLEdDMkU5Q202QixFQUFTbjlFLFVEekVUcytFLFFBQVcsU0FBRWpxRSxFQUFVZ0gsR0FDckIsTUFBZSxVQUFaaEgsRUFDRCxHQUFHMVUsS0FBQzBVLFNBQVNBLEdBQVUrSyxHQUFLemYsS0FBQ3MrRSxXQUFXNWlFLEtBQU9BLEVBRS9DLEdBQUcxYixLQUFDMFUsU0FBU0EsR0FBVStLLEdBQUt6ZixLQUFDb1UsTUFBTXNILEtBQU9BLEdDNkU5QzhoRSxFQUFTbjlFLFVEMUVUczdDLFVBQVcsU0FBRUYsR0FDWCxHQUFBeWlDLEdBQUFMLENDNkVBLE9EN0VBQSxHQUFTNzlFLEtBQUN3YSxPQUFPOVgsSUFBSSxRQUNyQnc3RSxFQUFTdi9FLFVBQVUyVyxRQUVuQixVQUFVbW1DLEVBQUcsSUFBR29pQyxFQUFLLElBQUdLLEdDNkUxQlYsRUFBU245RSxVRDNFVDQ3QyxTQUFVLFNBQUV6ekMsR0FDVixHQUFBNUQsRUM2RUEsT0Q3RUFBLEdBQU81RSxLQUFDd2EsT0FBTzlYLElBQUksVUFBVWtDLEtBQzdCLEdBQUdBLEVBQU81RSxLQUFDeTlFLFFBQVFqMUUsSUMrRWRnMUUsR0R2TmMzOEUsU0FBUzRGOzs7QUVEaEMsR0FBQW00RSxjQUFBaC9FLE9BQUEsU0FBQUMsRUFBQUMsR0FBQSxRQUFBQyxLQUFBQyxLQUFBQyxZQUFBSixFQUFBLElBQUEsR0FBQUssS0FBQUosR0FBQUssUUFBQUMsS0FBQU4sRUFBQUksS0FBQUwsRUFBQUssR0FBQUosRUFBQUksR0FBQSxPQUFBSCxHQUFBTSxVQUFBUCxFQUFBTyxVQUFBUixFQUFBUSxVQUFBLEdBQUFOLEdBQUFGLEVBQUFTLFVBQUFSLEVBQUFPLFVBQUFSLEdDRUVNLFdBQWFJLGNERlRxK0UsY0FBQSxTQUFBNzlFLEdDT0osUUFBUzY5RSxLQUNQLE1BQU9BLEdBQWF0K0UsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0E4RXhELE1BakZBQyxRQUFPZy9FLEVBQWM3OUUsR0FNckI2OUUsRUFBYXYrRSxVRFRiaVcsVUFBWSxlQ1dac29FLEVBQWF2K0UsVURUYmMsUUFDRStxQixjQUFnQixPQUNoQk4sY0FBZ0IsVUNZbEJnekQsRUFBYXYrRSxVRFZiZ3NCLE9BQVEsV0NXTixNRFZBN2lCLFFBQU9DLFFBQVFDLFFDYWpCazFFLEVBQWF2K0UsVURYYjhSLEtBQU0sV0NZSixNRFhBblMsTUFBQzhvQixNQUVDbGpCLEtBQU8yRCxFQUFFLGlDQUVURyxLQUFPSCxFQUFFLG9DQUVUa3ZCLE1BQVFsdkIsRUFBRSwyQkFDVnMxRSxVQUFZdDFFLEVBQUUsZ0NBRWR6RyxTQUFVeUcsRUFBRSwrQkFFWnUxRSxRQUFTdjFFLEVBQUUsZ0NBRVh3MUUsWUFBYXgxRSxFQUFFLDZCQUNmeTFFLGFBQWV6MUUsRUFBRSw4QkFDakIwMUUsZ0JBQWtCMTFFLEVBQUUsa0NBQ3BCMjFFLGNBQWdCMzFFLEVBQUUsZ0NBQ2xCNDFFLGNBQWdCNTFFLEVBQUUsZ0NBQ2xCNjFFLG1CQUFxQjcxRSxFQUFFLHFDQUN2QjgxRSxjQUFnQjkxRSxFQUFFLGdDQUVsQnN4RCxRQUFTdHhELEVBQUUsOEJBQ1htMEIsU0FBVW4wQixFQUFFLCtCQUNadWdCLFlBQWF2Z0IsRUFBRSxtQ0FDZnk4RCxVQUFXejhELEVBQUUsaUNBQ2JxMEUsVUFBV3IwRSxFQUFFLGlDQUNiKzFFLGVBQWdCLzFFLEVBQUUsc0NBQ2xCZzJFLFVBQVloMkUsRUFBRSxtQ0NRbEJxMUUsRUFBYXYrRSxVRE5iaWQsV0FBWSxTQUFDOWIsR0NRWCxNRE5BeEIsTUFBQ21TLE9BRURuUyxLQUFDOEMsU0FBV25FLFVBQVVtRSxVQ094Qjg3RSxFQUFhditFLFVETGJ1RixLQUFNLFdDTUosTURMQTVGLE1BQUM4QyxTQUFTOEMsTUFDUmtrQixZQUFjOXBCLEtBQUNzRixJQUFJQyxLQUFLLGlCQUFpQkYsTUFDekN3MUQsUUFBYzc2RCxLQUFDc0YsSUFBSUMsS0FBSyxZQUFZRixNQUNwQ3E0QixTQUFjMTlCLEtBQUNzRixJQUFJQyxLQUFLLGFBQWFGLE1BQ3JDMmdFLFVBQWNobUUsS0FBQ3NGLElBQUlDLEtBQUssZUFBZUYsTUFDdkN1NEUsVUFBYzU5RSxLQUFDc0YsSUFBSUMsS0FBSyxlQUFlRixNQUN2QzhmLE9BQWNubEIsS0FBQ3NGLElBQUlDLEtBQUssWUFBWUYsTUFDcEM4RyxJQUFjbk0sS0FBQ3NGLElBQUlDLEtBQUssUUFBUUYsTUFBTTRULE1BQU0sWUFFNUNwVCxRQUFTLFNBQUFDLEdDTVAsTUROTyxZQ09MLE1ETkYzRyxPQUFNa1AsU0FBU3ZJLEVBQUNnakIsS0FBSzJQLFNBRGR6NEIsTUFFVGdHLE1BQU8sV0NTTCxNRFJBN0csT0FBTWtQLFNBQVNyTyxLQUFDOG9CLEtBQUsrMUQsZUNhM0JELEVBQWF2K0UsVURYYjZGLE9BQVEsV0FDTixHQUFBMjBELEdBQUEvd0MsRUFBQTh6RCxFQUFBNVgsRUFBQXRvQyxFQUFBdnhCLEVBQUFnWixDQ29CQSxPRHBCQTAxQyxHQUFjNzZELEtBQUM4QyxTQUFTMkksaUJBQWlCLFdBQ3pDaXlCLEVBQWMxOUIsS0FBQzhDLFNBQVMySSxpQkFBaUIsWUFDekN1NkQsRUFBY2htRSxLQUFDOEMsU0FBUzJJLGlCQUFpQixhQUN6Q3FlLEVBQWM5cEIsS0FBQzhDLFNBQVMySSxpQkFBaUIsZUFDekNteUUsRUFBYzU5RSxLQUFDOEMsU0FBUzJJLGlCQUFpQixhQUN6QzBaLEVBQWNubEIsS0FBQzhDLFNBQVMySSxpQkFBaUIsVUFDekNVLEVBQWN4SixFQUFFUixPQUFRbkMsS0FBQzhDLFNBQVNrRixTQUFTLE9BQU95VSxLQUFLLE9BRXZEemMsS0FBQ3NGLElBQUlkLEtBQUssbUNBQzBCeEUsS0FBQzhvQixLQUFLcGYsS0FBSyxpQkFDdkMxSixLQUFDOG9CLEtBQUtobUIsU0FBUyw0REFDZ0M5QyxLQUFDOG9CLEtBQUtnMkQsUUFBUSxxRkFHakM5K0UsS0FBQzhvQixLQUFLaTJELFlBQVksS0FBSS8rRSxLQUFDOG9CLEtBQUsreEMsUUFBUSx1REFDekJBLEVBQVEsb0VBR2xCNzZELEtBQUM4b0IsS0FBS2syRCxhQUFhLEtBQUloL0UsS0FBQzhvQixLQUFLNFUsU0FBUyx3REFDM0JBLEVBQVMsd0VBR2hCMTlCLEtBQUM4b0IsS0FBS20yRCxnQkFBZ0IsS0FBSWovRSxLQUFDOG9CLEtBQUtnQixZQUFZLDREQUNqQ0EsRUFBWSxzRUFHekI5cEIsS0FBQzhvQixLQUFLbzJELGNBQWMsS0FBSWwvRSxLQUFDOG9CLEtBQUtrOUMsVUFBVSwwREFDN0JBLEVBQVUsc0VBR3JCaG1FLEtBQUM4b0IsS0FBS3EyRCxjQUFjLEtBQUluL0UsS0FBQzhvQixLQUFLODBELFVBQVUsMERBQzdCQSxFQUFVLG1FQUd4QjU5RSxLQUFDOG9CLEtBQUtzMkQsbUJBQW1CLEtBQUlwL0UsS0FBQzhvQixLQUFLdzJELGVBQWUsdURBQ3ZDbjZELEVBQU8sK0RBR3RCbmxCLEtBQUM4b0IsS0FBS3UyRCxjQUFjLEtBQUlyL0UsS0FBQzhvQixLQUFLeTJELFVBQVUsdUNBQ3pDcHpFLEVBQUkscURBSUZuTSxLQUFDOG9CLEtBQUtsakIsS0FBSyxhQUc1QzVGLEtBQUM2YyxRQUFRLGFDdkJKK2hFLEdEdEZrQi85RSxTQUFTc0Y7OztBRU1wQyxHQUFBcTVFLGFBQUFqZ0YsS0FBQSxTQUFBQyxFQUFBQyxHQUFBLE1BQUEsWUFBQSxNQUFBRCxHQUFBRSxNQUFBRCxFQUFBRSxhQ0pFQyxPQUFTLFNBQVNDLEVBQU9DLEdBQStGLFFBQVNDLEtBQVNDLEtBQUtDLFlBQWNKLEVBQTFILElBQUssR0FBSUssS0FBT0osR0FBY0ssUUFBUUMsS0FBS04sRUFBUUksS0FBTUwsRUFBTUssR0FBT0osRUFBT0ksR0FBMkosT0FBckdILEdBQUtNLFVBQVlQLEVBQU9PLFVBQVdSLEVBQU1RLFVBQVksR0FBSU4sR0FBUUYsRUFBTVMsVUFBWVIsRUFBT08sVUFBa0JSLEdBQ2xSTSxXQUFhSSxjREdUaS9FLGFBQUEsU0FBQXorRSxHQ0VKLFFBQVN5K0UsS0FFUCxNQURBeC9FLE1BQUswYixLQUFPbmMsS0FBS1MsS0FBSzBiLEtBQU0xYixNQUNyQncvRSxFQUFZbC9FLFVBQVVMLFlBQVlQLE1BQU1NLEtBQU1MLFdBdUN2RCxNQTNDQUMsUUFBTzQvRSxFQUFheitFLEdBT3BCeStFLEVBQVluL0UsVURMWnFiLEtBQU0sU0FBQ2dFLEdBRUwsR0FBQXhhLEVDb0NBLE9EcENBc0UsUUFBT21DLFNBQVMsRUFBRyxHQ01hLE9BQTNCekcsRUFBTWxGLEtBQUsySSxjQUNkekQsRURMWXlFLFFBQ2QzSixLQUFDMkksWUFBYytXLEVBRWYxZixLQUFDc1csVUFBWXRXLEtBQUMySSxZQUFZMk4sVUFHMUIzWCxVQUFVd04sSUFBSThtRSxJQUFJLE9BQVFqekUsS0FBQ3NXLFdBRTNCdFcsS0FBQzJJLFlBQVkzQixHQUFHLFdBQVksU0FBQWxCLEdDRzFCLE1ESDBCLFlBQzFCLEdBQUFsQixFQ09FLE9EUEZ6RixPQUFNb1csU0FBUSxHQUNkMVIsRUFBRSxZQUFZOGYsT0FBTzdkLEVBQUM2QyxZQUFZbVUsSUFDbENoWCxFQUFDNkMsWUFBWXJELElBQUlDLEtBQUssY0FBY2s2RSxZQ0t1QixtQkFBMUM3NkUsRUFBT2tCLEVBQU02QyxhQUFhbW5CLFlBQTZCbHJCLEVESjNEa3JCLGNBQUEsU0FKYTl2QixPQU01QkEsS0FBQzJJLFlBQVkzQixHQUFHLGNBQWUsU0FBQWxCLEdDTTdCLE1ETjZCLFlDTzNCLE1ETkZBLEdBQUM2QyxZQUFZckQsSUFBSUMsS0FBSyxjQUFjazZFLGNBRFB6L0UsT0FLL0JBLEtBQUMySSxZQUFZM0IsR0FBRyxhQUFjLFNBQUFsQixHQ001QixNRE40QixZQ08xQixNRE5GM0csT0FBTW9XLFNBQVEsS0FEY3ZWLE9BRzlCQSxLQUFDMkksWUFBWTNCLEdBQUcsV0FBWSxTQUFBbEIsR0NRMUIsTURSMEIsWUNTeEIsTURSRjNHLE9BQU1vVyxTQUFRLEtBRFl2VixPQUc1QkEsS0FBQzJJLFlBQVl6QyxVQ1lSczVFLEdEM0NpQjMrRSxTQUFTc0Y7OztBRU5uQyxHQUFBdTVFLGdCQUFBbmdGLEtBQUEsU0FBQUMsRUFBQUMsR0FBQSxNQUFBLFlBQUEsTUFBQUQsR0FBQUUsTUFBQUQsRUFBQUUsYUNFRUMsT0FBUyxTQUFTQyxFQUFPQyxHQUErRixRQUFTQyxLQUFTQyxLQUFLQyxZQUFjSixFQUExSCxJQUFLLEdBQUlLLEtBQU9KLEdBQWNLLFFBQVFDLEtBQUtOLEVBQVFJLEtBQU1MLEVBQU1LLEdBQU9KLEVBQU9JLEdBQTJKLE9BQXJHSCxHQUFLTSxVQUFZUCxFQUFPTyxVQUFXUixFQUFNUSxVQUFZLEdBQUlOLEdBQVFGLEVBQU1TLFVBQVlSLEVBQU9PLFVBQWtCUixHQUNsUk0sV0FBYUksY0RIVG0vRSxnQkFBQSxTQUFBMytFLEdDUUosUUFBUzIrRSxLQUtQLE1BSkExL0UsTUFBSzIvRSxXQUFhcGdGLEtBQUtTLEtBQUsyL0UsV0FBWTMvRSxNQUN4Q0EsS0FBS3NkLFdBQWEvZCxLQUFLUyxLQUFLc2QsV0FBWXRkLE1BQ3hDQSxLQUFLNC9FLFlBQWNyZ0YsS0FBS1MsS0FBSzQvRSxZQUFhNS9FLE1BQzFDQSxLQUFLNi9FLFdBQWF0Z0YsS0FBS1MsS0FBSzYvRSxXQUFZNy9FLE1BQ2pDMC9FLEVBQWVwL0UsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0E2SjFELE1BcEtBQyxRQUFPOC9FLEVBQWdCMytFLEdBVXZCMitFLEVBQWVyL0UsVURkZnljLEdBQUssY0NnQkw0aUUsRUFBZXIvRSxVRGRmYyxPQUFXNmEsVUFBVUMsT0FDbkI2akUsZ0JBQW1CLFNBQ25CQyx5QkFBZ0MsWUFDaENDLGtCQUEwQixnQkFFMUJGLGdCQUFvQixTQUNwQkMseUJBQWdDLFlBQ2hDQyxrQkFBMEIsZUNpQjVCTixFQUFlci9FLFVEZGY0L0Usd0JBQXlCLFdBQ3ZCLEdBQUFqOUQsR0FBQWs5RCxDQ2lCQSxPRGpCQUEsR0FBZ0JsZ0YsS0FBQ3NGLElBQUlDLEtBQUssdUJBQXVCMlMsV0FDakQ4SyxFQUFNaGpCLEtBQUNzRixJQUFJQyxLQUFLLHNCQUNoQnlkLEVBQUk3ZSxLQUNGKzdDLEtBQU81N0MsS0FBS2lOLElBQUkydUUsRUFBY2hnQyxLQUFNcjhDLEVBQUUyRixRQUFRNkMsUUFBVTJXLEVBQUkzVyxZQ21CaEVxekUsRUFBZXIvRSxVRGpCZncvRSxXQUFZLFdDbUJWLE1EbkJjNy9FLE1BQUNpZ0YsMEJBQTJCamdGLEtBQUNzRixJQUFJQyxLQUFLLHNCQUFzQm1XLFFDc0I1RWdrRSxFQUFlci9FLFVEcEJmdS9FLFlBQWEsV0NzQlgsTUR0QmM1L0UsTUFBQ2lnRiwwQkFBMkJqZ0YsS0FBQ3NGLElBQUlDLEtBQUssc0JBQXNCMnhCLFFDeUI1RXdvRCxFQUFlci9FLFVEdkJmODRFLFlBQWEsV0FDWCxHQUFHbjVFLEtBQUNpTCxLQUFLb0ssVUN3QlAsTUR2QkExVyxXQUFVb1csT0FBT0MsU0FBUyxXQUFXLElDMkJ6QzBxRSxFQUFlci9FLFVEekJmOC9FLFVBQVcsV0FDVCxNQUFHbmdGLE1BQUNpTCxLQUFLb0ssV0FDUDFXLFVBQVUwSyxTQUFXLEdBQ3JCckosS0FBQytVLE9BQU84YyxTQUFRLElBRVMsbUJBQXRCbHpCLFVBQVUwSyxTQUlUckosS0FBQytVLE9BQU84YyxTQUFRLEdBSGZ2b0IsUUFBUXRKLEtBQUM4b0IsS0FBS3MzRCxpQkFDZnBnRixLQUFDK1UsT0FBTzhjLFNBQVEsR0FEbEIsUUNrQ042dEQsRUFBZXIvRSxVRDdCZmlPLE9BQVEsV0FDTixHQUFHdE8sS0FBQ2lMLEtBQUtvSyxVQytCUCxNRDlCQTFXLFdBQVUwSyxTQUFXLEdBQ3JCMUssVUFBVXNNLEtBQUtxRCxRQUVmLElBQXlCLG1CQUF0QjNQLFVBQVUwSyxVQUNYLEdBQUdDLFFBQVF0SixLQUFDOG9CLEtBQUt1M0QsbUJDK0JmLE1EOUJBMWhGLFdBQVUwSyxTQUFXLEdBQ3JCMUssVUFBVXNNLEtBQUtxRCxhQUVqQixJQUFHaEYsUUFBUXRKLEtBQUM4b0IsS0FBS3czRCxnQkNnQ2YsTUQvQkEzaEYsV0FBVTBLLFNBQVcsR0FDckIxSyxVQUFVc00sS0FBS3FELFVDb0N2Qm94RSxFQUFlci9FLFVEbENmeUosUUFBUyxhQ29DVDQxRSxFQUFlci9FLFVEbENmaWQsV0FBWSxTQUFDOWIsR0MwQ1gsTUR4Q0F4QixNQUFDc0YsSUFBSXFYLFNBQVMsa0JBRWQzYyxLQUFDbVMsT0FDRG5TLEtBQUNrRyxTQUVEbEcsS0FBQ2lMLEtBQVN6SixFQUFReUosS0FDbEJqTCxLQUFDK1UsT0FBU3ZULEVBQVF1VCxPQUVsQi9VLEtBQUN1Z0YsT0FBU3ZnRixLQUFDOG9CLEtBQUs3ZCxLQUVoQmpMLEtBQUMrVSxPQUFPL04sR0FBRyxNQUFPaEgsS0FBQzIvRSxZQUNuQjMvRSxLQUFDaUwsS0FBS2pFLEdBQUssZUFBZ0JoSCxLQUFDMi9FLGFDZ0M5QkQsRUFBZXIvRSxVRDlCZjhSLEtBQU0sV0MrQkosTUQ3QkFuUyxNQUFDOG9CLE1BRUN4YSxPQUFzQi9FLEVBQUUsZ0NBRXhCaTNFLGVBQXNCajNFLEVBQUUsaUNBQ3hCazNFLGdCQUFzQmwzRSxFQUFFLGtDQUV4QjBCLEtBQXNCMUIsRUFBRSw2QkFDeEI4dUQsUUFBc0I5dUQsRUFBRSxnQ0FDeEJvdkMsV0FBc0JwdkMsRUFBRSxtQ0FDeEJtM0UsV0FBc0JuM0UsRUFBRSxtQ0FDeEJzdkMsUUFBc0J0dkMsRUFBRSxnQ0FFeEJvM0UsUUFBc0JwM0UsRUFBRSwrQkFDeEJxM0UsS0FBc0JyM0UsRUFBRSw0QkFFeEI4MkUsa0JBQXNCOTJFLEVBQUUsNENBQ3hCKzJFLGVBQXNCLzJFLEVBQUUseUNBQ3hCNjJFLGdCQUFzQjcyRSxFQUFFLG1EQzRCNUJtMkUsRUFBZXIvRSxVRDFCZjZGLE9BQVEsV0FFTixHQUFBaEIsRUNtQ0EsT0RuQ0FsRixNQUFDc0YsSUFBSWQsS0FBSyxxRUFFNER4RSxLQUFDOG9CLEtBQUs4M0QsS0FBSyw2REFNbEU1Z0YsS0FBQzhvQixLQUFLNDNELFdBQVcseUZBT1YxZ0YsS0FBQzhvQixLQUFLNjNELFFBQVEsS0FBSTNnRixLQUFDdWdGLE9BQU8sZ0NBQ3JCNWhGLFVBQVVzTSxLQUFLckosUUFBVSxJQUFHLDZEQUd0QjVCLEtBQUM4b0IsS0FBSzAzRCxlQUFlLHFDQUNwQnhnRixLQUFDOG9CLEtBQUsyM0QsZ0JBQWdCLHlDQUtsQ3pnRixLQUFDOG9CLEtBQUt4YSxPQUFPLGdCQU9uQyxPQUFBcEosRUFBQWxGLEtBQUFpTCxPQUFBLGtCQUFBL0YsR0FBQW1RLFFBQUFuUSxFQUFVbVEsVUFBQSxTQUNSclYsS0FBQ3NGLElBQUlDLEtBQUssdUJBQXVCczdFLE1BQU03Z0YsS0FBQzYvRSxXQUFZNy9FLEtBQUM0L0UsYUFHdkQvN0UsRUFBRXVNLFVBQVUwd0UsVUFBVSxXQUNwQixHQUEwQyxvQ0FBdkNqOUUsRUFBRSxvQkFBb0JHLEtBQUssT0NMNUIsTURNQUgsR0FBRSxvQkFBb0JHLEtBQUssTUFBTyxxQ0FDdENILEVBQUV1TSxVQUFVMndFLFNBQVMsV0FDbkIsR0FBMEMsK0JBQXZDbDlFLEVBQUUsb0JBQW9CRyxLQUFLLE9DSDVCLE1ESUFILEdBQUUsb0JBQW9CRyxLQUFLLE1BQU8saUNDQ3hDMDdFLEVBQWVyL0UsVURDZjJ2QixXQUFZLFNBQUVodUIsR0FDWixNQUFTLEtBQU5BLEdBQ0RoQyxLQUFDc0YsSUFBSUMsS0FBSyxzQkFBc0JvWCxTQUFTLFVBQ3pDM2MsS0FBQ3NGLElBQUlDLEtBQUssZUFBZWYsS0FBSyxNQUU5QnhFLEtBQUNzRixJQUFJQyxLQUFLLHNCQUFzQm1YLFlBQVksVUFDNUMxYyxLQUFDc0YsSUFBSUMsS0FBSyxlQUFlZixLQUFLeEMsS0NHbEMwOUUsRUFBZXIvRSxVREVmcy9FLFdBQVksU0FBQzM4RSxHQ01YLE1ESkFhLEdBQUUsbUJBQW1CVyxLQUFLeEUsS0FBQ3VnRixRQUUzQjE4RSxFQUFFLGFBQWFXLEtBQUt4RSxLQUFDaUwsS0FBS3JKLFNBR3RCNEgsT0FBT2tMLFNBQVN0SixXQUFXNUssUUFBUSxTQUFjUixLQUFDc0YsSUFBSUMsS0FBSyxnQkFBZ0IyeEIsT0FBYWwzQixLQUFDc0YsSUFBSUMsS0FBSyxnQkFBZ0JtVyxPQUV0SDFiLEtBQUNpTCxLQUFLc21CLFFBQ0ptaUQsZ0JBQWlCLFNBQUE1dEUsR0NGZixNREVlLFlDQWIsTURDRkEsR0FBQ0ksU0FDRHJDLEVBQUcsZUFBZ0JpdkIsT0FBTyxPQUZYOXlCLE1BR2pCeXpFLGVBQWdCLFNBQUEzdEUsR0NDZCxNRERjLFlDR1osTURGRkEsR0FBQ0ksU0FDRHJDLEVBQUcsZUFBZ0JtVSxRQUFRLE9BRmJoWSxTQ1NiMC9FLEdEMUtvQjcrRSxTQUFTc0Y7OztBRUF0QyxHQUFBNjZFLFFBQUFwaEYsT0FBQSxTQUFBQyxFQUFBQyxHQUFBLFFBQUFDLEtBQUFDLEtBQUFDLFlBQUFKLEVBQUEsSUFBQSxHQUFBSyxLQUFBSixHQUFBSyxRQUFBQyxLQUFBTixFQUFBSSxLQUFBTCxFQUFBSyxHQUFBSixFQUFBSSxHQUFBLE9BQUFILEdBQUFNLFVBQUFQLEVBQUFPLFVBQUFSLEVBQUFRLFVBQUEsR0FBQU4sR0FBQUYsRUFBQVMsVUFBQVIsRUFBQU8sVUFBQVIsR0NFRU0sV0FBYUksZUFDYkMsV0FBYUEsU0FBVyxTQUFTQyxHQUFRLElBQUssR0FBSXJCLEdBQUksRUFBR3NCLEVBQUlWLEtBQUtXLE9BQVF2QixFQUFJc0IsRUFBR3RCLElBQU8sR0FBSUEsSUFBS1ksT0FBUUEsS0FBS1osS0FBT3FCLEVBQU0sTUFBT3JCLEVBQUssVURIbkk0aEYsUUFBQSxTQUFBamdGLEdDUUosUUFBU2lnRixLQUNQLE1BQU9BLEdBQU8xZ0YsVUFBVUwsWUFBWVAsTUFBTU0sS0FBTUwsV0FpaERsRCxNQXBoREFDLFFBQU9vaEYsRUFBUWpnRixHQU1maWdGLEVBQU8zZ0YsVURMUHlTLFFBQVMsU0FBQ2pILEVBQVUySyxFQUFNNVUsR0FFeEIsR0FEQWlDLEVBQUUsV0FBVzZYLE9BQ1Q3UCxFQ01GLE1ETEFBLEdBQVNuTSxNQUFNTSxLQUFNd1csSUNTekJ3cUUsRUFBTzNnRixVRFBQNGdGLFFBRUVDLDRCQUE4QixlQUM5QkMsMkJBQThCLGNBQzlCQyxzQ0FBeUMsaUJBRXpDQyw0QkFBOEIsZUFDOUJDLHVCQUE4QixXQUU5Qi9zRCxNQUFhLFFBQ2IyMkMsU0FBYSxXQUNiNThELE9BQWEsU0FDYnF5RSxRQUFhLFVBRWJZLFNBQWEsV0FFYnorRSxTQUFhLFdBQ2JnaEIsT0FBVyxTQUVYMDlELEdBQUssVUFFTHRFLEtBQVMsT0FHVHVFLFFBQW1CLFFBQ25CQyxpQkFBbUIsWUFDbkJDLDJCQUFvQyxjQUNwQ0Msa0NBQW9DLGdCQUNwQ0Msb0JBQXNCLG1CQUN0QkMscUJBQXVCLG9CQUV2QkMsa0JBQW9CLGNBQ3BCQyxZQUFvQixjQUVwQkMsa0NBQW9DLGFBRXBDQyxxREFBdUQsaUJBRXZENTRELFVBQXNCLFlBQ3RCNjRELGlCQUFzQixhQUN0QkMsaUJBQXNCLG1CQUV0QkMsc0NBQXdDLGdCQUN4Q0MsaUNBQXdDLGVBQ3hDQyxzQ0FBd0MsaUJBSXhDdDVELE9BQVcsU0FFWG5HLFlBQXVCLGNBRXZCMC9ELFVBQWtCLE1BQ2xCQyxvQkFBNEIsUUFDNUJDLGdCQUFrQixZQUVsQkMsaUNBQXNDLFNBRXRDQyxjQUFrQixVQUNsQkMsV0FBa0IsT0FDbEJDLGNBQWtCLFVBQ2xCOTVELFNBQWtCLFNBRWxCKzVELGNBQXNCLGNBRXRCQyxlQUFpQixlQUNqQkMsVUFBYyxZQUNkQyxxQkFBdUIsWUFDdkI3dkQsTUFBVSxRQUVWOHZELFdBQWtCLFFDZHBCbkMsRUFBTzNnRixVRGdCUCtpRixhQUFjLFNBQUUxNEIsR0NmZCxNRGdCQS9yRCxXQUFVc00sS0FBS3NtQixRQUNibWlELGdCQUFpQixXQUVmLEdBQUEyUCxHQUFBdjNCLENDSkEsT0RJQXUzQixHQUFxQixTQUFFejJCLEVBQVVkLEdBQy9CLEdBQUFwc0MsRUNWQSxPRFVBa3RDLEdBQVM5bEQsbUJBQ1Q0WSxFQUFPLEdBQUk2dEQsbUJBQ1QzZ0IsU0FBVUEsRUFDVmQsU0FBVUEsSUFDWnBqRCxHQUFHZ1QsS0FBS2dFLElBRVZvc0MsRUFBVyxHQUFJOUQsV0FBU3B5QyxJQUFRODBDLElBQ2hDb0IsRUFBU3prRCxPQUNQeEIsUUFBUyxXQUNQLEdBQUErbUQsR0FBQTAyQixDQ1BBLE9ET0FBLEdBQWdCNTRCLEVBQVcsWUFDM0JrQyxFQUFhLEdBQUkwZ0IsV0FBUzEzRCxJQUFRMHRFLElBQ2xDMTJCLEVBQVN2bEQsT0FDUHJCLE1BQVMsV0NSUCxNRFFVNG1ELEdBQVNobkQsS0FBSyxNQUFNQyxRQUFTLFdDTm5DLE1ETXNDdzlFLEdBQW1CejJCLEVBQVVkLE9BQ3pFam1ELFFBQVMsV0NGUCxNREVVdzlFLEdBQW1CejJCLEVBQVVkLGFDT3JEazFCLEVBQU8zZ0YsVURMUHVzRCxTQUFVLFNBQUVsQyxHQ01WLE1ETEEvckQsV0FBVXNNLEtBQUtzbUIsUUFDYm1pRCxnQkFBaUIsV0FFZixHQUFBNW5CLEVDUUEsT0RSQUEsR0FBVyxHQUFJOUQsV0FBU3B5QyxJQUFRODBDLElBQ2hDb0IsRUFBU3prRCxPQUNQeEIsUUFBUyxXQUNQLEdBQUErbUQsR0FBQTAyQixDQ1lBLE9EWkFBLEdBQWdCNTRCLEVBQVcsWUFDM0JrQyxFQUFXLEdBQUkwZ0IsV0FBUzEzRCxJQUFRMHRFLElBQ2hDMTJCLEVBQVN2bEQsT0FDUHJCLE1BQU8sV0NXTCxNRFhRN0csT0FBTWtQLFNBQVMsd0JBQ3pCeEksUUFBUyxXQUNQLEdBQUE2WixFQ2tCQSxPRGxCQWt0QyxHQUFTOWxELG1CQUNUNFksRUFBTyxHQUFJcXZELG9CQUNUbmlCLFNBQVdBLEVBQ1hkLFNBQVdBLElBQ2JwakQsR0FBR2dULEtBQUtnRSxhQ3VCdEJzaEUsRUFBTzNnRixVRGpCUGtqRixhQUFjLFNBQUU3NEIsR0NrQmQsTURqQkEvckQsV0FBVXNNLEtBQUtzbUIsUUFDYm1pRCxnQkFBaUIsV0FFZixHQUFBNW5CLEVDb0JBLE9EcEJBQSxHQUFXLEdBQUk5RCxXQUFTcHlDLElBQVE4MEMsSUFDaENvQixFQUFTemtELE9BQ1B4QixRQUFTLFdBQ1AsR0FBQTZaLEVDdUJBLE9EdkJBQSxHQUFPLEdBQUlxc0MsbUJBQWlCRCxTQUFXQSxJQUN2Q3BqRCxHQUFHZ1QsS0FBS2dFLFVDNkJsQnNoRSxFQUFPM2dGLFVEM0JQbWpGLFlBQWEsU0FBRTk0QixHQzRCYixNRDNCQS9yRCxXQUFVc00sS0FBS3NtQixRQUNibWlELGdCQUFpQixXQUVmLEdBQUE1bkIsRUM4QkEsT0Q5QkFBLEdBQVcsR0FBSTlELFdBQVNweUMsSUFBUTgwQyxJQUNoQ29CLEVBQVN6a0QsT0FDUHhCLFFBQVMsV0FDUCxHQUFBNlosRUNrQ0EsT0RsQ0Fvc0MsR0FBU2hsRCxtQkFDVDRZLEVBQU8sR0FBSTh3QyxrQkFDVDFFLFNBQVVBLElBQ1pwakQsR0FBR2dULEtBQUtnRSxVQ3NDbEJzaEUsRUFBTzNnRixVRHBDUG9qRixlQUFnQixTQUFFLzRCLEVBQVlpQixHQ3FDNUIsTURwQ0FodEQsV0FBVXNNLEtBQUtzbUIsUUFDYm1pRCxnQkFBaUIsV0FFZixHQUFBNW5CLEVDdUNBLE9EdkNBQSxHQUFXLEdBQUk5RCxXQUFTcHlDLElBQVE4MEMsSUFDaENvQixFQUFTemtELE9BQ1B4QixRQUFTLFdDdUNQLE1EdENBbEgsV0FBVTZXLElBQUlrSyxLQUFLL2dCLFVBQVVtakIsV0FBVyxrQkFDdEM1aEIsSUFBS3lyRCxFQUNML1IsY0FBYyxFQUNkL3pDLFFBQVMsU0FBQ21PLEdBQ1IsR0FBQW8vQyxHQUFBaDBELEVBQUFvSixFQUFBNkcsRUFBQW5LLEVBQUFDLEVBQUFnK0IsRUFBQUMsRUFBQTJ0QixDQUlBLEtBSkF2b0QsRUFBUWxFLEtBQUtDLElBQUl5UCxFQUFLdFEsS0FBSy9DLE9BQVMsRUFBRyxHQUd2Q293RCxLQUNTMWhELEVBQUFqUSxFQUFBLEVBQUE4RixFQUFBc0QsRUFBQSxHQUFBdEQsRUFBQTlGLEdBQUE4RixFQUFBOUYsR0FBQThGLEVBQUFtSyxFQUFBLEdBQUFuSyxJQUFBOUYsSUFBQUEsRUFDUDJ4RCxFQUFNbHBELE1BQU14RixPQUFTLEdBQUlndEIsUUFBT3JiLEVBQUt0USxLQUFLMkwsR0FBR3dRLE1DcUQvQyxPRG5EQXV6QyxJQUFBLE9BQUFqdUQsRUFBQTZPLEVBQUF0USxLQUFBOEUsS0FBQSxPQUFBMjZCLEVBQUFoK0IsRUFBQTBhLE1BQUEsT0FBQXVqQixFQUFBRCxFQUFBdVYsYUFBQXRWLEVBQTREemlDLE9BQUEsU0FBVSxFQVd0RW1yRCxFQUFXLEdBQUk5RCxXQUFTcHlDLElBQVE4MEMsSUFDaENvQixFQUFTemtELE9BQ1B4QixRQUFTLFdBRVAsR0FBQXNrRCxHQUFBenFDLENDa0RBLE9EbERBeXFDLEdBQWF4ckQsVUFBVXNNLEtBQUsyL0MsZUFBZSxrQkFBbUIsY0FFOURULEVBQVdPLEdBQWMvbkQsRUFBRXduRCxFQUFXTyxJQUFhdkwsUUFBUXdNLEdBRTNEaHRELFVBQVVzTSxLQUFLMi9DLGVBQWUsa0JBQW1CLGFBQWNULEdBRS9EMkIsRUFBU2hsRCxtQkFDVDRZLEVBQU8sR0FBSTh3QyxrQkFDVDRDLHNCQUF3QkEsRUFDeEJ0SCxTQUFVQSxFQUNWSCxPQUFVQSxFQUNWbmpELE1BQVVBLEVBQ1Z1b0QsTUFBVUEsSUFDWnJvRCxHQUFHZ1QsS0FBS2dFLGdCQ2dEMUJzaEUsRUFBTzNnRixVRDFDUGd6QixNQUFPLFNBQUM3eEIsR0MyQ04sTUQxQ0E3QyxXQUFVc00sS0FBS3NtQixRQUNibGMsUUFBUyxXQzJDUCxNRDFDQXhSLEdBQUV1USxNQUFNc3ZFLFFBQ043OUUsUUFBUyxTQUFBQyxHQzJDUCxNRDNDTyxVQUFDNjlFLEdBQ1IsR0FBQTE2RCxHQUFBdkosQ0NrREUsT0RsREZ1SixHQUFTMDZELEVBQVVscUQsT0FBTyxTQUFDbXFELEdDNkN2QixNRDdDa0UsS0FBOUJBLEVBQVNwakYsUUFBUSxZQUN6RGtmLEVBQU8sR0FBSXVoQyxZQUNUaDRCLE9BQVNBLElBQ1h2Z0IsR0FBR2dULEtBQUtnRSxLQUpEMWYsWUMyRGpCZ2hGLEVBQU8zZ0YsVURyRFA0aUYsVUFBVyxTQUFDemhGLEdBQ1YsR0FBQXFpRixHQUFBbmtFLENDa0VBLE9EbEVBbGUsR0FBQSxNQUFBQSxFQUFVQSxFQUFTeVgsTUFBTSxNQUFmLE9BQ1YvTSxRQUFRQyxJQUFJLFlBQWMzSyxHQUUxQnFpRixHQUNFemdFLFdBQVksTUFDWmk5QixRQUFTLGNBR1gxOUMsRUFBRXVGLEtBQUsxRyxFQUFTLFNBQUNrYyxFQUFPbFYsR0FDdEIsS0FBT0EsRUFBUSxHQ3FEYixNRHBEQXE3RSxHQUFrQm5tRSxHQUFVbGMsRUFBUWdILEVBQU0sS0FFOUNrWCxFQUFPLEdBQUk4L0IsZUFBZXFrQyxHQUUxQm43RSxHQUFHZ1QsS0FBS2dFLElDdURWc2hFLEVBQU8zZ0YsVURyRFB3eEIsUUFBUyxXQUVQLE9BQUlyc0IsT0FBT2dFLE9BQU9rTCxTQUFTaUYsTUFBTW5aLFFBQVEsa0JBQ3ZDN0IsVUFBVW9XLE9BQU9DLFNBQVMsVUFBVSxHQUVwQ3JXLFVBQVVvVyxPQUFPQyxTQUFTLGVBQWUsSUN3RDdDZ3NFLEVBQU8zZ0YsVURyRFA0b0IsT0FBUSxXQ3NETixNRHJEQXRxQixXQUFVc00sS0FBS3NtQixRQUNibWlELGdCQUFpQixXQUNmLEdBQUFoMEQsRUN1REEsT0R2REFBLEdBQU8sR0FBSWs1RCxZQUNYbHdFLEdBQUdnVCxLQUFLZ0UsT0MyRGRzaEUsRUFBTzNnRixVRHREUGlwQixVQUFXLFdDdURULE1EdERBM3FCLFdBQVVzTSxLQUFLc21CLFFBQ2JtaUQsZ0JBQWlCLFdBQ2YsR0FBQXBxRCxFQ3dEQSxPRHhEQUEsR0FBWSxHQUFJZ25DLFdBQ2hCaG5DLEVBQVVqaUIsT0FDUnhCLFFBQVMsU0FBQ2tCLEdBQ1IsR0FBQTJZLEVDMkRBLE9EM0RBQSxHQUFPLEdBQUl3cEQsZ0JBQ1Q1L0MsVUFBY3ZpQixJQUNoQjJCLEdBQUdnVCxLQUFLZ0UsVUNnRWxCc2hFLEVBQU8zZ0YsVUQ5RFBncEIsV0FBWSxTQUFDaUMsR0MrRFgsTUQ5REEzc0IsV0FBVXNNLEtBQUtzbUIsUUFDYm1pRCxnQkFBaUIsV0FDZixHQUFBcnFELEVDa0VBLE9EbEVBQSxHQUFhLEdBQUlnQyxhQUFXelYsSUFBUTBWLElBQ3BDakMsRUFBV2hpQixPQUNUeEIsUUFBUyxXQUNQLEdBQUFrWixFQ21FQSxPRG5FQUEsR0FBYyxHQUFJbk0sVUFDbEJtTSxFQUFZMVgsT0FDVnhCLFFBQVMsV0FDUCxHQUFBaStFLEdBQUF0bEUsQ0N1RUEsT0R2RUFBLEdBQVcsR0FBSTVMLFVBQVNtTSxFQUFZbkgsT0FBTTBULGFBQWlCQSxLQUMzRHc0RCxFQUFlLEdBQUlqeEUsV0FDbkJpeEUsRUFBYXo4RSxPQUNYeEIsUUFBUyxXQUNQLEdBQUFpYixHQUFBcEIsQ0NrRkEsT0RsRkFvQixNQUNBdEMsRUFBU3RXLEtBQUssU0FBQ29aLEdDdUViLE1EdkV5QlIsR0FBWUEsRUFBVTRDLE9BQU9vZ0UsRUFBYWxzRSxPQUFNOEosVUFBY0osRUFBUXRmLFFBQ2pHOGUsRUFBWSxHQUFJak8sV0FBVWlPLEdBQzFCcEIsRUFBTyxHQUFJZ25ELGlCQUNUcjlDLFdBQWVBLEVBQ2Y3SyxTQUFlQSxFQUNmc0MsVUFBZUEsSUFFakJwWSxHQUFHZ1QsS0FBS2dFLGdCQ3FGMUJzaEUsRUFBTzNnRixVRGxGUDBqRixlQUFnQixTQUFDejRELEdDbUZmLE1EbEZBM3NCLFdBQVVzTSxLQUFLc21CLFFBQ2JtaUQsZ0JBQWlCLFdBQ2YsR0FBQXJxRCxFQ3NGQSxPRHRGQUEsR0FBYSxHQUFJZ0MsYUFBV3pWLElBQVEwVixJQUNwQ2pDLEVBQVdoaUIsT0FDVHhCLFFBQVMsV0FDUCxHQUFBa1osRUN1RkEsT0R2RkFBLEdBQWMsR0FBSW5NLFVBQ2xCbU0sRUFBWTFYLE9BQ1Z4QixRQUFTLFdBQ1AsR0FBQW0rRSxHQUFBdmdCLEVBQUFuaUQsRUFBQTlDLEVBQUFrQixDQ3lHQSxPRHpHQWxCLEdBQVdPLEVBQVluSCxPQUFNMFQsYUFBaUJBLElBQzlDMDRELEVBQUEsV0MwRkUsR0FBSTVrRixHQUFHdUksRUFBS3FZLENBRVosS0Q1RlVBLEtBQUE1Z0IsRUFBQSxFQUFBdUksRUFBQTZXLEVBQUE3ZCxPQUFBdkIsRUFBQXVJLEVBQUF2SSxJQzZGUmtpQixFQUFVOUMsRUFBU3BmLEdBQ25CNGdCLEVBQVNuWSxLRDlGRHlaLEVBQVE1ZSxJQUFJLFFDZ0d0QixPQUFPc2QsTUQvRlR5akQsRUFBWW4vRCxLQUFLQyxJQUFJN0UsTUFBTTRFLEtBQU0wL0UsR0FDakN0a0UsRUFBTyxHQUFJZ25ELGlCQUNUcjlDLFdBQWVBLEVBQ2Y3SyxTQUFhQSxFQUNiL0UsTUFBVWdxRCxJQUNaLzZELEdBQUdnVCxLQUFLZ0UsYUMyR3RCc2hFLEVBQU8zZ0YsVUR4R1AraEYsaUJBQWtCLFdDeUdoQixNRHhHQXpqRixXQUFVc00sS0FBS3NtQixRQUNibWlELGdCQUFpQixXQUNmLEdBQUFoMEQsRUM0R0EsT0Q1R0FBLEdBQU8sR0FBSW9SLHVCQUNUVSxLQUFPLGVBQ1Q5b0IsR0FBR2dULEtBQUtnRSxPQytHZHNoRSxFQUFPM2dGLFVEN0dQMDFELE1BQU8sV0M4R0wsTUQ3R0FwM0QsV0FBVXNNLEtBQUtzbUIsUUFDYm1pRCxnQkFBaUIsV0FDZixHQUFBdVEsRUMrR0EsT0QvR0FBLEdBQWEsR0FBSTFyQixTQUNqQjByQixFQUFXNThFLE9BQ1R4QixRQUFTLFNBQUVxK0UsR0FDVCxHQUFBNTVELEVDZ0hBLE9EaEhBQSxHQUFXLEdBQUl3L0MsVUFDZngvQyxFQUFTampCLE9BQ1B4QixRQUFTLFdBQ1AsR0FBQXMrRSxFQ2lIQSxPRGpIQUEsR0FBZSxHQUFJN3pCLFdBQ25CNnpCLEVBQWE5OEUsT0FDWHhCLFFBQVMsU0FBRXUrRSxHQUNULEdBQUExa0UsRUMySEEsT0QzSE8vZ0IsV0FBVXNNLEtBQUtvSyxZQUNwQjZ1RSxFQUFrQixHQUFJM3JCLFNBQVEyckIsRUFBZ0J0c0UsT0FBTXEvQyxVQUFjdDRELFVBQVVzTSxLQUFLdkksSUFBSSxpQkFDdkZnZCxFQUFPLEdBQUkrSyxjQUNUSixRQUFZNjVELEVBQ1o1NkQsVUFBWTg2RCxFQUNaOTVELFNBQVlBLElBQ2Q1aEIsR0FBR2dULEtBQUtnRSxnQkNnSTFCc2hFLEVBQU8zZ0YsVUQ5SFBna0YsVUFBVyxTQUFDcmlGLEdDK0hWLE1EOUhBckQsV0FBVXNNLEtBQUtzbUIsUUFDYm1pRCxnQkFBaUIsV0FDZixHQUFBM2QsRUNrSUEsT0RsSUFBLEdBQVEsR0FBSWhCLFFBQU1uL0MsSUFBTTVULElBQ3hCK3pELEVBQU0xdUQsT0FDSnhCLFFBQVMsU0FBRWxFLEdBQ1QsR0FBQTJvQixFQ21JQSxPRG5JQUEsR0FBVyxHQUFJdy9DLFVBQ2Z4L0MsRUFBU2pqQixPQUNQeEIsUUFBUyxXQUNQLEdBQUFvdkQsRUNvSUEsT0RwSUFBLEdBQWMsR0FBSUUsVUFDbEJGLEVBQVk1dEQsT0FDVnhCLFFBQVMsU0FBQ292RCxHQUNSLEdBQUFxdkIsR0FBQTVrRSxDQzZJQSxPRDdJQTRrRSxHQUFnQixHQUFJbnZCLFVBQVNGLEVBQVlyOUMsT0FBT3M5QyxRQUFVbHpELEtBQzFEMGQsRUFBTyxHQUFJeTJDLGdCQUNUSixNQUFjcDBELEVBQ2QwekQsU0FBY2l2QixFQUNkcnZCLFlBQWNBLEVBQ2QzcUMsU0FBY0EsSUFDaEI1aEIsR0FBR2dULEtBQUtnRSxnQkNrSjFCc2hFLEVBQU8zZ0YsVURoSlBra0YsWUFBYSxTQUFDcnZCLEVBQVNuQixHQ29KckIsTUFIWSxPQUFSQSxJRGpKaUJBLEVBQUssTUFDMUJwMUQsVUFBVXNNLEtBQUtzbUIsUUFDYm1pRCxnQkFBaUIsV0FDZixHQUFBM2QsRUN1SkEsT0R2SkFBLEdBQVEsR0FBSWhCLFFBQU1uL0MsSUFBUXMvQyxJQUMxQmEsRUFBTTF1RCxPQUNKeEIsUUFBUyxXQUNQLEdBQUF3akIsRUMwSkEsT0QxSkFBLEdBQWEsR0FBSWdDLGFBQVd6VixJQUFRbWdELEVBQU1yekQsSUFBSSxrQkFDOUMybUIsRUFBV2hpQixPQUNUeEIsUUFBUyxXQUNQLEdBQUFvdkQsRUMySkEsT0QzSkFBLEdBQWMsR0FBSUUsVUFDbEJGLEVBQVk1dEQsT0FDVnhCLFFBQVMsU0FBQ2tCLEdBQ1IsR0FBQWl1RCxHQUFBSyxDQytKQSxPRC9KQUEsR0FBVyxHQUFJRixVQUFXcHVELEVBQVc2USxPQUFPczlDLFFBQVlBLEtBRXhERixFQUFhLEdBQUkrSSxjQUNqQi9JLEVBQVczdEQsT0FDVHhCLFFBQVMsU0FBQ2tCLEdBQ1IsR0FBQWdZLEdBQUE5VyxDQ2lLQSxPRGpLQUEsR0FBVSxHQUFJODFELGNBQWVoM0QsRUFBVzZRLE9BQU9zOUMsUUFBWUEsS0FFM0RuMkMsRUFBYyxHQUFJbk0sVUFDbEJtTSxFQUFZMVgsT0FDVnhCLFFBQVMsU0FBQ2tCLEdBQ1IsR0FBQXlYLEdBQUFrQixDQzBLQSxPRDFLQWxCLEdBQVcsR0FBSTVMLFVBQVc3TCxFQUFXNlEsT0FBTzBULGFBQWlCeXFDLEVBQU1yekQsSUFBSSxtQkFDdkVnZCxFQUFPLEdBQUl1OEMsa0JBQ1RsSSxLQUFlQSxFQUNmdjFDLFNBQWVBLEVBQ2Z2VyxRQUFlQSxFQUNmb3RELFNBQWVBLEVBQ2Zoc0MsV0FBZUEsRUFDZjBzQyxNQUFlQSxJQUNqQnJ0RCxHQUFHZ1QsS0FBS2dFLHNCQ2lMbENzaEUsRUFBTzNnRixVRDlLUG1rRixlQUFnQixTQUFDbGxDLEVBQVc1OUIsR0MrSzFCLE1EOUtBL2lCLFdBQVVzTSxLQUFLc21CLFFBQ2JtaUQsZ0JBQWlCLFdBQ2YsR0FBQXpmLEVDa0xBLE9EbExBQSxHQUFVLEdBQUlDLFVBQVF0K0MsSUFBUTBwQyxJQUM5QjJVLEVBQVE1c0QsT0FDTnhCLFFBQVMsV0FDUCxHQUFBeWIsRUNxTEEsT0RyTEFBLEdBQVUsR0FBSUUsVUFBUTVMLElBQVE4TCxJQUM5QkosRUFBUWphLE9BQ054QixRQUFTLFdDcUxQLE1EcExBbEgsV0FBVTZXLElBQUlrSyxLQUFRL2dCLFVBQVVtakIsV0FBVyw0QkFDekM1aEIsS0FBT28vQyxFQUFVNTlCLEdBQ2pCN2IsUUFBUyxTQUFBQyxHQ3FMUCxNRHJMTyxVQUFDeUIsR0FDUixHQUFBeXRELEVDdUxFLE9EdkxGQSxHQUFhLEdBQUkrSSxjQUNqQi9JLEVBQVczdEQsT0FDVHhCLFFBQVMsU0FBQ2tCLEdBQ1IsR0FBQWtCLEdBQUF5WCxDQ21NRSxPRG5NRnpYLEdBQVVsQixFQUFXNlEsT0FDbkI4SixVQUFjQSxFQUNkNDlCLFVBQWNBLEVBQ2Q0VixRQUFjakIsRUFBUXZ4RCxJQUFJLGFBQzVCZ2QsRUFBTyxHQUFJMDdDLHlCQUNUcEcsV0FBZUEsRUFDZi9zRCxRQUFhQSxFQUNicVosUUFBYUEsRUFDYjJ5QyxRQUFhQSxFQUNiN3pCLFNBQWE3NEIsRUFBUzdELEtBQUsvQyxTQUM3QitILEdBQUdnVCxLQUFLZ0UsUUFkTDFmLGtCQ3FOekJnaEYsRUFBTzNnRixVRHJNUG9rRixXQUFZLFNBQUNubEMsRUFBVzU5QixHQ3NNdEIsTURyTUEvaUIsV0FBVXNNLEtBQUtzbUIsUUFDYm1pRCxnQkFBaUIsV0FDZixHQUFBcHlELEVDeU1BLE9Eek1BQSxHQUFVLEdBQUlFLFVBQVE1TCxJQUFROEwsSUFDOUJKLEVBQVFqYSxPQUNOeEIsUUFBUyxXQUNQLEdBQUE2K0UsR0FBQXp3QixDQWlDQSxPQWpDQUEsR0FBVSxHQUFJQyxVQUFRdCtDLElBQVEwcEMsSUFHOUJvbEMsRUFBaUIsU0FBQ3p3QixFQUFTM3lDLEdDME16QixNRHpNQTJ5QyxHQUFRNXNELE9BQ054QixRQUFTLFdBR1AsR0FBQTgrRSxHQUFBN2pFLENBU0EsT0FUQTZqRSxHQUFZLFNBQUMxd0IsRUFBUzN5QyxFQUFTRixFQUFlK3lDLEdBQzVDLEdBQUF6MEMsRUNxTkEsT0FaZ0IsT0FBWjBCLElEMU15QkEsRUFBUyxNQzZNbEIsTUFBaEIreUMsSUQ3TXdDQSxNQUM1Q3owQyxFQUFPLEdBQUlzMEMsc0JBQ1RDLFFBQWlCQSxFQUNqQjN5QyxRQUFpQkEsRUFDakJSLFVBQWlCQSxFQUNqQnF6QyxhQUFpQkEsSUFDbkJ6ckQsR0FBR2dULEtBQUtnRSxJQUVWb0IsRUFBWSxLQUNtQixXQUE1QlEsRUFBUTVlLElBQUksYUFDYi9ELFVBQVU2VyxJQUFJa0ssS0FBUS9nQixVQUFVbWpCLFdBQVcsNEJBQ3pDNWhCLEtBQU9vL0MsRUFBVWgrQixFQUFRNWUsSUFBSSxlQUM3Qm1ELFFBQVMsU0FBQUMsR0NpTlAsTURqTk8sVUFBQ3lCLEdBQ1IsR0FBQTRzRCxHQUFBanZELENDc05FLE9EdE5rQixLQUFqQnFDLEVBQVM3RCxPQUNWeXdELEVBQWUsR0FBSUMsYUFBSixPQUFBbHZELEVBQUF2QyxFQUFBdXRDLEtBQUEzb0MsRUFBQTdELE9BQUF3QixFQUF1QzFDLE1BQUEsU0FDeERzZSxFQUFZLEdBQUlqTyxXQUNoQmlPLEVBQVV6WixPQUNSbkgsSUFBSyxJQUFNb2hCLEVBQVE1ZSxJQUFJLGdCQUN2Qm1ELFFBQVMsV0N1TkwsTUR0TkZpYixHQUFZLEdBQUlqTyxXQUFVaU8sRUFBVWxKLE9BQU84SixVQUFZQSxLQUN2RGlqRSxFQUFVMXdCLEVBQVMzeUMsRUFBU1IsRUFBV3F6QyxRQVJwQ24wRCxRQVVYMmtGLEVBQVUxd0IsRUFBUzN5QyxPQUdYLFNBQWJnK0IsRUFDRDJVLEVBQVE1c0QsT0FDTnhCLFFBQVMsV0M2TlAsTUQ3TlU2K0UsR0FBZ0J6d0IsRUFBUzN5QyxJQUNyQ3RiLE1BQU8sV0MrTkwsTUQ5TkFpdUQsR0FBUXJ1RCxLQUFLLE1BQ1hDLFFBQVMsV0MrTlAsTUQvTlU2K0UsR0FBZ0J6d0IsRUFBUzN5QyxTQUUzQzJ5QyxFQUFRNXNELE9BQ054QixRQUFTLFdDb09QLE1Ebk9BNitFLEdBQWV6d0IsRUFBUzN5QyxhQzZPeEMwL0QsRUFBTzNnRixVRDNPUDZxRSxTQUFVLFdDNE9SLE1EM09BdnNFLFdBQVVzTSxLQUFLc21CLFFBQ2JraUQsZUFBZ0IsV0FDZCxHQUFBL3pELEVDK09BLE9EL09BQSxHQUFPLEdBQUlxckQsc0JBQ1Q5L0QsS0FBTyxHQUFJd25FLFFBQ2IvcEUsR0FBR2dULEtBQUtnRSxJQUNWZzBELGdCQUFpQixXQytPZixNRDlPQS8wRSxXQUFVb1csT0FBTzhjLGNDbVB2Qm12RCxFQUFPM2dGLFVEalBQdWtGLFlBQWEsU0FBRXRsQyxHQ2tQYixNRGpQQTNnRCxXQUFVc00sS0FBS3NtQixRQUNibWlELGdCQUFpQixXQUNmLEdBQUF6ZixFQ3FQQSxPRHJQQUEsR0FBVSxHQUFJQyxVQUFRdCtDLElBQU0wcEMsSUFDNUIyVSxFQUFRNXNELE9BQ054QixRQUFTLFNBQUNsRSxHQUNSLEdBQUFzaUYsRUNzUEEsT0R0UEFBLEdBQWEsR0FBSTFyQixTQUNqQjByQixFQUFXNThFLE9BQ1R4QixRQUFTLFNBQUVxK0UsR0FDVCxHQUFBeGtFLEVDMFBBLE9EMVBBQSxHQUFPLEdBQUlrc0Qsa0JBQ1QzWCxRQUFVdHlELEVBQ1Ywb0IsUUFBVTY1RCxJQUNaeDdFLEdBQUdnVCxLQUFLZ0UsYUNnUXRCc2hFLEVBQU8zZ0YsVUR4UFBxMkIsVUFBVyxTQUFFM1YsR0N5UFgsTUR4UEFwaUIsV0FBVXNNLEtBQUtzbUIsUUFDYmxjLFFBQVMsV0FDUCxHQUFBK04sRUM0UEEsT0Q1UEFBLEdBQWEsR0FBSXJGLGFBQVduSSxJQUFRbUwsSUFDcENxQyxFQUFXL2IsT0FDVHhCLFFBQVMsV0FDUCxHQUFBaWIsRUM2UEEsT0Q3UEFBLEdBQVksR0FBSWpPLFdBQ2hCaU8sRUFBVXpaLE9BQ1JuSCxJQUFLLElBQU02Z0IsRUFDWGxiLFFBQVMsV0FDUCxHQUFBZy9FLEdBQUFuakUsQ0FBQW1qRSxHQUF1Qi9qRSxFQUFVL1csUUFBUSxZQUN6QyxLQUFBMlgsSUFBQW1qRSxHQzhQRS9qRSxFQUFZK2pFLEVBQXFCbmpFLEdEN1BqQzBCLEVBQVc1RSxTQUFTOWIsSUFBSWdmLEdBQVdaLFVBQVksR0FBSWpPLFdBQVVpTyxFQ2dRL0QsT0QvUEFwWSxJQUFHZ1QsS0FBSyxHQUFJc2EsMEJBQXdCNVMsV0FBWUEsZUMwUTlENDlELEVBQU8zZ0YsVUR0UVAybkIsS0FBTSxTQUFFakgsR0N1UU4sTUR0UUFwaUIsV0FBVXNNLEtBQUtzbUIsUUFDYmxjLFFBQVMsV0FDUCxHQUFBK04sRUMwUUEsT0QxUUFBLEdBQWEsR0FBSXJGLGFBQVduSSxJQUFRbUwsSUFDcENxQyxFQUFXL2IsT0FDVHhCLFFBQVMsV0MwUVAsTUR6UUE2QyxJQUFHZ1QsS0FBSyxHQUFJNFgscUJBQW1CbFEsV0FBY0EsWUNrUnZENDlELEVBQU8zZ0YsVUFBVSxVRGhSVCxXQ2lSTixNRGhSQTFCLFdBQVVzTSxLQUFLc21CLFFBQ2JtaUQsZ0JBQWlCLFdBQ2YsR0FBQWgwRCxFQ29SQSxPRHBSQUEsR0FBTyxHQUFJb1IsdUJBQ1RVLEtBQU0sZUFDUjlvQixHQUFHZ1QsS0FBS2dFLE9DdVJkc2hFLEVBQU8zZ0YsVURwUlB5aUIsWUFBYSxXQ3FSWCxNRHBSQW5rQixXQUFVc00sS0FBS3NtQixRQUNibWlELGdCQUFpQixXQUNmLEdBQUEzb0QsRUNxUkEsUURyUkNBLEVBQVksR0FBSW85QixZQUFXOWdELE9BQzFCeEIsUUFBUyxXQUVQLEdBQUE2TSxHQUFBc1ksQ0NvU0EsT0RwU0dELEdBQVVwcUIsT0FBUyxHQUE0QyxXQUF2Q2hDLFVBQVVtRSxTQUFTSixJQUFJLGFBRWhEc29CLEVBQVksR0FBSTBoQyxXQUFVMWhDLEdBQzFCQSxFQUFVM2pCLE9BQ1J4QixRQUFTLFdBQ1AsR0FBQTZaLEVDeVJBLE9EelJBQSxHQUFPLEdBQUlvTCxtQkFDVEMsVUFBWUEsRUFDWkMsVUFBWUEsSUFDZHRpQixHQUFHZ1QsS0FBS2dFLE9BRWRoTixHQUNFLFVBQ0EsV0FDQSxZQUNBLGNBQ0EsYUFJRkEsRUFBWTdLLEtBQUssU0FFakIxSSxNQUFNZ1UsaUJBQ0pULFlBQWFBLEVBQ2JhLFNBQVUsU0FBQy9SLEdDc1JULE1EcFJBd3BCLEdBQVl4cEIsRUFBUXVwQixVQUFVOW1CLE9BQU91WSxJQUFJLFNBQUNwVSxHQytReEMsTUQvUThDLElBQUlrbEUsV0FBUzEzRCxJQUFXeE4sRUFBRXBHLEdBQUcsZ0JBQzdFZ3BCLEVBQVksR0FBSTBoQyxXQUFVMWhDLEdBQzFCQSxFQUFVM2pCLE9BQ1J4QixRQUFTLFdBQ1AsR0FBQTZaLEVBRUEsT0FGQWxlLEdBQVF3cEIsVUFBWUEsRUFDcEJ4cEIsRUFBUW9wQixNQUFRcHBCLEVBQVFzakYsYUFBZXRqRixFQUFRb3BCLE1BQzNDanNCLFVBQVVzTSxLQUFLb0ssV0FBYTFXLFVBQVVtRSxTQUFTSixJQUFJLG9CQUFvQixFQU16RWdHLEdBQUdnVCxLQUFLLEdBQUltTCxxQkFBb0JybEIsS0FMaENrZSxFQUFPLEdBQUlvMUMsd0JBQXVCdHpELEdBQ2xDa0gsR0FBR2dULEtBQUtnRSxHQUVSN2IsRUFBRSxZQUFZVyxLQUFLa2IsRUFBSzVDLGtCQ2dTNUNra0UsRUFBTzNnRixVRDNSUDBrRixPQUFRLFNBQUMvaUYsR0M2UlAsTUQ1UkFBLEdBQUs3QyxNQUFNc1ksU0FBU3pWLEdBQ3BCckQsVUFBVXNNLEtBQUtzbUIsUUFDYmxjLFFBQVMsV0FDUCxHQUFBK04sRUMrUkEsT0QvUkFBLEdBQWEsR0FBSXJGLGFBQ2ZuSSxJQUFLNVQsSUFDUG9oQixFQUFXNGhFLFlBQ1RuL0UsUUFBVSxTQUFFbEUsR0FDVixHQUFBK2QsRUNpU0EsT0RqU0FBLEdBQU8sR0FBSTZMLHFCQUFtQjVwQixNQUFPQSxJQUNyQytHLEdBQUdnVCxLQUFLZ0UsT0FDZGkwRCxPQUFRLFdDb1NOLE1EblNBaDFFLFdBQVVvVyxPQUFPOGMsY0N3U3ZCbXZELEVBQU8zZ0YsVURyU1BtNkIsS0FBTSxTQUFDeDRCLEdDc1NMLE1EclNBckQsV0FBVXNNLEtBQUtzbUIsUUFDYmxjLFFBQVMsV0FDUCxHQUFBK04sRUN5U0EsT0R6U0FBLEdBQWEsR0FBSXJGLGFBQ2ZuSSxJQUFRNVQsSUFDVm9oQixFQUFXL2IsT0FDVHhCLFFBQVUsU0FBRWxFLEdBQ1YsR0FBQStkLEVDMlNBLE9EM1NBQSxHQUFPLEdBQUk2TCxxQkFBbUI1cEIsTUFBT0EsSUFDckMrRyxHQUFHZ1QsS0FBS2dFLE9BQ2RpMEQsT0FBUSxXQzhTTixNRDdTQWgxRSxXQUFVb1csT0FBTzhjLGNDa1R2Qm12RCxFQUFPM2dGLFVEaFRQdXZDLFFBQVMsU0FBQ2h1QyxHQ2lUUixNRGhUQWpELFdBQVVvVyxPQUFPQyxTQUFTLE9BQU9wVCxHQUFRLElDbVQzQ28vRSxFQUFPM2dGLFVEaFRQbzZELElBQUssU0FBQ3o0RCxHQ2lUSixNRGhUQXJELFdBQVVzTSxLQUFLc21CLFFBQ2JtaUQsZ0JBQWlCLFdBQ2YsR0FBQXgwRCxHQUFBek0sQ0NtVEEsT0RuVEF5TSxHQUFPdlUsS0FBS0MsVUFBVTVJLEVBQUd5YyxVQUFXLElBQ3BDaE0sRUFBTTlULFVBQVVtRSxTQUFTK1EsUUFBUSxRQUFTLFVBQzFDaFEsRUFBRStQLE1BQ0FuQixJQUFLQSxFQUNMblEsS0FBTSxNQUNOd1IsU0FBVSxPQUNWRSxNQUFNOVQsSUFBS2dmLEdBQ1hsWixNQUFPLFNBQUFGLEdDb1RMLE1EcFRLLFVBQUNzQyxFQUFHQyxHQ3FUUCxNRHJUYXZDLEdBQUMrVyxRQUFRLFNBQVUsZUFBbUJ6VSxFQUFFLElBQUdDLEtBQXJEckksTUFDUDZGLFFBQVMsU0FBQUMsR0N3VFAsTUR4VE8sVUFBQ2tPLEdBQ1IsR0FBQTJMLEdBQUF6TCxFQUFBOVUsRUFBQWl5QixFQUFBMXBCLEVBQUF6QyxDQUNBLEtBREFnUCxHQUFXLGlCQUNYaFAsRUFBQThPLEVBQUF0USxLQUFBdEUsRUFBQSxFQUFBdUksRUFBQXpDLEVBQUF2RSxPQUFBdkIsRUFBQXVJLEVBQUF2SSxJQzJUSXVnQixFQUFRemEsRUFBSTlGLEdEMVRkOFUsRUFBUXJNLEtBQUs4WCxFQUFNM2QsR0M4VG5CLE9EN1RGcXZCLEdBQVUxdUIsRUFBRWlkLEtBQUsxTCxHQUNqQnZWLFVBQVU2VyxJQUFJQyxTQUNaeEIsS0FBT29kLEVBQ1B1b0IsY0FBYSxFQUNiL3pDLFFBQVMsU0FBQzBCLEdBQ1IsR0FBQXVZLEdBQUFwWSxFQUFBeUYsRUFBQWhJLEVBQUF3USxFQUFBK0osQ0FDQSxLQURBSSxLQUNBM2EsRUFBQW9DLEVBQUE3RCxLQUFBZ0UsRUFBQSxFQUFBeUYsRUFBQWhJLEVBQUF4RSxPQUFBK0csRUFBQXlGLEVBQUF6RixJQytUSWlPLEVBQU14USxFQUFLdUMsR0Q5VGJvWSxFQUFLalksS0FBSzhOLEVBQUlrSyxJQ29VZCxPRGpVRkgsR0FBTyxHQUFJNlksZ0JBQWM1MkIsTUFBT21lLElBQ2hDcFgsR0FBR2dULEtBQUtnRSxRQWZMMWYsWUN5VmpCZ2hGLEVBQU8zZ0YsVUR4VVBpbEIsTUFBTyxTQUFFdkUsRUFBY3dFLEdDeVVyQixNRHhVQTVtQixXQUFVc00sS0FBS3NtQixRQUNibWlELGdCQUFpQixXQUNmLEdBQUF0d0QsRUM0VUEsT0Q1VUFBLEdBQWEsR0FBSXJGLGFBQ2ZuSSxJQUFRbUwsSUFDVnFDLEVBQVcvYixPQUNUeEIsUUFBVSxTQUFFbEUsR0FDVixHQUFBK2QsRUMrVUEsT0QvVUFBLEdBQU8sR0FBSWk3RCxzQkFDVGg1RSxNQUFTQSxFQUNUNGpCLE9BQVNBLElBQ1g3YyxHQUFHZ1QsS0FBS2dFLFVDbVZsQnNoRSxFQUFPM2dGLFVEalZQZy9DLE9BQVEsU0FBQ3QrQixFQUFjay9CLEdDa1ZyQixNRGpWQXRoRCxXQUFVc00sS0FBS3NtQixRQUNibWlELGdCQUFpQixXQUNmLEdBQUF0d0QsRUNxVkEsT0RyVkFBLEdBQWEsR0FBSXJGLGFBQ2ZuSSxJQUFRbUwsSUFDVnFDLEVBQVcvYixPQUNUeEIsUUFBVSxTQUFFdWQsR0FDVixHQUFBL2dCLEVDdVZBLE9EdlZBQSxHQUFTLEdBQUlndEIsU0FDWHpaLElBQVFxcUMsSUFDVjU5QyxFQUFPZ0YsT0FDTHhCLFFBQVMsU0FBQ3hELEdBQ1IsR0FBQWpELEdBQUF1SSxFQUFBaUIsRUFBQTFELEVBQUFvYyxFQUFBNUIsQ0FTQSxLQVRBQSxFQUFPLEdBQUlnUCxvQkFDVC9zQixNQUFPeWhCLElBRU4vZ0IsRUFBT0ksSUFBSSxlQUVabUcsRUFBV3ZHLEVBQU9LLElBQUksYUFBYTlCLFFBRW5DOGUsRUFBSzlXLFNBQVdBLEdBRWxCMUQsRUFBQTdDLEVBQUFLLElBQUEsZUFBQXRELEVBQUEsRUFBQXVJLEVBQUF6QyxFQUFBdkUsT0FBQXZCLEVBQUF1SSxFQUFBdkksSUNzVkVraUIsRUFBVXBjLEVBQUk5RixHRHJWWCxNQUFBa2lCLEVBQUF0TixNQUFpQixNQUFBc04sRUFBQXROLEtBQUErMkIsZ0JBQ2xCcHNDLFVBQVVveEIsSUFBSUMsV0FBVzFPLEVBQVF0TixLQUFLKzJCLGVDaVcxQyxPRDlWQXJyQixHQUFLcmQsT0FBU0EsRUFHZHFkLEVBQUs3VyxhQUFhMkosTUFDbEJrTixFQUFLN1csYUFBYWhCLEtBQUssR0FBSTRuQixhQUN6Qjl0QixNQUFpQlUsRUFDakIrZ0IsV0FBaUJBLEVBQ2pCc00sZUFBaUJoUSxLQUNuQkEsRUFBS2xYLE1BQVFuRyxFQUFPSyxJQUFJLGVBQWUvQixPQUN2QytILEdBQUdnVCxLQUFLZ0UsYUM4VnRCc2hFLEVBQU8zZ0YsVUQxVlA0SCxRQUFTLFNBQUM4WSxHQzJWUixNRDFWQXBpQixXQUFVc00sS0FBS3NtQixRQUNibWlELGdCQUFpQixXQUNmLEdBQUF1UixHQUFBN2hFLENDcVhBLE9EclhBNmhFLEdBQWEsU0FBQzdoRSxFQUFpRHJDLEdBQzdELEdBQUFpMEMsRUNrV0EsT0FOa0IsT0FBZDV4QyxJRDdWUUEsRUFBYSxHQUFJckYsYUFBV25JLElBQU1tTCxLQUM5Q2kwQyxFQUFhLEdBQUlyYixTQUNqQnFiLEVBQVczdEQsT0FDVHV5QyxjQUFjLEVBQ2QxNUMsSUFBSyxJQUFNNmdCLEVBQ1hsYixRQUFTLFNBQUFDLEdDa1dQLE1EbFdPLFVBQUNtQyxHQUNSLEdBQUF5WCxFQ3VXRSxPRHZXRkEsR0FBTyxHQUFJMjZCLGNBQ1RqM0IsV0FBZUEsRUFDZm5iLFFBQWVBLEVBQVFoRSxTQUN6QnlFLEdBQUdnVCxLQUFLZ0UsS0FKRDFmLFNBTWJvakIsRUFBYSxHQUFJckYsYUFDZm5JLElBQVFtTCxJQUNWcUMsRUFBVy9iLE9BQ1R4QixRQUFXLFdDeVdULE1EeFdBby9FLEdBQVc3aEUsRUFBWXJDLElBQ3pCL2EsTUFBUyxXQzBXUCxNRHpXQWkvRSxHQUFXN2hFLEVBQVlyQyxVQ2dYakNpZ0UsRUFBTzNnRixVRDFXUDZrRixjQUFlLFNBQUNod0IsRUFBU25CLEdDNFd2QixNRDNXQUEsR0FBTzF2RCxTQUFTMHZELEdBQ2hCcDFELFVBQVVzTSxLQUFLc21CLFFBQ2JtaUQsZ0JBQWlCLFdBQ2IsR0FBQTMwRCxFQzRXRixPRDVXRUEsR0FBYyxHQUFJbk0sVUFDbEJtTSxFQUFZMVgsT0FDVnhCLFFBQVMsU0FBRWtCLEdBQ1QsR0FBQWl1RCxHQUFBeDJDLENDZ1hGLE9EaFhFQSxHQUFXLEdBQUk1TCxVQUFTN0wsRUFBVzZRLE9BQU1tOEMsS0FBU0EsS0FDbERpQixFQUFhLEdBQUkrSSxjQUNqQi9JLEVBQVczdEQsT0FDVHhCLFFBQVMsU0FBRW9DLEdBQ1QsR0FBQW90RCxFQ21YRixPRG5YRXB0RCxHQUFVLEdBQUk4MUQsY0FBYTkxRCxFQUFRMlAsT0FBTXM5QyxRQUFZQSxLQUNyREcsRUFBVyxHQUFJRixVQUNmRSxFQUFTaHVELE9BQ1B4QixRQUFTLFdBR1AsR0FBQXMvRSxHQUFBL2xGLEVBQUF1SSxFQUFBekMsRUFBQUMsRUFBQTlDLEVBQUEraUYsRUFBQUMsRUFBQTNsRSxDQUdBLEtBSEEyMUMsRUFBVyxHQUFJRixVQUFTRSxFQUFTejlDLE9BQU1zOUMsUUFBWUEsS0FDbkRtd0IsRUFBYWh3QixFQUFTbGhELE1BQU0sT0FDNUJpeEUsS0FDQWxnRixFQUFBK0MsRUFBQWhFLE9BQUE3RSxFQUFBLEVBQUF1SSxFQUFBekMsRUFBQXZFLE9BQUF2QixFQUFBdUksRUFBQXZJLElDb1hBaUQsRUFBUzZDLEVBQUk5RixHRG5YWCtGLEVBQTJDOUMsRUFBT0ssSUFBSSxhQUFYbEMsUUFBQUosS0FBMkJpbEYsRUFBM0JsZ0YsSUFBQSxHQUEzQ2lnRixFQUEyQnY5RSxLQUFLeEYsRUM4WHBDLE9EN1hFOGlGLEdBQWtCLEdBQUlwbkIsY0FBYXFuQixHQUVuQzFsRSxFQUFPLEdBQUl1L0Msb0JBQ1Q1SixTQUFhQSxFQUNiNzJDLFNBQWFBLEVBQ2J2VyxRQUFhazlFLElBQ2Z6OEUsR0FBR2dULEtBQUtnRSxnQkNrWTVCc2hFLEVBQU8zZ0YsVURoWVBpbEYsYUFBYyxTQUFDaG1DLEdDaVliLE1EaFlBM2dELFdBQVVzTSxLQUFLc21CLFFBQ2JtaUQsZ0JBQWlCLFdBQ2YsR0FBQXpmLEVDb1lBLE9EcFlBQSxHQUFVLEdBQUlDLFVBQVF0K0MsSUFBUTBwQyxJQUM5QjJVLEVBQVE1c0QsT0FDTnhCLFFBQVMsU0FBQ291RCxHQUNSLEdBQUE4QixHQUFBYixDQ3dZQSxPRHhZQUEsR0FBVWpCLEVBQVF2eEQsSUFBSSxXQUN0QnF6RCxFQUFRLEdBQUloQixRQUFNbi9DLElBQVFxK0MsRUFBUXZ4RCxJQUFJLGFBQ3RDcXpELEVBQU0xdUQsT0FDSnhCLFFBQVMsU0FBQ2t3RCxHQUNSLEdBQUFmLEVDd1lBLE9EeFlBQSxHQUFhLEdBQUkrSSxjQUNqQi9JLEVBQVczdEQsT0FDVHhCLFFBQVMsU0FBRWtCLEdBQ1QsR0FBQTNILEdBQUFzSSxFQUFBQyxFQUFBd0YsRUFBQWpJLEVBQUE3QyxFQUFBNEYsRUFBQXM5RSxFQUFBN2pFLEVBQUE4akUsQ0FHQSxLQUhBdjlFLEVBQVUsR0FBSTgxRCxjQUFhaDNELEVBQVc2USxPQUFNMG5DLFVBQWNBLEVBQVcyYixXQUFlLFVBQVcvRixRQUFZQSxLQUUzR3N3QixLQUNBdGdGLEVBQUErQyxFQUFBaEUsT0FBQTdFLEVBQUEsRUFBQXVJLEVBQUF6QyxFQUFBdkUsT0FBQXZCLEVBQUF1SSxFQUFBdkksSUM2WUVpRCxFQUFTNkMsRUFBSTlGLEdEN1lmb21GLEVBQWNuakYsRUFBT0ssSUFBSSxlQUFnQixDQUt6QyxLQUpBOGlGLEVBQWdCN2lGLEVBQUVzUixLQUFLdXhFLEdBR3ZCRCxFQUFvQixHQUFJM3lFLFVBQ3hCbEwsRUFBQSxFQUFBeUYsRUFBQXE0RSxFQUFBN2tGLE9BQUErRyxFQUFBeUYsRUFBQXpGLElDOFlFZ2EsRUFBWThqRSxFQUFjOTlFLEdEOVk1QjY5RSxFQUFrQnA5RSxJQUFJLEdBQUlxWixVQUFRNUwsSUFBUThMLElDbVoxQyxPRGxaQTZqRSxHQUFrQmwrRSxPQUNoQnhCLFFBQVMsV0FDUCxHQUFBNlosRUN5WkEsT0R6WkFBLEdBQU8sR0FBSWtpRCxtQkFDVDNOLFFBQWFBLEVBQ2Joc0QsUUFBYUEsRUFDYjh0RCxNQUFhQSxFQUNidjNDLFNBQWErbUUsSUFDZjc4RSxHQUFHZ1QsS0FBS2dFLG1CQ2lhOUJzaEUsRUFBTzNnRixVRC9aUG9sRixlQUFnQixTQUFDbm1DLEVBQVc0VixHQ2dhMUIsTUQvWkF2MkQsV0FBVXNNLEtBQUtzbUIsUUFDYm1pRCxnQkFBaUIsV0FHZixHQUFBdVIsR0FBQWh4QixFQUFBb0IsQ0ErQkEsT0EvQkE0dkIsR0FBYSxTQUFFaHhCLEVBQVNvQixHQUN0QixHQUFBVSxFQ2thQSxPRGxhQUEsR0FBUSxHQUFJaEIsUUFBTW4vQyxJQUFRcy9DLElBQzFCYSxFQUFNMXVELE9BQ0p4QixRQUFTLFNBQUNrd0QsR0FDUixHQUFBaDNDLEVDbWFBLE9EbmFBQSxHQUFjLEdBQUluTSxVQUNsQm1NLEVBQVkxWCxPQUNWeEIsUUFBUyxTQUFFa1osR0FDVCxHQUFBaTJDLEdBQUF4MkMsQ0N3YUEsT0R4YUFBLEdBQVcsR0FBSTVMLFVBQVNtTSxFQUFZbkgsT0FDbEMwVCxhQUFpQnlxQyxFQUFNcnpELElBQUksZ0JBQzNCdTRELFdBQWlCLGNBQ25CakcsRUFBYSxHQUFJK0ksY0FDakIvSSxFQUFXM3RELE9BQ1R4QixRQUFTLFNBQUVrQixHQUNULEdBQUEzSCxHQUFBdUksRUFBQXpDLEVBQUFDLEVBQUE5QyxFQUFBNEYsRUFBQW05RSxFQUFBQyxFQUFBM2xFLENBR0EsSUFIQXpYLEVBQVUsR0FBSTgxRCxjQUFhaDNELEVBQVc2USxPQUFNczlDLFFBQVlBLEVBQVMrRixXQUFlLGNBRWhGL3VELFFBQVFDLElBQUlrcEQsR0FDVCxNQUFBQSxFQUFILENBSUUsSUFGQWd3QixFQUFhaHdCLEVBQVNsaEQsTUFBTSxPQUM1Qml4RSxLQUNBbGdGLEVBQUErQyxFQUFBaEUsT0FBQTdFLEVBQUEsRUFBQXVJLEVBQUF6QyxFQUFBdkUsT0FBQXZCLEVBQUF1SSxFQUFBdkksSUN3YUVpRCxFQUFTNkMsRUFBSTlGLEdEdmFiK0YsRUFBMkM5QyxFQUFPSyxJQUFJLGFBQVhsQyxRQUFBSixLQUEyQmlsRixFQUEzQmxnRixJQUFBLEdBQTNDaWdGLEVBQTJCdjlFLEtBQUt4RixFQUNsQzRGLEdBQVUsR0FBSTgxRCxjQUFhcW5CLEdDbWI3QixNRGpiQTFsRSxHQUFPLEdBQUl5aUQsZUFDVDNqRCxTQUFhQSxFQUNieTFDLFFBQWFBLEVBQ2Joc0QsUUFBYUEsRUFDYjh0RCxNQUFhQSxJQUNmcnRELEdBQUdnVCxLQUFLZ0UsYUFFTixRQUFiNC9CLEdBQ0QyVSxFQUFVLEdBQUlDLFVBQVF0K0MsSUFBUTBwQyxJQUM5QjJVLEVBQVE1c0QsT0FDTnhCLFFBQVMsV0NxYlAsTURyYlVvL0UsR0FBV2h4QixRQUV6Qm9CLEVBQVcsR0FBSUYsVUFDZkUsRUFBU2h1RCxPQUNQeEIsUUFBUyxXQ3diUCxNRHhiVW8vRSxHQUFXLEtBQU01dkIsV0NnY3ZDMnJCLEVBQU8zZ0YsVUQzYlBxbEYsWUFBYSxTQUFDMWpGLEdDNGJaLE1EM2JBckQsV0FBVXNNLEtBQUtzbUIsUUFDYmxjLFFBQVMsV0FDUCxHQUFBaU0sRUNnY0EsT0RoY0F0ZixHQUFLN0MsTUFBTXNZLFNBQVN6VixHQUNwQnNmLEVBQVUsR0FBSUUsVUFBUTVMLElBQU01VCxJQUM1QnNmLEVBQVFqYSxPQUNOeEIsUUFBUyxTQUFDbEUsRUFBTzRGLEdBQ2YsR0FBQTZiLEVDa2NBLE9EbGNBQSxHQUFhLEdBQUlyRixhQUNmbkksSUFBUTBMLEVBQVE1ZSxJQUFJLGtCQUN0QjBnQixFQUFXL2IsT0FDVHhCLFFBQVMsV0FLUCxHQUFBMlksR0FBQW1uRSxDQ3djQSxPRHhjQUEsR0FBdUIsR0FBSS95RSxVQUMzQit5RSxFQUFxQnQrRSxPQUNuQm5ILElBQUssSUFBTWtqQixFQUFXcGhCLEdBQ3RCNkQsUUFBUyxXQzhiUCxNRDdiQXFHLFNBQVFDLElBQUksaURBQ2RuRyxNQUFPLFdDK2JMLE1EOWJBa0csU0FBUUMsSUFBSSxpREFDaEJxUyxFQUFXLEdBQUk1TCxVQUNmNEwsRUFBU25YLE9BQ1BuSCxJQUFLLElBQU1rakIsRUFBV3BoQixHQUN0QjZELFFBQVMsU0FBQUMsR0NpY1AsTURqY08sVUFBQ2lCLEdBQ1IsR0FBQTJZLEVDdWNFLE9EdmNGQSxHQUFPLEdBQUkyYixrQkFDVDE1QixNQUFhQSxFQUNiNmMsU0FBYUEsRUFDYjRFLFdBQWFBLElBQ2YxYSxHQUFHZ1QsS0FBS2dFLEtBTEQxZixlQU9yQjJ6RSxPQUFRLFdDMmNOLE1EMWNBaDFFLFdBQVVvVyxPQUFPOGMsY0MrY3ZCbXZELEVBQU8zZ0YsVUQ3Y1B1bEYsaUJBQWtCLFNBQUM1akYsR0FFakIsR0FBQTJpRixFQ3lkQSxPRHpkQUEsR0FBWSxTQUFDcmpFLEVBQVMrSCxFQUFZdkksR0FDaEMsR0FBQXBCLEVDc2RBLE9BUmlCLE9BQWJvQixJRC9jNEJBLEVBQVUsTUFDMUNwQixFQUFPLEdBQUlpL0MsdUJBQ1RoOUQsTUFBYTJmLEVBQ2IrSCxXQUFhQSxFQUNidkksVUFBYUEsSUFDZnBZLEdBQUdnVCxLQUFLZ0UsSUFFVi9nQixVQUFVc00sS0FBS3NtQixRQUNibGMsUUFBUyxXQUNQLEdBQUFpTSxFQ3VkQSxPRHZkQXRmLEdBQUs3QyxNQUFNc1ksU0FBU3pWLEdBQ3BCc2YsRUFBVSxHQUFJRSxVQUFRNUwsSUFBTTVULElBQzVCc2YsRUFBUWphLE9BQ054QixRQUFTLFdBQ1AsR0FBQXdqQixFQ3lkQSxPRHpkQUEsR0FBYSxHQUFJZ0MsYUFDZnpWLElBQVEwTCxFQUFRNWUsSUFBSSxrQkFDdEIybUIsRUFBV2hpQixPQUNUeEIsUUFBUyxXQUNQLEdBQUFpYixFQUFBLE9BQStCLFdBQTVCUSxFQUFRNWUsSUFBSSxjQUNib2UsRUFBWSxHQUFJak8sV0FDaEJpTyxFQUFVelosT0FDUm5ILElBQU1tcEIsRUFBV3JuQixHQUNqQjZELFFBQVMsV0M0ZFAsTUQzZEFpYixHQUFZLEdBQUlqTyxXQUFVaU8sRUFBVWxKLE9BQU04SixVQUFZSixFQUFRdGYsTUFDOUQyaUYsRUFBVXJqRSxFQUFTK0gsRUFBWXZJLE9BRW5DNmpFLEVBQVVyakUsRUFBUytILFVBQy9Cc3FELE9BQVEsV0NtZU4sTURsZUFoMUUsV0FBVW9XLE9BQU84YyxjQ3VldkJtdkQsRUFBTzNnRixVRGplUHdsRixhQUFjLFNBQUM3akYsR0NrZWIsTURqZUFyRCxXQUFVc00sS0FBS3NtQixRQUNibGMsUUFBUyxXQUNQLEdBQUErTCxFQ3NlQSxPRHRlQXBmLEdBQUs3QyxNQUFNc1ksU0FBU3pWLEdBQ3BCb2YsRUFBVyxHQUFJTyxXQUFTL0wsSUFBTTVULElBQzlCb2YsRUFBUy9aLE9BQ1B4QixRQUFTLFNBQUN1YixFQUFVN1osR0FDbEIsR0FBQTZiLEVDd2VBLE9EeGVBQSxHQUFhLEdBQUlyRixhQUNmbkksSUFBUXdMLEVBQVMxZSxJQUFJLGtCQUN2QjBnQixFQUFXL2IsT0FDVHhCLFFBQVMsV0FDUCxHQUFBeWIsRUMwZUEsT0QxZUFBLEdBQVUsR0FBSUUsVUFDWjVMLElBQVF3TCxFQUFTMWUsSUFBSSxlQUN2QjRlLEVBQVFqYSxPQUNOeEIsUUFBUyxXQUNQLEdBQUE2WixFQzhlQSxPRDllQUEsR0FBTyxHQUFJNmpDLG1CQUNUbmlDLFNBQWVBLEVBQ2ZFLFFBQWVBLEVBQ2Y4QixXQUFlQSxJQUNqQjFhLEdBQUdnVCxLQUFLZ0UsYUFDdEJpMEQsT0FBUSxXQ2tmTixNRGpmQWgxRSxXQUFVb1csT0FBTzhjLGNDc2Z2Qm12RCxFQUFPM2dGLFVEbmZQeWxGLGtCQUFtQixTQUFDOWpGLEdDb2ZsQixNRG5mQXJELFdBQVVzTSxLQUFLc21CLFFBQ2JsYyxRQUFTLFdBQ1AsR0FBQStMLEVDd2ZBLE9EeGZBcGYsR0FBSzdDLE1BQU1zWSxTQUFTelYsR0FDcEJvZixFQUFXLEdBQUlPLFdBQVMvTCxJQUFRNVQsSUFDaENvZixFQUFTL1osT0FDUHhCLFFBQVMsU0FBQ3ViLEVBQVU3WixHQUNsQixHQUFBOGhCLEVDMGZBLE9EMWZBQSxHQUFhLEdBQUlnQyxhQUNmelYsSUFBUXdMLEVBQVMxZSxJQUFJLGtCQUN2QjJtQixFQUFXaGlCLE9BQ1R4QixRQUFTLFdBQ1AsR0FBQXliLEVDNGZBLE9ENWZBQSxHQUFVLEdBQUlFLFVBQ1o1TCxJQUFRd0wsRUFBUzFlLElBQUksZUFDdkI0ZSxFQUFRamEsT0FDTnhCLFFBQVMsV0FDUCxHQUFBNlosRUNnZ0JBLE9EaGdCQUEsR0FBTyxHQUFJNmpDLG1CQUNUbmlDLFNBQWVBLEVBQ2ZFLFFBQWVBLEVBQ2Y4QixXQUFlaUcsSUFDakIzZ0IsR0FBR2dULEtBQUtnRSxnQkN1Z0IxQnNoRSxFQUFPM2dGLFVEamdCUGswQixNQUFPLFdDa2dCTCxNRGpnQkE1MUIsV0FBVXNNLEtBQUtzbUIsUUFDYm1pRCxnQkFBaUIsV0NrZ0JmLE1EamdCQS8wRSxXQUFVb1csT0FBTzhjLFdBQ25CNGhELGVBQWdCLFdBRWQsR0FBQXRnQixFQzRnQkEsUUQ1Z0JBQSxFQUFXLFNBQUN2b0MsR0FDVixHQUFBbEwsRUN5Z0JBLE9BTmEsT0FBVGtMLElEcGdCTUEsTUFDVmxMLEVBQU8sR0FBSSswRCxZQUNUN3BELE1BQU9BLElBQ1RsaUIsR0FBR2dULEtBQUtnRSxXQzhnQmhCc2hFLEVBQU8zZ0YsVUQxZ0JQaU8sT0FBUSxXQzJnQk4sTUQxZ0JBM1AsV0FBVXNNLEtBQUtxRCxVQzZnQmpCMHlFLEVBQU8zZ0YsVUQzZ0JQc2dGLFFBQVMsV0FFUCxNQUF3QixjQUFyQmhpRixVQUFVMlcsUUFDWDlMLE9BQU9rTCxTQUFXL1YsVUFBVW1FLFNBQVNtaUIsU0FBUyxRQUFTLFdBRXZEdG1CLFVBQVVzTSxLQUFLc21CLFFBQ2JtaUQsZ0JBQWlCLFdBQ2YsR0FBQWgwRCxFQzhnQkEsT0Q5Z0JBQSxHQUFPLEdBQUk2M0QsY0FDVHRzRSxLQUFPdE0sVUFBVXNNLE9BQ25CdkMsR0FBR2dULEtBQUtnRSxPQ2toQmhCc2hFLEVBQU8zZ0YsVURoaEJQeUMsU0FBVSxXQ2loQlIsTURoaEJBbkUsV0FBVXNNLEtBQUtzbUIsUUFDYm1pRCxnQkFBaUIsV0FDZixHQUFBaDBELEVDa2hCQSxPRGxoQkFBLEdBQU8sR0FBSWsvRCxjQUNYbDJFLEdBQUdnVCxLQUFLZ0UsT0NzaEJkc2hFLEVBQU8zZ0YsVURuaEJQNjhFLEtBQU0sV0NvaEJKLE1EbmhCQXYrRSxXQUFVc00sS0FBS3NtQixRQUNibWlELGdCQUFpQixXQUNmLEdBQUF3SixFQ3FoQkEsT0RyaEJBQSxHQUFPLEdBQUlMLE1BQ1hLLEVBQUs3MUUsT0FDSHhCLFFBQVMsU0FBQUMsR0NxaEJQLE1EcmhCTyxZQUNQLEdBQUE0WixFQ3loQkUsT0R6aEJGQSxHQUFPLEdBQUlrOUQsVUFDVE0sS0FBTUEsSUFDUngwRSxHQUFHZ1QsS0FBS2dFLEtBSEQxZixZQ2tpQmpCZ2hGLEVBQU8zZ0YsVUR6aEJQa2hGLFNBQVUsV0FDUixHQUFBd0UsR0FBQW5rRixDQzRoQkEsT0Q1aEJBbWtGLEdBQVU1bUYsTUFBTXFhLFFBQ2hCNVgsRUFBT21rRixFQUFRbmtGLEtBQ2ZpQyxFQUFFdVEsTUFBTTlGLFFBQ056SSxRQUFTLFNBQUFDLEdDMmhCUCxNRDNoQk8sWUM2aEJMLE1ENWhCRmpDLEdBQUVtdkUsT0FBTyxjQUFlLE1BQ3hCbnZFLEVBQUV1USxNQUFNbWdCLE9BQ04zeUIsS0FBYUEsRUFDYnl4RSxTQUFhenhFLEVBQ2JpRSxRQUFTLFdDNmhCTCxNRDVoQkZsSCxXQUFVb1csT0FBTzhjLFVBQ2pCcm9CLE9BQU9rTCxTQUFTQyxVQUNsQjNPLE1BQU8sV0M2aEJILE1ENWhCRm5DLEdBQUV1USxNQUFNeUcsUUFDTmpaLEtBQVVBLEVBQ1ZreEUsT0FBVyxXQUNYbHhFLEdBQ0ZpRSxRQUFTLFdBQ1AsR0FBQW9GLEVDOGhCSSxPRDloQkpBLEdBQU8sR0FBSXduRSxNQUNYeG5FLEVBQUtyRixNQUNIaEUsS0FBVUEsRUFDVkksR0FBVSxrQkFBa0JKLEVBQzVCa3hFLFNBQ0F2TixLQUFVLE9BRVZ5Z0IsTUFBTSxFQUNObmdGLFFBQVMsV0M4aEJILE1EN2hCSmhDLEdBQUV1USxNQUFNbWdCLE9BQ04zeUIsS0FBYUEsRUFDYnl4RSxTQUFhenhFLEVBQ2JpRSxRQUFVLFdDK2hCSixNRDloQkpsSCxXQUFVb1csT0FBTzhjLFVBQ2pCcm9CLE9BQU9rTCxTQUFTQyxVQUNsQjNPLE1BQU8sV0MraEJELE1EOWhCSjdHLE9BQU11RyxPQUFPLHlDQTlCcEIxRixTQzBrQk5naEYsR0QxaERZbmdGLFNBQVNtZ0Y7OztBRUE5QjtBQUNBO0FDU0FyaUYsVUFBVXNuRixjQUlSQyxZQUFjLFNBQUNyNkUsR0FFYixHQUFBczZFLEVDQUEsT0RBQXRpRixHQUFFdVEsTUFBTWd5RSxVQUFZLE1BRXBCem5GLFVBQVUyVyxRQUFhOUwsT0FBT2tMLFNBQVMyeEUsU0FBU3B0RSxNQUFNLEtBQUssR0FDM0R0YSxVQUFVbWpCLFdBQWEsT0FHdkJuakIsVUFBVTZXLElBQU0zUixFQUFFdVEsTUFBTXFMLEdBQUc5Z0IsVUFBVTJXLFNBRXJDNndFLEVBQVkvMUUsU0FBU3NZLGNBQWMsS0FDbkN5OUQsRUFBVXhzRSxLQUFPblEsT0FBT2tMLFNBR3hCN1QsU0FBU3lsRixnQkFBZ0I5ckUsT0FBTytyRSxTQUFlSixFQUFVSyxTQUFTLEtBQUlMLEVBQVV4OUQsS0FBSyxNQUNyRjluQixTQUFTeWxGLGdCQUFnQjlyRSxPQUFPbEYsUUFBWTNXLFVBQVUyVyxRQUN0RHpVLFNBQVN5bEYsZ0JBQWdCOXJFLE9BQU9pc0UsVUFBWTluRixVQUFVbWpCLFdBQ3REamhCLFNBQVN5bEYsZ0JBQWdCOXJFLE9BQU9rc0UsZ0JBQWlCLEVBR2pEL2pGLEVBQUVna0Ysa0JBQW1CQyxZQUFjLGtCQUVuQy82RSxLQUlGZzdFLG1CQUFvQixTQUFFaDdFLEdDbEJwQixNRG9CQWxOLFdBQVU2YixPQUFTLEdBQUlpaUUsU0FBTzdtRSxJQUFRLGtCQUN0Q2pYLFVBQVU2YixPQUFPblQsT0FDZnJCLE1BQVUsV0NwQlIsTURvQldDLE9BQU0sa0NBQ25CSixRQUFVZ0csS0FNZGk3RSxjQUFnQixTQUFFajdFLEdDbEJoQixNRG1CQWxOLFdBQVVtRSxTQUFXLEdBQUkwNkUsV0FBUzVuRSxJQUFRLGFBQzFDalgsVUFBVW1FLFNBQVN1RSxPQUNqQnhCLFFBQVNnRyxFQUVUN0YsTUFBTyxXQUNMLEdBQUErZ0YsR0FBQTdoRixDQ2ZBLE9EZUE2aEYsR0FBQSxPQUFBN2hGLEVBQUF2RyxVQUFBNmIsT0FBQTlYLElBQUEsYUFBQXdDLEVBQW9EcEMsU0FBQSxPQUNLLE1BQUFpa0YsR0FBekQ5Z0YsTUFBTSw2Q0FFTnRILFVBQVVtRSxTQUFTd0QsSUFBSXlnRixHQUN2QnBvRixVQUFVbUUsU0FBUzhDLEtBQUssTUFDdEJJLE1BQU8sV0NsQkwsTURrQlFDLE9BQU0sb0NBQ2hCSixRQUFTZ0csUUFJakJtN0Usb0JBQXFCLFNBQUVuN0UsR0FDckIsTUFBT2xOLFdBQVVtRSxTQUFTTCxJQUFJLGNBTzVCb0osSUFOQWxOLFVBQVVtRSxTQUFTOEMsTUFDakJvekMsV0FBZTc1QyxNQUFNMlosY0FFckI5UyxNQUFPLFdDZkwsTURlUUMsT0FBTSxtQ0FDaEJKLFFBQVNnRyxLQUtmbzdFLGVBQWdCLFNBQUVwN0UsR0NaaEIsT0RhQ2xOLFVBQVU2dUIsVUFBWSxHQUFJK3ZELFdBQVMzbkUsSUFBUSxlQUFhdk8sT0FDdkRyQixNQUFPLFdDVkwsTURVUUMsT0FBTSw4QkFDaEJKLFFBQVNnRyxLQUlicTdFLGNBQWUsU0FBRXI3RSxHQ1RmLE1EUzZCaEksR0FBRSxXQ1I3QixNRFlGZ0ksUUFFRnM3RSxTQUFVLFNBQUV0N0UsR0NWVixNRFdBc0csTUFBS2kxRSxNQUNIQyxZQUFjLFFBQ2RDLElBQWMzb0YsVUFBVW1FLFNBQVNKLElBQUksWUFDckM2a0YsU0FBYzVvRixVQUFVQyxTQUN4QixXQ1RBLE1EVUE0SyxRQUFPRCxFQUFJNEksS0FBSzVJLEVBQ2hCc0MsT0FFSjI3RSxlQUFnQixTQUFFMzdFLEdDRGhCLE1ER0FyQyxRQUFPZCxHQUFLLEdBQUk4MkUsYUFDaEI3Z0YsVUFBVW9XLE9BQVMsR0FBSWlzRSxRQUN2QnJpRixVQUFVc00sS0FBUyxHQUFJd25FLE1BQ3ZCOXpFLFVBQVVveEIsSUFBUyxHQUFJMnZELGlCQUNyQnowRSxLQUFTdE0sVUFBVXNNLEtBQ25COEosT0FBU3BXLFVBQVVvVyxTQUNyQnBXLFVBQVV3TixJQUFTLEdBQUl3d0UsS0FDdkI5d0UsS0FFRjQ3RSxrQkFBbUIsU0FBRTU3RSxHQ1RuQixNRFdBbE4sV0FBVXNNLEtBQUt5bkUsZ0JBQ2Ixc0UsTUFBTyxXQ1ZMLE1EVVFySCxXQUFVc00sS0FBS3FELFVBQ3pCekksUUFBUyxXQ1JQLE1EUVVnRyxTQUVoQjY3RSxjQUFlLFNBQUU3N0UsR0NKZixNREtBaEwsVUFBUzRJLFFBQVE0a0IsUUFDakJ4aUIsS0FFRjg3RSxnQkFBa0IsU0FBRTk3RSxHQ0ZsQixNRElBbE4sV0FBVTJ0RSxhQUFlLEdBQUl6ckUsVUFBUzRGLE9BQU1tUCxJQUFRLGtCQUVwRGpYLFVBQVUydEUsYUFBYWpsRSxPQUNyQnJCLE1BQVU2RixFQUNWaEcsUUFBVWdHLE1BS2hCbE4sVUFBVWlwRixLQUFPLFNBQUMvN0UsR0FFaEIsR0FBQTRnQixFQ0ZBLE9ERUFBLElBQ0U5dEIsVUFBVXNuRixhQUFhQyxZQUN2QnZuRixVQUFVc25GLGFBQWFZLG1CQUN2QmxvRixVQUFVc25GLGFBQWFhLGNBQ3ZCbm9GLFVBQVVzbkYsYUFBYWUsb0JBQ3ZCcm9GLFVBQVVzbkYsYUFBYWdCLGVBQ3ZCdG9GLFVBQVVzbkYsYUFBYWlCLGNBQ3ZCdm9GLFVBQVVzbkYsYUFBYTBCLGdCQUN2QmhwRixVQUFVc25GLGFBQWFrQixTQUN2QnhvRixVQUFVc25GLGFBQWF1QixlQUN2QjdvRixVQUFVc25GLGFBQWF3QixrQkFDdkI5b0YsVUFBVXNuRixhQUFheUIsZUFHQyxNQUFBNzdFLEdBQTFCNGdCLEVBQVM1a0IsS0FBS2dFLEdBRWQxTSxNQUFNMlQsUUFBUTJaLElBRWhCOXRCLFVBQVVpcEYiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiVGFuZ2VyaW5lID0ge1xuICBsb2NhbGVzOiB7fVxufSIsImNsYXNzIEJhY2tib25lLkVkaXRWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGV2ZW50cyA6XG4gICAgXCJjbGljayAuZWRpdF9pbl9wbGFjZVwiIDogXCJlZGl0SW5QbGFjZVwiXG4gICAgXCJmb2N1c291dCAuZWRpdGluZ1wiICAgIDogXCJlZGl0aW5nXCJcbiAgICBcImtleXVwICAgIC5lZGl0aW5nXCIgICAgOiBcImVkaXRpbmdcIlxuICAgIFwia2V5ZG93biAgLmVkaXRpbmdcIiAgICA6IFwiZWRpdGluZ1wiXG5cbiAgZ2V0RWRpdGFibGU6IChvcHRpb25zKSA9PlxuXG4gICAgbW9kZWwgICAgICAgID0gb3B0aW9ucy5tb2RlbFxuICAgIGF0dHJpYnV0ZSAgICA9IG9wdGlvbnMuYXR0cmlidXRlXG4gICAgbmFtZSAgICAgICAgID0gb3B0aW9ucy5uYW1lICAgICAgICB8fCBcIlZhbHVlXCJcbiAgICBwbGFjZWhvbGRlciAgPSBvcHRpb25zLnBsYWNlaG9sZGVyIHx8IFwibm9uZVwiXG4gICAgcHJlcGFyZSAgICAgID0gb3B0aW9ucy5wcmVwYXJlXG5cbiAgICBAcHJlcGFyYXRpb25zICAgICAgICAgICAgICAgICAgICAgPSB7fSB1bmxlc3MgQHByZXBhcmF0aW9ucz9cbiAgICBAcHJlcGFyYXRpb25zW21vZGVsLmlkXSAgICAgICAgICAgPSB7fSB1bmxlc3MgQHByZXBhcmF0aW9uc1ttb2RlbC5pZF0/XG4gICAgQHByZXBhcmF0aW9uc1ttb2RlbC5pZF1bYXR0cmlidXRlLmtleV0gPSBwcmVwYXJlXG5cbiAgICBAaHRtbEdlbkNhdGVsb2cgPSB7fSB1bmxlc3MgQGh0bWxHZW5DYXRlbG9nP1xuICAgIEBodG1sR2VuQ2F0ZWxvZ1ttb2RlbC5pZF0gPSB7fSB1bmxlc3MgQGh0bWxHZW5DYXRlbG9nW21vZGVsLmlkXT9cbiAgICBAaHRtbEdlbkNhdGVsb2dbbW9kZWwuaWRdW2F0dHJpYnV0ZS5rZXldID0gaHRtbEZ1bmN0aW9uID0gZG8gKG1vZGVsLCBhdHRyaWJ1dGUsIG5hbWUsIHBsYWNlaG9sZGVyKSAtPiBcbiAgICAgIC0+IFxuXG4gICAgICAgIGtleSAgICA9IGF0dHJpYnV0ZS5rZXlcbiAgICAgICAgZXNjYXBlID0gYXR0cmlidXRlLmVzY2FwZVxuICAgICAgICB0eXBlICAgPSBhdHRyaWJ1dGUudHlwZSB8fCAnJ1xuXG4gICAgICAgICMgY29vayB0aGUgdmFsdWVcbiAgICAgICAgdmFsdWUgPSBpZiBtb2RlbC5oYXMoa2V5KSB0aGVuIG1vZGVsLmdldChrZXkpIGVsc2UgcGxhY2Vob2xkZXJcbiAgICAgICAgdmFsdWUgPSBwbGFjZWhvbGRlciBpZiBfKHZhbHVlKS5pc0VtcHR5U3RyaW5nKClcblxuICAgICAgICB2YWx1ZSA9IF8odmFsdWUpLmVzY2FwZSgpIGlmIGVzY2FwZVxuICAgICAgICB1bnRpdGxlZCA9IFwiIGRhdGEtdW50aXRsZWQ9J3RydWUnIFwiIGlmIHZhbHVlIGlzIHBsYWNlaG9sZGVyXG5cbiAgICAgICAgIyB3aGF0IGlzIGl0XG4gICAgICAgIGVkaXRPck5vdCAgID0gaWYgYXR0cmlidXRlLmVkaXRhYmxlICYmIFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJjb250ZXh0XCIpID09IFwic2VydmVyXCIgdGhlbiBcImNsYXNzPSdlZGl0X2luX3BsYWNlJ1wiIGVsc2UgXCJcIlxuXG4gICAgICAgIG51bWJlck9yTm90ID0gaWYgXy5pc051bWJlcih2YWx1ZSkgdGhlbiBcImRhdGEtaXMtbnVtYmVyPSd0cnVlJ1wiIGVsc2UgXCJkYXRhLWlzLW51bWJlcj0nZmFsc2UnXCIgXG5cbiAgICAgICAgcmVzdWx0ID0gXCI8ZGl2IGNsYXNzPSdlZGl0X2luX3BsYWNlICN7a2V5fS1lZGl0LWluLXBsYWNlJyBpZD0nI3ttb2RlbC5pZH0tI3trZXl9Jz48c3BhbiBkYXRhLW1vZGVsLWlkPScje21vZGVsLmlkfScgZGF0YS10eXBlPScje3R5cGV9JyBkYXRhLWtleT0nI3trZXl9JyBkYXRhLXZhbHVlPScje3ZhbHVlfScgZGF0YS1uYW1lPScje25hbWV9JyAje2VkaXRPck5vdH0gI3tudW1iZXJPck5vdH0gI3t1bnRpdGxlZHx8Jyd9PiN7dmFsdWV9PC9zcGFuPjwvZGl2PlwiXG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgcmV0dXJuIGh0bWxGdW5jdGlvbigpXG5cblxuICBlZGl0SW5QbGFjZTogKGV2ZW50KSA9PlxuXG4gICAgcmV0dXJuIGlmIEBhbHJlYWR5RWRpdGluZ1xuICAgIEBhbHJlYWR5RWRpdGluZyA9IHRydWVcblxuICAgICMgc2F2ZSBzdGF0ZVxuICAgICMgcmVwbGFjZSB3aXRoIHRleHQgYXJlYVxuICAgICMgb24gc2F2ZSwgc2F2ZSBhbmQgcmUtcmVwbGFjZVxuICAgICRzcGFuID0gJChldmVudC50YXJnZXQpXG5cbiAgICAkcGFyZW50ICA9ICRzcGFuLnBhcmVudCgpXG5cbiAgICByZXR1cm4gaWYgJHNwYW4uaGFzQ2xhc3MoXCJlZGl0aW5nXCIpXG5cbiAgICBndWlkICAgICA9IFV0aWxzLmd1aWQoKVxuXG4gICAga2V5ICAgICAgPSAkc3Bhbi5hdHRyKFwiZGF0YS1rZXlcIilcbiAgICBuYW1lICAgICA9ICRzcGFuLmF0dHIoXCJkYXRhLW5hbWVcIilcbiAgICB0eXBlICAgICA9ICRzcGFuLmF0dHIoXCJkYXRhLXR5cGVcIilcbiAgICBpc051bWJlciA9ICRzcGFuLmF0dHIoXCJkYXRhLWlzLW51bWJlclwiKSA9PSBcInRydWVcIlxuXG4gICAgbW9kZWxJZCAgPSAkc3Bhbi5hdHRyKFwiZGF0YS1tb2RlbC1pZFwiKVxuICAgIG1vZGVsICAgID0gQG1vZGVscy5nZXQobW9kZWxJZClcblxuICAgIG9sZFZhbHVlID0gbW9kZWwuZ2V0KGtleSkgfHwgXCJcIlxuICAgIG9sZFZhbHVlID0gXCJcIiBpZiAkc3Bhbi5hdHRyKFwiZGF0YS11bnRpdGxlZFwiKSA9PSBcInRydWVcIlxuXG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgIGNsYXNzZXMgPSAoJHRhcmdldC5hdHRyKFwiY2xhc3NcIikgfHwgXCJcIikucmVwbGFjZShcInNldHRpbmdzXCIsXCJcIilcbiAgICBtYXJnaW5zID0gJHRhcmdldC5jc3MoXCJtYXJnaW5cIilcblxuICAgIHRyYW5zZmVyVmFyaWFibGVzID0gXCJkYXRhLWlzLW51bWJlcj0nI3tpc051bWJlcn0nIGRhdGEta2V5PScje2tleX0nIGRhdGEtbW9kZWwtaWQ9JyN7bW9kZWxJZH0nIFwiXG5cbiAgICBpZiB0eXBlIGlzIFwiYm9vbGVhblwiXG4gICAgICAkc3BhblxuXG4gICAgIyBzZXRzIHdpZHRoL2hlaWdodCB3aXRoIHN0eWxlIGF0dHJpYnV0ZVxuICAgIHJvd3MgPSAxICsgb2xkVmFsdWUuY291bnQoXCJcXG5cIilcbiAgICByb3dzID0gcGFyc2VJbnQoTWF0aC5tYXgob2xkVmFsdWUubGVuZ3RoIC8gMzAsIHJvd3MpKVxuICAgICRwYXJlbnQuaHRtbChcIjx0ZXh0YXJlYSBwbGFjZWhvbGRlcj0nI3tuYW1lfScgaWQ9JyN7Z3VpZH0nIHJvd3M9JyN7cm93c30nICN7dHJhbnNmZXJWYXJpYWJsZXN9IGNsYXNzPSdlZGl0aW5nICN7Y2xhc3Nlc30gI3trZXl9LWVkaXRpbmcnIHN0eWxlPSdtYXJnaW46I3ttYXJnaW5zfScgZGF0YS1uYW1lPScje25hbWV9Jz4je29sZFZhbHVlfTwvdGV4dGFyZWE+XCIpXG4gICAgIyBzdHlsZT0nd2lkdGg6I3tvbGRXaWR0aH1weDsgaGVpZ2h0OiAje29sZEhlaWdodH1weDsnXG4gICAgJHRleHRhcmVhID0gJChcIiMje2d1aWR9XCIpXG4gICAgJHRleHRhcmVhLnNlbGVjdCgpXG5cbiAgZWRpdGluZzogKGV2ZW50KSA9PlxuXG4gICAgcmV0dXJuIGZhbHNlIGlmIGV2ZW50LndoaWNoID09IDEzIGFuZCBldmVudC50eXBlID09IFwia2V5dXBcIlxuXG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuXG4gICAgJHBhcmVudCA9ICR0YXJnZXQucGFyZW50KClcblxuICAgIGtleSAgICAgICAgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLWtleVwiKVxuICAgIGlzTnVtYmVyICAgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLWlzLW51bWJlclwiKSA9PSBcInRydWVcIlxuXG4gICAgbW9kZWxJZCAgICA9ICR0YXJnZXQuYXR0cihcImRhdGEtbW9kZWwtaWRcIilcbiAgICBuYW1lICAgICAgID0gJHRhcmdldC5hdHRyKFwiZGF0YS1uYW1lXCIpXG5cbiAgICBtb2RlbCAgICAgID0gQG1vZGVscy5nZXQobW9kZWxJZClcbiAgICBvbGRWYWx1ZSAgID0gbW9kZWwuZ2V0KGtleSlcblxuICAgIG5ld1ZhbHVlID0gJHRhcmdldC52YWwoKVxuICAgIG5ld1ZhbHVlID0gaWYgaXNOdW1iZXIgdGhlbiBwYXJzZUludChuZXdWYWx1ZSkgZWxzZSBuZXdWYWx1ZVxuXG4gICAgaWYgZXZlbnQud2hpY2ggPT0gMjcgb3IgZXZlbnQudHlwZSA9PSBcImZvY3Vzb3V0XCJcbiAgICAgIEAkZWwuZmluZChcIiMje21vZGVsSWR9LSN7a2V5fVwiKS5odG1sIEBodG1sR2VuQ2F0ZWxvZ1ttb2RlbElkXVtrZXldPygpXG4gICAgICBAYWxyZWFkeUVkaXRpbmcgPSBmYWxzZVxuICAgICAgcmV0dXJuXG5cbiAgICAjIGFjdCBub3JtYWwsIHVubGVzcyBpdCdzIGFuIGVudGVyIGtleSBvbiBrZXlkb3duXG4gICAga2V5RG93biA9IGV2ZW50LnR5cGUgaXMgXCJrZXlkb3duXCJcbiAgICBlbnRlciAgID0gZXZlbnQud2hpY2ggaXMgMTNcbiAgICBhbHRLZXkgID0gZXZlbnQuYWx0S2V5XG5cbiAgICByZXR1cm4gdHJ1ZSBpZiBlbnRlciBhbmQgYWx0S2V5XG4gICAgcmV0dXJuIHRydWUgdW5sZXNzIGVudGVyIGFuZCBrZXlEb3duXG5cbiAgICBAYWxyZWFkeUVkaXRpbmcgPSBmYWxzZVxuXG4gICAgIyBJZiB0aGVyZSB3YXMgYSBjaGFuZ2UsIHNhdmUgaXRcbiAgICBpZiBTdHJpbmcobmV3VmFsdWUpICE9IFN0cmluZyhvbGRWYWx1ZSlcbiAgICAgIGF0dHJpYnV0ZXMgPSB7fVxuICAgICAgYXR0cmlidXRlc1trZXldID0gbmV3VmFsdWVcbiAgICAgIGlmIEBwcmVwYXJhdGlvbnM/W21vZGVsSWRdP1trZXldP1xuICAgICAgICB0cnlcbiAgICAgICAgICBhdHRyaWJ1dGVzW2tleStcIi1jb29rZWRcIl0gPSBAcHJlcGFyYXRpb25zW21vZGVsSWRdW2tleV0obmV3VmFsdWUpXG4gICAgICAgIGNhdGNoIGVcbiAgICAgICAgICBVdGlscy5zdGlja3koXCJQcm9ibGVtIGNvb2tpbmcgdmFsdWU8YnI+I3tlLm1lc3NhZ2V9XCIpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICBtb2RlbC5zYXZlIGF0dHJpYnV0ZXMsXG4gICAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgICAgVXRpbHMudG9wQWxlcnQgXCIje25hbWV9IHNhdmVkXCJcbiAgICAgICAgICBAJGVsLmZpbmQoXCIjI3ttb2RlbElkfS0je2tleX1cIikuaHRtbCBAaHRtbEdlbkNhdGVsb2dbbW9kZWxJZF1ba2V5XT8oKVxuICAgICAgICBlcnJvcjogPT5cbiAgICAgICAgICBhbGVydCBcIlBsZWFzZSB0cnkgdG8gc2F2ZSBhZ2FpbiwgaXQgZGlkbid0IHdvcmsgdGhhdCB0aW1lLlwiXG4gICAgICAgICAgQHJlbmRlcigpXG4gICAgZWxzZVxuICAgICAgQCRlbC5maW5kKFwiIyN7bW9kZWxJZH0tI3trZXl9XCIpLmh0bWwgQGh0bWxHZW5DYXRlbG9nW21vZGVsSWRdW2tleV0/KClcblxuICAgICMgdGhpcyBlbnN1cmVzIHdlIGRvIG5vdCBpbnNlcnQgYSBuZXdsaW5lIGNoYXJhY3RlciB3aGVuIHdlIHByZXNzIGVudGVyXG4gICAgcmV0dXJuIGZhbHNlXG5cblxuXG5cblxuY2xhc3MgQmFja2JvbmUuQ2hpbGRNb2RlbCBleHRlbmRzIEJhY2tib25lLk1vZGVsXG5cbiAgc2F2ZTogKGF0dHJpYnV0ZXMsIG9wdGlvbnM9e30pID0+XG4gICAgb3B0aW9ucy5zdWNjZXNzID0gJC5ub29wIHVubGVzcyBvcHRpb25zLnN1Y2Nlc3M/XG4gICAgb3B0aW9ucy5lcnJvciA9ICQubm9vcCB1bmxlc3Mgb3B0aW9ucy5lcnJvcj9cbiAgICBAc2V0IGF0dHJpYnV0ZXNcbiAgICBvcHRpb25zLmNoaWxkU2VsZiA9IEBcbiAgICBAcGFyZW50LmNoaWxkU2F2ZShvcHRpb25zKVxuXG5cbmNsYXNzIEJhY2tib25lLkNoaWxkQ29sbGVjdGlvbiBleHRlbmRzIEJhY2tib25lLkNvbGxlY3Rpb25cblxuXG5jbGFzcyBCYWNrYm9uZS5QYXJlbnRNb2RlbCBleHRlbmRzIEJhY2tib25lLk1vZGVsXG5cbiAgQ2hpbGQ6IG51bGxcbiAgQ2hpbGRDb2xsZWN0aW9uOiBudWxsXG5cbiAgY29uc3RydWN0b3I6IChvcHRpb25zKSAtPlxuICAgIEBjb2xsZWN0aW9uID0gbmV3IEBDaGlsZENvbGxlY3Rpb24oKVxuICAgIEBjb2xsZWN0aW9uLm9uIFwicmVtb3ZlXCIsID0+IEB1cGRhdGVBdHRyaWJ1dGVzKClcbiAgICBzdXBlcihvcHRpb25zKVxuXG4gIGdldExlbmd0aDogLT4gQGNvbGxlY3Rpb24ubGVuZ3RoIHx8IEBhdHRyaWJ1dGVzLmNoaWxkcmVuLmxlbmd0aFxuXG4gIGZldGNoOiAob3B0aW9ucykgLT5cbiAgICBvbGRTdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzXG4gICAgZGVsZXRlIG9wdGlvbnMuc3VjY2Vzc1xuICAgIFxuICAgIG9wdGlvbnMuc3VjY2VzcyA9IChtb2RlbCwgcmVzcG9uc2UsIG9wdGlvbnMpID0+XG4gICAgICBjaGlsZHJlbk1vZGVscyA9IFtdXG4gICAgICBmb3IgY2hpbGQgaW4gQGdldENoaWxkcmVuKClcbiAgICAgICAgY2hpbGRNb2RlbCA9IG5ldyBAQ2hpbGQoY2hpbGQpXG4gICAgICAgIGNoaWxkTW9kZWwucGFyZW50ID0gQFxuICAgICAgICBjaGlsZHJlbk1vZGVscy5wdXNoIGNoaWxkTW9kZWxcbiAgICAgIEBjb2xsZWN0aW9uLnJlc2V0IGNoaWxkcmVuTW9kZWxzXG4gICAgICBAY29sbGVjdGlvbi5zb3J0KClcbiAgICAgIG9sZFN1Y2Nlc3MobW9kZWwsIHJlc3BvbnNlLCBvcHRpb25zKVxuXG4gICAgc3VwZXIob3B0aW9ucylcblxuICBnZXRDaGlsZHJlbjogLT5cbiAgICBAZ2V0QXJyYXkoXCJjaGlsZHJlblwiKVxuXG4gIHVwZGF0ZUF0dHJpYnV0ZXM6IC0+XG4gICAgQGF0dHJpYnV0ZXMuY2hpbGRyZW4gPSBbXVxuICAgIGZvciBtb2RlbCBpbiBAY29sbGVjdGlvbi5tb2RlbHNcbiAgICAgIEBhdHRyaWJ1dGVzLmNoaWxkcmVuLnB1c2ggbW9kZWwuYXR0cmlidXRlc1xuXG4gIHVwZGF0ZUNvbGxlY3Rpb246ID0+XG4gICAgQGNvbGxlY3Rpb24ucmVzZXQoQGF0dHJpYnV0ZXMuY2hpbGRyZW4pXG4gICAgQGNvbGxlY3Rpb24uZWFjaCAoY2hpbGQpID0+XG4gICAgICBjaGlsZC5wYXJlbnQgPSBAXG5cbiAgbmV3Q2hpbGQ6IChhdHRyaWJ1dGVzPXt9LCBvcHRpb25zKSA9PlxuICAgIG5ld0NoaWxkID0gbmV3IEBDaGlsZFxuICAgIG5ld0NoaWxkLnNldChcIl9pZFwiLCBVdGlscy5ndWlkKCkpXG4gICAgbmV3Q2hpbGQucGFyZW50ID0gQFxuICAgIEBjb2xsZWN0aW9uLmFkZChuZXdDaGlsZCwgb3B0aW9ucylcbiAgICBuZXdDaGlsZC5zYXZlIGF0dHJpYnV0ZXMsXG4gICAgICBzdWNjZXNzOiA9PlxuICAgICAgICBcblxuICBjaGlsZFNhdmU6IChvcHRpb25zID0ge30pID0+XG4gICAgb2xkU3VjY2VzcyA9IG9wdGlvbnMuc3VjY2Vzc1xuICAgIGRlbGV0ZSBvcHRpb25zLnN1Y2Nlc3NcbiAgICBvcHRpb25zLnN1Y2Nlc3MgPSAoYSwgYiwgYykgPT5cbiAgICAgIG9sZFN1Y2Nlc3MuYXBwbHkob3B0aW9ucy5jaGlsZFNlbGYsIFthLCBiLCBjXSlcbiAgICBAdXBkYXRlQXR0cmlidXRlcygpXG5cbiAgICBAc2F2ZSBudWxsLCBvcHRpb25zXG5cblxuXG4jXG4jIFNraXAgbG9naWNcbiNcblxuIyB0aGVzZSBjb3VsZCBlYXNpbHkgYmUgcmVmYWN0b3JlZCBpbnRvIG9uZS5cblxuUmVzdWx0T2ZRdWVzdGlvbiA9IChuYW1lKSAtPlxuICByZXR1cm5WaWV3ID0gbnVsbFxuICBpbmRleCA9IHZtLmN1cnJlbnRWaWV3Lm9yZGVyTWFwW3ZtLmN1cnJlbnRWaWV3LmluZGV4XVxuXG4gIGZvciBjYW5kaWRhdGVWaWV3IGluIHZtLmN1cnJlbnRWaWV3LnN1YnRlc3RWaWV3c1tpbmRleF0ucHJvdG90eXBlVmlldy5xdWVzdGlvblZpZXdzXG4gICAgaWYgY2FuZGlkYXRlVmlldy5tb2RlbC5nZXQoXCJuYW1lXCIpID09IG5hbWVcbiAgICAgIHJldHVyblZpZXcgPSBjYW5kaWRhdGVWaWV3XG4gIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIlJlc3VsdE9mUXVlc3Rpb24gY291bGQgbm90IGZpbmQgdmFyaWFibGUgI3tuYW1lfVwiKSBpZiByZXR1cm5WaWV3ID09IG51bGxcbiAgcmV0dXJuIHJldHVyblZpZXcuYW5zd2VyIGlmIHJldHVyblZpZXcuYW5zd2VyXG4gIHJldHVybiBudWxsXG5cblJlc3VsdE9mTXVsdGlwbGUgPSAobmFtZSkgLT5cbiAgcmV0dXJuVmlldyA9IG51bGxcbiAgaW5kZXggPSB2bS5jdXJyZW50Vmlldy5vcmRlck1hcFt2bS5jdXJyZW50Vmlldy5pbmRleF1cblxuICBmb3IgY2FuZGlkYXRlVmlldyBpbiB2bS5jdXJyZW50Vmlldy5zdWJ0ZXN0Vmlld3NbaW5kZXhdLnByb3RvdHlwZVZpZXcucXVlc3Rpb25WaWV3c1xuICAgIGlmIGNhbmRpZGF0ZVZpZXcubW9kZWwuZ2V0KFwibmFtZVwiKSA9PSBuYW1lXG4gICAgICByZXR1cm5WaWV3ID0gY2FuZGlkYXRlVmlld1xuICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJSZXN1bHRPZlF1ZXN0aW9uIGNvdWxkIG5vdCBmaW5kIHZhcmlhYmxlICN7bmFtZX1cIikgaWYgcmV0dXJuVmlldyA9PSBudWxsXG5cbiAgcmVzdWx0ID0gW11cbiAgZm9yIGtleSwgdmFsdWUgb2YgcmV0dXJuVmlldy5hbnN3ZXJcbiAgICByZXN1bHQucHVzaCBrZXkgaWYgdmFsdWUgPT0gXCJjaGVja2VkXCJcbiAgcmV0dXJuIHJlc3VsdFxuXG5SZXN1bHRPZlByZXZpb3VzID0gKG5hbWUpIC0+XG4gIHJldHVybiB2bS5jdXJyZW50Vmlldy5yZXN1bHQuZ2V0VmFyaWFibGUobmFtZSlcblxuUmVzdWx0T2ZHcmlkID0gKG5hbWUpIC0+XG4gIHJldHVybiB2bS5jdXJyZW50Vmlldy5yZXN1bHQuZ2V0SXRlbVJlc3VsdENvdW50QnlWYXJpYWJsZU5hbWUobmFtZSwgXCJjb3JyZWN0XCIpXG5cblxuI1xuIyBUYW5nZXJpbmUgYmFja2J1dHRvbiBoYW5kbGVyXG4jXG5UYW5nZXJpbmUgPSBpZiBUYW5nZXJpbmU/IHRoZW4gVGFuZ2VyaW5lIGVsc2Uge31cblRhbmdlcmluZS5vbkJhY2tCdXR0b24gPSAoZXZlbnQpIC0+XG4gIGlmIFRhbmdlcmluZS5hY3Rpdml0eSA9PSBcImFzc2Vzc21lbnQgcnVuXCJcbiAgICBpZiBjb25maXJtIHQoXCJOYXZpZ2F0aW9uVmlldy5tZXNzYWdlLmluY29tcGxldGVfbWFpbl9zY3JlZW5cIilcbiAgICAgIFRhbmdlcmluZS5hY3Rpdml0eSA9IFwiXCJcbiAgICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKVxuICAgIGVsc2VcbiAgICAgIHJldHVybiBmYWxzZVxuICBlbHNlXG4gICAgd2luZG93Lmhpc3RvcnkuYmFjaygpXG5cblxuXG4jIEV4dGVuZCBldmVyeSB2aWV3IHdpdGggYSBjbG9zZSBtZXRob2QsIHVzZWQgYnkgVmlld01hbmFnZXJcbkJhY2tib25lLlZpZXcucHJvdG90eXBlLmNsb3NlID0gLT5cbiAgQHJlbW92ZSgpXG4gIEB1bmJpbmQoKVxuICBAb25DbG9zZT8oKVxuXG5cbiMgUmV0dXJucyBhbiBvYmplY3QgaGFzaGVkIGJ5IGEgZ2l2ZW4gYXR0cmlidXRlLlxuQmFja2JvbmUuQ29sbGVjdGlvbi5wcm90b3R5cGUuaW5kZXhCeSA9ICggYXR0ciApIC0+XG4gIHJlc3VsdCA9IHt9XG4gIGZvciBvbmVNb2RlbCBpbiBAbW9kZWxzXG4gICAgaWYgb25lTW9kZWwuaGFzKGF0dHIpXG4gICAgICBrZXkgPSBvbmVNb2RlbC5nZXQoYXR0cilcbiAgICAgIHJlc3VsdFtrZXldID0gW10gaWYgbm90IHJlc3VsdFtrZXldP1xuICAgICAgcmVzdWx0W2tleV0ucHVzaChvbmVNb2RlbClcbiAgcmV0dXJuIHJlc3VsdFxuXG4jIFJldHVybnMgYW4gb2JqZWN0IGhhc2hlZCBieSBhIGdpdmVuIGF0dHJpYnV0ZS5cbkJhY2tib25lLkNvbGxlY3Rpb24ucHJvdG90eXBlLmluZGV4QXJyYXlCeSA9ICggYXR0ciApIC0+XG4gIHJlc3VsdCA9IFtdXG4gIGZvciBvbmVNb2RlbCBpbiBAbW9kZWxzXG4gICAgaWYgb25lTW9kZWwuaGFzKGF0dHIpXG4gICAgICBrZXkgPSBvbmVNb2RlbC5nZXQoYXR0cilcbiAgICAgIHJlc3VsdFtrZXldID0gW10gaWYgbm90IHJlc3VsdFtrZXldP1xuICAgICAgcmVzdWx0W2tleV0ucHVzaChvbmVNb2RlbClcbiAgcmV0dXJuIHJlc3VsdFxuXG5CYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUuY29uZm9ybSA9ICggc3RhbmRhcmQgPSB7fSApIC0+XG4gIHRocm93IFwiQ2Fubm90IGNvbmZvcm0gdG8gZW1wdHkgc3RhbmRhcmQuIFVzZSBAY2xlYXIoKSBpbnN0ZWFkLlwiIGlmIF8uaXNFbXB0eShzdGFuZGFyZClcbiAgZm9yIGtleSwgdmFsdWUgb2Ygc3RhbmRhcmRcbiAgICBAc2V0KGtleSwgdmFsdWUoKSkgaWYgQGhhcyhrZXkpIG9yIEBnZXQoa2V5KSBpcyBcIlwiXG5cbkJhY2tib25lLk1vZGVsLnByb3RvdHlwZS5wcnVuZSA9ICggc2hhcGUgPSB7fSApIC0+XG4gIHRocm93IFwiQ2Fubm90IGNvbmZvcm0gdG8gZW1wdHkgc3RhbmRhcmQuIFVzZSBAY2xlYXIoKSBpbnN0ZWFkLlwiIGlmIF8uaXNFbXB0eShzdGFuZGFyZClcbiAgZm9yIGtleSwgdmFsdWUgb2YgQGF0dHJpYnV0ZXNcbiAgICBAdW5zZXQoa2V5KSB1bmxlc3Mga2V5IGluIHN0YW5kYXJkXG5cbiMgaGFzaCB0aGUgYXR0cmlidXRlcyBvZiBhIG1vZGVsXG5CYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUudG9IYXNoID0gLT5cbiAgc2lnbmlmaWNhbnRBdHRyaWJ1dGVzID0ge31cbiAgZm9yIGtleSwgdmFsdWUgb2YgQGF0dHJpYnV0ZXNcbiAgICBzaWduaWZpY2FudEF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlIGlmICF+WydfcmV2JywgJ19pZCcsJ2hhc2gnLCd1cGRhdGVkJywnZWRpdGVkQnknXS5pbmRleE9mKGtleSlcbiAgcmV0dXJuIGI2NF9zaGExKEpTT04uc3RyaW5naWZ5KHNpZ25pZmljYW50QXR0cmlidXRlcykpXG5cbiMgYnkgZGVmYXVsdCBhbGwgbW9kZWxzIHdpbGwgc2F2ZSBhIHRpbWVzdGFtcCBhbmQgaGFzaCBvZiBzaWduaWZpY2FudCBhdHRyaWJ1dGVzXG5CYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUuX2JlZm9yZVNhdmUgPSAtPlxuICBAYmVmb3JlU2F2ZT8oKVxuICBAc3RhbXAoKVxuXG5CYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUuc3RhbXAgPSAtPlxuICBAc2V0XG4gICAgXCJlZGl0ZWRCeVwiIDogVGFuZ2VyaW5lPy51c2VyPy5uYW1lKCkgfHwgXCJ1bmtub3duXCJcbiAgICBcInVwZGF0ZWRcIiA6IChuZXcgRGF0ZSgpKS50b1N0cmluZygpXG4gICAgXCJoYXNoXCIgOiBAdG9IYXNoKClcbiAgICBcImZyb21JbnN0YW5jZUlkXCIgOiBUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0U3RyaW5nKFwiaW5zdGFuY2VJZFwiKVxuXG5cbiNcbiMgVGhpcyBzZXJpZXMgb2YgZnVuY3Rpb25zIHJldHVybnMgcHJvcGVydGllcyB3aXRoIGRlZmF1bHQgdmFsdWVzIGlmIG5vIHByb3BlcnR5IGlzIGZvdW5kXG4jIEBnb3RjaGEgYmUgbWluZGZ1bCBvZiB0aGUgZGVmYXVsdCBcImJsYW5rXCIgdmFsdWVzIHNldCBoZXJlXG4jXG5CYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUuZ2V0TnVtYmVyID0gICAgICAgIChrZXkpIC0+IHJldHVybiBpZiBAaGFzKGtleSkgdGhlbiBwYXJzZUludChAZ2V0KGtleSkpIGVsc2UgMFxuQmFja2JvbmUuTW9kZWwucHJvdG90eXBlLmdldEFycmF5ID0gICAgICAgICAoa2V5KSAtPiByZXR1cm4gaWYgQGhhcyhrZXkpIHRoZW4gQGdldChrZXkpICAgICAgICAgICBlbHNlIFtdXG5CYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUuZ2V0U3RyaW5nID0gICAgICAgIChrZXkpIC0+IHJldHVybiBpZiBAaGFzKGtleSkgdGhlbiBAZ2V0KGtleSkgICAgICAgICAgIGVsc2UgXCJcIlxuQmFja2JvbmUuTW9kZWwucHJvdG90eXBlLmdldEVzY2FwZWRTdHJpbmcgPSAoa2V5KSAtPiByZXR1cm4gaWYgQGhhcyhrZXkpIHRoZW4gQGVzY2FwZShrZXkpICAgICAgICBlbHNlIFwiXCJcbkJhY2tib25lLk1vZGVsLnByb3RvdHlwZS5nZXRCb29sZWFuID0gICAgICAgKGtleSkgLT4gcmV0dXJuIGlmIEBoYXMoa2V5KSB0aGVuIChAZ2V0KGtleSkgPT0gdHJ1ZSBvciBAZ2V0KGtleSkgPT0gJ3RydWUnKVxuXG5cbiNcbiMgaGFuZHkganF1ZXJ5IGZ1bmN0aW9uc1xuI1xuKCAoJCkgLT5cblxuICAkLmZuLnNjcm9sbFRvID0gKHNwZWVkID0gMjUwLCBjYWxsYmFjaykgLT5cbiAgICB0cnlcbiAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlIHtcbiAgICAgICAgc2Nyb2xsVG9wOiAkKEApLm9mZnNldCgpLnRvcCArICdweCdcbiAgICAgICAgfSwgc3BlZWQsIG51bGwsIGNhbGxiYWNrXG4gICAgY2F0Y2ggZVxuICAgICAgY29uc29sZS5sb2cgXCJlcnJvclwiLCBlXG4gICAgICBjb25zb2xlLmxvZyBcIlNjcm9sbCBlcnJvciB3aXRoICd0aGlzJ1wiLCBAXG5cbiAgICByZXR1cm4gQFxuXG4gICMgcGxhY2Ugc29tZXRoaW5nIHRvcCBhbmQgY2VudGVyXG4gICQuZm4udG9wQ2VudGVyID0gLT5cbiAgICBAY3NzIFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiXG4gICAgQGNzcyBcInRvcFwiLCAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyBcInB4XCJcbiAgICBAY3NzIFwibGVmdFwiLCAoKCQod2luZG93KS53aWR0aCgpIC0gQG91dGVyV2lkdGgoKSkgLyAyKSArICQod2luZG93KS5zY3JvbGxMZWZ0KCkgKyBcInB4XCJcblxuICAjIHBsYWNlIHNvbWV0aGluZyBtaWRkbGUgY2VudGVyXG4gICQuZm4ubWlkZGxlQ2VudGVyID0gLT5cbiAgICBAY3NzIFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiXG4gICAgQGNzcyBcInRvcFwiLCAoKCQod2luZG93KS5oZWlnaHQoKSAtIHRoaXMub3V0ZXJIZWlnaHQoKSkgLyAyKSArICQod2luZG93KS5zY3JvbGxUb3AoKSArIFwicHhcIlxuICAgIEBjc3MgXCJsZWZ0XCIsICgoJCh3aW5kb3cpLndpZHRoKCkgLSB0aGlzLm91dGVyV2lkdGgoKSkgLyAyKSArICQod2luZG93KS5zY3JvbGxMZWZ0KCkgKyBcInB4XCJcblxuICAkLmZuLndpZHRoUGVyY2VudGFnZSA9IC0+XG4gICAgcmV0dXJuIE1hdGgucm91bmQoMTAwICogQG91dGVyV2lkdGgoKSAvIEBvZmZzZXRQYXJlbnQoKS53aWR0aCgpKSArICclJ1xuXG4gICQuZm4uaGVpZ2h0UGVyY2VudGFnZSA9IC0+XG4gICAgcmV0dXJuIE1hdGgucm91bmQoMTAwICogQG91dGVySGVpZ2h0KCkgLyBAb2Zmc2V0UGFyZW50KCkuaGVpZ2h0KCkpICsgJyUnXG5cblxuICAkLmZuLmdldFN0eWxlT2JqZWN0ID0gLT5cblxuICAgICAgZG9tID0gdGhpcy5nZXQoMClcblxuICAgICAgcmV0dXJucyA9IHt9XG5cbiAgICAgIGlmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlXG5cbiAgICAgICAgICBjYW1lbGl6ZSA9IChhLCBiKSAtPiBiLnRvVXBwZXJDYXNlKClcblxuICAgICAgICAgIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUgZG9tLCBudWxsXG5cbiAgICAgICAgICBmb3IgcHJvcCBpbiBzdHlsZVxuICAgICAgICAgICAgICBjYW1lbCA9IHByb3AucmVwbGFjZSAvXFwtKFthLXpdKS9nLCBjYW1lbGl6ZVxuICAgICAgICAgICAgICB2YWwgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlIHByb3BcbiAgICAgICAgICAgICAgcmV0dXJuc1tjYW1lbF0gPSB2YWxcblxuICAgICAgICAgIHJldHVybiByZXR1cm5zXG5cbiAgICAgIGlmIGRvbS5jdXJyZW50U3R5bGVcblxuICAgICAgICAgIHN0eWxlID0gZG9tLmN1cnJlbnRTdHlsZVxuXG4gICAgICAgICAgZm9yIHByb3AgaW4gc3R5bGVcblxuICAgICAgICAgICAgICByZXR1cm5zW3Byb3BdID0gc3R5bGVbcHJvcF1cblxuICAgICAgICAgIHJldHVybiByZXR1cm5zXG5cbiAgICAgIHJldHVybiB0aGlzLmNzcygpXG5cblxuXG4pKGpRdWVyeSlcblxuI1xuIyBDb3VjaERCIGVycm9yIGhhbmRsaW5nXG4jXG4kLmFqYXhTZXR1cFxuICBzdGF0dXNDb2RlOlxuICAgIDQwNDogKHhociwgc3RhdHVzLCBtZXNzYWdlKSAtPlxuICAgICAgY29kZSA9IHhoci5zdGF0dXNcbiAgICAgIHN0YXR1c1RleHQgPSB4aHIuc3RhdHVzVGV4dFxuICAgICAgc2VlVW5hdXRob3JpemVkID0gfnhoci5yZXNwb25zZVRleHQuaW5kZXhPZihcInVuYXV0aG9yaXplZFwiKVxuICAgICAgaWYgc2VlVW5hdXRob3JpemVkXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiU2Vzc2lvbiBjbG9zZWQ8YnI+UGxlYXNlIGxvZyBpbiBhbmQgdHJ5IGFnYWluLlwiXG4gICAgICAgIFRhbmdlcmluZS51c2VyLmxvZ291dCgpXG5cblxuIyBkZWJ1ZyBjb2Rlc1xua20gPSB7XCIwXCI6NDgsXCIxXCI6NDksXCIyXCI6NTAsXCIzXCI6NTEsXCI0XCI6NTIsXCI1XCI6NTMsXCI2XCI6NTQsXCI3XCI6NTUsXCI4XCI6NTYsXCI5XCI6NTcsXCJhXCI6NjUsXCJiXCI6NjYsXCJjXCI6NjcsXCJkXCI6NjgsXCJlXCI6NjksXCJmXCI6NzAsXCJnXCI6NzEsXCJoXCI6NzIsXCJpXCI6NzMsXCJqXCI6NzQsXCJrXCI6NzUsXCJsXCI6NzYsXCJtXCI6NzcsXCJuXCI6NzgsXCJvXCI6NzksXCJwXCI6ODAsXCJxXCI6ODEsXCJyXCI6ODIsXCJzXCI6ODMsXCJ0XCI6ODQsXCJ1XCI6ODUsXCJ2XCI6ODYsXCJ3XCI6ODcsXCJ4XCI6ODgsXCJ5XCI6ODksXCJ6XCI6OTB9XG5za3MgPSBbIHsgcSA6IChrbVtcIjIwMDF1cGRhdGVcIltpXV0gZm9yIGkgaW4gWzAuLjldKSwgaSA6IDAsIGMgOiAtPiBVdGlscy51cGRhdGVUYW5nZXJpbmUoIC0+IFV0aWxzLm1pZEFsZXJ0KFwiVXBkYXRlZCwgcGxlYXNlIHJlZnJlc2guXCIpICkgfSBdXG4kKGRvY3VtZW50KS5rZXlkb3duIChlKSAtPiAoIGlmIGUua2V5Q29kZSA9PSBza3Nbal0ucVtza3Nbal0uaSsrXSB0aGVuIHNrc1tqXVsnYyddKCkgaWYgc2tzW2pdLmkgPT0gc2tzW2pdLnEubGVuZ3RoIGVsc2Ugc2tzW2pdLmkgPSAwICkgZm9yIHNrLCBqIGluIHNrc1xuXG5cblN0cmluZy5wcm90b3R5cGUuc2FmZXR5RGFuY2UgPSAtPiB0aGlzLnJlcGxhY2UoL1xccy9nLCBcIl9cIikucmVwbGFjZSgvW15hLXpBLVowLTlfXS9nLFwiXCIpXG5TdHJpbmcucHJvdG90eXBlLmRhdGFiYXNlU2FmZXR5RGFuY2UgPSAtPiB0aGlzLnJlcGxhY2UoL1xccy9nLCBcIl9cIikudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtejAtOV8tXS9nLFwiXCIpXG5TdHJpbmcucHJvdG90eXBlLmNvdW50ID0gKHN1YnN0cmluZykgLT4gdGhpcy5tYXRjaChuZXcgUmVnRXhwIHN1YnN0cmluZywgXCJnXCIpPy5sZW5ndGggfHwgMFxuXG5cblxuTWF0aC5hdmUgPSAtPlxuICByZXN1bHQgPSAwXG4gIHJlc3VsdCArPSB4IGZvciB4IGluIGFyZ3VtZW50c1xuICByZXN1bHQgLz0gYXJndW1lbnRzLmxlbmd0aFxuICByZXR1cm4gcmVzdWx0XG5cbk1hdGguaXNJbnQgICAgPSAtPiByZXR1cm4gdHlwZW9mIG4gPT0gJ251bWJlcicgJiYgcGFyc2VGbG9hdChuKSA9PSBwYXJzZUludChuLCAxMCkgJiYgIWlzTmFOKG4pXG5NYXRoLmRlY2ltYWxzID0gKG51bSwgZGVjaW1hbHMpIC0+IG0gPSBNYXRoLnBvdyggMTAsIGRlY2ltYWxzICk7IG51bSAqPSBtOyBudW0gPSAgbnVtKyhgbnVtPDA/LTAuNTorMC41YCk+PjA7IG51bSAvPSBtXG5NYXRoLmNvbW1hcyAgID0gKG51bSkgLT4gcGFyc2VJbnQobnVtKS50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIFwiLFwiKVxuTWF0aC5saW1pdCAgICA9IChtaW4sIG51bSwgbWF4KSAtPiBNYXRoLm1heChtaW4sIE1hdGgubWluKG51bSwgbWF4KSlcblxuIyBtZXRob2QgbmFtZSBzbGlnaHRseSBtaXNsZWFkaW5nXG4jIHJldHVybnMgdHJ1ZSBmb3IgZmFsc3kgdmFsdWVzXG4jICAgbnVsbCwgdW5kZWZpbmVkLCBhbmQgJ1xccyonXG4jIG90aGVyIGZhbHNlIHZhbHVlcyBsaWtlXG4jICAgZmFsc2UsIDBcbiMgcmV0dXJuIGZhbHNlXG5fLmlzRW1wdHlTdHJpbmcgPSAoIGFTdHJpbmcgKSAtPlxuICByZXR1cm4gdHJ1ZSBpZiBhU3RyaW5nIGlzIG51bGwgb3IgYVN0cmluZyBpcyB1bmRlZmluZWRcbiAgcmV0dXJuIGZhbHNlIHVubGVzcyBfLmlzU3RyaW5nKGFTdHJpbmcpIG9yIF8uaXNOdW1iZXIoYVN0cmluZylcbiAgYVN0cmluZyA9IFN0cmluZyhhU3RyaW5nKSBpZiBfLmlzTnVtYmVyKGFTdHJpbmcpXG4gIHJldHVybiB0cnVlIGlmIGFTdHJpbmcucmVwbGFjZSgvXFxzKi8sICcnKSA9PSAnJ1xuICByZXR1cm4gZmFsc2VcblxuXy5wcm90b3R5cGUuaXNFbXB0eVN0cmluZyA9IC0+XG4gIF8uaXNFbXB0eVN0cmluZyhAX3dyYXBwZWQpXG5cbl8uaW5kZXhCeSA9ICggcHJvcGVydHlOYW1lLCBvYmplY3RBcnJheSApIC0+XG4gIHJlc3VsdCA9IHt9XG4gIGZvciBvbmVPYmplY3QgaW4gb2JqZWN0QXJyYXlcbiAgICBpZiBvbmVPYmplY3RbcHJvcGVydHlOYW1lXT9cbiAgICAgIGtleSA9IG9uZU9iamVjdFtwcm9wZXJ0eU5hbWVdXG4gICAgICByZXN1bHRba2V5XSA9IFtdIGlmIG5vdCByZXN1bHRba2V5XT9cbiAgICAgIHJlc3VsdFtrZXldLnB1c2gob25lT2JqZWN0KVxuICByZXR1cm4gcmVzdWx0XG5cbl8ucHJvdG90eXBlLmluZGV4QnkgPSAoIGluZGV4ICkgLT5cblxuICBhbkFycmF5ID0gQF93cmFwcGVkXG4gIGFuQXJyYXkgPSBAX3dyYXBwZWQubW9kZWxzIGlmIEBfd3JhcHBlZC5tb2RlbHM/XG5cbiAgXy5pbmRleEJ5KGluZGV4LCBhbkFycmF5KVxuXG5fLnByb3RvdHlwZS50YWxseSA9IC0+XG4gIF8udGFsbHkoQF93cmFwcGVkKVxuXG5fLnRhbGx5ID0gKCBhbkFycmF5ICkgLT5cbiAgY291bnRzID0ge31cbiAgZm9yIGVsZW1lbnQgaW4gYW5BcnJheVxuICAgIGlmIGVsZW1lbnQ/XG4gICAgICBjb3VudHNbZWxlbWVudF0gPSAwIHVubGVzcyBjb3VudHNbZWxlbWVudF0/XG4gICAgICBjb3VudHNbZWxlbWVudF0rK1xuICBjb3VudHNcblxuXG5cbmNsYXNzIFV0aWxzXG5cblxuICBAY2hhbmdlTGFuZ3VhZ2UgOiAoY29kZSwgY2FsbGJhY2spIC0+XG4gICAgaTE4bi5zZXRMbmcgY29kZSwgY2FsbGJhY2tcblxuICBAcmVzYXZlOiAoKSAtPlxuICAgIHVwZGF0ZU1vZGVscyA9IChtb2RlbHMsIGNhbGxiYWNrKSAtPlxuICAgICAgaWYgbW9kZWxzLmxlbmd0aCBpcyAwXG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpXG4gICAgICBtb2RlbHMucG9wKCkuc2F2ZSBudWxsLFxuICAgICAgICBzdWNjZXNzOiAobW9kZWwpIC0+XG4gICAgICAgICAgY29uc29sZS5sb2cgbW9kZWwudXJsXG4gICAgICAgICAgdXBkYXRlTW9kZWxzKG1vZGVscywgY2FsbGJhY2spXG5cblxuICAgIHVwZGF0ZUNvbGxlY3Rpb25zID0gKGNvbGxlY3Rpb25zLCBjYWxsYmFjaykgLT5cbiAgICAgIGlmIGNvbGxlY3Rpb25zLmxlbmd0aCBpcyAwXG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpXG5cbiAgICAgIGNvbGxlY3Rpb24gPSBuZXcgKGNvbGxlY3Rpb25zLnBvcCgpKVxuICAgICAgY29sbGVjdGlvbi5mZXRjaFxuICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgIHVwZGF0ZU1vZGVscyBjb2xsZWN0aW9uLCAtPlxuICAgICAgICAgICAgdXBkYXRlQ29sbGVjdGlvbnMoIGNvbGxlY3Rpb25zLCBjYWxsYmFjayApXG5cbiAgICB1cGRhdGVDb2xsZWN0aW9ucyBbIEFzc2Vzc21lbnRzLCBTdWJ0ZXN0cywgUXVlc3Rpb25zIF0sIC0+XG4gICAgICBjb25zb2xlLmxvZyBcIkFsbCBkb25lXCJcblxuXG5cbiAgQGV4ZWN1dGU6ICggZnVuY3Rpb25zICkgLT5cblxuICAgIHN0ZXAgPSAtPlxuICAgICAgbmV4dEZ1bmN0aW9uID0gZnVuY3Rpb25zLnNoaWZ0KClcbiAgICAgIG5leHRGdW5jdGlvbj8oc3RlcClcbiAgICBzdGVwKClcblxuICBAbG9hZENvbGxlY3Rpb25zIDogKCBsb2FkT3B0aW9ucyApIC0+XG5cbiAgICB0aHJvdyBcIllvdSdyZSBnb25uYSB3YW50IGEgY2FsbGJhY2sgaW4gdGhlcmUsIGJ1ZGR5LlwiIHVubGVzcyBsb2FkT3B0aW9ucy5jb21wbGV0ZT9cblxuICAgIHRvTG9hZCA9IGxvYWRPcHRpb25zLmNvbGxlY3Rpb25zIHx8IFtdXG5cbiAgICBnZXROZXh0ID0gKG9wdGlvbnMpIC0+XG4gICAgICBpZiBjdXJyZW50ID0gdG9Mb2FkLnBvcCgpXG4gICAgICAgIG1lbWJlck5hbWUgPSBjdXJyZW50LnVuZGVyc2NvcmUoKS5jYW1lbGl6ZSh0cnVlKVxuICAgICAgICBvcHRpb25zW21lbWJlck5hbWVdID0gbmV3IHdpbmRvd1tjdXJyZW50XVxuICAgICAgICBvcHRpb25zW21lbWJlck5hbWVdLmZldGNoXG4gICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgIGdldE5leHQgb3B0aW9uc1xuICAgICAgZWxzZVxuICAgICAgICBsb2FkT3B0aW9ucy5jb21wbGV0ZSBvcHRpb25zXG5cbiAgICBnZXROZXh0IHt9XG5cbiAgQHVuaXZlcnNhbFVwbG9hZDogLT5cbiAgICAkLmFqYXhcbiAgICAgIHVybDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybFZpZXcoXCJsb2NhbFwiLCBcImJ5Q29sbGVjdGlvblwiKVxuICAgICAgdHlwZTogXCJQT1NUXCJcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIlxuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShcbiAgICAgICAga2V5cyA6IFtcInJlc3VsdFwiXVxuICAgICAgKVxuICAgICAgc3VjY2VzczogKGRhdGEpIC0+XG4gICAgICAgIGRvY0xpc3QgPSBfLnBsdWNrKGRhdGEucm93cyxcImlkXCIpXG5cbiAgICAgICAgJC5jb3VjaC5yZXBsaWNhdGUoXG4gICAgICAgICAgVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKFwibG9jYWxcIiksXG4gICAgICAgICAgVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKFwiZ3JvdXBcIiksXG4gICAgICAgICAgICBzdWNjZXNzOiA9PlxuICAgICAgICAgICAgICBVdGlscy5zdGlja3kgXCJSZXN1bHRzIHN5bmNlZCB0byBjbG91ZCBzdWNjZXNzZnVsbHkuXCJcbiAgICAgICAgICAgIGVycm9yOiAoY29kZSwgbWVzc2FnZSkgPT5cbiAgICAgICAgICAgICAgVXRpbHMuc3RpY2t5IFwiVXBsb2FkIGVycm9yPGJyPiN7Y29kZX0gI3ttZXNzYWdlfVwiXG4gICAgICAgICAgLFxuICAgICAgICAgICAgZG9jX2lkczogZG9jTGlzdFxuICAgICAgICApXG5cbiAgQHJlc3RhcnRUYW5nZXJpbmU6IChtZXNzYWdlLCBjYWxsYmFjaykgLT5cbiAgICBVdGlscy5taWRBbGVydCBcIiN7bWVzc2FnZSB8fCAnUmVzdGFydGluZyBUYW5nZXJpbmUnfVwiXG4gICAgXy5kZWxheSggLT5cbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICBjYWxsYmFjaz8oKVxuICAgICwgMjAwMCApXG5cbiAgQG9uVXBkYXRlU3VjY2VzczogKHRvdGFsRG9jcykgLT5cbiAgICBVdGlscy5kb2N1bWVudENvdW50ZXIrK1xuICAgIGlmIFV0aWxzLmRvY3VtZW50Q291bnRlciA9PSB0b3RhbERvY3NcbiAgICAgIFV0aWxzLnJlc3RhcnRUYW5nZXJpbmUgXCJVcGRhdGUgc3VjY2Vzc2Z1bFwiLCAtPlxuICAgICAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiXCIsIGZhbHNlXG4gICAgICBVdGlscy5kb2N1bWVudENvdW50ZXIgPSBudWxsXG5cblxuICBAdXBkYXRlVGFuZ2VyaW5lOiAoZG9SZXNvbHZlID0gdHJ1ZSwgb3B0aW9ucyA9IHt9KSAtPlxuXG4gICAgcmV0dXJuIHVubGVzcyBUYW5nZXJpbmUudXNlci5pc0FkbWluKClcblxuICAgIFV0aWxzLmRvY3VtZW50Q291bnRlciA9IDBcblxuICAgIGREb2MgPSBcIm9qYWlcIlxuICAgIHRhcmdldERCID0gb3B0aW9ucy50YXJnZXREQiB8fCBUYW5nZXJpbmUuZGJfbmFtZVxuICAgIGRvY0lkcyA9IG9wdGlvbnMuZG9jSWRzIHx8IFtcIl9kZXNpZ24vI3tkRG9jfVwiLCBcImNvbmZpZ3VyYXRpb25cIl1cblxuXG4gICAgVXRpbHMubWlkQWxlcnQgXCJVcGRhdGluZy4uLlwiXG4gICAgVXRpbHMud29ya2luZyB0cnVlXG4gICAgIyBzYXZlIG9sZCByZXYgZm9yIGxhdGVyXG4gICAgVGFuZ2VyaW5lLiRkYi5hbGxEb2NzXG4gICAgICBrZXlzIDogZG9jSWRzXG4gICAgICBzdWNjZXNzOiAocmVzcG9uc2UpIC0+XG4gICAgICAgIG9sZERvY3MgPSBbXVxuICAgICAgICBmb3Igcm93IGluIHJlc3BvbnNlLnJvd3NcbiAgICAgICAgICBvbGREb2NzLnB1c2gge1xuICAgICAgICAgICAgXCJfaWRcIiAgOiByb3cuaWRcbiAgICAgICAgICAgIFwiX3JldlwiIDogcm93LnZhbHVlLnJldlxuICAgICAgICAgIH1cbiAgICAgICAgIyByZXBsaWNhdGUgZnJvbSB1cGRhdGUgZGF0YWJhc2VcbiAgICAgICAgJC5jb3VjaC5yZXBsaWNhdGUgVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKFwidXBkYXRlXCIpLCB0YXJnZXREQixcbiAgICAgICAgICBlcnJvcjogKGVycm9yKSAtPlxuICAgICAgICAgICAgVXRpbHMud29ya2luZyBmYWxzZVxuICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJVcGRhdGUgZmFpbGVkIHJlcGxpY2F0aW5nPGJyPiN7ZXJyb3J9XCJcbiAgICAgICAgICAgIFV0aWxzLmRvY3VtZW50Q291bnRlciA9IG51bGxcbiAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgdW5sZXNzIGRvUmVzb2x2ZVxuICAgICAgICAgICAgICBVdGlscy5vblVwZGF0ZVN1Y2Nlc3MoMSlcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB0b3RhbERvY3MgPSBkb2NJZHMubGVuZ3RoXG4gICAgICAgICAgICBmb3IgZG9jSWQsIGkgaW4gZG9jSWRzXG4gICAgICAgICAgICAgIG9sZERvYyA9IG9sZERvY3NbaV1cbiAgICAgICAgICAgICAgZG8gKGRvY0lkLCBvbGREb2MsIHRvdGFsRG9jcykgLT5cbiAgICAgICAgICAgICAgICBUYW5nZXJpbmUuJGRiLm9wZW5Eb2MgZG9jSWQsXG4gICAgICAgICAgICAgICAgICBjb25mbGljdHM6IHRydWVcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IChkYXRhKSAtPlxuICAgICAgICAgICAgICAgICAgICBpZiBkYXRhLl9jb25mbGljdHM/XG4gICAgICAgICAgICAgICAgICAgICAgVGFuZ2VyaW5lLiRkYi5yZW1vdmVEb2Mgb2xkRG9jLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHMud29ya2luZyBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICBVdGlscy5vblVwZGF0ZVN1Y2Nlc3ModG90YWxEb2NzKVxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IChlcnJvcikgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgVXRpbHMuZG9jdW1lbnRDb3VudGVyID0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICBVdGlscy53b3JraW5nIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiVXBkYXRlIGZhaWxlZCByZXNvbHZpbmcgY29uZmxpY3Q8YnI+I3tlcnJvcn1cIlxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgVXRpbHMub25VcGRhdGVTdWNjZXNzKHRvdGFsRG9jcylcbiAgICAgICAgLCBkb2NfaWRzIDogZG9jSWRzXG5cbiAgQGxvZzogKHNlbGYsIGVycm9yKSAtPlxuICAgIGNsYXNzTmFtZSA9IHNlbGYuY29uc3RydWN0b3IudG9TdHJpbmcoKS5tYXRjaCgvZnVuY3Rpb25cXHMqKFxcdyspLylbMV1cbiAgICBjb25zb2xlLmxvZyBcIiN7Y2xhc3NOYW1lfTogI3tlcnJvcn1cIlxuXG4gICMgaWYgYXJncyBpcyBvbmUgb2JqZWN0IHNhdmUgaXQgdG8gdGVtcG9yYXJ5IGhhc2hcbiAgIyBpZiB0d28gc3RyaW5ncywgc2F2ZSBrZXkgdmFsdWUgcGFpclxuICAjIGlmIG9uZSBzdHJpbmcsIHVzZSBhcyBrZXksIHJldHVybiB2YWx1ZVxuICBAZGF0YTogKGFyZ3MuLi4pIC0+XG4gICAgaWYgYXJncy5sZW5ndGggPT0gMVxuICAgICAgYXJnID0gYXJnc1swXVxuICAgICAgaWYgXy5pc1N0cmluZyhhcmcpXG4gICAgICAgIHJldHVybiBUYW5nZXJpbmUudGVtcERhdGFbYXJnXVxuICAgICAgZWxzZSBpZiBfLmlzT2JqZWN0KGFyZylcbiAgICAgICAgVGFuZ2VyaW5lLnRlbXBEYXRhID0gJC5leHRlbmQoVGFuZ2VyaW5lLnRlbXBEYXRhLCBhcmcpXG4gICAgICBlbHNlIGlmIGFyZyA9PSBudWxsXG4gICAgICAgIFRhbmdlcmluZS50ZW1wRGF0YSA9IHt9XG4gICAgZWxzZSBpZiBhcmdzLmxlbmd0aCA9PSAyXG4gICAgICBrZXkgPSBhcmdzWzBdXG4gICAgICB2YWx1ZSA9IGFyZ3NbMV1cbiAgICAgIFRhbmdlcmluZS50ZW1wRGF0YVtrZXldID0gdmFsdWVcbiAgICAgIHJldHVybiBUYW5nZXJpbmUudGVtcERhdGFcbiAgICBlbHNlIGlmIGFyZ3MubGVuZ3RoID09IDBcbiAgICAgIHJldHVybiBUYW5nZXJpbmUudGVtcERhdGFcblxuXG4gIEB3b3JraW5nOiAoaXNXb3JraW5nKSAtPlxuICAgIGlmIGlzV29ya2luZ1xuICAgICAgaWYgbm90IFRhbmdlcmluZS5sb2FkaW5nVGltZXI/XG4gICAgICAgIFRhbmdlcmluZS5sb2FkaW5nVGltZXIgPSBzZXRUaW1lb3V0KFV0aWxzLnNob3dMb2FkaW5nSW5kaWNhdG9yLCAzMDAwKVxuICAgIGVsc2VcbiAgICAgIGlmIFRhbmdlcmluZS5sb2FkaW5nVGltZXI/XG4gICAgICAgIGNsZWFyVGltZW91dCBUYW5nZXJpbmUubG9hZGluZ1RpbWVyXG4gICAgICAgIFRhbmdlcmluZS5sb2FkaW5nVGltZXIgPSBudWxsXG5cbiAgICAgICQoXCIubG9hZGluZ19iYXJcIikucmVtb3ZlKClcblxuICBAc2hvd0xvYWRpbmdJbmRpY2F0b3I6IC0+XG4gICAgJChcIjxkaXYgY2xhc3M9J2xvYWRpbmdfYmFyJz48aW1nIGNsYXNzPSdsb2FkaW5nJyBzcmM9J2ltYWdlcy9sb2FkaW5nLmdpZic+PC9kaXY+XCIpLmFwcGVuZFRvKFwiYm9keVwiKS5taWRkbGVDZW50ZXIoKVxuXG4gICMgYXNrcyBmb3IgY29uZmlybWF0aW9uIGluIHRoZSBicm93c2VyLCBhbmQgdXNlcyBwaG9uZWdhcCBmb3IgY29vbCBjb25maXJtYXRpb25cbiAgQGNvbmZpcm06IChtZXNzYWdlLCBvcHRpb25zKSAtPlxuICAgIGlmIG5hdmlnYXRvci5ub3RpZmljYXRpb24/LmNvbmZpcm0/XG4gICAgICBuYXZpZ2F0b3Iubm90aWZpY2F0aW9uLmNvbmZpcm0gbWVzc2FnZSxcbiAgICAgICAgKGlucHV0KSAtPlxuICAgICAgICAgIGlmIGlucHV0ID09IDFcbiAgICAgICAgICAgIG9wdGlvbnMuY2FsbGJhY2sgdHJ1ZVxuICAgICAgICAgIGVsc2UgaWYgaW5wdXQgPT0gMlxuICAgICAgICAgICAgb3B0aW9ucy5jYWxsYmFjayBmYWxzZVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIG9wdGlvbnMuY2FsbGJhY2sgaW5wdXRcbiAgICAgICwgb3B0aW9ucy50aXRsZSwgb3B0aW9ucy5hY3Rpb24rXCIsQ2FuY2VsXCJcbiAgICBlbHNlXG4gICAgICBpZiB3aW5kb3cuY29uZmlybSBtZXNzYWdlXG4gICAgICAgIG9wdGlvbnMuY2FsbGJhY2sgdHJ1ZVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgZWxzZVxuICAgICAgICBvcHRpb25zLmNhbGxiYWNrIGZhbHNlXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIHJldHVybiAwXG5cbiAgIyB0aGlzIGZ1bmN0aW9uIGlzIGEgbG90IGxpa2UgalF1ZXJ5LnNlcmlhbGl6ZUFycmF5LCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHVzZWZ1bCBvdXRwdXRcbiAgIyB3b3JrcyBvbiB0ZXh0YXJlYXMsIGlucHV0IHR5cGUgdGV4dCBhbmQgcGFzc3dvcmRcbiAgQGdldFZhbHVlczogKCBzZWxlY3RvciApIC0+XG4gICAgdmFsdWVzID0ge31cbiAgICAkKHNlbGVjdG9yKS5maW5kKFwiaW5wdXRbdHlwZT10ZXh0XSwgaW5wdXRbdHlwZT1wYXNzd29yZF0sIHRleHRhcmVhXCIpLmVhY2ggKCBpbmRleCwgZWxlbWVudCApIC0+XG4gICAgICB2YWx1ZXNbZWxlbWVudC5pZF0gPSBlbGVtZW50LnZhbHVlXG4gICAgcmV0dXJuIHZhbHVlc1xuXG4gICMgY29udmVydHMgdXJsIGVzY2FwZWQgY2hhcmFjdGVyc1xuICBAY2xlYW5VUkw6ICh1cmwpIC0+XG4gICAgaWYgdXJsLmluZGV4T2Y/KFwiJVwiKSAhPSAtMVxuICAgICAgdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50IHVybFxuICAgIGVsc2VcbiAgICAgIHVybFxuXG4gICMgRGlzcG9zYWJsZSBhbGVydHNcbiAgQHRvcEFsZXJ0OiAoYWxlcnRUZXh0LCBkZWxheSA9IDIwMDApIC0+XG4gICAgVXRpbHMuYWxlcnQgXCJ0b3BcIiwgYWxlcnRUZXh0LCBkZWxheVxuXG4gIEBtaWRBbGVydDogKGFsZXJ0VGV4dCwgZGVsYXk9MjAwMCkgLT5cbiAgICBVdGlscy5hbGVydCBcIm1pZGRsZVwiLCBhbGVydFRleHQsIGRlbGF5XG5cbiAgQGFsZXJ0OiAoIHdoZXJlLCBhbGVydFRleHQsIGRlbGF5ID0gMjAwMCApIC0+XG5cbiAgICBzd2l0Y2ggd2hlcmVcbiAgICAgIHdoZW4gXCJ0b3BcIlxuICAgICAgICBzZWxlY3RvciA9IFwiLnRvcF9hbGVydFwiXG4gICAgICAgIGFsaWduZXIgPSAoICRlbCApIC0+IHJldHVybiAkZWwudG9wQ2VudGVyKClcbiAgICAgIHdoZW4gXCJtaWRkbGVcIlxuICAgICAgICBzZWxlY3RvciA9IFwiLm1pZF9hbGVydFwiXG4gICAgICAgIGFsaWduZXIgPSAoICRlbCApIC0+IHJldHVybiAkZWwubWlkZGxlQ2VudGVyKClcblxuXG4gICAgaWYgVXRpbHNbXCIje3doZXJlfUFsZXJ0VGltZXJcIl0/XG4gICAgICBjbGVhclRpbWVvdXQgVXRpbHNbXCIje3doZXJlfUFsZXJ0VGltZXJcIl1cbiAgICAgICRhbGVydCA9ICQoc2VsZWN0b3IpXG4gICAgICAkYWxlcnQuaHRtbCggJGFsZXJ0Lmh0bWwoKSArIFwiPGJyPlwiICsgYWxlcnRUZXh0IClcbiAgICBlbHNlXG4gICAgICAkYWxlcnQgPSAkKFwiPGRpdiBjbGFzcz0nI3tzZWxlY3Rvci5zdWJzdHJpbmcoMSl9IGRpc3Bvc2FibGVfYWxlcnQnPiN7YWxlcnRUZXh0fTwvZGl2PlwiKS5hcHBlbmRUbyhcIiNjb250ZW50XCIpXG5cbiAgICBhbGlnbmVyKCRhbGVydClcblxuICAgIGRvICgkYWxlcnQsIHNlbGVjdG9yLCBkZWxheSkgLT5cbiAgICAgIGNvbXB1dGVkRGVsYXkgPSAoKFwiXCIrJGFsZXJ0Lmh0bWwoKSkubWF0Y2goLzxicj4vZyl8fFtdKS5sZW5ndGggKiAxNTAwXG4gICAgICBVdGlsc1tcIiN7d2hlcmV9QWxlcnRUaW1lclwiXSA9IHNldFRpbWVvdXQgLT5cbiAgICAgICAgICBVdGlsc1tcIiN7d2hlcmV9QWxlcnRUaW1lclwiXSA9IG51bGxcbiAgICAgICAgICAkYWxlcnQuZmFkZU91dCgyNTAsIC0+ICQodGhpcykucmVtb3ZlKCkgKVxuICAgICAgLCBNYXRoLm1heChjb21wdXRlZERlbGF5LCBkZWxheSlcblxuXG5cbiAgQHN0aWNreTogKGh0bWwsIGJ1dHRvblRleHQgPSBcIkNsb3NlXCIsIGNhbGxiYWNrLCBwb3NpdGlvbiA9IFwibWlkZGxlXCIpIC0+XG4gICAgZGl2ID0gJChcIjxkaXYgY2xhc3M9J3N0aWNreV9hbGVydCc+I3todG1sfTxicj48YnV0dG9uIGNsYXNzPSdjb21tYW5kIHBhcmVudF9yZW1vdmUnPiN7YnV0dG9uVGV4dH08L2J1dHRvbj48L2Rpdj5cIikuYXBwZW5kVG8oXCIjY29udGVudFwiKVxuICAgIGlmIHBvc2l0aW9uID09IFwibWlkZGxlXCJcbiAgICAgIGRpdi5taWRkbGVDZW50ZXIoKVxuICAgIGVsc2UgaWYgcG9zaXRpb24gPT0gXCJ0b3BcIlxuICAgICAgZGl2LnRvcENlbnRlcigpXG4gICAgZGl2Lm9uKFwia2V5dXBcIiwgKGV2ZW50KSAtPiBpZiBldmVudC53aGljaCA9PSAyNyB0aGVuICQodGhpcykucmVtb3ZlKCkpLmZpbmQoXCJidXR0b25cIikuY2xpY2sgY2FsbGJhY2tcblxuICBAdG9wU3RpY2t5OiAoaHRtbCwgYnV0dG9uVGV4dCA9IFwiQ2xvc2VcIiwgY2FsbGJhY2spIC0+XG4gICAgVXRpbHMuc3RpY2t5KGh0bWwsIGJ1dHRvblRleHQsIGNhbGxiYWNrLCBcInRvcFwiKVxuXG5cblxuICBAbW9kYWw6IChodG1sKSAtPlxuICAgIGlmIGh0bWwgPT0gZmFsc2VcbiAgICAgICQoXCIjbW9kYWxfYmFjaywgI21vZGFsXCIpLnJlbW92ZSgpXG4gICAgICByZXR1cm5cblxuICAgICQoXCJib2R5XCIpLnByZXBlbmQoXCI8ZGl2IGlkPSdtb2RhbF9iYWNrJz48L2Rpdj5cIilcbiAgICAkKFwiPGRpdiBpZD0nbW9kYWwnPiN7aHRtbH08L2Rpdj5cIikuYXBwZW5kVG8oXCIjY29udGVudFwiKS5taWRkbGVDZW50ZXIoKS5vbihcImtleXVwXCIsIChldmVudCkgLT4gaWYgZXZlbnQud2hpY2ggPT0gMjcgdGhlbiAkKFwiI21vZGFsX2JhY2ssICNtb2RhbFwiKS5yZW1vdmUoKSlcblxuICBAcGFzc3dvcmRQcm9tcHQ6IChjYWxsYmFjaykgLT5cbiAgICBodG1sID0gXCJcbiAgICAgIDxkaXYgaWQ9J3Bhc3NfZm9ybScgdGl0bGU9J1VzZXIgdmVyaWZpY2F0aW9uJz5cbiAgICAgICAgPGxhYmVsIGZvcj0ncGFzc3dvcmQnPlBsZWFzZSByZS1lbnRlciB5b3VyIHBhc3N3b3JkPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IGlkPSdwYXNzX3ZhbCcgdHlwZT0ncGFzc3dvcmQnIG5hbWU9J3Bhc3N3b3JkJyBpZD0ncGFzc3dvcmQnIHZhbHVlPScnPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPSdjb21tYW5kJyBkYXRhLXZlcmlmeT0ndHJ1ZSc+VmVyaWZ5PC9idXR0b24+XG4gICAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQnPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgXCJcblxuICAgIFV0aWxzLm1vZGFsIGh0bWxcblxuICAgICRwYXNzID0gJChcIiNwYXNzX3ZhbFwiKVxuICAgICRidXR0b24gPSAkKFwiI3Bhc3NfZm9ybSBidXR0b25cIilcblxuICAgICRwYXNzLm9uIFwia2V5dXBcIiwgKGV2ZW50KSAtPlxuICAgICAgcmV0dXJuIHRydWUgdW5sZXNzIGV2ZW50LndoaWNoID09IDEzXG4gICAgICAkYnV0dG9uLm9mZiBcImNsaWNrXCJcbiAgICAgICRwYXNzLm9mZiBcImNoYW5nZVwiXG5cbiAgICAgIGNhbGxiYWNrICRwYXNzLnZhbCgpXG4gICAgICBVdGlscy5tb2RhbCBmYWxzZVxuXG4gICAgJGJ1dHRvbi5vbiBcImNsaWNrXCIsIChldmVudCkgLT5cbiAgICAgICRidXR0b24ub2ZmIFwiY2xpY2tcIlxuICAgICAgJHBhc3Mub2ZmIFwiY2hhbmdlXCJcblxuICAgICAgY2FsbGJhY2sgJHBhc3MudmFsKCkgaWYgJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLXZlcmlmeVwiKSA9PSBcInRydWVcIlxuXG4gICAgICBVdGlscy5tb2RhbCBmYWxzZVxuXG5cblxuICAjIHJldHVybnMgYSBHVUlEXG4gIEBndWlkOiAtPlxuICAgcmV0dXJuIEBTNCgpK0BTNCgpK1wiLVwiK0BTNCgpK1wiLVwiK0BTNCgpK1wiLVwiK0BTNCgpK1wiLVwiK0BTNCgpK0BTNCgpK0BTNCgpXG4gIEBTNDogLT5cbiAgIHJldHVybiAoICggKCAxICsgTWF0aC5yYW5kb20oKSApICogMHgxMDAwMCApIHwgMCApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSlcblxuICBAaHVtYW5HVUlEOiAtPiByZXR1cm4gQHJhbmRvbUxldHRlcnMoNCkrXCItXCIrQHJhbmRvbUxldHRlcnMoNCkrXCItXCIrQHJhbmRvbUxldHRlcnMoNClcbiAgQHNhZmVMZXR0ZXJzID0gXCJhYmNkZWZnaGlqbG1ub3BxcnN0dXZ3eHl6XCIuc3BsaXQoXCJcIilcbiAgQHJhbmRvbUxldHRlcnM6IChsZW5ndGgpIC0+XG4gICAgcmVzdWx0ID0gXCJcIlxuICAgIHdoaWxlIGxlbmd0aC0tXG4gICAgICByZXN1bHQgKz0gVXRpbHMuc2FmZUxldHRlcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKlV0aWxzLnNhZmVMZXR0ZXJzLmxlbmd0aCldXG4gICAgcmV0dXJuIHJlc3VsdFxuXG4gICMgdHVybnMgdGhlIGJvZHkgYmFja2dyb3VuZCBhIGNvbG9yIGFuZCB0aGVuIHJldHVybnMgdG8gd2hpdGVcbiAgQGZsYXNoOiAoY29sb3I9XCJyZWRcIiwgc2hvdWxkVHVybkl0T24gPSBudWxsKSAtPlxuXG4gICAgaWYgbm90IHNob3VsZFR1cm5JdE9uP1xuICAgICAgVXRpbHMuYmFja2dyb3VuZCBjb2xvclxuICAgICAgc2V0VGltZW91dCAtPlxuICAgICAgICBVdGlscy5iYWNrZ3JvdW5kIFwiXCJcbiAgICAgICwgMTAwMFxuXG4gIEBiYWNrZ3JvdW5kOiAoY29sb3IpIC0+XG4gICAgaWYgY29sb3I/XG4gICAgICAkKFwiI2NvbnRlbnRfd3JhcHBlclwiKS5jc3MgXCJiYWNrZ3JvdW5kQ29sb3JcIiA6IGNvbG9yXG4gICAgZWxzZVxuICAgICAgJChcIiNjb250ZW50X3dyYXBwZXJcIikuY3NzIFwiYmFja2dyb3VuZENvbG9yXCJcblxuICAjIFJldHJpZXZlcyBHRVQgdmFyaWFibGVzXG4gICMgaHR0cDovL2Vqb2huLm9yZy9ibG9nL3NlYXJjaC1hbmQtZG9udC1yZXBsYWNlL1xuICBAJF9HRVQ6IChxLCBzKSAtPlxuICAgIHZhcnMgPSB7fVxuICAgIHBhcnRzID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZSgvWz8mXSsoW149Jl0rKT0oW14mXSopL2dpLCAobSxrZXksdmFsdWUpIC0+XG4gICAgICAgIHZhbHVlID0gaWYgfnZhbHVlLmluZGV4T2YoXCIjXCIpIHRoZW4gdmFsdWUuc3BsaXQoXCIjXCIpWzBdIGVsc2UgdmFsdWVcbiAgICAgICAgdmFyc1trZXldID0gdmFsdWUuc3BsaXQoXCIjXCIpWzBdO1xuICAgIClcbiAgICB2YXJzXG5cblxuICAjIG5vdCBjdXJyZW50bHkgaW1wbGVtZW50ZWQgYnV0IHdvcmtpbmdcbiAgQHJlc2l6ZVNjcm9sbFBhbmU6IC0+XG4gICAgJChcIi5zY3JvbGxfcGFuZVwiKS5oZWlnaHQoICQod2luZG93KS5oZWlnaHQoKSAtICggJChcIiNuYXZpZ2F0aW9uXCIpLmhlaWdodCgpICsgJChcIiNmb290ZXJcIikuaGVpZ2h0KCkgKyAxMDApIClcblxuICAjIGFza3MgdXNlciBpZiB0aGV5IHdhbnQgdG8gbG9nb3V0XG4gIEBhc2tUb0xvZ291dDogLT4gVGFuZ2VyaW5lLnVzZXIubG9nb3V0KCkgaWYgY29uZmlybShcIldvdWxkIHlvdSBsaWtlIHRvIGxvZ291dCBub3c/XCIpXG5cbiAgQG9sZENvbnNvbGVMb2cgPSBudWxsXG4gIEBlbmFibGVDb25zb2xlTG9nOiAtPiByZXR1cm4gdW5sZXNzIG9sZENvbnNvbGVMb2c/IDsgd2luZG93LmNvbnNvbGUubG9nID0gb2xkQ29uc29sZUxvZ1xuICBAZGlzYWJsZUNvbnNvbGVMb2c6IC0+IG9sZENvbnNvbGVMb2cgPSBjb25zb2xlLmxvZyA7IHdpbmRvdy5jb25zb2xlLmxvZyA9ICQubm9vcFxuXG4gIEBvbGRDb25zb2xlQXNzZXJ0ID0gbnVsbFxuICBAZW5hYmxlQ29uc29sZUFzc2VydDogLT4gcmV0dXJuIHVubGVzcyBvbGRDb25zb2xlQXNzZXJ0PyAgICA7IHdpbmRvdy5jb25zb2xlLmFzc2VydCA9IG9sZENvbnNvbGVBc3NlcnRcbiAgQGRpc2FibGVDb25zb2xlQXNzZXJ0OiAtPiBvbGRDb25zb2xlQXNzZXJ0ID0gY29uc29sZS5hc3NlcnQgOyB3aW5kb3cuY29uc29sZS5hc3NlcnQgPSAkLm5vb3BcblxuIyBSb2JiZXJ0IGludGVyZmFjZVxuY2xhc3MgUm9iYmVydFxuXG5cbiAgQGZldGNoVXNlcnM6IChncm91cCwgY2FsbGJhY2spIC0+XG4gICAgcmV0dXJuIFJvYmJlcnQucmVxXG4gICAgICB0eXBlOiAnR0VUJ1xuICAgICAgdXJsOiBcIi9ncm91cC8je2dyb3VwfVwiXG4gICAgICBzdWNjZXNzIDogY2FsbGJhY2tcbiAgICAgIGVycm9yIDogY2FsbGJhY2tcblxuICBAcmVxOiAob3B0aW9ucykgLT5cbiAgICBvcHRpb25zLnVybCA9IFRhbmdlcmluZS5jb25maWcuZ2V0KFwicm9iYmVydFwiKSArIG9wdGlvbnMudXJsXG4gICAgb3B0aW9ucy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIG9wdGlvbnMuYWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgb3B0aW9ucy5kYXRhVHlwZSA9ICdqc29uJ1xuICAgIG9wdGlvbnMuZGF0YSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuZGF0YSlcbiAgICBjb25zb2xlLmxvZyhvcHRpb25zKVxuICAgIHJldHVybiAkLmFqYXgob3B0aW9ucylcblxuICBAZmV0Y2hVc2VyOiAob3B0aW9ucykgLT5cbiAgICBSb2JiZXJ0LnJlcVxuICAgICAgdHlwZSA6ICdHRVQnXG4gICAgICB1cmwgIDogIFwiL3VzZXIvXCIgKyBUYW5nZXJpbmUudXNlci5nZXQoXCJuYW1lXCIpXG4gICAgICBzdWNjZXNzOiAoIGRhdGEgKSA9PlxuICAgICAgICBvcHRpb25zLnN1Y2Nlc3M/IGRhdGFcbiAgICAgIGVycm9yOiAoIGRhdGEgKSA9PlxuICAgICAgICBvcHRpb25zLmVycm9yPyBkYXRhXG5cbiAgQG5ld0dyb3VwOiAob3B0aW9ucykgLT5cbiAgICBSb2JiZXJ0LnJlcVxuICAgICAgdHlwZSA6ICdQVVQnXG4gICAgICB1cmwgIDogJy9ncm91cCdcbiAgICAgIGRhdGEgOlxuICAgICAgICBuYW1lIDogb3B0aW9ucy5uYW1lXG4gICAgICBzdWNjZXNzOiAoIGRhdGEgKSA9PlxuICAgICAgICBvcHRpb25zLnN1Y2Nlc3M/IGRhdGFcbiAgICAgIGVycm9yOiAoIGRhdGEgKSA9PlxuICAgICAgICBvcHRpb25zLmVycm9yPyBkYXRhXG5cbiAgQGxlYXZlR3JvdXA6IChvcHRpb25zKSAtPlxuICAgIFJvYmJlcnQucmVxXG4gICAgICB0eXBlIDogJ0RFTEVURSdcbiAgICAgIHVybCAgOiBcIi9ncm91cC8je29wdGlvbnMuZ3JvdXB9LyN7b3B0aW9ucy51c2VyfVwiXG4gICAgICBzdWNjZXNzOiAoIGRhdGEgKSA9PlxuICAgICAgICBvcHRpb25zLnN1Y2Nlc3M/IGRhdGFcbiAgICAgIGVycm9yOiAoIGRhdGEgKSA9PlxuICAgICAgICBvcHRpb25zLmVycm9yPyBkYXRhXG5cbiAgQHNpZ251cDogKG9wdGlvbnMpIC0+XG4gICAgcmV0dXJuIFJvYmJlcnQucmVxXG4gICAgICB0eXBlIDogJ1BVVCdcbiAgICAgIHVybCAgOiAnL3VzZXInXG4gICAgICBkYXRhIDpcbiAgICAgICAgbmFtZSA6IG9wdGlvbnMubmFtZVxuICAgICAgICBwYXNzIDogb3B0aW9ucy5wYXNzXG4gICAgICBzdWNjZXNzOiAoIGRhdGEgKSA9PlxuICAgICAgICBvcHRpb25zLnN1Y2Nlc3M/IGRhdGFcbiAgICAgIGVycm9yOiAoIGRhdGEgKSA9PlxuICAgICAgICBvcHRpb25zLmVycm9yPyBkYXRhXG5cbiAgQHJvbGVQb3N0OiAodXJsLCB1c2VyLCBjYWxsYmFjaykgLT5cbiAgICBvcHRpb25zID1cbiAgICAgIHR5cGUgOiAnUE9TVCdcbiAgICAgIHVybCA6IFwiL2dyb3VwLyN7VGFuZ2VyaW5lLnNldHRpbmdzLmdldChcImdyb3VwTmFtZVwiKX1cIiArIHVybFxuICAgICAgZGF0YSA6XG4gICAgICAgIHVzZXIgOiB1c2VyXG4gICAgICBzdWNjZXNzIDogY2FsbGJhY2tcbiAgICAgIGVycm9yIDogY2FsbGJhY2tcbiAgICAgIGNvbXBsZXRlIDogKHJlcykgLT5cbiAgICAgICAgVXRpbHMubWlkQWxlcnQgcmVzLnJlc3BvbnNlSlNPTi5tZXNzYWdlXG5cbiAgICByZXR1cm4gUm9iYmVydC5yZXEgb3B0aW9uc1xuXG4gIEBhZGRBZG1pbjogKHVzZXIsIGNhbGxiYWNrKSAtPiAgICAgUm9iYmVydC5yb2xlUG9zdCBcIi9hZGQtYWRtaW5cIiwgdXNlciwgY2FsbGJhY2tcbiAgQGFkZE1lbWJlcjogKHVzZXIsIGNhbGxiYWNrKSAtPiAgICBSb2JiZXJ0LnJvbGVQb3N0IFwiL2FkZC1tZW1iZXJcIiwgdXNlciwgY2FsbGJhY2tcbiAgQHJlbW92ZUFkbWluOiAodXNlciwgY2FsbGJhY2spIC0+ICBSb2JiZXJ0LnJvbGVQb3N0IFwiL3JlbW92ZS1hZG1pblwiLCB1c2VyLCBjYWxsYmFja1xuICBAcmVtb3ZlTWVtYmVyOiAodXNlciwgY2FsbGJhY2spIC0+IFJvYmJlcnQucm9sZVBvc3QgXCIvcmVtb3ZlLW1lbWJlclwiLCB1c2VyLCBjYWxsYmFja1xuXG5cbiMgVHJlZSBpbnRlcmZhY2VcbmNsYXNzIFRhbmdlcmluZVRyZWVcbiAgXG4gIEBtYWtlOiAob3B0aW9ucykgLT5cbiAgICBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzXG4gICAgZXJyb3IgPSBvcHRpb25zLmVycm9yXG4gICAgJC5hamF4XG4gICAgICB0eXBlICAgICA6ICdQT1NUJ1xuICAgICAgY3Jvc3NEb21haW4gOiB0cnVlXG4gICAgICB1cmwgICAgICA6IFwiI3tUYW5nZXJpbmUuY29uZmlnLmdldCgndHJlZScpfS9ncm91cC0je1RhbmdlcmluZS5zZXR0aW5ncy5nZXQoJ2dyb3VwTmFtZScpfS8je1RhbmdlcmluZS5zZXR0aW5ncy5nZXQoJ2hvc3RuYW1lJyl9XCJcbiAgICAgIGRhdGFUeXBlIDogJ2pzb24nXG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgIGRhdGEgICAgIDoge30gXG4gICAgICBzdWNjZXNzOiAoIGRhdGEgKSA9PlxuICAgICAgICBzdWNjZXNzIGRhdGFcbiAgICAgIGVycm9yOiAoIGRhdGEgKSA9PlxuICAgICAgICBlcnJvciBkYXRhLCBKU09OLnBhcnNlKGRhdGEucmVzcG9uc2VUZXh0KVxuICAgICAgY29tcGxldGU6IC0+XG4gICAgICAgIFV0aWxzLndvcmtpbmcgZmFsc2VcblxuIyNVSSBoZWxwZXJzXG4kIC0+XG4gICMgIyMjLmNsZWFyX21lc3NhZ2VcbiAgIyBUaGlzIGxpdHRsZSBndXkgd2lsbCBmYWRlIG91dCBhbmQgY2xlYXIgaGltIGFuZCBoaXMgcGFyZW50cy4gV3JhcCBoaW0gd2lzZWx5LlxuICAjIGA8c3Bhbj4gbXkgbWVzc2FnZSA8YnV0dG9uIGNsYXNzPVwiY2xlYXJfbWVzc2FnZVwiPlg8L2J1dHRvbj5gXG4gICQoXCIjY29udGVudFwiKS5vbihcImNsaWNrXCIsIFwiLmNsZWFyX21lc3NhZ2VcIiwgIG51bGwsIChhKSAtPiAkKGEudGFyZ2V0KS5wYXJlbnQoKS5mYWRlT3V0KDI1MCwgLT4gJCh0aGlzKS5lbXB0eSgpLnNob3coKSApIClcbiAgJChcIiNjb250ZW50XCIpLm9uKFwiY2xpY2tcIiwgXCIucGFyZW50X3JlbW92ZVwiLCBudWxsLCAoYSkgLT4gJChhLnRhcmdldCkucGFyZW50KCkuZmFkZU91dCgyNTAsIC0+ICQodGhpcykucmVtb3ZlKCkgKSApXG5cbiAgIyBkaXNwb3NhYmxlIGFsZXJ0cyA9IGEgbm9uLWZhbmN5IGJveFxuICAkKFwiI2NvbnRlbnRcIikub24gXCJjbGlja1wiLFwiLmFsZXJ0X2J1dHRvblwiLCAtPlxuICAgIGFsZXJ0X3RleHQgPSBpZiAkKHRoaXMpLmF0dHIoXCJkYXRhLWFsZXJ0XCIpIHRoZW4gJCh0aGlzKS5hdHRyKFwiZGF0YS1hbGVydFwiKSBlbHNlICQodGhpcykudmFsKClcbiAgICBVdGlscy5kaXNwb3NhYmxlQWxlcnQgYWxlcnRfdGV4dFxuICAkKFwiI2NvbnRlbnRcIikub24gXCJjbGlja1wiLCBcIi5kaXNwb3NhYmxlX2FsZXJ0XCIsIC0+XG4gICAgJCh0aGlzKS5zdG9wKCkuZmFkZU91dCAxMDAsIC0+XG4gICAgICAkKHRoaXMpLnJlbW92ZSgpXG5cbiAgIyAkKHdpbmRvdykucmVzaXplIFV0aWxzLnJlc2l6ZVNjcm9sbFBhbmVcbiAgIyBVdGlscy5yZXNpemVTY3JvbGxQYW5lKClcbiIsInZhciBSZXN1bHRPZkdyaWQsIFJlc3VsdE9mTXVsdGlwbGUsIFJlc3VsdE9mUHJldmlvdXMsIFJlc3VsdE9mUXVlc3Rpb24sIFJvYmJlcnQsIFRhbmdlcmluZSwgVGFuZ2VyaW5lVHJlZSwgVXRpbHMsIGksIGttLCBza3MsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgaW5kZXhPZiA9IFtdLmluZGV4T2YgfHwgZnVuY3Rpb24oaXRlbSkgeyBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7IGlmIChpIGluIHRoaXMgJiYgdGhpc1tpXSA9PT0gaXRlbSkgcmV0dXJuIGk7IH0gcmV0dXJuIC0xOyB9LFxuICBzbGljZSA9IFtdLnNsaWNlO1xuXG5CYWNrYm9uZS5FZGl0VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChFZGl0Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gRWRpdFZpZXcoKSB7XG4gICAgdGhpcy5lZGl0aW5nID0gYmluZCh0aGlzLmVkaXRpbmcsIHRoaXMpO1xuICAgIHRoaXMuZWRpdEluUGxhY2UgPSBiaW5kKHRoaXMuZWRpdEluUGxhY2UsIHRoaXMpO1xuICAgIHRoaXMuZ2V0RWRpdGFibGUgPSBiaW5kKHRoaXMuZ2V0RWRpdGFibGUsIHRoaXMpO1xuICAgIHJldHVybiBFZGl0Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEVkaXRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgXCJjbGljayAuZWRpdF9pbl9wbGFjZVwiOiBcImVkaXRJblBsYWNlXCIsXG4gICAgXCJmb2N1c291dCAuZWRpdGluZ1wiOiBcImVkaXRpbmdcIixcbiAgICBcImtleXVwICAgIC5lZGl0aW5nXCI6IFwiZWRpdGluZ1wiLFxuICAgIFwia2V5ZG93biAgLmVkaXRpbmdcIjogXCJlZGl0aW5nXCJcbiAgfTtcblxuICBFZGl0Vmlldy5wcm90b3R5cGUuZ2V0RWRpdGFibGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGF0dHJpYnV0ZSwgaHRtbEZ1bmN0aW9uLCBtb2RlbCwgbmFtZSwgcGxhY2Vob2xkZXIsIHByZXBhcmU7XG4gICAgbW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIGF0dHJpYnV0ZSA9IG9wdGlvbnMuYXR0cmlidXRlO1xuICAgIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgXCJWYWx1ZVwiO1xuICAgIHBsYWNlaG9sZGVyID0gb3B0aW9ucy5wbGFjZWhvbGRlciB8fCBcIm5vbmVcIjtcbiAgICBwcmVwYXJlID0gb3B0aW9ucy5wcmVwYXJlO1xuICAgIGlmICh0aGlzLnByZXBhcmF0aW9ucyA9PSBudWxsKSB7XG4gICAgICB0aGlzLnByZXBhcmF0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAodGhpcy5wcmVwYXJhdGlvbnNbbW9kZWwuaWRdID09IG51bGwpIHtcbiAgICAgIHRoaXMucHJlcGFyYXRpb25zW21vZGVsLmlkXSA9IHt9O1xuICAgIH1cbiAgICB0aGlzLnByZXBhcmF0aW9uc1ttb2RlbC5pZF1bYXR0cmlidXRlLmtleV0gPSBwcmVwYXJlO1xuICAgIGlmICh0aGlzLmh0bWxHZW5DYXRlbG9nID09IG51bGwpIHtcbiAgICAgIHRoaXMuaHRtbEdlbkNhdGVsb2cgPSB7fTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaHRtbEdlbkNhdGVsb2dbbW9kZWwuaWRdID09IG51bGwpIHtcbiAgICAgIHRoaXMuaHRtbEdlbkNhdGVsb2dbbW9kZWwuaWRdID0ge307XG4gICAgfVxuICAgIHRoaXMuaHRtbEdlbkNhdGVsb2dbbW9kZWwuaWRdW2F0dHJpYnV0ZS5rZXldID0gaHRtbEZ1bmN0aW9uID0gKGZ1bmN0aW9uKG1vZGVsLCBhdHRyaWJ1dGUsIG5hbWUsIHBsYWNlaG9sZGVyKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlZGl0T3JOb3QsIGVzY2FwZSwga2V5LCBudW1iZXJPck5vdCwgcmVzdWx0LCB0eXBlLCB1bnRpdGxlZCwgdmFsdWU7XG4gICAgICAgIGtleSA9IGF0dHJpYnV0ZS5rZXk7XG4gICAgICAgIGVzY2FwZSA9IGF0dHJpYnV0ZS5lc2NhcGU7XG4gICAgICAgIHR5cGUgPSBhdHRyaWJ1dGUudHlwZSB8fCAnJztcbiAgICAgICAgdmFsdWUgPSBtb2RlbC5oYXMoa2V5KSA/IG1vZGVsLmdldChrZXkpIDogcGxhY2Vob2xkZXI7XG4gICAgICAgIGlmIChfKHZhbHVlKS5pc0VtcHR5U3RyaW5nKCkpIHtcbiAgICAgICAgICB2YWx1ZSA9IHBsYWNlaG9sZGVyO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlc2NhcGUpIHtcbiAgICAgICAgICB2YWx1ZSA9IF8odmFsdWUpLmVzY2FwZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICB1bnRpdGxlZCA9IFwiIGRhdGEtdW50aXRsZWQ9J3RydWUnIFwiO1xuICAgICAgICB9XG4gICAgICAgIGVkaXRPck5vdCA9IGF0dHJpYnV0ZS5lZGl0YWJsZSAmJiBUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0KFwiY29udGV4dFwiKSA9PT0gXCJzZXJ2ZXJcIiA/IFwiY2xhc3M9J2VkaXRfaW5fcGxhY2UnXCIgOiBcIlwiO1xuICAgICAgICBudW1iZXJPck5vdCA9IF8uaXNOdW1iZXIodmFsdWUpID8gXCJkYXRhLWlzLW51bWJlcj0ndHJ1ZSdcIiA6IFwiZGF0YS1pcy1udW1iZXI9J2ZhbHNlJ1wiO1xuICAgICAgICByZXN1bHQgPSBcIjxkaXYgY2xhc3M9J2VkaXRfaW5fcGxhY2UgXCIgKyBrZXkgKyBcIi1lZGl0LWluLXBsYWNlJyBpZD0nXCIgKyBtb2RlbC5pZCArIFwiLVwiICsga2V5ICsgXCInPjxzcGFuIGRhdGEtbW9kZWwtaWQ9J1wiICsgbW9kZWwuaWQgKyBcIicgZGF0YS10eXBlPSdcIiArIHR5cGUgKyBcIicgZGF0YS1rZXk9J1wiICsga2V5ICsgXCInIGRhdGEtdmFsdWU9J1wiICsgdmFsdWUgKyBcIicgZGF0YS1uYW1lPSdcIiArIG5hbWUgKyBcIicgXCIgKyBlZGl0T3JOb3QgKyBcIiBcIiArIG51bWJlck9yTm90ICsgXCIgXCIgKyAodW50aXRsZWQgfHwgJycpICsgXCI+XCIgKyB2YWx1ZSArIFwiPC9zcGFuPjwvZGl2PlwiO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9KShtb2RlbCwgYXR0cmlidXRlLCBuYW1lLCBwbGFjZWhvbGRlcik7XG4gICAgcmV0dXJuIGh0bWxGdW5jdGlvbigpO1xuICB9O1xuXG4gIEVkaXRWaWV3LnByb3RvdHlwZS5lZGl0SW5QbGFjZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICRwYXJlbnQsICRzcGFuLCAkdGFyZ2V0LCAkdGV4dGFyZWEsIGNsYXNzZXMsIGd1aWQsIGlzTnVtYmVyLCBrZXksIG1hcmdpbnMsIG1vZGVsLCBtb2RlbElkLCBuYW1lLCBvbGRWYWx1ZSwgcm93cywgdHJhbnNmZXJWYXJpYWJsZXMsIHR5cGU7XG4gICAgaWYgKHRoaXMuYWxyZWFkeUVkaXRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5hbHJlYWR5RWRpdGluZyA9IHRydWU7XG4gICAgJHNwYW4gPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgJHBhcmVudCA9ICRzcGFuLnBhcmVudCgpO1xuICAgIGlmICgkc3Bhbi5oYXNDbGFzcyhcImVkaXRpbmdcIikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZ3VpZCA9IFV0aWxzLmd1aWQoKTtcbiAgICBrZXkgPSAkc3Bhbi5hdHRyKFwiZGF0YS1rZXlcIik7XG4gICAgbmFtZSA9ICRzcGFuLmF0dHIoXCJkYXRhLW5hbWVcIik7XG4gICAgdHlwZSA9ICRzcGFuLmF0dHIoXCJkYXRhLXR5cGVcIik7XG4gICAgaXNOdW1iZXIgPSAkc3Bhbi5hdHRyKFwiZGF0YS1pcy1udW1iZXJcIikgPT09IFwidHJ1ZVwiO1xuICAgIG1vZGVsSWQgPSAkc3Bhbi5hdHRyKFwiZGF0YS1tb2RlbC1pZFwiKTtcbiAgICBtb2RlbCA9IHRoaXMubW9kZWxzLmdldChtb2RlbElkKTtcbiAgICBvbGRWYWx1ZSA9IG1vZGVsLmdldChrZXkpIHx8IFwiXCI7XG4gICAgaWYgKCRzcGFuLmF0dHIoXCJkYXRhLXVudGl0bGVkXCIpID09PSBcInRydWVcIikge1xuICAgICAgb2xkVmFsdWUgPSBcIlwiO1xuICAgIH1cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgIGNsYXNzZXMgPSAoJHRhcmdldC5hdHRyKFwiY2xhc3NcIikgfHwgXCJcIikucmVwbGFjZShcInNldHRpbmdzXCIsIFwiXCIpO1xuICAgIG1hcmdpbnMgPSAkdGFyZ2V0LmNzcyhcIm1hcmdpblwiKTtcbiAgICB0cmFuc2ZlclZhcmlhYmxlcyA9IFwiZGF0YS1pcy1udW1iZXI9J1wiICsgaXNOdW1iZXIgKyBcIicgZGF0YS1rZXk9J1wiICsga2V5ICsgXCInIGRhdGEtbW9kZWwtaWQ9J1wiICsgbW9kZWxJZCArIFwiJyBcIjtcbiAgICBpZiAodHlwZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICRzcGFuO1xuICAgIH1cbiAgICByb3dzID0gMSArIG9sZFZhbHVlLmNvdW50KFwiXFxuXCIpO1xuICAgIHJvd3MgPSBwYXJzZUludChNYXRoLm1heChvbGRWYWx1ZS5sZW5ndGggLyAzMCwgcm93cykpO1xuICAgICRwYXJlbnQuaHRtbChcIjx0ZXh0YXJlYSBwbGFjZWhvbGRlcj0nXCIgKyBuYW1lICsgXCInIGlkPSdcIiArIGd1aWQgKyBcIicgcm93cz0nXCIgKyByb3dzICsgXCInIFwiICsgdHJhbnNmZXJWYXJpYWJsZXMgKyBcIiBjbGFzcz0nZWRpdGluZyBcIiArIGNsYXNzZXMgKyBcIiBcIiArIGtleSArIFwiLWVkaXRpbmcnIHN0eWxlPSdtYXJnaW46XCIgKyBtYXJnaW5zICsgXCInIGRhdGEtbmFtZT0nXCIgKyBuYW1lICsgXCInPlwiICsgb2xkVmFsdWUgKyBcIjwvdGV4dGFyZWE+XCIpO1xuICAgICR0ZXh0YXJlYSA9ICQoXCIjXCIgKyBndWlkKTtcbiAgICByZXR1cm4gJHRleHRhcmVhLnNlbGVjdCgpO1xuICB9O1xuXG4gIEVkaXRWaWV3LnByb3RvdHlwZS5lZGl0aW5nID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHBhcmVudCwgJHRhcmdldCwgYWx0S2V5LCBhdHRyaWJ1dGVzLCBiYXNlLCBiYXNlMSwgZSwgZW50ZXIsIGlzTnVtYmVyLCBrZXksIGtleURvd24sIG1vZGVsLCBtb2RlbElkLCBuYW1lLCBuZXdWYWx1ZSwgb2xkVmFsdWUsIHJlZiwgcmVmMTtcbiAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEzICYmIGV2ZW50LnR5cGUgPT09IFwia2V5dXBcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgICRwYXJlbnQgPSAkdGFyZ2V0LnBhcmVudCgpO1xuICAgIGtleSA9ICR0YXJnZXQuYXR0cihcImRhdGEta2V5XCIpO1xuICAgIGlzTnVtYmVyID0gJHRhcmdldC5hdHRyKFwiZGF0YS1pcy1udW1iZXJcIikgPT09IFwidHJ1ZVwiO1xuICAgIG1vZGVsSWQgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLW1vZGVsLWlkXCIpO1xuICAgIG5hbWUgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLW5hbWVcIik7XG4gICAgbW9kZWwgPSB0aGlzLm1vZGVscy5nZXQobW9kZWxJZCk7XG4gICAgb2xkVmFsdWUgPSBtb2RlbC5nZXQoa2V5KTtcbiAgICBuZXdWYWx1ZSA9ICR0YXJnZXQudmFsKCk7XG4gICAgbmV3VmFsdWUgPSBpc051bWJlciA/IHBhcnNlSW50KG5ld1ZhbHVlKSA6IG5ld1ZhbHVlO1xuICAgIGlmIChldmVudC53aGljaCA9PT0gMjcgfHwgZXZlbnQudHlwZSA9PT0gXCJmb2N1c291dFwiKSB7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiI1wiICsgbW9kZWxJZCArIFwiLVwiICsga2V5KS5odG1sKHR5cGVvZiAoYmFzZSA9IHRoaXMuaHRtbEdlbkNhdGVsb2dbbW9kZWxJZF0pW2tleV0gPT09IFwiZnVuY3Rpb25cIiA/IGJhc2Vba2V5XSgpIDogdm9pZCAwKTtcbiAgICAgIHRoaXMuYWxyZWFkeUVkaXRpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAga2V5RG93biA9IGV2ZW50LnR5cGUgPT09IFwia2V5ZG93blwiO1xuICAgIGVudGVyID0gZXZlbnQud2hpY2ggPT09IDEzO1xuICAgIGFsdEtleSA9IGV2ZW50LmFsdEtleTtcbiAgICBpZiAoZW50ZXIgJiYgYWx0S2V5KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCEoZW50ZXIgJiYga2V5RG93bikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmFscmVhZHlFZGl0aW5nID0gZmFsc2U7XG4gICAgaWYgKFN0cmluZyhuZXdWYWx1ZSkgIT09IFN0cmluZyhvbGRWYWx1ZSkpIHtcbiAgICAgIGF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IG5ld1ZhbHVlO1xuICAgICAgaWYgKCgocmVmID0gdGhpcy5wcmVwYXJhdGlvbnMpICE9IG51bGwgPyAocmVmMSA9IHJlZlttb2RlbElkXSkgIT0gbnVsbCA/IHJlZjFba2V5XSA6IHZvaWQgMCA6IHZvaWQgMCkgIT0gbnVsbCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF0dHJpYnV0ZXNba2V5ICsgXCItY29va2VkXCJdID0gdGhpcy5wcmVwYXJhdGlvbnNbbW9kZWxJZF1ba2V5XShuZXdWYWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgICAgIGUgPSBlcnJvcjE7XG4gICAgICAgICAgVXRpbHMuc3RpY2t5KFwiUHJvYmxlbSBjb29raW5nIHZhbHVlPGJyPlwiICsgZS5tZXNzYWdlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1vZGVsLnNhdmUoYXR0cmlidXRlcywge1xuICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYmFzZTE7XG4gICAgICAgICAgICBVdGlscy50b3BBbGVydChuYW1lICsgXCIgc2F2ZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuJGVsLmZpbmQoXCIjXCIgKyBtb2RlbElkICsgXCItXCIgKyBrZXkpLmh0bWwodHlwZW9mIChiYXNlMSA9IF90aGlzLmh0bWxHZW5DYXRlbG9nW21vZGVsSWRdKVtrZXldID09PSBcImZ1bmN0aW9uXCIgPyBiYXNlMVtrZXldKCkgOiB2b2lkIDApO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpLFxuICAgICAgICBlcnJvcjogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYWxlcnQoXCJQbGVhc2UgdHJ5IHRvIHNhdmUgYWdhaW4sIGl0IGRpZG4ndCB3b3JrIHRoYXQgdGltZS5cIik7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcylcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiI1wiICsgbW9kZWxJZCArIFwiLVwiICsga2V5KS5odG1sKHR5cGVvZiAoYmFzZTEgPSB0aGlzLmh0bWxHZW5DYXRlbG9nW21vZGVsSWRdKVtrZXldID09PSBcImZ1bmN0aW9uXCIgPyBiYXNlMVtrZXldKCkgOiB2b2lkIDApO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgcmV0dXJuIEVkaXRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuQmFja2JvbmUuQ2hpbGRNb2RlbCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChDaGlsZE1vZGVsLCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBDaGlsZE1vZGVsKCkge1xuICAgIHRoaXMuc2F2ZSA9IGJpbmQodGhpcy5zYXZlLCB0aGlzKTtcbiAgICByZXR1cm4gQ2hpbGRNb2RlbC5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIENoaWxkTW9kZWwucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbihhdHRyaWJ1dGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5zdWNjZXNzID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9ICQubm9vcDtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMuZXJyb3IgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucy5lcnJvciA9ICQubm9vcDtcbiAgICB9XG4gICAgdGhpcy5zZXQoYXR0cmlidXRlcyk7XG4gICAgb3B0aW9ucy5jaGlsZFNlbGYgPSB0aGlzO1xuICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGlsZFNhdmUob3B0aW9ucyk7XG4gIH07XG5cbiAgcmV0dXJuIENoaWxkTW9kZWw7XG5cbn0pKEJhY2tib25lLk1vZGVsKTtcblxuQmFja2JvbmUuQ2hpbGRDb2xsZWN0aW9uID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKENoaWxkQ29sbGVjdGlvbiwgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQ2hpbGRDb2xsZWN0aW9uKCkge1xuICAgIHJldHVybiBDaGlsZENvbGxlY3Rpb24uX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gQ2hpbGRDb2xsZWN0aW9uO1xuXG59KShCYWNrYm9uZS5Db2xsZWN0aW9uKTtcblxuQmFja2JvbmUuUGFyZW50TW9kZWwgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoUGFyZW50TW9kZWwsIHN1cGVyQ2xhc3MpO1xuXG4gIFBhcmVudE1vZGVsLnByb3RvdHlwZS5DaGlsZCA9IG51bGw7XG5cbiAgUGFyZW50TW9kZWwucHJvdG90eXBlLkNoaWxkQ29sbGVjdGlvbiA9IG51bGw7XG5cbiAgZnVuY3Rpb24gUGFyZW50TW9kZWwob3B0aW9ucykge1xuICAgIHRoaXMuY2hpbGRTYXZlID0gYmluZCh0aGlzLmNoaWxkU2F2ZSwgdGhpcyk7XG4gICAgdGhpcy5uZXdDaGlsZCA9IGJpbmQodGhpcy5uZXdDaGlsZCwgdGhpcyk7XG4gICAgdGhpcy51cGRhdGVDb2xsZWN0aW9uID0gYmluZCh0aGlzLnVwZGF0ZUNvbGxlY3Rpb24sIHRoaXMpO1xuICAgIHRoaXMuY29sbGVjdGlvbiA9IG5ldyB0aGlzLkNoaWxkQ29sbGVjdGlvbigpO1xuICAgIHRoaXMuY29sbGVjdGlvbi5vbihcInJlbW92ZVwiLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZUF0dHJpYnV0ZXMoKTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICAgIFBhcmVudE1vZGVsLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgUGFyZW50TW9kZWwucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24ubGVuZ3RoIHx8IHRoaXMuYXR0cmlidXRlcy5jaGlsZHJlbi5sZW5ndGg7XG4gIH07XG5cbiAgUGFyZW50TW9kZWwucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBvbGRTdWNjZXNzO1xuICAgIG9sZFN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7XG4gICAgZGVsZXRlIG9wdGlvbnMuc3VjY2VzcztcbiAgICBvcHRpb25zLnN1Y2Nlc3MgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihtb2RlbCwgcmVzcG9uc2UsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNoaWxkLCBjaGlsZE1vZGVsLCBjaGlsZHJlbk1vZGVscywgaywgbGVuLCByZWY7XG4gICAgICAgIGNoaWxkcmVuTW9kZWxzID0gW107XG4gICAgICAgIHJlZiA9IF90aGlzLmdldENoaWxkcmVuKCk7XG4gICAgICAgIGZvciAoayA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgICAgICAgIGNoaWxkID0gcmVmW2tdO1xuICAgICAgICAgIGNoaWxkTW9kZWwgPSBuZXcgX3RoaXMuQ2hpbGQoY2hpbGQpO1xuICAgICAgICAgIGNoaWxkTW9kZWwucGFyZW50ID0gX3RoaXM7XG4gICAgICAgICAgY2hpbGRyZW5Nb2RlbHMucHVzaChjaGlsZE1vZGVsKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5jb2xsZWN0aW9uLnJlc2V0KGNoaWxkcmVuTW9kZWxzKTtcbiAgICAgICAgX3RoaXMuY29sbGVjdGlvbi5zb3J0KCk7XG4gICAgICAgIHJldHVybiBvbGRTdWNjZXNzKG1vZGVsLCByZXNwb25zZSwgb3B0aW9ucyk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpO1xuICAgIHJldHVybiBQYXJlbnRNb2RlbC5fX3N1cGVyX18uZmV0Y2guY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgfTtcblxuICBQYXJlbnRNb2RlbC5wcm90b3R5cGUuZ2V0Q2hpbGRyZW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBcnJheShcImNoaWxkcmVuXCIpO1xuICB9O1xuXG4gIFBhcmVudE1vZGVsLnByb3RvdHlwZS51cGRhdGVBdHRyaWJ1dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGssIGxlbiwgbW9kZWwsIHJlZiwgcmVzdWx0cztcbiAgICB0aGlzLmF0dHJpYnV0ZXMuY2hpbGRyZW4gPSBbXTtcbiAgICByZWYgPSB0aGlzLmNvbGxlY3Rpb24ubW9kZWxzO1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGsgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgIG1vZGVsID0gcmVmW2tdO1xuICAgICAgcmVzdWx0cy5wdXNoKHRoaXMuYXR0cmlidXRlcy5jaGlsZHJlbi5wdXNoKG1vZGVsLmF0dHJpYnV0ZXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgUGFyZW50TW9kZWwucHJvdG90eXBlLnVwZGF0ZUNvbGxlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNvbGxlY3Rpb24ucmVzZXQodGhpcy5hdHRyaWJ1dGVzLmNoaWxkcmVuKTtcbiAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uLmVhY2goKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkLnBhcmVudCA9IF90aGlzO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gIH07XG5cbiAgUGFyZW50TW9kZWwucHJvdG90eXBlLm5ld0NoaWxkID0gZnVuY3Rpb24oYXR0cmlidXRlcywgb3B0aW9ucykge1xuICAgIHZhciBuZXdDaGlsZDtcbiAgICBpZiAoYXR0cmlidXRlcyA9PSBudWxsKSB7XG4gICAgICBhdHRyaWJ1dGVzID0ge307XG4gICAgfVxuICAgIG5ld0NoaWxkID0gbmV3IHRoaXMuQ2hpbGQ7XG4gICAgbmV3Q2hpbGQuc2V0KFwiX2lkXCIsIFV0aWxzLmd1aWQoKSk7XG4gICAgbmV3Q2hpbGQucGFyZW50ID0gdGhpcztcbiAgICB0aGlzLmNvbGxlY3Rpb24uYWRkKG5ld0NoaWxkLCBvcHRpb25zKTtcbiAgICByZXR1cm4gbmV3Q2hpbGQuc2F2ZShhdHRyaWJ1dGVzLCB7XG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge307XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFBhcmVudE1vZGVsLnByb3RvdHlwZS5jaGlsZFNhdmUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIG9sZFN1Y2Nlc3M7XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBvbGRTdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzO1xuICAgIGRlbGV0ZSBvcHRpb25zLnN1Y2Nlc3M7XG4gICAgb3B0aW9ucy5zdWNjZXNzID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICByZXR1cm4gb2xkU3VjY2Vzcy5hcHBseShvcHRpb25zLmNoaWxkU2VsZiwgW2EsIGIsIGNdKTtcbiAgICAgIH07XG4gICAgfSkodGhpcyk7XG4gICAgdGhpcy51cGRhdGVBdHRyaWJ1dGVzKCk7XG4gICAgcmV0dXJuIHRoaXMuc2F2ZShudWxsLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gUGFyZW50TW9kZWw7XG5cbn0pKEJhY2tib25lLk1vZGVsKTtcblxuUmVzdWx0T2ZRdWVzdGlvbiA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNhbmRpZGF0ZVZpZXcsIGluZGV4LCBrLCBsZW4sIHJlZiwgcmV0dXJuVmlldztcbiAgcmV0dXJuVmlldyA9IG51bGw7XG4gIGluZGV4ID0gdm0uY3VycmVudFZpZXcub3JkZXJNYXBbdm0uY3VycmVudFZpZXcuaW5kZXhdO1xuICByZWYgPSB2bS5jdXJyZW50Vmlldy5zdWJ0ZXN0Vmlld3NbaW5kZXhdLnByb3RvdHlwZVZpZXcucXVlc3Rpb25WaWV3cztcbiAgZm9yIChrID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgayA8IGxlbjsgaysrKSB7XG4gICAgY2FuZGlkYXRlVmlldyA9IHJlZltrXTtcbiAgICBpZiAoY2FuZGlkYXRlVmlldy5tb2RlbC5nZXQoXCJuYW1lXCIpID09PSBuYW1lKSB7XG4gICAgICByZXR1cm5WaWV3ID0gY2FuZGlkYXRlVmlldztcbiAgICB9XG4gIH1cbiAgaWYgKHJldHVyblZpZXcgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJSZXN1bHRPZlF1ZXN0aW9uIGNvdWxkIG5vdCBmaW5kIHZhcmlhYmxlIFwiICsgbmFtZSk7XG4gIH1cbiAgaWYgKHJldHVyblZpZXcuYW5zd2VyKSB7XG4gICAgcmV0dXJuIHJldHVyblZpZXcuYW5zd2VyO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcblxuUmVzdWx0T2ZNdWx0aXBsZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNhbmRpZGF0ZVZpZXcsIGluZGV4LCBrLCBrZXksIGxlbiwgcmVmLCByZWYxLCByZXN1bHQsIHJldHVyblZpZXcsIHZhbHVlO1xuICByZXR1cm5WaWV3ID0gbnVsbDtcbiAgaW5kZXggPSB2bS5jdXJyZW50Vmlldy5vcmRlck1hcFt2bS5jdXJyZW50Vmlldy5pbmRleF07XG4gIHJlZiA9IHZtLmN1cnJlbnRWaWV3LnN1YnRlc3RWaWV3c1tpbmRleF0ucHJvdG90eXBlVmlldy5xdWVzdGlvblZpZXdzO1xuICBmb3IgKGsgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICBjYW5kaWRhdGVWaWV3ID0gcmVmW2tdO1xuICAgIGlmIChjYW5kaWRhdGVWaWV3Lm1vZGVsLmdldChcIm5hbWVcIikgPT09IG5hbWUpIHtcbiAgICAgIHJldHVyblZpZXcgPSBjYW5kaWRhdGVWaWV3O1xuICAgIH1cbiAgfVxuICBpZiAocmV0dXJuVmlldyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcIlJlc3VsdE9mUXVlc3Rpb24gY291bGQgbm90IGZpbmQgdmFyaWFibGUgXCIgKyBuYW1lKTtcbiAgfVxuICByZXN1bHQgPSBbXTtcbiAgcmVmMSA9IHJldHVyblZpZXcuYW5zd2VyO1xuICBmb3IgKGtleSBpbiByZWYxKSB7XG4gICAgdmFsdWUgPSByZWYxW2tleV07XG4gICAgaWYgKHZhbHVlID09PSBcImNoZWNrZWRcIikge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblJlc3VsdE9mUHJldmlvdXMgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB2bS5jdXJyZW50Vmlldy5yZXN1bHQuZ2V0VmFyaWFibGUobmFtZSk7XG59O1xuXG5SZXN1bHRPZkdyaWQgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB2bS5jdXJyZW50Vmlldy5yZXN1bHQuZ2V0SXRlbVJlc3VsdENvdW50QnlWYXJpYWJsZU5hbWUobmFtZSwgXCJjb3JyZWN0XCIpO1xufTtcblxuVGFuZ2VyaW5lID0gVGFuZ2VyaW5lICE9IG51bGwgPyBUYW5nZXJpbmUgOiB7fTtcblxuVGFuZ2VyaW5lLm9uQmFja0J1dHRvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gIGlmIChUYW5nZXJpbmUuYWN0aXZpdHkgPT09IFwiYXNzZXNzbWVudCBydW5cIikge1xuICAgIGlmIChjb25maXJtKHQoXCJOYXZpZ2F0aW9uVmlldy5tZXNzYWdlLmluY29tcGxldGVfbWFpbl9zY3JlZW5cIikpKSB7XG4gICAgICBUYW5nZXJpbmUuYWN0aXZpdHkgPSBcIlwiO1xuICAgICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICB9XG59O1xuXG5CYWNrYm9uZS5WaWV3LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlbW92ZSgpO1xuICB0aGlzLnVuYmluZCgpO1xuICByZXR1cm4gdHlwZW9mIHRoaXMub25DbG9zZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpcy5vbkNsb3NlKCkgOiB2b2lkIDA7XG59O1xuXG5CYWNrYm9uZS5Db2xsZWN0aW9uLnByb3RvdHlwZS5pbmRleEJ5ID0gZnVuY3Rpb24oYXR0cikge1xuICB2YXIgaywga2V5LCBsZW4sIG9uZU1vZGVsLCByZWYsIHJlc3VsdDtcbiAgcmVzdWx0ID0ge307XG4gIHJlZiA9IHRoaXMubW9kZWxzO1xuICBmb3IgKGsgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICBvbmVNb2RlbCA9IHJlZltrXTtcbiAgICBpZiAob25lTW9kZWwuaGFzKGF0dHIpKSB7XG4gICAgICBrZXkgPSBvbmVNb2RlbC5nZXQoYXR0cik7XG4gICAgICBpZiAocmVzdWx0W2tleV0gPT0gbnVsbCkge1xuICAgICAgICByZXN1bHRba2V5XSA9IFtdO1xuICAgICAgfVxuICAgICAgcmVzdWx0W2tleV0ucHVzaChvbmVNb2RlbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5CYWNrYm9uZS5Db2xsZWN0aW9uLnByb3RvdHlwZS5pbmRleEFycmF5QnkgPSBmdW5jdGlvbihhdHRyKSB7XG4gIHZhciBrLCBrZXksIGxlbiwgb25lTW9kZWwsIHJlZiwgcmVzdWx0O1xuICByZXN1bHQgPSBbXTtcbiAgcmVmID0gdGhpcy5tb2RlbHM7XG4gIGZvciAoayA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgIG9uZU1vZGVsID0gcmVmW2tdO1xuICAgIGlmIChvbmVNb2RlbC5oYXMoYXR0cikpIHtcbiAgICAgIGtleSA9IG9uZU1vZGVsLmdldChhdHRyKTtcbiAgICAgIGlmIChyZXN1bHRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gW107XG4gICAgICB9XG4gICAgICByZXN1bHRba2V5XS5wdXNoKG9uZU1vZGVsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbkJhY2tib25lLk1vZGVsLnByb3RvdHlwZS5jb25mb3JtID0gZnVuY3Rpb24oc3RhbmRhcmQpIHtcbiAgdmFyIGtleSwgcmVzdWx0cywgdmFsdWU7XG4gIGlmIChzdGFuZGFyZCA9PSBudWxsKSB7XG4gICAgc3RhbmRhcmQgPSB7fTtcbiAgfVxuICBpZiAoXy5pc0VtcHR5KHN0YW5kYXJkKSkge1xuICAgIHRocm93IFwiQ2Fubm90IGNvbmZvcm0gdG8gZW1wdHkgc3RhbmRhcmQuIFVzZSBAY2xlYXIoKSBpbnN0ZWFkLlwiO1xuICB9XG4gIHJlc3VsdHMgPSBbXTtcbiAgZm9yIChrZXkgaW4gc3RhbmRhcmQpIHtcbiAgICB2YWx1ZSA9IHN0YW5kYXJkW2tleV07XG4gICAgaWYgKHRoaXMuaGFzKGtleSkgfHwgdGhpcy5nZXQoa2V5KSA9PT0gXCJcIikge1xuICAgICAgcmVzdWx0cy5wdXNoKHRoaXMuc2V0KGtleSwgdmFsdWUoKSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRzLnB1c2godm9pZCAwKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG5CYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUucHJ1bmUgPSBmdW5jdGlvbihzaGFwZSkge1xuICB2YXIga2V5LCByZWYsIHJlc3VsdHMsIHZhbHVlO1xuICBpZiAoc2hhcGUgPT0gbnVsbCkge1xuICAgIHNoYXBlID0ge307XG4gIH1cbiAgaWYgKF8uaXNFbXB0eShzdGFuZGFyZCkpIHtcbiAgICB0aHJvdyBcIkNhbm5vdCBjb25mb3JtIHRvIGVtcHR5IHN0YW5kYXJkLiBVc2UgQGNsZWFyKCkgaW5zdGVhZC5cIjtcbiAgfVxuICByZWYgPSB0aGlzLmF0dHJpYnV0ZXM7XG4gIHJlc3VsdHMgPSBbXTtcbiAgZm9yIChrZXkgaW4gcmVmKSB7XG4gICAgdmFsdWUgPSByZWZba2V5XTtcbiAgICBpZiAoaW5kZXhPZi5jYWxsKHN0YW5kYXJkLCBrZXkpIDwgMCkge1xuICAgICAgcmVzdWx0cy5wdXNoKHRoaXMudW5zZXQoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdHMucHVzaCh2b2lkIDApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn07XG5cbkJhY2tib25lLk1vZGVsLnByb3RvdHlwZS50b0hhc2ggPSBmdW5jdGlvbigpIHtcbiAgdmFyIGtleSwgcmVmLCBzaWduaWZpY2FudEF0dHJpYnV0ZXMsIHZhbHVlO1xuICBzaWduaWZpY2FudEF0dHJpYnV0ZXMgPSB7fTtcbiAgcmVmID0gdGhpcy5hdHRyaWJ1dGVzO1xuICBmb3IgKGtleSBpbiByZWYpIHtcbiAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgIGlmICghflsnX3JldicsICdfaWQnLCAnaGFzaCcsICd1cGRhdGVkJywgJ2VkaXRlZEJ5J10uaW5kZXhPZihrZXkpKSB7XG4gICAgICBzaWduaWZpY2FudEF0dHJpYnV0ZXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYjY0X3NoYTEoSlNPTi5zdHJpbmdpZnkoc2lnbmlmaWNhbnRBdHRyaWJ1dGVzKSk7XG59O1xuXG5CYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUuX2JlZm9yZVNhdmUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLmJlZm9yZVNhdmUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRoaXMuYmVmb3JlU2F2ZSgpO1xuICB9XG4gIHJldHVybiB0aGlzLnN0YW1wKCk7XG59O1xuXG5CYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUuc3RhbXAgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlZjtcbiAgcmV0dXJuIHRoaXMuc2V0KHtcbiAgICBcImVkaXRlZEJ5XCI6IChUYW5nZXJpbmUgIT0gbnVsbCA/IChyZWYgPSBUYW5nZXJpbmUudXNlcikgIT0gbnVsbCA/IHJlZi5uYW1lKCkgOiB2b2lkIDAgOiB2b2lkIDApIHx8IFwidW5rbm93blwiLFxuICAgIFwidXBkYXRlZFwiOiAobmV3IERhdGUoKSkudG9TdHJpbmcoKSxcbiAgICBcImhhc2hcIjogdGhpcy50b0hhc2goKSxcbiAgICBcImZyb21JbnN0YW5jZUlkXCI6IFRhbmdlcmluZS5zZXR0aW5ncy5nZXRTdHJpbmcoXCJpbnN0YW5jZUlkXCIpXG4gIH0pO1xufTtcblxuQmFja2JvbmUuTW9kZWwucHJvdG90eXBlLmdldE51bWJlciA9IGZ1bmN0aW9uKGtleSkge1xuICBpZiAodGhpcy5oYXMoa2V5KSkge1xuICAgIHJldHVybiBwYXJzZUludCh0aGlzLmdldChrZXkpKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gMDtcbiAgfVxufTtcblxuQmFja2JvbmUuTW9kZWwucHJvdG90eXBlLmdldEFycmF5ID0gZnVuY3Rpb24oa2V5KSB7XG4gIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuXG5CYWNrYm9uZS5Nb2RlbC5wcm90b3R5cGUuZ2V0U3RyaW5nID0gZnVuY3Rpb24oa2V5KSB7XG4gIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KGtleSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn07XG5cbkJhY2tib25lLk1vZGVsLnByb3RvdHlwZS5nZXRFc2NhcGVkU3RyaW5nID0gZnVuY3Rpb24oa2V5KSB7XG4gIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgcmV0dXJuIHRoaXMuZXNjYXBlKGtleSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn07XG5cbkJhY2tib25lLk1vZGVsLnByb3RvdHlwZS5nZXRCb29sZWFuID0gZnVuY3Rpb24oa2V5KSB7XG4gIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KGtleSkgPT09IHRydWUgfHwgdGhpcy5nZXQoa2V5KSA9PT0gJ3RydWUnO1xuICB9XG59O1xuXG4oZnVuY3Rpb24oJCkge1xuICAkLmZuLnNjcm9sbFRvID0gZnVuY3Rpb24oc3BlZWQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGU7XG4gICAgaWYgKHNwZWVkID09IG51bGwpIHtcbiAgICAgIHNwZWVkID0gMjUwO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgICBzY3JvbGxUb3A6ICQodGhpcykub2Zmc2V0KCkudG9wICsgJ3B4J1xuICAgICAgfSwgc3BlZWQsIG51bGwsIGNhbGxiYWNrKTtcbiAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgIGUgPSBlcnJvcjE7XG4gICAgICBjb25zb2xlLmxvZyhcImVycm9yXCIsIGUpO1xuICAgICAgY29uc29sZS5sb2coXCJTY3JvbGwgZXJyb3Igd2l0aCAndGhpcydcIiwgdGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAkLmZuLnRvcENlbnRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY3NzKFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiKTtcbiAgICB0aGlzLmNzcyhcInRvcFwiLCAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgKyBcInB4XCIpO1xuICAgIHJldHVybiB0aGlzLmNzcyhcImxlZnRcIiwgKCgkKHdpbmRvdykud2lkdGgoKSAtIHRoaXMub3V0ZXJXaWR0aCgpKSAvIDIpICsgJCh3aW5kb3cpLnNjcm9sbExlZnQoKSArIFwicHhcIik7XG4gIH07XG4gICQuZm4ubWlkZGxlQ2VudGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5jc3MoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpO1xuICAgIHRoaXMuY3NzKFwidG9wXCIsICgoJCh3aW5kb3cpLmhlaWdodCgpIC0gdGhpcy5vdXRlckhlaWdodCgpKSAvIDIpICsgJCh3aW5kb3cpLnNjcm9sbFRvcCgpICsgXCJweFwiKTtcbiAgICByZXR1cm4gdGhpcy5jc3MoXCJsZWZ0XCIsICgoJCh3aW5kb3cpLndpZHRoKCkgLSB0aGlzLm91dGVyV2lkdGgoKSkgLyAyKSArICQod2luZG93KS5zY3JvbGxMZWZ0KCkgKyBcInB4XCIpO1xuICB9O1xuICAkLmZuLndpZHRoUGVyY2VudGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKDEwMCAqIHRoaXMub3V0ZXJXaWR0aCgpIC8gdGhpcy5vZmZzZXRQYXJlbnQoKS53aWR0aCgpKSArICclJztcbiAgfTtcbiAgJC5mbi5oZWlnaHRQZXJjZW50YWdlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoMTAwICogdGhpcy5vdXRlckhlaWdodCgpIC8gdGhpcy5vZmZzZXRQYXJlbnQoKS5oZWlnaHQoKSkgKyAnJSc7XG4gIH07XG4gIHJldHVybiAkLmZuLmdldFN0eWxlT2JqZWN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNhbWVsLCBjYW1lbGl6ZSwgZG9tLCBrLCBsLCBsZW4sIGxlbjEsIHByb3AsIHJldHVybnMsIHN0eWxlLCB2YWw7XG4gICAgZG9tID0gdGhpcy5nZXQoMCk7XG4gICAgcmV0dXJucyA9IHt9O1xuICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgICAgY2FtZWxpemUgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBiLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9O1xuICAgICAgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb20sIG51bGwpO1xuICAgICAgZm9yIChrID0gMCwgbGVuID0gc3R5bGUubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgcHJvcCA9IHN0eWxlW2tdO1xuICAgICAgICBjYW1lbCA9IHByb3AucmVwbGFjZSgvXFwtKFthLXpdKS9nLCBjYW1lbGl6ZSk7XG4gICAgICAgIHZhbCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG4gICAgICAgIHJldHVybnNbY2FtZWxdID0gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldHVybnM7XG4gICAgfVxuICAgIGlmIChkb20uY3VycmVudFN0eWxlKSB7XG4gICAgICBzdHlsZSA9IGRvbS5jdXJyZW50U3R5bGU7XG4gICAgICBmb3IgKGwgPSAwLCBsZW4xID0gc3R5bGUubGVuZ3RoOyBsIDwgbGVuMTsgbCsrKSB7XG4gICAgICAgIHByb3AgPSBzdHlsZVtsXTtcbiAgICAgICAgcmV0dXJuc1twcm9wXSA9IHN0eWxlW3Byb3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldHVybnM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNzcygpO1xuICB9O1xufSkoalF1ZXJ5KTtcblxuJC5hamF4U2V0dXAoe1xuICBzdGF0dXNDb2RlOiB7XG4gICAgNDA0OiBmdW5jdGlvbih4aHIsIHN0YXR1cywgbWVzc2FnZSkge1xuICAgICAgdmFyIGNvZGUsIHNlZVVuYXV0aG9yaXplZCwgc3RhdHVzVGV4dDtcbiAgICAgIGNvZGUgPSB4aHIuc3RhdHVzO1xuICAgICAgc3RhdHVzVGV4dCA9IHhoci5zdGF0dXNUZXh0O1xuICAgICAgc2VlVW5hdXRob3JpemVkID0gfnhoci5yZXNwb25zZVRleHQuaW5kZXhPZihcInVuYXV0aG9yaXplZFwiKTtcbiAgICAgIGlmIChzZWVVbmF1dGhvcml6ZWQpIHtcbiAgICAgICAgVXRpbHMubWlkQWxlcnQoXCJTZXNzaW9uIGNsb3NlZDxicj5QbGVhc2UgbG9nIGluIGFuZCB0cnkgYWdhaW4uXCIpO1xuICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIubG9nb3V0KCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59KTtcblxua20gPSB7XG4gIFwiMFwiOiA0OCxcbiAgXCIxXCI6IDQ5LFxuICBcIjJcIjogNTAsXG4gIFwiM1wiOiA1MSxcbiAgXCI0XCI6IDUyLFxuICBcIjVcIjogNTMsXG4gIFwiNlwiOiA1NCxcbiAgXCI3XCI6IDU1LFxuICBcIjhcIjogNTYsXG4gIFwiOVwiOiA1NyxcbiAgXCJhXCI6IDY1LFxuICBcImJcIjogNjYsXG4gIFwiY1wiOiA2NyxcbiAgXCJkXCI6IDY4LFxuICBcImVcIjogNjksXG4gIFwiZlwiOiA3MCxcbiAgXCJnXCI6IDcxLFxuICBcImhcIjogNzIsXG4gIFwiaVwiOiA3MyxcbiAgXCJqXCI6IDc0LFxuICBcImtcIjogNzUsXG4gIFwibFwiOiA3NixcbiAgXCJtXCI6IDc3LFxuICBcIm5cIjogNzgsXG4gIFwib1wiOiA3OSxcbiAgXCJwXCI6IDgwLFxuICBcInFcIjogODEsXG4gIFwiclwiOiA4MixcbiAgXCJzXCI6IDgzLFxuICBcInRcIjogODQsXG4gIFwidVwiOiA4NSxcbiAgXCJ2XCI6IDg2LFxuICBcIndcIjogODcsXG4gIFwieFwiOiA4OCxcbiAgXCJ5XCI6IDg5LFxuICBcInpcIjogOTBcbn07XG5cbnNrcyA9IFtcbiAge1xuICAgIHE6IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBrLCByZXN1bHRzO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChpID0gayA9IDA7IGsgPD0gOTsgaSA9ICsraykge1xuICAgICAgICByZXN1bHRzLnB1c2goa21bXCIyMDAxdXBkYXRlXCJbaV1dKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pKCksXG4gICAgaTogMCxcbiAgICBjOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBVdGlscy51cGRhdGVUYW5nZXJpbmUoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIlVwZGF0ZWQsIHBsZWFzZSByZWZyZXNoLlwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXTtcblxuJChkb2N1bWVudCkua2V5ZG93bihmdW5jdGlvbihlKSB7XG4gIHZhciBqLCBrLCBsZW4sIHJlc3VsdHMsIHNrO1xuICByZXN1bHRzID0gW107XG4gIGZvciAoaiA9IGsgPSAwLCBsZW4gPSBza3MubGVuZ3RoOyBrIDwgbGVuOyBqID0gKytrKSB7XG4gICAgc2sgPSBza3Nbal07XG4gICAgcmVzdWx0cy5wdXNoKGUua2V5Q29kZSA9PT0gc2tzW2pdLnFbc2tzW2pdLmkrK10gPyBza3Nbal0uaSA9PT0gc2tzW2pdLnEubGVuZ3RoID8gc2tzW2pdWydjJ10oKSA6IHZvaWQgMCA6IHNrc1tqXS5pID0gMCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59KTtcblxuU3RyaW5nLnByb3RvdHlwZS5zYWZldHlEYW5jZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5yZXBsYWNlKC9cXHMvZywgXCJfXCIpLnJlcGxhY2UoL1teYS16QS1aMC05X10vZywgXCJcIik7XG59O1xuXG5TdHJpbmcucHJvdG90eXBlLmRhdGFiYXNlU2FmZXR5RGFuY2UgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMucmVwbGFjZSgvXFxzL2csIFwiX1wiKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16MC05Xy1dL2csIFwiXCIpO1xufTtcblxuU3RyaW5nLnByb3RvdHlwZS5jb3VudCA9IGZ1bmN0aW9uKHN1YnN0cmluZykge1xuICB2YXIgcmVmO1xuICByZXR1cm4gKChyZWYgPSB0aGlzLm1hdGNoKG5ldyBSZWdFeHAoc3Vic3RyaW5nLCBcImdcIikpKSAhPSBudWxsID8gcmVmLmxlbmd0aCA6IHZvaWQgMCkgfHwgMDtcbn07XG5cbk1hdGguYXZlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBrLCBsZW4sIHJlc3VsdCwgeDtcbiAgcmVzdWx0ID0gMDtcbiAgZm9yIChrID0gMCwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgayA8IGxlbjsgaysrKSB7XG4gICAgeCA9IGFyZ3VtZW50c1trXTtcbiAgICByZXN1bHQgKz0geDtcbiAgfVxuICByZXN1bHQgLz0gYXJndW1lbnRzLmxlbmd0aDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbk1hdGguaXNJbnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHR5cGVvZiBuID09PSAnbnVtYmVyJyAmJiBwYXJzZUZsb2F0KG4pID09PSBwYXJzZUludChuLCAxMCkgJiYgIWlzTmFOKG4pO1xufTtcblxuTWF0aC5kZWNpbWFscyA9IGZ1bmN0aW9uKG51bSwgZGVjaW1hbHMpIHtcbiAgdmFyIG07XG4gIG0gPSBNYXRoLnBvdygxMCwgZGVjaW1hbHMpO1xuICBudW0gKj0gbTtcbiAgbnVtID0gbnVtICsgbnVtPDA/LTAuNTorMC41ID4+IDA7XG4gIHJldHVybiBudW0gLz0gbTtcbn07XG5cbk1hdGguY29tbWFzID0gZnVuY3Rpb24obnVtKSB7XG4gIHJldHVybiBwYXJzZUludChudW0pLnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCIsXCIpO1xufTtcblxuTWF0aC5saW1pdCA9IGZ1bmN0aW9uKG1pbiwgbnVtLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGgubWF4KG1pbiwgTWF0aC5taW4obnVtLCBtYXgpKTtcbn07XG5cbl8uaXNFbXB0eVN0cmluZyA9IGZ1bmN0aW9uKGFTdHJpbmcpIHtcbiAgaWYgKGFTdHJpbmcgPT09IG51bGwgfHwgYVN0cmluZyA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCEoXy5pc1N0cmluZyhhU3RyaW5nKSB8fCBfLmlzTnVtYmVyKGFTdHJpbmcpKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoXy5pc051bWJlcihhU3RyaW5nKSkge1xuICAgIGFTdHJpbmcgPSBTdHJpbmcoYVN0cmluZyk7XG4gIH1cbiAgaWYgKGFTdHJpbmcucmVwbGFjZSgvXFxzKi8sICcnKSA9PT0gJycpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5fLnByb3RvdHlwZS5pc0VtcHR5U3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBfLmlzRW1wdHlTdHJpbmcodGhpcy5fd3JhcHBlZCk7XG59O1xuXG5fLmluZGV4QnkgPSBmdW5jdGlvbihwcm9wZXJ0eU5hbWUsIG9iamVjdEFycmF5KSB7XG4gIHZhciBrLCBrZXksIGxlbiwgb25lT2JqZWN0LCByZXN1bHQ7XG4gIHJlc3VsdCA9IHt9O1xuICBmb3IgKGsgPSAwLCBsZW4gPSBvYmplY3RBcnJheS5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgIG9uZU9iamVjdCA9IG9iamVjdEFycmF5W2tdO1xuICAgIGlmIChvbmVPYmplY3RbcHJvcGVydHlOYW1lXSAhPSBudWxsKSB7XG4gICAgICBrZXkgPSBvbmVPYmplY3RbcHJvcGVydHlOYW1lXTtcbiAgICAgIGlmIChyZXN1bHRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gW107XG4gICAgICB9XG4gICAgICByZXN1bHRba2V5XS5wdXNoKG9uZU9iamVjdCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5fLnByb3RvdHlwZS5pbmRleEJ5ID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgdmFyIGFuQXJyYXk7XG4gIGFuQXJyYXkgPSB0aGlzLl93cmFwcGVkO1xuICBpZiAodGhpcy5fd3JhcHBlZC5tb2RlbHMgIT0gbnVsbCkge1xuICAgIGFuQXJyYXkgPSB0aGlzLl93cmFwcGVkLm1vZGVscztcbiAgfVxuICByZXR1cm4gXy5pbmRleEJ5KGluZGV4LCBhbkFycmF5KTtcbn07XG5cbl8ucHJvdG90eXBlLnRhbGx5ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBfLnRhbGx5KHRoaXMuX3dyYXBwZWQpO1xufTtcblxuXy50YWxseSA9IGZ1bmN0aW9uKGFuQXJyYXkpIHtcbiAgdmFyIGNvdW50cywgZWxlbWVudCwgaywgbGVuO1xuICBjb3VudHMgPSB7fTtcbiAgZm9yIChrID0gMCwgbGVuID0gYW5BcnJheS5sZW5ndGg7IGsgPCBsZW47IGsrKykge1xuICAgIGVsZW1lbnQgPSBhbkFycmF5W2tdO1xuICAgIGlmIChlbGVtZW50ICE9IG51bGwpIHtcbiAgICAgIGlmIChjb3VudHNbZWxlbWVudF0gPT0gbnVsbCkge1xuICAgICAgICBjb3VudHNbZWxlbWVudF0gPSAwO1xuICAgICAgfVxuICAgICAgY291bnRzW2VsZW1lbnRdKys7XG4gICAgfVxuICB9XG4gIHJldHVybiBjb3VudHM7XG59O1xuXG5VdGlscyA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gVXRpbHMoKSB7fVxuXG4gIFV0aWxzLmNoYW5nZUxhbmd1YWdlID0gZnVuY3Rpb24oY29kZSwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gaTE4bi5zZXRMbmcoY29kZSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIFV0aWxzLnJlc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB1cGRhdGVDb2xsZWN0aW9ucywgdXBkYXRlTW9kZWxzO1xuICAgIHVwZGF0ZU1vZGVscyA9IGZ1bmN0aW9uKG1vZGVscywgY2FsbGJhY2spIHtcbiAgICAgIGlmIChtb2RlbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1vZGVscy5wb3AoKS5zYXZlKG51bGwsIHtcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhtb2RlbC51cmwpO1xuICAgICAgICAgIHJldHVybiB1cGRhdGVNb2RlbHMobW9kZWxzLCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgdXBkYXRlQ29sbGVjdGlvbnMgPSBmdW5jdGlvbihjb2xsZWN0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBjb2xsZWN0aW9uO1xuICAgICAgaWYgKGNvbGxlY3Rpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICAgIGNvbGxlY3Rpb24gPSBuZXcgKGNvbGxlY3Rpb25zLnBvcCgpKTtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uLmZldGNoKHtcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHVwZGF0ZU1vZGVscyhjb2xsZWN0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB1cGRhdGVDb2xsZWN0aW9ucyhjb2xsZWN0aW9ucywgY2FsbGJhY2spO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiB1cGRhdGVDb2xsZWN0aW9ucyhbQXNzZXNzbWVudHMsIFN1YnRlc3RzLCBRdWVzdGlvbnNdLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcIkFsbCBkb25lXCIpO1xuICAgIH0pO1xuICB9O1xuXG4gIFV0aWxzLmV4ZWN1dGUgPSBmdW5jdGlvbihmdW5jdGlvbnMpIHtcbiAgICB2YXIgc3RlcDtcbiAgICBzdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbmV4dEZ1bmN0aW9uO1xuICAgICAgbmV4dEZ1bmN0aW9uID0gZnVuY3Rpb25zLnNoaWZ0KCk7XG4gICAgICByZXR1cm4gdHlwZW9mIG5leHRGdW5jdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gbmV4dEZ1bmN0aW9uKHN0ZXApIDogdm9pZCAwO1xuICAgIH07XG4gICAgcmV0dXJuIHN0ZXAoKTtcbiAgfTtcblxuICBVdGlscy5sb2FkQ29sbGVjdGlvbnMgPSBmdW5jdGlvbihsb2FkT3B0aW9ucykge1xuICAgIHZhciBnZXROZXh0LCB0b0xvYWQ7XG4gICAgaWYgKGxvYWRPcHRpb25zLmNvbXBsZXRlID09IG51bGwpIHtcbiAgICAgIHRocm93IFwiWW91J3JlIGdvbm5hIHdhbnQgYSBjYWxsYmFjayBpbiB0aGVyZSwgYnVkZHkuXCI7XG4gICAgfVxuICAgIHRvTG9hZCA9IGxvYWRPcHRpb25zLmNvbGxlY3Rpb25zIHx8IFtdO1xuICAgIGdldE5leHQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgY3VycmVudCwgbWVtYmVyTmFtZTtcbiAgICAgIGlmIChjdXJyZW50ID0gdG9Mb2FkLnBvcCgpKSB7XG4gICAgICAgIG1lbWJlck5hbWUgPSBjdXJyZW50LnVuZGVyc2NvcmUoKS5jYW1lbGl6ZSh0cnVlKTtcbiAgICAgICAgb3B0aW9uc1ttZW1iZXJOYW1lXSA9IG5ldyB3aW5kb3dbY3VycmVudF07XG4gICAgICAgIHJldHVybiBvcHRpb25zW21lbWJlck5hbWVdLmZldGNoKHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXROZXh0KG9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbG9hZE9wdGlvbnMuY29tcGxldGUob3B0aW9ucyk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZ2V0TmV4dCh7fSk7XG4gIH07XG5cbiAgVXRpbHMudW5pdmVyc2FsVXBsb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICQuYWpheCh7XG4gICAgICB1cmw6IFRhbmdlcmluZS5zZXR0aW5ncy51cmxWaWV3KFwibG9jYWxcIiwgXCJieUNvbGxlY3Rpb25cIiksXG4gICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAga2V5czogW1wicmVzdWx0XCJdXG4gICAgICB9KSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgdmFyIGRvY0xpc3Q7XG4gICAgICAgIGRvY0xpc3QgPSBfLnBsdWNrKGRhdGEucm93cywgXCJpZFwiKTtcbiAgICAgICAgcmV0dXJuICQuY291Y2gucmVwbGljYXRlKFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImxvY2FsXCIpLCBUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJncm91cFwiKSwge1xuICAgICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gVXRpbHMuc3RpY2t5KFwiUmVzdWx0cyBzeW5jZWQgdG8gY2xvdWQgc3VjY2Vzc2Z1bGx5LlwiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcyksXG4gICAgICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLnN0aWNreShcIlVwbG9hZCBlcnJvcjxicj5cIiArIGNvZGUgKyBcIiBcIiArIG1lc3NhZ2UpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KSh0aGlzKVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZG9jX2lkczogZG9jTGlzdFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBVdGlscy5yZXN0YXJ0VGFuZ2VyaW5lID0gZnVuY3Rpb24obWVzc2FnZSwgY2FsbGJhY2spIHtcbiAgICBVdGlscy5taWRBbGVydChcIlwiICsgKG1lc3NhZ2UgfHwgJ1Jlc3RhcnRpbmcgVGFuZ2VyaW5lJykpO1xuICAgIHJldHVybiBfLmRlbGF5KGZ1bmN0aW9uKCkge1xuICAgICAgZG9jdW1lbnQubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICByZXR1cm4gdHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIgPyBjYWxsYmFjaygpIDogdm9pZCAwO1xuICAgIH0sIDIwMDApO1xuICB9O1xuXG4gIFV0aWxzLm9uVXBkYXRlU3VjY2VzcyA9IGZ1bmN0aW9uKHRvdGFsRG9jcykge1xuICAgIFV0aWxzLmRvY3VtZW50Q291bnRlcisrO1xuICAgIGlmIChVdGlscy5kb2N1bWVudENvdW50ZXIgPT09IHRvdGFsRG9jcykge1xuICAgICAgVXRpbHMucmVzdGFydFRhbmdlcmluZShcIlVwZGF0ZSBzdWNjZXNzZnVsXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcIlwiLCBmYWxzZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBVdGlscy5kb2N1bWVudENvdW50ZXIgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBVdGlscy51cGRhdGVUYW5nZXJpbmUgPSBmdW5jdGlvbihkb1Jlc29sdmUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZERvYywgZG9jSWRzLCB0YXJnZXREQjtcbiAgICBpZiAoZG9SZXNvbHZlID09IG51bGwpIHtcbiAgICAgIGRvUmVzb2x2ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgaWYgKCFUYW5nZXJpbmUudXNlci5pc0FkbWluKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgVXRpbHMuZG9jdW1lbnRDb3VudGVyID0gMDtcbiAgICBkRG9jID0gXCJvamFpXCI7XG4gICAgdGFyZ2V0REIgPSBvcHRpb25zLnRhcmdldERCIHx8IFRhbmdlcmluZS5kYl9uYW1lO1xuICAgIGRvY0lkcyA9IG9wdGlvbnMuZG9jSWRzIHx8IFtcIl9kZXNpZ24vXCIgKyBkRG9jLCBcImNvbmZpZ3VyYXRpb25cIl07XG4gICAgVXRpbHMubWlkQWxlcnQoXCJVcGRhdGluZy4uLlwiKTtcbiAgICBVdGlscy53b3JraW5nKHRydWUpO1xuICAgIHJldHVybiBUYW5nZXJpbmUuJGRiLmFsbERvY3Moe1xuICAgICAga2V5czogZG9jSWRzLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIGssIGxlbiwgb2xkRG9jcywgcmVmLCByb3c7XG4gICAgICAgIG9sZERvY3MgPSBbXTtcbiAgICAgICAgcmVmID0gcmVzcG9uc2Uucm93cztcbiAgICAgICAgZm9yIChrID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgayA8IGxlbjsgaysrKSB7XG4gICAgICAgICAgcm93ID0gcmVmW2tdO1xuICAgICAgICAgIG9sZERvY3MucHVzaCh7XG4gICAgICAgICAgICBcIl9pZFwiOiByb3cuaWQsXG4gICAgICAgICAgICBcIl9yZXZcIjogcm93LnZhbHVlLnJldlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkLmNvdWNoLnJlcGxpY2F0ZShUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJ1cGRhdGVcIiksIHRhcmdldERCLCB7XG4gICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgICBVdGlscy53b3JraW5nKGZhbHNlKTtcbiAgICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiVXBkYXRlIGZhaWxlZCByZXBsaWNhdGluZzxicj5cIiArIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5kb2N1bWVudENvdW50ZXIgPSBudWxsO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZG9jSWQsIGwsIGxlbjEsIG9sZERvYywgcmVzdWx0cywgdG90YWxEb2NzO1xuICAgICAgICAgICAgaWYgKCFkb1Jlc29sdmUpIHtcbiAgICAgICAgICAgICAgVXRpbHMub25VcGRhdGVTdWNjZXNzKDEpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b3RhbERvY3MgPSBkb2NJZHMubGVuZ3RoO1xuICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gbCA9IDAsIGxlbjEgPSBkb2NJZHMubGVuZ3RoOyBsIDwgbGVuMTsgaSA9ICsrbCkge1xuICAgICAgICAgICAgICBkb2NJZCA9IGRvY0lkc1tpXTtcbiAgICAgICAgICAgICAgb2xkRG9jID0gb2xkRG9jc1tpXTtcbiAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKChmdW5jdGlvbihkb2NJZCwgb2xkRG9jLCB0b3RhbERvY3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLiRkYi5vcGVuRG9jKGRvY0lkLCB7XG4gICAgICAgICAgICAgICAgICBjb25mbGljdHM6IHRydWUsXG4gICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLl9jb25mbGljdHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUYW5nZXJpbmUuJGRiLnJlbW92ZURvYyhvbGREb2MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBVdGlscy53b3JraW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLm9uVXBkYXRlU3VjY2Vzcyh0b3RhbERvY3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBVdGlscy5kb2N1bWVudENvdW50ZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBVdGlscy53b3JraW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLm1pZEFsZXJ0KFwiVXBkYXRlIGZhaWxlZCByZXNvbHZpbmcgY29uZmxpY3Q8YnI+XCIgKyBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLm9uVXBkYXRlU3VjY2Vzcyh0b3RhbERvY3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pKGRvY0lkLCBvbGREb2MsIHRvdGFsRG9jcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZG9jX2lkczogZG9jSWRzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFV0aWxzLmxvZyA9IGZ1bmN0aW9uKHNlbGYsIGVycm9yKSB7XG4gICAgdmFyIGNsYXNzTmFtZTtcbiAgICBjbGFzc05hbWUgPSBzZWxmLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkubWF0Y2goL2Z1bmN0aW9uXFxzKihcXHcrKS8pWzFdO1xuICAgIHJldHVybiBjb25zb2xlLmxvZyhjbGFzc05hbWUgKyBcIjogXCIgKyBlcnJvcik7XG4gIH07XG5cbiAgVXRpbHMuZGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmcsIGFyZ3MsIGtleSwgdmFsdWU7XG4gICAgYXJncyA9IDEgPD0gYXJndW1lbnRzLmxlbmd0aCA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSA6IFtdO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgYXJnID0gYXJnc1swXTtcbiAgICAgIGlmIChfLmlzU3RyaW5nKGFyZykpIHtcbiAgICAgICAgcmV0dXJuIFRhbmdlcmluZS50ZW1wRGF0YVthcmddO1xuICAgICAgfSBlbHNlIGlmIChfLmlzT2JqZWN0KGFyZykpIHtcbiAgICAgICAgcmV0dXJuIFRhbmdlcmluZS50ZW1wRGF0YSA9ICQuZXh0ZW5kKFRhbmdlcmluZS50ZW1wRGF0YSwgYXJnKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJnID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBUYW5nZXJpbmUudGVtcERhdGEgPSB7fTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFyZ3MubGVuZ3RoID09PSAyKSB7XG4gICAgICBrZXkgPSBhcmdzWzBdO1xuICAgICAgdmFsdWUgPSBhcmdzWzFdO1xuICAgICAgVGFuZ2VyaW5lLnRlbXBEYXRhW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBUYW5nZXJpbmUudGVtcERhdGE7XG4gICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFRhbmdlcmluZS50ZW1wRGF0YTtcbiAgICB9XG4gIH07XG5cbiAgVXRpbHMud29ya2luZyA9IGZ1bmN0aW9uKGlzV29ya2luZykge1xuICAgIGlmIChpc1dvcmtpbmcpIHtcbiAgICAgIGlmIChUYW5nZXJpbmUubG9hZGluZ1RpbWVyID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFRhbmdlcmluZS5sb2FkaW5nVGltZXIgPSBzZXRUaW1lb3V0KFV0aWxzLnNob3dMb2FkaW5nSW5kaWNhdG9yLCAzMDAwKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKFRhbmdlcmluZS5sb2FkaW5nVGltZXIgIT0gbnVsbCkge1xuICAgICAgICBjbGVhclRpbWVvdXQoVGFuZ2VyaW5lLmxvYWRpbmdUaW1lcik7XG4gICAgICAgIFRhbmdlcmluZS5sb2FkaW5nVGltZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuICQoXCIubG9hZGluZ19iYXJcIikucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIFV0aWxzLnNob3dMb2FkaW5nSW5kaWNhdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICQoXCI8ZGl2IGNsYXNzPSdsb2FkaW5nX2Jhcic+PGltZyBjbGFzcz0nbG9hZGluZycgc3JjPSdpbWFnZXMvbG9hZGluZy5naWYnPjwvZGl2PlwiKS5hcHBlbmRUbyhcImJvZHlcIikubWlkZGxlQ2VudGVyKCk7XG4gIH07XG5cbiAgVXRpbHMuY29uZmlybSA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgcmVmO1xuICAgIGlmICgoKHJlZiA9IG5hdmlnYXRvci5ub3RpZmljYXRpb24pICE9IG51bGwgPyByZWYuY29uZmlybSA6IHZvaWQgMCkgIT0gbnVsbCkge1xuICAgICAgbmF2aWdhdG9yLm5vdGlmaWNhdGlvbi5jb25maXJtKG1lc3NhZ2UsIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dCA9PT0gMSkge1xuICAgICAgICAgIHJldHVybiBvcHRpb25zLmNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09PSAyKSB7XG4gICAgICAgICAgcmV0dXJuIG9wdGlvbnMuY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBvcHRpb25zLmNhbGxiYWNrKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgfSwgb3B0aW9ucy50aXRsZSwgb3B0aW9ucy5hY3Rpb24gKyBcIixDYW5jZWxcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh3aW5kb3cuY29uZmlybShtZXNzYWdlKSkge1xuICAgICAgICBvcHRpb25zLmNhbGxiYWNrKHRydWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMuY2FsbGJhY2soZmFsc2UpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9O1xuXG4gIFV0aWxzLmdldFZhbHVlcyA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgdmFyIHZhbHVlcztcbiAgICB2YWx1ZXMgPSB7fTtcbiAgICAkKHNlbGVjdG9yKS5maW5kKFwiaW5wdXRbdHlwZT10ZXh0XSwgaW5wdXRbdHlwZT1wYXNzd29yZF0sIHRleHRhcmVhXCIpLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB2YWx1ZXNbZWxlbWVudC5pZF0gPSBlbGVtZW50LnZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZXM7XG4gIH07XG5cbiAgVXRpbHMuY2xlYW5VUkwgPSBmdW5jdGlvbih1cmwpIHtcbiAgICBpZiAoKHR5cGVvZiB1cmwuaW5kZXhPZiA9PT0gXCJmdW5jdGlvblwiID8gdXJsLmluZGV4T2YoXCIlXCIpIDogdm9pZCAwKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiB1cmwgPSBkZWNvZGVVUklDb21wb25lbnQodXJsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gIH07XG5cbiAgVXRpbHMudG9wQWxlcnQgPSBmdW5jdGlvbihhbGVydFRleHQsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09IG51bGwpIHtcbiAgICAgIGRlbGF5ID0gMjAwMDtcbiAgICB9XG4gICAgcmV0dXJuIFV0aWxzLmFsZXJ0KFwidG9wXCIsIGFsZXJ0VGV4dCwgZGVsYXkpO1xuICB9O1xuXG4gIFV0aWxzLm1pZEFsZXJ0ID0gZnVuY3Rpb24oYWxlcnRUZXh0LCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PSBudWxsKSB7XG4gICAgICBkZWxheSA9IDIwMDA7XG4gICAgfVxuICAgIHJldHVybiBVdGlscy5hbGVydChcIm1pZGRsZVwiLCBhbGVydFRleHQsIGRlbGF5KTtcbiAgfTtcblxuICBVdGlscy5hbGVydCA9IGZ1bmN0aW9uKHdoZXJlLCBhbGVydFRleHQsIGRlbGF5KSB7XG4gICAgdmFyICRhbGVydCwgYWxpZ25lciwgc2VsZWN0b3I7XG4gICAgaWYgKGRlbGF5ID09IG51bGwpIHtcbiAgICAgIGRlbGF5ID0gMjAwMDtcbiAgICB9XG4gICAgc3dpdGNoICh3aGVyZSkge1xuICAgICAgY2FzZSBcInRvcFwiOlxuICAgICAgICBzZWxlY3RvciA9IFwiLnRvcF9hbGVydFwiO1xuICAgICAgICBhbGlnbmVyID0gZnVuY3Rpb24oJGVsKSB7XG4gICAgICAgICAgcmV0dXJuICRlbC50b3BDZW50ZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibWlkZGxlXCI6XG4gICAgICAgIHNlbGVjdG9yID0gXCIubWlkX2FsZXJ0XCI7XG4gICAgICAgIGFsaWduZXIgPSBmdW5jdGlvbigkZWwpIHtcbiAgICAgICAgICByZXR1cm4gJGVsLm1pZGRsZUNlbnRlcigpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoVXRpbHNbd2hlcmUgKyBcIkFsZXJ0VGltZXJcIl0gIT0gbnVsbCkge1xuICAgICAgY2xlYXJUaW1lb3V0KFV0aWxzW3doZXJlICsgXCJBbGVydFRpbWVyXCJdKTtcbiAgICAgICRhbGVydCA9ICQoc2VsZWN0b3IpO1xuICAgICAgJGFsZXJ0Lmh0bWwoJGFsZXJ0Lmh0bWwoKSArIFwiPGJyPlwiICsgYWxlcnRUZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGFsZXJ0ID0gJChcIjxkaXYgY2xhc3M9J1wiICsgKHNlbGVjdG9yLnN1YnN0cmluZygxKSkgKyBcIiBkaXNwb3NhYmxlX2FsZXJ0Jz5cIiArIGFsZXJ0VGV4dCArIFwiPC9kaXY+XCIpLmFwcGVuZFRvKFwiI2NvbnRlbnRcIik7XG4gICAgfVxuICAgIGFsaWduZXIoJGFsZXJ0KTtcbiAgICByZXR1cm4gKGZ1bmN0aW9uKCRhbGVydCwgc2VsZWN0b3IsIGRlbGF5KSB7XG4gICAgICB2YXIgY29tcHV0ZWREZWxheTtcbiAgICAgIGNvbXB1dGVkRGVsYXkgPSAoKFwiXCIgKyAkYWxlcnQuaHRtbCgpKS5tYXRjaCgvPGJyPi9nKSB8fCBbXSkubGVuZ3RoICogMTUwMDtcbiAgICAgIHJldHVybiBVdGlsc1t3aGVyZSArIFwiQWxlcnRUaW1lclwiXSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIFV0aWxzW3doZXJlICsgXCJBbGVydFRpbWVyXCJdID0gbnVsbDtcbiAgICAgICAgcmV0dXJuICRhbGVydC5mYWRlT3V0KDI1MCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgTWF0aC5tYXgoY29tcHV0ZWREZWxheSwgZGVsYXkpKTtcbiAgICB9KSgkYWxlcnQsIHNlbGVjdG9yLCBkZWxheSk7XG4gIH07XG5cbiAgVXRpbHMuc3RpY2t5ID0gZnVuY3Rpb24oaHRtbCwgYnV0dG9uVGV4dCwgY2FsbGJhY2ssIHBvc2l0aW9uKSB7XG4gICAgdmFyIGRpdjtcbiAgICBpZiAoYnV0dG9uVGV4dCA9PSBudWxsKSB7XG4gICAgICBidXR0b25UZXh0ID0gXCJDbG9zZVwiO1xuICAgIH1cbiAgICBpZiAocG9zaXRpb24gPT0gbnVsbCkge1xuICAgICAgcG9zaXRpb24gPSBcIm1pZGRsZVwiO1xuICAgIH1cbiAgICBkaXYgPSAkKFwiPGRpdiBjbGFzcz0nc3RpY2t5X2FsZXJ0Jz5cIiArIGh0bWwgKyBcIjxicj48YnV0dG9uIGNsYXNzPSdjb21tYW5kIHBhcmVudF9yZW1vdmUnPlwiICsgYnV0dG9uVGV4dCArIFwiPC9idXR0b24+PC9kaXY+XCIpLmFwcGVuZFRvKFwiI2NvbnRlbnRcIik7XG4gICAgaWYgKHBvc2l0aW9uID09PSBcIm1pZGRsZVwiKSB7XG4gICAgICBkaXYubWlkZGxlQ2VudGVyKCk7XG4gICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gXCJ0b3BcIikge1xuICAgICAgZGl2LnRvcENlbnRlcigpO1xuICAgIH1cbiAgICByZXR1cm4gZGl2Lm9uKFwia2V5dXBcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gMjcpIHtcbiAgICAgICAgcmV0dXJuICQodGhpcykucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfSkuZmluZChcImJ1dHRvblwiKS5jbGljayhjYWxsYmFjayk7XG4gIH07XG5cbiAgVXRpbHMudG9wU3RpY2t5ID0gZnVuY3Rpb24oaHRtbCwgYnV0dG9uVGV4dCwgY2FsbGJhY2spIHtcbiAgICBpZiAoYnV0dG9uVGV4dCA9PSBudWxsKSB7XG4gICAgICBidXR0b25UZXh0ID0gXCJDbG9zZVwiO1xuICAgIH1cbiAgICByZXR1cm4gVXRpbHMuc3RpY2t5KGh0bWwsIGJ1dHRvblRleHQsIGNhbGxiYWNrLCBcInRvcFwiKTtcbiAgfTtcblxuICBVdGlscy5tb2RhbCA9IGZ1bmN0aW9uKGh0bWwpIHtcbiAgICBpZiAoaHRtbCA9PT0gZmFsc2UpIHtcbiAgICAgICQoXCIjbW9kYWxfYmFjaywgI21vZGFsXCIpLnJlbW92ZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAkKFwiYm9keVwiKS5wcmVwZW5kKFwiPGRpdiBpZD0nbW9kYWxfYmFjayc+PC9kaXY+XCIpO1xuICAgIHJldHVybiAkKFwiPGRpdiBpZD0nbW9kYWwnPlwiICsgaHRtbCArIFwiPC9kaXY+XCIpLmFwcGVuZFRvKFwiI2NvbnRlbnRcIikubWlkZGxlQ2VudGVyKCkub24oXCJrZXl1cFwiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAyNykge1xuICAgICAgICByZXR1cm4gJChcIiNtb2RhbF9iYWNrLCAjbW9kYWxcIikucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgVXRpbHMucGFzc3dvcmRQcm9tcHQgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciAkYnV0dG9uLCAkcGFzcywgaHRtbDtcbiAgICBodG1sID0gXCI8ZGl2IGlkPSdwYXNzX2Zvcm0nIHRpdGxlPSdVc2VyIHZlcmlmaWNhdGlvbic+IDxsYWJlbCBmb3I9J3Bhc3N3b3JkJz5QbGVhc2UgcmUtZW50ZXIgeW91ciBwYXNzd29yZDwvbGFiZWw+IDxpbnB1dCBpZD0ncGFzc192YWwnIHR5cGU9J3Bhc3N3b3JkJyBuYW1lPSdwYXNzd29yZCcgaWQ9J3Bhc3N3b3JkJyB2YWx1ZT0nJz4gPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCcgZGF0YS12ZXJpZnk9J3RydWUnPlZlcmlmeTwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdjb21tYW5kJz5DYW5jZWw8L2J1dHRvbj4gPC9kaXY+XCI7XG4gICAgVXRpbHMubW9kYWwoaHRtbCk7XG4gICAgJHBhc3MgPSAkKFwiI3Bhc3NfdmFsXCIpO1xuICAgICRidXR0b24gPSAkKFwiI3Bhc3NfZm9ybSBidXR0b25cIik7XG4gICAgJHBhc3Mub24oXCJrZXl1cFwiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKGV2ZW50LndoaWNoICE9PSAxMykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgICRidXR0b24ub2ZmKFwiY2xpY2tcIik7XG4gICAgICAkcGFzcy5vZmYoXCJjaGFuZ2VcIik7XG4gICAgICBjYWxsYmFjaygkcGFzcy52YWwoKSk7XG4gICAgICByZXR1cm4gVXRpbHMubW9kYWwoZmFsc2UpO1xuICAgIH0pO1xuICAgIHJldHVybiAkYnV0dG9uLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICRidXR0b24ub2ZmKFwiY2xpY2tcIik7XG4gICAgICAkcGFzcy5vZmYoXCJjaGFuZ2VcIik7XG4gICAgICBpZiAoJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLXZlcmlmeVwiKSA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgICAgY2FsbGJhY2soJHBhc3MudmFsKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFV0aWxzLm1vZGFsKGZhbHNlKTtcbiAgICB9KTtcbiAgfTtcblxuICBVdGlscy5ndWlkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuUzQoKSArIHRoaXMuUzQoKSArIFwiLVwiICsgdGhpcy5TNCgpICsgXCItXCIgKyB0aGlzLlM0KCkgKyBcIi1cIiArIHRoaXMuUzQoKSArIFwiLVwiICsgdGhpcy5TNCgpICsgdGhpcy5TNCgpICsgdGhpcy5TNCgpO1xuICB9O1xuXG4gIFV0aWxzLlM0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApIHwgMCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTtcbiAgfTtcblxuICBVdGlscy5odW1hbkdVSUQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yYW5kb21MZXR0ZXJzKDQpICsgXCItXCIgKyB0aGlzLnJhbmRvbUxldHRlcnMoNCkgKyBcIi1cIiArIHRoaXMucmFuZG9tTGV0dGVycyg0KTtcbiAgfTtcblxuICBVdGlscy5zYWZlTGV0dGVycyA9IFwiYWJjZGVmZ2hpamxtbm9wcXJzdHV2d3h5elwiLnNwbGl0KFwiXCIpO1xuXG4gIFV0aWxzLnJhbmRvbUxldHRlcnMgPSBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIHJlc3VsdCA9IFwiXCI7XG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICByZXN1bHQgKz0gVXRpbHMuc2FmZUxldHRlcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogVXRpbHMuc2FmZUxldHRlcnMubGVuZ3RoKV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgVXRpbHMuZmxhc2ggPSBmdW5jdGlvbihjb2xvciwgc2hvdWxkVHVybkl0T24pIHtcbiAgICBpZiAoY29sb3IgPT0gbnVsbCkge1xuICAgICAgY29sb3IgPSBcInJlZFwiO1xuICAgIH1cbiAgICBpZiAoc2hvdWxkVHVybkl0T24gPT0gbnVsbCkge1xuICAgICAgc2hvdWxkVHVybkl0T24gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoc2hvdWxkVHVybkl0T24gPT0gbnVsbCkge1xuICAgICAgVXRpbHMuYmFja2dyb3VuZChjb2xvcik7XG4gICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFV0aWxzLmJhY2tncm91bmQoXCJcIik7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gIH07XG5cbiAgVXRpbHMuYmFja2dyb3VuZCA9IGZ1bmN0aW9uKGNvbG9yKSB7XG4gICAgaWYgKGNvbG9yICE9IG51bGwpIHtcbiAgICAgIHJldHVybiAkKFwiI2NvbnRlbnRfd3JhcHBlclwiKS5jc3Moe1xuICAgICAgICBcImJhY2tncm91bmRDb2xvclwiOiBjb2xvclxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkKFwiI2NvbnRlbnRfd3JhcHBlclwiKS5jc3MoXCJiYWNrZ3JvdW5kQ29sb3JcIik7XG4gICAgfVxuICB9O1xuXG4gIFV0aWxzLiRfR0VUID0gZnVuY3Rpb24ocSwgcykge1xuICAgIHZhciBwYXJ0cywgdmFycztcbiAgICB2YXJzID0ge307XG4gICAgcGFydHMgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKC9bPyZdKyhbXj0mXSspPShbXiZdKikvZ2ksIGZ1bmN0aW9uKG0sIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhbHVlID0gfnZhbHVlLmluZGV4T2YoXCIjXCIpID8gdmFsdWUuc3BsaXQoXCIjXCIpWzBdIDogdmFsdWU7XG4gICAgICByZXR1cm4gdmFyc1trZXldID0gdmFsdWUuc3BsaXQoXCIjXCIpWzBdO1xuICAgIH0pO1xuICAgIHJldHVybiB2YXJzO1xuICB9O1xuXG4gIFV0aWxzLnJlc2l6ZVNjcm9sbFBhbmUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJChcIi5zY3JvbGxfcGFuZVwiKS5oZWlnaHQoJCh3aW5kb3cpLmhlaWdodCgpIC0gKCQoXCIjbmF2aWdhdGlvblwiKS5oZWlnaHQoKSArICQoXCIjZm9vdGVyXCIpLmhlaWdodCgpICsgMTAwKSk7XG4gIH07XG5cbiAgVXRpbHMuYXNrVG9Mb2dvdXQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoY29uZmlybShcIldvdWxkIHlvdSBsaWtlIHRvIGxvZ291dCBub3c/XCIpKSB7XG4gICAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIubG9nb3V0KCk7XG4gICAgfVxuICB9O1xuXG4gIFV0aWxzLm9sZENvbnNvbGVMb2cgPSBudWxsO1xuXG4gIFV0aWxzLmVuYWJsZUNvbnNvbGVMb2cgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodHlwZW9mIG9sZENvbnNvbGVMb2cgPT09IFwidW5kZWZpbmVkXCIgfHwgb2xkQ29uc29sZUxvZyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gd2luZG93LmNvbnNvbGUubG9nID0gb2xkQ29uc29sZUxvZztcbiAgfTtcblxuICBVdGlscy5kaXNhYmxlQ29uc29sZUxvZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbGRDb25zb2xlTG9nO1xuICAgIG9sZENvbnNvbGVMb2cgPSBjb25zb2xlLmxvZztcbiAgICByZXR1cm4gd2luZG93LmNvbnNvbGUubG9nID0gJC5ub29wO1xuICB9O1xuXG4gIFV0aWxzLm9sZENvbnNvbGVBc3NlcnQgPSBudWxsO1xuXG4gIFV0aWxzLmVuYWJsZUNvbnNvbGVBc3NlcnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodHlwZW9mIG9sZENvbnNvbGVBc3NlcnQgPT09IFwidW5kZWZpbmVkXCIgfHwgb2xkQ29uc29sZUFzc2VydCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gd2luZG93LmNvbnNvbGUuYXNzZXJ0ID0gb2xkQ29uc29sZUFzc2VydDtcbiAgfTtcblxuICBVdGlscy5kaXNhYmxlQ29uc29sZUFzc2VydCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbGRDb25zb2xlQXNzZXJ0O1xuICAgIG9sZENvbnNvbGVBc3NlcnQgPSBjb25zb2xlLmFzc2VydDtcbiAgICByZXR1cm4gd2luZG93LmNvbnNvbGUuYXNzZXJ0ID0gJC5ub29wO1xuICB9O1xuXG4gIHJldHVybiBVdGlscztcblxufSkoKTtcblxuUm9iYmVydCA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gUm9iYmVydCgpIHt9XG5cbiAgUm9iYmVydC5mZXRjaFVzZXJzID0gZnVuY3Rpb24oZ3JvdXAsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIFJvYmJlcnQucmVxKHtcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBcIi9ncm91cC9cIiArIGdyb3VwLFxuICAgICAgc3VjY2VzczogY2FsbGJhY2ssXG4gICAgICBlcnJvcjogY2FsbGJhY2tcbiAgICB9KTtcbiAgfTtcblxuICBSb2JiZXJ0LnJlcSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zLnVybCA9IFRhbmdlcmluZS5jb25maWcuZ2V0KFwicm9iYmVydFwiKSArIG9wdGlvbnMudXJsO1xuICAgIG9wdGlvbnMuY29udGVudFR5cGUgPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgb3B0aW9ucy5hY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgb3B0aW9ucy5kYXRhVHlwZSA9ICdqc29uJztcbiAgICBvcHRpb25zLmRhdGEgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLmRhdGEpO1xuICAgIGNvbnNvbGUubG9nKG9wdGlvbnMpO1xuICAgIHJldHVybiAkLmFqYXgob3B0aW9ucyk7XG4gIH07XG5cbiAgUm9iYmVydC5mZXRjaFVzZXIgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIFJvYmJlcnQucmVxKHtcbiAgICAgIHR5cGU6ICdHRVQnLFxuICAgICAgdXJsOiBcIi91c2VyL1wiICsgVGFuZ2VyaW5lLnVzZXIuZ2V0KFwibmFtZVwiKSxcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIHJldHVybiB0eXBlb2Ygb3B0aW9ucy5zdWNjZXNzID09PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zLnN1Y2Nlc3MoZGF0YSkgOiB2b2lkIDA7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSxcbiAgICAgIGVycm9yOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIG9wdGlvbnMuZXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnMuZXJyb3IoZGF0YSkgOiB2b2lkIDA7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFJvYmJlcnQubmV3R3JvdXAgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIFJvYmJlcnQucmVxKHtcbiAgICAgIHR5cGU6ICdQVVQnLFxuICAgICAgdXJsOiAnL2dyb3VwJyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgbmFtZTogb3B0aW9ucy5uYW1lXG4gICAgICB9LFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBvcHRpb25zLnN1Y2Nlc3MgPT09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnMuc3VjY2VzcyhkYXRhKSA6IHZvaWQgMDtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIHJldHVybiB0eXBlb2Ygb3B0aW9ucy5lcnJvciA9PT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucy5lcnJvcihkYXRhKSA6IHZvaWQgMDtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgUm9iYmVydC5sZWF2ZUdyb3VwID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBSb2JiZXJ0LnJlcSh7XG4gICAgICB0eXBlOiAnREVMRVRFJyxcbiAgICAgIHVybDogXCIvZ3JvdXAvXCIgKyBvcHRpb25zLmdyb3VwICsgXCIvXCIgKyBvcHRpb25zLnVzZXIsXG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIG9wdGlvbnMuc3VjY2VzcyA9PT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucy5zdWNjZXNzKGRhdGEpIDogdm9pZCAwO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyksXG4gICAgICBlcnJvcjogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBvcHRpb25zLmVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zLmVycm9yKGRhdGEpIDogdm9pZCAwO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBSb2JiZXJ0LnNpZ251cCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gUm9iYmVydC5yZXEoe1xuICAgICAgdHlwZTogJ1BVVCcsXG4gICAgICB1cmw6ICcvdXNlcicsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIG5hbWU6IG9wdGlvbnMubmFtZSxcbiAgICAgICAgcGFzczogb3B0aW9ucy5wYXNzXG4gICAgICB9LFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBvcHRpb25zLnN1Y2Nlc3MgPT09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnMuc3VjY2VzcyhkYXRhKSA6IHZvaWQgMDtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIHJldHVybiB0eXBlb2Ygb3B0aW9ucy5lcnJvciA9PT0gXCJmdW5jdGlvblwiID8gb3B0aW9ucy5lcnJvcihkYXRhKSA6IHZvaWQgMDtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgUm9iYmVydC5yb2xlUG9zdCA9IGZ1bmN0aW9uKHVybCwgdXNlciwgY2FsbGJhY2spIHtcbiAgICB2YXIgb3B0aW9ucztcbiAgICBvcHRpb25zID0ge1xuICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgdXJsOiAoXCIvZ3JvdXAvXCIgKyAoVGFuZ2VyaW5lLnNldHRpbmdzLmdldChcImdyb3VwTmFtZVwiKSkpICsgdXJsLFxuICAgICAgZGF0YToge1xuICAgICAgICB1c2VyOiB1c2VyXG4gICAgICB9LFxuICAgICAgc3VjY2VzczogY2FsbGJhY2ssXG4gICAgICBlcnJvcjogY2FsbGJhY2ssXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChyZXMucmVzcG9uc2VKU09OLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFJvYmJlcnQucmVxKG9wdGlvbnMpO1xuICB9O1xuXG4gIFJvYmJlcnQuYWRkQWRtaW4gPSBmdW5jdGlvbih1c2VyLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBSb2JiZXJ0LnJvbGVQb3N0KFwiL2FkZC1hZG1pblwiLCB1c2VyLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgUm9iYmVydC5hZGRNZW1iZXIgPSBmdW5jdGlvbih1c2VyLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBSb2JiZXJ0LnJvbGVQb3N0KFwiL2FkZC1tZW1iZXJcIiwgdXNlciwgY2FsbGJhY2spO1xuICB9O1xuXG4gIFJvYmJlcnQucmVtb3ZlQWRtaW4gPSBmdW5jdGlvbih1c2VyLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBSb2JiZXJ0LnJvbGVQb3N0KFwiL3JlbW92ZS1hZG1pblwiLCB1c2VyLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgUm9iYmVydC5yZW1vdmVNZW1iZXIgPSBmdW5jdGlvbih1c2VyLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBSb2JiZXJ0LnJvbGVQb3N0KFwiL3JlbW92ZS1tZW1iZXJcIiwgdXNlciwgY2FsbGJhY2spO1xuICB9O1xuXG4gIHJldHVybiBSb2JiZXJ0O1xuXG59KSgpO1xuXG5UYW5nZXJpbmVUcmVlID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBUYW5nZXJpbmVUcmVlKCkge31cblxuICBUYW5nZXJpbmVUcmVlLm1ha2UgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGVycm9yLCBzdWNjZXNzO1xuICAgIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7XG4gICAgZXJyb3IgPSBvcHRpb25zLmVycm9yO1xuICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgY3Jvc3NEb21haW46IHRydWUsXG4gICAgICB1cmw6IChUYW5nZXJpbmUuY29uZmlnLmdldCgndHJlZScpKSArIFwiL2dyb3VwLVwiICsgKFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoJ2dyb3VwTmFtZScpKSArIFwiL1wiICsgKFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoJ2hvc3RuYW1lJykpLFxuICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIGRhdGE6IHt9LFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIHN1Y2Nlc3MoZGF0YSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSxcbiAgICAgIGVycm9yOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gZXJyb3IoZGF0YSwgSlNPTi5wYXJzZShkYXRhLnJlc3BvbnNlVGV4dCkpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyksXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBVdGlscy53b3JraW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gVGFuZ2VyaW5lVHJlZTtcblxufSkoKTtcblxuJChmdW5jdGlvbigpIHtcbiAgJChcIiNjb250ZW50XCIpLm9uKFwiY2xpY2tcIiwgXCIuY2xlYXJfbWVzc2FnZVwiLCBudWxsLCBmdW5jdGlvbihhKSB7XG4gICAgcmV0dXJuICQoYS50YXJnZXQpLnBhcmVudCgpLmZhZGVPdXQoMjUwLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkKHRoaXMpLmVtcHR5KCkuc2hvdygpO1xuICAgIH0pO1xuICB9KTtcbiAgJChcIiNjb250ZW50XCIpLm9uKFwiY2xpY2tcIiwgXCIucGFyZW50X3JlbW92ZVwiLCBudWxsLCBmdW5jdGlvbihhKSB7XG4gICAgcmV0dXJuICQoYS50YXJnZXQpLnBhcmVudCgpLmZhZGVPdXQoMjUwLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkKHRoaXMpLnJlbW92ZSgpO1xuICAgIH0pO1xuICB9KTtcbiAgJChcIiNjb250ZW50XCIpLm9uKFwiY2xpY2tcIiwgXCIuYWxlcnRfYnV0dG9uXCIsIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbGVydF90ZXh0O1xuICAgIGFsZXJ0X3RleHQgPSAkKHRoaXMpLmF0dHIoXCJkYXRhLWFsZXJ0XCIpID8gJCh0aGlzKS5hdHRyKFwiZGF0YS1hbGVydFwiKSA6ICQodGhpcykudmFsKCk7XG4gICAgcmV0dXJuIFV0aWxzLmRpc3Bvc2FibGVBbGVydChhbGVydF90ZXh0KTtcbiAgfSk7XG4gIHJldHVybiAkKFwiI2NvbnRlbnRcIikub24oXCJjbGlja1wiLCBcIi5kaXNwb3NhYmxlX2FsZXJ0XCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkKHRoaXMpLnN0b3AoKS5mYWRlT3V0KDEwMCwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJCh0aGlzKS5yZW1vdmUoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuIiwiY2xhc3MgRG9jdW1lbnRzRm9yQ2xpZW50IGV4dGVuZHMgQmFja2JvbmUuQ29sbGVjdGlvblxuICBtb2RlbDogQmFja2JvbmUuTW9kZWwgXG4gIHVybDogJ2ZvckNsaWVudCdcbiIsInZhciBEb2N1bWVudHNGb3JDbGllbnQsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5Eb2N1bWVudHNGb3JDbGllbnQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoRG9jdW1lbnRzRm9yQ2xpZW50LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBEb2N1bWVudHNGb3JDbGllbnQoKSB7XG4gICAgcmV0dXJuIERvY3VtZW50c0ZvckNsaWVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIERvY3VtZW50c0ZvckNsaWVudC5wcm90b3R5cGUubW9kZWwgPSBCYWNrYm9uZS5Nb2RlbDtcblxuICBEb2N1bWVudHNGb3JDbGllbnQucHJvdG90eXBlLnVybCA9ICdmb3JDbGllbnQnO1xuXG4gIHJldHVybiBEb2N1bWVudHNGb3JDbGllbnQ7XG5cbn0pKEJhY2tib25lLkNvbGxlY3Rpb24pO1xuXG4iLCJjbGFzcyBCdXR0b25WaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZSA6IFwiQnV0dG9uVmlld1wiXG5cbiAgZXZlbnRzIDpcbiAgICBpZiBNb2Rlcm5penIudG91Y2hcbiAgICAgIFwidG91Y2hzdGFydCAuYnV0dG9uXCIgOiBcIm9uQ2xpY2tcIlxuICAgIGVsc2UgXG4gICAgICBcImNsaWNrIC5idXR0b25cIiAgICAgIDogXCJvbkNsaWNrXCJcblxuICBnZXRWYWx1ZTogLT4gQGFuc3dlclxuXG4gIHNldFZhbHVlOiAodmFsdWVzID0gW10pIC0+XG5cbiAgICB2YWx1ZXMgPSBbdmFsdWVzXSB1bmxlc3MgXyh2YWx1ZXMpLmlzQXJyYXkoKVxuXG4gICAgQGFuc3dlciA9IF8udW5pb24odmFsdWVzLCBAb3B0aW9ucylcblxuICAgIHNlbGVjdG9yID0gQGFuc3dlci5tYXAoICh2YWx1ZSkgLT4gXCJbZGF0YS12YWx1ZT0nI3t2YWx1ZX0nXVwiICkuam9pbignLCcpXG5cbiAgICBAJGVsLmZpbmQoXCIuYnV0dG9uXCIpLnJlbW92ZUNsYXNzIFwic2VsZWN0ZWRcIlxuICAgIEAkZWwuZmluZChzZWxlY3RvcikuYWRkQ2xhc3MgXCJzZWxlY3RlZFwiXG5cblxuICBvbkNoYW5nZTogKGV2ZW50KSAtPlxuXG4gICAgdmFsdWUgPSBfLm1hcCgkKGV2ZW50LnRhcmdldCkuZmluZChcIm9wdGlvbjpzZWxlY3RlZFwiKSwgKHgpIC0+ICQoeCkuYXR0cignZGF0YS1hbnN3ZXInKSlcbiAgICBAdHJpZ2dlciBcImNoYW5nZVwiLCBAZWxcblxuICBoeWJyaWRDbGljazogKG9wdHMpIC0+IFxuICAgIEAkZWwuZmluZChcIi5idXR0b25cIikucmVtb3ZlQ2xhc3MgXCJzZWxlY3RlZFwiXG5cbiAgICBpZiBub3Qgb3B0cy5jaGVja2VkQmVmb3JlXG4gICAgICBvcHRzLiR0YXJnZXQuYWRkQ2xhc3MgXCJzZWxlY3RlZFwiXG4gICAgICBAYW5zd2VyID0gXCJcIlxuICAgIGVsc2VcbiAgICAgIEBhbnN3ZXIgPSBvcHRzLnZhbHVlXG5cbiAgc2luZ2xlQ2xpY2s6IChvcHRzKSAtPlxuICAgIEAkZWwuZmluZChcIi5idXR0b25cIikucmVtb3ZlQ2xhc3MgXCJzZWxlY3RlZFwiXG4gICAgb3B0cy4kdGFyZ2V0LmFkZENsYXNzIFwic2VsZWN0ZWRcIlxuICAgIEBhbnN3ZXIgPSBvcHRzLnZhbHVlXG5cblxuICBtdWx0aXBsZUNsaWNrOiAob3B0cykgLT5cblxuICAgIGlmIG9wdHMuY2hlY2tlZEJlZm9yZVxuICAgICAgb3B0cy4kdGFyZ2V0LnJlbW92ZUNsYXNzIFwic2VsZWN0ZWRcIlxuICAgIGVsc2VcbiAgICAgIG9wdHMuJHRhcmdldC5hZGRDbGFzcyBcInNlbGVjdGVkXCJcblxuICAgIEBhbnN3ZXJbb3B0cy52YWx1ZV0gPVxuICAgICAgaWYgb3B0cy5jaGVja2VkQmVmb3JlXG4gICAgICAgIFwidW5jaGVja2VkXCJcbiAgICAgIGVsc2VcbiAgICAgICAgXCJjaGVja2VkXCJcblxuXG4gIG9uQ2xpY2sgOiAoZXZlbnQpIC0+XG5cbiAgICBvcHRpb25zID1cbiAgICAgICR0YXJnZXQgICAgICAgOiAkKGV2ZW50LnRhcmdldClcbiAgICAgIHZhbHVlICAgICAgICAgOiAkKGV2ZW50LnRhcmdldCkuYXR0cignZGF0YS12YWx1ZScpXG4gICAgICBjaGVja2VkQmVmb3JlIDogJChldmVudC50YXJnZXQpLmhhc0NsYXNzKFwic2VsZWN0ZWRcIilcblxuICAgIEBbXCIje0Btb2RlfUNsaWNrXCJdKG9wdGlvbnMpXG4gICAgQHRyaWdnZXIgXCJjaGFuZ2VcIiwgQGVsXG5cbiAgaW5pdGlhbGl6ZSA6ICggb3B0aW9ucyApIC0+XG4gICAgQG1vZGUgICAgPSBvcHRpb25zLm1vZGVcbiAgICBAb3B0aW9ucyA9IG9wdGlvbnMub3B0aW9uc1xuXG4gICAgQGZvbnRGYW1pbHkgPSBvcHRpb25zLmZvbnRGYW1pbHlcbiAgICBAZm9udFN0eWxlID0gaWYgQGZvbnRGYW1pbHk/IGFuZCBAZm9udEZhbWlseSAhPSBcIlwiXG4gICAgICAgIFwic3R5bGU9XFxcImZvbnQtZmFtaWx5OiAje0Bmb250RmFtaWx5fSAhaW1wb3J0YW50O1xcXCJcIlxuICAgICAgZWxzZVxuICAgICAgICBcIlwiXG4gICAgXG4gICAgaWYgQG1vZGUgPT0gXCJzaW5nbGVcIiBvciBAbW9kZSA9PSBcIm9wZW5cIlxuICAgICAgYW5zd2VyID0gXCJcIlxuICAgIGVsc2UgaWYgQG1vZGUgPT0gXCJtdWx0aXBsZVwiXG4gICAgICBhbnN3ZXIgPSB7fVxuICAgICAgQG9wdGlvbnMuZm9yRWFjaCAob3B0aW9uKSAtPlxuICAgICAgICBhbnN3ZXJbb3B0aW9uLnZhbHVlXSA9IFwidW5jaGVja2VkXCJcblxuICAgIEBhbnN3ZXIgPSBhbnN3ZXJcblxuICByZW5kZXIgOiAtPlxuXG4gICAgaHRtbE9wdGlvbnMgPSBcIlwiXG5cbiAgICBAb3B0aW9ucy5mb3JFYWNoIChvcHRpb24sIGkpIC0+XG5cbiAgICAgIHN0eWxlQ2xhc3MgPVxuICAgICAgICBpZiBpID09IDBcbiAgICAgICAgICBcImxlZnRcIlxuICAgICAgICBlbHNlIGlmIGkgPT0gQG9wdGlvbnMubGVuZ3RoLTFcbiAgICAgICAgICBcInJpZ2h0XCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgIFwiXCJcblxuICAgICAgdmFsdWUgPSBvcHRpb24udmFsdWVcbiAgICAgIGxhYmVsID0gb3B0aW9uLmxhYmVsXG5cbiAgICAgIHNlbGVjdGVkQ2xhc3MgPVxuICAgICAgICBpZiBAbW9kZSA9PSBcIm11bHRpcGxlXCIgJiYgQGFuc3dlclt2YWx1ZV0gPT0gXCJjaGVja2VkXCJcbiAgICAgICAgICBcInNlbGVjdGVkXCJcbiAgICAgICAgZWxzZSBpZiBAbW9kZSA9PSBcInNpbmdsZVwiICYmIEBhbnN3ZXIgPT0gdmFsdWVcbiAgICAgICAgICBcInNlbGVjdGVkXCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgIFwiXCJcblxuICAgICAgaHRtbE9wdGlvbnMgKz0gXCI8ZGl2IGNsYXNzPSdidXR0b24gI3tzdHlsZUNsYXNzfSAje3NlbGVjdGVkQ2xhc3N9JyBkYXRhLXZhbHVlPScje3ZhbHVlfScgI3tAZm9udFN0eWxlfT4je2xhYmVsfTwvZGl2PlwiXG4gICAgLCBAXG5cbiAgICBAJGVsLmh0bWwoXCJcbiAgICAgICN7aHRtbE9wdGlvbnN9XG4gICAgXCIpLmFkZENsYXNzKEBjbGFzc05hbWUpICMgV2h5IGRvIEkgaGF2ZSB0byBkbyB0aGlzP1xuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG4iLCJ2YXIgQnV0dG9uVmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkJ1dHRvblZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoQnV0dG9uVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uVmlldygpIHtcbiAgICByZXR1cm4gQnV0dG9uVmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEJ1dHRvblZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiQnV0dG9uVmlld1wiO1xuXG4gIEJ1dHRvblZpZXcucHJvdG90eXBlLmV2ZW50cyA9IE1vZGVybml6ci50b3VjaCA/IHtcbiAgICBcInRvdWNoc3RhcnQgLmJ1dHRvblwiOiBcIm9uQ2xpY2tcIlxuICB9IDoge1xuICAgIFwiY2xpY2sgLmJ1dHRvblwiOiBcIm9uQ2xpY2tcIlxuICB9O1xuXG4gIEJ1dHRvblZpZXcucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYW5zd2VyO1xuICB9O1xuXG4gIEJ1dHRvblZpZXcucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgdmFyIHNlbGVjdG9yO1xuICAgIGlmICh2YWx1ZXMgPT0gbnVsbCkge1xuICAgICAgdmFsdWVzID0gW107XG4gICAgfVxuICAgIGlmICghXyh2YWx1ZXMpLmlzQXJyYXkoKSkge1xuICAgICAgdmFsdWVzID0gW3ZhbHVlc107XG4gICAgfVxuICAgIHRoaXMuYW5zd2VyID0gXy51bmlvbih2YWx1ZXMsIHRoaXMub3B0aW9ucyk7XG4gICAgc2VsZWN0b3IgPSB0aGlzLmFuc3dlci5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiBcIltkYXRhLXZhbHVlPSdcIiArIHZhbHVlICsgXCInXVwiO1xuICAgIH0pLmpvaW4oJywnKTtcbiAgICB0aGlzLiRlbC5maW5kKFwiLmJ1dHRvblwiKS5yZW1vdmVDbGFzcyhcInNlbGVjdGVkXCIpO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKHNlbGVjdG9yKS5hZGRDbGFzcyhcInNlbGVjdGVkXCIpO1xuICB9O1xuXG4gIEJ1dHRvblZpZXcucHJvdG90eXBlLm9uQ2hhbmdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBfLm1hcCgkKGV2ZW50LnRhcmdldCkuZmluZChcIm9wdGlvbjpzZWxlY3RlZFwiKSwgZnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuICQoeCkuYXR0cignZGF0YS1hbnN3ZXInKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwiY2hhbmdlXCIsIHRoaXMuZWwpO1xuICB9O1xuXG4gIEJ1dHRvblZpZXcucHJvdG90eXBlLmh5YnJpZENsaWNrID0gZnVuY3Rpb24ob3B0cykge1xuICAgIHRoaXMuJGVsLmZpbmQoXCIuYnV0dG9uXCIpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRcIik7XG4gICAgaWYgKCFvcHRzLmNoZWNrZWRCZWZvcmUpIHtcbiAgICAgIG9wdHMuJHRhcmdldC5hZGRDbGFzcyhcInNlbGVjdGVkXCIpO1xuICAgICAgcmV0dXJuIHRoaXMuYW5zd2VyID0gXCJcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuYW5zd2VyID0gb3B0cy52YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgQnV0dG9uVmlldy5wcm90b3R5cGUuc2luZ2xlQ2xpY2sgPSBmdW5jdGlvbihvcHRzKSB7XG4gICAgdGhpcy4kZWwuZmluZChcIi5idXR0b25cIikucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKTtcbiAgICBvcHRzLiR0YXJnZXQuYWRkQ2xhc3MoXCJzZWxlY3RlZFwiKTtcbiAgICByZXR1cm4gdGhpcy5hbnN3ZXIgPSBvcHRzLnZhbHVlO1xuICB9O1xuXG4gIEJ1dHRvblZpZXcucHJvdG90eXBlLm11bHRpcGxlQ2xpY2sgPSBmdW5jdGlvbihvcHRzKSB7XG4gICAgaWYgKG9wdHMuY2hlY2tlZEJlZm9yZSkge1xuICAgICAgb3B0cy4kdGFyZ2V0LnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdHMuJHRhcmdldC5hZGRDbGFzcyhcInNlbGVjdGVkXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hbnN3ZXJbb3B0cy52YWx1ZV0gPSBvcHRzLmNoZWNrZWRCZWZvcmUgPyBcInVuY2hlY2tlZFwiIDogXCJjaGVja2VkXCI7XG4gIH07XG5cbiAgQnV0dG9uVmlldy5wcm90b3R5cGUub25DbGljayA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgICR0YXJnZXQ6ICQoZXZlbnQudGFyZ2V0KSxcbiAgICAgIHZhbHVlOiAkKGV2ZW50LnRhcmdldCkuYXR0cignZGF0YS12YWx1ZScpLFxuICAgICAgY2hlY2tlZEJlZm9yZTogJChldmVudC50YXJnZXQpLmhhc0NsYXNzKFwic2VsZWN0ZWRcIilcbiAgICB9O1xuICAgIHRoaXNbdGhpcy5tb2RlICsgXCJDbGlja1wiXShvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwiY2hhbmdlXCIsIHRoaXMuZWwpO1xuICB9O1xuXG4gIEJ1dHRvblZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGFuc3dlcjtcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucy5vcHRpb25zO1xuICAgIHRoaXMuZm9udEZhbWlseSA9IG9wdGlvbnMuZm9udEZhbWlseTtcbiAgICB0aGlzLmZvbnRTdHlsZSA9ICh0aGlzLmZvbnRGYW1pbHkgIT0gbnVsbCkgJiYgdGhpcy5mb250RmFtaWx5ICE9PSBcIlwiID8gXCJzdHlsZT1cXFwiZm9udC1mYW1pbHk6IFwiICsgdGhpcy5mb250RmFtaWx5ICsgXCIgIWltcG9ydGFudDtcXFwiXCIgOiBcIlwiO1xuICAgIGlmICh0aGlzLm1vZGUgPT09IFwic2luZ2xlXCIgfHwgdGhpcy5tb2RlID09PSBcIm9wZW5cIikge1xuICAgICAgYW5zd2VyID0gXCJcIjtcbiAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICBhbnN3ZXIgPSB7fTtcbiAgICAgIHRoaXMub3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICByZXR1cm4gYW5zd2VyW29wdGlvbi52YWx1ZV0gPSBcInVuY2hlY2tlZFwiO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFuc3dlciA9IGFuc3dlcjtcbiAgfTtcblxuICBCdXR0b25WaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaHRtbE9wdGlvbnM7XG4gICAgaHRtbE9wdGlvbnMgPSBcIlwiO1xuICAgIHRoaXMub3B0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG9wdGlvbiwgaSkge1xuICAgICAgdmFyIGxhYmVsLCBzZWxlY3RlZENsYXNzLCBzdHlsZUNsYXNzLCB2YWx1ZTtcbiAgICAgIHN0eWxlQ2xhc3MgPSBpID09PSAwID8gXCJsZWZ0XCIgOiBpID09PSB0aGlzLm9wdGlvbnMubGVuZ3RoIC0gMSA/IFwicmlnaHRcIiA6IFwiXCI7XG4gICAgICB2YWx1ZSA9IG9wdGlvbi52YWx1ZTtcbiAgICAgIGxhYmVsID0gb3B0aW9uLmxhYmVsO1xuICAgICAgc2VsZWN0ZWRDbGFzcyA9IHRoaXMubW9kZSA9PT0gXCJtdWx0aXBsZVwiICYmIHRoaXMuYW5zd2VyW3ZhbHVlXSA9PT0gXCJjaGVja2VkXCIgPyBcInNlbGVjdGVkXCIgOiB0aGlzLm1vZGUgPT09IFwic2luZ2xlXCIgJiYgdGhpcy5hbnN3ZXIgPT09IHZhbHVlID8gXCJzZWxlY3RlZFwiIDogXCJcIjtcbiAgICAgIHJldHVybiBodG1sT3B0aW9ucyArPSBcIjxkaXYgY2xhc3M9J2J1dHRvbiBcIiArIHN0eWxlQ2xhc3MgKyBcIiBcIiArIHNlbGVjdGVkQ2xhc3MgKyBcIicgZGF0YS12YWx1ZT0nXCIgKyB2YWx1ZSArIFwiJyBcIiArIHRoaXMuZm9udFN0eWxlICsgXCI+XCIgKyBsYWJlbCArIFwiPC9kaXY+XCI7XG4gICAgfSwgdGhpcyk7XG4gICAgdGhpcy4kZWwuaHRtbChcIlwiICsgaHRtbE9wdGlvbnMpLmFkZENsYXNzKHRoaXMuY2xhc3NOYW1lKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgcmV0dXJuIEJ1dHRvblZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBBc3Nlc3NtZW50IGV4dGVuZHMgQmFja2JvbmUuTW9kZWxcblxuICB1cmw6ICdhc3Nlc3NtZW50J1xuXG4gIFZFUklGWV9USU1FT1VUIDogMjAgKiAxMDAwXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zPXt9ICkgLT5cbiAgICAjIHRoaXMgY29sbGVjdGlvbiBkb2Vzbid0IGdldCBzYXZlZFxuICAgICMgY2hhbmdlcyB1cGRhdGUgdGhlIHN1YnRlc3QgdmlldywgaXQga2VlcHMgb3JkZXJcbiAgICBAc3VidGVzdHMgPSBuZXcgU3VidGVzdHNcbiAgICAjIEBnZXRSZXN1bHRDb3VudCgpXG5cbiAgY2FsY0RLZXk6ID0+IEBpZC5zdWJzdHIoLTUsIDUpXG5cbiAgIyByZWZhY3RvciB0byBldmVudHNcbiAgdmVyaWZ5Q29ubmVjdGlvbjogKCBjYWxsYmFja3MgPSB7fSApID0+XG4gICAgY29uc29sZS5sb2cgXCJjYWxsZWRcIlxuICAgIEB0aW1lciA9IHNldFRpbWVvdXQoY2FsbGJhY2tzLmVycm9yLCBAVkVSSUZZX1RJTUVPVVQpIGlmIGNhbGxiYWNrcy5lcnJvcj9cbiAgICAkLmFqYXhcbiAgICAgIHVybDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybFZpZXcoXCJncm91cFwiLCBcImJ5REtleVwiKVxuICAgICAgZGF0YVR5cGU6IFwianNvbnBcIlxuICAgICAgZGF0YToga2V5czogW1widGVzdHRlc3RcIl1cbiAgICAgIHRpbWVvdXQ6IEBWRVJJRllfVElNRU9VVFxuICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgY2xlYXJUaW1lb3V0IEB0aW1lclxuICAgICAgICBjYWxsYmFja3Muc3VjY2Vzcz8oKVxuXG4gIGdldFJlc3VsdENvdW50OiA9PlxuICAgICQuYWpheCBUYW5nZXJpbmUuc2V0dGluZ3MudXJsVmlldyhcImxvY2FsXCIsIFwicmVzdWx0Q291bnRcIilcbiAgICAgIHR5cGU6IFwiUE9TVFwiXG4gICAgICBkYXRhVHlwZTogXCJqc29uXCJcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICBncm91cCAgICAgICA6IHRydWVcbiAgICAgICAgZ3JvdXBfbGV2ZWwgOiAxXG4gICAgICAgIGtleSAgICAgICAgIDogQGlkXG4gICAgICApXG4gICAgICBzdWNjZXNzOiAoZGF0YSkgPT5cbiAgICAgICAgQHJlc3VsdENvdW50ID0gaWYgZGF0YS5yb3dzLmxlbmd0aCAhPSAwIHRoZW4gZGF0YS5yb3dzWzBdLnZhbHVlIGVsc2UgMFxuICAgICAgICBAdHJpZ2dlciBcInJlc3VsdENvdW50XCJcblxuXG4gICMgSGlqYWNrZWQgc3VjY2VzcygpIGZvciBsYXRlclxuICAjIGZldGNocyBhbGwgc3VidGVzdHMgZm9yIHRoZSBhc3Nlc3NtZW50XG4gIGZldGNoOiAob3B0aW9ucykgPT5cbiAgICBvbGRTdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzXG4gICAgb3B0aW9ucy5zdWNjZXNzID0gKG1vZGVsKSA9PlxuICAgICAgICBhbGxTdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0c1xuICAgICAgICBhbGxTdWJ0ZXN0cy5mZXRjaFxuICAgICAgICAgIGtleTogQGlkXG4gICAgICAgICAgc3VjY2VzczogKGNvbGxlY3Rpb24pID0+XG4gICAgICAgICAgICBAc3VidGVzdHMgPSBjb2xsZWN0aW9uXG4gICAgICAgICAgICBAc3VidGVzdHMuZW5zdXJlT3JkZXIoKVxuICAgICAgICAgICAgb2xkU3VjY2Vzcz8gQFxuXG4gICAgQXNzZXNzbWVudC5fX3N1cGVyX18uZmV0Y2guY2FsbCBALCBvcHRpb25zXG5cbiAgc3BsaXRES2V5czogKCBkS2V5ID0gXCJcIiApIC0+XG4gICAgIyBzcGxpdCB0byBoYW5kbGUgbXVsdGlwbGUgZGtleXNcbiAgICBkS2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW2ctel0vZywnJykucmVwbGFjZSgvW15hLWYwLTldL2csXCIgXCIpLnNwbGl0KC9cXHMrLylcblxuICB1cGRhdGVGcm9tU2VydmVyOiAoIGRLZXkgPSBAY2FsY0RLZXkoKSwgZ3JvdXAgKSA9PlxuXG4gICAgQGxhc3RES2V5ID0gZEtleVxuXG4gICAgZEtleXMgPSBAc3BsaXRES2V5cyhkS2V5KVxuXG4gICAgQHRyaWdnZXIgXCJzdGF0dXNcIiwgXCJpbXBvcnQgbG9va3VwXCJcblxuICAgIHNvdXJjZURCID0gXCJncm91cC1cIiArIGdyb3VwXG4gICAgdGFyZ2V0REIgPSBUYW5nZXJpbmUuc2V0dGluZ3MuZ3JvdXBEQlxuXG4gICAgbG9jYWxES2V5ID0gVGFuZ2VyaW5lLnNldHRpbmdzLmxvY2F0aW9uLmdyb3VwLmRiK1RhbmdlcmluZS5zZXR0aW5ncy5jb3VjaC52aWV3ICsgXCJieURLZXlcIlxuXG4gICAgc291cmNlREtleSA9IFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJncm91cEhvc3RcIikgKyBcIi9kYi9cIitzb3VyY2VEQitcIi9cIitUYW5nZXJpbmUuc2V0dGluZ3MuY291Y2gudmlldyArIFwiYnlES2V5XCJcblxuICAgICQuYWpheFxuICAgICAgdXJsOiBzb3VyY2VES2V5LFxuICAgICAgdHlwZTogXCJHRVRcIlxuICAgICAgZGF0YVR5cGU6IFwianNvblwiXG4gICAgICBkYXRhOiBrZXlzOiBKU09OLnN0cmluZ2lmeShkS2V5cylcbiAgICAgIGVycm9yOiAoYSwgYikgPT4gQHRyaWdnZXIgXCJzdGF0dXNcIiwgXCJpbXBvcnQgZXJyb3JcIiwgXCIje2F9ICN7Yn1cIlxuICAgICAgc3VjY2VzczogKGRhdGEpID0+XG4gICAgICAgIGRvY0xpc3QgPSBbXVxuICAgICAgICBmb3IgZGF0dW0gaW4gZGF0YS5yb3dzXG4gICAgICAgICAgZG9jTGlzdC5wdXNoIGRhdHVtLmlkXG5cbiAgICAgICAgJC5hamF4XG4gICAgICAgICAgdXJsOiBsb2NhbERLZXksXG4gICAgICAgICAgdHlwZTogXCJQT1NUXCJcbiAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCJcbiAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShrZXlzOmRLZXlzKVxuICAgICAgICAgIGVycm9yOiAoYSwgYikgPT4gQHRyaWdnZXIgXCJzdGF0dXNcIiwgXCJpbXBvcnQgZXJyb3JcIiwgXCIje2F9ICN7Yn1cIlxuICAgICAgICAgIHN1Y2Nlc3M6IChkYXRhKSA9PlxuICAgICAgICAgICAgZm9yIGRhdHVtIGluIGRhdGEucm93c1xuICAgICAgICAgICAgICBkb2NMaXN0LnB1c2ggZGF0dW0uaWRcblxuICAgICAgICAgICAgZG9jTGlzdCA9IF8udW5pcShkb2NMaXN0KVxuXG4gICAgICAgICAgICAkLmNvdWNoLnJlcGxpY2F0ZShcbiAgICAgICAgICAgICAgc291cmNlREIsXG4gICAgICAgICAgICAgIHRhcmdldERCLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IChyZXNwb25zZSk9PlxuICAgICAgICAgICAgICAgICAgQGNoZWNrQ29uZmxpY3RzIGRvY0xpc3RcbiAgICAgICAgICAgICAgICAgIEB0cmlnZ2VyIFwic3RhdHVzXCIsIFwiaW1wb3J0IHN1Y2Nlc3NcIiwgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICBlcnJvcjogKGEsIGIpICAgICAgPT4gQHRyaWdnZXIgXCJzdGF0dXNcIiwgXCJpbXBvcnQgZXJyb3JcIiwgXCIje2F9ICN7Yn1cIlxuICAgICAgICAgICAgICAsXG4gICAgICAgICAgICAgICAgZG9jX2lkczogZG9jTGlzdFxuICAgICAgICAgICAgKVxuXG4gICAgZmFsc2VcblxuICAjIHRoaXMgaXMgcHJldHR5IHN0cmFuZ2UsIGJ1dCBpdCBiYXNpY2FsbHkgdW5kZWxldGVzLCB0cmllcyB0byByZXBsaWNhdGUgYWdhaW4sIGFuZCB0aGVuIGRlbGV0ZXMgdGhlIGNvbmZsaWN0aW5nIChsb2NhbCkgdmVyc2lvbiBhcyBtYXJrZWQgYnkgdGhlIGZpcnN0IHRpbWUgYXJvdW5kLlxuICBjaGVja0NvbmZsaWN0czogKGRvY0xpc3Q9W10sIG9wdGlvbnM9e30pID0+XG5cbiAgICBAZG9jcyA9IHt9IHVubGVzcyBkb2NzP1xuXG4gICAgZm9yIGRvYyBpbiBkb2NMaXN0XG4gICAgICBkbyAoZG9jKSA9PlxuICAgICAgICBUYW5nZXJpbmUuJGRiLm9wZW5Eb2MgZG9jLFxuICAgICAgICAgIG9wZW5fcmV2cyA6IFwiYWxsXCJcbiAgICAgICAgICBjb25mbGljdHMgOiB0cnVlXG4gICAgICAgICAgZXJyb3I6IC0+XG4gICAgICAgICAgICBjb25zb2xlLmxvZyBcImVycm9yIHdpdGggI3tkb2N9XCJcbiAgICAgICAgICBzdWNjZXNzOiAoZG9jKSA9PlxuICAgICAgICAgICAgaWYgZG9jLmxlbmd0aCA9PSAxXG4gICAgICAgICAgICAgIGRvYyA9IGRvY1swXS5vayAjIGNvdWNoIGlzIHdlaXJkXG4gICAgICAgICAgICAgIGlmIGRvYy5kZWxldGVkQXQgPT0gXCJtb2JpbGVcIlxuICAgICAgICAgICAgICAgICQuYWpheFxuICAgICAgICAgICAgICAgICAgdHlwZTogXCJQVVRcIlxuICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiXG4gICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cDovL2xvY2FsaG9zdDo1OTg0L1wiK1RhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImxvY2FsXCIpICsgXCIvXCIgK2RvYy5faWRcbiAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICAgICAgICBcIl9yZXZcIiAgICAgIDogZG9jLl9yZXZcbiAgICAgICAgICAgICAgICAgICAgXCJkZWxldGVkQXRcIiA6IGRvYy5kZWxldGVkQXRcbiAgICAgICAgICAgICAgICAgICAgXCJfZGVsZXRlZFwiICA6IGZhbHNlXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBlcnJvcjogPT5cbiAgICAgICAgICAgICAgICAgICAgI2NvbnNvbGUubG9nIFwic2F2ZSBuZXcgZG9jIGVycm9yXCJcbiAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiA9PlxuICAgICAgICAgICAgICAgICAgICBAZG9jcy5jaGVja2VkID0gMCB1bmxlc3MgQGRvY3MuY2hlY2tlZD9cbiAgICAgICAgICAgICAgICAgICAgQGRvY3MuY2hlY2tlZCsrXG4gICAgICAgICAgICAgICAgICAgIGlmIEBkb2NzLmNoZWNrZWQgPT0gZG9jTGlzdC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICBAZG9jcy5jaGVja2VkID0gMFxuICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBfLmlzRW1wdHkgQGxhc3RES2V5XG4gICAgICAgICAgICAgICAgICAgICAgICBAdXBkYXRlRnJvbVNlcnZlciBAbGFzdERLZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIEBsYXN0REtleSA9IFwiXCJcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgZG9jcyA9IGRvY1xuICAgICAgICAgICAgICBmb3IgZG9jIGluIGRvY3NcbiAgICAgICAgICAgICAgICBkb2MgPSBkb2Mub2tcbiAgICAgICAgICAgICAgICBkbyAoZG9jLCBkb2NzKSA9PlxuICAgICAgICAgICAgICAgICAgaWYgZG9jLmRlbGV0ZWRBdCA9PSBcIm1vYmlsZVwiXG4gICAgICAgICAgICAgICAgICAgICQuYWpheFxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUFVUXCJcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCJcbiAgICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cDovL2xvY2FsaG9zdDo1OTg0L1wiK1RhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImxvY2FsXCIpICsgXCIvXCIgK2RvYy5faWRcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiX3JldlwiICAgICAgOiBkb2MuX3JldlxuICAgICAgICAgICAgICAgICAgICAgICAgXCJfZGVsZXRlZFwiICA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAjY29uc29sZS5sb2cgXCJDb3VsZCBub3QgZGVsZXRlIGNvbmZsaWN0aW5nIHZlcnNpb25cIlxuICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgQGRvY3MuY2hlY2tlZCA9IDAgdW5sZXNzIEBkb2NzLmNoZWNrZWQ/XG4gICAgICAgICAgICAgICAgICAgICAgICBAZG9jcy5jaGVja2VkKytcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIEBkb2NzLmNoZWNrZWQgPT0gZG9jTGlzdC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgQGRvY3MuY2hlY2tlZCA9IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IF8uaXNFbXB0eSBAbGFzdERLZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAdXBkYXRlRnJvbVNlcnZlciBAbGFzdERLZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbGFzdERLZXkgPSBcIlwiXG5cbiAgdXBkYXRlRnJvbUlyaXNDb3VjaDogKCBkS2V5ID0gQGNhbGNES2V5KCkgKSA9PlxuXG4gICAgIyBzcGxpdCB0byBoYW5kbGUgbXVsdGlwbGUgZGtleXNcbiAgICBkS2V5cyA9IGRLZXkucmVwbGFjZSgvW15hLWYwLTldL2csXCIgXCIpLnNwbGl0KC9cXHMrLylcblxuICAgIEB0cmlnZ2VyIFwic3RhdHVzXCIsIFwiaW1wb3J0IGxvb2t1cFwiXG4gICAgJC5hamF4XG4gICAgICB1cmw6IFwiaHR0cDovL3RhbmdlcmluZS5pcmlzY291Y2guY29tL3RhbmdlcmluZS9fZGVzaWduL29qYWkvX3ZpZXcvYnlES2V5XCJcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIlxuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICB0eXBlOiBcIkdFVFwiXG4gICAgICBkYXRhOlxuICAgICAgICBrZXlzIDogSlNPTi5zdHJpbmdpZnkoZEtleXMpXG4gICAgICBzdWNjZXNzOiAoZGF0YSkgPT5cbiAgICAgICAgZG9jTGlzdCA9IFtdXG4gICAgICAgIGZvciBkYXR1bSBpbiBkYXRhLnJvd3NcbiAgICAgICAgICBkb2NMaXN0LnB1c2ggZGF0dW0uaWRcbiAgICAgICAgJC5jb3VjaC5yZXBsaWNhdGUoXG4gICAgICAgICAgXCJodHRwOi8vdGFuZ2VyaW5lLmlyaXNjb3VjaC5jb20vdGFuZ2VyaW5lXCIsXG4gICAgICAgICAgVGFuZ2VyaW5lLnNldHRpbmdzLmdyb3VwREIsXG4gICAgICAgICAgICBzdWNjZXNzOihyZXNwb25zZSkgPT4gQHRyaWdnZXIgXCJzdGF0dXNcIiwgXCJpbXBvcnQgc3VjY2Vzc1wiLCByZXNwb25zZVxuICAgICAgICAgICAgZXJyb3I6IChhLCBiKSAgICAgID0+IEB0cmlnZ2VyIFwic3RhdHVzXCIsIFwiaW1wb3J0IGVycm9yXCIsIFwiI3thfSAje2J9XCJcbiAgICAgICAgICAsXG4gICAgICAgICAgICBkb2NfaWRzOiBkb2NMaXN0XG4gICAgICAgIClcblxuICAgIGZhbHNlXG5cblxuICAjIEZldGNoZXMgYWxsIGFzc2Vzc21lbnQgcmVsYXRlZCBkb2N1bWVudHMsIHB1dHMgdGhlbSB0b2dldGhlciBpbiBhIGRvY3VtZW50XG4gICMgYXJyYXkgZm9yIHVwbG9hZGluZyB0byBidWxrZG9jcy5cbiAgZHVwbGljYXRlOiAtPlxuXG4gICAgcXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9uc1xuICAgIHN1YnRlc3RzICA9IG5ldyBTdWJ0ZXN0c1xuXG4gICAgbW9kZWxzVG9TYXZlID0gW11cblxuICAgIG9sZE1vZGVsID0gQFxuXG4gICAgIyBnZW5lcmFsIHBhdHRlcm46IGNsb25lIGF0dHJpYnV0ZXMsIG1vZGlmeSB0aGVtLCBzdGFtcCB0aGVtLCBwdXQgYXR0cmlidXRlcyBpbiBhcnJheVxuXG4gICAgJC5leHRlbmQodHJ1ZSwgY2xvbmVkQXR0cmlidXRlcyA9IHt9LCBAYXR0cmlidXRlcylcblxuICAgIG5ld0lkID0gVXRpbHMuZ3VpZCgpXG5cbiAgICBjbG9uZWRBdHRyaWJ1dGVzLl9pZCAgICAgICAgICA9IG5ld0lkXG4gICAgY2xvbmVkQXR0cmlidXRlcy5uYW1lICAgICAgICAgPSBcIkNvcHkgb2YgI3tjbG9uZWRBdHRyaWJ1dGVzLm5hbWV9XCJcbiAgICBjbG9uZWRBdHRyaWJ1dGVzLmFzc2Vzc21lbnRJZCA9IG5ld0lkXG5cbiAgICBuZXdNb2RlbCA9IG5ldyBBc3Nlc3NtZW50KGNsb25lZEF0dHJpYnV0ZXMpXG5cbiAgICBtb2RlbHNUb1NhdmUucHVzaCAobmV3TW9kZWwpLnN0YW1wKCkuYXR0cmlidXRlc1xuXG5cbiAgICBnZXRRdWVzdGlvbnMgPSAtPlxuICAgICAgcXVlc3Rpb25zLmZldGNoXG4gICAgICAgIGtleTogb2xkTW9kZWwuaWRcbiAgICAgICAgc3VjY2VzczogLT4gZ2V0U3VidGVzdHMoKVxuXG4gICAgZ2V0U3VidGVzdHMgPSAtPlxuICAgICAgc3VidGVzdHMuZmV0Y2hcbiAgICAgICAga2V5OiBvbGRNb2RlbC5pZFxuICAgICAgICBzdWNjZXNzOiAtPiBwcm9jZXNzRG9jcygpXG5cbiAgICBwcm9jZXNzRG9jcyA9IC0+XG5cbiAgICAgIHN1YnRlc3RJZE1hcCA9IHt9XG5cbiAgICAgICMgbGluayBuZXcgc3VidGVzdHMgdG8gbmV3IGFzc2Vzc21lbnRcbiAgICAgIGZvciBzdWJ0ZXN0IGluIHN1YnRlc3RzLm1vZGVsc1xuXG4gICAgICAgIG9sZFN1YnRlc3RJZCA9IHN1YnRlc3QuaWRcbiAgICAgICAgbmV3U3VidGVzdElkID0gVXRpbHMuZ3VpZCgpXG5cbiAgICAgICAgc3VidGVzdElkTWFwW29sZFN1YnRlc3RJZF0gPSBuZXdTdWJ0ZXN0SWRcblxuICAgICAgICAkLmV4dGVuZCh0cnVlLCBuZXdBdHRyaWJ1dGVzID0ge30sIHN1YnRlc3QuYXR0cmlidXRlcylcblxuICAgICAgICBuZXdBdHRyaWJ1dGVzLl9pZCAgICAgICAgICA9IG5ld1N1YnRlc3RJZFxuICAgICAgICBuZXdBdHRyaWJ1dGVzLmFzc2Vzc21lbnRJZCA9IG5ld0lkXG5cbiAgICAgICAgbW9kZWxzVG9TYXZlLnB1c2ggKG5ldyBTdWJ0ZXN0KG5ld0F0dHJpYnV0ZXMpKS5zdGFtcCgpLmF0dHJpYnV0ZXNcblxuICAgICAgIyB1cGRhdGUgdGhlIGxpbmtzIHRvIG90aGVyIHN1YnRlc3RzXG4gICAgICBmb3Igc3VidGVzdCBpbiBtb2RlbHNUb1NhdmVcbiAgICAgICAgaWYgc3VidGVzdC5ncmlkTGlua0lkPyBhbmQgc3VidGVzdC5ncmlkTGlua0lkICE9IFwiXCJcbiAgICAgICAgICBzdWJ0ZXN0LmdyaWRMaW5rSWQgPSBzdWJ0ZXN0SWRNYXBbc3VidGVzdC5ncmlkTGlua0lkXVxuXG4gICAgICAjIGxpbmsgcXVlc3Rpb25zIHRvIG5ldyBzdWJ0ZXN0c1xuICAgICAgZm9yIHF1ZXN0aW9uIGluIHF1ZXN0aW9ucy5tb2RlbHNcblxuICAgICAgICAkLmV4dGVuZCh0cnVlLCBuZXdBdHRyaWJ1dGVzID0ge30sIHF1ZXN0aW9uLmF0dHJpYnV0ZXMpXG5cbiAgICAgICAgb2xkU3VidGVzdElkID0gbmV3QXR0cmlidXRlcy5zdWJ0ZXN0SWRcblxuICAgICAgICBuZXdBdHRyaWJ1dGVzLl9pZCAgICAgICAgICA9IFV0aWxzLmd1aWQoKVxuICAgICAgICBuZXdBdHRyaWJ1dGVzLnN1YnRlc3RJZCAgICA9IHN1YnRlc3RJZE1hcFtvbGRTdWJ0ZXN0SWRdXG4gICAgICAgIG5ld0F0dHJpYnV0ZXMuYXNzZXNzbWVudElkID0gbmV3SWRcblxuICAgICAgICBtb2RlbHNUb1NhdmUucHVzaCAobmV3IFF1ZXN0aW9uKG5ld0F0dHJpYnV0ZXMpKS5zdGFtcCgpLmF0dHJpYnV0ZXNcblxuICAgICAgcmVxdWVzdERhdGEgPSBcImRvY3NcIiA6IG1vZGVsc1RvU2F2ZVxuXG4gICAgICAkLmFqYXhcbiAgICAgICAgdHlwZSA6IFwiUE9TVFwiXG4gICAgICAgIGNvbnRlbnRUeXBlIDogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04XCJcbiAgICAgICAgZGF0YVR5cGUgOiBcImpzb25cIlxuICAgICAgICB1cmwgOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsQnVsa0RvY3MoKVxuICAgICAgICBkYXRhIDogSlNPTi5zdHJpbmdpZnkocmVxdWVzdERhdGEpXG4gICAgICAgIHN1Y2Nlc3MgOiAocmVzcG9uc2VzKSA9PiBvbGRNb2RlbC50cmlnZ2VyIFwibmV3XCIsIG5ld01vZGVsXG4gICAgICAgIGVycm9yIDogLT4gVXRpbHMubWlkQWxlcnQgXCJEdXBsaWNhdGlvbiBlcnJvclwiXG5cbiAgICAjIGtpY2sgaXQgb2ZmXG4gICAgZ2V0UXVlc3Rpb25zKClcblxuXG5cbiAgZGVzdHJveTogPT5cblxuICAgICMgZ2V0IGFsbCBkb2NzIHRoYXQgYmVsb25nIHRvIHRoaXMgYXNzZXNzc21lbnQgZXhjZXB0IHJlc3VsdHNcbiAgICAkLmFqYXhcbiAgICAgIHR5cGU6IFwiUE9TVFwiXG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04XCJcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIlxuICAgICAgdXJsOiBcIi9kYi8je1RhbmdlcmluZS5kYl9uYW1lfS9fZGVzaWduLyN7VGFuZ2VyaW5lLmRlc2lnbl9kb2N9L192aWV3L2J5UGFyZW50SWRcIlxuICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoeyBrZXlzIDogW1wicyN7QGlkfVwiLFwicSN7QGlkfVwiLFwiYSN7QGlkfVwiXSB9KVxuICAgICAgZXJyb3I6ICh4aHIsIHN0YXR1cywgZXJyKSAtPlxuICAgICAgICBVdGlscy5taWRBbGVydCBcIkRlbGV0ZSBlcnJvcjogMDFcIjtcbiAgICAgICAgVGFuZ2VyaW5lLmxvZy5kYihcImFzc2Vzc21lbnQtZGVsZXRlLWVycm9yLTAxXCIsXCJFcnJvcjogI3tlcnJ9LCBTdGF0dXM6ICN7c3RhdHVzfSwgeGhyOiN7eGhyLnJlc3BvbnNlVGV4dHx8J25vbmUnfS4gaGVhZGVyczogI3t4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCl9XCIpXG4gICAgICBzdWNjZXNzOiAocmVzcG9uc2UpID0+XG5cbiAgICAgICAgcmVxdWVzdERhdGEgPVxuICAgICAgICAgIGRvY3MgOiByZXNwb25zZS5yb3dzLm1hcCAocm93KSAtPlxuICAgICAgICAgICAgXCJfaWRcIiAgOiByb3cuaWRcbiAgICAgICAgICAgIFwiX3JldlwiIDogcm93LnZhbHVlLnJcbiAgICAgICAgICAgIFwiX2RlbGV0ZWRcIiA6IHRydWVcblxuICAgICAgICAkLmFqYXhcbiAgICAgICAgICB0eXBlOiBcIlBPU1RcIlxuICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLThcIlxuICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIlxuICAgICAgICAgIHVybDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybEJ1bGtEb2NzKClcbiAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0RGF0YSlcbiAgICAgICAgICBlcnJvcjogLT4gVXRpbHMubWlkQWxlcnQgXCJEZWxldGUgZXJyb3I6IDAyXCI7IFRhbmdlcmluZS5sb2cuZGIoXCJhc3Nlc3NtZW50LWRlbGV0ZS1lcnJvci0wMlwiLEpTT04uc3RyaW5naWZ5KGFyZ3VtZW50cykpXG4gICAgICAgICAgc3VjY2VzczogKHJlc3BvbnNlcykgPT5cbiAgICAgICAgICAgIG9rQ291bnQgPSAwXG4gICAgICAgICAgICAob2tDb3VudCsrIGlmIHJlc3Aub2s/KSBmb3IgcmVzcCBpbiByZXNwb25zZXNcbiAgICAgICAgICAgIGlmIG9rQ291bnQgPT0gcmVzcG9uc2VzLmxlbmd0aFxuICAgICAgICAgICAgICBAY29sbGVjdGlvbi5yZW1vdmUgQGlkXG4gICAgICAgICAgICAgIEBjbGVhcigpXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiRGVsZXRlIGVycm9yOiAwM1wiOyBUYW5nZXJpbmUubG9nLmRiKFwiYXNzZXNzbWVudC1kZWxldGUtZXJyb3ItMDNcIixKU09OLnN0cmluZ2lmeShhcmd1bWVudHMpKVxuXG4gIGlzQWN0aXZlOiAtPiByZXR1cm4gbm90IEBpc0FyY2hpdmVkKClcblxuICBpc0FyY2hpdmVkOiAtPlxuICAgIGFyY2hpdmVkID0gQGdldChcImFyY2hpdmVkXCIpXG4gICAgcmV0dXJuIGFyY2hpdmVkID09IFwidHJ1ZVwiIG9yIGFyY2hpdmVkID09IHRydWVcblxuIiwidmFyIEFzc2Vzc21lbnQsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuQXNzZXNzbWVudCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChBc3Nlc3NtZW50LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBBc3Nlc3NtZW50KCkge1xuICAgIHRoaXMuZGVzdHJveSA9IGJpbmQodGhpcy5kZXN0cm95LCB0aGlzKTtcbiAgICB0aGlzLnVwZGF0ZUZyb21JcmlzQ291Y2ggPSBiaW5kKHRoaXMudXBkYXRlRnJvbUlyaXNDb3VjaCwgdGhpcyk7XG4gICAgdGhpcy5jaGVja0NvbmZsaWN0cyA9IGJpbmQodGhpcy5jaGVja0NvbmZsaWN0cywgdGhpcyk7XG4gICAgdGhpcy51cGRhdGVGcm9tU2VydmVyID0gYmluZCh0aGlzLnVwZGF0ZUZyb21TZXJ2ZXIsIHRoaXMpO1xuICAgIHRoaXMuZmV0Y2ggPSBiaW5kKHRoaXMuZmV0Y2gsIHRoaXMpO1xuICAgIHRoaXMuZ2V0UmVzdWx0Q291bnQgPSBiaW5kKHRoaXMuZ2V0UmVzdWx0Q291bnQsIHRoaXMpO1xuICAgIHRoaXMudmVyaWZ5Q29ubmVjdGlvbiA9IGJpbmQodGhpcy52ZXJpZnlDb25uZWN0aW9uLCB0aGlzKTtcbiAgICB0aGlzLmNhbGNES2V5ID0gYmluZCh0aGlzLmNhbGNES2V5LCB0aGlzKTtcbiAgICByZXR1cm4gQXNzZXNzbWVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEFzc2Vzc21lbnQucHJvdG90eXBlLnVybCA9ICdhc3Nlc3NtZW50JztcblxuICBBc3Nlc3NtZW50LnByb3RvdHlwZS5WRVJJRllfVElNRU9VVCA9IDIwICogMTAwMDtcblxuICBBc3Nlc3NtZW50LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3VidGVzdHMgPSBuZXcgU3VidGVzdHM7XG4gIH07XG5cbiAgQXNzZXNzbWVudC5wcm90b3R5cGUuY2FsY0RLZXkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pZC5zdWJzdHIoLTUsIDUpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnQucHJvdG90eXBlLnZlcmlmeUNvbm5lY3Rpb24gPSBmdW5jdGlvbihjYWxsYmFja3MpIHtcbiAgICBpZiAoY2FsbGJhY2tzID09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrcyA9IHt9O1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcImNhbGxlZFwiKTtcbiAgICBpZiAoY2FsbGJhY2tzLmVycm9yICE9IG51bGwpIHtcbiAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KGNhbGxiYWNrcy5lcnJvciwgdGhpcy5WRVJJRllfVElNRU9VVCk7XG4gICAgfVxuICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgdXJsOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsVmlldyhcImdyb3VwXCIsIFwiYnlES2V5XCIpLFxuICAgICAgZGF0YVR5cGU6IFwianNvbnBcIixcbiAgICAgIGRhdGE6IHtcbiAgICAgICAga2V5czogW1widGVzdHRlc3RcIl1cbiAgICAgIH0sXG4gICAgICB0aW1lb3V0OiB0aGlzLlZFUklGWV9USU1FT1VULFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMudGltZXIpO1xuICAgICAgICAgIHJldHVybiB0eXBlb2YgY2FsbGJhY2tzLnN1Y2Nlc3MgPT09IFwiZnVuY3Rpb25cIiA/IGNhbGxiYWNrcy5zdWNjZXNzKCkgOiB2b2lkIDA7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIEFzc2Vzc21lbnQucHJvdG90eXBlLmdldFJlc3VsdENvdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICQuYWpheChUYW5nZXJpbmUuc2V0dGluZ3MudXJsVmlldyhcImxvY2FsXCIsIFwicmVzdWx0Q291bnRcIikoe1xuICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGdyb3VwOiB0cnVlLFxuICAgICAgICBncm91cF9sZXZlbDogMSxcbiAgICAgICAga2V5OiB0aGlzLmlkXG4gICAgICB9KSxcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIF90aGlzLnJlc3VsdENvdW50ID0gZGF0YS5yb3dzLmxlbmd0aCAhPT0gMCA/IGRhdGEucm93c1swXS52YWx1ZSA6IDA7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnRyaWdnZXIoXCJyZXN1bHRDb3VudFwiKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSkpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnQucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBvbGRTdWNjZXNzO1xuICAgIG9sZFN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7XG4gICAgb3B0aW9ucy5zdWNjZXNzID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgdmFyIGFsbFN1YnRlc3RzO1xuICAgICAgICBhbGxTdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0cztcbiAgICAgICAgcmV0dXJuIGFsbFN1YnRlc3RzLmZldGNoKHtcbiAgICAgICAgICBrZXk6IF90aGlzLmlkLFxuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgIF90aGlzLnN1YnRlc3RzID0gY29sbGVjdGlvbjtcbiAgICAgICAgICAgIF90aGlzLnN1YnRlc3RzLmVuc3VyZU9yZGVyKCk7XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIG9sZFN1Y2Nlc3MgPT09IFwiZnVuY3Rpb25cIiA/IG9sZFN1Y2Nlc3MoX3RoaXMpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpO1xuICAgIHJldHVybiBBc3Nlc3NtZW50Ll9fc3VwZXJfXy5mZXRjaC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnQucHJvdG90eXBlLnNwbGl0REtleXMgPSBmdW5jdGlvbihkS2V5KSB7XG4gICAgaWYgKGRLZXkgPT0gbnVsbCkge1xuICAgICAgZEtleSA9IFwiXCI7XG4gICAgfVxuICAgIHJldHVybiBkS2V5LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW2ctel0vZywgJycpLnJlcGxhY2UoL1teYS1mMC05XS9nLCBcIiBcIikuc3BsaXQoL1xccysvKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50LnByb3RvdHlwZS51cGRhdGVGcm9tU2VydmVyID0gZnVuY3Rpb24oZEtleSwgZ3JvdXApIHtcbiAgICB2YXIgZEtleXMsIGxvY2FsREtleSwgc291cmNlREIsIHNvdXJjZURLZXksIHRhcmdldERCO1xuICAgIGlmIChkS2V5ID09IG51bGwpIHtcbiAgICAgIGRLZXkgPSB0aGlzLmNhbGNES2V5KCk7XG4gICAgfVxuICAgIHRoaXMubGFzdERLZXkgPSBkS2V5O1xuICAgIGRLZXlzID0gdGhpcy5zcGxpdERLZXlzKGRLZXkpO1xuICAgIHRoaXMudHJpZ2dlcihcInN0YXR1c1wiLCBcImltcG9ydCBsb29rdXBcIik7XG4gICAgc291cmNlREIgPSBcImdyb3VwLVwiICsgZ3JvdXA7XG4gICAgdGFyZ2V0REIgPSBUYW5nZXJpbmUuc2V0dGluZ3MuZ3JvdXBEQjtcbiAgICBsb2NhbERLZXkgPSBUYW5nZXJpbmUuc2V0dGluZ3MubG9jYXRpb24uZ3JvdXAuZGIgKyBUYW5nZXJpbmUuc2V0dGluZ3MuY291Y2gudmlldyArIFwiYnlES2V5XCI7XG4gICAgc291cmNlREtleSA9IFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJncm91cEhvc3RcIikgKyBcIi9kYi9cIiArIHNvdXJjZURCICsgXCIvXCIgKyBUYW5nZXJpbmUuc2V0dGluZ3MuY291Y2gudmlldyArIFwiYnlES2V5XCI7XG4gICAgJC5hamF4KHtcbiAgICAgIHVybDogc291cmNlREtleSxcbiAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGtleXM6IEpTT04uc3RyaW5naWZ5KGRLZXlzKVxuICAgICAgfSxcbiAgICAgIGVycm9yOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMudHJpZ2dlcihcInN0YXR1c1wiLCBcImltcG9ydCBlcnJvclwiLCBhICsgXCIgXCIgKyBiKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgdmFyIGRhdHVtLCBkb2NMaXN0LCBpLCBsZW4sIHJlZjtcbiAgICAgICAgICBkb2NMaXN0ID0gW107XG4gICAgICAgICAgcmVmID0gZGF0YS5yb3dzO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgZGF0dW0gPSByZWZbaV07XG4gICAgICAgICAgICBkb2NMaXN0LnB1c2goZGF0dW0uaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogbG9jYWxES2V5LFxuICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIGtleXM6IGRLZXlzXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy50cmlnZ2VyKFwic3RhdHVzXCIsIFwiaW1wb3J0IGVycm9yXCIsIGEgKyBcIiBcIiArIGIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgdmFyIGosIGxlbjEsIHJlZjE7XG4gICAgICAgICAgICAgIHJlZjEgPSBkYXRhLnJvd3M7XG4gICAgICAgICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgICAgICAgIGRhdHVtID0gcmVmMVtqXTtcbiAgICAgICAgICAgICAgICBkb2NMaXN0LnB1c2goZGF0dW0uaWQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRvY0xpc3QgPSBfLnVuaXEoZG9jTGlzdCk7XG4gICAgICAgICAgICAgIHJldHVybiAkLmNvdWNoLnJlcGxpY2F0ZShzb3VyY2VEQiwgdGFyZ2V0REIsIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMuY2hlY2tDb25mbGljdHMoZG9jTGlzdCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudHJpZ2dlcihcInN0YXR1c1wiLCBcImltcG9ydCBzdWNjZXNzXCIsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudHJpZ2dlcihcInN0YXR1c1wiLCBcImltcG9ydCBlcnJvclwiLCBhICsgXCIgXCIgKyBiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkb2NfaWRzOiBkb2NMaXN0XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgQXNzZXNzbWVudC5wcm90b3R5cGUuY2hlY2tDb25mbGljdHMgPSBmdW5jdGlvbihkb2NMaXN0LCBvcHRpb25zKSB7XG4gICAgdmFyIGRvYywgaSwgbGVuLCByZXN1bHRzO1xuICAgIGlmIChkb2NMaXN0ID09IG51bGwpIHtcbiAgICAgIGRvY0xpc3QgPSBbXTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRvY3MgPT09IFwidW5kZWZpbmVkXCIgfHwgZG9jcyA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5kb2NzID0ge307XG4gICAgfVxuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBkb2NMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkb2MgPSBkb2NMaXN0W2ldO1xuICAgICAgcmVzdWx0cy5wdXNoKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZG9jKSB7XG4gICAgICAgICAgcmV0dXJuIFRhbmdlcmluZS4kZGIub3BlbkRvYyhkb2MsIHtcbiAgICAgICAgICAgIG9wZW5fcmV2czogXCJhbGxcIixcbiAgICAgICAgICAgIGNvbmZsaWN0czogdHJ1ZSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiZXJyb3Igd2l0aCBcIiArIGRvYyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZG9jKSB7XG4gICAgICAgICAgICAgIHZhciBkb2NzLCBqLCBsZW4xLCByZXN1bHRzMTtcbiAgICAgICAgICAgICAgaWYgKGRvYy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICBkb2MgPSBkb2NbMF0ub2s7XG4gICAgICAgICAgICAgICAgaWYgKGRvYy5kZWxldGVkQXQgPT09IFwibW9iaWxlXCIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlBVVFwiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCJodHRwOi8vbG9jYWxob3N0OjU5ODQvXCIgKyBUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJsb2NhbFwiKSArIFwiL1wiICsgZG9jLl9pZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgIFwiX3JldlwiOiBkb2MuX3JldixcbiAgICAgICAgICAgICAgICAgICAgICBcImRlbGV0ZWRBdFwiOiBkb2MuZGVsZXRlZEF0LFxuICAgICAgICAgICAgICAgICAgICAgIFwiX2RlbGV0ZWRcIjogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmRvY3MuY2hlY2tlZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kb2NzLmNoZWNrZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kb2NzLmNoZWNrZWQrKztcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuZG9jcy5jaGVja2VkID09PSBkb2NMaXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZG9jcy5jaGVja2VkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghXy5pc0VtcHR5KF90aGlzLmxhc3RES2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVGcm9tU2VydmVyKF90aGlzLmxhc3RES2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxhc3RES2V5ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb2NzID0gZG9jO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMxID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IGRvY3MubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICBkb2MgPSBkb2NzW2pdO1xuICAgICAgICAgICAgICAgICAgZG9jID0gZG9jLm9rO1xuICAgICAgICAgICAgICAgICAgcmVzdWx0czEucHVzaCgoZnVuY3Rpb24oZG9jLCBkb2NzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2MuZGVsZXRlZEF0ID09PSBcIm1vYmlsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIlBVVFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly9sb2NhbGhvc3Q6NTk4NC9cIiArIFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImxvY2FsXCIpICsgXCIvXCIgKyBkb2MuX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9yZXZcIjogZG9jLl9yZXYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiX2RlbGV0ZWRcIjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmRvY3MuY2hlY2tlZCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZG9jcy5jaGVja2VkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kb2NzLmNoZWNrZWQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmRvY3MuY2hlY2tlZCA9PT0gZG9jTGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kb2NzLmNoZWNrZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghXy5pc0VtcHR5KF90aGlzLmxhc3RES2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlRnJvbVNlcnZlcihfdGhpcy5sYXN0REtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMubGFzdERLZXkgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KShkb2MsIGRvY3MpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKShkb2MpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgQXNzZXNzbWVudC5wcm90b3R5cGUudXBkYXRlRnJvbUlyaXNDb3VjaCA9IGZ1bmN0aW9uKGRLZXkpIHtcbiAgICB2YXIgZEtleXM7XG4gICAgaWYgKGRLZXkgPT0gbnVsbCkge1xuICAgICAgZEtleSA9IHRoaXMuY2FsY0RLZXkoKTtcbiAgICB9XG4gICAgZEtleXMgPSBkS2V5LnJlcGxhY2UoL1teYS1mMC05XS9nLCBcIiBcIikuc3BsaXQoL1xccysvKTtcbiAgICB0aGlzLnRyaWdnZXIoXCJzdGF0dXNcIiwgXCJpbXBvcnQgbG9va3VwXCIpO1xuICAgICQuYWpheCh7XG4gICAgICB1cmw6IFwiaHR0cDovL3RhbmdlcmluZS5pcmlzY291Y2guY29tL3RhbmdlcmluZS9fZGVzaWduL29qYWkvX3ZpZXcvYnlES2V5XCIsXG4gICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgZGF0YToge1xuICAgICAgICBrZXlzOiBKU09OLnN0cmluZ2lmeShkS2V5cylcbiAgICAgIH0sXG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICB2YXIgZGF0dW0sIGRvY0xpc3QsIGksIGxlbiwgcmVmO1xuICAgICAgICAgIGRvY0xpc3QgPSBbXTtcbiAgICAgICAgICByZWYgPSBkYXRhLnJvd3M7XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBkYXR1bSA9IHJlZltpXTtcbiAgICAgICAgICAgIGRvY0xpc3QucHVzaChkYXR1bS5pZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAkLmNvdWNoLnJlcGxpY2F0ZShcImh0dHA6Ly90YW5nZXJpbmUuaXJpc2NvdWNoLmNvbS90YW5nZXJpbmVcIiwgVGFuZ2VyaW5lLnNldHRpbmdzLmdyb3VwREIsIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy50cmlnZ2VyKFwic3RhdHVzXCIsIFwiaW1wb3J0IHN1Y2Nlc3NcIiwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy50cmlnZ2VyKFwic3RhdHVzXCIsIFwiaW1wb3J0IGVycm9yXCIsIGEgKyBcIiBcIiArIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRvY19pZHM6IGRvY0xpc3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEFzc2Vzc21lbnQucHJvdG90eXBlLmR1cGxpY2F0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjbG9uZWRBdHRyaWJ1dGVzLCBnZXRRdWVzdGlvbnMsIGdldFN1YnRlc3RzLCBtb2RlbHNUb1NhdmUsIG5ld0lkLCBuZXdNb2RlbCwgb2xkTW9kZWwsIHByb2Nlc3NEb2NzLCBxdWVzdGlvbnMsIHN1YnRlc3RzO1xuICAgIHF1ZXN0aW9ucyA9IG5ldyBRdWVzdGlvbnM7XG4gICAgc3VidGVzdHMgPSBuZXcgU3VidGVzdHM7XG4gICAgbW9kZWxzVG9TYXZlID0gW107XG4gICAgb2xkTW9kZWwgPSB0aGlzO1xuICAgICQuZXh0ZW5kKHRydWUsIGNsb25lZEF0dHJpYnV0ZXMgPSB7fSwgdGhpcy5hdHRyaWJ1dGVzKTtcbiAgICBuZXdJZCA9IFV0aWxzLmd1aWQoKTtcbiAgICBjbG9uZWRBdHRyaWJ1dGVzLl9pZCA9IG5ld0lkO1xuICAgIGNsb25lZEF0dHJpYnV0ZXMubmFtZSA9IFwiQ29weSBvZiBcIiArIGNsb25lZEF0dHJpYnV0ZXMubmFtZTtcbiAgICBjbG9uZWRBdHRyaWJ1dGVzLmFzc2Vzc21lbnRJZCA9IG5ld0lkO1xuICAgIG5ld01vZGVsID0gbmV3IEFzc2Vzc21lbnQoY2xvbmVkQXR0cmlidXRlcyk7XG4gICAgbW9kZWxzVG9TYXZlLnB1c2gobmV3TW9kZWwuc3RhbXAoKS5hdHRyaWJ1dGVzKTtcbiAgICBnZXRRdWVzdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBxdWVzdGlvbnMuZmV0Y2goe1xuICAgICAgICBrZXk6IG9sZE1vZGVsLmlkLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZ2V0U3VidGVzdHMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBnZXRTdWJ0ZXN0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN1YnRlc3RzLmZldGNoKHtcbiAgICAgICAga2V5OiBvbGRNb2RlbC5pZCxcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHByb2Nlc3NEb2NzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgcHJvY2Vzc0RvY3MgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpLCBqLCBrLCBsZW4sIGxlbjEsIGxlbjIsIG5ld0F0dHJpYnV0ZXMsIG5ld1N1YnRlc3RJZCwgb2xkU3VidGVzdElkLCBxdWVzdGlvbiwgcmVmLCByZWYxLCByZXF1ZXN0RGF0YSwgc3VidGVzdCwgc3VidGVzdElkTWFwO1xuICAgICAgc3VidGVzdElkTWFwID0ge307XG4gICAgICByZWYgPSBzdWJ0ZXN0cy5tb2RlbHM7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgc3VidGVzdCA9IHJlZltpXTtcbiAgICAgICAgb2xkU3VidGVzdElkID0gc3VidGVzdC5pZDtcbiAgICAgICAgbmV3U3VidGVzdElkID0gVXRpbHMuZ3VpZCgpO1xuICAgICAgICBzdWJ0ZXN0SWRNYXBbb2xkU3VidGVzdElkXSA9IG5ld1N1YnRlc3RJZDtcbiAgICAgICAgJC5leHRlbmQodHJ1ZSwgbmV3QXR0cmlidXRlcyA9IHt9LCBzdWJ0ZXN0LmF0dHJpYnV0ZXMpO1xuICAgICAgICBuZXdBdHRyaWJ1dGVzLl9pZCA9IG5ld1N1YnRlc3RJZDtcbiAgICAgICAgbmV3QXR0cmlidXRlcy5hc3Nlc3NtZW50SWQgPSBuZXdJZDtcbiAgICAgICAgbW9kZWxzVG9TYXZlLnB1c2goKG5ldyBTdWJ0ZXN0KG5ld0F0dHJpYnV0ZXMpKS5zdGFtcCgpLmF0dHJpYnV0ZXMpO1xuICAgICAgfVxuICAgICAgZm9yIChqID0gMCwgbGVuMSA9IG1vZGVsc1RvU2F2ZS5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgc3VidGVzdCA9IG1vZGVsc1RvU2F2ZVtqXTtcbiAgICAgICAgaWYgKChzdWJ0ZXN0LmdyaWRMaW5rSWQgIT0gbnVsbCkgJiYgc3VidGVzdC5ncmlkTGlua0lkICE9PSBcIlwiKSB7XG4gICAgICAgICAgc3VidGVzdC5ncmlkTGlua0lkID0gc3VidGVzdElkTWFwW3N1YnRlc3QuZ3JpZExpbmtJZF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlZjEgPSBxdWVzdGlvbnMubW9kZWxzO1xuICAgICAgZm9yIChrID0gMCwgbGVuMiA9IHJlZjEubGVuZ3RoOyBrIDwgbGVuMjsgaysrKSB7XG4gICAgICAgIHF1ZXN0aW9uID0gcmVmMVtrXTtcbiAgICAgICAgJC5leHRlbmQodHJ1ZSwgbmV3QXR0cmlidXRlcyA9IHt9LCBxdWVzdGlvbi5hdHRyaWJ1dGVzKTtcbiAgICAgICAgb2xkU3VidGVzdElkID0gbmV3QXR0cmlidXRlcy5zdWJ0ZXN0SWQ7XG4gICAgICAgIG5ld0F0dHJpYnV0ZXMuX2lkID0gVXRpbHMuZ3VpZCgpO1xuICAgICAgICBuZXdBdHRyaWJ1dGVzLnN1YnRlc3RJZCA9IHN1YnRlc3RJZE1hcFtvbGRTdWJ0ZXN0SWRdO1xuICAgICAgICBuZXdBdHRyaWJ1dGVzLmFzc2Vzc21lbnRJZCA9IG5ld0lkO1xuICAgICAgICBtb2RlbHNUb1NhdmUucHVzaCgobmV3IFF1ZXN0aW9uKG5ld0F0dHJpYnV0ZXMpKS5zdGFtcCgpLmF0dHJpYnV0ZXMpO1xuICAgICAgfVxuICAgICAgcmVxdWVzdERhdGEgPSB7XG4gICAgICAgIFwiZG9jc1wiOiBtb2RlbHNUb1NhdmVcbiAgICAgIH07XG4gICAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLThcIixcbiAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICB1cmw6IFRhbmdlcmluZS5zZXR0aW5ncy51cmxCdWxrRG9jcygpLFxuICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0RGF0YSksXG4gICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihyZXNwb25zZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBvbGRNb2RlbC50cmlnZ2VyKFwibmV3XCIsIG5ld01vZGVsKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIkR1cGxpY2F0aW9uIGVycm9yXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBnZXRRdWVzdGlvbnMoKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICQuYWpheCh7XG4gICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLThcIixcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgIHVybDogXCIvZGIvXCIgKyBUYW5nZXJpbmUuZGJfbmFtZSArIFwiL19kZXNpZ24vXCIgKyBUYW5nZXJpbmUuZGVzaWduX2RvYyArIFwiL192aWV3L2J5UGFyZW50SWRcIixcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAga2V5czogW1wic1wiICsgdGhpcy5pZCwgXCJxXCIgKyB0aGlzLmlkLCBcImFcIiArIHRoaXMuaWRdXG4gICAgICB9KSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbih4aHIsIHN0YXR1cywgZXJyKSB7XG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiRGVsZXRlIGVycm9yOiAwMVwiKTtcbiAgICAgICAgcmV0dXJuIFRhbmdlcmluZS5sb2cuZGIoXCJhc3Nlc3NtZW50LWRlbGV0ZS1lcnJvci0wMVwiLCBcIkVycm9yOiBcIiArIGVyciArIFwiLCBTdGF0dXM6IFwiICsgc3RhdHVzICsgXCIsIHhocjpcIiArICh4aHIucmVzcG9uc2VUZXh0IHx8ICdub25lJykgKyBcIi4gaGVhZGVyczogXCIgKyAoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSk7XG4gICAgICB9LFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIHZhciByZXF1ZXN0RGF0YTtcbiAgICAgICAgICByZXF1ZXN0RGF0YSA9IHtcbiAgICAgICAgICAgIGRvY3M6IHJlc3BvbnNlLnJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIFwiX2lkXCI6IHJvdy5pZCxcbiAgICAgICAgICAgICAgICBcIl9yZXZcIjogcm93LnZhbHVlLnIsXG4gICAgICAgICAgICAgICAgXCJfZGVsZXRlZFwiOiB0cnVlXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuICQuYWpheCh7XG4gICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLThcIixcbiAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgIHVybDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybEJ1bGtEb2NzKCksXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0RGF0YSksXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiRGVsZXRlIGVycm9yOiAwMlwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFRhbmdlcmluZS5sb2cuZGIoXCJhc3Nlc3NtZW50LWRlbGV0ZS1lcnJvci0wMlwiLCBKU09OLnN0cmluZ2lmeShhcmd1bWVudHMpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZXMpIHtcbiAgICAgICAgICAgICAgdmFyIGksIGxlbiwgb2tDb3VudCwgcmVzcDtcbiAgICAgICAgICAgICAgb2tDb3VudCA9IDA7XG4gICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlc3BvbnNlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHJlc3AgPSByZXNwb25zZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHJlc3Aub2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgb2tDb3VudCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAob2tDb3VudCA9PT0gcmVzcG9uc2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmNvbGxlY3Rpb24ucmVtb3ZlKF90aGlzLmlkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY2xlYXIoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBVdGlscy5taWRBbGVydChcIkRlbGV0ZSBlcnJvcjogMDNcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRhbmdlcmluZS5sb2cuZGIoXCJhc3Nlc3NtZW50LWRlbGV0ZS1lcnJvci0wM1wiLCBKU09OLnN0cmluZ2lmeShhcmd1bWVudHMpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBBc3Nlc3NtZW50LnByb3RvdHlwZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAhdGhpcy5pc0FyY2hpdmVkKCk7XG4gIH07XG5cbiAgQXNzZXNzbWVudC5wcm90b3R5cGUuaXNBcmNoaXZlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmNoaXZlZDtcbiAgICBhcmNoaXZlZCA9IHRoaXMuZ2V0KFwiYXJjaGl2ZWRcIik7XG4gICAgcmV0dXJuIGFyY2hpdmVkID09PSBcInRydWVcIiB8fCBhcmNoaXZlZCA9PT0gdHJ1ZTtcbiAgfTtcblxuICByZXR1cm4gQXNzZXNzbWVudDtcblxufSkoQmFja2JvbmUuTW9kZWwpO1xuXG4iLCJjbGFzcyBBc3Nlc3NtZW50cyBleHRlbmRzIEJhY2tib25lLkNvbGxlY3Rpb25cbiAgbW9kZWw6IEFzc2Vzc21lbnRcbiAgdXJsOiAnYXNzZXNzbWVudCdcblxuICBjb21wYXJhdG9yIDogKG1vZGVsKSAtPlxuICAgIG1vZGVsLmdldCBcIm5hbWVcIlxuIiwidmFyIEFzc2Vzc21lbnRzLFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuQXNzZXNzbWVudHMgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoQXNzZXNzbWVudHMsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEFzc2Vzc21lbnRzKCkge1xuICAgIHJldHVybiBBc3Nlc3NtZW50cy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEFzc2Vzc21lbnRzLnByb3RvdHlwZS5tb2RlbCA9IEFzc2Vzc21lbnQ7XG5cbiAgQXNzZXNzbWVudHMucHJvdG90eXBlLnVybCA9ICdhc3Nlc3NtZW50JztcblxuICBBc3Nlc3NtZW50cy5wcm90b3R5cGUuY29tcGFyYXRvciA9IGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgcmV0dXJuIG1vZGVsLmdldChcIm5hbWVcIik7XG4gIH07XG5cbiAgcmV0dXJuIEFzc2Vzc21lbnRzO1xuXG59KShCYWNrYm9uZS5Db2xsZWN0aW9uKTtcblxuIiwiIyBEaXNwbGF5cyBhIGdyb3VwIGhlYWRlciBhbmQgYSBsaXN0IG9mIGFzc2Vzc21lbnRzXG4jIGV2ZW50c1xuIyByZS1yZW5kZXJzIG9uIEBhc3Nlc3NtZW50cyBcImFkZCBkZXN0cm95XCJcbiNcbmNsYXNzIEFzc2Vzc21lbnRzVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIkFzc2Vzc21lbnRzVmlld1wiXG4gIHRhZ05hbWUgOiBcInNlY3Rpb25cIlxuXG4gIGV2ZW50cyA6XG4gICAgXCJjbGljayAudG9nZ2xlX2FyY2hpdmVkXCIgOiBcInRvZ2dsZUFyY2hpdmVkXCJcblxuICB0b2dnbGVBcmNoaXZlZDogKGV2ZW50KSAtPlxuXG4gICAgaWYgQGFyY2hpdmVkSXNWaXNpYmxlXG4gICAgICBAYXJjaGl2ZWRJc1Zpc2libGUgPSBmYWxzZVxuICAgICAgJGNvbnRhaW5lciA9IEAkZWwuZmluZChcIi5hcmNoaXZlZF9saXN0XCIpLmFkZENsYXNzIFwiY29uZmlybWF0aW9uXCJcbiAgICAgIEAkZWwuZmluZChcIi50b2dnbGVfYXJjaGl2ZWRcIikuaHRtbCBcIlNob3dcIlxuICAgIGVsc2VcbiAgICAgIEBhcmNoaXZlZElzVmlzaWJsZSA9IHRydWVcbiAgICAgICRjb250YWluZXIgPSBAJGVsLmZpbmQoXCIuYXJjaGl2ZWRfbGlzdFwiKS5yZW1vdmVDbGFzcyBcImNvbmZpcm1hdGlvblwiXG4gICAgICBAJGVsLmZpbmQoXCIudG9nZ2xlX2FyY2hpdmVkXCIpLmh0bWwgXCJIaWRlXCJcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cblxuICAgIG9wdGlvbnMuYXNzZXNzbWVudHMub24gXCJhZGQgZGVzdHJveSByZW1vdmUgdXBkYXRlXCIsIEByZW5kZXJcblxuICAgIEBwYXJlbnQgICAgICA9IG9wdGlvbnMucGFyZW50XG4gICAgQGFzc2Vzc21lbnRzID0gb3B0aW9ucy5hc3Nlc3NtZW50c1xuXG4gICAgQHN1YnZpZXdzICAgICAgICAgID0gW10gIyB1c2VkIHRvIGtlZXAgdHJhY2sgb2Ygdmlld3MgdG8gY2xvc2VcbiAgICBAYXJjaGl2ZWRJc1Zpc2libGUgPSBmYWxzZSAjIHRvZ2dsZWRcblxuXG4gIHJlbmRlcjogKGV2ZW50KSA9PlxuXG4gICAgQGNsb3NlVmlld3MoKVxuXG4gICAgYXNzZXNzbWVudHMgPSBAYXNzZXNzbWVudHMubW9kZWxzXG5cbiAgICAjIGNyZWF0ZSBhcmNoaXZlZCBhbmQgYWN0aXZlIGFycmF5cyBvZiA8bGk+XG4gICAgYWN0aXZlVmlld3MgICA9IFtdXG4gICAgYXJjaGl2ZWRWaWV3cyA9IFtdXG4gICAgZm9yIGFzc2Vzc21lbnQgaW4gYXNzZXNzbWVudHNcblxuICAgICAgbmV3VmlldyA9IG5ldyBBc3Nlc3NtZW50TGlzdEVsZW1lbnRWaWV3XG4gICAgICAgIFwibW9kZWxcIiAgICAgOiBhc3Nlc3NtZW50XG4gICAgICAgIFwic2hvd0FsbFwiICAgOiBAc2hvd0FsbFxuXG5cbiAgICAgIGlmIGFzc2Vzc21lbnQuaXNBcmNoaXZlZCgpXG4gICAgICAgIGFyY2hpdmVkVmlld3MucHVzaCBuZXdWaWV3XG4gICAgICBlbHNlXG4gICAgICAgIGFjdGl2ZVZpZXdzLnB1c2ggbmV3Vmlld1xuXG4gICAgQHN1YnZpZXdzID0gYXJjaGl2ZWRWaWV3cy5jb25jYXQgYWN0aXZlVmlld3NcblxuICAgICMgZXNjYXBlIGlmIG5vIGFzc2Vzc21lbnRzIGluIG5vbi1wdWJsaWMgbGlzdFxuICAgIGlmIEBzdWJ2aWV3cy5sZW5ndGggPT0gMFxuICAgICAgQCRlbC5odG1sIFwiPHAgY2xhc3M9J2dyZXknPk5vIGFzc2Vzc21lbnRzIHlldC4gQ2xpY2sgPGI+bmV3PC9iPiB0byBnZXQgc3RhcnRlZC48L3A+XCJcbiAgICAgIHJldHVybiBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuXG4gICAgIyB0ZW1wbGF0aW5nIGFuZCBjb21wb25lbnRzXG5cbiAgICBhcmNoaXZlZENvbnRhaW5lciA9IFwiXG4gICAgICA8ZGl2IGNsYXNzPSdhcmNoaXZlZF9jb250YWluZXInPlxuICAgICAgICA8aDI+QXJjaGl2ZWQgKCN7YXJjaGl2ZWRWaWV3cy5sZW5ndGh9KSA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHRvZ2dsZV9hcmNoaXZlZCc+U2hvdzwvYnV0dG9uPjwvaDI+XG4gICAgICAgIDx1bCBjbGFzcz0nYXJjaGl2ZWRfbGlzdCBhc3Nlc3NtZW50X2xpc3QgY29uZmlybWF0aW9uJz48L3VsPlxuICAgICAgPC9kaXY+XG4gICAgXCJcblxuICAgIHNob3dBcmNoaXZlZCA9IGFyY2hpdmVkVmlld3MubGVuZ3RoICE9IDBcblxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPHVsIGNsYXNzPSdhY3RpdmVfbGlzdCBhc3Nlc3NtZW50X2xpc3QnPjwvdWw+XG4gICAgICAjeyBpZiBzaG93QXJjaGl2ZWQgdGhlbiBhcmNoaXZlZENvbnRhaW5lciBlbHNlIFwiXCIgfVxuICAgIFwiXG5cbiAgICAjIGZpbGwgY29udGFpbmVyc1xuICAgICR1bCA9IEAkZWwuZmluZChcIi5hY3RpdmVfbGlzdFwiKVxuICAgIGZvciB2aWV3IGluIGFjdGl2ZVZpZXdzXG4gICAgICB2aWV3LnJlbmRlcigpXG4gICAgICAkdWwuYXBwZW5kIHZpZXcuZWxcblxuICAgIGlmIHNob3dBcmNoaXZlZFxuICAgICAgJHVsID0gQCRlbC5maW5kKFwiLmFyY2hpdmVkX2xpc3RcIilcbiAgICAgIGZvciB2aWV3IGluIGFyY2hpdmVkVmlld3NcbiAgICAgICAgdmlldy5yZW5kZXIoKVxuICAgICAgICAkdWwuYXBwZW5kIHZpZXcuZWxcblxuICAgICMgYWxsIGRvbmVcbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICBjbG9zZVZpZXdzOiAtPlxuICAgIGZvciB2aWV3IGluIEBzdWJ2aWV3c1xuICAgICAgdmlldy5jbG9zZSgpXG4gICAgQHN1YnZpZXdzID0gW11cblxuICBvbkNsb3NlOiAtPlxuICAgIEBjbG9zZVZpZXdzKCkiLCJ2YXIgQXNzZXNzbWVudHNWaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkFzc2Vzc21lbnRzVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChBc3Nlc3NtZW50c1ZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEFzc2Vzc21lbnRzVmlldygpIHtcbiAgICB0aGlzLnJlbmRlciA9IGJpbmQodGhpcy5yZW5kZXIsIHRoaXMpO1xuICAgIHJldHVybiBBc3Nlc3NtZW50c1ZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBBc3Nlc3NtZW50c1ZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiQXNzZXNzbWVudHNWaWV3XCI7XG5cbiAgQXNzZXNzbWVudHNWaWV3LnByb3RvdHlwZS50YWdOYW1lID0gXCJzZWN0aW9uXCI7XG5cbiAgQXNzZXNzbWVudHNWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgXCJjbGljayAudG9nZ2xlX2FyY2hpdmVkXCI6IFwidG9nZ2xlQXJjaGl2ZWRcIlxuICB9O1xuXG4gIEFzc2Vzc21lbnRzVmlldy5wcm90b3R5cGUudG9nZ2xlQXJjaGl2ZWQgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkY29udGFpbmVyO1xuICAgIGlmICh0aGlzLmFyY2hpdmVkSXNWaXNpYmxlKSB7XG4gICAgICB0aGlzLmFyY2hpdmVkSXNWaXNpYmxlID0gZmFsc2U7XG4gICAgICAkY29udGFpbmVyID0gdGhpcy4kZWwuZmluZChcIi5hcmNoaXZlZF9saXN0XCIpLmFkZENsYXNzKFwiY29uZmlybWF0aW9uXCIpO1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIudG9nZ2xlX2FyY2hpdmVkXCIpLmh0bWwoXCJTaG93XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFyY2hpdmVkSXNWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICRjb250YWluZXIgPSB0aGlzLiRlbC5maW5kKFwiLmFyY2hpdmVkX2xpc3RcIikucmVtb3ZlQ2xhc3MoXCJjb25maXJtYXRpb25cIik7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi50b2dnbGVfYXJjaGl2ZWRcIikuaHRtbChcIkhpZGVcIik7XG4gICAgfVxuICB9O1xuXG4gIEFzc2Vzc21lbnRzVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zLmFzc2Vzc21lbnRzLm9uKFwiYWRkIGRlc3Ryb3kgcmVtb3ZlIHVwZGF0ZVwiLCB0aGlzLnJlbmRlcik7XG4gICAgdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgICB0aGlzLmFzc2Vzc21lbnRzID0gb3B0aW9ucy5hc3Nlc3NtZW50cztcbiAgICB0aGlzLnN1YnZpZXdzID0gW107XG4gICAgcmV0dXJuIHRoaXMuYXJjaGl2ZWRJc1Zpc2libGUgPSBmYWxzZTtcbiAgfTtcblxuICBBc3Nlc3NtZW50c1ZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR1bCwgYWN0aXZlVmlld3MsIGFyY2hpdmVkQ29udGFpbmVyLCBhcmNoaXZlZFZpZXdzLCBhc3Nlc3NtZW50LCBhc3Nlc3NtZW50cywgaSwgaiwgaywgbGVuLCBsZW4xLCBsZW4yLCBuZXdWaWV3LCBzaG93QXJjaGl2ZWQsIHZpZXc7XG4gICAgdGhpcy5jbG9zZVZpZXdzKCk7XG4gICAgYXNzZXNzbWVudHMgPSB0aGlzLmFzc2Vzc21lbnRzLm1vZGVscztcbiAgICBhY3RpdmVWaWV3cyA9IFtdO1xuICAgIGFyY2hpdmVkVmlld3MgPSBbXTtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBhc3Nlc3NtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXNzZXNzbWVudCA9IGFzc2Vzc21lbnRzW2ldO1xuICAgICAgbmV3VmlldyA9IG5ldyBBc3Nlc3NtZW50TGlzdEVsZW1lbnRWaWV3KHtcbiAgICAgICAgXCJtb2RlbFwiOiBhc3Nlc3NtZW50LFxuICAgICAgICBcInNob3dBbGxcIjogdGhpcy5zaG93QWxsXG4gICAgICB9KTtcbiAgICAgIGlmIChhc3Nlc3NtZW50LmlzQXJjaGl2ZWQoKSkge1xuICAgICAgICBhcmNoaXZlZFZpZXdzLnB1c2gobmV3Vmlldyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVWaWV3cy5wdXNoKG5ld1ZpZXcpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnN1YnZpZXdzID0gYXJjaGl2ZWRWaWV3cy5jb25jYXQoYWN0aXZlVmlld3MpO1xuICAgIGlmICh0aGlzLnN1YnZpZXdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy4kZWwuaHRtbChcIjxwIGNsYXNzPSdncmV5Jz5ObyBhc3Nlc3NtZW50cyB5ZXQuIENsaWNrIDxiPm5ldzwvYj4gdG8gZ2V0IHN0YXJ0ZWQuPC9wPlwiKTtcbiAgICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgICB9XG4gICAgYXJjaGl2ZWRDb250YWluZXIgPSBcIjxkaXYgY2xhc3M9J2FyY2hpdmVkX2NvbnRhaW5lcic+IDxoMj5BcmNoaXZlZCAoXCIgKyBhcmNoaXZlZFZpZXdzLmxlbmd0aCArIFwiKSA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHRvZ2dsZV9hcmNoaXZlZCc+U2hvdzwvYnV0dG9uPjwvaDI+IDx1bCBjbGFzcz0nYXJjaGl2ZWRfbGlzdCBhc3Nlc3NtZW50X2xpc3QgY29uZmlybWF0aW9uJz48L3VsPiA8L2Rpdj5cIjtcbiAgICBzaG93QXJjaGl2ZWQgPSBhcmNoaXZlZFZpZXdzLmxlbmd0aCAhPT0gMDtcbiAgICB0aGlzLiRlbC5odG1sKFwiPHVsIGNsYXNzPSdhY3RpdmVfbGlzdCBhc3Nlc3NtZW50X2xpc3QnPjwvdWw+IFwiICsgKHNob3dBcmNoaXZlZCA/IGFyY2hpdmVkQ29udGFpbmVyIDogXCJcIikpO1xuICAgICR1bCA9IHRoaXMuJGVsLmZpbmQoXCIuYWN0aXZlX2xpc3RcIik7XG4gICAgZm9yIChqID0gMCwgbGVuMSA9IGFjdGl2ZVZpZXdzLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgdmlldyA9IGFjdGl2ZVZpZXdzW2pdO1xuICAgICAgdmlldy5yZW5kZXIoKTtcbiAgICAgICR1bC5hcHBlbmQodmlldy5lbCk7XG4gICAgfVxuICAgIGlmIChzaG93QXJjaGl2ZWQpIHtcbiAgICAgICR1bCA9IHRoaXMuJGVsLmZpbmQoXCIuYXJjaGl2ZWRfbGlzdFwiKTtcbiAgICAgIGZvciAoayA9IDAsIGxlbjIgPSBhcmNoaXZlZFZpZXdzLmxlbmd0aDsgayA8IGxlbjI7IGsrKykge1xuICAgICAgICB2aWV3ID0gYXJjaGl2ZWRWaWV3c1trXTtcbiAgICAgICAgdmlldy5yZW5kZXIoKTtcbiAgICAgICAgJHVsLmFwcGVuZCh2aWV3LmVsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRzVmlldy5wcm90b3R5cGUuY2xvc2VWaWV3cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBsZW4sIHJlZiwgdmlldztcbiAgICByZWYgPSB0aGlzLnN1YnZpZXdzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmlldyA9IHJlZltpXTtcbiAgICAgIHZpZXcuY2xvc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3Vidmlld3MgPSBbXTtcbiAgfTtcblxuICBBc3Nlc3NtZW50c1ZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9zZVZpZXdzKCk7XG4gIH07XG5cbiAgcmV0dXJuIEFzc2Vzc21lbnRzVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIEFzc2Vzc21lbnRMaXN0RWxlbWVudFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJBc3Nlc3NtZW50TGlzdEVsZW1lbnRWaWV3XCJcblxuICB0YWdOYW1lIDogXCJsaVwiXG5cbiAgZXZlbnRzOiBpZiBNb2Rlcm5penIudG91Y2ggdGhlbiB7XG4gICAgJ2NsaWNrIC5hc3Nlc3NtZW50X21lbnVfdG9nZ2xlJyAgICAgICA6ICdhc3Nlc3NtZW50TWVudVRvZ2dsZSdcbiAgICAnY2xpY2sgLmFkbWluX25hbWUnICAgICAgICAgICAgICAgICAgIDogJ2Fzc2Vzc21lbnRNZW51VG9nZ2xlJ1xuICAgICdjbGljayAuc3BfYXNzZXNzbWVudF9kZWxldGUnICAgICAgICAgOiAnYXNzZXNzbWVudERlbGV0ZVRvZ2dsZSdcbiAgICAnY2xpY2sgLnNwX2Fzc2Vzc21lbnRfZGVsZXRlX2NhbmNlbCcgIDogJ2Fzc2Vzc21lbnREZWxldGVUb2dnbGUnXG4gICAgJ2NsaWNrIC5zcF9hc3Nlc3NtZW50X2RlbGV0ZV9jb25maXJtJyA6ICdhc3Nlc3NtZW50RGVsZXRlJ1xuICAgICdjbGljayAuc3BfY29weScgICAgICAgICAgICAgICAgICAgICAgOiAnY29weVRvJ1xuICAgICdjbGljayAuc3BfZHVwbGljYXRlJyAgICAgICAgICAgICAgICAgOiAnZHVwbGljYXRlJ1xuICAgICdjbGljayAuc3BfdXBkYXRlJyAgICAgICAgICAgICAgICAgICAgOiAndXBkYXRlJ1xuICAgICdjbGljayAuc3BfcHJpbnQnICAgICAgICAgICAgICAgICAgICAgOiAndG9nZ2xlUHJpbnQnXG4gICAgJ2NsaWNrIC5hcmNoaXZlJyAgICAgICAgICAgICAgICAgICAgICA6ICdhcmNoaXZlJ1xuICAgICdjbGljayBhJyA6ICdyZXNwb25kVG9MaW5rJ1xuXG4gICAgJ2NoYW5nZSAjcHJpbnRfZm9ybWF0JyAgICAgICAgICAgICA6ICdwcmludCdcbiAgfSBlbHNlIHtcbiAgICAnY2xpY2sgLmFzc2Vzc21lbnRfbWVudV90b2dnbGUnICAgICAgIDogJ2Fzc2Vzc21lbnRNZW51VG9nZ2xlJ1xuICAgICdjbGljayAuYWRtaW5fbmFtZScgICAgICAgICAgICAgICAgICAgOiAnYXNzZXNzbWVudE1lbnVUb2dnbGUnXG4gICAgJ2NsaWNrIC5zcF9hc3Nlc3NtZW50X2RlbGV0ZScgICAgICAgICA6ICdhc3Nlc3NtZW50RGVsZXRlVG9nZ2xlJ1xuICAgICdjbGljayAuc3BfYXNzZXNzbWVudF9kZWxldGVfY2FuY2VsJyAgOiAnYXNzZXNzbWVudERlbGV0ZVRvZ2dsZSdcbiAgICAnY2xpY2sgLnNwX2Fzc2Vzc21lbnRfZGVsZXRlX2NvbmZpcm0nIDogJ2Fzc2Vzc21lbnREZWxldGUnXG4gICAgJ2NsaWNrIC5zcF9jb3B5JyAgICAgICAgICAgICAgICAgICAgICA6ICdjb3B5VG8nXG4gICAgJ2NsaWNrIC5zcF9kdXBsaWNhdGUnICAgICAgICAgICAgICAgICA6ICdkdXBsaWNhdGUnXG4gICAgJ2NsaWNrIC5zcF91cGRhdGUnICAgICAgICAgICAgICAgICAgICA6ICd1cGRhdGUnXG4gICAgJ2NsaWNrIC5zcF9wcmludCcgICAgICAgICAgICAgICAgICAgICA6ICd0b2dnbGVQcmludCdcbiAgICAnY2xpY2sgLmFyY2hpdmUnICAgICAgICAgICAgICAgICAgICAgIDogJ2FyY2hpdmUnXG5cbiAgICAnY2hhbmdlICNwcmludF9mb3JtYXQnICAgICAgICAgICAgIDogJ3ByaW50J1xuICB9XG5cbiAgYmxhbmtSZXN1bHRDb3VudDogXCItXCJcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cblxuICAgICMgZXZlbnRzXG4gICAgIyBvcHRpb25zLm1vZGVsLm9uIFwicmVzdWx0Q291bnRcIiwgQHVwZGF0ZVJlc3VsdENvdW50XG5cbiAgICAjYXJndW1lbnRzXG4gICAgQG1vZGVsICAgID0gb3B0aW9ucy5tb2RlbFxuICAgIEBwYXJlbnQgICA9IG9wdGlvbnMucGFyZW50XG5cbiAgICAjIHN3aXRjaGVzIGFuZCB0aGluZ3NcbiAgICBAaXNBZG1pbiAgICAgPSBUYW5nZXJpbmUudXNlci5pc0FkbWluKClcblxuICByZXNwb25kVG9MaW5rOiAoZXZlbnQpIC0+XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgIHJvdXRlICAgPSAkdGFyZ2V0LmF0dHIoXCJocmVmXCIpXG4gICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShyb3V0ZSwgdHJ1ZSlcblxuXG4gIGR1cGxpY2F0ZTogLT5cbiAgICBuZXdOYW1lID0gXCJDb3B5IG9mIFwiICsgQG1vZGVsLmdldChcIm5hbWVcIilcbiAgICBAbW9kZWwuZHVwbGljYXRlIHsgbmFtZSA6IG5ld05hbWUgfSwgbnVsbCwgbnVsbCwgKGFzc2Vzc21lbnQpID0+XG4gICAgICBAbW9kZWwudHJpZ2dlciBcIm5ld1wiLCBhc3Nlc3NtZW50XG5cbiAgY29weVRvOiAoZ3JvdXApIC0+XG4gICAgQG1vZGVsLnJlcGxpY2F0ZSBncm91cCwgPT5cbiAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxJbmRleChncm91cCwgXCJhc3Nlc3NtZW50c1wiKVxuXG4gIGdob3N0TG9naW46ID0+XG4gICAgVGFuZ2VyaW5lLnVzZXIuZ2hvc3RMb2dpbiBUYW5nZXJpbmUuc2V0dGluZ3MudXBVc2VyLCBUYW5nZXJpbmUuc2V0dGluZ3MudXBQYXNzXG5cbiAgdXBkYXRlOiA9PlxuICAgIFV0aWxzLm1pZEFsZXJ0IFwiVmVyaWZ5aW5nIGNvbm5lY3Rpb25cIlxuICAgIFV0aWxzLndvcmtpbmcgdHJ1ZVxuXG4gICAgQG1vZGVsLnZlcmlmeUNvbm5lY3Rpb25cbiAgICAgIGVycm9yOiA9PlxuICAgICAgICBVdGlscy53b3JraW5nIGZhbHNlXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiVmVyaWZ5aW5nIGNvbm5lY3Rpb248YnI+UGxlYXNlIHJldHJ5IHVwZGF0ZS5cIlxuICAgICAgICBfLmRlbGF5ID0+XG4gICAgICAgICAgQGdob3N0TG9naW4oKVxuICAgICAgICAsIDUwMDBcblxuICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgVXRpbHMud29ya2luZyBmYWxzZVxuICAgICAgICBAbW9kZWwub24gXCJzdGF0dXNcIiwgKG1lc3NhZ2UpID0+XG4gICAgICAgICAgaWYgbWVzc2FnZSA9PSBcImltcG9ydCBsb29rdXBcIlxuICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJVcGRhdGUgc3RhcnRpbmdcIlxuICAgICAgICAgIGVsc2UgaWYgbWVzc2FnZSA9PSBcImltcG9ydCBzdWNjZXNzXCJcbiAgICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiVXBkYXRlZFwiXG4gICAgICAgICAgICBVdGlscy53b3JraW5nIGZhbHNlXG4gICAgICAgICAgICBAbW9kZWwuZmV0Y2hcbiAgICAgICAgICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgICAgICAgICBAcmVuZGVyKClcbiAgICAgICAgICBlbHNlIGlmIG1lc3NhZ2UgPT0gXCJpbXBvcnQgZXJyb3JcIlxuICAgICAgICAgICAgVXRpbHMud29ya2luZyBmYWxzZVxuICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJVcGRhdGUgZmFpbGVkXCJcbiAgICAgICAgVXRpbHMud29ya2luZyB0cnVlXG4gICAgICAgIEBtb2RlbC51cGRhdGVGcm9tU2VydmVyKClcblxuICB0b2dnbGVQcmludDogLT5cbiAgICBAJGVsLmZpbmQoXCIucHJpbnRfZm9ybWF0X3dyYXBwZXJcIikudG9nZ2xlKClcblxuICBwcmludDogLT5cbiAgICBmb3JtYXQgPSBAJGVsLmZpbmQoXCIjcHJpbnRfZm9ybWF0IG9wdGlvbjpzZWxlY3RlZFwiKS5hdHRyKFwiZGF0YS1mb3JtYXRcIilcblxuICAgIGlmIGZvcm1hdCA9PSBcImNhbmNlbFwiXG4gICAgICBAJGVsLmZpbmQoXCIucHJpbnRfZm9ybWF0X3dyYXBwZXJcIikudG9nZ2xlKClcbiAgICAgIEAkZWwuZmluZChcIiNwcmludF9mb3JtYXRcIikudmFsKFwicmVzZXRcIilcbiAgICAgIHJldHVyblxuXG4gICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZSBcInByaW50LyN7QG1vZGVsLmlkfS8je2Zvcm1hdH1cIiwgdHJ1ZVxuXG5cbiAgdXBkYXRlUmVzdWx0Q291bnQ6ID0+XG4gICAgI0ByZXN1bHRDb3VudCA9IE1hdGguY29tbWFzIEBtb2RlbC5yZXN1bHRDb3VudFxuICAgICNAJGVsLmZpbmQoXCIucmVzdWx0X2NvdW50XCIpLmh0bWwgXCJSZXN1bHRzIDxiPiN7QHJlc3VsdENvdW50fTwvYj5cIlxuXG4gIGFyY2hpdmU6IC0+XG4gICAgcmVzdWx0ID0gQCRlbC5maW5kKFwiLmFyY2hpdmUgOnNlbGVjdGVkXCIpLnZhbCgpID09IFwidHJ1ZVwiXG4gICAgaWYgcmVzdWx0ID09IHRydWVcbiAgICAgIEAkZWwuZmluZChcIi5hZG1pbl9uYW1lXCIpLmFkZENsYXNzIFwiYXJjaGl2ZWRfYXNzZXNzbWVudFwiXG4gICAgZWxzZVxuICAgICAgQCRlbC5maW5kKFwiLmFkbWluX25hbWVcIikucmVtb3ZlQ2xhc3MgXCJhcmNoaXZlZF9hc3Nlc3NtZW50XCJcblxuICAgIEBtb2RlbC5zYXZlXG4gICAgICBhcmNoaXZlZCA6IHJlc3VsdFxuICAgIHJldHVybiB0cnVlXG5cbiAgYXNzZXNzbWVudE1lbnVUb2dnbGU6IC0+XG4gICAgQCRlbC5maW5kKCcuYXNzZXNzbWVudF9tZW51X3RvZ2dsZScpLnRvZ2dsZUNsYXNzKCdzcF9kb3duJykudG9nZ2xlQ2xhc3MoJ3NwX3JpZ2h0JylcbiAgICBAJGVsLmZpbmQoJy5hc3Nlc3NtZW50X21lbnUnKS50b2dnbGUoKVxuXG4gIGFzc2Vzc21lbnREZWxldGVUb2dnbGU6IC0+XG4gICAgQCRlbC5maW5kKFwiLnNwX2Fzc2Vzc21lbnRfZGVsZXRlX2NvbmZpcm1cIikudG9nZ2xlKCk7IGZhbHNlXG5cbiAgIyBkZWVwIG5vbi1nZXJuZXJpYyBkZWxldGVcbiAgYXNzZXNzbWVudERlbGV0ZTogPT5cbiAgICAjIHJlbW92ZXMgZnJvbSBjb2xsZWN0aW9uXG4gICAgQG1vZGVsLmRlc3Ryb3koKVxuXG4gIHNwcml0ZUxpc3RMaW5rOiAoIHRhZ05hbWUsIG5hbWVzLi4uICkgLT5cbiAgICByZXN1bHQgPSBcIlwiXG4gICAgZm9yIG5hbWUgaW4gbmFtZXNcbiAgICAgIHJlc3VsdCArPSBcIjwje3RhZ05hbWV9IGNsYXNzPSdzcF8je25hbWUudW5kZXJzY29yZSgpfSc+PGEgaHJlZj0nIyN7bmFtZX0vI3tAbW9kZWwuaWR9Jz4je25hbWUudW5kZXJzY29yZSgpLnRpdGxlaXplKCl9PC9hPjwvI3t0YWdOYW1lfT5cIlxuICAgIHJldHVybiByZXN1bHRcblxuICBzcHJpdGVFdmVudHM6ICggdGFnTmFtZSwgbmFtZXMuLi4pIC0+XG4gICAgcmVzdWx0ID0gXCJcIlxuICAgIGZvciBuYW1lIGluIG5hbWVzXG4gICAgICByZXN1bHQgKz0gXCI8I3t0YWdOYW1lfT48YnV0dG9uIGNsYXNzPSdzcF8je25hbWUudW5kZXJzY29yZSgpfScgdGl0bGU9JyN7bmFtZS51bmRlcnNjb3JlKCkudGl0bGVpemUoKX0nPiN7bmFtZS51bmRlcnNjb3JlKCkudGl0bGVpemUoKX08L2J1dHRvbj48LyN7dGFnTmFtZX0+IFwiXG4gICAgcmV0dXJuIHJlc3VsdFxuXG4gIHVsOiAob3B0aW9ucyktPlxuXG4gICAgaHRtbCA9IFwiPHVsICN7aWYgb3B0aW9ucy5jc3NDbGFzcyB0aGVuIFwiY2xhc3M9JyN7b3B0aW9ucy5jc3NDbGFzc30nXCIgZWxzZSAnJ30+XCJcbiAgICBodG1sICs9IEBzcHJpdGVMaXN0TGluay5hcHBseSBALCBbXCJsaVwiXS5jb25jYXQob3B0aW9ucy5saW5rcylcbiAgICBodG1sICs9IG9wdGlvbnMub3RoZXIgfHwgJydcbiAgICBodG1sICs9IFwiPC91bD5cIlxuXG4gIHJlbmRlcjogLT5cblxuICAgIGlzQXJjaGl2ZWQgPSBAbW9kZWwuZ2V0Qm9vbGVhbignYXJjaGl2ZWQnKVxuXG4gICAgIyBjb21tYW5kc1xuXG4gICAgIyBpbmRpY2F0b3JzIGFuZCB2YXJpYWJsZXNcbiAgICBhcmNoaXZlQ2xhc3MgICAgID0gaWYgaXNBcmNoaXZlZCB0aGVuIFwiIGFyY2hpdmVkX2Fzc2Vzc21lbnRcIiBlbHNlIFwiXCJcblxuICAgIHRvZ2dsZUJ1dHRvbiAgICAgPSBcIjxkaXYgY2xhc3M9J2Fzc2Vzc21lbnRfbWVudV90b2dnbGUgc3BfcmlnaHQnPjxkaXY+PC9kaXY+PC9kaXY+XCJcbiAgICBuYW1lICAgICAgICAgICAgID0gXCI8YnV0dG9uIGNsYXNzPSduYW1lIGNsaWNrYWJsZSc+I3tAbW9kZWwuZ2V0KCduYW1lJyl9PC9idXR0b24+XCJcbiAgICBhZG1pbk5hbWUgICAgICAgID0gXCI8YnV0dG9uIGNsYXNzPSdhZG1pbl9uYW1lIGNsaWNrYWJsZSAje2FyY2hpdmVDbGFzc30nPiN7QG1vZGVsLmdldCgnbmFtZScpfTwvYnV0dG9uPlwiXG4gICAgYWRtaW5SZXN1bHRDb3VudCA9IFwiPGxhYmVsIGNsYXNzPSdyZXN1bHRfY291bnQgc21hbGxfZ3JleSBub19oZWxwJyB0aXRsZT0nUmVzdWx0IGNvdW50LiBDbGljayB0byB1cGRhdGUuJz5SZXN1bHRzIDxiPiN7QHJlc3VsdENvdW50fTwvYj48L2xhYmVsPlwiXG4gICAgcmVzdWx0Q291bnQgICAgICA9IFwiPHNwYW4gY2xhc3M9J3Jlc3VsdF9jb3VudCBub19oZWxwJz5SZXN1bHRzIDxiPiN7QHJlc3VsdENvdW50fTwvYj48L3NwYW4+XCJcbiAgICBzZWxlY3RlZCAgICAgICAgID0gXCIgc2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiXG5cbiAgICBkZWxldGVDb25maXJtICAgPSBcIjxzcGFuIGNsYXNzPSdzcF9hc3Nlc3NtZW50X2RlbGV0ZV9jb25maXJtIGNvbmZpcm1hdGlvbic+PGRpdiBjbGFzcz0nbWVudV9ib3gnPkNvbmZpcm0gPGJ1dHRvbiBjbGFzcz0nc3BfYXNzZXNzbWVudF9kZWxldGVfeWVzIGNvbW1hbmRfcmVkJz5EZWxldGU8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz0nc3BfYXNzZXNzbWVudF9kZWxldGVfY2FuY2VsIGNvbW1hbmQnPkNhbmNlbDwvYnV0dG9uPjwvZGl2Pjwvc3Bhbj5cIlxuXG4gICAgcHJpbnRTZWxlY3RvciAgID0gXCJcbiAgICAgIDxkaXYgY2xhc3M9J3ByaW50X2Zvcm1hdF93cmFwcGVyIGNvbmZpcm1hdGlvbic+XG4gICAgICAgIDxzZWxlY3QgaWQ9J3ByaW50X2Zvcm1hdCc+XG4gICAgICAgIDxvcHRpb24gZGlzYWJsZWQ9J2Rpc2FibGVkJyBzZWxlY3RlZD0nc2VsZWN0ZWQnIHZhbHVlPSdyZXNldCc+U2VsZWN0IGEgcHJpbnQgZm9ybWF0PC9vcHRpb24+XG4gICAgICAgICN7KFwiPG9wdGlvbiBkYXRhLWZvcm1hdD0nI3tmb3JtYXQua2V5fSc+I3tmb3JtYXQubmFtZX08L29wdGlvbj5cIikgZm9yIGZvcm1hdCBpbiBUYW5nZXJpbmUuc2V0dGluZ3MuY29uZmlnLmdldChcInByaW50Rm9ybWF0c1wiKX1cbiAgICAgICAgPG9wdGlvbiBkYXRhLWZvcm1hdD0nY2FuY2VsJz5DYW5jZWw8L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2Rpdj5cbiAgICBcIlxuXG4gICAgZG93bmxvYWRLZXkgICA9IFwiPGxpIGNsYXNzPSdkb3dubG9hZF9rZXkgc21hbGxfZ3JleSc+RG93bmxvYWQga2V5IDxiPiN7QG1vZGVsLmdldChcIl9pZFwiKS5zdWJzdHIoLTUsNSl9PC9iPjwvbGk+XCJcbiAgICBhcmNoaXZlU3dpdGNoID0gXCJcbiAgICAgIDxzZWxlY3QgY2xhc3M9J2FyY2hpdmUnPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPSdmYWxzZScgI3tpZiBpc0FyY2hpdmVkIHRoZW4gc2VsZWN0ZWQgZWxzZSAnJ30+QWN0aXZlPC9vcHRpb24+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9J3RydWUnICAje2lmIGlzQXJjaGl2ZWQgdGhlbiBzZWxlY3RlZCBlbHNlICcnfT5BcmNoaXZlZDwvb3B0aW9uPlxuICAgICAgPC9zZWxlY3Q+XG4gICAgXCJcblxuICAgIGlmIEBpc0FkbWluXG4gICAgICAjIGFkbWluIHN0YW5kYXJkXG4gICAgICBAJGVsLmh0bWwgXCJcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAje3RvZ2dsZUJ1dHRvbn1cbiAgICAgICAgICAje2FkbWluTmFtZX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgICN7QHVsXG4gICAgICAgICAgY3NzQ2xhc3MgOiBcImFzc2Vzc21lbnRfbWVudVwiXG4gICAgICAgICAgbGlua3MgOiBbXCJydW5cIiwgXCJkYXRhRW50cnlcIiwgXCJyZXN1bHRzXCIsIFwiZWRpdFwiLCBcInN5bmNcIiwgXCJwcmludFwiIF1cbiAgICAgICAgICBvdGhlciA6IEBzcHJpdGVFdmVudHMoXCJsaVwiLCBcImR1cGxpY2F0ZVwiLCBcImFzc2Vzc21lbnRfZGVsZXRlXCIpICsgZG93bmxvYWRLZXlcbiAgICAgICAgfVxuICAgICAgICA8ZGl2IGNsYXNzPSdzdWJfbWVudXMnPlxuICAgICAgICAgICN7ZGVsZXRlQ29uZmlybX1cbiAgICAgICAgICAje3ByaW50U2VsZWN0b3J9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcIlxuXG4gICAgZWxzZSBpZiBAaXNBZG1pbiBhbmQgVGFuZ2VyaW5lLnNldHRpbmdzLmdldEJvb2xlYW4oJ3NhdGVsbGl0ZScpXG5cbiAgICAgIEAkZWwuaHRtbCBcIlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICN7dG9nZ2xlQnV0dG9ufVxuICAgICAgICAgICN7YWRtaW5OYW1lfVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICAje0B1bFxuICAgICAgICAgIGNzc0NsYXNzOiBcImFzc2Vzc21lbnRfbWVudVwiXG4gICAgICAgICAgbGlua3MgOiBbXCJydW5cIixcInJlc3VsdHNcIixcImVkaXRcIixcInN5bmNcIixcInByaW50XCJdXG4gICAgICAgICAgb3RoZXIgOiBAc3ByaXRlRXZlbnRzKFwibGlcIiwgXCJkdXBsaWNhdGVcIiwgXCJhc3Nlc3NtZW50X2RlbGV0ZVwiKSArIGRvd25sb2FkS2V5XG4gICAgICAgIH1cbiAgICAgICAgPGRpdiBjbGFzcz0nc3ViX21lbnVzJz5cbiAgICAgICAgICAje2RlbGV0ZUNvbmZpcm19XG4gICAgICAgICAgI3twcmludFNlbGVjdG9yfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIFwiXG5cbiAgICBlbHNlXG4gICAgICBAJGVsLmh0bWwgXCJcbiAgICAgICAgPGRpdiBjbGFzcz0nbm9uX2FkbWluJz5cbiAgICAgICAgICAje0BzcHJpdGVMaXN0TGluayhcInNwYW5cIiwncnVuJyl9I3tuYW1lfSAje0BzcHJpdGVMaXN0TGluayhcInNwYW5cIiwncmVzdWx0cycpfSAje0BzcHJpdGVMaXN0TGluayhcInNwYW5cIiwncHJpbnQnKX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J3N1Yl9tZW51cyc+XG4gICAgICAgICAgI3twcmludFNlbGVjdG9yfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIFwiXG5cblxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuIiwidmFyIEFzc2Vzc21lbnRMaXN0RWxlbWVudFZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgc2xpY2UgPSBbXS5zbGljZTtcblxuQXNzZXNzbWVudExpc3RFbGVtZW50VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChBc3Nlc3NtZW50TGlzdEVsZW1lbnRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBBc3Nlc3NtZW50TGlzdEVsZW1lbnRWaWV3KCkge1xuICAgIHRoaXMuYXNzZXNzbWVudERlbGV0ZSA9IGJpbmQodGhpcy5hc3Nlc3NtZW50RGVsZXRlLCB0aGlzKTtcbiAgICB0aGlzLnVwZGF0ZVJlc3VsdENvdW50ID0gYmluZCh0aGlzLnVwZGF0ZVJlc3VsdENvdW50LCB0aGlzKTtcbiAgICB0aGlzLnVwZGF0ZSA9IGJpbmQodGhpcy51cGRhdGUsIHRoaXMpO1xuICAgIHRoaXMuZ2hvc3RMb2dpbiA9IGJpbmQodGhpcy5naG9zdExvZ2luLCB0aGlzKTtcbiAgICByZXR1cm4gQXNzZXNzbWVudExpc3RFbGVtZW50Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEFzc2Vzc21lbnRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiQXNzZXNzbWVudExpc3RFbGVtZW50Vmlld1wiO1xuXG4gIEFzc2Vzc21lbnRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnRhZ05hbWUgPSBcImxpXCI7XG5cbiAgQXNzZXNzbWVudExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuZXZlbnRzID0gTW9kZXJuaXpyLnRvdWNoID8ge1xuICAgICdjbGljayAuYXNzZXNzbWVudF9tZW51X3RvZ2dsZSc6ICdhc3Nlc3NtZW50TWVudVRvZ2dsZScsXG4gICAgJ2NsaWNrIC5hZG1pbl9uYW1lJzogJ2Fzc2Vzc21lbnRNZW51VG9nZ2xlJyxcbiAgICAnY2xpY2sgLnNwX2Fzc2Vzc21lbnRfZGVsZXRlJzogJ2Fzc2Vzc21lbnREZWxldGVUb2dnbGUnLFxuICAgICdjbGljayAuc3BfYXNzZXNzbWVudF9kZWxldGVfY2FuY2VsJzogJ2Fzc2Vzc21lbnREZWxldGVUb2dnbGUnLFxuICAgICdjbGljayAuc3BfYXNzZXNzbWVudF9kZWxldGVfY29uZmlybSc6ICdhc3Nlc3NtZW50RGVsZXRlJyxcbiAgICAnY2xpY2sgLnNwX2NvcHknOiAnY29weVRvJyxcbiAgICAnY2xpY2sgLnNwX2R1cGxpY2F0ZSc6ICdkdXBsaWNhdGUnLFxuICAgICdjbGljayAuc3BfdXBkYXRlJzogJ3VwZGF0ZScsXG4gICAgJ2NsaWNrIC5zcF9wcmludCc6ICd0b2dnbGVQcmludCcsXG4gICAgJ2NsaWNrIC5hcmNoaXZlJzogJ2FyY2hpdmUnLFxuICAgICdjbGljayBhJzogJ3Jlc3BvbmRUb0xpbmsnLFxuICAgICdjaGFuZ2UgI3ByaW50X2Zvcm1hdCc6ICdwcmludCdcbiAgfSA6IHtcbiAgICAnY2xpY2sgLmFzc2Vzc21lbnRfbWVudV90b2dnbGUnOiAnYXNzZXNzbWVudE1lbnVUb2dnbGUnLFxuICAgICdjbGljayAuYWRtaW5fbmFtZSc6ICdhc3Nlc3NtZW50TWVudVRvZ2dsZScsXG4gICAgJ2NsaWNrIC5zcF9hc3Nlc3NtZW50X2RlbGV0ZSc6ICdhc3Nlc3NtZW50RGVsZXRlVG9nZ2xlJyxcbiAgICAnY2xpY2sgLnNwX2Fzc2Vzc21lbnRfZGVsZXRlX2NhbmNlbCc6ICdhc3Nlc3NtZW50RGVsZXRlVG9nZ2xlJyxcbiAgICAnY2xpY2sgLnNwX2Fzc2Vzc21lbnRfZGVsZXRlX2NvbmZpcm0nOiAnYXNzZXNzbWVudERlbGV0ZScsXG4gICAgJ2NsaWNrIC5zcF9jb3B5JzogJ2NvcHlUbycsXG4gICAgJ2NsaWNrIC5zcF9kdXBsaWNhdGUnOiAnZHVwbGljYXRlJyxcbiAgICAnY2xpY2sgLnNwX3VwZGF0ZSc6ICd1cGRhdGUnLFxuICAgICdjbGljayAuc3BfcHJpbnQnOiAndG9nZ2xlUHJpbnQnLFxuICAgICdjbGljayAuYXJjaGl2ZSc6ICdhcmNoaXZlJyxcbiAgICAnY2hhbmdlICNwcmludF9mb3JtYXQnOiAncHJpbnQnXG4gIH07XG5cbiAgQXNzZXNzbWVudExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuYmxhbmtSZXN1bHRDb3VudCA9IFwiLVwiO1xuXG4gIEFzc2Vzc21lbnRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5tb2RlbCA9IG9wdGlvbnMubW9kZWw7XG4gICAgdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgICByZXR1cm4gdGhpcy5pc0FkbWluID0gVGFuZ2VyaW5lLnVzZXIuaXNBZG1pbigpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnJlc3BvbmRUb0xpbmsgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCByb3V0ZTtcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgIHJvdXRlID0gJHRhcmdldC5hdHRyKFwiaHJlZlwiKTtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShyb3V0ZSwgdHJ1ZSk7XG4gIH07XG5cbiAgQXNzZXNzbWVudExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuZHVwbGljYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG5ld05hbWU7XG4gICAgbmV3TmFtZSA9IFwiQ29weSBvZiBcIiArIHRoaXMubW9kZWwuZ2V0KFwibmFtZVwiKTtcbiAgICByZXR1cm4gdGhpcy5tb2RlbC5kdXBsaWNhdGUoe1xuICAgICAgbmFtZTogbmV3TmFtZVxuICAgIH0sIG51bGwsIG51bGwsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGFzc2Vzc21lbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm1vZGVsLnRyaWdnZXIoXCJuZXdcIiwgYXNzZXNzbWVudCk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5jb3B5VG8gPSBmdW5jdGlvbihncm91cCkge1xuICAgIHJldHVybiB0aGlzLm1vZGVsLnJlcGxpY2F0ZShncm91cCwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24gPSBUYW5nZXJpbmUuc2V0dGluZ3MudXJsSW5kZXgoZ3JvdXAsIFwiYXNzZXNzbWVudHNcIik7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5naG9zdExvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLmdob3N0TG9naW4oVGFuZ2VyaW5lLnNldHRpbmdzLnVwVXNlciwgVGFuZ2VyaW5lLnNldHRpbmdzLnVwUGFzcyk7XG4gIH07XG5cbiAgQXNzZXNzbWVudExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgVXRpbHMubWlkQWxlcnQoXCJWZXJpZnlpbmcgY29ubmVjdGlvblwiKTtcbiAgICBVdGlscy53b3JraW5nKHRydWUpO1xuICAgIHJldHVybiB0aGlzLm1vZGVsLnZlcmlmeUNvbm5lY3Rpb24oe1xuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICAgICAgVXRpbHMubWlkQWxlcnQoXCJWZXJpZnlpbmcgY29ubmVjdGlvbjxicj5QbGVhc2UgcmV0cnkgdXBkYXRlLlwiKTtcbiAgICAgICAgICByZXR1cm4gXy5kZWxheShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5naG9zdExvZ2luKCk7XG4gICAgICAgICAgfSwgNTAwMCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSxcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICAgICAgX3RoaXMubW9kZWwub24oXCJzdGF0dXNcIiwgZnVuY3Rpb24obWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UgPT09IFwiaW1wb3J0IGxvb2t1cFwiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIlVwZGF0ZSBzdGFydGluZ1wiKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZSA9PT0gXCJpbXBvcnQgc3VjY2Vzc1wiKSB7XG4gICAgICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiVXBkYXRlZFwiKTtcbiAgICAgICAgICAgICAgVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy5tb2RlbC5mZXRjaCh7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZSA9PT0gXCJpbXBvcnQgZXJyb3JcIikge1xuICAgICAgICAgICAgICBVdGlscy53b3JraW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLm1pZEFsZXJ0KFwiVXBkYXRlIGZhaWxlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBVdGlscy53b3JraW5nKHRydWUpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5tb2RlbC51cGRhdGVGcm9tU2VydmVyKCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnRvZ2dsZVByaW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIucHJpbnRfZm9ybWF0X3dyYXBwZXJcIikudG9nZ2xlKCk7XG4gIH07XG5cbiAgQXNzZXNzbWVudExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUucHJpbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9ybWF0O1xuICAgIGZvcm1hdCA9IHRoaXMuJGVsLmZpbmQoXCIjcHJpbnRfZm9ybWF0IG9wdGlvbjpzZWxlY3RlZFwiKS5hdHRyKFwiZGF0YS1mb3JtYXRcIik7XG4gICAgaWYgKGZvcm1hdCA9PT0gXCJjYW5jZWxcIikge1xuICAgICAgdGhpcy4kZWwuZmluZChcIi5wcmludF9mb3JtYXRfd3JhcHBlclwiKS50b2dnbGUoKTtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIjcHJpbnRfZm9ybWF0XCIpLnZhbChcInJlc2V0XCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcInByaW50L1wiICsgdGhpcy5tb2RlbC5pZCArIFwiL1wiICsgZm9ybWF0LCB0cnVlKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS51cGRhdGVSZXN1bHRDb3VudCA9IGZ1bmN0aW9uKCkge307XG5cbiAgQXNzZXNzbWVudExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuYXJjaGl2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHQ7XG4gICAgcmVzdWx0ID0gdGhpcy4kZWwuZmluZChcIi5hcmNoaXZlIDpzZWxlY3RlZFwiKS52YWwoKSA9PT0gXCJ0cnVlXCI7XG4gICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy4kZWwuZmluZChcIi5hZG1pbl9uYW1lXCIpLmFkZENsYXNzKFwiYXJjaGl2ZWRfYXNzZXNzbWVudFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWwuZmluZChcIi5hZG1pbl9uYW1lXCIpLnJlbW92ZUNsYXNzKFwiYXJjaGl2ZWRfYXNzZXNzbWVudFwiKTtcbiAgICB9XG4gICAgdGhpcy5tb2RlbC5zYXZlKHtcbiAgICAgIGFyY2hpdmVkOiByZXN1bHRcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBBc3Nlc3NtZW50TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5hc3Nlc3NtZW50TWVudVRvZ2dsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGVsLmZpbmQoJy5hc3Nlc3NtZW50X21lbnVfdG9nZ2xlJykudG9nZ2xlQ2xhc3MoJ3NwX2Rvd24nKS50b2dnbGVDbGFzcygnc3BfcmlnaHQnKTtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZCgnLmFzc2Vzc21lbnRfbWVudScpLnRvZ2dsZSgpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLmFzc2Vzc21lbnREZWxldGVUb2dnbGUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRlbC5maW5kKFwiLnNwX2Fzc2Vzc21lbnRfZGVsZXRlX2NvbmZpcm1cIikudG9nZ2xlKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLmFzc2Vzc21lbnREZWxldGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tb2RlbC5kZXN0cm95KCk7XG4gIH07XG5cbiAgQXNzZXNzbWVudExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuc3ByaXRlTGlzdExpbmsgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgbGVuLCBuYW1lLCBuYW1lcywgcmVzdWx0LCB0YWdOYW1lO1xuICAgIHRhZ05hbWUgPSBhcmd1bWVudHNbMF0sIG5hbWVzID0gMiA8PSBhcmd1bWVudHMubGVuZ3RoID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpIDogW107XG4gICAgcmVzdWx0ID0gXCJcIjtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBuYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbmFtZSA9IG5hbWVzW2ldO1xuICAgICAgcmVzdWx0ICs9IFwiPFwiICsgdGFnTmFtZSArIFwiIGNsYXNzPSdzcF9cIiArIChuYW1lLnVuZGVyc2NvcmUoKSkgKyBcIic+PGEgaHJlZj0nI1wiICsgbmFtZSArIFwiL1wiICsgdGhpcy5tb2RlbC5pZCArIFwiJz5cIiArIChuYW1lLnVuZGVyc2NvcmUoKS50aXRsZWl6ZSgpKSArIFwiPC9hPjwvXCIgKyB0YWdOYW1lICsgXCI+XCI7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgQXNzZXNzbWVudExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuc3ByaXRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGxlbiwgbmFtZSwgbmFtZXMsIHJlc3VsdCwgdGFnTmFtZTtcbiAgICB0YWdOYW1lID0gYXJndW1lbnRzWzBdLCBuYW1lcyA9IDIgPD0gYXJndW1lbnRzLmxlbmd0aCA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSA6IFtdO1xuICAgIHJlc3VsdCA9IFwiXCI7XG4gICAgZm9yIChpID0gMCwgbGVuID0gbmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIG5hbWUgPSBuYW1lc1tpXTtcbiAgICAgIHJlc3VsdCArPSBcIjxcIiArIHRhZ05hbWUgKyBcIj48YnV0dG9uIGNsYXNzPSdzcF9cIiArIChuYW1lLnVuZGVyc2NvcmUoKSkgKyBcIicgdGl0bGU9J1wiICsgKG5hbWUudW5kZXJzY29yZSgpLnRpdGxlaXplKCkpICsgXCInPlwiICsgKG5hbWUudW5kZXJzY29yZSgpLnRpdGxlaXplKCkpICsgXCI8L2J1dHRvbj48L1wiICsgdGFnTmFtZSArIFwiPiBcIjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBBc3Nlc3NtZW50TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS51bCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgaHRtbDtcbiAgICBodG1sID0gXCI8dWwgXCIgKyAob3B0aW9ucy5jc3NDbGFzcyA/IFwiY2xhc3M9J1wiICsgb3B0aW9ucy5jc3NDbGFzcyArIFwiJ1wiIDogJycpICsgXCI+XCI7XG4gICAgaHRtbCArPSB0aGlzLnNwcml0ZUxpc3RMaW5rLmFwcGx5KHRoaXMsIFtcImxpXCJdLmNvbmNhdChvcHRpb25zLmxpbmtzKSk7XG4gICAgaHRtbCArPSBvcHRpb25zLm90aGVyIHx8ICcnO1xuICAgIHJldHVybiBodG1sICs9IFwiPC91bD5cIjtcbiAgfTtcblxuICBBc3Nlc3NtZW50TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYWRtaW5OYW1lLCBhZG1pblJlc3VsdENvdW50LCBhcmNoaXZlQ2xhc3MsIGFyY2hpdmVTd2l0Y2gsIGRlbGV0ZUNvbmZpcm0sIGRvd25sb2FkS2V5LCBmb3JtYXQsIGlzQXJjaGl2ZWQsIG5hbWUsIHByaW50U2VsZWN0b3IsIHJlc3VsdENvdW50LCBzZWxlY3RlZCwgdG9nZ2xlQnV0dG9uO1xuICAgIGlzQXJjaGl2ZWQgPSB0aGlzLm1vZGVsLmdldEJvb2xlYW4oJ2FyY2hpdmVkJyk7XG4gICAgYXJjaGl2ZUNsYXNzID0gaXNBcmNoaXZlZCA/IFwiIGFyY2hpdmVkX2Fzc2Vzc21lbnRcIiA6IFwiXCI7XG4gICAgdG9nZ2xlQnV0dG9uID0gXCI8ZGl2IGNsYXNzPSdhc3Nlc3NtZW50X21lbnVfdG9nZ2xlIHNwX3JpZ2h0Jz48ZGl2PjwvZGl2PjwvZGl2PlwiO1xuICAgIG5hbWUgPSBcIjxidXR0b24gY2xhc3M9J25hbWUgY2xpY2thYmxlJz5cIiArICh0aGlzLm1vZGVsLmdldCgnbmFtZScpKSArIFwiPC9idXR0b24+XCI7XG4gICAgYWRtaW5OYW1lID0gXCI8YnV0dG9uIGNsYXNzPSdhZG1pbl9uYW1lIGNsaWNrYWJsZSBcIiArIGFyY2hpdmVDbGFzcyArIFwiJz5cIiArICh0aGlzLm1vZGVsLmdldCgnbmFtZScpKSArIFwiPC9idXR0b24+XCI7XG4gICAgYWRtaW5SZXN1bHRDb3VudCA9IFwiPGxhYmVsIGNsYXNzPSdyZXN1bHRfY291bnQgc21hbGxfZ3JleSBub19oZWxwJyB0aXRsZT0nUmVzdWx0IGNvdW50LiBDbGljayB0byB1cGRhdGUuJz5SZXN1bHRzIDxiPlwiICsgdGhpcy5yZXN1bHRDb3VudCArIFwiPC9iPjwvbGFiZWw+XCI7XG4gICAgcmVzdWx0Q291bnQgPSBcIjxzcGFuIGNsYXNzPSdyZXN1bHRfY291bnQgbm9faGVscCc+UmVzdWx0cyA8Yj5cIiArIHRoaXMucmVzdWx0Q291bnQgKyBcIjwvYj48L3NwYW4+XCI7XG4gICAgc2VsZWN0ZWQgPSBcIiBzZWxlY3RlZD0nc2VsZWN0ZWQnXCI7XG4gICAgZGVsZXRlQ29uZmlybSA9IFwiPHNwYW4gY2xhc3M9J3NwX2Fzc2Vzc21lbnRfZGVsZXRlX2NvbmZpcm0gY29uZmlybWF0aW9uJz48ZGl2IGNsYXNzPSdtZW51X2JveCc+Q29uZmlybSA8YnV0dG9uIGNsYXNzPSdzcF9hc3Nlc3NtZW50X2RlbGV0ZV95ZXMgY29tbWFuZF9yZWQnPkRlbGV0ZTwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdzcF9hc3Nlc3NtZW50X2RlbGV0ZV9jYW5jZWwgY29tbWFuZCc+Q2FuY2VsPC9idXR0b24+PC9kaXY+PC9zcGFuPlwiO1xuICAgIHByaW50U2VsZWN0b3IgPSBcIjxkaXYgY2xhc3M9J3ByaW50X2Zvcm1hdF93cmFwcGVyIGNvbmZpcm1hdGlvbic+IDxzZWxlY3QgaWQ9J3ByaW50X2Zvcm1hdCc+IDxvcHRpb24gZGlzYWJsZWQ9J2Rpc2FibGVkJyBzZWxlY3RlZD0nc2VsZWN0ZWQnIHZhbHVlPSdyZXNldCc+U2VsZWN0IGEgcHJpbnQgZm9ybWF0PC9vcHRpb24+IFwiICsgKChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgIHJlZiA9IFRhbmdlcmluZS5zZXR0aW5ncy5jb25maWcuZ2V0KFwicHJpbnRGb3JtYXRzXCIpO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGZvcm1hdCA9IHJlZltpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKFwiPG9wdGlvbiBkYXRhLWZvcm1hdD0nXCIgKyBmb3JtYXQua2V5ICsgXCInPlwiICsgZm9ybWF0Lm5hbWUgKyBcIjwvb3B0aW9uPlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pKCkpICsgXCIgPG9wdGlvbiBkYXRhLWZvcm1hdD0nY2FuY2VsJz5DYW5jZWw8L29wdGlvbj4gPC9zZWxlY3Q+IDwvZGl2PlwiO1xuICAgIGRvd25sb2FkS2V5ID0gXCI8bGkgY2xhc3M9J2Rvd25sb2FkX2tleSBzbWFsbF9ncmV5Jz5Eb3dubG9hZCBrZXkgPGI+XCIgKyAodGhpcy5tb2RlbC5nZXQoXCJfaWRcIikuc3Vic3RyKC01LCA1KSkgKyBcIjwvYj48L2xpPlwiO1xuICAgIGFyY2hpdmVTd2l0Y2ggPSBcIjxzZWxlY3QgY2xhc3M9J2FyY2hpdmUnPiA8b3B0aW9uIHZhbHVlPSdmYWxzZScgXCIgKyAoaXNBcmNoaXZlZCA/IHNlbGVjdGVkIDogJycpICsgXCI+QWN0aXZlPC9vcHRpb24+IDxvcHRpb24gdmFsdWU9J3RydWUnICBcIiArIChpc0FyY2hpdmVkID8gc2VsZWN0ZWQgOiAnJykgKyBcIj5BcmNoaXZlZDwvb3B0aW9uPiA8L3NlbGVjdD5cIjtcbiAgICBpZiAodGhpcy5pc0FkbWluKSB7XG4gICAgICB0aGlzLiRlbC5odG1sKFwiPGRpdj4gXCIgKyB0b2dnbGVCdXR0b24gKyBcIiBcIiArIGFkbWluTmFtZSArIFwiIDwvZGl2PiBcIiArICh0aGlzLnVsKHtcbiAgICAgICAgY3NzQ2xhc3M6IFwiYXNzZXNzbWVudF9tZW51XCIsXG4gICAgICAgIGxpbmtzOiBbXCJydW5cIiwgXCJkYXRhRW50cnlcIiwgXCJyZXN1bHRzXCIsIFwiZWRpdFwiLCBcInN5bmNcIiwgXCJwcmludFwiXSxcbiAgICAgICAgb3RoZXI6IHRoaXMuc3ByaXRlRXZlbnRzKFwibGlcIiwgXCJkdXBsaWNhdGVcIiwgXCJhc3Nlc3NtZW50X2RlbGV0ZVwiKSArIGRvd25sb2FkS2V5XG4gICAgICB9KSkgKyBcIiA8ZGl2IGNsYXNzPSdzdWJfbWVudXMnPiBcIiArIGRlbGV0ZUNvbmZpcm0gKyBcIiBcIiArIHByaW50U2VsZWN0b3IgKyBcIiA8L2Rpdj5cIik7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzQWRtaW4gJiYgVGFuZ2VyaW5lLnNldHRpbmdzLmdldEJvb2xlYW4oJ3NhdGVsbGl0ZScpKSB7XG4gICAgICB0aGlzLiRlbC5odG1sKFwiPGRpdj4gXCIgKyB0b2dnbGVCdXR0b24gKyBcIiBcIiArIGFkbWluTmFtZSArIFwiIDwvZGl2PiBcIiArICh0aGlzLnVsKHtcbiAgICAgICAgY3NzQ2xhc3M6IFwiYXNzZXNzbWVudF9tZW51XCIsXG4gICAgICAgIGxpbmtzOiBbXCJydW5cIiwgXCJyZXN1bHRzXCIsIFwiZWRpdFwiLCBcInN5bmNcIiwgXCJwcmludFwiXSxcbiAgICAgICAgb3RoZXI6IHRoaXMuc3ByaXRlRXZlbnRzKFwibGlcIiwgXCJkdXBsaWNhdGVcIiwgXCJhc3Nlc3NtZW50X2RlbGV0ZVwiKSArIGRvd25sb2FkS2V5XG4gICAgICB9KSkgKyBcIiA8ZGl2IGNsYXNzPSdzdWJfbWVudXMnPiBcIiArIGRlbGV0ZUNvbmZpcm0gKyBcIiBcIiArIHByaW50U2VsZWN0b3IgKyBcIiA8L2Rpdj5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsLmh0bWwoXCI8ZGl2IGNsYXNzPSdub25fYWRtaW4nPiBcIiArICh0aGlzLnNwcml0ZUxpc3RMaW5rKFwic3BhblwiLCAncnVuJykpICsgbmFtZSArIFwiIFwiICsgKHRoaXMuc3ByaXRlTGlzdExpbmsoXCJzcGFuXCIsICdyZXN1bHRzJykpICsgXCIgXCIgKyAodGhpcy5zcHJpdGVMaXN0TGluayhcInNwYW5cIiwgJ3ByaW50JykpICsgXCIgPC9kaXY+IDxkaXYgY2xhc3M9J3N1Yl9tZW51cyc+IFwiICsgcHJpbnRTZWxlY3RvciArIFwiIDwvZGl2PlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIHJldHVybiBBc3Nlc3NtZW50TGlzdEVsZW1lbnRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgQXNzZXNzbWVudHNNZW51VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiQXNzZXNzbWVudHNNZW51Vmlld1wiXG5cbiAgZXZlbnRzOlxuICAgICdrZXlwcmVzcyAubmV3X25hbWUnIDogJ25ld1NhdmUnXG4gICAgJ2NsaWNrIC5uZXdfc2F2ZScgICAgOiAnbmV3U2F2ZSdcbiAgICAnY2xpY2sgLm5ld19jYW5jZWwnICA6ICduZXdUb2dnbGUnXG4gICAgJ2NsaWNrIC5uZXcnICAgICAgICAgOiAnbmV3VG9nZ2xlJ1xuICAgICdjbGljayAuaW1wb3J0JyAgICAgIDogJ2ltcG9ydCdcbiAgICAnY2xpY2sgLmFwaycgICAgICAgICA6ICdhcGsnXG4gICAgJ2NsaWNrIC5ncm91cHMnICAgICAgOiAnZ290b0dyb3VwcydcbiAgICAnY2xpY2sgLnVuaXZlcnNhbF91cGxvYWQnIDogJ3VuaXZlcnNhbFVwbG9hZCdcblxuICAgICdjbGljayAuc3luY190YWJsZXRzJyA6ICdzeW5jVGFibGV0cydcblxuICAgICdjbGljayAucmVzdWx0cycgICAgICAgIDogJ3Jlc3VsdHMnXG4gICAgJ2NsaWNrIC5zZXR0aW5ncycgICAgICAgOiAnZWRpdEluUGxhY2UnXG4gICAgJ2tleXVwIC5lZGl0X2luX3BsYWNlJyAgOiAnc2F2ZUluUGxhY2UnXG4gICAgJ2NoYW5nZSAuZWRpdF9pbl9wbGFjZScgIDogJ3NhdmVJblBsYWNlJ1xuXG4gIHN5bmNUYWJsZXRzOiA9PlxuICAgIEB0YWJsZXRNYW5hZ2VyLnN5bmMoKVxuXG4gIGVkaXRJblBsYWNlOiAoZXZlbnQpIC0+XG4gICAgcmV0dXJuIHVubGVzcyBUYW5nZXJpbmUudXNlci5pc0FkbWluKClcbiAgICAkdGFyZ2V0ICAgID0gJChldmVudC50YXJnZXQpXG4gICAgYXR0cmlidXRlICA9ICR0YXJnZXQuYXR0cihcImRhdGEtYXR0cmlidHVlXCIpXG4gICAgQG9sZFRhcmdldCA9ICR0YXJnZXQuY2xvbmUoKVxuICAgIGNsYXNzZXMgPSAkdGFyZ2V0LmF0dHIoXCJjbGFzc1wiKS5yZXBsYWNlKFwic2V0dGluZ3NcIixcIlwiKVxuICAgIG1hcmdpbnMgPSAkdGFyZ2V0LmNzcyhcIm1hcmdpblwiKVxuICAgICR0YXJnZXQuYWZ0ZXIoXCI8aW5wdXQgdHlwZT0ndGV4dCcgc3R5bGU9J21hcmdpbjoje21hcmdpbnN9OycgZGF0YS1hdHRyaWJ1dGU9JyN7YXR0cmlidXRlfScgY2xhc3M9J2VkaXRfaW5fcGxhY2UgI3tjbGFzc2VzfScgdmFsdWU9JyN7Xy5lc2NhcGUoJHRhcmdldC5odG1sKCkpfSc+XCIpXG4gICAgaW5wdXQgPSAkdGFyZ2V0Lm5leHQoKS5mb2N1cygpXG4gICAgJHRhcmdldC5yZW1vdmUoKVxuXG4gIHNhdmVJblBsYWNlOiAoZXZlbnQpIC0+XG5cbiAgICByZXR1cm4gaWYgQGFscmVhZHlTYXZpbmdcblxuICAgIGlmIGV2ZW50LmtleUNvZGVcbiAgICAgIGlmIGV2ZW50LmtleUNvZGUgPT0gMjdcbiAgICAgICAgJChldmVudC50YXJnZXQpLmFmdGVyKEBvbGRUYXJnZXQpLnJlbW92ZSgpXG4gICAgICAgIHJldHVyblxuICAgICAgZWxzZSBpZiBldmVudC5rZXlDb2RlICE9IDEzXG4gICAgICAgIHJldHVybiB0cnVlXG5cbiAgICBAYWxyZWFkeVNhdmluZyA9IHRydWVcbiAgICAkdGFyZ2V0ICAgPSAkKGV2ZW50LnRhcmdldClcbiAgICBhdHRyaWJ1dGUgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLWF0dHJpYnV0ZVwiKVxuICAgIHZhbHVlICAgICA9ICR0YXJnZXQudmFsKClcblxuICAgIHVwZGF0ZWRBdHRyaWJ1dGVzICAgICAgICAgICAgPSB7fVxuICAgIHVwZGF0ZWRBdHRyaWJ1dGVzW2F0dHJpYnV0ZV0gPSB2YWx1ZVxuXG4gICAgVGFuZ2VyaW5lLnNldHRpbmdzLnNhdmUgdXBkYXRlZEF0dHJpYnV0ZXMsXG4gICAgICBzdWNjZXNzOiA9PlxuICAgICAgICBAYWxyZWFkeVNhdmluZyA9IGZhbHNlXG4gICAgICAgIFV0aWxzLnRvcEFsZXJ0KFwiU2F2ZWRcIilcbiAgICAgICAgJHRhcmdldC5hZnRlcihAb2xkVGFyZ2V0Lmh0bWwodmFsdWUpKS5yZW1vdmUoKVxuICAgICAgZXJyb3I6ID0+XG4gICAgICAgIEBhbHJlYWR5U2F2aW5nID0gZmFsc2VcbiAgICAgICAgVXRpbHMudG9wQWxlcnQoXCJTYXZlIGVycm9yXCIpXG4gICAgICAgICR0YXJnZXQuYWZ0ZXIoQG9sZFRhcmdldCkucmVtb3ZlKClcblxuICByZXN1bHRzOiAtPiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiZGFzaGJvYXJkXCIsIHRydWVcblxuICB1bml2ZXJzYWxVcGxvYWQ6IC0+IFV0aWxzLnVuaXZlcnNhbFVwbG9hZCgpXG5cbiAgYXBrOiAtPlxuICAgIFRhbmdlcmluZVRyZWUubWFrZVxuICAgICAgc3VjY2VzczogKGRhdGEpIC0+XG4gICAgICAgIGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKVxuICAgICAgICBhLmhyZWYgPSBUYW5nZXJpbmUuc2V0dGluZ3MuY29uZmlnLmdldChcInRyZWVcIilcbiAgICAgICAgVXRpbHMuc3RpY2t5KFwiPGgxPkFQSyBsaW5rPC9oMT48cD4je2EuaG9zdH0vdHJlZS8je2RhdGEudG9rZW59PC9wPlwiKVxuICAgICAgZXJyb3I6ICh4aHIsIHJlc3BvbnNlKSAtPlxuICAgICAgICBVdGlscy5zdGlja3kgcmVzcG9uc2UubWVzc2FnZVxuXG4gIGdvdG9Hcm91cHM6IC0+IFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJncm91cHNcIiwgdHJ1ZVxuXG4gIGltcG9ydDogICAgIC0+IFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJpbXBvcnRcIiwgdHJ1ZVxuXG4gIGkxOG46IC0+XG4gICAgQHRleHQgPVxuICAgICAgXCJuZXdcIiAgICAgICAgICAgIDogdChcIkFzc2Vzc21lbnRNZW51Vmlldy5idXR0b24ubmV3XCIpXG4gICAgICBpbXBvcnQgICAgICAgICAgIDogdChcIkFzc2Vzc21lbnRNZW51Vmlldy5idXR0b24uaW1wb3J0XCIpXG4gICAgICBhcGsgICAgICAgICAgICAgIDogdChcIkFzc2Vzc21lbnRNZW51Vmlldy5idXR0b24uYXBrXCIpXG4gICAgICBncm91cHMgICAgICAgICAgIDogdChcIkFzc2Vzc21lbnRNZW51Vmlldy5idXR0b24uZ3JvdXBzXCIpXG4gICAgICB1bml2ZXJzYWxfdXBsb2FkIDogdChcIkFzc2Vzc21lbnRNZW51Vmlldy5idXR0b24udW5pdmVyc2FsX3VwbG9hZFwiKVxuICAgICAgc3luY190YWJsZXRzICAgICA6IHQoXCJBc3Nlc3NtZW50TWVudVZpZXcuYnV0dG9uLnN5bmNfdGFibGV0c1wiKVxuICAgICAgcmVzdWx0cyAgICAgICAgICA6IHQoXCJBc3Nlc3NtZW50TWVudVZpZXcuYnV0dG9uLnJlc3VsdHNcIilcbiAgICAgIHNhdmUgICAgICAgICAgICAgOiB0KFwiQXNzZXNzbWVudE1lbnVWaWV3LmJ1dHRvbi5zYXZlXCIpXG4gICAgICBjYW5jZWwgICAgICAgICAgIDogdChcIkFzc2Vzc21lbnRNZW51Vmlldy5idXR0b24uY2FuY2VsXCIpXG4gICAgICBhc3Nlc3NtZW50ICA6IHQoXCJBc3Nlc3NtZW50TWVudVZpZXcubGFiZWwuYXNzZXNzbWVudFwiKVxuICAgICAgYXNzZXNzbWVudHMgOiB0KFwiQXNzZXNzbWVudE1lbnVWaWV3LmxhYmVsLmFzc2Vzc21lbnRzXCIpXG4gICAgICBjdXJyaWN1bHVtICA6IHQoXCJBc3Nlc3NtZW50TWVudVZpZXcubGFiZWwuY3VycmljdWx1bVwiKVxuXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgICBAaTE4bigpXG5cbiAgICBAW2tleV0gPSB2YWx1ZSBmb3Iga2V5LCB2YWx1ZSBvZiBvcHRpb25zXG5cbiAgICBAYXNzZXNzbWVudHMuZWFjaCAoYXNzZXNzbWVudCkgPT4gYXNzZXNzbWVudC5vbiBcIm5ld1wiLCBAYWRkQXNzZXNzbWVudFxuICAgIEBjdXJyaWN1bGEuZWFjaCAgIChjdXJyaWN1bHVtKSA9PiBjdXJyaWN1bHVtLm9uIFwibmV3XCIsIEBhZGRDdXJyaWN1bHVtXG5cbiAgICBAY3VycmljdWxhTGlzdFZpZXcgPSBuZXcgQ3VycmljdWxhTGlzdFZpZXdcbiAgICAgIFwiY3VycmljdWxhXCIgOiBAY3VycmljdWxhXG5cbiAgICBAYXNzZXNzbWVudHNWaWV3ID0gbmV3IEFzc2Vzc21lbnRzVmlld1xuICAgICAgXCJhc3Nlc3NtZW50c1wiIDogQGFzc2Vzc21lbnRzXG4gICAgICBcInBhcmVudFwiICAgICAgOiBAXG5cbiAgICBAdXNlcnNNZW51VmlldyA9IG5ldyBVc2Vyc01lbnVWaWV3XG5cblxuICByZW5kZXI6ID0+XG5cbiAgICBpc0FkbWluID0gVGFuZ2VyaW5lLnVzZXIuaXNBZG1pbigpXG5cbiAgICBuZXdCdXR0b24gICAgID0gXCI8YnV0dG9uIGNsYXNzPSduZXcgY29tbWFuZCc+I3tAdGV4dC5uZXd9PC9idXR0b24+XCJcbiAgICBpbXBvcnRCdXR0b24gID0gXCI8YnV0dG9uIGNsYXNzPSdpbXBvcnQgY29tbWFuZCc+I3tAdGV4dC5pbXBvcnR9PC9idXR0b24+XCJcbiAgICBhcGtCdXR0b24gICAgID0gXCI8YnV0dG9uIGNsYXNzPSdhcGsgbmF2aWdhdGlvbic+I3tAdGV4dC5hcGt9PC9idXR0b24+XCJcbiAgICBncm91cHNCdXR0b24gID0gXCI8YnV0dG9uIGNsYXNzPSduYXZpZ2F0aW9uIGdyb3Vwcyc+I3tAdGV4dC5ncm91cHN9PC9idXR0b24+XCJcbiAgICB1cGxvYWRCdXR0b24gID0gXCI8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHVuaXZlcnNhbF91cGxvYWQnPiN7QHRleHQudW5pdmVyc2FsX3VwbG9hZH08L2J1dHRvbj5cIlxuICAgIHN5bmNUYWJsZXRzQnV0dG9uID0gXCI8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHN5bmNfdGFibGV0cyc+I3tAdGV4dC5zeW5jX3RhYmxldHN9PC9idXR0b24+XCJcbiAgICByZXN1bHRzQnV0dG9uID0gXCI8YnV0dG9uIGNsYXNzPSduYXZpZ2F0aW9uIHJlc3VsdHMnPiN7QHRleHQucmVzdWx0c308L2J1dHRvbj5cIlxuICAgIGdyb3VwSGFuZGxlICAgPSBcIjxoMiBjbGFzcz0nc2V0dGluZ3MgZ3JleScgZGF0YS1hdHRyaWJ0dWU9J2dyb3VwSGFuZGxlJz4je1RhbmdlcmluZS5zZXR0aW5ncy5nZXRFc2NhcGVkU3RyaW5nKCdncm91cEhhbmRsZScpIHx8IFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoJ2dyb3VwTmFtZScpfTwvaDI+XCJcblxuXG4gICAgY29udGFpbmVycyA9IFtdXG4gICAgY29udGFpbmVycy5wdXNoIFwiPHNlY3Rpb24gaWQ9J2N1cnJpY3VsYV9jb250YWluZXInIGNsYXNzPSdDdXJyaWN1bGFMaXN0Vmlldyc+PC9zZWN0aW9uPlwiIGlmIEBjdXJyaWN1bGEubGVuZ3RoIGlzbnQgMFxuICAgIGNvbnRhaW5lcnMucHVzaCBcIjxzZWN0aW9uIGlkPSdrbGFzc19jb250YWluZXInIGNsYXNzPSdLbGFzc2VzVmlldyc+PC9zZWN0aW9uPlwiICAgICAgICAgaWYgQGtsYXNzZXMubGVuZ3RoIGlzbnQgMFxuICAgIGNvbnRhaW5lcnMucHVzaCBcIjxzZWN0aW9uIGlkPSd0ZWFjaGVyc19jb250YWluZXInIGNsYXNzPSdUZWFjaGVyc1ZpZXcnPjwvc2VjdGlvbj5cIiAgICAgaWYgQHRlYWNoZXJzLmxlbmd0aCBpc250IDBcbiAgICBjb250YWluZXJzLnB1c2ggXCI8c2VjdGlvbiBpZD0ndXNlcnNfbWVudV9jb250YWluZXInIGNsYXNzPSdVc2Vyc01lbnVWaWV3Jz48L3NlY3Rpb24+XCJcbiAgICBjb250YWluZXJzLnB1c2ggXCI8c2VjdGlvbiBpZD0nd29ya2Zsb3dfbWVudV9jb250YWluZXInIGNsYXNzPSdXb3JrZmxvd01lbnVWaWV3Jz48L3NlY3Rpb24+XCJcblxuXG5cbiAgICBodG1sID0gXCJcbiAgICAgICN7Z3JvdXBzQnV0dG9ufVxuICAgICAgI3thcGtCdXR0b259XG4gICAgICAje3Jlc3VsdHNCdXR0b259XG4gICAgICAje2dyb3VwSGFuZGxlfVxuICAgICAgPHNlY3Rpb24+XG4gICAgICAgIDxoMT4je0B0ZXh0LmFzc2Vzc21lbnRzfTwvaDE+XG4gICAgXCJcblxuICAgIGlmIGlzQWRtaW5cbiAgICAgIGh0bWwgKz0gXCJcbiAgICAgICAgICAje25ld0J1dHRvbn1cbiAgICAgICAgICAje2ltcG9ydEJ1dHRvbn1cblxuICAgICAgICAgIDxkaXYgY2xhc3M9J25ld19mb3JtIGNvbmZpcm1hdGlvbic+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBjbGFzcz0nbmV3X25hbWUnIHBsYWNlaG9sZGVyPSdOYW1lJz5cbiAgICAgICAgICAgICAgPHNlbGVjdCBpZD0nbmV3X3R5cGUnPlxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9J2Fzc2Vzc21lbnQnPiN7QHRleHQuYXNzZXNzbWVudH08L29wdGlvbj5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSdjdXJyaWN1bHVtJz4je0B0ZXh0LmN1cnJpY3VsdW19PC9vcHRpb24+XG4gICAgICAgICAgICAgIDwvc2VsZWN0Pjxicj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0nbmV3X3NhdmUgY29tbWFuZCc+I3tAdGV4dC5zYXZlfTwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSduZXdfY2FuY2VsIGNvbW1hbmQnPiN7QHRleHQuY2FuY2VsfTwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBpZD0nYXNzZXNzbWVudHNfY29udGFpbmVyJz48L2Rpdj5cbiAgICAgICAgPC9zZWN0aW9uPlxuXG4gICAgICAgICN7Y29udGFpbmVycy5qb2luKCcnKX1cblxuICAgICAgXCJcbiAgICBlbHNlXG4gICAgICBodG1sICs9IFwiXG4gICAgICAgIDxkaXYgaWQ9J2Fzc2Vzc21lbnRzX2NvbnRhaW5lcic+PC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgICBcIlxuXG4gICAgQCRlbC5odG1sIGh0bWxcblxuICAgIEBhc3Nlc3NtZW50c1ZpZXcuc2V0RWxlbWVudCggQCRlbC5maW5kKFwiI2Fzc2Vzc21lbnRzX2NvbnRhaW5lclwiKSApXG4gICAgQGFzc2Vzc21lbnRzVmlldy5yZW5kZXIoKVxuXG4gICAgQGN1cnJpY3VsYUxpc3RWaWV3LnNldEVsZW1lbnQoIEAkZWwuZmluZChcIiNjdXJyaWN1bGFfY29udGFpbmVyXCIpIClcbiAgICBAY3VycmljdWxhTGlzdFZpZXcucmVuZGVyKClcblxuICAgIEB1c2Vyc01lbnVWaWV3LnNldEVsZW1lbnQoIEAkZWwuZmluZChcIiN1c2Vyc19tZW51X2NvbnRhaW5lclwiKSApXG4gICAgQHVzZXJzTWVudVZpZXcucmVuZGVyKClcblxuICAgIGlmIEBrbGFzc2VzLmxlbmd0aCA+IDBcbiAgICAgIEBrbGFzc2VzVmlldyA9IG5ldyBLbGFzc2VzVmlld1xuICAgICAgICBrbGFzc2VzIDogQGtsYXNzZXNcbiAgICAgICAgY3VycmljdWxhIDogQGN1cnJpY3VsYVxuICAgICAgICB0ZWFjaGVycyA6IEB0ZWFjaGVyc1xuICAgICAgQGtsYXNzZXNWaWV3LnNldEVsZW1lbnQgQCRlbC5maW5kKFwiI2tsYXNzX2NvbnRhaW5lclwiKVxuICAgICAgQGtsYXNzZXNWaWV3LnJlbmRlcigpXG4gICAgZWxzZVxuICAgICAgQCRlbC5maW5kKFwiI2tsYXNzX2NvbnRhaW5lclwiKS5yZW1vdmUoKVxuXG5cbiAgICBpZiBAdGVhY2hlcnMubGVuZ3RoID4gMFxuICAgICAgQHRlYWNoZXJzVmlldyA9IG5ldyBUZWFjaGVyc1ZpZXdcbiAgICAgICAgdGVhY2hlcnMgOiBAdGVhY2hlcnNcbiAgICAgICAgdXNlcnMgOiBAdXNlcnNcbiAgICAgIEB0ZWFjaGVyc1ZpZXcuc2V0RWxlbWVudCBAJGVsLmZpbmQoXCIjdGVhY2hlcnNfY29udGFpbmVyXCIpXG4gICAgICBAdGVhY2hlcnNWaWV3LnJlbmRlcigpXG4gICAgZWxzZVxuICAgICAgQCRlbC5maW5kKFwiI3RlYWNoZXJzX2NvbnRhaW5lclwiKS5yZW1vdmUoKVxuXG4gICAgaWYgVGFuZ2VyaW5lLnNldHRpbmdzLmdldCgnc2hvd1dvcmtmbG93cycpID09IHRydWVcbiAgICAgIEB3b3JrZmxvd01lbnVWaWV3ID0gbmV3IFdvcmtmbG93TWVudVZpZXdcbiAgICAgICAgd29ya2Zsb3dzIDogQHdvcmtmbG93c1xuICAgICAgICBmZWVkYmFja3MgOiBAZmVlZGJhY2tzXG4gICAgICBAd29ya2Zsb3dNZW51Vmlldy5zZXRFbGVtZW50IEAkZWwuZmluZChcIiN3b3JrZmxvd19tZW51X2NvbnRhaW5lclwiKVxuICAgICAgQHdvcmtmbG93TWVudVZpZXcucmVuZGVyKClcblxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgICByZXR1cm5cblxuXG4gIGFkZEFzc2Vzc21lbnQ6IChuZXdPbmUpID0+XG4gICAgQGFzc2Vzc21lbnRzLmFkZCBuZXdPbmVcbiAgICBuZXdPbmUub24gXCJuZXdcIiwgQGFkZEFzc2Vzc21lbnRcblxuICBhZGRDdXJyaWN1bHVtOiAobmV3T25lKSA9PlxuICAgIEBjdXJyaWN1bGEuYWRkIG5ld09uZVxuICAgIG5ld09uZS5vbiBcIm5ld1wiLCBAYWRkQ3VycmljdWx1bVxuXG4gICMgTWFraW5nIGEgbmV3IGFzc2Vzc21lbnRcbiAgbmV3VG9nZ2xlOiAtPiBAJGVsLmZpbmQoJy5uZXdfZm9ybSwgLm5ldycpLnRvZ2dsZSgpOyBmYWxzZVxuXG4gIG5ld1NhdmU6IChldmVudCkgPT5cblxuICAgICMgdGhpcyBoYW5kbGVzIGFtYmlndW91cyBldmVudHNcbiAgICAjIHRoZSBpZGVhIGlzIHRvIHN1cHBvcnQgY2xpY2tzIGFuZCB0aGUgZW50ZXIga2V5XG4gICAgIyBsb2dpYzpcbiAgICAjIGl0IGl0J3MgYSBrZXlzdHJva2UgYW5kIGl0J3Mgbm90IGVudGVyLCBhY3Qgbm9ybWFsbHksIGp1c3QgYSBrZXkgc3Ryb2tlXG4gICAgIyBpZiBpdCdzIGEgY2xpY2sgb3IgZW50ZXIsIHByb2Nlc3MgdGhlIGZvcm1cblxuICAgIGlmIGV2ZW50LnR5cGUgIT0gXCJjbGlja1wiICYmIGV2ZW50LndoaWNoICE9IDEzXG4gICAgICByZXR1cm4gdHJ1ZVxuXG4gICAgbmFtZSAgICA9IEAkZWwuZmluZCgnLm5ld19uYW1lJykudmFsKClcbiAgICBuZXdUeXBlID0gQCRlbC5maW5kKFwiI25ld190eXBlIG9wdGlvbjpzZWxlY3RlZFwiKS52YWwoKVxuICAgIG5ld0lkICAgPSBVdGlscy5ndWlkKClcblxuICAgIGlmIG5hbWUubGVuZ3RoID09IDBcbiAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiPHNwYW4gY2xhc3M9J2Vycm9yJz5Db3VsZCBub3Qgc2F2ZSA8aW1nIHNyYz0naW1hZ2VzL2ljb25fY2xvc2UucG5nJyBjbGFzcz0nY2xlYXJfbWVzc2FnZSc+PC9zcGFuPlwiXG4gICAgICByZXR1cm4gZmFsc2VcblxuICAgIGlmIG5ld1R5cGUgPT0gXCJhc3Nlc3NtZW50XCJcbiAgICAgIG5ld09iamVjdCA9IG5ldyBBc3Nlc3NtZW50XG4gICAgICAgIFwibmFtZVwiICAgICAgICAgOiBuYW1lXG4gICAgICAgIFwiX2lkXCIgICAgICAgICAgOiBuZXdJZFxuICAgICAgICBcImFzc2Vzc21lbnRJZFwiIDogbmV3SWRcbiAgICAgICAgXCJhcmNoaXZlZFwiICAgICA6IGZhbHNlXG4gICAgICBjYWxsYmFjayA9IEBhZGRBc3Nlc3NtZW50XG4gICAgZWxzZSBpZiBuZXdUeXBlID09IFwiY3VycmljdWx1bVwiXG4gICAgICBuZXdPYmplY3QgPSBuZXcgQ3VycmljdWx1bVxuICAgICAgICBcIm5hbWVcIiAgICAgICAgIDogbmFtZVxuICAgICAgICBcIl9pZFwiICAgICAgICAgIDogbmV3SWRcbiAgICAgICAgXCJjdXJyaWN1bHVtSWRcIiA6IG5ld0lkXG4gICAgICBjYWxsYmFjayA9IEBhZGRDdXJyaWN1bHVtXG5cbiAgICBuZXdPYmplY3Quc2F2ZSBudWxsLFxuICAgICAgc3VjY2VzcyA6ID0+XG4gICAgICAgIGNhbGxiYWNrKG5ld09iamVjdClcbiAgICAgICAgQCRlbC5maW5kKCcubmV3X2Zvcm0sIC5uZXcnKS50b2dnbGUoKVxuICAgICAgICBAJGVsLmZpbmQoJy5uZXdfbmFtZScpLnZhbCBcIlwiXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiI3tuYW1lfSBzYXZlZFwiXG4gICAgICBlcnJvcjogPT5cbiAgICAgICAgQCRlbC5maW5kKCcubmV3X2Zvcm0sIC5uZXcnKS50b2dnbGUoKVxuICAgICAgICBAJGVsLmZpbmQoJy5uZXdfbmFtZScpLnZhbCBcIlwiXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiUGxlYXNlIHRyeSBhZ2Fpbi4gRXJyb3Igc2F2aW5nLlwiXG5cbiAgICByZXR1cm4gZmFsc2VcblxuICAjIFZpZXdNYW5hZ2VyXG4gIGNsb3NlVmlld3M6IC0+XG4gICAgQGFzc2Vzc21lbnRzVmlldy5jbG9zZSgpXG4gICAgQGN1cnJpY3VsYUxpc3RWaWV3LmNsb3NlKClcblxuICBvbkNsb3NlOiAtPlxuICAgIEBjbG9zZVZpZXdzKClcbiIsInZhciBBc3Nlc3NtZW50c01lbnVWaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkFzc2Vzc21lbnRzTWVudVZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoQXNzZXNzbWVudHNNZW51Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQXNzZXNzbWVudHNNZW51VmlldygpIHtcbiAgICB0aGlzLm5ld1NhdmUgPSBiaW5kKHRoaXMubmV3U2F2ZSwgdGhpcyk7XG4gICAgdGhpcy5hZGRDdXJyaWN1bHVtID0gYmluZCh0aGlzLmFkZEN1cnJpY3VsdW0sIHRoaXMpO1xuICAgIHRoaXMuYWRkQXNzZXNzbWVudCA9IGJpbmQodGhpcy5hZGRBc3Nlc3NtZW50LCB0aGlzKTtcbiAgICB0aGlzLnJlbmRlciA9IGJpbmQodGhpcy5yZW5kZXIsIHRoaXMpO1xuICAgIHRoaXMuc3luY1RhYmxldHMgPSBiaW5kKHRoaXMuc3luY1RhYmxldHMsIHRoaXMpO1xuICAgIHJldHVybiBBc3Nlc3NtZW50c01lbnVWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgQXNzZXNzbWVudHNNZW51Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJBc3Nlc3NtZW50c01lbnVWaWV3XCI7XG5cbiAgQXNzZXNzbWVudHNNZW51Vmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdrZXlwcmVzcyAubmV3X25hbWUnOiAnbmV3U2F2ZScsXG4gICAgJ2NsaWNrIC5uZXdfc2F2ZSc6ICduZXdTYXZlJyxcbiAgICAnY2xpY2sgLm5ld19jYW5jZWwnOiAnbmV3VG9nZ2xlJyxcbiAgICAnY2xpY2sgLm5ldyc6ICduZXdUb2dnbGUnLFxuICAgICdjbGljayAuaW1wb3J0JzogJ2ltcG9ydCcsXG4gICAgJ2NsaWNrIC5hcGsnOiAnYXBrJyxcbiAgICAnY2xpY2sgLmdyb3Vwcyc6ICdnb3RvR3JvdXBzJyxcbiAgICAnY2xpY2sgLnVuaXZlcnNhbF91cGxvYWQnOiAndW5pdmVyc2FsVXBsb2FkJyxcbiAgICAnY2xpY2sgLnN5bmNfdGFibGV0cyc6ICdzeW5jVGFibGV0cycsXG4gICAgJ2NsaWNrIC5yZXN1bHRzJzogJ3Jlc3VsdHMnLFxuICAgICdjbGljayAuc2V0dGluZ3MnOiAnZWRpdEluUGxhY2UnLFxuICAgICdrZXl1cCAuZWRpdF9pbl9wbGFjZSc6ICdzYXZlSW5QbGFjZScsXG4gICAgJ2NoYW5nZSAuZWRpdF9pbl9wbGFjZSc6ICdzYXZlSW5QbGFjZSdcbiAgfTtcblxuICBBc3Nlc3NtZW50c01lbnVWaWV3LnByb3RvdHlwZS5zeW5jVGFibGV0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRhYmxldE1hbmFnZXIuc3luYygpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRzTWVudVZpZXcucHJvdG90eXBlLmVkaXRJblBsYWNlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldCwgYXR0cmlidXRlLCBjbGFzc2VzLCBpbnB1dCwgbWFyZ2lucztcbiAgICBpZiAoIVRhbmdlcmluZS51c2VyLmlzQWRtaW4oKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgIGF0dHJpYnV0ZSA9ICR0YXJnZXQuYXR0cihcImRhdGEtYXR0cmlidHVlXCIpO1xuICAgIHRoaXMub2xkVGFyZ2V0ID0gJHRhcmdldC5jbG9uZSgpO1xuICAgIGNsYXNzZXMgPSAkdGFyZ2V0LmF0dHIoXCJjbGFzc1wiKS5yZXBsYWNlKFwic2V0dGluZ3NcIiwgXCJcIik7XG4gICAgbWFyZ2lucyA9ICR0YXJnZXQuY3NzKFwibWFyZ2luXCIpO1xuICAgICR0YXJnZXQuYWZ0ZXIoXCI8aW5wdXQgdHlwZT0ndGV4dCcgc3R5bGU9J21hcmdpbjpcIiArIG1hcmdpbnMgKyBcIjsnIGRhdGEtYXR0cmlidXRlPSdcIiArIGF0dHJpYnV0ZSArIFwiJyBjbGFzcz0nZWRpdF9pbl9wbGFjZSBcIiArIGNsYXNzZXMgKyBcIicgdmFsdWU9J1wiICsgKF8uZXNjYXBlKCR0YXJnZXQuaHRtbCgpKSkgKyBcIic+XCIpO1xuICAgIGlucHV0ID0gJHRhcmdldC5uZXh0KCkuZm9jdXMoKTtcbiAgICByZXR1cm4gJHRhcmdldC5yZW1vdmUoKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50c01lbnVWaWV3LnByb3RvdHlwZS5zYXZlSW5QbGFjZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIGF0dHJpYnV0ZSwgdXBkYXRlZEF0dHJpYnV0ZXMsIHZhbHVlO1xuICAgIGlmICh0aGlzLmFscmVhZHlTYXZpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGV2ZW50LmtleUNvZGUpIHtcbiAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAyNykge1xuICAgICAgICAkKGV2ZW50LnRhcmdldCkuYWZ0ZXIodGhpcy5vbGRUYXJnZXQpLnJlbW92ZSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgIT09IDEzKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFscmVhZHlTYXZpbmcgPSB0cnVlO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgYXR0cmlidXRlID0gJHRhcmdldC5hdHRyKFwiZGF0YS1hdHRyaWJ1dGVcIik7XG4gICAgdmFsdWUgPSAkdGFyZ2V0LnZhbCgpO1xuICAgIHVwZGF0ZWRBdHRyaWJ1dGVzID0ge307XG4gICAgdXBkYXRlZEF0dHJpYnV0ZXNbYXR0cmlidXRlXSA9IHZhbHVlO1xuICAgIHJldHVybiBUYW5nZXJpbmUuc2V0dGluZ3Muc2F2ZSh1cGRhdGVkQXR0cmlidXRlcywge1xuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5hbHJlYWR5U2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgVXRpbHMudG9wQWxlcnQoXCJTYXZlZFwiKTtcbiAgICAgICAgICByZXR1cm4gJHRhcmdldC5hZnRlcihfdGhpcy5vbGRUYXJnZXQuaHRtbCh2YWx1ZSkpLnJlbW92ZSgpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyksXG4gICAgICBlcnJvcjogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5hbHJlYWR5U2F2aW5nID0gZmFsc2U7XG4gICAgICAgICAgVXRpbHMudG9wQWxlcnQoXCJTYXZlIGVycm9yXCIpO1xuICAgICAgICAgIHJldHVybiAkdGFyZ2V0LmFmdGVyKF90aGlzLm9sZFRhcmdldCkucmVtb3ZlKCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRzTWVudVZpZXcucHJvdG90eXBlLnJlc3VsdHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcImRhc2hib2FyZFwiLCB0cnVlKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50c01lbnVWaWV3LnByb3RvdHlwZS51bml2ZXJzYWxVcGxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVXRpbHMudW5pdmVyc2FsVXBsb2FkKCk7XG4gIH07XG5cbiAgQXNzZXNzbWVudHNNZW51Vmlldy5wcm90b3R5cGUuYXBrID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZVRyZWUubWFrZSh7XG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIHZhciBhO1xuICAgICAgICBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgIGEuaHJlZiA9IFRhbmdlcmluZS5zZXR0aW5ncy5jb25maWcuZ2V0KFwidHJlZVwiKTtcbiAgICAgICAgcmV0dXJuIFV0aWxzLnN0aWNreShcIjxoMT5BUEsgbGluazwvaDE+PHA+XCIgKyBhLmhvc3QgKyBcIi90cmVlL1wiICsgZGF0YS50b2tlbiArIFwiPC9wPlwiKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24oeGhyLCByZXNwb25zZSkge1xuICAgICAgICByZXR1cm4gVXRpbHMuc3RpY2t5KHJlc3BvbnNlLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRzTWVudVZpZXcucHJvdG90eXBlLmdvdG9Hcm91cHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcImdyb3Vwc1wiLCB0cnVlKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50c01lbnVWaWV3LnByb3RvdHlwZVtcImltcG9ydFwiXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwiaW1wb3J0XCIsIHRydWUpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRzTWVudVZpZXcucHJvdG90eXBlLmkxOG4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0ID0ge1xuICAgICAgXCJuZXdcIjogdChcIkFzc2Vzc21lbnRNZW51Vmlldy5idXR0b24ubmV3XCIpLFxuICAgICAgXCJpbXBvcnRcIjogdChcIkFzc2Vzc21lbnRNZW51Vmlldy5idXR0b24uaW1wb3J0XCIpLFxuICAgICAgYXBrOiB0KFwiQXNzZXNzbWVudE1lbnVWaWV3LmJ1dHRvbi5hcGtcIiksXG4gICAgICBncm91cHM6IHQoXCJBc3Nlc3NtZW50TWVudVZpZXcuYnV0dG9uLmdyb3Vwc1wiKSxcbiAgICAgIHVuaXZlcnNhbF91cGxvYWQ6IHQoXCJBc3Nlc3NtZW50TWVudVZpZXcuYnV0dG9uLnVuaXZlcnNhbF91cGxvYWRcIiksXG4gICAgICBzeW5jX3RhYmxldHM6IHQoXCJBc3Nlc3NtZW50TWVudVZpZXcuYnV0dG9uLnN5bmNfdGFibGV0c1wiKSxcbiAgICAgIHJlc3VsdHM6IHQoXCJBc3Nlc3NtZW50TWVudVZpZXcuYnV0dG9uLnJlc3VsdHNcIiksXG4gICAgICBzYXZlOiB0KFwiQXNzZXNzbWVudE1lbnVWaWV3LmJ1dHRvbi5zYXZlXCIpLFxuICAgICAgY2FuY2VsOiB0KFwiQXNzZXNzbWVudE1lbnVWaWV3LmJ1dHRvbi5jYW5jZWxcIiksXG4gICAgICBhc3Nlc3NtZW50OiB0KFwiQXNzZXNzbWVudE1lbnVWaWV3LmxhYmVsLmFzc2Vzc21lbnRcIiksXG4gICAgICBhc3Nlc3NtZW50czogdChcIkFzc2Vzc21lbnRNZW51Vmlldy5sYWJlbC5hc3Nlc3NtZW50c1wiKSxcbiAgICAgIGN1cnJpY3VsdW06IHQoXCJBc3Nlc3NtZW50TWVudVZpZXcubGFiZWwuY3VycmljdWx1bVwiKVxuICAgIH07XG4gIH07XG5cbiAgQXNzZXNzbWVudHNNZW51Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIga2V5LCB2YWx1ZTtcbiAgICB0aGlzLmkxOG4oKTtcbiAgICBmb3IgKGtleSBpbiBvcHRpb25zKSB7XG4gICAgICB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcbiAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLmFzc2Vzc21lbnRzLmVhY2goKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oYXNzZXNzbWVudCkge1xuICAgICAgICByZXR1cm4gYXNzZXNzbWVudC5vbihcIm5ld1wiLCBfdGhpcy5hZGRBc3Nlc3NtZW50KTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICAgIHRoaXMuY3VycmljdWxhLmVhY2goKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY3VycmljdWx1bSkge1xuICAgICAgICByZXR1cm4gY3VycmljdWx1bS5vbihcIm5ld1wiLCBfdGhpcy5hZGRDdXJyaWN1bHVtKTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICAgIHRoaXMuY3VycmljdWxhTGlzdFZpZXcgPSBuZXcgQ3VycmljdWxhTGlzdFZpZXcoe1xuICAgICAgXCJjdXJyaWN1bGFcIjogdGhpcy5jdXJyaWN1bGFcbiAgICB9KTtcbiAgICB0aGlzLmFzc2Vzc21lbnRzVmlldyA9IG5ldyBBc3Nlc3NtZW50c1ZpZXcoe1xuICAgICAgXCJhc3Nlc3NtZW50c1wiOiB0aGlzLmFzc2Vzc21lbnRzLFxuICAgICAgXCJwYXJlbnRcIjogdGhpc1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnVzZXJzTWVudVZpZXcgPSBuZXcgVXNlcnNNZW51VmlldztcbiAgfTtcblxuICBBc3Nlc3NtZW50c01lbnVWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXBrQnV0dG9uLCBjb250YWluZXJzLCBncm91cEhhbmRsZSwgZ3JvdXBzQnV0dG9uLCBodG1sLCBpbXBvcnRCdXR0b24sIGlzQWRtaW4sIG5ld0J1dHRvbiwgcmVzdWx0c0J1dHRvbiwgc3luY1RhYmxldHNCdXR0b24sIHVwbG9hZEJ1dHRvbjtcbiAgICBpc0FkbWluID0gVGFuZ2VyaW5lLnVzZXIuaXNBZG1pbigpO1xuICAgIG5ld0J1dHRvbiA9IFwiPGJ1dHRvbiBjbGFzcz0nbmV3IGNvbW1hbmQnPlwiICsgdGhpcy50ZXh0W1wibmV3XCJdICsgXCI8L2J1dHRvbj5cIjtcbiAgICBpbXBvcnRCdXR0b24gPSBcIjxidXR0b24gY2xhc3M9J2ltcG9ydCBjb21tYW5kJz5cIiArIHRoaXMudGV4dFtcImltcG9ydFwiXSArIFwiPC9idXR0b24+XCI7XG4gICAgYXBrQnV0dG9uID0gXCI8YnV0dG9uIGNsYXNzPSdhcGsgbmF2aWdhdGlvbic+XCIgKyB0aGlzLnRleHQuYXBrICsgXCI8L2J1dHRvbj5cIjtcbiAgICBncm91cHNCdXR0b24gPSBcIjxidXR0b24gY2xhc3M9J25hdmlnYXRpb24gZ3JvdXBzJz5cIiArIHRoaXMudGV4dC5ncm91cHMgKyBcIjwvYnV0dG9uPlwiO1xuICAgIHVwbG9hZEJ1dHRvbiA9IFwiPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCB1bml2ZXJzYWxfdXBsb2FkJz5cIiArIHRoaXMudGV4dC51bml2ZXJzYWxfdXBsb2FkICsgXCI8L2J1dHRvbj5cIjtcbiAgICBzeW5jVGFibGV0c0J1dHRvbiA9IFwiPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBzeW5jX3RhYmxldHMnPlwiICsgdGhpcy50ZXh0LnN5bmNfdGFibGV0cyArIFwiPC9idXR0b24+XCI7XG4gICAgcmVzdWx0c0J1dHRvbiA9IFwiPGJ1dHRvbiBjbGFzcz0nbmF2aWdhdGlvbiByZXN1bHRzJz5cIiArIHRoaXMudGV4dC5yZXN1bHRzICsgXCI8L2J1dHRvbj5cIjtcbiAgICBncm91cEhhbmRsZSA9IFwiPGgyIGNsYXNzPSdzZXR0aW5ncyBncmV5JyBkYXRhLWF0dHJpYnR1ZT0nZ3JvdXBIYW5kbGUnPlwiICsgKFRhbmdlcmluZS5zZXR0aW5ncy5nZXRFc2NhcGVkU3RyaW5nKCdncm91cEhhbmRsZScpIHx8IFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoJ2dyb3VwTmFtZScpKSArIFwiPC9oMj5cIjtcbiAgICBjb250YWluZXJzID0gW107XG4gICAgaWYgKHRoaXMuY3VycmljdWxhLmxlbmd0aCAhPT0gMCkge1xuICAgICAgY29udGFpbmVycy5wdXNoKFwiPHNlY3Rpb24gaWQ9J2N1cnJpY3VsYV9jb250YWluZXInIGNsYXNzPSdDdXJyaWN1bGFMaXN0Vmlldyc+PC9zZWN0aW9uPlwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMua2xhc3Nlcy5sZW5ndGggIT09IDApIHtcbiAgICAgIGNvbnRhaW5lcnMucHVzaChcIjxzZWN0aW9uIGlkPSdrbGFzc19jb250YWluZXInIGNsYXNzPSdLbGFzc2VzVmlldyc+PC9zZWN0aW9uPlwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudGVhY2hlcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICBjb250YWluZXJzLnB1c2goXCI8c2VjdGlvbiBpZD0ndGVhY2hlcnNfY29udGFpbmVyJyBjbGFzcz0nVGVhY2hlcnNWaWV3Jz48L3NlY3Rpb24+XCIpO1xuICAgIH1cbiAgICBjb250YWluZXJzLnB1c2goXCI8c2VjdGlvbiBpZD0ndXNlcnNfbWVudV9jb250YWluZXInIGNsYXNzPSdVc2Vyc01lbnVWaWV3Jz48L3NlY3Rpb24+XCIpO1xuICAgIGNvbnRhaW5lcnMucHVzaChcIjxzZWN0aW9uIGlkPSd3b3JrZmxvd19tZW51X2NvbnRhaW5lcicgY2xhc3M9J1dvcmtmbG93TWVudVZpZXcnPjwvc2VjdGlvbj5cIik7XG4gICAgaHRtbCA9IGdyb3Vwc0J1dHRvbiArIFwiIFwiICsgYXBrQnV0dG9uICsgXCIgXCIgKyByZXN1bHRzQnV0dG9uICsgXCIgXCIgKyBncm91cEhhbmRsZSArIFwiIDxzZWN0aW9uPiA8aDE+XCIgKyB0aGlzLnRleHQuYXNzZXNzbWVudHMgKyBcIjwvaDE+XCI7XG4gICAgaWYgKGlzQWRtaW4pIHtcbiAgICAgIGh0bWwgKz0gbmV3QnV0dG9uICsgXCIgXCIgKyBpbXBvcnRCdXR0b24gKyBcIiA8ZGl2IGNsYXNzPSduZXdfZm9ybSBjb25maXJtYXRpb24nPiA8ZGl2IGNsYXNzPSdtZW51X2JveCc+IDxpbnB1dCB0eXBlPSd0ZXh0JyBjbGFzcz0nbmV3X25hbWUnIHBsYWNlaG9sZGVyPSdOYW1lJz4gPHNlbGVjdCBpZD0nbmV3X3R5cGUnPiA8b3B0aW9uIHZhbHVlPSdhc3Nlc3NtZW50Jz5cIiArIHRoaXMudGV4dC5hc3Nlc3NtZW50ICsgXCI8L29wdGlvbj4gPG9wdGlvbiB2YWx1ZT0nY3VycmljdWx1bSc+XCIgKyB0aGlzLnRleHQuY3VycmljdWx1bSArIFwiPC9vcHRpb24+IDwvc2VsZWN0Pjxicj4gPGJ1dHRvbiBjbGFzcz0nbmV3X3NhdmUgY29tbWFuZCc+XCIgKyB0aGlzLnRleHQuc2F2ZSArIFwiPC9idXR0b24+IDxidXR0b24gY2xhc3M9J25ld19jYW5jZWwgY29tbWFuZCc+XCIgKyB0aGlzLnRleHQuY2FuY2VsICsgXCI8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGlkPSdhc3Nlc3NtZW50c19jb250YWluZXInPjwvZGl2PiA8L3NlY3Rpb24+IFwiICsgKGNvbnRhaW5lcnMuam9pbignJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBodG1sICs9IFwiPGRpdiBpZD0nYXNzZXNzbWVudHNfY29udGFpbmVyJz48L2Rpdj4gPC9zZWN0aW9uPlwiO1xuICAgIH1cbiAgICB0aGlzLiRlbC5odG1sKGh0bWwpO1xuICAgIHRoaXMuYXNzZXNzbWVudHNWaWV3LnNldEVsZW1lbnQodGhpcy4kZWwuZmluZChcIiNhc3Nlc3NtZW50c19jb250YWluZXJcIikpO1xuICAgIHRoaXMuYXNzZXNzbWVudHNWaWV3LnJlbmRlcigpO1xuICAgIHRoaXMuY3VycmljdWxhTGlzdFZpZXcuc2V0RWxlbWVudCh0aGlzLiRlbC5maW5kKFwiI2N1cnJpY3VsYV9jb250YWluZXJcIikpO1xuICAgIHRoaXMuY3VycmljdWxhTGlzdFZpZXcucmVuZGVyKCk7XG4gICAgdGhpcy51c2Vyc01lbnVWaWV3LnNldEVsZW1lbnQodGhpcy4kZWwuZmluZChcIiN1c2Vyc19tZW51X2NvbnRhaW5lclwiKSk7XG4gICAgdGhpcy51c2Vyc01lbnVWaWV3LnJlbmRlcigpO1xuICAgIGlmICh0aGlzLmtsYXNzZXMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5rbGFzc2VzVmlldyA9IG5ldyBLbGFzc2VzVmlldyh7XG4gICAgICAgIGtsYXNzZXM6IHRoaXMua2xhc3NlcyxcbiAgICAgICAgY3VycmljdWxhOiB0aGlzLmN1cnJpY3VsYSxcbiAgICAgICAgdGVhY2hlcnM6IHRoaXMudGVhY2hlcnNcbiAgICAgIH0pO1xuICAgICAgdGhpcy5rbGFzc2VzVmlldy5zZXRFbGVtZW50KHRoaXMuJGVsLmZpbmQoXCIja2xhc3NfY29udGFpbmVyXCIpKTtcbiAgICAgIHRoaXMua2xhc3Nlc1ZpZXcucmVuZGVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIja2xhc3NfY29udGFpbmVyXCIpLnJlbW92ZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy50ZWFjaGVycy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnRlYWNoZXJzVmlldyA9IG5ldyBUZWFjaGVyc1ZpZXcoe1xuICAgICAgICB0ZWFjaGVyczogdGhpcy50ZWFjaGVycyxcbiAgICAgICAgdXNlcnM6IHRoaXMudXNlcnNcbiAgICAgIH0pO1xuICAgICAgdGhpcy50ZWFjaGVyc1ZpZXcuc2V0RWxlbWVudCh0aGlzLiRlbC5maW5kKFwiI3RlYWNoZXJzX2NvbnRhaW5lclwiKSk7XG4gICAgICB0aGlzLnRlYWNoZXJzVmlldy5yZW5kZXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWwuZmluZChcIiN0ZWFjaGVyc19jb250YWluZXJcIikucmVtb3ZlKCk7XG4gICAgfVxuICAgIGlmIChUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0KCdzaG93V29ya2Zsb3dzJykgPT09IHRydWUpIHtcbiAgICAgIHRoaXMud29ya2Zsb3dNZW51VmlldyA9IG5ldyBXb3JrZmxvd01lbnVWaWV3KHtcbiAgICAgICAgd29ya2Zsb3dzOiB0aGlzLndvcmtmbG93cyxcbiAgICAgICAgZmVlZGJhY2tzOiB0aGlzLmZlZWRiYWNrc1xuICAgICAgfSk7XG4gICAgICB0aGlzLndvcmtmbG93TWVudVZpZXcuc2V0RWxlbWVudCh0aGlzLiRlbC5maW5kKFwiI3dvcmtmbG93X21lbnVfY29udGFpbmVyXCIpKTtcbiAgICAgIHRoaXMud29ya2Zsb3dNZW51Vmlldy5yZW5kZXIoKTtcbiAgICB9XG4gICAgdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgQXNzZXNzbWVudHNNZW51Vmlldy5wcm90b3R5cGUuYWRkQXNzZXNzbWVudCA9IGZ1bmN0aW9uKG5ld09uZSkge1xuICAgIHRoaXMuYXNzZXNzbWVudHMuYWRkKG5ld09uZSk7XG4gICAgcmV0dXJuIG5ld09uZS5vbihcIm5ld1wiLCB0aGlzLmFkZEFzc2Vzc21lbnQpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRzTWVudVZpZXcucHJvdG90eXBlLmFkZEN1cnJpY3VsdW0gPSBmdW5jdGlvbihuZXdPbmUpIHtcbiAgICB0aGlzLmN1cnJpY3VsYS5hZGQobmV3T25lKTtcbiAgICByZXR1cm4gbmV3T25lLm9uKFwibmV3XCIsIHRoaXMuYWRkQ3VycmljdWx1bSk7XG4gIH07XG5cbiAgQXNzZXNzbWVudHNNZW51Vmlldy5wcm90b3R5cGUubmV3VG9nZ2xlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwuZmluZCgnLm5ld19mb3JtLCAubmV3JykudG9nZ2xlKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRzTWVudVZpZXcucHJvdG90eXBlLm5ld1NhdmUgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBjYWxsYmFjaywgbmFtZSwgbmV3SWQsIG5ld09iamVjdCwgbmV3VHlwZTtcbiAgICBpZiAoZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiICYmIGV2ZW50LndoaWNoICE9PSAxMykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIG5hbWUgPSB0aGlzLiRlbC5maW5kKCcubmV3X25hbWUnKS52YWwoKTtcbiAgICBuZXdUeXBlID0gdGhpcy4kZWwuZmluZChcIiNuZXdfdHlwZSBvcHRpb246c2VsZWN0ZWRcIikudmFsKCk7XG4gICAgbmV3SWQgPSBVdGlscy5ndWlkKCk7XG4gICAgaWYgKG5hbWUubGVuZ3RoID09PSAwKSB7XG4gICAgICBVdGlscy5taWRBbGVydChcIjxzcGFuIGNsYXNzPSdlcnJvcic+Q291bGQgbm90IHNhdmUgPGltZyBzcmM9J2ltYWdlcy9pY29uX2Nsb3NlLnBuZycgY2xhc3M9J2NsZWFyX21lc3NhZ2UnPjwvc3Bhbj5cIik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChuZXdUeXBlID09PSBcImFzc2Vzc21lbnRcIikge1xuICAgICAgbmV3T2JqZWN0ID0gbmV3IEFzc2Vzc21lbnQoe1xuICAgICAgICBcIm5hbWVcIjogbmFtZSxcbiAgICAgICAgXCJfaWRcIjogbmV3SWQsXG4gICAgICAgIFwiYXNzZXNzbWVudElkXCI6IG5ld0lkLFxuICAgICAgICBcImFyY2hpdmVkXCI6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIGNhbGxiYWNrID0gdGhpcy5hZGRBc3Nlc3NtZW50O1xuICAgIH0gZWxzZSBpZiAobmV3VHlwZSA9PT0gXCJjdXJyaWN1bHVtXCIpIHtcbiAgICAgIG5ld09iamVjdCA9IG5ldyBDdXJyaWN1bHVtKHtcbiAgICAgICAgXCJuYW1lXCI6IG5hbWUsXG4gICAgICAgIFwiX2lkXCI6IG5ld0lkLFxuICAgICAgICBcImN1cnJpY3VsdW1JZFwiOiBuZXdJZFxuICAgICAgfSk7XG4gICAgICBjYWxsYmFjayA9IHRoaXMuYWRkQ3VycmljdWx1bTtcbiAgICB9XG4gICAgbmV3T2JqZWN0LnNhdmUobnVsbCwge1xuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjYWxsYmFjayhuZXdPYmplY3QpO1xuICAgICAgICAgIF90aGlzLiRlbC5maW5kKCcubmV3X2Zvcm0sIC5uZXcnKS50b2dnbGUoKTtcbiAgICAgICAgICBfdGhpcy4kZWwuZmluZCgnLm5ld19uYW1lJykudmFsKFwiXCIpO1xuICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChuYW1lICsgXCIgc2F2ZWRcIik7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSxcbiAgICAgIGVycm9yOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLiRlbC5maW5kKCcubmV3X2Zvcm0sIC5uZXcnKS50b2dnbGUoKTtcbiAgICAgICAgICBfdGhpcy4kZWwuZmluZCgnLm5ld19uYW1lJykudmFsKFwiXCIpO1xuICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIlBsZWFzZSB0cnkgYWdhaW4uIEVycm9yIHNhdmluZy5cIik7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBBc3Nlc3NtZW50c01lbnVWaWV3LnByb3RvdHlwZS5jbG9zZVZpZXdzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5hc3Nlc3NtZW50c1ZpZXcuY2xvc2UoKTtcbiAgICByZXR1cm4gdGhpcy5jdXJyaWN1bGFMaXN0Vmlldy5jbG9zZSgpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRzTWVudVZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9zZVZpZXdzKCk7XG4gIH07XG5cbiAgcmV0dXJuIEFzc2Vzc21lbnRzTWVudVZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBBc3Nlc3NtZW50RWRpdFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogJ2Fzc2Vzc21lbnRfZWRpdF92aWV3J1xuXG4gIGV2ZW50cyA6XG4gICAgJ2NsaWNrICNhcmNoaXZlX2J1dHRvbnMgaW5wdXQnIDogJ3NhdmUnXG4gICAgJ2NsaWNrIC5iYWNrJyAgICAgICAgICAgICAgICAgIDogJ2dvQmFjaydcbiAgICAnY2xpY2sgLm5ld19zdWJ0ZXN0X2J1dHRvbicgICAgOiAndG9nZ2xlTmV3U3VidGVzdEZvcm0nXG4gICAgJ2NsaWNrIC5uZXdfc3VidGVzdF9jYW5jZWwnICAgIDogJ3RvZ2dsZU5ld1N1YnRlc3RGb3JtJ1xuXG4gICAgJ2tleXByZXNzICNuZXdfc3VidGVzdF9uYW1lJyAgIDogJ3NhdmVOZXdTdWJ0ZXN0J1xuICAgICdjbGljayAubmV3X3N1YnRlc3Rfc2F2ZScgICAgICA6ICdzYXZlTmV3U3VidGVzdCdcblxuICAgICdjaGFuZ2UgI2Jhc2ljIGlucHV0JyAgICAgICAgICA6ICdzYXZlJ1xuICAgICdjbGljayAuc2F2ZScgICAgICAgICAgICAgICAgICA6ICdzYXZlJ1xuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBtb2RlbCA9IG9wdGlvbnMubW9kZWxcbiAgICBAc3VidGVzdExpc3RFZGl0VmlldyA9IG5ldyBTdWJ0ZXN0TGlzdEVkaXRWaWV3XG4gICAgICBcImFzc2Vzc21lbnRcIiA6IEBtb2RlbFxuXG4gICAgQG1vZGVsLnN1YnRlc3RzLm9uIFwiY2hhbmdlIHJlbW92ZVwiLCBAc3VidGVzdExpc3RFZGl0Vmlldy5yZW5kZXJcbiAgICBAbW9kZWwuc3VidGVzdHMub24gXCJhbGxcIiwgQHVwZGF0ZVN1YnRlc3RMZWdlbmRcblxuICBzYXZlOiA9PlxuICAgIGlmIEB1cGRhdGVNb2RlbCgpXG4gICAgICBAbW9kZWwuc2F2ZSBudWxsLFxuICAgICAgICBzdWNjZXNzOiA9PlxuICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiI3tAbW9kZWwuZ2V0KFwibmFtZVwiKX0gc2F2ZWRcIiBcbiAgICAgICAgZXJyb3I6ID0+XG4gICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJBc3Nlc3NtZW50IHNhdmUgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uXCIgXG5cbiAgZ29CYWNrOiAtPiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiYXNzZXNzbWVudHNcIiwgdHJ1ZVxuXG4gIHVwZGF0ZU1vZGVsOiA9PlxuXG4gICAgI1xuICAgICMgcGFyc2UgYWNjZXB0YWJsZSByYW5kb20gc2VxdWVuY2VzXG4gICAgI1xuXG4gICAgc3VidGVzdENvdW50ID0gQG1vZGVsLnN1YnRlc3RzLm1vZGVscy5sZW5ndGhcblxuICAgICMgcmVtb3ZlIGV2ZXJ5dGhpbmcgZXhjZXB0IG51bWJlcnMsIGNvbW1hcyBhbmQgbmV3IGxpbmVzXG4gICAgc2VxdWVuY2VzVmFsdWUgPSBAJGVsLmZpbmQoXCIjc2VxdWVuY2VzXCIpLnZhbCgpLnJlcGxhY2UoL1teMC05LFxcbl0vZyxcIlwiKVxuICAgIHNlcXVlbmNlcyA9IHNlcXVlbmNlc1ZhbHVlLnNwbGl0KFwiXFxuXCIpXG5cbiAgICAjIHBhcnNlIHN0cmluZ3MgdG8gbnVtYmVycyBhbmQgY29sbGVjdCBlcnJvcnNcbiAgICBmb3Igc2VxdWVuY2UsIGkgaW4gc2VxdWVuY2VzXG5cbiAgICAgIHNlcXVlbmNlID0gc2VxdWVuY2Uuc3BsaXQoXCIsXCIpXG4gICAgICBmb3IgZWxlbWVudCwgaiBpbiBzZXF1ZW5jZVxuICAgICAgICBzZXF1ZW5jZVtqXSA9IHBhcnNlSW50KGVsZW1lbnQpXG4gICAgICAgIHJhbmdlRXJyb3IgPSB0cnVlIGlmIHNlcXVlbmNlW2pdIDwgMCBvciBzZXF1ZW5jZVtqXSA+PSBzdWJ0ZXN0Q291bnRcbiAgICAgICAgZW1wdHlFcnJvciA9IHRydWUgaWYgaXNOYU4oc2VxdWVuY2Vbal0pXG4gICAgICBcbiAgICAgIHNlcXVlbmNlc1tpXSA9IHNlcXVlbmNlXG4gICAgICBcbiAgICAgICMgZGV0ZWN0IGVycm9yc1xuICAgICAgdG9vTWFueUVycm9yID0gdHJ1ZSBpZiBzZXF1ZW5jZS5sZW5ndGggPiBzdWJ0ZXN0Q291bnRcbiAgICAgIHRvb0Zld0Vycm9yICA9IHRydWUgaWYgc2VxdWVuY2UubGVuZ3RoIDwgc3VidGVzdENvdW50XG4gICAgICBkb3VibGVzRXJyb3IgPSB0cnVlIGlmIHNlcXVlbmNlLmxlbmd0aCAhPSBfLnVuaXEoc2VxdWVuY2UpLmxlbmd0aFxuICAgIFxuICAgICMgc2hvdyBlcnJvcnMgaWYgdGhleSBleGlzdCBhbmQgc2VxdWVuY2VzIGV4aXN0XG4gICAgaWYgbm90IF8uaXNFbXB0eSBfLnJlamVjdCggXy5mbGF0dGVuKHNlcXVlbmNlcyksIChlKSAtPiByZXR1cm4gaXNOYU4oZSkpICMgcmVtb3ZlIHVucGFyc2FibGUgZW1wdGllcywgZG9uJ3QgXy5jb21wYWN0LiB3aWxsIHJlbW92ZSAwc1xuICAgICAgc2VxdWVuY2VFcnJvcnMgPSBbXVxuICAgICAgaWYgZW1wdHlFcnJvciAgIHRoZW4gc2VxdWVuY2VFcnJvcnMucHVzaCBcIlNvbWUgc2VxdWVuY2VzIGNvbnRhaW4gZW1wdHkgdmFsdWVzLlwiXG4gICAgICBpZiByYW5nZUVycm9yICAgdGhlbiBzZXF1ZW5jZUVycm9ycy5wdXNoIFwiU29tZSBudW1iZXJzIGRvIG5vdCByZWZlcmVuY2UgYSBzdWJ0ZXN0IGZyb20gdGhlIGxlZ2VuZC5cIlxuICAgICAgaWYgdG9vTWFueUVycm9yIHRoZW4gc2VxdWVuY2VFcnJvcnMucHVzaCBcIlNvbWUgc2VxdWVuY2VzIGFyZSBsb25nZXIgdGhhbiB0aGUgdG90YWwgbnVtYmVyIG9mIGFsbCBzdWJ0ZXN0cy5cIlxuICAgICAgaWYgdG9vRmV3RXJyb3IgIHRoZW4gc2VxdWVuY2VFcnJvcnMucHVzaCBcIlNvbWUgc2VxdWVuY2VzIGFyZSBzaG9ydGVyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiBhbGwgc3VidGVzdHMuXCJcbiAgICAgIGlmIGRvdWJsZXNFcnJvciB0aGVuIHNlcXVlbmNlRXJyb3JzLnB1c2ggXCJTb21lIHNlcXVlbmNlcyBjb250YWluIGRvdWJsZXMuXCJcblxuICAgICAgaWYgc2VxdWVuY2VFcnJvcnMubGVuZ3RoID09IDBcbiAgICAgICAgIyBpZiB0aGVyZSdzIG5vIGVycm9ycywgY2xlYW4gdXAgdGhlIHRleHRhcmVhIGNvbnRlbnRcbiAgICAgICAgdmFsaWRhdGVkU2VxdWVuY2VzID0gKHNlcXVlbmNlLmpvaW4oXCIsIFwiKSBmb3Igc2VxdWVuY2UgaW4gc2VxdWVuY2VzKS5qb2luKFwiXFxuXCIpXG4gICAgICAgIEAkZWwuZmluZChcIiNzZXF1ZW5jZXNcIikudmFsKHZhbGlkYXRlZFNlcXVlbmNlcylcbiAgICAgIGVsc2UgIyBpZiB0aGVyZSdzIGVycm9ycywgdGhleSBjYW4gc3RpbGwgc2F2ZS4gSnVzdCBzaG93IGEgd2FybmluZ1xuICAgICAgICBhbGVydCBcIldhcm5pbmdcXG5cXG4je3NlcXVlbmNlRXJyb3JzLmpvaW4oXCJcXG5cIil9XCJcblxuICAgICMgbm90aGluZyByZXNlbWJsaW5nIGEgdmFsaWQgc2VxdWVuY2Ugd2FzIGZvdW5kXG4gICAgZWxzZVxuICAgICAgQCRlbC5maW5kKFwiI3NlcXVlbmNlc1wiKS52YWwoXCJcIikgIyBjbGVhbiB0ZXh0IGFyZWFcblxuICAgIEBtb2RlbC5zZXRcbiAgICAgIHNlcXVlbmNlcyA6IHNlcXVlbmNlc1xuICAgICAgYXJjaGl2ZWQgIDogQCRlbC5maW5kKFwiI2FyY2hpdmVfYnV0dG9ucyBpbnB1dDpjaGVja2VkXCIpLnZhbCgpID09IFwidHJ1ZVwiXG4gICAgICBuYW1lICAgICAgOiBAJGVsLmZpbmQoXCIjYXNzZXNzbWVudF9uYW1lXCIpLnZhbCgpXG4gICAgICBkS2V5ICAgICAgOiBAJGVsLmZpbmQoXCIjYXNzZXNzbWVudF9kX2tleVwiKS52YWwoKVxuICAgICAgYXNzZXNzbWVudElkIDogQG1vZGVsLmlkXG4gICAgcmV0dXJuIHRydWVcblxuICB0b2dnbGVOZXdTdWJ0ZXN0Rm9ybTogKGV2ZW50KSAtPlxuICAgIEAkZWwuZmluZChcIi5uZXdfc3VidGVzdF9mb3JtLCAubmV3X3N1YnRlc3RfYnV0dG9uXCIpLnRvZ2dsZSgpXG5cbiAgICBAJGVsLmZpbmQoXCIjbmV3X3N1YnRlc3RfbmFtZVwiKS52YWwoXCJcIilcbiAgICBAJGVsLmZpbmQoXCIjc3VidGVzdF90eXBlX3NlbGVjdFwiKS52YWwoXCJub25lXCIpXG5cbiAgICBmYWxzZVxuXG4gIHNhdmVOZXdTdWJ0ZXN0OiAoZXZlbnQpID0+XG4gICAgXG4gICAgaWYgZXZlbnQudHlwZSAhPSBcImNsaWNrXCIgJiYgZXZlbnQud2hpY2ggIT0gMTNcbiAgICAgIHJldHVybiB0cnVlXG4gICAgXG4gICAgIyBpZiBubyBzdWJ0ZXN0IHR5cGUgc2VsZWN0ZWQsIHNob3cgZXJyb3JcbiAgICBpZiBAJGVsLmZpbmQoXCIjc3VidGVzdF90eXBlX3NlbGVjdCBvcHRpb246c2VsZWN0ZWRcIikudmFsKCkgPT0gXCJub25lXCJcbiAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiUGxlYXNlIHNlbGVjdCBhIHN1YnRlc3QgdHlwZVwiXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICBcbiAgICAjIGdlbmVyYWwgdGVtcGxhdGVcbiAgICBuZXdBdHRyaWJ1dGVzID0gVGFuZ2VyaW5lLnRlbXBsYXRlcy5nZXQoXCJzdWJ0ZXN0XCIpXG4gICAgXG4gICAgIyBwcm90b3R5cGUgdGVtcGxhdGVcbiAgICBwcm90b3R5cGVUZW1wbGF0ZSA9IFRhbmdlcmluZS50ZW1wbGF0ZXMuZ2V0KFwicHJvdG90eXBlc1wiKVtAJGVsLmZpbmQoXCIjc3VidGVzdF90eXBlX3NlbGVjdFwiKS52YWwoKV1cbiAgICBcbiAgICAjIGJpdCBtb3JlIHNwZWNpZmljIHRlbXBsYXRlXG4gICAgdXNlVHlwZSA9IEAkZWwuZmluZChcIiNzdWJ0ZXN0X3R5cGVfc2VsZWN0IDpzZWxlY3RlZFwiKS5hdHRyICdkYXRhLXRlbXBsYXRlJ1xuICAgIHVzZVR5cGVUZW1wbGF0ZSA9IFRhbmdlcmluZS50ZW1wbGF0ZXMuZ2V0KFwic3VidGVzdFRlbXBsYXRlc1wiKVtAJGVsLmZpbmQoXCIjc3VidGVzdF90eXBlX3NlbGVjdFwiKS52YWwoKV1bdXNlVHlwZV1cblxuICAgIG5ld0F0dHJpYnV0ZXMgPSAkLmV4dGVuZCBuZXdBdHRyaWJ1dGVzLCBwcm90b3R5cGVUZW1wbGF0ZVxuICAgIG5ld0F0dHJpYnV0ZXMgPSAkLmV4dGVuZCBuZXdBdHRyaWJ1dGVzLCB1c2VUeXBlVGVtcGxhdGVcbiAgICBuZXdBdHRyaWJ1dGVzID0gJC5leHRlbmQgbmV3QXR0cmlidXRlcyxcbiAgICAgIG5hbWUgICAgICAgICA6IEAkZWwuZmluZChcIiNuZXdfc3VidGVzdF9uYW1lXCIpLnZhbCgpXG4gICAgICBhc3Nlc3NtZW50SWQgOiBAbW9kZWwuaWRcbiAgICAgIG9yZGVyICAgICAgICA6IEBtb2RlbC5zdWJ0ZXN0cy5sZW5ndGhcbiAgICBuZXdTdWJ0ZXN0ID0gQG1vZGVsLnN1YnRlc3RzLmNyZWF0ZSBuZXdBdHRyaWJ1dGVzXG4gICAgQHRvZ2dsZU5ld1N1YnRlc3RGb3JtKClcbiAgICByZXR1cm4gZmFsc2VcbiAgXG4gIHJlbmRlcjogPT5cbiAgICBzZXF1ZW5jZXMgPSBcIlwiXG4gICAgaWYgQG1vZGVsLmhhcyhcInNlcXVlbmNlc1wiKSBcbiAgICAgIHNlcXVlbmNlcyA9IEBtb2RlbC5nZXQoXCJzZXF1ZW5jZXNcIilcbiAgICAgIHNlcXVlbmNlcyA9IHNlcXVlbmNlcy5qb2luKFwiXFxuXCIpXG5cbiAgICAgIGlmIF8uaXNBcnJheShzZXF1ZW5jZXMpXG4gICAgICAgIGZvciBzZXF1ZW5jZXMsIGkgaW4gc2VxdWVuY2VzIFxuICAgICAgICAgIHNlcXVlbmNlc1tpXSA9IHNlcXVlbmNlcy5qb2luKFwiLCBcIilcblxuICAgIHN1YnRlc3RMZWdlbmQgPSBAdXBkYXRlU3VidGVzdExlZ2VuZCgpXG5cbiAgICBhcmNoID0gQG1vZGVsLmdldCgnYXJjaGl2ZWQnKVxuICAgIGFyY2hpdmVDaGVja2VkICAgID0gaWYgKGFyY2ggPT0gdHJ1ZSBvciBhcmNoID09ICd0cnVlJykgdGhlbiBcImNoZWNrZWRcIiBlbHNlIFwiXCJcbiAgICBub3RBcmNoaXZlQ2hlY2tlZCA9IGlmIGFyY2hpdmVDaGVja2VkIHRoZW4gXCJcIiBlbHNlIFwiY2hlY2tlZFwiXG5cbiAgICAjIGxpc3Qgb2YgXCJ0ZW1wbGF0ZXNcIlxuICAgIHN1YnRlc3RUeXBlU2VsZWN0ID0gXCI8c2VsZWN0IGlkPSdzdWJ0ZXN0X3R5cGVfc2VsZWN0Jz5cbiAgICAgIDxvcHRpb24gdmFsdWU9J25vbmUnIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz5QbGVhc2Ugc2VsZWN0IGEgc3VidGVzdCB0eXBlPC9vcHRpb24+XCJcbiAgICBmb3Iga2V5LCB2YWx1ZSBvZiBUYW5nZXJpbmUudGVtcGxhdGVzLmdldChcInN1YnRlc3RUZW1wbGF0ZXNcIilcbiAgICAgIHN1YnRlc3RUeXBlU2VsZWN0ICs9IFwiPG9wdGdyb3VwIGxhYmVsPScje2tleS5odW1hbml6ZSgpfSc+XCJcbiAgICAgIGZvciBzdWJLZXksIHN1YlZhbHVlIG9mIHZhbHVlXG4gICAgICAgIHN1YnRlc3RUeXBlU2VsZWN0ICs9IFwiPG9wdGlvbiB2YWx1ZT0nI3trZXl9JyBkYXRhLXRlbXBsYXRlPScje3N1YktleX0nPiN7c3ViS2V5fTwvb3B0aW9uPlwiXG4gICAgICBzdWJ0ZXN0VHlwZVNlbGVjdCArPSBcIjwvb3B0Z3JvdXA+XCJcbiAgICBzdWJ0ZXN0VHlwZVNlbGVjdCArPSBcIjwvc2VsZWN0PlwiXG5cbiAgICBcbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgIDxidXR0b24gY2xhc3M9J2JhY2sgbmF2aWdhdGlvbic+QmFjazwvYnV0dG9uPlxuICAgICAgICA8aDE+QXNzZXNzbWVudCBCdWlsZGVyPC9oMT5cbiAgICAgIDxkaXYgaWQ9J2Jhc2ljJz5cbiAgICAgICAgPGxhYmVsIGZvcj0nYXNzZXNzbWVudF9uYW1lJz5OYW1lPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IGlkPSdhc3Nlc3NtZW50X25hbWUnIHZhbHVlPScje0Btb2RlbC5lc2NhcGUoXCJuYW1lXCIpfSc+XG5cbiAgICAgICAgPGxhYmVsIGZvcj0nYXNzZXNzbWVudF9kX2tleScgdGl0bGU9J1RoaXMga2V5IGlzIHVzZWQgdG8gaW1wb3J0IHRoZSBhc3Nlc3NtZW50IGZyb20gYSB0YWJsZXQuJz5Eb3dubG9hZCBLZXk8L2xhYmVsPjxicj5cbiAgICAgICAgPGRpdiBjbGFzcz0naW5mb19ib3gnPiN7QG1vZGVsLmlkLnN1YnN0cigtNSw1KX08L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8bGFiZWwgdGl0bGU9J09ubHkgYWN0aXZlIGFzc2Vzc21lbnRzIHdpbGwgYmUgZGlzcGxheWVkIGluIHRoZSBtYWluIGFzc2Vzc21lbnQgbGlzdC4nPlN0YXR1czwvbGFiZWw+PGJyPlxuICAgICAgPGRpdiBpZD0nYXJjaGl2ZV9idXR0b25zJyBjbGFzcz0nYnV0dG9uc2V0Jz5cbiAgICAgICAgPGlucHV0IHR5cGU9J3JhZGlvJyBpZD0nYXJjaGl2ZV9mYWxzZScgbmFtZT0nYXJjaGl2ZScgdmFsdWU9J2ZhbHNlJyAje25vdEFyY2hpdmVDaGVja2VkfT48bGFiZWwgZm9yPSdhcmNoaXZlX2ZhbHNlJz5BY3RpdmU8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgdHlwZT0ncmFkaW8nIGlkPSdhcmNoaXZlX3RydWUnICBuYW1lPSdhcmNoaXZlJyB2YWx1ZT0ndHJ1ZScgICN7YXJjaGl2ZUNoZWNrZWR9PjxsYWJlbCBmb3I9J2FyY2hpdmVfdHJ1ZSc+QXJjaGl2ZWQ8L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8aDI+U3VidGVzdHM8L2gyPlxuICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICA8ZGl2PlxuICAgICAgICA8dWwgaWQ9J3N1YnRlc3RfbGlzdCc+XG4gICAgICAgIDwvdWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YnV0dG9uIGNsYXNzPSduZXdfc3VidGVzdF9idXR0b24gY29tbWFuZCc+QWRkIFN1YnRlc3Q8L2J1dHRvbj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbmV3X3N1YnRlc3RfZm9ybSBjb25maXJtYXRpb24nPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cbiAgICAgICAgICAgIDxoMj5OZXcgU3VidGVzdDwvaDI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdzdWJ0ZXN0X3R5cGVfc2VsZWN0Jz5UeXBlPC9sYWJlbD48YnI+XG4gICAgICAgICAgICAje3N1YnRlc3RUeXBlU2VsZWN0fTxicj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J25ld19zdWJ0ZXN0X25hbWUnPk5hbWU8L2xhYmVsPjxicj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBpZD0nbmV3X3N1YnRlc3RfbmFtZSc+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSduZXdfc3VidGVzdF9zYXZlIGNvbW1hbmQnPkFkZDwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSduZXdfc3VidGVzdF9jYW5jZWwgY29tbWFuZCc+Q2FuY2VsPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8aDI+T3B0aW9uczwvaDI+XG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxsYWJlbCBmb3I9J3NlcXVlbmNlcycgdGl0bGU9J1RoaXMgaXMgYSBsaXN0IG9mIGFjY2VwdGFibGUgb3JkZXJzIG9mIHN1YnRlc3RzLCB3aGljaCB3aWxsIGJlIHJhbmRvbWx5IHNlbGVjdGVkIGVhY2ggdGltZSBhbiBhc3Nlc3NtZW50IGlzIHJ1bi4gU3VidGVzdCBpbmRpY2llcyBhcmUgc2VwYXJhdGVkIGJ5IGNvbW1hcywgbmV3IGxpbmVzIHNlcGFyYXRlIHNlcXVlbmNlcy4gJz5SYW5kb20gU2VxdWVuY2VzPC9sYWJlbD5cbiAgICAgICAgPGRpdiBpZD0nc3VidGVzdF9sZWdlbmQnPiN7c3VidGVzdExlZ2VuZH08L2Rpdj5cbiAgICAgICAgPHRleHRhcmVhIGlkPSdzZXF1ZW5jZXMnPiN7c2VxdWVuY2VzfTwvdGV4dGFyZWE+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxidXR0b24gY2xhc3M9J3NhdmUgY29tbWFuZCc+U2F2ZTwvYnV0dG9uPlxuICAgICAgXCJcblxuICAgICMgcmVuZGVyIG5ldyBzdWJ0ZXN0IHZpZXdzXG4gICAgQHN1YnRlc3RMaXN0RWRpdFZpZXcuc2V0RWxlbWVudChAJGVsLmZpbmQoXCIjc3VidGVzdF9saXN0XCIpKVxuICAgIEBzdWJ0ZXN0TGlzdEVkaXRWaWV3LnJlbmRlcigpXG4gICAgXG4gICAgIyBtYWtlIGl0IHNvcnRhYmxlXG4gICAgQCRlbC5maW5kKFwiI3N1YnRlc3RfbGlzdFwiKS5zb3J0YWJsZVxuICAgICAgaGFuZGxlIDogJy5zb3J0YWJsZV9oYW5kbGUnXG4gICAgICBzdGFydDogKGV2ZW50LCB1aSkgLT4gdWkuaXRlbS5hZGRDbGFzcyBcImRyYWdfc2hhZG93XCJcbiAgICAgIHN0b3A6ICAoZXZlbnQsIHVpKSAtPiB1aS5pdGVtLnJlbW92ZUNsYXNzIFwiZHJhZ19zaGFkb3dcIlxuICAgICAgdXBkYXRlIDogKGV2ZW50LCB1aSkgPT5cbiAgICAgICAgZm9yIGlkLCBpIGluICgkKGxpKS5hdHRyKFwiZGF0YS1pZFwiKSBmb3IgbGkgaW4gQCRlbC5maW5kKFwiI3N1YnRlc3RfbGlzdCBsaVwiKSlcbiAgICAgICAgICBAbW9kZWwuc3VidGVzdHMuZ2V0KGlkKS5zZXQoe1wib3JkZXJcIjppfSx7c2lsZW50OnRydWV9KS5zYXZlKG51bGwse3NpbGVudDp0cnVlfSlcbiAgICAgICAgQG1vZGVsLnN1YnRlc3RzLnNvcnQoKVxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgXG4gIHVwZGF0ZVN1YnRlc3RMZWdlbmQ6ID0+XG4gICAgc3VidGVzdExlZ2VuZCA9IFwiXCJcbiAgICBAbW9kZWwuc3VidGVzdHMuZWFjaCAoc3VidGVzdCwgaSkgLT5cbiAgICAgIHN1YnRlc3RMZWdlbmQgKz0gXCI8ZGl2IGNsYXNzPSdzbWFsbF9ncmV5Jz4je2l9IC0gI3tzdWJ0ZXN0LmdldChcIm5hbWVcIil9PC9kaXY+PGJyPlwiXG4gICAgJHN1YnRlc3RXcmFwcGVyID0gQCRlbC5maW5kKFwiI3N1YnRlc3RfbGVnZW5kXCIpXG4gICAgJHN1YnRlc3RXcmFwcGVyLmh0bWwoc3VidGVzdExlZ2VuZCkgaWYgJHN1YnRlc3RXcmFwcGVyLmxlbmd0aCAhPSAwXG4gICAgcmV0dXJuIHN1YnRlc3RMZWdlbmRcblxuICBvbkNsb3NlOiAtPlxuICAgIEBzdWJ0ZXN0TGlzdEVkaXRWaWV3LmNsb3NlKClcbiAgICBcbiIsInZhciBBc3Nlc3NtZW50RWRpdFZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuQXNzZXNzbWVudEVkaXRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEFzc2Vzc21lbnRFZGl0Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQXNzZXNzbWVudEVkaXRWaWV3KCkge1xuICAgIHRoaXMudXBkYXRlU3VidGVzdExlZ2VuZCA9IGJpbmQodGhpcy51cGRhdGVTdWJ0ZXN0TGVnZW5kLCB0aGlzKTtcbiAgICB0aGlzLnJlbmRlciA9IGJpbmQodGhpcy5yZW5kZXIsIHRoaXMpO1xuICAgIHRoaXMuc2F2ZU5ld1N1YnRlc3QgPSBiaW5kKHRoaXMuc2F2ZU5ld1N1YnRlc3QsIHRoaXMpO1xuICAgIHRoaXMudXBkYXRlTW9kZWwgPSBiaW5kKHRoaXMudXBkYXRlTW9kZWwsIHRoaXMpO1xuICAgIHRoaXMuc2F2ZSA9IGJpbmQodGhpcy5zYXZlLCB0aGlzKTtcbiAgICByZXR1cm4gQXNzZXNzbWVudEVkaXRWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgQXNzZXNzbWVudEVkaXRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSAnYXNzZXNzbWVudF9lZGl0X3ZpZXcnO1xuXG4gIEFzc2Vzc21lbnRFZGl0Vmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdjbGljayAjYXJjaGl2ZV9idXR0b25zIGlucHV0JzogJ3NhdmUnLFxuICAgICdjbGljayAuYmFjayc6ICdnb0JhY2snLFxuICAgICdjbGljayAubmV3X3N1YnRlc3RfYnV0dG9uJzogJ3RvZ2dsZU5ld1N1YnRlc3RGb3JtJyxcbiAgICAnY2xpY2sgLm5ld19zdWJ0ZXN0X2NhbmNlbCc6ICd0b2dnbGVOZXdTdWJ0ZXN0Rm9ybScsXG4gICAgJ2tleXByZXNzICNuZXdfc3VidGVzdF9uYW1lJzogJ3NhdmVOZXdTdWJ0ZXN0JyxcbiAgICAnY2xpY2sgLm5ld19zdWJ0ZXN0X3NhdmUnOiAnc2F2ZU5ld1N1YnRlc3QnLFxuICAgICdjaGFuZ2UgI2Jhc2ljIGlucHV0JzogJ3NhdmUnLFxuICAgICdjbGljayAuc2F2ZSc6ICdzYXZlJ1xuICB9O1xuXG4gIEFzc2Vzc21lbnRFZGl0Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICB0aGlzLnN1YnRlc3RMaXN0RWRpdFZpZXcgPSBuZXcgU3VidGVzdExpc3RFZGl0Vmlldyh7XG4gICAgICBcImFzc2Vzc21lbnRcIjogdGhpcy5tb2RlbFxuICAgIH0pO1xuICAgIHRoaXMubW9kZWwuc3VidGVzdHMub24oXCJjaGFuZ2UgcmVtb3ZlXCIsIHRoaXMuc3VidGVzdExpc3RFZGl0Vmlldy5yZW5kZXIpO1xuICAgIHJldHVybiB0aGlzLm1vZGVsLnN1YnRlc3RzLm9uKFwiYWxsXCIsIHRoaXMudXBkYXRlU3VidGVzdExlZ2VuZCk7XG4gIH07XG5cbiAgQXNzZXNzbWVudEVkaXRWaWV3LnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudXBkYXRlTW9kZWwoKSkge1xuICAgICAgcmV0dXJuIHRoaXMubW9kZWwuc2F2ZShudWxsLCB7XG4gICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydCgoX3RoaXMubW9kZWwuZ2V0KFwibmFtZVwiKSkgKyBcIiBzYXZlZFwiKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSxcbiAgICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIkFzc2Vzc21lbnQgc2F2ZSBlcnJvci4gUGxlYXNlIHRyeSBhZ2Fpbi5cIik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBBc3Nlc3NtZW50RWRpdFZpZXcucHJvdG90eXBlLmdvQmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwiYXNzZXNzbWVudHNcIiwgdHJ1ZSk7XG4gIH07XG5cbiAgQXNzZXNzbWVudEVkaXRWaWV3LnByb3RvdHlwZS51cGRhdGVNb2RlbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkb3VibGVzRXJyb3IsIGVsZW1lbnQsIGVtcHR5RXJyb3IsIGksIGosIGssIGwsIGxlbiwgbGVuMSwgcmFuZ2VFcnJvciwgc2VxdWVuY2UsIHNlcXVlbmNlRXJyb3JzLCBzZXF1ZW5jZXMsIHNlcXVlbmNlc1ZhbHVlLCBzdWJ0ZXN0Q291bnQsIHRvb0Zld0Vycm9yLCB0b29NYW55RXJyb3IsIHZhbGlkYXRlZFNlcXVlbmNlcztcbiAgICBzdWJ0ZXN0Q291bnQgPSB0aGlzLm1vZGVsLnN1YnRlc3RzLm1vZGVscy5sZW5ndGg7XG4gICAgc2VxdWVuY2VzVmFsdWUgPSB0aGlzLiRlbC5maW5kKFwiI3NlcXVlbmNlc1wiKS52YWwoKS5yZXBsYWNlKC9bXjAtOSxcXG5dL2csIFwiXCIpO1xuICAgIHNlcXVlbmNlcyA9IHNlcXVlbmNlc1ZhbHVlLnNwbGl0KFwiXFxuXCIpO1xuICAgIGZvciAoaSA9IGsgPSAwLCBsZW4gPSBzZXF1ZW5jZXMubGVuZ3RoOyBrIDwgbGVuOyBpID0gKytrKSB7XG4gICAgICBzZXF1ZW5jZSA9IHNlcXVlbmNlc1tpXTtcbiAgICAgIHNlcXVlbmNlID0gc2VxdWVuY2Uuc3BsaXQoXCIsXCIpO1xuICAgICAgZm9yIChqID0gbCA9IDAsIGxlbjEgPSBzZXF1ZW5jZS5sZW5ndGg7IGwgPCBsZW4xOyBqID0gKytsKSB7XG4gICAgICAgIGVsZW1lbnQgPSBzZXF1ZW5jZVtqXTtcbiAgICAgICAgc2VxdWVuY2Vbal0gPSBwYXJzZUludChlbGVtZW50KTtcbiAgICAgICAgaWYgKHNlcXVlbmNlW2pdIDwgMCB8fCBzZXF1ZW5jZVtqXSA+PSBzdWJ0ZXN0Q291bnQpIHtcbiAgICAgICAgICByYW5nZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOYU4oc2VxdWVuY2Vbal0pKSB7XG4gICAgICAgICAgZW1wdHlFcnJvciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNlcXVlbmNlc1tpXSA9IHNlcXVlbmNlO1xuICAgICAgaWYgKHNlcXVlbmNlLmxlbmd0aCA+IHN1YnRlc3RDb3VudCkge1xuICAgICAgICB0b29NYW55RXJyb3IgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHNlcXVlbmNlLmxlbmd0aCA8IHN1YnRlc3RDb3VudCkge1xuICAgICAgICB0b29GZXdFcnJvciA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoc2VxdWVuY2UubGVuZ3RoICE9PSBfLnVuaXEoc2VxdWVuY2UpLmxlbmd0aCkge1xuICAgICAgICBkb3VibGVzRXJyb3IgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIV8uaXNFbXB0eShfLnJlamVjdChfLmZsYXR0ZW4oc2VxdWVuY2VzKSwgZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIGlzTmFOKGUpO1xuICAgIH0pKSkge1xuICAgICAgc2VxdWVuY2VFcnJvcnMgPSBbXTtcbiAgICAgIGlmIChlbXB0eUVycm9yKSB7XG4gICAgICAgIHNlcXVlbmNlRXJyb3JzLnB1c2goXCJTb21lIHNlcXVlbmNlcyBjb250YWluIGVtcHR5IHZhbHVlcy5cIik7XG4gICAgICB9XG4gICAgICBpZiAocmFuZ2VFcnJvcikge1xuICAgICAgICBzZXF1ZW5jZUVycm9ycy5wdXNoKFwiU29tZSBudW1iZXJzIGRvIG5vdCByZWZlcmVuY2UgYSBzdWJ0ZXN0IGZyb20gdGhlIGxlZ2VuZC5cIik7XG4gICAgICB9XG4gICAgICBpZiAodG9vTWFueUVycm9yKSB7XG4gICAgICAgIHNlcXVlbmNlRXJyb3JzLnB1c2goXCJTb21lIHNlcXVlbmNlcyBhcmUgbG9uZ2VyIHRoYW4gdGhlIHRvdGFsIG51bWJlciBvZiBhbGwgc3VidGVzdHMuXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHRvb0Zld0Vycm9yKSB7XG4gICAgICAgIHNlcXVlbmNlRXJyb3JzLnB1c2goXCJTb21lIHNlcXVlbmNlcyBhcmUgc2hvcnRlciB0aGFuIHRoZSB0b3RhbCBudW1iZXIgb2YgYWxsIHN1YnRlc3RzLlwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChkb3VibGVzRXJyb3IpIHtcbiAgICAgICAgc2VxdWVuY2VFcnJvcnMucHVzaChcIlNvbWUgc2VxdWVuY2VzIGNvbnRhaW4gZG91Ymxlcy5cIik7XG4gICAgICB9XG4gICAgICBpZiAoc2VxdWVuY2VFcnJvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhbGlkYXRlZFNlcXVlbmNlcyA9ICgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGxlbjIsIG0sIHJlc3VsdHM7XG4gICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgIGZvciAobSA9IDAsIGxlbjIgPSBzZXF1ZW5jZXMubGVuZ3RoOyBtIDwgbGVuMjsgbSsrKSB7XG4gICAgICAgICAgICBzZXF1ZW5jZSA9IHNlcXVlbmNlc1ttXTtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChzZXF1ZW5jZS5qb2luKFwiLCBcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfSkoKSkuam9pbihcIlxcblwiKTtcbiAgICAgICAgdGhpcy4kZWwuZmluZChcIiNzZXF1ZW5jZXNcIikudmFsKHZhbGlkYXRlZFNlcXVlbmNlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGVydChcIldhcm5pbmdcXG5cXG5cIiArIChzZXF1ZW5jZUVycm9ycy5qb2luKFwiXFxuXCIpKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIjc2VxdWVuY2VzXCIpLnZhbChcIlwiKTtcbiAgICB9XG4gICAgdGhpcy5tb2RlbC5zZXQoe1xuICAgICAgc2VxdWVuY2VzOiBzZXF1ZW5jZXMsXG4gICAgICBhcmNoaXZlZDogdGhpcy4kZWwuZmluZChcIiNhcmNoaXZlX2J1dHRvbnMgaW5wdXQ6Y2hlY2tlZFwiKS52YWwoKSA9PT0gXCJ0cnVlXCIsXG4gICAgICBuYW1lOiB0aGlzLiRlbC5maW5kKFwiI2Fzc2Vzc21lbnRfbmFtZVwiKS52YWwoKSxcbiAgICAgIGRLZXk6IHRoaXMuJGVsLmZpbmQoXCIjYXNzZXNzbWVudF9kX2tleVwiKS52YWwoKSxcbiAgICAgIGFzc2Vzc21lbnRJZDogdGhpcy5tb2RlbC5pZFxuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRFZGl0Vmlldy5wcm90b3R5cGUudG9nZ2xlTmV3U3VidGVzdEZvcm0gPSBmdW5jdGlvbihldmVudCkge1xuICAgIHRoaXMuJGVsLmZpbmQoXCIubmV3X3N1YnRlc3RfZm9ybSwgLm5ld19zdWJ0ZXN0X2J1dHRvblwiKS50b2dnbGUoKTtcbiAgICB0aGlzLiRlbC5maW5kKFwiI25ld19zdWJ0ZXN0X25hbWVcIikudmFsKFwiXCIpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIjc3VidGVzdF90eXBlX3NlbGVjdFwiKS52YWwoXCJub25lXCIpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBBc3Nlc3NtZW50RWRpdFZpZXcucHJvdG90eXBlLnNhdmVOZXdTdWJ0ZXN0ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgbmV3QXR0cmlidXRlcywgbmV3U3VidGVzdCwgcHJvdG90eXBlVGVtcGxhdGUsIHVzZVR5cGUsIHVzZVR5cGVUZW1wbGF0ZTtcbiAgICBpZiAoZXZlbnQudHlwZSAhPT0gXCJjbGlja1wiICYmIGV2ZW50LndoaWNoICE9PSAxMykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh0aGlzLiRlbC5maW5kKFwiI3N1YnRlc3RfdHlwZV9zZWxlY3Qgb3B0aW9uOnNlbGVjdGVkXCIpLnZhbCgpID09PSBcIm5vbmVcIikge1xuICAgICAgVXRpbHMubWlkQWxlcnQoXCJQbGVhc2Ugc2VsZWN0IGEgc3VidGVzdCB0eXBlXCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBuZXdBdHRyaWJ1dGVzID0gVGFuZ2VyaW5lLnRlbXBsYXRlcy5nZXQoXCJzdWJ0ZXN0XCIpO1xuICAgIHByb3RvdHlwZVRlbXBsYXRlID0gVGFuZ2VyaW5lLnRlbXBsYXRlcy5nZXQoXCJwcm90b3R5cGVzXCIpW3RoaXMuJGVsLmZpbmQoXCIjc3VidGVzdF90eXBlX3NlbGVjdFwiKS52YWwoKV07XG4gICAgdXNlVHlwZSA9IHRoaXMuJGVsLmZpbmQoXCIjc3VidGVzdF90eXBlX3NlbGVjdCA6c2VsZWN0ZWRcIikuYXR0cignZGF0YS10ZW1wbGF0ZScpO1xuICAgIHVzZVR5cGVUZW1wbGF0ZSA9IFRhbmdlcmluZS50ZW1wbGF0ZXMuZ2V0KFwic3VidGVzdFRlbXBsYXRlc1wiKVt0aGlzLiRlbC5maW5kKFwiI3N1YnRlc3RfdHlwZV9zZWxlY3RcIikudmFsKCldW3VzZVR5cGVdO1xuICAgIG5ld0F0dHJpYnV0ZXMgPSAkLmV4dGVuZChuZXdBdHRyaWJ1dGVzLCBwcm90b3R5cGVUZW1wbGF0ZSk7XG4gICAgbmV3QXR0cmlidXRlcyA9ICQuZXh0ZW5kKG5ld0F0dHJpYnV0ZXMsIHVzZVR5cGVUZW1wbGF0ZSk7XG4gICAgbmV3QXR0cmlidXRlcyA9ICQuZXh0ZW5kKG5ld0F0dHJpYnV0ZXMsIHtcbiAgICAgIG5hbWU6IHRoaXMuJGVsLmZpbmQoXCIjbmV3X3N1YnRlc3RfbmFtZVwiKS52YWwoKSxcbiAgICAgIGFzc2Vzc21lbnRJZDogdGhpcy5tb2RlbC5pZCxcbiAgICAgIG9yZGVyOiB0aGlzLm1vZGVsLnN1YnRlc3RzLmxlbmd0aFxuICAgIH0pO1xuICAgIG5ld1N1YnRlc3QgPSB0aGlzLm1vZGVsLnN1YnRlc3RzLmNyZWF0ZShuZXdBdHRyaWJ1dGVzKTtcbiAgICB0aGlzLnRvZ2dsZU5ld1N1YnRlc3RGb3JtKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRFZGl0Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyY2gsIGFyY2hpdmVDaGVja2VkLCBpLCBrLCBrZXksIGxlbiwgbm90QXJjaGl2ZUNoZWNrZWQsIHJlZiwgc2VxdWVuY2VzLCBzdWJLZXksIHN1YlZhbHVlLCBzdWJ0ZXN0TGVnZW5kLCBzdWJ0ZXN0VHlwZVNlbGVjdCwgdmFsdWU7XG4gICAgc2VxdWVuY2VzID0gXCJcIjtcbiAgICBpZiAodGhpcy5tb2RlbC5oYXMoXCJzZXF1ZW5jZXNcIikpIHtcbiAgICAgIHNlcXVlbmNlcyA9IHRoaXMubW9kZWwuZ2V0KFwic2VxdWVuY2VzXCIpO1xuICAgICAgc2VxdWVuY2VzID0gc2VxdWVuY2VzLmpvaW4oXCJcXG5cIik7XG4gICAgICBpZiAoXy5pc0FycmF5KHNlcXVlbmNlcykpIHtcbiAgICAgICAgZm9yIChpID0gayA9IDAsIGxlbiA9IHNlcXVlbmNlcy5sZW5ndGg7IGsgPCBsZW47IGkgPSArK2spIHtcbiAgICAgICAgICBzZXF1ZW5jZXMgPSBzZXF1ZW5jZXNbaV07XG4gICAgICAgICAgc2VxdWVuY2VzW2ldID0gc2VxdWVuY2VzLmpvaW4oXCIsIFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzdWJ0ZXN0TGVnZW5kID0gdGhpcy51cGRhdGVTdWJ0ZXN0TGVnZW5kKCk7XG4gICAgYXJjaCA9IHRoaXMubW9kZWwuZ2V0KCdhcmNoaXZlZCcpO1xuICAgIGFyY2hpdmVDaGVja2VkID0gKGFyY2ggPT09IHRydWUgfHwgYXJjaCA9PT0gJ3RydWUnKSA/IFwiY2hlY2tlZFwiIDogXCJcIjtcbiAgICBub3RBcmNoaXZlQ2hlY2tlZCA9IGFyY2hpdmVDaGVja2VkID8gXCJcIiA6IFwiY2hlY2tlZFwiO1xuICAgIHN1YnRlc3RUeXBlU2VsZWN0ID0gXCI8c2VsZWN0IGlkPSdzdWJ0ZXN0X3R5cGVfc2VsZWN0Jz4gPG9wdGlvbiB2YWx1ZT0nbm9uZScgZGlzYWJsZWQ9J2Rpc2FibGVkJyBzZWxlY3RlZD0nc2VsZWN0ZWQnPlBsZWFzZSBzZWxlY3QgYSBzdWJ0ZXN0IHR5cGU8L29wdGlvbj5cIjtcbiAgICByZWYgPSBUYW5nZXJpbmUudGVtcGxhdGVzLmdldChcInN1YnRlc3RUZW1wbGF0ZXNcIik7XG4gICAgZm9yIChrZXkgaW4gcmVmKSB7XG4gICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgc3VidGVzdFR5cGVTZWxlY3QgKz0gXCI8b3B0Z3JvdXAgbGFiZWw9J1wiICsgKGtleS5odW1hbml6ZSgpKSArIFwiJz5cIjtcbiAgICAgIGZvciAoc3ViS2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHN1YlZhbHVlID0gdmFsdWVbc3ViS2V5XTtcbiAgICAgICAgc3VidGVzdFR5cGVTZWxlY3QgKz0gXCI8b3B0aW9uIHZhbHVlPSdcIiArIGtleSArIFwiJyBkYXRhLXRlbXBsYXRlPSdcIiArIHN1YktleSArIFwiJz5cIiArIHN1YktleSArIFwiPC9vcHRpb24+XCI7XG4gICAgICB9XG4gICAgICBzdWJ0ZXN0VHlwZVNlbGVjdCArPSBcIjwvb3B0Z3JvdXA+XCI7XG4gICAgfVxuICAgIHN1YnRlc3RUeXBlU2VsZWN0ICs9IFwiPC9zZWxlY3Q+XCI7XG4gICAgdGhpcy4kZWwuaHRtbChcIjxidXR0b24gY2xhc3M9J2JhY2sgbmF2aWdhdGlvbic+QmFjazwvYnV0dG9uPiA8aDE+QXNzZXNzbWVudCBCdWlsZGVyPC9oMT4gPGRpdiBpZD0nYmFzaWMnPiA8bGFiZWwgZm9yPSdhc3Nlc3NtZW50X25hbWUnPk5hbWU8L2xhYmVsPiA8aW5wdXQgaWQ9J2Fzc2Vzc21lbnRfbmFtZScgdmFsdWU9J1wiICsgKHRoaXMubW9kZWwuZXNjYXBlKFwibmFtZVwiKSkgKyBcIic+IDxsYWJlbCBmb3I9J2Fzc2Vzc21lbnRfZF9rZXknIHRpdGxlPSdUaGlzIGtleSBpcyB1c2VkIHRvIGltcG9ydCB0aGUgYXNzZXNzbWVudCBmcm9tIGEgdGFibGV0Lic+RG93bmxvYWQgS2V5PC9sYWJlbD48YnI+IDxkaXYgY2xhc3M9J2luZm9fYm94Jz5cIiArICh0aGlzLm1vZGVsLmlkLnN1YnN0cigtNSwgNSkpICsgXCI8L2Rpdj4gPC9kaXY+IDxsYWJlbCB0aXRsZT0nT25seSBhY3RpdmUgYXNzZXNzbWVudHMgd2lsbCBiZSBkaXNwbGF5ZWQgaW4gdGhlIG1haW4gYXNzZXNzbWVudCBsaXN0Lic+U3RhdHVzPC9sYWJlbD48YnI+IDxkaXYgaWQ9J2FyY2hpdmVfYnV0dG9ucycgY2xhc3M9J2J1dHRvbnNldCc+IDxpbnB1dCB0eXBlPSdyYWRpbycgaWQ9J2FyY2hpdmVfZmFsc2UnIG5hbWU9J2FyY2hpdmUnIHZhbHVlPSdmYWxzZScgXCIgKyBub3RBcmNoaXZlQ2hlY2tlZCArIFwiPjxsYWJlbCBmb3I9J2FyY2hpdmVfZmFsc2UnPkFjdGl2ZTwvbGFiZWw+IDxpbnB1dCB0eXBlPSdyYWRpbycgaWQ9J2FyY2hpdmVfdHJ1ZScgIG5hbWU9J2FyY2hpdmUnIHZhbHVlPSd0cnVlJyAgXCIgKyBhcmNoaXZlQ2hlY2tlZCArIFwiPjxsYWJlbCBmb3I9J2FyY2hpdmVfdHJ1ZSc+QXJjaGl2ZWQ8L2xhYmVsPiA8L2Rpdj4gPGgyPlN1YnRlc3RzPC9oMj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8ZGl2PiA8dWwgaWQ9J3N1YnRlc3RfbGlzdCc+IDwvdWw+IDwvZGl2PiA8YnV0dG9uIGNsYXNzPSduZXdfc3VidGVzdF9idXR0b24gY29tbWFuZCc+QWRkIFN1YnRlc3Q8L2J1dHRvbj4gPGRpdiBjbGFzcz0nbmV3X3N1YnRlc3RfZm9ybSBjb25maXJtYXRpb24nPiA8ZGl2IGNsYXNzPSdtZW51X2JveCc+IDxoMj5OZXcgU3VidGVzdDwvaDI+IDxsYWJlbCBmb3I9J3N1YnRlc3RfdHlwZV9zZWxlY3QnPlR5cGU8L2xhYmVsPjxicj4gXCIgKyBzdWJ0ZXN0VHlwZVNlbGVjdCArIFwiPGJyPiA8bGFiZWwgZm9yPSduZXdfc3VidGVzdF9uYW1lJz5OYW1lPC9sYWJlbD48YnI+IDxpbnB1dCB0eXBlPSd0ZXh0JyBpZD0nbmV3X3N1YnRlc3RfbmFtZSc+IDxidXR0b24gY2xhc3M9J25ld19zdWJ0ZXN0X3NhdmUgY29tbWFuZCc+QWRkPC9idXR0b24+IDxidXR0b24gY2xhc3M9J25ld19zdWJ0ZXN0X2NhbmNlbCBjb21tYW5kJz5DYW5jZWw8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGgyPk9wdGlvbnM8L2gyPiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3NlcXVlbmNlcycgdGl0bGU9J1RoaXMgaXMgYSBsaXN0IG9mIGFjY2VwdGFibGUgb3JkZXJzIG9mIHN1YnRlc3RzLCB3aGljaCB3aWxsIGJlIHJhbmRvbWx5IHNlbGVjdGVkIGVhY2ggdGltZSBhbiBhc3Nlc3NtZW50IGlzIHJ1bi4gU3VidGVzdCBpbmRpY2llcyBhcmUgc2VwYXJhdGVkIGJ5IGNvbW1hcywgbmV3IGxpbmVzIHNlcGFyYXRlIHNlcXVlbmNlcy4gJz5SYW5kb20gU2VxdWVuY2VzPC9sYWJlbD4gPGRpdiBpZD0nc3VidGVzdF9sZWdlbmQnPlwiICsgc3VidGVzdExlZ2VuZCArIFwiPC9kaXY+IDx0ZXh0YXJlYSBpZD0nc2VxdWVuY2VzJz5cIiArIHNlcXVlbmNlcyArIFwiPC90ZXh0YXJlYT4gPC9kaXY+IDxidXR0b24gY2xhc3M9J3NhdmUgY29tbWFuZCc+U2F2ZTwvYnV0dG9uPlwiKTtcbiAgICB0aGlzLnN1YnRlc3RMaXN0RWRpdFZpZXcuc2V0RWxlbWVudCh0aGlzLiRlbC5maW5kKFwiI3N1YnRlc3RfbGlzdFwiKSk7XG4gICAgdGhpcy5zdWJ0ZXN0TGlzdEVkaXRWaWV3LnJlbmRlcigpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIjc3VidGVzdF9saXN0XCIpLnNvcnRhYmxlKHtcbiAgICAgIGhhbmRsZTogJy5zb3J0YWJsZV9oYW5kbGUnLFxuICAgICAgc3RhcnQ6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICByZXR1cm4gdWkuaXRlbS5hZGRDbGFzcyhcImRyYWdfc2hhZG93XCIpO1xuICAgICAgfSxcbiAgICAgIHN0b3A6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICByZXR1cm4gdWkuaXRlbS5yZW1vdmVDbGFzcyhcImRyYWdfc2hhZG93XCIpO1xuICAgICAgfSxcbiAgICAgIHVwZGF0ZTogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAgICAgICB2YXIgaWQsIGwsIGxlbjEsIGxpLCByZWYxO1xuICAgICAgICAgIHJlZjEgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbGVuMSwgbSwgcmVmMSwgcmVzdWx0cztcbiAgICAgICAgICAgIHJlZjEgPSB0aGlzLiRlbC5maW5kKFwiI3N1YnRlc3RfbGlzdCBsaVwiKTtcbiAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobSA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgbSA8IGxlbjE7IG0rKykge1xuICAgICAgICAgICAgICBsaSA9IHJlZjFbbV07XG4gICAgICAgICAgICAgIHJlc3VsdHMucHVzaCgkKGxpKS5hdHRyKFwiZGF0YS1pZFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICB9KS5jYWxsKF90aGlzKTtcbiAgICAgICAgICBmb3IgKGkgPSBsID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBsIDwgbGVuMTsgaSA9ICsrbCkge1xuICAgICAgICAgICAgaWQgPSByZWYxW2ldO1xuICAgICAgICAgICAgX3RoaXMubW9kZWwuc3VidGVzdHMuZ2V0KGlkKS5zZXQoe1xuICAgICAgICAgICAgICBcIm9yZGVyXCI6IGlcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgc2lsZW50OiB0cnVlXG4gICAgICAgICAgICB9KS5zYXZlKG51bGwsIHtcbiAgICAgICAgICAgICAgc2lsZW50OiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF90aGlzLm1vZGVsLnN1YnRlc3RzLnNvcnQoKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRFZGl0Vmlldy5wcm90b3R5cGUudXBkYXRlU3VidGVzdExlZ2VuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkc3VidGVzdFdyYXBwZXIsIHN1YnRlc3RMZWdlbmQ7XG4gICAgc3VidGVzdExlZ2VuZCA9IFwiXCI7XG4gICAgdGhpcy5tb2RlbC5zdWJ0ZXN0cy5lYWNoKGZ1bmN0aW9uKHN1YnRlc3QsIGkpIHtcbiAgICAgIHJldHVybiBzdWJ0ZXN0TGVnZW5kICs9IFwiPGRpdiBjbGFzcz0nc21hbGxfZ3JleSc+XCIgKyBpICsgXCIgLSBcIiArIChzdWJ0ZXN0LmdldChcIm5hbWVcIikpICsgXCI8L2Rpdj48YnI+XCI7XG4gICAgfSk7XG4gICAgJHN1YnRlc3RXcmFwcGVyID0gdGhpcy4kZWwuZmluZChcIiNzdWJ0ZXN0X2xlZ2VuZFwiKTtcbiAgICBpZiAoJHN1YnRlc3RXcmFwcGVyLmxlbmd0aCAhPT0gMCkge1xuICAgICAgJHN1YnRlc3RXcmFwcGVyLmh0bWwoc3VidGVzdExlZ2VuZCk7XG4gICAgfVxuICAgIHJldHVybiBzdWJ0ZXN0TGVnZW5kO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRFZGl0Vmlldy5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnN1YnRlc3RMaXN0RWRpdFZpZXcuY2xvc2UoKTtcbiAgfTtcblxuICByZXR1cm4gQXNzZXNzbWVudEVkaXRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgQXNzZXNzbWVudFJ1blZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJBc3Nlc3NtZW50UnVuVmlld1wiXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgICBAYWJvcnRBc3Nlc3NtZW50ID0gZmFsc2VcbiAgICBAaW5kZXggPSAwXG4gICAgQG1vZGVsID0gb3B0aW9ucy5tb2RlbFxuICAgIEBvcmRlck1hcCA9IFtdXG4gICAgQGVuYWJsZUNvcnJlY3Rpb25zID0gZmFsc2UgICMgdG9nZ2xlZCBpZiB1c2VyIGhpdHMgdGhlIGJhY2sgYnV0dG9uLlxuXG4gICAgVGFuZ2VyaW5lLnRlbXBEYXRhID0ge31cblxuICAgIEByZW5kZXJlZCA9IHtcbiAgICAgIFwiYXNzZXNzbWVudFwiIDogZmFsc2VcbiAgICAgIFwic3VidGVzdFwiIDogZmFsc2VcbiAgICB9XG5cbiAgICBUYW5nZXJpbmUuYWN0aXZpdHkgPSBcImFzc2Vzc21lbnQgcnVuXCJcbiAgICBAc3VidGVzdFZpZXdzID0gW11cbiAgICBAbW9kZWwuc3VidGVzdHMuc29ydCgpXG4gICAgQG1vZGVsLnN1YnRlc3RzLmVhY2ggKG1vZGVsKSA9PlxuICAgICAgQHN1YnRlc3RWaWV3cy5wdXNoIG5ldyBTdWJ0ZXN0UnVuVmlldyBcbiAgICAgICAgbW9kZWwgIDogbW9kZWxcbiAgICAgICAgcGFyZW50IDogQFxuXG4gICAgaGFzU2VxdWVuY2VzID0gQG1vZGVsLmhhcyhcInNlcXVlbmNlc1wiKSAmJiBub3QgXy5pc0VtcHR5KF8uY29tcGFjdChfLmZsYXR0ZW4oQG1vZGVsLmdldChcInNlcXVlbmNlc1wiKSkpKVxuXG4gICAgaWYgaGFzU2VxdWVuY2VzXG4gICAgICBzZXF1ZW5jZXMgPSBAbW9kZWwuZ2V0KFwic2VxdWVuY2VzXCIpXG5cbiAgICAgICMgZ2V0IG9yIGluaXRpYWxpemUgc2VxdWVuY2UgcGxhY2VzXG4gICAgICBwbGFjZXMgPSBUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0KFwic2VxdWVuY2VQbGFjZXNcIilcbiAgICAgIHBsYWNlcyA9IHt9IHVubGVzcyBwbGFjZXM/XG4gICAgICBwbGFjZXNbQG1vZGVsLmlkXSA9IDAgdW5sZXNzIHBsYWNlc1tAbW9kZWwuaWRdP1xuICAgICAgXG4gICAgICBpZiBwbGFjZXNbQG1vZGVsLmlkXSA8IHNlcXVlbmNlcy5sZW5ndGggLSAxXG4gICAgICAgIHBsYWNlc1tAbW9kZWwuaWRdKytcbiAgICAgIGVsc2VcbiAgICAgICAgcGxhY2VzW0Btb2RlbC5pZF0gPSAwXG5cbiAgICAgIFRhbmdlcmluZS5zZXR0aW5ncy5zYXZlKFwic2VxdWVuY2VQbGFjZXNcIiwgcGxhY2VzKVxuXG4gICAgICBAb3JkZXJNYXAgPSBzZXF1ZW5jZXNbcGxhY2VzW0Btb2RlbC5pZF1dXG4gICAgICBAb3JkZXJNYXBbQG9yZGVyTWFwLmxlbmd0aF0gPSBAc3VidGVzdFZpZXdzLmxlbmd0aFxuICAgIGVsc2VcbiAgICAgIGZvciBpIGluIFswLi5Ac3VidGVzdFZpZXdzLmxlbmd0aF1cbiAgICAgICAgQG9yZGVyTWFwW2ldID0gaVxuXG4gICAgQHJlc3VsdCA9IG5ldyBSZXN1bHRcbiAgICAgIGFzc2Vzc21lbnRJZCAgIDogQG1vZGVsLmlkXG4gICAgICBhc3Nlc3NtZW50TmFtZSA6IEBtb2RlbC5nZXQgXCJuYW1lXCJcbiAgICAgIGJsYW5rICAgICAgICAgIDogdHJ1ZVxuXG4gICAgaWYgaGFzU2VxdWVuY2VzIHRoZW4gQHJlc3VsdC5zZXQoXCJvcmRlcl9tYXBcIiA6IEBvcmRlck1hcClcblxuICAgIHJlc3VsdFZpZXcgPSBuZXcgUmVzdWx0Vmlld1xuICAgICAgbW9kZWwgICAgICAgICAgOiBAcmVzdWx0XG4gICAgICBhc3Nlc3NtZW50ICAgICA6IEBtb2RlbFxuICAgICAgYXNzZXNzbWVudFZpZXcgOiBAXG4gICAgQHN1YnRlc3RWaWV3cy5wdXNoIHJlc3VsdFZpZXdcblxuICByZW5kZXI6IC0+XG4gICAgY3VycmVudFZpZXcgPSBAc3VidGVzdFZpZXdzW0BvcmRlck1hcFtAaW5kZXhdXVxuICAgIFxuICAgIGlmIEBtb2RlbC5zdWJ0ZXN0cy5sZW5ndGggPT0gMFxuICAgICAgQCRlbC5odG1sIFwiPGgxPk9vcHMuLi48L2gxPjxwPlxcXCIje0Btb2RlbC5nZXQgJ25hbWUnfVxcXCIgaXMgYmxhbmsuIFBlcmhhcHMgeW91IG1lYW50IHRvIGFkZCBzb21lIHN1YnRlc3RzLjwvcD5cIlxuICAgICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG4gICAgZWxzZVxuICAgICAgQCRlbC5odG1sIFwiXG4gICAgICAgIDxoMT4je0Btb2RlbC5nZXQgJ25hbWUnfTwvaDE+XG4gICAgICAgIDxkaXYgaWQ9J3Byb2dyZXNzJz48L2Rpdj5cbiAgICAgIFwiXG4gICAgICBAJGVsLmZpbmQoJyNwcm9ncmVzcycpLnByb2dyZXNzYmFyIHZhbHVlIDogKCAoIEBpbmRleCArIDEgKSAvICggQG1vZGVsLnN1YnRlc3RzLmxlbmd0aCArIDEgKSAqIDEwMCApXG5cbiAgICAgIGN1cnJlbnRWaWV3Lm9uIFwicmVuZGVyZWRcIiwgICAgPT4gQGZsYWdSZW5kZXIgXCJzdWJ0ZXN0XCIgIFxuICAgICAgY3VycmVudFZpZXcub24gXCJzdWJSZW5kZXJlZFwiLCA9PiBAdHJpZ2dlciBcInN1YlJlbmRlcmVkXCJcblxuICAgICAgY3VycmVudFZpZXcub24gXCJuZXh0XCIsICAgID0+IEBzdGVwIDFcbiAgICAgIGN1cnJlbnRWaWV3Lm9uIFwiYmFja1wiLCAgICA9PiBAc3RlcCAtMVxuXG4gICAgICBjdXJyZW50Vmlldy5yZW5kZXIoKVxuICAgICAgQCRlbC5hcHBlbmQgY3VycmVudFZpZXcuZWxcblxuICAgIEBmbGFnUmVuZGVyIFwiYXNzZXNzbWVudFwiXG5cbiAgZmxhZ1JlbmRlcjogKG9iamVjdCkgLT5cbiAgICBAcmVuZGVyZWRbb2JqZWN0XSA9IHRydWVcblxuICAgIGlmIEByZW5kZXJlZC5hc3Nlc3NtZW50ICYmIEByZW5kZXJlZC5zdWJ0ZXN0XG4gICAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuXG4gIGFmdGVyUmVuZGVyOiAtPlxuICAgIEBzdWJ0ZXN0Vmlld3NbQG9yZGVyTWFwW0BpbmRleF1dPy5hZnRlclJlbmRlcj8oKVxuXG4gIG9uQ2xvc2U6IC0+XG4gICAgZm9yIHZpZXcgaW4gQHN1YnRlc3RWaWV3c1xuICAgICAgdmlldy5jbG9zZSgpXG4gICAgQHJlc3VsdC5jbGVhcigpXG4gICAgVGFuZ2VyaW5lLm5hdi5zZXRTdHVkZW50IFwiXCJcbiAgICBcbiAgYWJvcnQ6IC0+XG4gICAgQGFib3J0QXNzZXNzbWVudCA9IHRydWVcbiAgICBAc3RlcCAxXG5cbiAgc2tpcDogPT5cbiAgICBjdXJyZW50VmlldyA9IEBzdWJ0ZXN0Vmlld3NbQG9yZGVyTWFwW0BpbmRleF1dXG4gICAgQHJlc3VsdC5hZGRcbiAgICAgIG5hbWUgICAgICA6IGN1cnJlbnRWaWV3Lm1vZGVsLmdldCBcIm5hbWVcIlxuICAgICAgZGF0YSAgICAgIDogY3VycmVudFZpZXcuZ2V0U2tpcHBlZCgpXG4gICAgICBzdWJ0ZXN0SWQgOiBjdXJyZW50Vmlldy5tb2RlbC5pZFxuICAgICAgc2tpcHBlZCAgIDogdHJ1ZVxuICAgICAgcHJvdG90eXBlIDogY3VycmVudFZpZXcubW9kZWwuZ2V0IFwicHJvdG90eXBlXCJcbiAgICAsXG4gICAgICBzdWNjZXNzOiA9PlxuICAgICAgICBAcmVzZXQgMVxuXG4gIHN0ZXA6IChpbmNyZW1lbnQpID0+XG5cbiAgICBpZiBAYWJvcnRBc3Nlc3NtZW50XG4gICAgICBjdXJyZW50VmlldyA9IEBzdWJ0ZXN0Vmlld3NbQG9yZGVyTWFwW0BpbmRleF1dXG4gICAgICBAc2F2ZVJlc3VsdCggY3VycmVudFZpZXcgKVxuICAgICAgcmV0dXJuIFxuXG4gICAgY3VycmVudFZpZXcgPSBAc3VidGVzdFZpZXdzW0BvcmRlck1hcFtAaW5kZXhdXVxuICAgIGlmIGN1cnJlbnRWaWV3LmlzVmFsaWQoKVxuICAgICAgQHNhdmVSZXN1bHQoIGN1cnJlbnRWaWV3LCBpbmNyZW1lbnQgKVxuICAgIGVsc2VcbiAgICAgIGN1cnJlbnRWaWV3LnNob3dFcnJvcnMoKVxuXG4gIHJlc2V0OiAoaW5jcmVtZW50KSA9PlxuICAgIEByZW5kZXJlZC5zdWJ0ZXN0ID0gZmFsc2VcbiAgICBAcmVuZGVyZWQuYXNzZXNzbWVudCA9IGZhbHNlXG4gICAgY3VycmVudFZpZXcgPSBAc3VidGVzdFZpZXdzW0BvcmRlck1hcFtAaW5kZXhdXVxuICAgIGN1cnJlbnRWaWV3LmNsb3NlKClcbiAgICBAaW5kZXggPSBcbiAgICAgIGlmIEBhYm9ydEFzc2Vzc21lbnQgPT0gdHJ1ZVxuICAgICAgICBAc3VidGVzdFZpZXdzLmxlbmd0aC0xXG4gICAgICBlbHNlXG4gICAgICAgIEBpbmRleCArIGluY3JlbWVudFxuICAgIEByZW5kZXIoKVxuICAgIHdpbmRvdy5zY3JvbGxUbyAwLCAwXG5cblxuICBzYXZlUmVzdWx0OiAoIGN1cnJlbnRWaWV3LCBpbmNyZW1lbnQgKSA9PlxuXG4gICAgc3VidGVzdFJlc3VsdCA9IGN1cnJlbnRWaWV3LmdldFJlc3VsdCgpXG4gICAgc3VidGVzdElkID0gY3VycmVudFZpZXcubW9kZWwuaWRcbiAgICBwcm90b3R5cGUgPSBjdXJyZW50Vmlldy5tb2RlbC5nZXQgXCJwcm90b3R5cGVcIlxuICAgIHN1YnRlc3RSZXBsYWNlID0gbnVsbFxuXG4gICAgZm9yIHJlc3VsdCwgaSBpbiBAcmVzdWx0LmdldCgnc3VidGVzdERhdGEnKVxuICAgICAgaWYgc3VidGVzdElkID09IHJlc3VsdC5zdWJ0ZXN0SWRcbiAgICAgICAgc3VidGVzdFJlcGxhY2UgPSBpXG5cbiAgICBpZiBzdWJ0ZXN0UmVwbGFjZSAhPSBudWxsXG4gICAgICAjIERvbid0IHVwZGF0ZSB0aGUgZ3BzIHN1YnRlc3QuXG4gICAgICBpZiBwcm90b3R5cGUgIT0gJ2dwcydcbiAgICAgICAgQHJlc3VsdC5pbnNlcnRcbiAgICAgICAgICBuYW1lICAgICAgICA6IGN1cnJlbnRWaWV3Lm1vZGVsLmdldCBcIm5hbWVcIlxuICAgICAgICAgIGRhdGEgICAgICAgIDogc3VidGVzdFJlc3VsdC5ib2R5XG4gICAgICAgICAgc3VidGVzdEhhc2ggOiBzdWJ0ZXN0UmVzdWx0Lm1ldGEuaGFzaFxuICAgICAgICAgIHN1YnRlc3RJZCAgIDogY3VycmVudFZpZXcubW9kZWwuaWRcbiAgICAgICAgICBwcm90b3R5cGUgICA6IGN1cnJlbnRWaWV3Lm1vZGVsLmdldCBcInByb3RvdHlwZVwiXG4gICAgICBAcmVzZXQgaW5jcmVtZW50XG5cbiAgICBlbHNlXG4gICAgICBAcmVzdWx0LmFkZFxuICAgICAgICBuYW1lICAgICAgICA6IGN1cnJlbnRWaWV3Lm1vZGVsLmdldCBcIm5hbWVcIlxuICAgICAgICBkYXRhICAgICAgICA6IHN1YnRlc3RSZXN1bHQuYm9keVxuICAgICAgICBzdWJ0ZXN0SGFzaCA6IHN1YnRlc3RSZXN1bHQubWV0YS5oYXNoXG4gICAgICAgIHN1YnRlc3RJZCAgIDogY3VycmVudFZpZXcubW9kZWwuaWRcbiAgICAgICAgcHJvdG90eXBlICAgOiBjdXJyZW50Vmlldy5tb2RlbC5nZXQgXCJwcm90b3R5cGVcIlxuICAgICAgLFxuICAgICAgICBzdWNjZXNzIDogPT5cbiAgICAgICAgICBAcmVzZXQgaW5jcmVtZW50IiwidmFyIEFzc2Vzc21lbnRSdW5WaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkFzc2Vzc21lbnRSdW5WaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEFzc2Vzc21lbnRSdW5WaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBBc3Nlc3NtZW50UnVuVmlldygpIHtcbiAgICB0aGlzLnNhdmVSZXN1bHQgPSBiaW5kKHRoaXMuc2F2ZVJlc3VsdCwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCA9IGJpbmQodGhpcy5yZXNldCwgdGhpcyk7XG4gICAgdGhpcy5zdGVwID0gYmluZCh0aGlzLnN0ZXAsIHRoaXMpO1xuICAgIHRoaXMuc2tpcCA9IGJpbmQodGhpcy5za2lwLCB0aGlzKTtcbiAgICByZXR1cm4gQXNzZXNzbWVudFJ1blZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBBc3Nlc3NtZW50UnVuVmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJBc3Nlc3NtZW50UnVuVmlld1wiO1xuXG4gIEFzc2Vzc21lbnRSdW5WaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBoYXNTZXF1ZW5jZXMsIGksIGosIHBsYWNlcywgcmVmLCByZXN1bHRWaWV3LCBzZXF1ZW5jZXM7XG4gICAgdGhpcy5hYm9ydEFzc2Vzc21lbnQgPSBmYWxzZTtcbiAgICB0aGlzLmluZGV4ID0gMDtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICB0aGlzLm9yZGVyTWFwID0gW107XG4gICAgdGhpcy5lbmFibGVDb3JyZWN0aW9ucyA9IGZhbHNlO1xuICAgIFRhbmdlcmluZS50ZW1wRGF0YSA9IHt9O1xuICAgIHRoaXMucmVuZGVyZWQgPSB7XG4gICAgICBcImFzc2Vzc21lbnRcIjogZmFsc2UsXG4gICAgICBcInN1YnRlc3RcIjogZmFsc2VcbiAgICB9O1xuICAgIFRhbmdlcmluZS5hY3Rpdml0eSA9IFwiYXNzZXNzbWVudCBydW5cIjtcbiAgICB0aGlzLnN1YnRlc3RWaWV3cyA9IFtdO1xuICAgIHRoaXMubW9kZWwuc3VidGVzdHMuc29ydCgpO1xuICAgIHRoaXMubW9kZWwuc3VidGVzdHMuZWFjaCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuc3VidGVzdFZpZXdzLnB1c2gobmV3IFN1YnRlc3RSdW5WaWV3KHtcbiAgICAgICAgICBtb2RlbDogbW9kZWwsXG4gICAgICAgICAgcGFyZW50OiBfdGhpc1xuICAgICAgICB9KSk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICBoYXNTZXF1ZW5jZXMgPSB0aGlzLm1vZGVsLmhhcyhcInNlcXVlbmNlc1wiKSAmJiAhXy5pc0VtcHR5KF8uY29tcGFjdChfLmZsYXR0ZW4odGhpcy5tb2RlbC5nZXQoXCJzZXF1ZW5jZXNcIikpKSk7XG4gICAgaWYgKGhhc1NlcXVlbmNlcykge1xuICAgICAgc2VxdWVuY2VzID0gdGhpcy5tb2RlbC5nZXQoXCJzZXF1ZW5jZXNcIik7XG4gICAgICBwbGFjZXMgPSBUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0KFwic2VxdWVuY2VQbGFjZXNcIik7XG4gICAgICBpZiAocGxhY2VzID09IG51bGwpIHtcbiAgICAgICAgcGxhY2VzID0ge307XG4gICAgICB9XG4gICAgICBpZiAocGxhY2VzW3RoaXMubW9kZWwuaWRdID09IG51bGwpIHtcbiAgICAgICAgcGxhY2VzW3RoaXMubW9kZWwuaWRdID0gMDtcbiAgICAgIH1cbiAgICAgIGlmIChwbGFjZXNbdGhpcy5tb2RlbC5pZF0gPCBzZXF1ZW5jZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICBwbGFjZXNbdGhpcy5tb2RlbC5pZF0rKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYWNlc1t0aGlzLm1vZGVsLmlkXSA9IDA7XG4gICAgICB9XG4gICAgICBUYW5nZXJpbmUuc2V0dGluZ3Muc2F2ZShcInNlcXVlbmNlUGxhY2VzXCIsIHBsYWNlcyk7XG4gICAgICB0aGlzLm9yZGVyTWFwID0gc2VxdWVuY2VzW3BsYWNlc1t0aGlzLm1vZGVsLmlkXV07XG4gICAgICB0aGlzLm9yZGVyTWFwW3RoaXMub3JkZXJNYXAubGVuZ3RoXSA9IHRoaXMuc3VidGVzdFZpZXdzLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gaiA9IDAsIHJlZiA9IHRoaXMuc3VidGVzdFZpZXdzLmxlbmd0aDsgMCA8PSByZWYgPyBqIDw9IHJlZiA6IGogPj0gcmVmOyBpID0gMCA8PSByZWYgPyArK2ogOiAtLWopIHtcbiAgICAgICAgdGhpcy5vcmRlck1hcFtpXSA9IGk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucmVzdWx0ID0gbmV3IFJlc3VsdCh7XG4gICAgICBhc3Nlc3NtZW50SWQ6IHRoaXMubW9kZWwuaWQsXG4gICAgICBhc3Nlc3NtZW50TmFtZTogdGhpcy5tb2RlbC5nZXQoXCJuYW1lXCIpLFxuICAgICAgYmxhbms6IHRydWVcbiAgICB9KTtcbiAgICBpZiAoaGFzU2VxdWVuY2VzKSB7XG4gICAgICB0aGlzLnJlc3VsdC5zZXQoe1xuICAgICAgICBcIm9yZGVyX21hcFwiOiB0aGlzLm9yZGVyTWFwXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmVzdWx0VmlldyA9IG5ldyBSZXN1bHRWaWV3KHtcbiAgICAgIG1vZGVsOiB0aGlzLnJlc3VsdCxcbiAgICAgIGFzc2Vzc21lbnQ6IHRoaXMubW9kZWwsXG4gICAgICBhc3Nlc3NtZW50VmlldzogdGhpc1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnN1YnRlc3RWaWV3cy5wdXNoKHJlc3VsdFZpZXcpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRSdW5WaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VycmVudFZpZXc7XG4gICAgY3VycmVudFZpZXcgPSB0aGlzLnN1YnRlc3RWaWV3c1t0aGlzLm9yZGVyTWFwW3RoaXMuaW5kZXhdXTtcbiAgICBpZiAodGhpcy5tb2RlbC5zdWJ0ZXN0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuJGVsLmh0bWwoXCI8aDE+T29wcy4uLjwvaDE+PHA+XFxcIlwiICsgKHRoaXMubW9kZWwuZ2V0KCduYW1lJykpICsgXCJcXFwiIGlzIGJsYW5rLiBQZXJoYXBzIHlvdSBtZWFudCB0byBhZGQgc29tZSBzdWJ0ZXN0cy48L3A+XCIpO1xuICAgICAgdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsLmh0bWwoXCI8aDE+XCIgKyAodGhpcy5tb2RlbC5nZXQoJ25hbWUnKSkgKyBcIjwvaDE+IDxkaXYgaWQ9J3Byb2dyZXNzJz48L2Rpdj5cIik7XG4gICAgICB0aGlzLiRlbC5maW5kKCcjcHJvZ3Jlc3MnKS5wcm9ncmVzc2Jhcih7XG4gICAgICAgIHZhbHVlOiAodGhpcy5pbmRleCArIDEpIC8gKHRoaXMubW9kZWwuc3VidGVzdHMubGVuZ3RoICsgMSkgKiAxMDBcbiAgICAgIH0pO1xuICAgICAgY3VycmVudFZpZXcub24oXCJyZW5kZXJlZFwiLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5mbGFnUmVuZGVyKFwic3VidGVzdFwiKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICAgIGN1cnJlbnRWaWV3Lm9uKFwic3ViUmVuZGVyZWRcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMudHJpZ2dlcihcInN1YlJlbmRlcmVkXCIpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgICAgY3VycmVudFZpZXcub24oXCJuZXh0XCIsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnN0ZXAoMSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICBjdXJyZW50Vmlldy5vbihcImJhY2tcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuc3RlcCgtMSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICBjdXJyZW50Vmlldy5yZW5kZXIoKTtcbiAgICAgIHRoaXMuJGVsLmFwcGVuZChjdXJyZW50Vmlldy5lbCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZsYWdSZW5kZXIoXCJhc3Nlc3NtZW50XCIpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRSdW5WaWV3LnByb3RvdHlwZS5mbGFnUmVuZGVyID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdGhpcy5yZW5kZXJlZFtvYmplY3RdID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5yZW5kZXJlZC5hc3Nlc3NtZW50ICYmIHRoaXMucmVuZGVyZWQuc3VidGVzdCkge1xuICAgICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICAgIH1cbiAgfTtcblxuICBBc3Nlc3NtZW50UnVuVmlldy5wcm90b3R5cGUuYWZ0ZXJSZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVmO1xuICAgIHJldHVybiAocmVmID0gdGhpcy5zdWJ0ZXN0Vmlld3NbdGhpcy5vcmRlck1hcFt0aGlzLmluZGV4XV0pICE9IG51bGwgPyB0eXBlb2YgcmVmLmFmdGVyUmVuZGVyID09PSBcImZ1bmN0aW9uXCIgPyByZWYuYWZ0ZXJSZW5kZXIoKSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgfTtcblxuICBBc3Nlc3NtZW50UnVuVmlldy5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBqLCBsZW4sIHJlZiwgdmlldztcbiAgICByZWYgPSB0aGlzLnN1YnRlc3RWaWV3cztcbiAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHZpZXcgPSByZWZbal07XG4gICAgICB2aWV3LmNsb3NlKCk7XG4gICAgfVxuICAgIHRoaXMucmVzdWx0LmNsZWFyKCk7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5uYXYuc2V0U3R1ZGVudChcIlwiKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50UnVuVmlldy5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmFib3J0QXNzZXNzbWVudCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXMuc3RlcCgxKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50UnVuVmlldy5wcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXJyZW50VmlldztcbiAgICBjdXJyZW50VmlldyA9IHRoaXMuc3VidGVzdFZpZXdzW3RoaXMub3JkZXJNYXBbdGhpcy5pbmRleF1dO1xuICAgIHJldHVybiB0aGlzLnJlc3VsdC5hZGQoe1xuICAgICAgbmFtZTogY3VycmVudFZpZXcubW9kZWwuZ2V0KFwibmFtZVwiKSxcbiAgICAgIGRhdGE6IGN1cnJlbnRWaWV3LmdldFNraXBwZWQoKSxcbiAgICAgIHN1YnRlc3RJZDogY3VycmVudFZpZXcubW9kZWwuaWQsXG4gICAgICBza2lwcGVkOiB0cnVlLFxuICAgICAgcHJvdG90eXBlOiBjdXJyZW50Vmlldy5tb2RlbC5nZXQoXCJwcm90b3R5cGVcIilcbiAgICB9LCB7XG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZXNldCgxKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgQXNzZXNzbWVudFJ1blZpZXcucHJvdG90eXBlLnN0ZXAgPSBmdW5jdGlvbihpbmNyZW1lbnQpIHtcbiAgICB2YXIgY3VycmVudFZpZXc7XG4gICAgaWYgKHRoaXMuYWJvcnRBc3Nlc3NtZW50KSB7XG4gICAgICBjdXJyZW50VmlldyA9IHRoaXMuc3VidGVzdFZpZXdzW3RoaXMub3JkZXJNYXBbdGhpcy5pbmRleF1dO1xuICAgICAgdGhpcy5zYXZlUmVzdWx0KGN1cnJlbnRWaWV3KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3VycmVudFZpZXcgPSB0aGlzLnN1YnRlc3RWaWV3c1t0aGlzLm9yZGVyTWFwW3RoaXMuaW5kZXhdXTtcbiAgICBpZiAoY3VycmVudFZpZXcuaXNWYWxpZCgpKSB7XG4gICAgICByZXR1cm4gdGhpcy5zYXZlUmVzdWx0KGN1cnJlbnRWaWV3LCBpbmNyZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3VycmVudFZpZXcuc2hvd0Vycm9ycygpO1xuICAgIH1cbiAgfTtcblxuICBBc3Nlc3NtZW50UnVuVmlldy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbihpbmNyZW1lbnQpIHtcbiAgICB2YXIgY3VycmVudFZpZXc7XG4gICAgdGhpcy5yZW5kZXJlZC5zdWJ0ZXN0ID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJlZC5hc3Nlc3NtZW50ID0gZmFsc2U7XG4gICAgY3VycmVudFZpZXcgPSB0aGlzLnN1YnRlc3RWaWV3c1t0aGlzLm9yZGVyTWFwW3RoaXMuaW5kZXhdXTtcbiAgICBjdXJyZW50Vmlldy5jbG9zZSgpO1xuICAgIHRoaXMuaW5kZXggPSB0aGlzLmFib3J0QXNzZXNzbWVudCA9PT0gdHJ1ZSA/IHRoaXMuc3VidGVzdFZpZXdzLmxlbmd0aCAtIDEgOiB0aGlzLmluZGV4ICsgaW5jcmVtZW50O1xuICAgIHRoaXMucmVuZGVyKCk7XG4gICAgcmV0dXJuIHdpbmRvdy5zY3JvbGxUbygwLCAwKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50UnVuVmlldy5wcm90b3R5cGUuc2F2ZVJlc3VsdCA9IGZ1bmN0aW9uKGN1cnJlbnRWaWV3LCBpbmNyZW1lbnQpIHtcbiAgICB2YXIgaSwgaiwgbGVuLCBwcm90b3R5cGUsIHJlZiwgcmVzdWx0LCBzdWJ0ZXN0SWQsIHN1YnRlc3RSZXBsYWNlLCBzdWJ0ZXN0UmVzdWx0O1xuICAgIHN1YnRlc3RSZXN1bHQgPSBjdXJyZW50Vmlldy5nZXRSZXN1bHQoKTtcbiAgICBzdWJ0ZXN0SWQgPSBjdXJyZW50Vmlldy5tb2RlbC5pZDtcbiAgICBwcm90b3R5cGUgPSBjdXJyZW50Vmlldy5tb2RlbC5nZXQoXCJwcm90b3R5cGVcIik7XG4gICAgc3VidGVzdFJlcGxhY2UgPSBudWxsO1xuICAgIHJlZiA9IHRoaXMucmVzdWx0LmdldCgnc3VidGVzdERhdGEnKTtcbiAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgcmVzdWx0ID0gcmVmW2ldO1xuICAgICAgaWYgKHN1YnRlc3RJZCA9PT0gcmVzdWx0LnN1YnRlc3RJZCkge1xuICAgICAgICBzdWJ0ZXN0UmVwbGFjZSA9IGk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdWJ0ZXN0UmVwbGFjZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHByb3RvdHlwZSAhPT0gJ2dwcycpIHtcbiAgICAgICAgdGhpcy5yZXN1bHQuaW5zZXJ0KHtcbiAgICAgICAgICBuYW1lOiBjdXJyZW50Vmlldy5tb2RlbC5nZXQoXCJuYW1lXCIpLFxuICAgICAgICAgIGRhdGE6IHN1YnRlc3RSZXN1bHQuYm9keSxcbiAgICAgICAgICBzdWJ0ZXN0SGFzaDogc3VidGVzdFJlc3VsdC5tZXRhLmhhc2gsXG4gICAgICAgICAgc3VidGVzdElkOiBjdXJyZW50Vmlldy5tb2RlbC5pZCxcbiAgICAgICAgICBwcm90b3R5cGU6IGN1cnJlbnRWaWV3Lm1vZGVsLmdldChcInByb3RvdHlwZVwiKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnJlc2V0KGluY3JlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc3VsdC5hZGQoe1xuICAgICAgICBuYW1lOiBjdXJyZW50Vmlldy5tb2RlbC5nZXQoXCJuYW1lXCIpLFxuICAgICAgICBkYXRhOiBzdWJ0ZXN0UmVzdWx0LmJvZHksXG4gICAgICAgIHN1YnRlc3RIYXNoOiBzdWJ0ZXN0UmVzdWx0Lm1ldGEuaGFzaCxcbiAgICAgICAgc3VidGVzdElkOiBjdXJyZW50Vmlldy5tb2RlbC5pZCxcbiAgICAgICAgcHJvdG90eXBlOiBjdXJyZW50Vmlldy5tb2RlbC5nZXQoXCJwcm90b3R5cGVcIilcbiAgICAgIH0sIHtcbiAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlc2V0KGluY3JlbWVudCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gQXNzZXNzbWVudFJ1blZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBBc3Nlc3NtZW50SW1wb3J0VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiQXNzZXNzbWVudEltcG9ydFZpZXdcIlxuXG4gIGV2ZW50czpcbiAgICAnY2xpY2sgLmltcG9ydCcgOiAnaW1wb3J0J1xuICAgICdjbGljayAuYmFjaycgICA6ICdiYWNrJ1xuICAgICdjbGljayAudmVyaWZ5JyA6ICd2ZXJpZnknXG4gICAgJ2NsaWNrIC5ncm91cF9pbXBvcnQnIDogJ2dyb3VwSW1wb3J0J1xuXG4gIGdyb3VwSW1wb3J0OiAtPlxuXG4gICAgJC5hamF4XG4gICAgICB1cmw6IFRhbmdlcmluZS5zZXR0aW5ncy51cmxWaWV3KFwibG9jYWxcIiwgXCJieURLZXlcIiksXG4gICAgICB0eXBlOiBcIlBPU1RcIlxuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICBkYXRhVHlwZTogXCJqc29uXCJcbiAgICAgIGRhdGE6IFwie31cIlxuICAgICAgc3VjY2VzczogKGRhdGEpID0+XG4gICAgICAgIGtleUxpc3QgPSBbXVxuICAgICAgICBmb3IgZGF0dW0gaW4gZGF0YS5yb3dzXG4gICAgICAgICAga2V5TGlzdC5wdXNoIGRhdHVtLmtleVxuICAgICAgICBrZXlMaXN0ID0gXy51bmlxKGtleUxpc3QpXG5cbiAgICAgICAgJC5hamF4XG4gICAgICAgICAgdXJsOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsVmlldyBcImdyb3VwXCIsIFwiYXNzZXNzbWVudHNOb3RBcmNoaXZlZFwiXG4gICAgICAgICAgZGF0YVR5cGU6IFwianNvbnBcIlxuICAgICAgICAgIHN1Y2Nlc3M6IChkYXRhKSA9PlxuICAgICAgICAgICAgZEtleXMgPSBfLmNvbXBhY3QoZG9jLmlkLnN1YnN0cigtNSwgNSkgZm9yIGRvYyBpbiBkYXRhLnJvd3MpLmNvbmNhdChrZXlMaXN0KS5qb2luKFwiIFwiKVxuICAgICAgICAgICAgbmV3QXNzZXNzbWVudCA9IG5ldyBBc3Nlc3NtZW50XG4gICAgICAgICAgICBuZXdBc3Nlc3NtZW50Lm9uIFwic3RhdHVzXCIsIEB1cGRhdGVBY3Rpdml0eVxuICAgICAgICAgICAgbmV3QXNzZXNzbWVudC51cGRhdGVGcm9tU2VydmVyIGRLZXlzXG4gICAgICAgICAgZXJyb3I6IChhLCBiKSAtPlxuICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJJbXBvcnQgZXJyb3JcIiBcblxuICB2ZXJpZnk6IC0+XG4gICAgVGFuZ2VyaW5lLnVzZXIuZ2hvc3RMb2dpbiBUYW5nZXJpbmUuc2V0dGluZ3MudXBVc2VyLCBUYW5nZXJpbmUuc2V0dGluZ3MudXBQYXNzXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgQG5vdW4gPSBvcHRpb25zLm5vdW5cblxuICAgIEBjb25uZWN0aW9uVmVyaWZpZWQgPSB0cnVlXG5cbiAgICBAZG9jc1JlbWFpbmluZyA9IDBcblxuICAgICMgdGhlcmUgd2FzIGEgbG90IG9mIHNlcnZlciBjb25uZWN0aW9uIGNoZWNraW5nIGhlcmVcbiAgICAjIGNhbiBwcm9iYWJseSBnZXQgcmlkIG9mIG1vcmUgY29kZSAvIG1hcmt1cCBvbiBhbm90aGVyIHBhc3NcblxuICAgIEBzZXJ2ZXJTdGF0dXMgPSBcIk9rXCJcbiAgICBAdXBkYXRlU2VydmVyU3RhdHVzKClcblxuICAgIEByZW5kZXIoKVxuXG5cbiAgdXBkYXRlU2VydmVyU3RhdHVzOiAtPlxuICAgIEAkZWwuZmluZChcIiNzZXJ2ZXJfY29ubmVjdGlvblwiKS5odG1sIEBzZXJ2ZXJTdGF0dXNcblxuICBiYWNrOiAtPlxuICAgIFRhbmdlcmluZS5yb3V0ZXIubGFuZGluZygpXG4gICAgZmFsc2VcblxuICBpbXBvcnQ6ID0+XG5cbiAgICBkS2V5ID0gQCRlbC5maW5kKFwiI2Rfa2V5XCIpLnZhbCgpXG5cbiAgICBzZWxlY3RlZEdyb3VwID0gQCRlbC5maW5kKFwic2VsZWN0I2dyb3VwIG9wdGlvbjpzZWxlY3RlZFwiKS5hdHRyKCdkYXRhLWdyb3VwJykgfHwgXCJcIlxuXG4gICAgcmV0dXJuIFV0aWxzLm1pZEFsZXJ0IFwiUGxlYXNlIHNlbGVjdCBhIGdyb3VwLlwiIGlmIHNlbGVjdGVkR3JvdXAgPT0gXCJOT05FXCJcblxuICAgIEBuZXdBc3Nlc3NtZW50ID0gbmV3IEFzc2Vzc21lbnRcbiAgICBAbmV3QXNzZXNzbWVudC5vbiBcInN0YXR1c1wiLCBAdXBkYXRlQWN0aXZpdHlcbiAgICBAdXBkYXRlQWN0aXZpdHkoKVxuXG4gICAgaWYgc2VsZWN0ZWRHcm91cCA9PSBcIklyaXNDb3VjaFwiXG4gICAgICBAbmV3QXNzZXNzbWVudC51cGRhdGVGcm9tSXJpc0NvdWNoIGRLZXlcbiAgICBlbHNlXG4gICAgICBAbmV3QXNzZXNzbWVudC51cGRhdGVGcm9tU2VydmVyIGRLZXksIHNlbGVjdGVkR3JvdXBcblxuICAgIEBhY3RpdmVUYXNrSW50ZXJ2YWwgPSAyIyBzZXRJbnRlcnZhbCBAdXBkYXRlRnJvbUFjdGl2ZVRhc2tzLCAzMDAwXG5cblxuICB1cGRhdGVGcm9tQWN0aXZlVGFza3M6ID0+XG4gICAgJC5jb3VjaC5hY3RpdmVUYXNrc1xuICAgICAgc3VjY2VzczogKHRhc2tzKSA9PlxuICAgICAgICBmb3IgdGFzayBpbiB0YXNrc1xuICAgICAgICAgIGlmIHRhc2sudHlwZS50b0xvd2VyQ2FzZSgpID09IFwicmVwbGljYXRpb25cIlxuICAgICAgICAgICAgaWYgbm90IF8uaXNFbXB0eSh0YXNrLnN0YXR1cykgdGhlbiBAYWN0aXZpdHkgPSB0YXNrLnN0YXR1c1xuICAgICAgICAgICAgQHVwZGF0ZVByb2dyZXNzKClcblxuXG4gIHVwZGF0ZUFjdGl2aXR5OiAoc3RhdHVzLCBtZXNzYWdlKSA9PlxuXG4gICAgaWYgbWVzc2FnZT9cbiAgICAgIHJlYWQgPSB3cml0dGVuID0gZmFpbGVkID0gMFxuXG4gICAgICByZWFkICAgID0gbWVzc2FnZS5kb2NzX3JlYWRcbiAgICAgIHdyaXR0ZW4gPSBtZXNzYWdlLmRvY3Nfd3JpdHRlblxuICAgICAgZmFpbGVkICA9IG1lc3NhZ2UuZG9jX3dyaXRlX2ZhaWx1cmVzXG5cbiAgICAgIHdyaXR0ZW5QbHVyYWwgPSBcInNcIiBpZiB3cml0dGVuICE9IDFcblxuICAgICAgZmFpbHVyZXMgPSBcIlxuICAgICAgICA8Yj4je2ZhaWxlZH08L2I+IGZhaWx1cmVzPGJyPlxuICAgICAgXCIgaWYgZmFpbGVkICE9IDBcblxuICAgICAgY2hhbmdlcyA9IFwiTm8gY2hhbmdlc1wiIGlmIG1lc3NhZ2Uubm9fY2hhbmdlcz8gJiYgbWVzc2FnZS5ub19jaGFuZ2VzID09IHRydWVcblxuICAgIEAkZWwuZmluZChcIi5zdGF0dXNcIikuZmFkZUluKDI1MClcblxuICAgIEBhY3Rpdml0eSA9IFwiXCJcbiAgICBpZiBzdGF0dXMgPT0gXCJpbXBvcnQgbG9va3VwXCJcbiAgICAgIEBhY3Rpdml0eSA9IFwiRmluZGluZyAje0Bub3VufVwiXG4gICAgZWxzZSBpZiBzdGF0dXMgPT0gXCJpbXBvcnQgc3VjY2Vzc1wiXG4gICAgICBjbGVhckludGVydmFsIEBhY3RpdmVUYXNrSW50ZXJ2YWxcbiAgICAgIGhlYWRsaW5lID0gXCJJbXBvcnQgc3VjY2Vzc2Z1bFwiXG4gICAgICBoZWFkbGluZSA9IFwiTm90aGluZyBpbXBvcnRlZFwiIGlmIHJlYWQgPT0gMFxuICAgICAgQGFjdGl2aXR5ID0gXCIje2hlYWRsaW5lfTxicj5cbiAgICAgICAgPGI+I3t3cml0dGVufTwvYj4gZG9jdW1lbnQje3dyaXR0ZW5QbHVyYWwgfHwgJyd9IHdyaXR0ZW48YnI+XG4gICAgICAgICN7ZmFpbHVyZXMgfHwgJyd9XG4gICAgICAgICN7Y2hhbmdlcyB8fCAnJ31cbiAgICAgIFwiXG4gICAgICBAdXBkYXRlUHJvZ3Jlc3MgbnVsbFxuICAgIGVsc2UgaWYgc3RhdHVzID09IFwiaW1wb3J0IGVycm9yXCJcbiAgICAgIGNsZWFySW50ZXJ2YWwgQGFjdGl2ZVRhc2tJbnRlcnZhbFxuICAgICAgQGFjdGl2aXR5ID0gXCJJbXBvcnQgZXJyb3I6IFwiICsgSlNPTi5zdHJpbmdpZnkobWVzc2FnZSlcblxuICAgIEB1cGRhdGVQcm9ncmVzcygpXG5cbiAgdXBkYXRlUHJvZ3Jlc3M6IChrZXksIGNhbGxiYWNrPSQubm9vcCkgPT5cblxuICAgIGlmIGtleT9cbiAgICAgIGlmIEBpbXBvcnRMaXN0W2tleV0/XG4gICAgICAgIEBpbXBvcnRMaXN0W2tleV0rK1xuICAgICAgZWxzZVxuICAgICAgICBAaW1wb3J0TGlzdFtrZXldID0gMVxuXG4gICAgcHJvZ3Jlc3NIVE1MID0gXCI8dGFibGU+XCJcblxuICAgIGZvciBrZXksIHZhbHVlIG9mIEBpbXBvcnRMaXN0XG4gICAgICBwcm9ncmVzc0hUTUwgKz0gXCI8dHI+PHRkPiN7a2V5LnRpdGxlaXplKCkucGx1cmFsaXplKCl9PC90ZD48dGQ+I3t2YWx1ZX08L3RkPjwvdHI+XCJcblxuICAgIGlmIEBhY3Rpdml0eT9cbiAgICAgIHByb2dyZXNzSFRNTCArPSBcIjx0cj48dGQgY29sc3Bhbj0nMic+I3tAYWN0aXZpdHl9PC90ZD48L3RyPlwiXG5cbiAgICBwcm9ncmVzc0hUTUwgKz0gXCI8L3RhYmxlPlwiXG5cbiAgICBAJGVsLmZpbmQoXCIjcHJvZ3Jlc3NcIikuaHRtbCBwcm9ncmVzc0hUTUxcblxuICAgIGNhbGxiYWNrKClcblxuICByZW5kZXI6IC0+XG5cblxuXG4gICAgZ3JvdXBTZWxlY3RvciA9IFwiXG4gICAgICA8c2VsZWN0IGlkPSdncm91cCc+XG4gICAgICAgIDxvcHRpb24gZGF0YS1ncm91cD0nTk9ORScgc2VsZWN0ZWQ9J3NlbGVjdGVkJz5QbGVhc2Ugc2VsZWN0IGEgZ3JvdXA8L29wdGlvbj5cbiAgICAgICAgI3tUYW5nZXJpbmUudXNlci5ncm91cHMoKS5hZG1pbi5tYXAoIChncm91cCkgLT4gXCI8b3B0aW9uIGRhdGEtZ3JvdXA9JyN7Xy5lc2NhcGUoZ3JvdXApfSc+I3tncm91cH08L29wdGlvbj5cIikuam9pbignJyl9XG4gICAgICA8L3NlbGVjdD5cbiAgICBcIlxuXG4gICAgaWYgbm90IEBjb25uZWN0aW9uVmVyaWZpZWRcbiAgICAgIGltcG9ydFN0ZXAgPSBcIlxuICAgICAgICA8c2VjdGlvbj5cbiAgICAgICAgICA8cD5QbGVhc2Ugd2FpdCB3aGlsZSB5b3VyIGNvbm5lY3Rpb24gaXMgdmVyaWZpZWQuPC9wPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQgdmVyaWZ5Jz5Ucnkgbm93PC9idXR0b24+XG4gICAgICAgICAgPHA+PHNtYWxsPk5vdGU6IElmIHZlcmlmaWNhdGlvbiBmYWlscywgcHJlc3MgYmFjayB0byByZXR1cm4gdG8gcHJldmlvdXMgc2NyZWVuIGFuZCBwbGVhc2UgdHJ5IGFnYWluIHdoZW4gaW50ZXJuZXQgY29ubmVjdGl2aXR5IGlzIGJldHRlci48L3NtYWxsPjwvcD5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgXCJcbiAgICBlbHNlXG4gICAgICBpbXBvcnRTdGVwID0gXCJcbiAgICAgICAgPGRpdiBjbGFzcz0ncXVlc3Rpb24nPlxuICAgICAgICAgIDxsYWJlbCBmb3I9J2Rfa2V5Jz5Eb3dubG9hZCBrZXlzPC9sYWJlbD5cblxuICAgICAgICAgIDxpbnB1dCBpZD0nZF9rZXknIHZhbHVlPScnPlxuICAgICAgICAgICN7Z3JvdXBTZWxlY3RvciB8fCAnJ308YnI+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz0naW1wb3J0IGNvbW1hbmQnPkltcG9ydDwvYnV0dG9uPiA8YnI+XG4gICAgICAgICAgPHNtYWxsPlNlcnZlciBjb25uZWN0aW9uOiA8c3BhbiBpZD0nc2VydmVyX2Nvbm5lY3Rpb24nPiN7QHNlcnZlclN0YXR1c308L3NwYW4+PC9zbWFsbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J2NvbmZpcm1hdGlvbiBzdGF0dXMnPlxuICAgICAgICAgIDxoMj5TdGF0dXM8aDI+XG4gICAgICAgICAgPGRpdiBjbGFzcz0naW5mb19ib3gnIGlkPSdwcm9ncmVzcyc+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgXCJcblxuICAgIEAkZWwuaHRtbCBcIlxuXG4gICAgICA8YnV0dG9uIGNsYXNzPSdiYWNrIG5hdmlnYXRpb24nPkJhY2s8L2J1dHRvbj5cblxuICAgICAgPGgxPlRhbmdlcmluZSBDZW50cmFsIEltcG9ydDwvaDE+XG5cbiAgICAgICN7aW1wb3J0U3RlcH1cblxuICAgIFwiXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICBvbkNsb3NlOiAtPlxuICAgIGNsZWFyVGltZW91dCBAdGltZXJcbiIsInZhciBBc3Nlc3NtZW50SW1wb3J0VmlldyxcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5Bc3Nlc3NtZW50SW1wb3J0VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChBc3Nlc3NtZW50SW1wb3J0Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQXNzZXNzbWVudEltcG9ydFZpZXcoKSB7XG4gICAgdGhpcy51cGRhdGVQcm9ncmVzcyA9IGJpbmQodGhpcy51cGRhdGVQcm9ncmVzcywgdGhpcyk7XG4gICAgdGhpcy51cGRhdGVBY3Rpdml0eSA9IGJpbmQodGhpcy51cGRhdGVBY3Rpdml0eSwgdGhpcyk7XG4gICAgdGhpcy51cGRhdGVGcm9tQWN0aXZlVGFza3MgPSBiaW5kKHRoaXMudXBkYXRlRnJvbUFjdGl2ZVRhc2tzLCB0aGlzKTtcbiAgICB0aGlzW1wiaW1wb3J0XCJdID0gYmluZCh0aGlzW1wiaW1wb3J0XCJdLCB0aGlzKTtcbiAgICByZXR1cm4gQXNzZXNzbWVudEltcG9ydFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBBc3Nlc3NtZW50SW1wb3J0Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJBc3Nlc3NtZW50SW1wb3J0Vmlld1wiO1xuXG4gIEFzc2Vzc21lbnRJbXBvcnRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrIC5pbXBvcnQnOiAnaW1wb3J0JyxcbiAgICAnY2xpY2sgLmJhY2snOiAnYmFjaycsXG4gICAgJ2NsaWNrIC52ZXJpZnknOiAndmVyaWZ5JyxcbiAgICAnY2xpY2sgLmdyb3VwX2ltcG9ydCc6ICdncm91cEltcG9ydCdcbiAgfTtcblxuICBBc3Nlc3NtZW50SW1wb3J0Vmlldy5wcm90b3R5cGUuZ3JvdXBJbXBvcnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgIHVybDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybFZpZXcoXCJsb2NhbFwiLCBcImJ5REtleVwiKSxcbiAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgZGF0YTogXCJ7fVwiLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgdmFyIGRhdHVtLCBpLCBrZXlMaXN0LCBsZW4sIHJlZjtcbiAgICAgICAgICBrZXlMaXN0ID0gW107XG4gICAgICAgICAgcmVmID0gZGF0YS5yb3dzO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgZGF0dW0gPSByZWZbaV07XG4gICAgICAgICAgICBrZXlMaXN0LnB1c2goZGF0dW0ua2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAga2V5TGlzdCA9IF8udW5pcShrZXlMaXN0KTtcbiAgICAgICAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybFZpZXcoXCJncm91cFwiLCBcImFzc2Vzc21lbnRzTm90QXJjaGl2ZWRcIiksXG4gICAgICAgICAgICBkYXRhVHlwZTogXCJqc29ucFwiLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICB2YXIgZEtleXMsIGRvYywgbmV3QXNzZXNzbWVudDtcbiAgICAgICAgICAgICAgZEtleXMgPSBfLmNvbXBhY3QoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBqLCBsZW4xLCByZWYxLCByZXN1bHRzO1xuICAgICAgICAgICAgICAgIHJlZjEgPSBkYXRhLnJvd3M7XG4gICAgICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgICAgICAgICAgZG9jID0gcmVmMVtqXTtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChkb2MuaWQuc3Vic3RyKC01LCA1KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgICB9KSgpKS5jb25jYXQoa2V5TGlzdCkuam9pbihcIiBcIik7XG4gICAgICAgICAgICAgIG5ld0Fzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudDtcbiAgICAgICAgICAgICAgbmV3QXNzZXNzbWVudC5vbihcInN0YXR1c1wiLCBfdGhpcy51cGRhdGVBY3Rpdml0eSk7XG4gICAgICAgICAgICAgIHJldHVybiBuZXdBc3Nlc3NtZW50LnVwZGF0ZUZyb21TZXJ2ZXIoZEtleXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIkltcG9ydCBlcnJvclwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgQXNzZXNzbWVudEltcG9ydFZpZXcucHJvdG90eXBlLnZlcmlmeSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci5naG9zdExvZ2luKFRhbmdlcmluZS5zZXR0aW5ncy51cFVzZXIsIFRhbmdlcmluZS5zZXR0aW5ncy51cFBhc3MpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRJbXBvcnRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMubm91biA9IG9wdGlvbnMubm91bjtcbiAgICB0aGlzLmNvbm5lY3Rpb25WZXJpZmllZCA9IHRydWU7XG4gICAgdGhpcy5kb2NzUmVtYWluaW5nID0gMDtcbiAgICB0aGlzLnNlcnZlclN0YXR1cyA9IFwiT2tcIjtcbiAgICB0aGlzLnVwZGF0ZVNlcnZlclN0YXR1cygpO1xuICAgIHJldHVybiB0aGlzLnJlbmRlcigpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRJbXBvcnRWaWV3LnByb3RvdHlwZS51cGRhdGVTZXJ2ZXJTdGF0dXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNzZXJ2ZXJfY29ubmVjdGlvblwiKS5odG1sKHRoaXMuc2VydmVyU3RhdHVzKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50SW1wb3J0Vmlldy5wcm90b3R5cGUuYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIFRhbmdlcmluZS5yb3V0ZXIubGFuZGluZygpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBBc3Nlc3NtZW50SW1wb3J0Vmlldy5wcm90b3R5cGVbXCJpbXBvcnRcIl0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZEtleSwgc2VsZWN0ZWRHcm91cDtcbiAgICBkS2V5ID0gdGhpcy4kZWwuZmluZChcIiNkX2tleVwiKS52YWwoKTtcbiAgICBzZWxlY3RlZEdyb3VwID0gdGhpcy4kZWwuZmluZChcInNlbGVjdCNncm91cCBvcHRpb246c2VsZWN0ZWRcIikuYXR0cignZGF0YS1ncm91cCcpIHx8IFwiXCI7XG4gICAgaWYgKHNlbGVjdGVkR3JvdXAgPT09IFwiTk9ORVwiKSB7XG4gICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQoXCJQbGVhc2Ugc2VsZWN0IGEgZ3JvdXAuXCIpO1xuICAgIH1cbiAgICB0aGlzLm5ld0Fzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudDtcbiAgICB0aGlzLm5ld0Fzc2Vzc21lbnQub24oXCJzdGF0dXNcIiwgdGhpcy51cGRhdGVBY3Rpdml0eSk7XG4gICAgdGhpcy51cGRhdGVBY3Rpdml0eSgpO1xuICAgIGlmIChzZWxlY3RlZEdyb3VwID09PSBcIklyaXNDb3VjaFwiKSB7XG4gICAgICB0aGlzLm5ld0Fzc2Vzc21lbnQudXBkYXRlRnJvbUlyaXNDb3VjaChkS2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5uZXdBc3Nlc3NtZW50LnVwZGF0ZUZyb21TZXJ2ZXIoZEtleSwgc2VsZWN0ZWRHcm91cCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFjdGl2ZVRhc2tJbnRlcnZhbCA9IDI7XG4gIH07XG5cbiAgQXNzZXNzbWVudEltcG9ydFZpZXcucHJvdG90eXBlLnVwZGF0ZUZyb21BY3RpdmVUYXNrcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkLmNvdWNoLmFjdGl2ZVRhc2tzKHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24odGFza3MpIHtcbiAgICAgICAgICB2YXIgaSwgbGVuLCByZXN1bHRzLCB0YXNrO1xuICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSB0YXNrcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdGFzayA9IHRhc2tzW2ldO1xuICAgICAgICAgICAgaWYgKHRhc2sudHlwZS50b0xvd2VyQ2FzZSgpID09PSBcInJlcGxpY2F0aW9uXCIpIHtcbiAgICAgICAgICAgICAgaWYgKCFfLmlzRW1wdHkodGFzay5zdGF0dXMpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWN0aXZpdHkgPSB0YXNrLnN0YXR1cztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXN1bHRzLnB1c2goX3RoaXMudXBkYXRlUHJvZ3Jlc3MoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHRzLnB1c2godm9pZCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRJbXBvcnRWaWV3LnByb3RvdHlwZS51cGRhdGVBY3Rpdml0eSA9IGZ1bmN0aW9uKHN0YXR1cywgbWVzc2FnZSkge1xuICAgIHZhciBjaGFuZ2VzLCBmYWlsZWQsIGZhaWx1cmVzLCBoZWFkbGluZSwgcmVhZCwgd3JpdHRlbiwgd3JpdHRlblBsdXJhbDtcbiAgICBpZiAobWVzc2FnZSAhPSBudWxsKSB7XG4gICAgICByZWFkID0gd3JpdHRlbiA9IGZhaWxlZCA9IDA7XG4gICAgICByZWFkID0gbWVzc2FnZS5kb2NzX3JlYWQ7XG4gICAgICB3cml0dGVuID0gbWVzc2FnZS5kb2NzX3dyaXR0ZW47XG4gICAgICBmYWlsZWQgPSBtZXNzYWdlLmRvY193cml0ZV9mYWlsdXJlcztcbiAgICAgIGlmICh3cml0dGVuICE9PSAxKSB7XG4gICAgICAgIHdyaXR0ZW5QbHVyYWwgPSBcInNcIjtcbiAgICAgIH1cbiAgICAgIGlmIChmYWlsZWQgIT09IDApIHtcbiAgICAgICAgZmFpbHVyZXMgPSBcIjxiPlwiICsgZmFpbGVkICsgXCI8L2I+IGZhaWx1cmVzPGJyPlwiO1xuICAgICAgfVxuICAgICAgaWYgKChtZXNzYWdlLm5vX2NoYW5nZXMgIT0gbnVsbCkgJiYgbWVzc2FnZS5ub19jaGFuZ2VzID09PSB0cnVlKSB7XG4gICAgICAgIGNoYW5nZXMgPSBcIk5vIGNoYW5nZXNcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy4kZWwuZmluZChcIi5zdGF0dXNcIikuZmFkZUluKDI1MCk7XG4gICAgdGhpcy5hY3Rpdml0eSA9IFwiXCI7XG4gICAgaWYgKHN0YXR1cyA9PT0gXCJpbXBvcnQgbG9va3VwXCIpIHtcbiAgICAgIHRoaXMuYWN0aXZpdHkgPSBcIkZpbmRpbmcgXCIgKyB0aGlzLm5vdW47XG4gICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFwiaW1wb3J0IHN1Y2Nlc3NcIikge1xuICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmFjdGl2ZVRhc2tJbnRlcnZhbCk7XG4gICAgICBoZWFkbGluZSA9IFwiSW1wb3J0IHN1Y2Nlc3NmdWxcIjtcbiAgICAgIGlmIChyZWFkID09PSAwKSB7XG4gICAgICAgIGhlYWRsaW5lID0gXCJOb3RoaW5nIGltcG9ydGVkXCI7XG4gICAgICB9XG4gICAgICB0aGlzLmFjdGl2aXR5ID0gaGVhZGxpbmUgKyBcIjxicj4gPGI+XCIgKyB3cml0dGVuICsgXCI8L2I+IGRvY3VtZW50XCIgKyAod3JpdHRlblBsdXJhbCB8fCAnJykgKyBcIiB3cml0dGVuPGJyPiBcIiArIChmYWlsdXJlcyB8fCAnJykgKyBcIiBcIiArIChjaGFuZ2VzIHx8ICcnKTtcbiAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3MobnVsbCk7XG4gICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFwiaW1wb3J0IGVycm9yXCIpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5hY3RpdmVUYXNrSW50ZXJ2YWwpO1xuICAgICAgdGhpcy5hY3Rpdml0eSA9IFwiSW1wb3J0IGVycm9yOiBcIiArIEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy51cGRhdGVQcm9ncmVzcygpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRJbXBvcnRWaWV3LnByb3RvdHlwZS51cGRhdGVQcm9ncmVzcyA9IGZ1bmN0aW9uKGtleSwgY2FsbGJhY2spIHtcbiAgICB2YXIgcHJvZ3Jlc3NIVE1MLCByZWYsIHZhbHVlO1xuICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayA9ICQubm9vcDtcbiAgICB9XG4gICAgaWYgKGtleSAhPSBudWxsKSB7XG4gICAgICBpZiAodGhpcy5pbXBvcnRMaXN0W2tleV0gIT0gbnVsbCkge1xuICAgICAgICB0aGlzLmltcG9ydExpc3Rba2V5XSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pbXBvcnRMaXN0W2tleV0gPSAxO1xuICAgICAgfVxuICAgIH1cbiAgICBwcm9ncmVzc0hUTUwgPSBcIjx0YWJsZT5cIjtcbiAgICByZWYgPSB0aGlzLmltcG9ydExpc3Q7XG4gICAgZm9yIChrZXkgaW4gcmVmKSB7XG4gICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgcHJvZ3Jlc3NIVE1MICs9IFwiPHRyPjx0ZD5cIiArIChrZXkudGl0bGVpemUoKS5wbHVyYWxpemUoKSkgKyBcIjwvdGQ+PHRkPlwiICsgdmFsdWUgKyBcIjwvdGQ+PC90cj5cIjtcbiAgICB9XG4gICAgaWYgKHRoaXMuYWN0aXZpdHkgIT0gbnVsbCkge1xuICAgICAgcHJvZ3Jlc3NIVE1MICs9IFwiPHRyPjx0ZCBjb2xzcGFuPScyJz5cIiArIHRoaXMuYWN0aXZpdHkgKyBcIjwvdGQ+PC90cj5cIjtcbiAgICB9XG4gICAgcHJvZ3Jlc3NIVE1MICs9IFwiPC90YWJsZT5cIjtcbiAgICB0aGlzLiRlbC5maW5kKFwiI3Byb2dyZXNzXCIpLmh0bWwocHJvZ3Jlc3NIVE1MKTtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50SW1wb3J0Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdyb3VwU2VsZWN0b3IsIGltcG9ydFN0ZXA7XG4gICAgZ3JvdXBTZWxlY3RvciA9IFwiPHNlbGVjdCBpZD0nZ3JvdXAnPiA8b3B0aW9uIGRhdGEtZ3JvdXA9J05PTkUnIHNlbGVjdGVkPSdzZWxlY3RlZCc+UGxlYXNlIHNlbGVjdCBhIGdyb3VwPC9vcHRpb24+IFwiICsgKFRhbmdlcmluZS51c2VyLmdyb3VwcygpLmFkbWluLm1hcChmdW5jdGlvbihncm91cCkge1xuICAgICAgcmV0dXJuIFwiPG9wdGlvbiBkYXRhLWdyb3VwPSdcIiArIChfLmVzY2FwZShncm91cCkpICsgXCInPlwiICsgZ3JvdXAgKyBcIjwvb3B0aW9uPlwiO1xuICAgIH0pLmpvaW4oJycpKSArIFwiIDwvc2VsZWN0PlwiO1xuICAgIGlmICghdGhpcy5jb25uZWN0aW9uVmVyaWZpZWQpIHtcbiAgICAgIGltcG9ydFN0ZXAgPSBcIjxzZWN0aW9uPiA8cD5QbGVhc2Ugd2FpdCB3aGlsZSB5b3VyIGNvbm5lY3Rpb24gaXMgdmVyaWZpZWQuPC9wPiA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHZlcmlmeSc+VHJ5IG5vdzwvYnV0dG9uPiA8cD48c21hbGw+Tm90ZTogSWYgdmVyaWZpY2F0aW9uIGZhaWxzLCBwcmVzcyBiYWNrIHRvIHJldHVybiB0byBwcmV2aW91cyBzY3JlZW4gYW5kIHBsZWFzZSB0cnkgYWdhaW4gd2hlbiBpbnRlcm5ldCBjb25uZWN0aXZpdHkgaXMgYmV0dGVyLjwvc21hbGw+PC9wPiA8L3NlY3Rpb24+XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGltcG9ydFN0ZXAgPSBcIjxkaXYgY2xhc3M9J3F1ZXN0aW9uJz4gPGxhYmVsIGZvcj0nZF9rZXknPkRvd25sb2FkIGtleXM8L2xhYmVsPiA8aW5wdXQgaWQ9J2Rfa2V5JyB2YWx1ZT0nJz4gXCIgKyAoZ3JvdXBTZWxlY3RvciB8fCAnJykgKyBcIjxicj4gPGJ1dHRvbiBjbGFzcz0naW1wb3J0IGNvbW1hbmQnPkltcG9ydDwvYnV0dG9uPiA8YnI+IDxzbWFsbD5TZXJ2ZXIgY29ubmVjdGlvbjogPHNwYW4gaWQ9J3NlcnZlcl9jb25uZWN0aW9uJz5cIiArIHRoaXMuc2VydmVyU3RhdHVzICsgXCI8L3NwYW4+PC9zbWFsbD4gPC9kaXY+IDxkaXYgY2xhc3M9J2NvbmZpcm1hdGlvbiBzdGF0dXMnPiA8aDI+U3RhdHVzPGgyPiA8ZGl2IGNsYXNzPSdpbmZvX2JveCcgaWQ9J3Byb2dyZXNzJz48L2Rpdj4gPC9kaXY+XCI7XG4gICAgfVxuICAgIHRoaXMuJGVsLmh0bWwoXCI8YnV0dG9uIGNsYXNzPSdiYWNrIG5hdmlnYXRpb24nPkJhY2s8L2J1dHRvbj4gPGgxPlRhbmdlcmluZSBDZW50cmFsIEltcG9ydDwvaDE+IFwiICsgaW1wb3J0U3RlcCk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRJbXBvcnRWaWV3LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgfTtcblxuICByZXR1cm4gQXNzZXNzbWVudEltcG9ydFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBBc3Nlc3NtZW50U3luY1ZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcIkFzc2Vzc21lbnRTeW5jVmlld1wiXG5cbiAgZXZlbnRzOlxuICAgIFwiY2xpY2sgLmJhY2tcIiA6IFwiZ29CYWNrXCJcbiAgICBcImNsaWNrIC5zaG93X2RldGFpbHNcIiA6IFwic2hvd0RldGFpbHNcIlxuICAgIFwiY2xpY2sgLmtlZXBcIiA6IFwia2VlcFwiXG4gICAgXCJjbGljayAuc2hvd19sb2dpblwiIDogXCJzaG93TG9naW5cIlxuICAgIFwiY2xpY2sgLmxvZ2luXCIgOiBcImxvZ2luXCJcbiAgICBcImNsaWNrIC5kb3dubG9hZFwiIDogXCJkb3dubG9hZFwiXG4gICAgXCJjbGljayAudXBsb2FkXCIgOiBcInVwbG9hZFwiXG5cbiAgZG93bmxvYWQ6ID0+XG5cbiAgICBAZW5zdXJlQ3JlZGVudGlhbHMoKVxuXG4gICAgZ3JvdXBEQiA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImdyb3VwXCIpLnJlcGxhY2UoL1xcL1xcLyguKilALyxcIi8vI3tAdXNlcn06I3tAcGFzc31AXCIpXG4gICAgbG9jYWxEQiA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImxvY2FsXCIpXG5cbiAgICBAZ2V0RG9jSWRzICggZG9jSWRzICkgPT5cblxuICAgICAgJC5jb3VjaC5yZXBsaWNhdGUoXG4gICAgICAgIGdyb3VwREIsICMgZnJvbVxuICAgICAgICBsb2NhbERCLCAjIHRvXG4gICAgICAgICAgc3VjY2VzczogKHJlc3BvbnNlKT0+XG4gICAgICAgICAgICBVdGlscy5taWRBbGVydCBcIkRvd25sb2FkIHN1Y2Nlc3NcIlxuICAgICAgICAgICAgQHVwZGF0ZUNvbmZsaWN0cygpXG4gICAgICAgICAgZXJyb3I6IChhLCBiKSAgICAgID0+IFV0aWxzLm1pZEFsZXJ0IFwiUHVsbCBFcnJvcjxicj4je2F9ICN7Yn1cIlxuICAgICAgICAsXG4gICAgICAgICAgZG9jX2lkczogZG9jSWRzXG4gICAgICApXG5cblxuICB1cGxvYWQ6ID0+XG5cbiAgICBAZW5zdXJlQ3JlZGVudGlhbHMoKVxuXG4gICAgZ3JvdXBEQiA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImdyb3VwXCIpLnJlcGxhY2UoL1xcL1xcLyguKilALyxcIi8vI3tAdXNlcn06I3tAcGFzc31AXCIpXG4gICAgbG9jYWxEQiA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImxvY2FsXCIpXG5cbiAgICBAZ2V0RG9jSWRzICggZG9jSWRzICkgPT5cblxuICAgICAgJC5jb3VjaC5yZXBsaWNhdGUoXG4gICAgICAgIGxvY2FsREIsICMgZnJvbVxuICAgICAgICBncm91cERCLCAjIHRvXG4gICAgICAgICAgc3VjY2VzczogKHJlc3BvbnNlKT0+XG4gICAgICAgICAgICBVdGlscy5taWRBbGVydCBcIlVwbG9hZCBzdWNjZXNzXCJcbiAgICAgICAgICAgIEB1cGRhdGVDb25mbGljdHMoKVxuICAgICAgICAgIGVycm9yOiAoYSwgYikgICAgICA9PiBVdGlscy5taWRBbGVydCBcIlB1bGwgRXJyb3I8YnI+I3thfSAje2J9XCJcbiAgICAgICAgLFxuICAgICAgICAgIGRvY19pZHM6IGRvY0lkc1xuICAgICAgKVxuXG4gIGdldERvY0lkczogKGNhbGxiYWNrKSA9PlxuXG4gICAgZ3JvdXBEQiA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImdyb3VwXCIpLnJlcGxhY2UoL1xcL1xcLyguKilALyxcIi8vXCIpXG4gICAgdGFyZ2V0REIgPSBUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJsb2NhbFwiKVxuXG4gICAgbG9jYWxES2V5ID0gVGFuZ2VyaW5lLnNldHRpbmdzLnVybFZpZXcoXCJsb2NhbFwiLCBcImJ5REtleVwiKVxuICAgIGdyb3VwREtleSA9IChUYW5nZXJpbmUuc2V0dGluZ3MubG9jYXRpb24uZ3JvdXAuZGIrVGFuZ2VyaW5lLnNldHRpbmdzLmNvdWNoLnZpZXcgKyBcImJ5REtleVwiKS5yZXBsYWNlKC9cXC9cXC8oLiopQC8sXCIvL1wiKVxuXG4gICAgJC5hamF4XG4gICAgICB1cmw6IGdyb3VwREtleVxuICAgICAgdHlwZTogXCJHRVRcIlxuICAgICAgZGF0YVR5cGU6IFwianNvbnBcIlxuICAgICAgZGF0YToga2V5czogSlNPTi5zdHJpbmdpZnkoW0BkS2V5XSlcbiAgICAgIGVycm9yOiAoYSwgYikgPT4gVXRpbHMubWlkQWxlcnQgXCJQdWxsIGVycm9yPGJyPiN7YX0gI3tifVwiXG4gICAgICBzdWNjZXNzOiAoZGF0YSkgPT5cbiAgICAgICAgZG9jTGlzdCA9IFtdXG4gICAgICAgIGZvciBkYXR1bSBpbiBkYXRhLnJvd3NcbiAgICAgICAgICBkb2NMaXN0LnB1c2ggZGF0dW0uaWRcblxuICAgICAgICAkLmFqYXhcbiAgICAgICAgICB1cmw6IGxvY2FsREtleVxuICAgICAgICAgIHR5cGU6IFwiUE9TVFwiXG4gICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiXG4gICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoa2V5czpbQGRLZXldKVxuICAgICAgICAgIGVycm9yOiAoYSwgYikgPT4gVXRpbHMubWlkQWxlcnQgXCJQdWxsIGVycm9yPGJyPiN7YX0gI3tifVwiXG4gICAgICAgICAgc3VjY2VzczogKGRhdGEpID0+XG4gICAgICAgICAgICBmb3IgZGF0dW0gaW4gZGF0YS5yb3dzXG4gICAgICAgICAgICAgIGRvY0xpc3QucHVzaCBkYXR1bS5pZFxuICAgICAgICAgICAgZG9jTGlzdCA9IF8udW5pcShkb2NMaXN0KVxuICAgICAgICAgICAgY2FsbGJhY2sgZG9jTGlzdFxuXG5cbiAgc2hvd0xvZ2luOiAtPlxuICAgIEAkZWwuZmluZChcIiN1c2VyXCIpLnZhbChcIlwiKVxuICAgIEAkZWwuZmluZChcIiNwYXNzXCIpLnZhbChcIlwiKVxuICAgIEAkZWwuZmluZChcIi5sb2dpbl9ib3hcIikudG9nZ2xlQ2xhc3MgXCJjb25maXJtYXRpb25cIlxuICAgIEAkZWwuZmluZChcIi5zaG93X2xvZ2luXCIpLnRvZ2dsZSgpXG5cbiAgb25WZXJpZnlTdWNjZXNzOiA9PlxuICAgIGNsZWFyVGltZW91dCBAdGltZXJcbiAgICBAY29ubmVjdGlvblZlcmlmaWVkID0gdHJ1ZVxuICAgIEAkZWwuZmluZChcIiNjb25uZWN0aW9uXCIpLmh0bWwoXCJPa1wiKVxuICAgIEAkZWwuZmluZChcIi5zaG93X2xvZ2luXCIpLnRvZ2dsZSgpXG5cbiAgICBAJGVsLmZpbmQoXCIubG9hZHNcIikucmVtb3ZlQ2xhc3MoXCJjb25maXJtYXRpb25cIilcblxuICBsb2dpbjogLT5cbiAgICBAdXNlciA9IEAkZWwuZmluZChcIiN1c2VyXCIpLnZhbCgpXG4gICAgQHBhc3MgPSBAJGVsLmZpbmQoXCIjcGFzc1wiKS52YWwoKVxuICAgIFRhbmdlcmluZS5zZXR0aW5ncy5zYXZlXG4gICAgICBcInNlcnZlcl91c2VyXCIgOiBAdXNlclxuICAgICAgXCJzZXJ2ZXJfcGFzc1wiIDogQHBhc3NcblxuICAgIFRhbmdlcmluZS51c2VyLmdob3N0TG9naW4oQHVzZXIsIEBwYXNzKVxuXG4gIHZlcmlmeVRpbWVvdXQ6ID0+XG4gICAgQCRlbC5maW5kKFwiI2Nvbm5lY3Rpb25cIikuaHRtbCBAbG9naW5CdXR0b24oc3RhdHVzOlwiPGJyPkZhaWxlZC4gQ2hlY2sgY29ubmVjdGlvbiBvciB0cnkgYWdhaW4uXCIpXG4gICAgQCRlbC5maW5kKFwiLmxvYWRzXCIpLmFkZENsYXNzKFwiY29uZmlybWF0aW9uXCIpXG4gICAgQHJlbW92ZUNyZWRlbnRpYWxzKClcblxuICBrZWVwOiAoZXZlbnQpIC0+XG5cbiAgICByZXR1cm4gdW5sZXNzIGNvbmZpcm0gXCJUaGlzIHdpbGwgcGVybWFuZW50bHkgcmVtb3ZlIHRoZSBvdGhlciB2ZXJzaW9ucywgYXJlIHlvdSBzdXJlP1wiXG5cbiAgICBAZGVsZXRlZENvdW50ID0gMFxuICAgIEB0b0RlbGV0ZUNvdW50ID0gMFxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcblxuICAgIGRvY0lkICA9ICR0YXJnZXQuYXR0cihcImRhdGEtZG9jSWRcIilcbiAgICBkb2NSZXYgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLWRvY1JldlwiKVxuXG4gICAgZG9jc0J5SWQgPSBfLmluZGV4QnkgXCJfaWRcIiwgQGxvYWRlZERvY3NcblxuICAgIG9uQ29tcGxldGUgPSAocmVzcG9uc2UpID0+XG4gICAgICBAZGVsZXRlZENvdW50KytcblxuICAgICAgQHVwZGF0ZUNvbmZsaWN0cygpIGlmIEBkZWxldGVkQ291bnQgPT0gQHRvRGVsZXRlQ291bnRcblxuICAgIGZvciBkb2MgaW4gZG9jc0J5SWRbZG9jSWRdXG4gICAgICBAdG9EZWxldGVDb3VudCsrIHVubGVzcyBkb2MuX3JldiA9PSBkb2NSZXZcblxuICAgIGZvciBkb2MgaW4gZG9jc0J5SWRbZG9jSWRdXG5cbiAgICAgIGNvbnRpbnVlIGlmIGRvYy5fcmV2ID09IGRvY1JldlxuXG4gICAgICBUYW5nZXJpbmUuJGRiLnJlbW92ZURvY1xuICAgICAgICBcIl9pZFwiICA6IGRvYy5faWRcbiAgICAgICAgXCJfcmV2XCIgOiBkb2MuX3JldlxuICAgICAgLFxuICAgICAgICBzdWNjZXNzOiAocmVzcG9uc2UpID0+IG9uQ29tcGxldGUgcmVzcG9uc2VcbiAgICAgICAgZXJyb3I6IChhLCBiKSA9PlxuICAgICAgICAgIFV0aWxzLmFsZXJ0IFwiRXJyb3I8YnI+I3thfTxicj4je2J9XCJcblxuICBzaG93RGV0YWlsczogKGV2ZW50KSAtPlxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICBkb2NSZXYgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLWRvY1JldlwiKVxuICAgIEAkZWwuZmluZChcIiN0YWJsZV8je2RvY1Jldn1cIikudG9nZ2xlQ2xhc3MgXCJjb25maXJtYXRpb25cIlxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuXG4gICAgQHJlYWR5VGVtcGxhdGVzKClcblxuICAgIEBkb2NMaXN0ID0gW11cblxuICAgIEBhc3Nlc3NtZW50ID0gb3B0aW9ucy5hc3Nlc3NtZW50XG5cbiAgICBAZEtleSA9IEBhc3Nlc3NtZW50LmlkLnN1YnN0cigtNSwgNSlcblxuICAgIEBjb25uZWN0aW9uVmVyaWZpZWQgPSBmYWxzZVxuXG4gICAgQHRpbWVyID0gc2V0VGltZW91dCBAdmVyaWZ5VGltZW91dCwgMjAgKiAxMDAwXG5cbiAgICBAZW5zdXJlQ3JlZGVudGlhbHMoKVxuXG5cbiAgZW5zdXJlQ3JlZGVudGlhbHM6ID0+XG4gICAgaWYgVGFuZ2VyaW5lLnNldHRpbmdzLmdldChcInNlcnZlcl91c2VyXCIpICYmIFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJzZXJ2ZXJfcGFzc1wiKVxuICAgICAgQHVzZXIgPSBUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0KFwic2VydmVyX3VzZXJcIilcbiAgICAgIEBwYXNzID0gVGFuZ2VyaW5lLnNldHRpbmdzLmdldChcInNlcnZlcl9wYXNzXCIpXG5cblxuICBnb0JhY2s6IC0+XG4gICAgVGFuZ2VyaW5lLnJvdXRlci5sYW5kaW5nKClcblxuICByZW5kZXI6IC0+XG5cbiAgICBuYW1lID0gQGFzc2Vzc21lbnQuZ2V0RXNjYXBlZFN0cmluZyhcIm5hbWVcIilcblxuICAgIGNvbm5lY3Rpb25Cb3ggPSBcIlxuICAgICAgPGRpdiBjbGFzcz0naW5mb19ib3ggZ3JleSc+XG4gICAgICAgIFNlcnZlciBjb25uZWN0aW9uPGJyPlxuICAgICAgICA8c3BhbiBpZD0nY29ubmVjdGlvbic+I3tAbG9naW5CdXR0b24oe3N0YXR1czpcIkNoZWNraW5nLi4uXCJ9KX08L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICBcIiBpZiBUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0Qm9vbGVhbihcInNhdGVsbGl0ZU1vZGVcIilcblxuICAgIEAkZWwuaHRtbCBcIlxuXG4gICAgICA8YnV0dG9uIGNsYXNzPSdiYWNrIG5hdmlnYXRpb24nPkJhY2s8L2J1dHRvbj5cblxuICAgICAgPGgxPkFzc2Vzc21lbnQgU3luYzwvaDE+XG5cbiAgICAgIDxoMj4je25hbWV9PC9oMj5cblxuICAgICAgI3tjb25uZWN0aW9uQm94IHx8IFwiXCJ9XG4gICAgICA8YnI+XG4gICAgICA8ZGl2IGNsYXNzPSdsb2FkcyBjb25maXJtYXRpb24nPlxuICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCB1cGxvYWQnPlVwbG9hZDwvYnV0dG9uPjxicj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIGRvd25sb2FkJz5Eb3dubG9hZDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGgyPkNvbmZsaWN0czwvaDI+XG4gICAgICA8ZGl2IGlkPSdjb25mbGljdHMnPjwvZGl2PlxuXG4gICAgXCJcblxuICAgIEB1cGRhdGVDb25mbGljdHMoKVxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgYWZ0ZXJSZW5kZXI6IC0+XG4gICAgaWYgQHVzZXIgYW5kIEBwYXNzXG4gICAgICAkLmFqYXhcbiAgICAgICAgdXJsOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsVmlldyhcImdyb3VwXCIsIFwiYnlES2V5XCIpLnJlcGxhY2UoL1xcL1xcLyguKilALyxcIi8vI3tAdXNlcn06I3tAcGFzc31AXCIpXG4gICAgICAgIGRhdGFUeXBlOiBcImpzb25wXCJcbiAgICAgICAgZGF0YToga2V5czogW1widGVzdHRlc3RcIl1cbiAgICAgICAgdGltZW91dDogMTUwMDBcbiAgICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgICBjbGVhclRpbWVvdXQgQHRpbWVyXG4gICAgICAgICAgQG9uVmVyaWZ5U3VjY2VzcygpXG4gICAgZWxzZVxuICAgICAgY2xlYXJUaW1lb3V0IEB0aW1lclxuICAgICAgQHZlcmlmeVRpbWVvdXQoKVxuXG5cbiAgdXBkYXRlQ29uZmxpY3RzOiAtPlxuXG4gICAgVXRpbHMud29ya2luZyB0cnVlXG4gICAgVGFuZ2VyaW5lLiRkYi52aWV3IFwiI3tUYW5nZXJpbmUuZGVzaWduX2RvY30vY29uZmxpY3RzQnlES2V5XCIsXG4gICAgICBlcnJvcjogKGEsIGIpIC0+IFV0aWxzLm1pZEFsZXJ0IFwiRXJyb3I8YnI+I3thfTxicj4je2J9XCI7IFV0aWxzLndvcmtpbmcgZmFsc2VcbiAgICAgIHN1Y2Nlc3M6IChyZXNwb25zZSkgPT5cbiAgICAgICAgVXRpbHMud29ya2luZyBmYWxzZVxuXG4gICAgICAgIGlmIHJlc3BvbnNlLnJvd3MubGVuZ3RoID09IDBcbiAgICAgICAgICBAJGVsLmZpbmQoXCIjY29uZmxpY3RzXCIpLmh0bWwgXCI8ZGl2IGNsYXNzPSdncmV5Jz5Ob25lPC9kaXY+XCJcbiAgICAgICAgICByZXR1cm5cblxuICAgICAgICBAbG9hZGVkRG9jcyA9IFtdXG5cbiAgICAgICAgcm93cyA9IF8ucGx1Y2socmVzcG9uc2Uucm93cywgXCJ2YWx1ZVwiKVxuXG4gICAgICAgIG9uQ29tcGxldGUgPSAob25lRG9jKSA9PlxuICAgICAgICAgIEBsb2FkZWREb2NzLnB1c2ggb25lRG9jXG4gICAgICAgICAgdG90YWwgPSByb3dzLmxlbmd0aFxuICAgICAgICAgIHJldHVybiB1bmxlc3MgQGxvYWRlZERvY3MubGVuZ3RoID09IHRvdGFsXG5cbiAgICAgICAgICBodG1sID0gXCJcIlxuICAgICAgICAgIGRvY3NCeUlkID0gXy5pbmRleEJ5IFwiX2lkXCIsIEBsb2FkZWREb2NzXG5cbiAgICAgICAgICBkb2NDb3VudCA9IDFcbiAgICAgICAgICBmb3IgZG9jSWQsIGRvYyBvZiBkb2NzQnlJZFxuXG4gICAgICAgICAgICBodG1sICs9IFwiXG4gICAgICAgICAgICAgIDxiPkRvY3VtZW50IENvbmZsaWN0ICN7ZG9jQ291bnR9ICN7ZG9jWzBdLmNvbGxlY3Rpb24uY2FwaXRhbGl6ZSgpfTwvYj5cbiAgICAgICAgICAgIFwiXG5cbiAgICAgICAgICAgIGNvbWJpbmVkID0ge31cbiAgICAgICAgICAgIGZvciByZXYgaW4gZG9jXG4gICAgICAgICAgICAgIGZvciBrZXksIHZhbHVlIG9mIHJldlxuICAgICAgICAgICAgICAgIGNvbWJpbmVkW2tleV0gPSBbXSBpZiBub3QgY29tYmluZWRba2V5XT9cbiAgICAgICAgICAgICAgICBjb21iaW5lZFtrZXldLnB1c2ggSlNPTi5zdHJpbmdpZnkodmFsdWUpXG5cbiAgICAgICAgICAgIGRpZmZlcmVuY2VzID0gW11cbiAgICAgICAgICAgIGZvciBrZXksIHZhbHVlIG9mIGNvbWJpbmVkXG4gICAgICAgICAgICAgIGRpZmZlcmVuY2VzLnB1c2goa2V5KSBpZiBfLnVuaXEodmFsdWUpLmxlbmd0aCA+IDFcblxuICAgICAgICAgICAgcmV2Q291bnQgPSAxXG4gICAgICAgICAgICBmb3IgcmV2IGluIGRvY1xuICAgICAgICAgICAgICBwcmVzZW50YWJsZXMgPSB7fVxuICAgICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBvZiByZXZcbiAgICAgICAgICAgICAgICBjb250aW51ZSBpZiBrZXkgaW4gWydfcmV2JywgJ19pZCcsJ2hhc2gnLCd1cGRhdGVkJywnZWRpdGVkQnknLCBcImFzc2Vzc21lbnRJZFwiLCBcImN1cnJpY3VsdW1JZFwiXVxuICAgICAgICAgICAgICAgIHByZXNlbnRhYmxlc1trZXldID0gdmFsdWVcbiAgICAgICAgICAgICAgaHRtbCArPSBcIlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgICAgICAgPGgzPlZlcnNpb24gI3tyZXZDb3VudCsrfTwvaDM+XG4gICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdjb25mbGljdF90YWJsZSc+XG4gICAgICAgICAgICAgICAgICA8dHI+PHRkPjxiPiN7cmV2Lm5hbWV9PC9iPjwvdGQ+PHRkPjxidXR0b24gY2xhc3M9J2NvbW1hbmQga2VlcCcgZGF0YS1kb2NJZD0nI3tyZXYuX2lkfScgZGF0YS1kb2NSZXY9JyN7cmV2Ll9yZXZ9Jz5LZWVwPC9idXR0b24+PC90ZD48L3RyPlxuICAgICAgICAgICAgICAgICAgPHRyPjx0aD5VcGRhdGVkPC90aD48dGQ+I3tyZXYudXBkYXRlZH08L3RkPjwvdHI+XG4gICAgICAgICAgICAgICAgICA8dHI+PHRoPkVkaXRlZCBieTwvdGg+PHRkPiN7cmV2LmVkaXRlZEJ5fTwvdGQ+PC90cj5cbiAgICAgICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQgc2hvd19kZXRhaWxzJyBkYXRhLWRvY1Jldj0nI3tyZXYuX3Jldn0nPlNob3cgZGV0YWlsczwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0nY29uZmlybWF0aW9uIGNvbmZsaWN0X3RhYmxlJyBpZD0ndGFibGVfI3tyZXYuX3Jldn0nPlxuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgIGZvciBrZXksIHZhbHVlIG9mIHByZXNlbnRhYmxlc1xuICAgICAgICAgICAgICAgIGhLZXkgPVxuICAgICAgICAgICAgICAgICAgaWYga2V5IGluIGRpZmZlcmVuY2VzXG4gICAgICAgICAgICAgICAgICAgIFwiPGIgY2xhc3M9J2NvbmZsaWN0X2tleSc+I3trZXl9PC9iPlwiXG4gICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGtleVxuICAgICAgICAgICAgICAgIGh0bWwgKz0gXCI8dHI+PHRoPiN7aEtleX08L3RoPjx0ZD4je0pTT04uc3RyaW5naWZ5KHZhbHVlKX08L3RkPjwvdHI+XCJcbiAgICAgICAgICAgICAgaHRtbCArPSBcIlxuICAgICAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgIFwiXG5cblxuICAgICAgICAgICAgZG9jQ291bnQrK1xuXG4gICAgICAgICAgQCRlbC5maW5kKFwiI2NvbmZsaWN0c1wiKS5odG1sIGh0bWxcblxuICAgICAgICBmb3Igcm93IGluIHJvd3NcbiAgICAgICAgICAkLmFqYXhcbiAgICAgICAgICAgIHVybDogXCIvI3tUYW5nZXJpbmUuZGJfbmFtZX0vI3tyb3cuX2lkfT9yZXY9I3tyb3cuX3Jldn1cIlxuICAgICAgICAgICAgdHlwZTogXCJnZXRcIlxuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiXG4gICAgICAgICAgICBzdWNjZXNzOiAoZG9jKSAtPiBvbkNvbXBsZXRlIGRvY1xuXG5cbiAgICAgICAgcmV0dXJuXG5cblxuICAgIHJldHVybiB7fVxuXG4gIG9uQ2xvc2U6IC0+XG4gICAgY2xlYXJUaW1lb3V0IEB0aW1lclxuXG4gIHJlbW92ZUNyZWRlbnRpYWxzOiAtPlxuICAgIFRhbmdlcmluZS5zZXR0aW5ncy51bnNldChcInNlcnZlcl91c2VyXCIpXG4gICAgVGFuZ2VyaW5lLnNldHRpbmdzLnVuc2V0KFwic2VydmVyX3Bhc3NcIilcbiAgICBUYW5nZXJpbmUuc2V0dGluZ3Muc2F2ZSgpXG5cbiAgcmVhZHlUZW1wbGF0ZXM6IC0+XG4gICAgQGxvZ2luQnV0dG9uID0gXy50ZW1wbGF0ZShcInt7c3RhdHVzfX1cbiAgICA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHNob3dfbG9naW4nPkxvZ2luPC9idXR0b24+PGJyPlxuICAgIDxkaXYgY2xhc3M9J2NvbmZpcm1hdGlvbiBsb2dpbl9ib3gnPlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGZvcj0ndXNlcic+VXNlcm5hbWU8L2xhYmVsPjxpbnB1dCBpZD0ndXNlcicgdHlwZT0ndGV4dCc+PGJyPlxuICAgICAgICA8bGFiZWwgZm9yPSdwYXNzJz5QYXNzd29yZDwvbGFiZWw+PGlucHV0IGlkPSdwYXNzJyB0eXBlPSdwYXNzd29yZCc+XG4gICAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQgbG9naW4nPkxvZ2luPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgXCIpXG4iLCJ2YXIgQXNzZXNzbWVudFN5bmNWaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gIGluZGV4T2YgPSBbXS5pbmRleE9mIHx8IGZ1bmN0aW9uKGl0ZW0pIHsgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykgeyBpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHJldHVybiBpOyB9IHJldHVybiAtMTsgfTtcblxuQXNzZXNzbWVudFN5bmNWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEFzc2Vzc21lbnRTeW5jVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQXNzZXNzbWVudFN5bmNWaWV3KCkge1xuICAgIHRoaXMuZW5zdXJlQ3JlZGVudGlhbHMgPSBiaW5kKHRoaXMuZW5zdXJlQ3JlZGVudGlhbHMsIHRoaXMpO1xuICAgIHRoaXMudmVyaWZ5VGltZW91dCA9IGJpbmQodGhpcy52ZXJpZnlUaW1lb3V0LCB0aGlzKTtcbiAgICB0aGlzLm9uVmVyaWZ5U3VjY2VzcyA9IGJpbmQodGhpcy5vblZlcmlmeVN1Y2Nlc3MsIHRoaXMpO1xuICAgIHRoaXMuZ2V0RG9jSWRzID0gYmluZCh0aGlzLmdldERvY0lkcywgdGhpcyk7XG4gICAgdGhpcy51cGxvYWQgPSBiaW5kKHRoaXMudXBsb2FkLCB0aGlzKTtcbiAgICB0aGlzLmRvd25sb2FkID0gYmluZCh0aGlzLmRvd25sb2FkLCB0aGlzKTtcbiAgICByZXR1cm4gQXNzZXNzbWVudFN5bmNWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgQXNzZXNzbWVudFN5bmNWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIkFzc2Vzc21lbnRTeW5jVmlld1wiO1xuXG4gIEFzc2Vzc21lbnRTeW5jVmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgIFwiY2xpY2sgLmJhY2tcIjogXCJnb0JhY2tcIixcbiAgICBcImNsaWNrIC5zaG93X2RldGFpbHNcIjogXCJzaG93RGV0YWlsc1wiLFxuICAgIFwiY2xpY2sgLmtlZXBcIjogXCJrZWVwXCIsXG4gICAgXCJjbGljayAuc2hvd19sb2dpblwiOiBcInNob3dMb2dpblwiLFxuICAgIFwiY2xpY2sgLmxvZ2luXCI6IFwibG9naW5cIixcbiAgICBcImNsaWNrIC5kb3dubG9hZFwiOiBcImRvd25sb2FkXCIsXG4gICAgXCJjbGljayAudXBsb2FkXCI6IFwidXBsb2FkXCJcbiAgfTtcblxuICBBc3Nlc3NtZW50U3luY1ZpZXcucHJvdG90eXBlLmRvd25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdyb3VwREIsIGxvY2FsREI7XG4gICAgdGhpcy5lbnN1cmVDcmVkZW50aWFscygpO1xuICAgIGdyb3VwREIgPSBUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJncm91cFwiKS5yZXBsYWNlKC9cXC9cXC8oLiopQC8sIFwiLy9cIiArIHRoaXMudXNlciArIFwiOlwiICsgdGhpcy5wYXNzICsgXCJAXCIpO1xuICAgIGxvY2FsREIgPSBUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJsb2NhbFwiKTtcbiAgICByZXR1cm4gdGhpcy5nZXREb2NJZHMoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZG9jSWRzKSB7XG4gICAgICAgIHJldHVybiAkLmNvdWNoLnJlcGxpY2F0ZShncm91cERCLCBsb2NhbERCLCB7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiRG93bmxvYWQgc3VjY2Vzc1wiKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVDb25mbGljdHMoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQoXCJQdWxsIEVycm9yPGJyPlwiICsgYSArIFwiIFwiICsgYik7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZG9jX2lkczogZG9jSWRzXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gIH07XG5cbiAgQXNzZXNzbWVudFN5bmNWaWV3LnByb3RvdHlwZS51cGxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZ3JvdXBEQiwgbG9jYWxEQjtcbiAgICB0aGlzLmVuc3VyZUNyZWRlbnRpYWxzKCk7XG4gICAgZ3JvdXBEQiA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImdyb3VwXCIpLnJlcGxhY2UoL1xcL1xcLyguKilALywgXCIvL1wiICsgdGhpcy51c2VyICsgXCI6XCIgKyB0aGlzLnBhc3MgKyBcIkBcIik7XG4gICAgbG9jYWxEQiA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImxvY2FsXCIpO1xuICAgIHJldHVybiB0aGlzLmdldERvY0lkcygoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihkb2NJZHMpIHtcbiAgICAgICAgcmV0dXJuICQuY291Y2gucmVwbGljYXRlKGxvY2FsREIsIGdyb3VwREIsIHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQoXCJVcGxvYWQgc3VjY2Vzc1wiKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVDb25mbGljdHMoKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQoXCJQdWxsIEVycm9yPGJyPlwiICsgYSArIFwiIFwiICsgYik7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZG9jX2lkczogZG9jSWRzXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gIH07XG5cbiAgQXNzZXNzbWVudFN5bmNWaWV3LnByb3RvdHlwZS5nZXREb2NJZHMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBncm91cERCLCBncm91cERLZXksIGxvY2FsREtleSwgdGFyZ2V0REI7XG4gICAgZ3JvdXBEQiA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImdyb3VwXCIpLnJlcGxhY2UoL1xcL1xcLyguKilALywgXCIvL1wiKTtcbiAgICB0YXJnZXREQiA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImxvY2FsXCIpO1xuICAgIGxvY2FsREtleSA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxWaWV3KFwibG9jYWxcIiwgXCJieURLZXlcIik7XG4gICAgZ3JvdXBES2V5ID0gKFRhbmdlcmluZS5zZXR0aW5ncy5sb2NhdGlvbi5ncm91cC5kYiArIFRhbmdlcmluZS5zZXR0aW5ncy5jb3VjaC52aWV3ICsgXCJieURLZXlcIikucmVwbGFjZSgvXFwvXFwvKC4qKUAvLCBcIi8vXCIpO1xuICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgdXJsOiBncm91cERLZXksXG4gICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgZGF0YVR5cGU6IFwianNvbnBcIixcbiAgICAgIGRhdGE6IHtcbiAgICAgICAga2V5czogSlNPTi5zdHJpbmdpZnkoW3RoaXMuZEtleV0pXG4gICAgICB9LFxuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIlB1bGwgZXJyb3I8YnI+XCIgKyBhICsgXCIgXCIgKyBiKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgdmFyIGRhdHVtLCBkb2NMaXN0LCBpLCBsZW4sIHJlZjtcbiAgICAgICAgICBkb2NMaXN0ID0gW107XG4gICAgICAgICAgcmVmID0gZGF0YS5yb3dzO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgZGF0dW0gPSByZWZbaV07XG4gICAgICAgICAgICBkb2NMaXN0LnB1c2goZGF0dW0uaWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogbG9jYWxES2V5LFxuICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgIGtleXM6IFtfdGhpcy5kS2V5XVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQoXCJQdWxsIGVycm9yPGJyPlwiICsgYSArIFwiIFwiICsgYik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICB2YXIgaiwgbGVuMSwgcmVmMTtcbiAgICAgICAgICAgICAgcmVmMSA9IGRhdGEucm93cztcbiAgICAgICAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgICAgICAgICAgZGF0dW0gPSByZWYxW2pdO1xuICAgICAgICAgICAgICAgIGRvY0xpc3QucHVzaChkYXR1bS5pZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZG9jTGlzdCA9IF8udW5pcShkb2NMaXN0KTtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGRvY0xpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBBc3Nlc3NtZW50U3luY1ZpZXcucHJvdG90eXBlLnNob3dMb2dpbiA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGVsLmZpbmQoXCIjdXNlclwiKS52YWwoXCJcIik7XG4gICAgdGhpcy4kZWwuZmluZChcIiNwYXNzXCIpLnZhbChcIlwiKTtcbiAgICB0aGlzLiRlbC5maW5kKFwiLmxvZ2luX2JveFwiKS50b2dnbGVDbGFzcyhcImNvbmZpcm1hdGlvblwiKTtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5zaG93X2xvZ2luXCIpLnRvZ2dsZSgpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRTeW5jVmlldy5wcm90b3R5cGUub25WZXJpZnlTdWNjZXNzID0gZnVuY3Rpb24oKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgIHRoaXMuY29ubmVjdGlvblZlcmlmaWVkID0gdHJ1ZTtcbiAgICB0aGlzLiRlbC5maW5kKFwiI2Nvbm5lY3Rpb25cIikuaHRtbChcIk9rXCIpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIuc2hvd19sb2dpblwiKS50b2dnbGUoKTtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5sb2Fkc1wiKS5yZW1vdmVDbGFzcyhcImNvbmZpcm1hdGlvblwiKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50U3luY1ZpZXcucHJvdG90eXBlLmxvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy51c2VyID0gdGhpcy4kZWwuZmluZChcIiN1c2VyXCIpLnZhbCgpO1xuICAgIHRoaXMucGFzcyA9IHRoaXMuJGVsLmZpbmQoXCIjcGFzc1wiKS52YWwoKTtcbiAgICBUYW5nZXJpbmUuc2V0dGluZ3Muc2F2ZSh7XG4gICAgICBcInNlcnZlcl91c2VyXCI6IHRoaXMudXNlcixcbiAgICAgIFwic2VydmVyX3Bhc3NcIjogdGhpcy5wYXNzXG4gICAgfSk7XG4gICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLmdob3N0TG9naW4odGhpcy51c2VyLCB0aGlzLnBhc3MpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRTeW5jVmlldy5wcm90b3R5cGUudmVyaWZ5VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGVsLmZpbmQoXCIjY29ubmVjdGlvblwiKS5odG1sKHRoaXMubG9naW5CdXR0b24oe1xuICAgICAgc3RhdHVzOiBcIjxicj5GYWlsZWQuIENoZWNrIGNvbm5lY3Rpb24gb3IgdHJ5IGFnYWluLlwiXG4gICAgfSkpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIubG9hZHNcIikuYWRkQ2xhc3MoXCJjb25maXJtYXRpb25cIik7XG4gICAgcmV0dXJuIHRoaXMucmVtb3ZlQ3JlZGVudGlhbHMoKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50U3luY1ZpZXcucHJvdG90eXBlLmtlZXAgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCBkb2MsIGRvY0lkLCBkb2NSZXYsIGRvY3NCeUlkLCBpLCBqLCBsZW4sIGxlbjEsIG9uQ29tcGxldGUsIHJlZiwgcmVmMSwgcmVzdWx0cztcbiAgICBpZiAoIWNvbmZpcm0oXCJUaGlzIHdpbGwgcGVybWFuZW50bHkgcmVtb3ZlIHRoZSBvdGhlciB2ZXJzaW9ucywgYXJlIHlvdSBzdXJlP1wiKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRlbGV0ZWRDb3VudCA9IDA7XG4gICAgdGhpcy50b0RlbGV0ZUNvdW50ID0gMDtcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgIGRvY0lkID0gJHRhcmdldC5hdHRyKFwiZGF0YS1kb2NJZFwiKTtcbiAgICBkb2NSZXYgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLWRvY1JldlwiKTtcbiAgICBkb2NzQnlJZCA9IF8uaW5kZXhCeShcIl9pZFwiLCB0aGlzLmxvYWRlZERvY3MpO1xuICAgIG9uQ29tcGxldGUgPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICBfdGhpcy5kZWxldGVkQ291bnQrKztcbiAgICAgICAgaWYgKF90aGlzLmRlbGV0ZWRDb3VudCA9PT0gX3RoaXMudG9EZWxldGVDb3VudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVDb25mbGljdHMoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSh0aGlzKTtcbiAgICByZWYgPSBkb2NzQnlJZFtkb2NJZF07XG4gICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBkb2MgPSByZWZbaV07XG4gICAgICBpZiAoZG9jLl9yZXYgIT09IGRvY1Jldikge1xuICAgICAgICB0aGlzLnRvRGVsZXRlQ291bnQrKztcbiAgICAgIH1cbiAgICB9XG4gICAgcmVmMSA9IGRvY3NCeUlkW2RvY0lkXTtcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICBkb2MgPSByZWYxW2pdO1xuICAgICAgaWYgKGRvYy5fcmV2ID09PSBkb2NSZXYpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHRzLnB1c2goVGFuZ2VyaW5lLiRkYi5yZW1vdmVEb2Moe1xuICAgICAgICBcIl9pZFwiOiBkb2MuX2lkLFxuICAgICAgICBcIl9yZXZcIjogZG9jLl9yZXZcbiAgICAgIH0sIHtcbiAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gb25Db21wbGV0ZShyZXNwb25zZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcyksXG4gICAgICAgIGVycm9yOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIFV0aWxzLmFsZXJ0KFwiRXJyb3I8YnI+XCIgKyBhICsgXCI8YnI+XCIgKyBiKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKVxuICAgICAgfSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBBc3Nlc3NtZW50U3luY1ZpZXcucHJvdG90eXBlLnNob3dEZXRhaWxzID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldCwgZG9jUmV2O1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgZG9jUmV2ID0gJHRhcmdldC5hdHRyKFwiZGF0YS1kb2NSZXZcIik7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjdGFibGVfXCIgKyBkb2NSZXYpLnRvZ2dsZUNsYXNzKFwiY29uZmlybWF0aW9uXCIpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRTeW5jVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLnJlYWR5VGVtcGxhdGVzKCk7XG4gICAgdGhpcy5kb2NMaXN0ID0gW107XG4gICAgdGhpcy5hc3Nlc3NtZW50ID0gb3B0aW9ucy5hc3Nlc3NtZW50O1xuICAgIHRoaXMuZEtleSA9IHRoaXMuYXNzZXNzbWVudC5pZC5zdWJzdHIoLTUsIDUpO1xuICAgIHRoaXMuY29ubmVjdGlvblZlcmlmaWVkID0gZmFsc2U7XG4gICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQodGhpcy52ZXJpZnlUaW1lb3V0LCAyMCAqIDEwMDApO1xuICAgIHJldHVybiB0aGlzLmVuc3VyZUNyZWRlbnRpYWxzKCk7XG4gIH07XG5cbiAgQXNzZXNzbWVudFN5bmNWaWV3LnByb3RvdHlwZS5lbnN1cmVDcmVkZW50aWFscyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0KFwic2VydmVyX3VzZXJcIikgJiYgVGFuZ2VyaW5lLnNldHRpbmdzLmdldChcInNlcnZlcl9wYXNzXCIpKSB7XG4gICAgICB0aGlzLnVzZXIgPSBUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0KFwic2VydmVyX3VzZXJcIik7XG4gICAgICByZXR1cm4gdGhpcy5wYXNzID0gVGFuZ2VyaW5lLnNldHRpbmdzLmdldChcInNlcnZlcl9wYXNzXCIpO1xuICAgIH1cbiAgfTtcblxuICBBc3Nlc3NtZW50U3luY1ZpZXcucHJvdG90eXBlLmdvQmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLmxhbmRpbmcoKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50U3luY1ZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb25uZWN0aW9uQm94LCBuYW1lO1xuICAgIG5hbWUgPSB0aGlzLmFzc2Vzc21lbnQuZ2V0RXNjYXBlZFN0cmluZyhcIm5hbWVcIik7XG4gICAgaWYgKFRhbmdlcmluZS5zZXR0aW5ncy5nZXRCb29sZWFuKFwic2F0ZWxsaXRlTW9kZVwiKSkge1xuICAgICAgY29ubmVjdGlvbkJveCA9IFwiPGRpdiBjbGFzcz0naW5mb19ib3ggZ3JleSc+IFNlcnZlciBjb25uZWN0aW9uPGJyPiA8c3BhbiBpZD0nY29ubmVjdGlvbic+XCIgKyAodGhpcy5sb2dpbkJ1dHRvbih7XG4gICAgICAgIHN0YXR1czogXCJDaGVja2luZy4uLlwiXG4gICAgICB9KSkgKyBcIjwvc3Bhbj4gPC9kaXY+XCI7XG4gICAgfVxuICAgIHRoaXMuJGVsLmh0bWwoXCI8YnV0dG9uIGNsYXNzPSdiYWNrIG5hdmlnYXRpb24nPkJhY2s8L2J1dHRvbj4gPGgxPkFzc2Vzc21lbnQgU3luYzwvaDE+IDxoMj5cIiArIG5hbWUgKyBcIjwvaDI+IFwiICsgKGNvbm5lY3Rpb25Cb3ggfHwgXCJcIikgKyBcIiA8YnI+IDxkaXYgY2xhc3M9J2xvYWRzIGNvbmZpcm1hdGlvbic+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCB1cGxvYWQnPlVwbG9hZDwvYnV0dG9uPjxicj4gPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBkb3dubG9hZCc+RG93bmxvYWQ8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8aDI+Q29uZmxpY3RzPC9oMj4gPGRpdiBpZD0nY29uZmxpY3RzJz48L2Rpdj5cIik7XG4gICAgdGhpcy51cGRhdGVDb25mbGljdHMoKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgQXNzZXNzbWVudFN5bmNWaWV3LnByb3RvdHlwZS5hZnRlclJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnVzZXIgJiYgdGhpcy5wYXNzKSB7XG4gICAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgICAgdXJsOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsVmlldyhcImdyb3VwXCIsIFwiYnlES2V5XCIpLnJlcGxhY2UoL1xcL1xcLyguKilALywgXCIvL1wiICsgdGhpcy51c2VyICsgXCI6XCIgKyB0aGlzLnBhc3MgKyBcIkBcIiksXG4gICAgICAgIGRhdGFUeXBlOiBcImpzb25wXCIsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBrZXlzOiBbXCJ0ZXN0dGVzdFwiXVxuICAgICAgICB9LFxuICAgICAgICB0aW1lb3V0OiAxNTAwMCxcbiAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVyKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5vblZlcmlmeVN1Y2Nlc3MoKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcbiAgICAgIHJldHVybiB0aGlzLnZlcmlmeVRpbWVvdXQoKTtcbiAgICB9XG4gIH07XG5cbiAgQXNzZXNzbWVudFN5bmNWaWV3LnByb3RvdHlwZS51cGRhdGVDb25mbGljdHMgPSBmdW5jdGlvbigpIHtcbiAgICBVdGlscy53b3JraW5nKHRydWUpO1xuICAgIFRhbmdlcmluZS4kZGIudmlldyhUYW5nZXJpbmUuZGVzaWduX2RvYyArIFwiL2NvbmZsaWN0c0J5REtleVwiLCB7XG4gICAgICBlcnJvcjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICBVdGlscy5taWRBbGVydChcIkVycm9yPGJyPlwiICsgYSArIFwiPGJyPlwiICsgYik7XG4gICAgICAgIHJldHVybiBVdGlscy53b3JraW5nKGZhbHNlKTtcbiAgICAgIH0sXG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgdmFyIGksIGxlbiwgb25Db21wbGV0ZSwgcm93LCByb3dzO1xuICAgICAgICAgIFV0aWxzLndvcmtpbmcoZmFsc2UpO1xuICAgICAgICAgIGlmIChyZXNwb25zZS5yb3dzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgX3RoaXMuJGVsLmZpbmQoXCIjY29uZmxpY3RzXCIpLmh0bWwoXCI8ZGl2IGNsYXNzPSdncmV5Jz5Ob25lPC9kaXY+XCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpcy5sb2FkZWREb2NzID0gW107XG4gICAgICAgICAgcm93cyA9IF8ucGx1Y2socmVzcG9uc2Uucm93cywgXCJ2YWx1ZVwiKTtcbiAgICAgICAgICBvbkNvbXBsZXRlID0gZnVuY3Rpb24ob25lRG9jKSB7XG4gICAgICAgICAgICB2YXIgY29tYmluZWQsIGRpZmZlcmVuY2VzLCBkb2MsIGRvY0NvdW50LCBkb2NJZCwgZG9jc0J5SWQsIGhLZXksIGh0bWwsIGksIGosIGtleSwgbGVuLCBsZW4xLCBwcmVzZW50YWJsZXMsIHJldiwgcmV2Q291bnQsIHRvdGFsLCB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLmxvYWRlZERvY3MucHVzaChvbmVEb2MpO1xuICAgICAgICAgICAgdG90YWwgPSByb3dzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChfdGhpcy5sb2FkZWREb2NzLmxlbmd0aCAhPT0gdG90YWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHRtbCA9IFwiXCI7XG4gICAgICAgICAgICBkb2NzQnlJZCA9IF8uaW5kZXhCeShcIl9pZFwiLCBfdGhpcy5sb2FkZWREb2NzKTtcbiAgICAgICAgICAgIGRvY0NvdW50ID0gMTtcbiAgICAgICAgICAgIGZvciAoZG9jSWQgaW4gZG9jc0J5SWQpIHtcbiAgICAgICAgICAgICAgZG9jID0gZG9jc0J5SWRbZG9jSWRdO1xuICAgICAgICAgICAgICBodG1sICs9IFwiPGI+RG9jdW1lbnQgQ29uZmxpY3QgXCIgKyBkb2NDb3VudCArIFwiIFwiICsgKGRvY1swXS5jb2xsZWN0aW9uLmNhcGl0YWxpemUoKSkgKyBcIjwvYj5cIjtcbiAgICAgICAgICAgICAgY29tYmluZWQgPSB7fTtcbiAgICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gZG9jLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmV2ID0gZG9jW2ldO1xuICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIHJldikge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSByZXZba2V5XTtcbiAgICAgICAgICAgICAgICAgIGlmIChjb21iaW5lZFtrZXldID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tYmluZWRba2V5XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgY29tYmluZWRba2V5XS5wdXNoKEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRpZmZlcmVuY2VzID0gW107XG4gICAgICAgICAgICAgIGZvciAoa2V5IGluIGNvbWJpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjb21iaW5lZFtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChfLnVuaXEodmFsdWUpLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgIGRpZmZlcmVuY2VzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV2Q291bnQgPSAxO1xuICAgICAgICAgICAgICBmb3IgKGogPSAwLCBsZW4xID0gZG9jLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgICAgICAgIHJldiA9IGRvY1tqXTtcbiAgICAgICAgICAgICAgICBwcmVzZW50YWJsZXMgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiByZXYpIHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlID0gcmV2W2tleV07XG4gICAgICAgICAgICAgICAgICBpZiAoa2V5ID09PSAnX3JldicgfHwga2V5ID09PSAnX2lkJyB8fCBrZXkgPT09ICdoYXNoJyB8fCBrZXkgPT09ICd1cGRhdGVkJyB8fCBrZXkgPT09ICdlZGl0ZWRCeScgfHwga2V5ID09PSBcImFzc2Vzc21lbnRJZFwiIHx8IGtleSA9PT0gXCJjdXJyaWN1bHVtSWRcIikge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHByZXNlbnRhYmxlc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGh0bWwgKz0gXCI8ZGl2IGNsYXNzPSdtZW51X2JveCc+IDxoMz5WZXJzaW9uIFwiICsgKHJldkNvdW50KyspICsgXCI8L2gzPiA8dGFibGUgY2xhc3M9J2NvbmZsaWN0X3RhYmxlJz4gPHRyPjx0ZD48Yj5cIiArIHJldi5uYW1lICsgXCI8L2I+PC90ZD48dGQ+PGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBrZWVwJyBkYXRhLWRvY0lkPSdcIiArIHJldi5faWQgKyBcIicgZGF0YS1kb2NSZXY9J1wiICsgcmV2Ll9yZXYgKyBcIic+S2VlcDwvYnV0dG9uPjwvdGQ+PC90cj4gPHRyPjx0aD5VcGRhdGVkPC90aD48dGQ+XCIgKyByZXYudXBkYXRlZCArIFwiPC90ZD48L3RyPiA8dHI+PHRoPkVkaXRlZCBieTwvdGg+PHRkPlwiICsgcmV2LmVkaXRlZEJ5ICsgXCI8L3RkPjwvdHI+IDwvdGFibGU+IDxidXR0b24gY2xhc3M9J2NvbW1hbmQgc2hvd19kZXRhaWxzJyBkYXRhLWRvY1Jldj0nXCIgKyByZXYuX3JldiArIFwiJz5TaG93IGRldGFpbHM8L2J1dHRvbj4gPHRhYmxlIGNsYXNzPSdjb25maXJtYXRpb24gY29uZmxpY3RfdGFibGUnIGlkPSd0YWJsZV9cIiArIHJldi5fcmV2ICsgXCInPlwiO1xuICAgICAgICAgICAgICAgIGZvciAoa2V5IGluIHByZXNlbnRhYmxlcykge1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwcmVzZW50YWJsZXNba2V5XTtcbiAgICAgICAgICAgICAgICAgIGhLZXkgPSBpbmRleE9mLmNhbGwoZGlmZmVyZW5jZXMsIGtleSkgPj0gMCA/IFwiPGIgY2xhc3M9J2NvbmZsaWN0X2tleSc+XCIgKyBrZXkgKyBcIjwvYj5cIiA6IGtleTtcbiAgICAgICAgICAgICAgICAgIGh0bWwgKz0gXCI8dHI+PHRoPlwiICsgaEtleSArIFwiPC90aD48dGQ+XCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsdWUpKSArIFwiPC90ZD48L3RyPlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBodG1sICs9IFwiPC90YWJsZT4gPC9kaXY+XCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZG9jQ291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy4kZWwuZmluZChcIiNjb25mbGljdHNcIikuaHRtbChodG1sKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJvd3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHJvdyA9IHJvd3NbaV07XG4gICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICB1cmw6IFwiL1wiICsgVGFuZ2VyaW5lLmRiX25hbWUgKyBcIi9cIiArIHJvdy5faWQgKyBcIj9yZXY9XCIgKyByb3cuX3JldixcbiAgICAgICAgICAgICAgdHlwZTogXCJnZXRcIixcbiAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkb2MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb25Db21wbGV0ZShkb2MpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICAgIHJldHVybiB7fTtcbiAgfTtcblxuICBBc3Nlc3NtZW50U3luY1ZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnRTeW5jVmlldy5wcm90b3R5cGUucmVtb3ZlQ3JlZGVudGlhbHMgPSBmdW5jdGlvbigpIHtcbiAgICBUYW5nZXJpbmUuc2V0dGluZ3MudW5zZXQoXCJzZXJ2ZXJfdXNlclwiKTtcbiAgICBUYW5nZXJpbmUuc2V0dGluZ3MudW5zZXQoXCJzZXJ2ZXJfcGFzc1wiKTtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnNldHRpbmdzLnNhdmUoKTtcbiAgfTtcblxuICBBc3Nlc3NtZW50U3luY1ZpZXcucHJvdG90eXBlLnJlYWR5VGVtcGxhdGVzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubG9naW5CdXR0b24gPSBfLnRlbXBsYXRlKFwie3tzdGF0dXN9fSA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHNob3dfbG9naW4nPkxvZ2luPC9idXR0b24+PGJyPiA8ZGl2IGNsYXNzPSdjb25maXJtYXRpb24gbG9naW5fYm94Jz4gPGRpdj4gPGxhYmVsIGZvcj0ndXNlcic+VXNlcm5hbWU8L2xhYmVsPjxpbnB1dCBpZD0ndXNlcicgdHlwZT0ndGV4dCc+PGJyPiA8bGFiZWwgZm9yPSdwYXNzJz5QYXNzd29yZDwvbGFiZWw+PGlucHV0IGlkPSdwYXNzJyB0eXBlPSdwYXNzd29yZCc+IDxidXR0b24gY2xhc3M9J2NvbW1hbmQgbG9naW4nPkxvZ2luPC9idXR0b24+IDwvZGl2PiA8L2Rpdj5cIik7XG4gIH07XG5cbiAgcmV0dXJuIEFzc2Vzc21lbnRTeW5jVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIEFzc2Vzc21lbnREYXRhRW50cnlWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGV2ZW50czogXG4gICAgXCJjaGFuZ2UgI3N1YnRlc3Rfc2VsZWN0XCIgOiBcInVwZGF0ZUN1cnJlbnRcIlxuICAgICdjbGljayAucHJldl9zdWJ0ZXN0JyAgICA6ICdwcmV2U3VidGVzdCdcbiAgICAnY2xpY2sgLm5leHRfc3VidGVzdCcgICAgOiAnbmV4dFN1YnRlc3QnXG4gICAgJ2NsaWNrIC5zYXZlJyA6ICdzYXZlUmVzdWx0J1xuXG4gIHByZXZTdWJ0ZXN0OiAtPlxuICAgIHNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3VidGVzdF9zZWxlY3RcIilcbiAgICByZXR1cm4gaWYgc2VsZWN0LnNlbGVjdGVkSW5kZXggPT0gMFxuICAgIHNlbGVjdC5zZWxlY3RlZEluZGV4ID0gc2VsZWN0LnNlbGVjdGVkSW5kZXggLSAxXG4gICAgQHVwZGF0ZUN1cnJlbnQoKVxuICAgIFxuXG4gIG5leHRTdWJ0ZXN0OiAtPlxuICAgIHNlbGVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3VidGVzdF9zZWxlY3RcIilcbiAgICByZXR1cm4gaWYgc2VsZWN0LnNlbGVjdGVkSW5kZXggPT0gJChcIiNzdWJ0ZXN0X3NlbGVjdCBvcHRpb25cIikubGVuZ3RoIC0gMVxuICAgIHNlbGVjdC5zZWxlY3RlZEluZGV4ID0gc2VsZWN0LnNlbGVjdGVkSW5kZXggKyAxXG5cbiAgICBAdXBkYXRlQ3VycmVudCgpXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgQHNhdmVkT24gPSB7fVxuICAgICMgYXNzZXNzbWVudFxuICAgIEBba2V5XSA9IHZhbHVlIGZvciBrZXksIHZhbHVlIG9mIG9wdGlvbnNcbiAgICBAcmVzdWx0ID0gbmV3IFJlc3VsdFxuICAgICAgYXNzZXNzbWVudElkIDogQGFzc2Vzc21lbnQuaWRcbiAgICAgIGRhdGFFbnRyeSAgICA6IHRydWVcbiAgICAgIGJsYW5rICAgICAgICA6IHRydWVcbiAgICBAdmlld3MgPSBbXVxuICAgIEB2aWV3c0J5U3VidGVzdElkID0ge31cblxuICByZW5kZXI6IC0+XG5cbiAgICBzZWxlY3RvciA9IFwiXG4gICAgICA8YnV0dG9uIGNsYXNzPSdwcmV2X3N1YnRlc3QnPiZsdDs8L2J1dHRvbj5cbiAgICAgIDxzZWxlY3QgaWQ9J3N1YnRlc3Rfc2VsZWN0Jz5cbiAgICAgICAgI3soXCI8b3B0aW9uIGRhdGEtc3VidGVzdElkPScje3N1YnRlc3QuaWR9JyAje2lmIGkgaXMgMCB0aGVuIFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiIGVsc2UgJyd9PiN7c3VidGVzdC5nZXQoXCJuYW1lXCIpfTwvb3B0aW9uPlwiIGZvciBzdWJ0ZXN0LCBpIGluIEBhc3Nlc3NtZW50LnN1YnRlc3RzLm1vZGVscykuam9pbignJyl9XG4gICAgICA8L3NlbGVjdD4gXG4gICAgICA8YnV0dG9uIGNsYXNzPSduZXh0X3N1YnRlc3QnPiZndDs8L2J1dHRvbj5cbiAgICAgIDxicj5cbiAgICBcIlxuXG4gICAgc3VidGVzdHMgPSBcIlxuICAgICAgPHNlY3Rpb24gaWQ9J2N1cnJlbnRfc3VidGVzdCc+XG4gICAgICAgICN7KFwiPGRpdiBpZD0nI3tzdWJ0ZXN0LmlkfScgY2xhc3M9J2NvbmZpcm1hdGlvbiBzdWJ0ZXN0X2NvbnRhaW5lcic+PC9kaXY+XCIgZm9yIHN1YnRlc3QgaW4gQGFzc2Vzc21lbnQuc3VidGVzdHMubW9kZWxzKS5qb2luKCcnKX1cbiAgICAgIDwvc2VjdGlvbj5cbiAgICBcIlxuXG4gICAgQCRlbC5odG1sIFwiXG4gICAgICA8YSBocmVmPScjYXNzZXNzbWVudHMnPjxidXR0b24gY2xhc3M9J25hdmlnYXRpb24nPkJhY2s8L2J1dHRvbj48L2E+PGJyPlxuXG4gICAgICA8aDE+I3tAYXNzZXNzbWVudC5lc2NhcGUoXCJuYW1lXCIpfTwvaDE+XG5cbiAgICAgICN7c2VsZWN0b3J9XG4gICAgICA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHNhdmUnPlNhdmU8L2J1dHRvbj4gPHNtYWxsIGNsYXNzPSdzbWFsbF9ncmV5IGxhc3Rfc2F2ZWQnPjwvc21hbGw+XG4gICAgICAje3N1YnRlc3RzfVxuICAgIFwiXG5cbiAgICBmb3Igc3VidGVzdCBpbiBAYXNzZXNzbWVudC5zdWJ0ZXN0cy5tb2RlbHNcbiAgICAgIHByb3RvdHlwZSA9IHN1YnRlc3QuZ2V0KFwicHJvdG90eXBlXCIpXG4gICAgICBAW1wiI3twcm90b3R5cGV9SW5pdFwiXShzdWJ0ZXN0KVxuXG4gICAgQCRzdWJFbCA9IEAkZWwuZmluZChcIiNjdXJyZW50X3N1YnRlc3RcIilcblxuICAgIEB1cGRhdGVDdXJyZW50KClcblxuICAgIEByZXN1bHQuc2V0IFwic3VidGVzdERhdGFcIiwgKEBzdWJ0ZXN0RGF0YU9iamVjdCh2aWV3Lm1vZGVsKSBmb3IgdmlldyBpbiBAdmlld3MpXG5cbiAgICBAcmVzdWx0LmFkZFxuICAgICAgbmFtZSA6IFwiQXNzZXNzbWVudCBjb21wbGV0ZVwiXG4gICAgICBwcm90b3R5cGU6IFwiY29tcGxldGVcIlxuICAgICAgZGF0YSA6XG4gICAgICAgIFwiY29tbWVudFwiIDogXCJEYXRhIGVudHJ5IGZlYXR1cmVcIlxuICAgICAgICBcImVuZF90aW1lXCIgOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpXG4gICAgICBzdWJ0ZXN0SWQgOiBcInJlc3VsdFwiXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICB1cGRhdGVDdXJyZW50OiA9PlxuXG4gICAgVXRpbHMud29ya2luZyB0cnVlXG5cbiAgICBAc2F2ZVJlc3VsdFxuICAgICAgZXJyb3I6ID0+XG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiUmVzdWx0IHNhdmUgZXJyb3JcIlxuICAgICAgICBVdGlscy53b3JraW5nIGZhbHNlXG4gICAgICBzdWNjZXNzOiA9PlxuICAgICAgICBVdGlscy53b3JraW5nIGZhbHNlXG4gICAgICAgIEBzdWJ0ZXN0SWQgPSBAJGVsLmZpbmQoXCIjc3VidGVzdF9zZWxlY3Qgb3B0aW9uOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLXN1YnRlc3RJZFwiKVxuICAgICAgICBAJHN1YkVsLmZpbmQoXCIuc3VidGVzdF9jb250YWluZXJcIikuaGlkZSgpXG4gICAgICAgIEAkc3ViRWwuZmluZChcIiMje0BzdWJ0ZXN0SWR9XCIpLnNob3coKVxuICAgICAgICBAc3VidGVzdCA9IEBhc3Nlc3NtZW50LnN1YnRlc3RzLmdldChAc3VidGVzdElkKVxuICAgICAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiAgICAgICAgQHNhdmVkT25bQHN1YnRlc3RJZF0gPSB0cnVlXG5cbiAgc2F2ZVJlc3VsdDogKGNhbGxiYWNrcyA9IHt9KSA9PlxuXG4gICAgcmV0dXJuIGNhbGxiYWNrcy5zdWNjZXNzKCkgdW5sZXNzIEBzdWJ0ZXN0P1xuXG4gICAgQHJlc3VsdC5pbnNlcnQgQHN1YnRlc3REYXRhT2JqZWN0KEBzdWJ0ZXN0KVxuXG4gICAgQHJlc3VsdC5zYXZlIG51bGwsXG4gICAgICBzdWNjZXNzOiAobW9kZWwpID0+XG4gICAgICAgIEAkZWwuZmluZChcIi5sYXN0X3NhdmVkXCIpLmh0bWwgXCJMYXN0IHNhdmVkOiBcIiArIG1vbWVudChuZXcgRGF0ZShAcmVzdWx0LmdldCgndXBkYXRlZCcpKSkuZm9ybWF0KCdNTU0gREQgSEg6bW0nKVxuICAgICAgICBjYWxsYmFja3Muc3VjY2Vzcz8obW9kZWwpXG4gICAgICBlcnJvcjogKGVycm9yLCBtc2cpID0+XG4gICAgICAgIGNvbnNvbGUubG9nIFwic2F2ZSBlcnJvclwiXG4gICAgICAgIGNvbnNvbGUubG9nIGFyZ3VtZW50c1xuICAgICAgICBjYWxsYmFja3MuZXJyb3I/KGVycm9yLCBtc2cpXG5cblxuICB1cGRhdGVDb21wbGV0ZWRSZXN1bHQ6IC0+XG4gICAgaWYgXy5rZXlzKEBzYXZlZE9uKS5sZW5ndGggPT0gQHZpZXdzLmxlbmd0aFxuXG4gICAgICByZXN1bHQgPSBcbiAgICAgICAgbmFtZSA6IFwiQXNzZXNzbWVudCBjb21wbGV0ZVwiXG4gICAgICAgIHByb3RvdHlwZTogXCJjb21wbGV0ZVwiXG4gICAgICAgIGRhdGEgOlxuICAgICAgICAgIFwiY29tbWVudFwiIDogQCRlbC5maW5kKCcjYWRkaXRpb25hbF9jb21tZW50cycpLnZhbCgpIHx8IFwiXCJcbiAgICAgICAgICBcImVuZF90aW1lXCIgOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpXG4gICAgICAgIHN1YnRlc3RJZCA6IFwicmVzdWx0XCJcblxuICAgICAgaWYgbm90IEBjb21wbGV0ZWRBbHJlYWR5XG4gICAgICAgIEByZXN1bHQuYWRkIHJlc3VsdFxuICAgICAgICBAY29tcGxldGVkQWxyZWFkeSA9IHRydWVcbiAgICAgIGVsc2VcbiAgICAgICAgQHJlc3VsdC5pbnNlcnQgcmVzdWx0XG4gICAgICAgIEByZXN1bHRTYXZlKClcblxuXG4gIHN1YnRlc3REYXRhT2JqZWN0OiAoc3VidGVzdCkgLT5cblxuICAgIHZpZXcgPSBAdmlld3NCeVN1YnRlc3RJZFtzdWJ0ZXN0LmlkXVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWUgICAgICAgIDogc3VidGVzdC5nZXQgXCJuYW1lXCJcbiAgICAgIGRhdGEgICAgICAgIDogdmlldy5nZXRSZXN1bHQoKVxuICAgICAgc3VidGVzdEhhc2ggOiBzdWJ0ZXN0LmdldCBcImhhc2hcIlxuICAgICAgc3VidGVzdElkICAgOiBzdWJ0ZXN0LmlkXG4gICAgICBwcm90b3R5cGUgICA6IHN1YnRlc3QuZ2V0IFwicHJvdG90eXBlXCJcbiAgICB9XG5cbiAgZ3JpZEluaXQ6IChzdWJ0ZXN0KSAtPlxuICAgIHZpZXcgPSBuZXcgR3JpZFJ1blZpZXcgXG4gICAgICBtb2RlbCAgICAgOiBzdWJ0ZXN0XG4gICAgICBkYXRhRW50cnkgOiB0cnVlXG4gICAgQGFkZFJlbmRlclZpZXcgdmlldywgc3VidGVzdFxuXG4gIHN1cnZleUluaXQ6IChzdWJ0ZXN0KSAtPlxuICAgIHZpZXcgPSBuZXcgU3VydmV5UnVuVmlldyBcbiAgICAgIG1vZGVsOiBzdWJ0ZXN0XG4gICAgICBkYXRhRW50cnkgOiB0cnVlXG4gICAgICBwYXJlbnQ6XG4gICAgICAgIGdyaWRXYXNBdXRvc3RvcHBlZDogLT4gcmV0dXJuIGZhbHNlXG4gICAgQGFkZFJlbmRlclZpZXcgdmlldywgc3VidGVzdFxuXG4gIGxvY2F0aW9uSW5pdDogKHN1YnRlc3QpIC0+XG4gICAgdmlldyA9IG5ldyBMb2NhdGlvblJ1blZpZXcgXG4gICAgICBtb2RlbDogc3VidGVzdFxuICAgICAgZGF0YUVudHJ5IDogdHJ1ZVxuXG4gICAgQGFkZFJlbmRlclZpZXcgdmlldywgc3VidGVzdFxuXG4gIGRhdGV0aW1lSW5pdDogKHN1YnRlc3QpIC0+XG4gICAgdmlldyA9IG5ldyBEYXRldGltZVJ1blZpZXcgXG4gICAgICBtb2RlbDogc3VidGVzdFxuICAgICAgZGF0YUVudHJ5IDogdHJ1ZVxuICAgIEBhZGRSZW5kZXJWaWV3IHZpZXcsIHN1YnRlc3RcblxuICBpZEluaXQ6IChzdWJ0ZXN0KSAtPlxuICAgIHZpZXcgPSBuZXcgSWRSdW5WaWV3IFxuICAgICAgbW9kZWw6IHN1YnRlc3RcbiAgICAgIGRhdGFFbnRyeSA6IHRydWVcbiAgICBAYWRkUmVuZGVyVmlldyB2aWV3LCBzdWJ0ZXN0XG5cbiAgY29uc2VudEluaXQ6IChzdWJ0ZXN0KSAtPlxuICAgIHZpZXcgPSBuZXcgQ29uc2VudFJ1blZpZXcgXG4gICAgICBtb2RlbDogc3VidGVzdFxuICAgICAgZGF0YUVudHJ5IDogdHJ1ZVxuICAgIEBhZGRSZW5kZXJWaWV3IHZpZXcsIHN1YnRlc3RcblxuICBhZGRSZW5kZXJWaWV3OiAodmlldywgc3VidGVzdCkgLT5cbiAgICAkZWxlbWVudCA9IEAkZWwuZmluZChcIiMje3N1YnRlc3QuaWR9XCIpXG4gICAgdmlldy5zZXRFbGVtZW50ICRlbGVtZW50XG4gICAgdmlldy5yZW5kZXIoKVxuICAgIEB2aWV3c0J5U3VidGVzdElkW3N1YnRlc3QuaWRdID0gdmlld1xuICAgIFxuICAgIEB2aWV3cy5wdXNoIHZpZXdcbiIsInZhciBBc3Nlc3NtZW50RGF0YUVudHJ5VmlldyxcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5Bc3Nlc3NtZW50RGF0YUVudHJ5VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChBc3Nlc3NtZW50RGF0YUVudHJ5Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQXNzZXNzbWVudERhdGFFbnRyeVZpZXcoKSB7XG4gICAgdGhpcy5zYXZlUmVzdWx0ID0gYmluZCh0aGlzLnNhdmVSZXN1bHQsIHRoaXMpO1xuICAgIHRoaXMudXBkYXRlQ3VycmVudCA9IGJpbmQodGhpcy51cGRhdGVDdXJyZW50LCB0aGlzKTtcbiAgICByZXR1cm4gQXNzZXNzbWVudERhdGFFbnRyeVZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBBc3Nlc3NtZW50RGF0YUVudHJ5Vmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgIFwiY2hhbmdlICNzdWJ0ZXN0X3NlbGVjdFwiOiBcInVwZGF0ZUN1cnJlbnRcIixcbiAgICAnY2xpY2sgLnByZXZfc3VidGVzdCc6ICdwcmV2U3VidGVzdCcsXG4gICAgJ2NsaWNrIC5uZXh0X3N1YnRlc3QnOiAnbmV4dFN1YnRlc3QnLFxuICAgICdjbGljayAuc2F2ZSc6ICdzYXZlUmVzdWx0J1xuICB9O1xuXG4gIEFzc2Vzc21lbnREYXRhRW50cnlWaWV3LnByb3RvdHlwZS5wcmV2U3VidGVzdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxlY3Q7XG4gICAgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdWJ0ZXN0X3NlbGVjdFwiKTtcbiAgICBpZiAoc2VsZWN0LnNlbGVjdGVkSW5kZXggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZWN0LnNlbGVjdGVkSW5kZXggPSBzZWxlY3Quc2VsZWN0ZWRJbmRleCAtIDE7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlQ3VycmVudCgpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnREYXRhRW50cnlWaWV3LnByb3RvdHlwZS5uZXh0U3VidGVzdCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxlY3Q7XG4gICAgc2VsZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdWJ0ZXN0X3NlbGVjdFwiKTtcbiAgICBpZiAoc2VsZWN0LnNlbGVjdGVkSW5kZXggPT09ICQoXCIjc3VidGVzdF9zZWxlY3Qgb3B0aW9uXCIpLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZWN0LnNlbGVjdGVkSW5kZXggPSBzZWxlY3Quc2VsZWN0ZWRJbmRleCArIDE7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlQ3VycmVudCgpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnREYXRhRW50cnlWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBrZXksIHZhbHVlO1xuICAgIHRoaXMuc2F2ZWRPbiA9IHt9O1xuICAgIGZvciAoa2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIHZhbHVlID0gb3B0aW9uc1trZXldO1xuICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHRoaXMucmVzdWx0ID0gbmV3IFJlc3VsdCh7XG4gICAgICBhc3Nlc3NtZW50SWQ6IHRoaXMuYXNzZXNzbWVudC5pZCxcbiAgICAgIGRhdGFFbnRyeTogdHJ1ZSxcbiAgICAgIGJsYW5rOiB0cnVlXG4gICAgfSk7XG4gICAgdGhpcy52aWV3cyA9IFtdO1xuICAgIHJldHVybiB0aGlzLnZpZXdzQnlTdWJ0ZXN0SWQgPSB7fTtcbiAgfTtcblxuICBBc3Nlc3NtZW50RGF0YUVudHJ5Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGosIGxlbiwgcHJvdG90eXBlLCByZWYsIHNlbGVjdG9yLCBzdWJ0ZXN0LCBzdWJ0ZXN0cywgdmlldztcbiAgICBzZWxlY3RvciA9IFwiPGJ1dHRvbiBjbGFzcz0ncHJldl9zdWJ0ZXN0Jz4mbHQ7PC9idXR0b24+IDxzZWxlY3QgaWQ9J3N1YnRlc3Rfc2VsZWN0Jz4gXCIgKyAoKChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBqLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgIHJlZiA9IHRoaXMuYXNzZXNzbWVudC5zdWJ0ZXN0cy5tb2RlbHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICBzdWJ0ZXN0ID0gcmVmW2ldO1xuICAgICAgICByZXN1bHRzLnB1c2goXCI8b3B0aW9uIGRhdGEtc3VidGVzdElkPSdcIiArIHN1YnRlc3QuaWQgKyBcIicgXCIgKyAoaSA9PT0gMCA/IFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiIDogJycpICsgXCI+XCIgKyAoc3VidGVzdC5nZXQoXCJuYW1lXCIpKSArIFwiPC9vcHRpb24+XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkuY2FsbCh0aGlzKSkuam9pbignJykpICsgXCIgPC9zZWxlY3Q+IDxidXR0b24gY2xhc3M9J25leHRfc3VidGVzdCc+Jmd0OzwvYnV0dG9uPiA8YnI+XCI7XG4gICAgc3VidGVzdHMgPSBcIjxzZWN0aW9uIGlkPSdjdXJyZW50X3N1YnRlc3QnPiBcIiArICgoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGosIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgcmVmID0gdGhpcy5hc3Nlc3NtZW50LnN1YnRlc3RzLm1vZGVscztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICBzdWJ0ZXN0ID0gcmVmW2pdO1xuICAgICAgICByZXN1bHRzLnB1c2goXCI8ZGl2IGlkPSdcIiArIHN1YnRlc3QuaWQgKyBcIicgY2xhc3M9J2NvbmZpcm1hdGlvbiBzdWJ0ZXN0X2NvbnRhaW5lcic+PC9kaXY+XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkuY2FsbCh0aGlzKSkuam9pbignJykpICsgXCIgPC9zZWN0aW9uPlwiO1xuICAgIHRoaXMuJGVsLmh0bWwoXCI8YSBocmVmPScjYXNzZXNzbWVudHMnPjxidXR0b24gY2xhc3M9J25hdmlnYXRpb24nPkJhY2s8L2J1dHRvbj48L2E+PGJyPiA8aDE+XCIgKyAodGhpcy5hc3Nlc3NtZW50LmVzY2FwZShcIm5hbWVcIikpICsgXCI8L2gxPiBcIiArIHNlbGVjdG9yICsgXCIgPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBzYXZlJz5TYXZlPC9idXR0b24+IDxzbWFsbCBjbGFzcz0nc21hbGxfZ3JleSBsYXN0X3NhdmVkJz48L3NtYWxsPiBcIiArIHN1YnRlc3RzKTtcbiAgICByZWYgPSB0aGlzLmFzc2Vzc21lbnQuc3VidGVzdHMubW9kZWxzO1xuICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgc3VidGVzdCA9IHJlZltqXTtcbiAgICAgIHByb3RvdHlwZSA9IHN1YnRlc3QuZ2V0KFwicHJvdG90eXBlXCIpO1xuICAgICAgdGhpc1twcm90b3R5cGUgKyBcIkluaXRcIl0oc3VidGVzdCk7XG4gICAgfVxuICAgIHRoaXMuJHN1YkVsID0gdGhpcy4kZWwuZmluZChcIiNjdXJyZW50X3N1YnRlc3RcIik7XG4gICAgdGhpcy51cGRhdGVDdXJyZW50KCk7XG4gICAgdGhpcy5yZXN1bHQuc2V0KFwic3VidGVzdERhdGFcIiwgKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGssIGxlbjEsIHJlZjEsIHJlc3VsdHM7XG4gICAgICByZWYxID0gdGhpcy52aWV3cztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoayA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgayA8IGxlbjE7IGsrKykge1xuICAgICAgICB2aWV3ID0gcmVmMVtrXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHRoaXMuc3VidGVzdERhdGFPYmplY3Qodmlldy5tb2RlbCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkuY2FsbCh0aGlzKSk7XG4gICAgdGhpcy5yZXN1bHQuYWRkKHtcbiAgICAgIG5hbWU6IFwiQXNzZXNzbWVudCBjb21wbGV0ZVwiLFxuICAgICAgcHJvdG90eXBlOiBcImNvbXBsZXRlXCIsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIFwiY29tbWVudFwiOiBcIkRhdGEgZW50cnkgZmVhdHVyZVwiLFxuICAgICAgICBcImVuZF90aW1lXCI6IChuZXcgRGF0ZSgpKS5nZXRUaW1lKClcbiAgICAgIH0sXG4gICAgICBzdWJ0ZXN0SWQ6IFwicmVzdWx0XCJcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgQXNzZXNzbWVudERhdGFFbnRyeVZpZXcucHJvdG90eXBlLnVwZGF0ZUN1cnJlbnQgPSBmdW5jdGlvbigpIHtcbiAgICBVdGlscy53b3JraW5nKHRydWUpO1xuICAgIHJldHVybiB0aGlzLnNhdmVSZXN1bHQoe1xuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgVXRpbHMubWlkQWxlcnQoXCJSZXN1bHQgc2F2ZSBlcnJvclwiKTtcbiAgICAgICAgICByZXR1cm4gVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSxcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICAgICAgX3RoaXMuc3VidGVzdElkID0gX3RoaXMuJGVsLmZpbmQoXCIjc3VidGVzdF9zZWxlY3Qgb3B0aW9uOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLXN1YnRlc3RJZFwiKTtcbiAgICAgICAgICBfdGhpcy4kc3ViRWwuZmluZChcIi5zdWJ0ZXN0X2NvbnRhaW5lclwiKS5oaWRlKCk7XG4gICAgICAgICAgX3RoaXMuJHN1YkVsLmZpbmQoXCIjXCIgKyBfdGhpcy5zdWJ0ZXN0SWQpLnNob3coKTtcbiAgICAgICAgICBfdGhpcy5zdWJ0ZXN0ID0gX3RoaXMuYXNzZXNzbWVudC5zdWJ0ZXN0cy5nZXQoX3RoaXMuc3VidGVzdElkKTtcbiAgICAgICAgICBfdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnNhdmVkT25bX3RoaXMuc3VidGVzdElkXSA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIEFzc2Vzc21lbnREYXRhRW50cnlWaWV3LnByb3RvdHlwZS5zYXZlUmVzdWx0ID0gZnVuY3Rpb24oY2FsbGJhY2tzKSB7XG4gICAgaWYgKGNhbGxiYWNrcyA9PSBudWxsKSB7XG4gICAgICBjYWxsYmFja3MgPSB7fTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3VidGVzdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2tzLnN1Y2Nlc3MoKTtcbiAgICB9XG4gICAgdGhpcy5yZXN1bHQuaW5zZXJ0KHRoaXMuc3VidGVzdERhdGFPYmplY3QodGhpcy5zdWJ0ZXN0KSk7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0LnNhdmUobnVsbCwge1xuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgIF90aGlzLiRlbC5maW5kKFwiLmxhc3Rfc2F2ZWRcIikuaHRtbChcIkxhc3Qgc2F2ZWQ6IFwiICsgbW9tZW50KG5ldyBEYXRlKF90aGlzLnJlc3VsdC5nZXQoJ3VwZGF0ZWQnKSkpLmZvcm1hdCgnTU1NIEREIEhIOm1tJykpO1xuICAgICAgICAgIHJldHVybiB0eXBlb2YgY2FsbGJhY2tzLnN1Y2Nlc3MgPT09IFwiZnVuY3Rpb25cIiA/IGNhbGxiYWNrcy5zdWNjZXNzKG1vZGVsKSA6IHZvaWQgMDtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXJyb3IsIG1zZykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwic2F2ZSBlcnJvclwiKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyhhcmd1bWVudHMpO1xuICAgICAgICAgIHJldHVybiB0eXBlb2YgY2FsbGJhY2tzLmVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBjYWxsYmFja3MuZXJyb3IoZXJyb3IsIG1zZykgOiB2b2lkIDA7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIEFzc2Vzc21lbnREYXRhRW50cnlWaWV3LnByb3RvdHlwZS51cGRhdGVDb21wbGV0ZWRSZXN1bHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGlmIChfLmtleXModGhpcy5zYXZlZE9uKS5sZW5ndGggPT09IHRoaXMudmlld3MubGVuZ3RoKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIG5hbWU6IFwiQXNzZXNzbWVudCBjb21wbGV0ZVwiLFxuICAgICAgICBwcm90b3R5cGU6IFwiY29tcGxldGVcIixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIFwiY29tbWVudFwiOiB0aGlzLiRlbC5maW5kKCcjYWRkaXRpb25hbF9jb21tZW50cycpLnZhbCgpIHx8IFwiXCIsXG4gICAgICAgICAgXCJlbmRfdGltZVwiOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpXG4gICAgICAgIH0sXG4gICAgICAgIHN1YnRlc3RJZDogXCJyZXN1bHRcIlxuICAgICAgfTtcbiAgICAgIGlmICghdGhpcy5jb21wbGV0ZWRBbHJlYWR5KSB7XG4gICAgICAgIHRoaXMucmVzdWx0LmFkZChyZXN1bHQpO1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZWRBbHJlYWR5ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVzdWx0Lmluc2VydChyZXN1bHQpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHRTYXZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEFzc2Vzc21lbnREYXRhRW50cnlWaWV3LnByb3RvdHlwZS5zdWJ0ZXN0RGF0YU9iamVjdCA9IGZ1bmN0aW9uKHN1YnRlc3QpIHtcbiAgICB2YXIgdmlldztcbiAgICB2aWV3ID0gdGhpcy52aWV3c0J5U3VidGVzdElkW3N1YnRlc3QuaWRdO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBzdWJ0ZXN0LmdldChcIm5hbWVcIiksXG4gICAgICBkYXRhOiB2aWV3LmdldFJlc3VsdCgpLFxuICAgICAgc3VidGVzdEhhc2g6IHN1YnRlc3QuZ2V0KFwiaGFzaFwiKSxcbiAgICAgIHN1YnRlc3RJZDogc3VidGVzdC5pZCxcbiAgICAgIHByb3RvdHlwZTogc3VidGVzdC5nZXQoXCJwcm90b3R5cGVcIilcbiAgICB9O1xuICB9O1xuXG4gIEFzc2Vzc21lbnREYXRhRW50cnlWaWV3LnByb3RvdHlwZS5ncmlkSW5pdCA9IGZ1bmN0aW9uKHN1YnRlc3QpIHtcbiAgICB2YXIgdmlldztcbiAgICB2aWV3ID0gbmV3IEdyaWRSdW5WaWV3KHtcbiAgICAgIG1vZGVsOiBzdWJ0ZXN0LFxuICAgICAgZGF0YUVudHJ5OiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuYWRkUmVuZGVyVmlldyh2aWV3LCBzdWJ0ZXN0KTtcbiAgfTtcblxuICBBc3Nlc3NtZW50RGF0YUVudHJ5Vmlldy5wcm90b3R5cGUuc3VydmV5SW5pdCA9IGZ1bmN0aW9uKHN1YnRlc3QpIHtcbiAgICB2YXIgdmlldztcbiAgICB2aWV3ID0gbmV3IFN1cnZleVJ1blZpZXcoe1xuICAgICAgbW9kZWw6IHN1YnRlc3QsXG4gICAgICBkYXRhRW50cnk6IHRydWUsXG4gICAgICBwYXJlbnQ6IHtcbiAgICAgICAgZ3JpZFdhc0F1dG9zdG9wcGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5hZGRSZW5kZXJWaWV3KHZpZXcsIHN1YnRlc3QpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnREYXRhRW50cnlWaWV3LnByb3RvdHlwZS5sb2NhdGlvbkluaXQgPSBmdW5jdGlvbihzdWJ0ZXN0KSB7XG4gICAgdmFyIHZpZXc7XG4gICAgdmlldyA9IG5ldyBMb2NhdGlvblJ1blZpZXcoe1xuICAgICAgbW9kZWw6IHN1YnRlc3QsXG4gICAgICBkYXRhRW50cnk6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5hZGRSZW5kZXJWaWV3KHZpZXcsIHN1YnRlc3QpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnREYXRhRW50cnlWaWV3LnByb3RvdHlwZS5kYXRldGltZUluaXQgPSBmdW5jdGlvbihzdWJ0ZXN0KSB7XG4gICAgdmFyIHZpZXc7XG4gICAgdmlldyA9IG5ldyBEYXRldGltZVJ1blZpZXcoe1xuICAgICAgbW9kZWw6IHN1YnRlc3QsXG4gICAgICBkYXRhRW50cnk6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5hZGRSZW5kZXJWaWV3KHZpZXcsIHN1YnRlc3QpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnREYXRhRW50cnlWaWV3LnByb3RvdHlwZS5pZEluaXQgPSBmdW5jdGlvbihzdWJ0ZXN0KSB7XG4gICAgdmFyIHZpZXc7XG4gICAgdmlldyA9IG5ldyBJZFJ1blZpZXcoe1xuICAgICAgbW9kZWw6IHN1YnRlc3QsXG4gICAgICBkYXRhRW50cnk6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5hZGRSZW5kZXJWaWV3KHZpZXcsIHN1YnRlc3QpO1xuICB9O1xuXG4gIEFzc2Vzc21lbnREYXRhRW50cnlWaWV3LnByb3RvdHlwZS5jb25zZW50SW5pdCA9IGZ1bmN0aW9uKHN1YnRlc3QpIHtcbiAgICB2YXIgdmlldztcbiAgICB2aWV3ID0gbmV3IENvbnNlbnRSdW5WaWV3KHtcbiAgICAgIG1vZGVsOiBzdWJ0ZXN0LFxuICAgICAgZGF0YUVudHJ5OiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMuYWRkUmVuZGVyVmlldyh2aWV3LCBzdWJ0ZXN0KTtcbiAgfTtcblxuICBBc3Nlc3NtZW50RGF0YUVudHJ5Vmlldy5wcm90b3R5cGUuYWRkUmVuZGVyVmlldyA9IGZ1bmN0aW9uKHZpZXcsIHN1YnRlc3QpIHtcbiAgICB2YXIgJGVsZW1lbnQ7XG4gICAgJGVsZW1lbnQgPSB0aGlzLiRlbC5maW5kKFwiI1wiICsgc3VidGVzdC5pZCk7XG4gICAgdmlldy5zZXRFbGVtZW50KCRlbGVtZW50KTtcbiAgICB2aWV3LnJlbmRlcigpO1xuICAgIHRoaXMudmlld3NCeVN1YnRlc3RJZFtzdWJ0ZXN0LmlkXSA9IHZpZXc7XG4gICAgcmV0dXJuIHRoaXMudmlld3MucHVzaCh2aWV3KTtcbiAgfTtcblxuICByZXR1cm4gQXNzZXNzbWVudERhdGFFbnRyeVZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCIjIFdpZGdldFJ1blZpZXcgdGFrZXMgYSBsaXN0IG9mIHN1YnRlc3RzIGFuZCB0aGUgYXNzZXNzbWVudCBhcyB0aGUgbW9kZWwsIHN0cmluZ2lmaWVzIGl0LCBhbmQgcmVuZGVycyB0aGUgVGFuZ2VyaW5lIGNsaWVudCB3aWRnZXQuXG4jIEl0IGxpc3RlbnMgZm9yIGEgcmVzdWx0OnNhdmVkOndpZGdldCBldmVudCBmcm9tIHRoZSBjbGllbnQgd2lkZ2V0LCB3aGljaCBpcyBjcmVhdGVkIGJ5IHRoZSB3aWRnZXRQbGF5IHJvdXRlIGluIHdpZGdldCdzIHJvdXRlclxuIyBieSB0aGUgcmVzdWx0OnNhdmVkIGV2ZW50IHRocm93biBieSBBc3Nlc3NtZW50Q29tcG9zaXRlVmlldyBmcm9tIFJlc3VsdEl0ZW1WaWV3LiBJdCBhbHNvIGxpc3RlbnMgZm9yIHRoZSByZXN1bHQ6c2F2ZWQ6d2lkZ2V0XG4jIGV2ZW50IHRvIHJlZnJlc2ggdGhlIHBhZ2Ugd2hlbiB0aGUgdXNlciBjaG9vc2VzIFwiUGVyZm9ybSBhbm90aGVyIGFzc2Vzc21lbnRcIlxuY2xhc3MgV2lkZ2V0UnVuVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIldpZGdldFJ1blZpZXdcIlxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBpMThuKClcbiAgICBAbW9kZWwgPSBvcHRpb25zLm1vZGVsXG5cbiAgZXZlbnRzOlxuICAgICdjbGljayAuc2F2ZVRvQ291Y2hEQicgICAgOiAnc2F2ZSdcblxuICBpMThuOiAtPlxuICAgIEB0ZXh0ID1cbiAgICAgIFwic2F2ZVwiICAgICAgICAgICAgICAgOiB0KFwiV2lkZ2V0UnVuVmlldy5idXR0b24uc2F2ZVwiKVxuICAgICAgXCJzYXZlZFwiICAgICAgICAgICAgICAgOiB0KFwiV2lkZ2V0UnVuVmlldy5idXR0b24uc2F2ZWRcIilcblxuICBzYXZlOiAtPlxuICAgIGNvbnNvbGUubG9nKFwic2F2ZSB0byBDb3VjaGRiXCIpXG4gICAgYXNzZXNzbWVudCA9ICQoJy5hc3Nlc3NtZW50LXdpZGdldC1yZXN1bHQnKS5odG1sKClcbiMgICAgcmVzdWx0ID0gSlNPTi5wYXJzZSBhc3Nlc3NtZW50XG4gICAgQG1vZGVsID0gbmV3IFJlc3VsdCBKU09OLnBhcnNlIGFzc2Vzc21lbnRcbiAgICBpZiBAbW9kZWwuc2F2ZSgpXG4gICAgICBUYW5nZXJpbmUuYWN0aXZpdHkgPSBcIlwiXG4gICAgICBVdGlscy5taWRBbGVydCBAdGV4dC5zYXZlZFxuXG4gIHJlbmRlcjogLT5cbiAgICAkKCcjZm9vdGVyJykuaGlkZSgpXG4gICAgQCRlbC5odG1sIFwiPGRpdiBjbGFzcz0nYXNzZXNzbWVudCc+PC9kaXY+XG4gICAgICA8cD48YnV0dG9uIGlkPSdzYXZlVG9Db3VjaERCJyBjbGFzcz0nc2F2ZVRvQ291Y2hEQic+I3tAdGV4dC5zYXZlfTwvYnV0dG9uPjwvcD5cbiAgICAgIDxkaXYgY2xhc3M9J2Fzc2Vzc21lbnQtd2lkZ2V0LXJlc3VsdCc+PC9kaXY+XCJcbiAgICBAJGFzc2Vzc21lbnRXaWRnZXQgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpKVxuICAgIEAkYXNzZXNzbWVudFdpZGdldC5hdHRyKCdzcmMnLCAnL2NsaWVudC9pbmRleC5odG1sI3dpZGdldCcpXG4gICAgQCRhc3Nlc3NtZW50V2lkZ2V0LmF0dHIoJ2RhdGEtYXNzZXNzbWVudCcsIEpTT04uc3RyaW5naWZ5KEBtb2RlbCkpXG4gICAgQCRhc3Nlc3NtZW50V2lkZ2V0LmF0dHIoJ2RhdGEtcmVzdWx0JywgJ3t9JylcbiAgICBAJGFzc2Vzc21lbnRXaWRnZXQuYXR0cignd2lkdGgnLCAnMTAwJScpXG4gICAgQCRhc3Nlc3NtZW50V2lkZ2V0LmF0dHIoJ2hlaWdodCcsIDgwMClcbiAgICBAJGFzc2Vzc21lbnRXaWRnZXQuYXR0cignaWQnLCAnY2xpZW50LXdpZGdldCcpXG4gICAgQCRhc3Nlc3NtZW50V2lkZ2V0Lm9uKCdyZXN1bHQ6c2F2ZTp3aWRnZXQnLCAoZXZlbnQpIC0+XG4gICAgICBjb25zb2xlLmxvZyhcIkZpbmFsIHNhdmVcIilcbiAgICAgICQoJyNzYXZlVG9Db3VjaERCJykuc2hvdygpXG4gICAgICAkKCcuYXNzZXNzbWVudC13aWRnZXQtcmVzdWx0JykuaHRtbChldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXJlc3VsdCcpKVxuICAgIClcbiAgICBAJGFzc2Vzc21lbnRXaWRnZXQub24oJ3Jlc3VsdDphbm90aGVyOndpZGdldCcsIChldmVudCkgLT5cbiAgICAgIGNvbnNvbGUubG9nKFwiR2l2ZSBtZSBhbm90aGVyLlwiKVxuICAgICAgZG9jdW1lbnQubG9jYXRpb24ucmVsb2FkKClcbiAgICApXG5cbiAgICBAJGVsLmZpbmQoXCIuYXNzZXNzbWVudFwiKS5hcHBlbmQoQCRhc3Nlc3NtZW50V2lkZ2V0KVxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuXG4gICAgcmV0dXJuXG4iLCJ2YXIgV2lkZ2V0UnVuVmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbldpZGdldFJ1blZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoV2lkZ2V0UnVuVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gV2lkZ2V0UnVuVmlldygpIHtcbiAgICByZXR1cm4gV2lkZ2V0UnVuVmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFdpZGdldFJ1blZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiV2lkZ2V0UnVuVmlld1wiO1xuXG4gIFdpZGdldFJ1blZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5pMThuKCk7XG4gICAgcmV0dXJuIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICB9O1xuXG4gIFdpZGdldFJ1blZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICAnY2xpY2sgLnNhdmVUb0NvdWNoREInOiAnc2F2ZSdcbiAgfTtcblxuICBXaWRnZXRSdW5WaWV3LnByb3RvdHlwZS5pMThuID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCA9IHtcbiAgICAgIFwic2F2ZVwiOiB0KFwiV2lkZ2V0UnVuVmlldy5idXR0b24uc2F2ZVwiKSxcbiAgICAgIFwic2F2ZWRcIjogdChcIldpZGdldFJ1blZpZXcuYnV0dG9uLnNhdmVkXCIpXG4gICAgfTtcbiAgfTtcblxuICBXaWRnZXRSdW5WaWV3LnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFzc2Vzc21lbnQ7XG4gICAgY29uc29sZS5sb2coXCJzYXZlIHRvIENvdWNoZGJcIik7XG4gICAgYXNzZXNzbWVudCA9ICQoJy5hc3Nlc3NtZW50LXdpZGdldC1yZXN1bHQnKS5odG1sKCk7XG4gICAgdGhpcy5tb2RlbCA9IG5ldyBSZXN1bHQoSlNPTi5wYXJzZShhc3Nlc3NtZW50KSk7XG4gICAgaWYgKHRoaXMubW9kZWwuc2F2ZSgpKSB7XG4gICAgICBUYW5nZXJpbmUuYWN0aXZpdHkgPSBcIlwiO1xuICAgICAgcmV0dXJuIFV0aWxzLm1pZEFsZXJ0KHRoaXMudGV4dC5zYXZlZCk7XG4gICAgfVxuICB9O1xuXG4gIFdpZGdldFJ1blZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICQoJyNmb290ZXInKS5oaWRlKCk7XG4gICAgdGhpcy4kZWwuaHRtbChcIjxkaXYgY2xhc3M9J2Fzc2Vzc21lbnQnPjwvZGl2PiA8cD48YnV0dG9uIGlkPSdzYXZlVG9Db3VjaERCJyBjbGFzcz0nc2F2ZVRvQ291Y2hEQic+XCIgKyB0aGlzLnRleHQuc2F2ZSArIFwiPC9idXR0b24+PC9wPiA8ZGl2IGNsYXNzPSdhc3Nlc3NtZW50LXdpZGdldC1yZXN1bHQnPjwvZGl2PlwiKTtcbiAgICB0aGlzLiRhc3Nlc3NtZW50V2lkZ2V0ID0gJChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKSk7XG4gICAgdGhpcy4kYXNzZXNzbWVudFdpZGdldC5hdHRyKCdzcmMnLCAnL2NsaWVudC9pbmRleC5odG1sI3dpZGdldCcpO1xuICAgIHRoaXMuJGFzc2Vzc21lbnRXaWRnZXQuYXR0cignZGF0YS1hc3Nlc3NtZW50JywgSlNPTi5zdHJpbmdpZnkodGhpcy5tb2RlbCkpO1xuICAgIHRoaXMuJGFzc2Vzc21lbnRXaWRnZXQuYXR0cignZGF0YS1yZXN1bHQnLCAne30nKTtcbiAgICB0aGlzLiRhc3Nlc3NtZW50V2lkZ2V0LmF0dHIoJ3dpZHRoJywgJzEwMCUnKTtcbiAgICB0aGlzLiRhc3Nlc3NtZW50V2lkZ2V0LmF0dHIoJ2hlaWdodCcsIDgwMCk7XG4gICAgdGhpcy4kYXNzZXNzbWVudFdpZGdldC5hdHRyKCdpZCcsICdjbGllbnQtd2lkZ2V0Jyk7XG4gICAgdGhpcy4kYXNzZXNzbWVudFdpZGdldC5vbigncmVzdWx0OnNhdmU6d2lkZ2V0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiRmluYWwgc2F2ZVwiKTtcbiAgICAgICQoJyNzYXZlVG9Db3VjaERCJykuc2hvdygpO1xuICAgICAgcmV0dXJuICQoJy5hc3Nlc3NtZW50LXdpZGdldC1yZXN1bHQnKS5odG1sKGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcmVzdWx0JykpO1xuICAgIH0pO1xuICAgIHRoaXMuJGFzc2Vzc21lbnRXaWRnZXQub24oJ3Jlc3VsdDphbm90aGVyOndpZGdldCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBjb25zb2xlLmxvZyhcIkdpdmUgbWUgYW5vdGhlci5cIik7XG4gICAgICByZXR1cm4gZG9jdW1lbnQubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgfSk7XG4gICAgdGhpcy4kZWwuZmluZChcIi5hc3Nlc3NtZW50XCIpLmFwcGVuZCh0aGlzLiRhc3Nlc3NtZW50V2lkZ2V0KTtcbiAgICB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICByZXR1cm4gV2lkZ2V0UnVuVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIFN1YnRlc3QgZXh0ZW5kcyBCYWNrYm9uZS5Nb2RlbFxuXG4gIHVybDogXCJzdWJ0ZXN0XCJcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBAdGVtcGxhdGVzID0gVGFuZ2VyaW5lLnRlbXBsYXRlcy5nZXQoXCJwcm90b3R5cGVUZW1wbGF0ZXNcIilcblxuICAgICMgZ3VhcmVudGVlIHN1cnZleSBwc2V1ZG8gbW9kZWwgZm9yIG9ic2VydmF0aW9uc1xuICAgIGlmIEBoYXMoXCJzdXJ2ZXlBdHRyaWJ1dGVzXCIpXG4gICAgICBpZiBAZ2V0KFwiYXNzZXNzbWVudElkXCIpICE9IEBnZXQoXCJzdXJ2ZXlBdHRyaWJ1dGVzXCIpLmFzc2Vzc21lbnRJZFxuICAgICAgICBAc2F2ZSBcInN1cnZleUF0dHJpYnV0ZXNcIixcbiAgICAgICAgICBcIl9pZFwiIDogQGlkXG4gICAgICAgICAgXCJhc3Nlc3NtZW50SWRcIiA6IEBnZXQoXCJhc3Nlc3NtZW50SWRcIilcblxuICBsb2FkUHJvdG90eXBlVGVtcGxhdGU6IChwcm90b3R5cGUpIC0+XG4gICAgZm9yIGtleSwgdmFsdWUgb2YgQHRlbXBsYXRlc1twcm90b3R5cGVdXG4gICAgICBAc2V0IGtleSwgdmFsdWVcbiAgICBAc2F2ZSgpXG5cbiAgY29weVRvOiAob3B0aW9ucykgLT5cblxuICAgIGFzc2Vzc21lbnRJZCA9IG9wdGlvbnMuYXNzZXNzbWVudElkXG4gICAgY2FsbGJhY2sgICAgID0gb3B0aW9ucy5jYWxsYmFja1xuICAgIG9yZGVyICAgICAgICA9IG9wdGlvbnMub3JkZXIgfHwgMFxuICAgIFxuICAgIG5ld1N1YnRlc3QgPSBAY2xvbmUoKVxuICAgIG5ld0lkID0gVXRpbHMuZ3VpZCgpXG5cblxuICAgIGlmIG5ld1N1YnRlc3QuaGFzKFwic3VydmV5QXR0cmlidXRlc1wiKVxuICAgICAgbmV3U3VidGVzdC5zZXQgXCJzdXJ2ZXlBdHRyaWJ1dGVzXCIsXG4gICAgICAgIFwiX2lkXCIgOiBuZXdJZFxuICAgICAgICBcImFzc2Vzc21lbnRJZFwiIDogYXNzZXNzbWVudElkXG5cbiAgICBuZXdTdWJ0ZXN0LnNhdmVcbiAgICAgIFwiX2lkXCIgICAgICAgICAgOiBuZXdJZFxuICAgICAgXCJhc3Nlc3NtZW50SWRcIiA6IGFzc2Vzc21lbnRJZFxuICAgICAgXCJvcmRlclwiICAgICAgICA6IG9yZGVyXG4gICAgICBcImdyaWRMaW5rSWRcIiAgIDogXCJcIlxuICAgICxcbiAgICAgIHN1Y2Nlc3M6ID0+XG5cbiAgICAgICAgcXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9uc1xuICAgICAgICBxdWVzdGlvbnMuZmV0Y2hcbiAgICAgICAgICBrZXk6IEBnZXQoXCJhc3Nlc3NtZW50SWRcIilcbiAgICAgICAgICBlcnJvcjogLT4gVXRpbHMuc3RpY2t5IFwiVGhlcmUgd2FzIGFuIGVycm9yIGNvcHlpbmcuXCJcbiAgICAgICAgICBzdWNjZXNzOiAocXVlc3Rpb25Db2xsZWN0aW9uKSA9PlxuICAgICAgICAgICAgc3VidGVzdFF1ZXN0aW9ucyA9IHF1ZXN0aW9uQ29sbGVjdGlvbi53aGVyZSBcInN1YnRlc3RJZFwiIDogQGlkXG5cbiAgICAgICAgICAgIGRvT25lID0gLT4gXG4gICAgICAgICAgICAgIHF1ZXN0aW9uID0gc3VidGVzdFF1ZXN0aW9ucy5wb3AoKVxuICAgICAgICAgICAgICBpZiBxdWVzdGlvblxuICAgICAgICAgICAgICAgIG5ld1F1ZXN0aW9uID0gcXVlc3Rpb24uY2xvbmUoKVxuICAgICAgICAgICAgICAgIG5ld1F1ZXN0aW9uLnNhdmVcbiAgICAgICAgICAgICAgICAgIFwiYXNzZXNzbWVudElkXCIgOiBhc3Nlc3NtZW50SWRcbiAgICAgICAgICAgICAgICAgIFwiX2lkXCIgICAgICAgICAgOiBVdGlscy5ndWlkKCkgXG4gICAgICAgICAgICAgICAgICBcInN1YnRlc3RJZFwiICAgIDogbmV3SWRcbiAgICAgICAgICAgICAgICAsXG4gICAgICAgICAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgICAgICAgICBkb09uZSgpXG4gICAgICAgICAgICAgICAgICBlcnJvcjogLT4gVXRpbHMuc3RpY2t5IFwiVGhlcmUgd2FzIGFuIGVycm9yIGNvcHlpbmcuXCJcbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICMgc2VuZCB1c2VyIHRvIGVkaXQgcGFnZSBmb3IgcmVvcmRlcmluZyBzdWJ0ZXN0c1xuICAgICAgICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiU3VidGVzdCBjb3BpZWRcIlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKClcblxuICAgICAgICAgICAgZG9PbmUoKVxuIiwidmFyIFN1YnRlc3QsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5TdWJ0ZXN0ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFN1YnRlc3QsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFN1YnRlc3QoKSB7XG4gICAgcmV0dXJuIFN1YnRlc3QuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBTdWJ0ZXN0LnByb3RvdHlwZS51cmwgPSBcInN1YnRlc3RcIjtcblxuICBTdWJ0ZXN0LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMudGVtcGxhdGVzID0gVGFuZ2VyaW5lLnRlbXBsYXRlcy5nZXQoXCJwcm90b3R5cGVUZW1wbGF0ZXNcIik7XG4gICAgaWYgKHRoaXMuaGFzKFwic3VydmV5QXR0cmlidXRlc1wiKSkge1xuICAgICAgaWYgKHRoaXMuZ2V0KFwiYXNzZXNzbWVudElkXCIpICE9PSB0aGlzLmdldChcInN1cnZleUF0dHJpYnV0ZXNcIikuYXNzZXNzbWVudElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNhdmUoXCJzdXJ2ZXlBdHRyaWJ1dGVzXCIsIHtcbiAgICAgICAgICBcIl9pZFwiOiB0aGlzLmlkLFxuICAgICAgICAgIFwiYXNzZXNzbWVudElkXCI6IHRoaXMuZ2V0KFwiYXNzZXNzbWVudElkXCIpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTdWJ0ZXN0LnByb3RvdHlwZS5sb2FkUHJvdG90eXBlVGVtcGxhdGUgPSBmdW5jdGlvbihwcm90b3R5cGUpIHtcbiAgICB2YXIga2V5LCByZWYsIHZhbHVlO1xuICAgIHJlZiA9IHRoaXMudGVtcGxhdGVzW3Byb3RvdHlwZV07XG4gICAgZm9yIChrZXkgaW4gcmVmKSB7XG4gICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNhdmUoKTtcbiAgfTtcblxuICBTdWJ0ZXN0LnByb3RvdHlwZS5jb3B5VG8gPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGFzc2Vzc21lbnRJZCwgY2FsbGJhY2ssIG5ld0lkLCBuZXdTdWJ0ZXN0LCBvcmRlcjtcbiAgICBhc3Nlc3NtZW50SWQgPSBvcHRpb25zLmFzc2Vzc21lbnRJZDtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnMuY2FsbGJhY2s7XG4gICAgb3JkZXIgPSBvcHRpb25zLm9yZGVyIHx8IDA7XG4gICAgbmV3U3VidGVzdCA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXdJZCA9IFV0aWxzLmd1aWQoKTtcbiAgICBpZiAobmV3U3VidGVzdC5oYXMoXCJzdXJ2ZXlBdHRyaWJ1dGVzXCIpKSB7XG4gICAgICBuZXdTdWJ0ZXN0LnNldChcInN1cnZleUF0dHJpYnV0ZXNcIiwge1xuICAgICAgICBcIl9pZFwiOiBuZXdJZCxcbiAgICAgICAgXCJhc3Nlc3NtZW50SWRcIjogYXNzZXNzbWVudElkXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1N1YnRlc3Quc2F2ZSh7XG4gICAgICBcIl9pZFwiOiBuZXdJZCxcbiAgICAgIFwiYXNzZXNzbWVudElkXCI6IGFzc2Vzc21lbnRJZCxcbiAgICAgIFwib3JkZXJcIjogb3JkZXIsXG4gICAgICBcImdyaWRMaW5rSWRcIjogXCJcIlxuICAgIH0sIHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHF1ZXN0aW9ucztcbiAgICAgICAgICBxdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zO1xuICAgICAgICAgIHJldHVybiBxdWVzdGlvbnMuZmV0Y2goe1xuICAgICAgICAgICAga2V5OiBfdGhpcy5nZXQoXCJhc3Nlc3NtZW50SWRcIiksXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBVdGlscy5zdGlja3koXCJUaGVyZSB3YXMgYW4gZXJyb3IgY29weWluZy5cIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocXVlc3Rpb25Db2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgIHZhciBkb09uZSwgc3VidGVzdFF1ZXN0aW9ucztcbiAgICAgICAgICAgICAgc3VidGVzdFF1ZXN0aW9ucyA9IHF1ZXN0aW9uQ29sbGVjdGlvbi53aGVyZSh7XG4gICAgICAgICAgICAgICAgXCJzdWJ0ZXN0SWRcIjogX3RoaXMuaWRcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGRvT25lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1F1ZXN0aW9uLCBxdWVzdGlvbjtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbiA9IHN1YnRlc3RRdWVzdGlvbnMucG9wKCk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICBuZXdRdWVzdGlvbiA9IHF1ZXN0aW9uLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3UXVlc3Rpb24uc2F2ZSh7XG4gICAgICAgICAgICAgICAgICAgIFwiYXNzZXNzbWVudElkXCI6IGFzc2Vzc21lbnRJZCxcbiAgICAgICAgICAgICAgICAgICAgXCJfaWRcIjogVXRpbHMuZ3VpZCgpLFxuICAgICAgICAgICAgICAgICAgICBcInN1YnRlc3RJZFwiOiBuZXdJZFxuICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9PbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5zdGlja3koXCJUaGVyZSB3YXMgYW4gZXJyb3IgY29weWluZy5cIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBVdGlscy5taWRBbGVydChcIlN1YnRlc3QgY29waWVkXCIpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZXR1cm4gZG9PbmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN1YnRlc3Q7XG5cbn0pKEJhY2tib25lLk1vZGVsKTtcblxuIiwiY2xhc3MgU3VidGVzdHMgZXh0ZW5kcyBCYWNrYm9uZS5Db2xsZWN0aW9uXG4gIFxuICB1cmw6IFwic3VidGVzdFwiXG4gIG1vZGVsOiBTdWJ0ZXN0XG4gIGRiOlxuICAgIHZpZXc6IFwic3VidGVzdHNCeUFzc2Vzc21lbnRJZFwiXG5cbiAgY29tcGFyYXRvcjogKHN1YnRlc3QpIC0+XG4gICAgICBpZiBzdWJ0ZXN0LmhhcyhcImN1cnJpY3VsdW1JZFwiKVxuICAgICAgICByZXR1cm4gKHBhcnNlSW50KHN1YnRlc3QuZ2V0KFwicGFydFwiKSkqMTAwKSArIHBhcnNlSW50KHN1YnRlc3QuZ2V0KFwib3JkZXJcIikpXG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiBwYXJzZUludChzdWJ0ZXN0LmdldChcIm9yZGVyXCIpKVxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuXG4gIGZldGNoOiAob3B0aW9ucykgLT5cbiAgICBzdXBlciBvcHRpb25zXG5cbiAgIyBjYWxsIHRoaXMgYWZ0ZXIgeW91IGxvYWQgdGhlIGNvbGxlY3Rpb24geW91J3JlIGdvaW5nIHRvIGJlIHdvcmtpbmcgd2l0aFxuICBlbnN1cmVPcmRlcjogLT5cbiAgICB0ZXN0ID0gKG1vZGVsLmdldChcIm9yZGVyXCIpIGZvciBtb2RlbCBpbiBAbW9kZWxzKS5qb2luKFwiXCIpXG4gICAgb3JkZXJlZCA9IChpIGZvciBtb2RlbCxpIGluIEBtb2RlbHMpLmpvaW4oXCJcIilcbiAgICBpZiB0ZXN0ICE9IG9yZGVyZWRcbiAgICAgIGZvciBzdWJ0ZXN0LCBpIGluIEBtb2RlbHNcbiAgICAgICAgc3VidGVzdC5zZXQgXCJvcmRlclwiLCBpXG4gICAgICAgIHN1YnRlc3Quc2F2ZSgpXG4gIFxuIiwidmFyIFN1YnRlc3RzLFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuU3VidGVzdHMgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoU3VidGVzdHMsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFN1YnRlc3RzKCkge1xuICAgIHJldHVybiBTdWJ0ZXN0cy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFN1YnRlc3RzLnByb3RvdHlwZS51cmwgPSBcInN1YnRlc3RcIjtcblxuICBTdWJ0ZXN0cy5wcm90b3R5cGUubW9kZWwgPSBTdWJ0ZXN0O1xuXG4gIFN1YnRlc3RzLnByb3RvdHlwZS5kYiA9IHtcbiAgICB2aWV3OiBcInN1YnRlc3RzQnlBc3Nlc3NtZW50SWRcIlxuICB9O1xuXG4gIFN1YnRlc3RzLnByb3RvdHlwZS5jb21wYXJhdG9yID0gZnVuY3Rpb24oc3VidGVzdCkge1xuICAgIGlmIChzdWJ0ZXN0LmhhcyhcImN1cnJpY3VsdW1JZFwiKSkge1xuICAgICAgcmV0dXJuIChwYXJzZUludChzdWJ0ZXN0LmdldChcInBhcnRcIikpICogMTAwKSArIHBhcnNlSW50KHN1YnRlc3QuZ2V0KFwib3JkZXJcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcGFyc2VJbnQoc3VidGVzdC5nZXQoXCJvcmRlclwiKSk7XG4gICAgfVxuICB9O1xuXG4gIFN1YnRlc3RzLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge307XG5cbiAgU3VidGVzdHMucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiBTdWJ0ZXN0cy5fX3N1cGVyX18uZmV0Y2guY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgfTtcblxuICBTdWJ0ZXN0cy5wcm90b3R5cGUuZW5zdXJlT3JkZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgaiwgbGVuLCBtb2RlbCwgb3JkZXJlZCwgcmVmLCByZXN1bHRzLCBzdWJ0ZXN0LCB0ZXN0O1xuICAgIHRlc3QgPSAoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGosIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgcmVmID0gdGhpcy5tb2RlbHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgbW9kZWwgPSByZWZbal07XG4gICAgICAgIHJlc3VsdHMucHVzaChtb2RlbC5nZXQoXCJvcmRlclwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9KS5jYWxsKHRoaXMpKS5qb2luKFwiXCIpO1xuICAgIG9yZGVyZWQgPSAoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGosIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgcmVmID0gdGhpcy5tb2RlbHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICBtb2RlbCA9IHJlZltpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkuY2FsbCh0aGlzKSkuam9pbihcIlwiKTtcbiAgICBpZiAodGVzdCAhPT0gb3JkZXJlZCkge1xuICAgICAgcmVmID0gdGhpcy5tb2RlbHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICBzdWJ0ZXN0ID0gcmVmW2ldO1xuICAgICAgICBzdWJ0ZXN0LnNldChcIm9yZGVyXCIsIGkpO1xuICAgICAgICByZXN1bHRzLnB1c2goc3VidGVzdC5zYXZlKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJ0ZXN0cztcblxufSkoQmFja2JvbmUuQ29sbGVjdGlvbik7XG5cbiIsImNsYXNzIFN1YnRlc3RMaXN0RWRpdFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcIlN1YnRlc3RMaXN0RWRpdFZpZXdcIlxuXG4gIHRhZ05hbWUgOiBcInVsXCJcbiAgXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBhc3Nlc3NtZW50ID0gb3B0aW9ucy5hc3Nlc3NtZW50XG4gICAgQHZpZXdzID0gW11cblxuICByZW5kZXI6ID0+XG4gICAgQGNsb3NlVmlld3MoKVxuICAgIEBhc3Nlc3NtZW50LnN1YnRlc3RzLnNvcnQoKVxuICAgIEBhc3Nlc3NtZW50LnN1YnRlc3RzLmVhY2ggKHN1YnRlc3QpID0+XG4gICAgICBvbmVWaWV3ID0gbmV3IFN1YnRlc3RMaXN0RWxlbWVudFZpZXdcbiAgICAgICAgXCJzdWJ0ZXN0XCIgOiBzdWJ0ZXN0XG4gICAgICBAdmlld3MucHVzaCBvbmVWaWV3XG4gICAgICBvbmVWaWV3LnJlbmRlcigpXG4gICAgICBvbmVWaWV3Lm9uIFwic3VidGVzdDpkZWxldGVcIiwgQGRlbGV0ZVN1YnRlc3RcbiAgICAgIG9uZVZpZXcub24gXCJzdWJ0ZXN0OmNvcHlcIiwgQGNvcHlTdWJ0ZXN0XG4gICAgICBAJGVsLmFwcGVuZCBvbmVWaWV3LmVsXG5cbiAgY29weVN1YnRlc3Q6ICh0YXJnZXRBc3Nlc3NtZW50SWQsIHN1YnRlc3RJZCkgPT5cbiAgICBVdGlscy5taWRBbGVydCBcIkNvcHlpbmcuLi5cIlxuICAgIHN1YnRlc3RzID0gQHZpZXdzLmZpbHRlciggKHZpZXcpIC0+IHZpZXcuc2VsZWN0ZWQgPT0gdHJ1ZSApLm1hcCggKHZpZXcpIC0+IHZpZXcubW9kZWwgKVxuXG4gICAgaWYgc3VidGVzdHMubGVuZ3RoIGlzIDAgXG4gICAgICBzdWJ0ZXN0cyA9IFtAYXNzZXNzbWVudC5zdWJ0ZXN0cy5nZXQoc3VidGVzdElkKV1cbiAgICBcbiAgICB0YXJnZXRTdWJ0ZXN0Q291bnQgPSAwXG4gICAgKG5ldyBTdWJ0ZXN0cykuZmV0Y2hcbiAgICAgIGtleTogdGFyZ2V0QXNzZXNzbWVudElkXG4gICAgICBzdWNjZXNzOiAoY29sbGVjdGlvbikgPT5cblxuICAgICAgICB0YXJnZXRTdWJ0ZXN0Q291bnQgPSBjb2xsZWN0aW9uLmxlbmd0aFxuICAgICAgICBuZXdTdWJ0ZXN0Q291bnQgPSAwXG4gICAgICAgIGRvT25lID0gLT5cbiAgICAgICAgICBpZiBzdWJ0ZXN0cy5sZW5ndGhcbiAgICAgICAgICAgIHN1YnRlc3QgPSBzdWJ0ZXN0cy5zaGlmdCgpXG4gICAgICAgICAgICBuZXdTdWJ0ZXN0Q291bnQrK1xuICAgICAgICAgICAgc3VidGVzdC5jb3B5VG8gXG4gICAgICAgICAgICAgIGFzc2Vzc21lbnRJZCA6IHRhcmdldEFzc2Vzc21lbnRJZFxuICAgICAgICAgICAgICBvcmRlcjogdGFyZ2V0U3VidGVzdENvdW50ICsgbmV3U3VidGVzdENvdW50XG4gICAgICAgICAgICAgIGNhbGxiYWNrOiAtPiBkb09uZSgpXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcImVkaXQvI3t0YXJnZXRBc3Nlc3NtZW50SWR9XCIsIHRydWUpXG4gICAgICAgIGRvT25lKClcblxuICBkZWxldGVTdWJ0ZXN0OiAoc3VidGVzdCkgPT5cbiAgICBAYXNzZXNzbWVudC5zdWJ0ZXN0cy5yZW1vdmUgc3VidGVzdFxuICAgIHN1YnRlc3QuZGVzdHJveSgpXG4gICAgXG4gIGNsb3NlVmlld3M6IC0+XG4gICAgZm9yIHZpZXcgaW4gQHZpZXdzXG4gICAgICB2aWV3LmNsb3NlKClcbiAgICBAdmlld3MgPSBbXVxuIiwidmFyIFN1YnRlc3RMaXN0RWRpdFZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuU3VidGVzdExpc3RFZGl0VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChTdWJ0ZXN0TGlzdEVkaXRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBTdWJ0ZXN0TGlzdEVkaXRWaWV3KCkge1xuICAgIHRoaXMuZGVsZXRlU3VidGVzdCA9IGJpbmQodGhpcy5kZWxldGVTdWJ0ZXN0LCB0aGlzKTtcbiAgICB0aGlzLmNvcHlTdWJ0ZXN0ID0gYmluZCh0aGlzLmNvcHlTdWJ0ZXN0LCB0aGlzKTtcbiAgICB0aGlzLnJlbmRlciA9IGJpbmQodGhpcy5yZW5kZXIsIHRoaXMpO1xuICAgIHJldHVybiBTdWJ0ZXN0TGlzdEVkaXRWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgU3VidGVzdExpc3RFZGl0Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJTdWJ0ZXN0TGlzdEVkaXRWaWV3XCI7XG5cbiAgU3VidGVzdExpc3RFZGl0Vmlldy5wcm90b3R5cGUudGFnTmFtZSA9IFwidWxcIjtcblxuICBTdWJ0ZXN0TGlzdEVkaXRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMuYXNzZXNzbWVudCA9IG9wdGlvbnMuYXNzZXNzbWVudDtcbiAgICByZXR1cm4gdGhpcy52aWV3cyA9IFtdO1xuICB9O1xuXG4gIFN1YnRlc3RMaXN0RWRpdFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY2xvc2VWaWV3cygpO1xuICAgIHRoaXMuYXNzZXNzbWVudC5zdWJ0ZXN0cy5zb3J0KCk7XG4gICAgcmV0dXJuIHRoaXMuYXNzZXNzbWVudC5zdWJ0ZXN0cy5lYWNoKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN1YnRlc3QpIHtcbiAgICAgICAgdmFyIG9uZVZpZXc7XG4gICAgICAgIG9uZVZpZXcgPSBuZXcgU3VidGVzdExpc3RFbGVtZW50Vmlldyh7XG4gICAgICAgICAgXCJzdWJ0ZXN0XCI6IHN1YnRlc3RcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLnZpZXdzLnB1c2gob25lVmlldyk7XG4gICAgICAgIG9uZVZpZXcucmVuZGVyKCk7XG4gICAgICAgIG9uZVZpZXcub24oXCJzdWJ0ZXN0OmRlbGV0ZVwiLCBfdGhpcy5kZWxldGVTdWJ0ZXN0KTtcbiAgICAgICAgb25lVmlldy5vbihcInN1YnRlc3Q6Y29weVwiLCBfdGhpcy5jb3B5U3VidGVzdCk7XG4gICAgICAgIHJldHVybiBfdGhpcy4kZWwuYXBwZW5kKG9uZVZpZXcuZWwpO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gIH07XG5cbiAgU3VidGVzdExpc3RFZGl0Vmlldy5wcm90b3R5cGUuY29weVN1YnRlc3QgPSBmdW5jdGlvbih0YXJnZXRBc3Nlc3NtZW50SWQsIHN1YnRlc3RJZCkge1xuICAgIHZhciBzdWJ0ZXN0cywgdGFyZ2V0U3VidGVzdENvdW50O1xuICAgIFV0aWxzLm1pZEFsZXJ0KFwiQ29weWluZy4uLlwiKTtcbiAgICBzdWJ0ZXN0cyA9IHRoaXMudmlld3MuZmlsdGVyKGZ1bmN0aW9uKHZpZXcpIHtcbiAgICAgIHJldHVybiB2aWV3LnNlbGVjdGVkID09PSB0cnVlO1xuICAgIH0pLm1hcChmdW5jdGlvbih2aWV3KSB7XG4gICAgICByZXR1cm4gdmlldy5tb2RlbDtcbiAgICB9KTtcbiAgICBpZiAoc3VidGVzdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICBzdWJ0ZXN0cyA9IFt0aGlzLmFzc2Vzc21lbnQuc3VidGVzdHMuZ2V0KHN1YnRlc3RJZCldO1xuICAgIH1cbiAgICB0YXJnZXRTdWJ0ZXN0Q291bnQgPSAwO1xuICAgIHJldHVybiAobmV3IFN1YnRlc3RzKS5mZXRjaCh7XG4gICAgICBrZXk6IHRhcmdldEFzc2Vzc21lbnRJZCxcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbikge1xuICAgICAgICAgIHZhciBkb09uZSwgbmV3U3VidGVzdENvdW50O1xuICAgICAgICAgIHRhcmdldFN1YnRlc3RDb3VudCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgICAgIG5ld1N1YnRlc3RDb3VudCA9IDA7XG4gICAgICAgICAgZG9PbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzdWJ0ZXN0O1xuICAgICAgICAgICAgaWYgKHN1YnRlc3RzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBzdWJ0ZXN0ID0gc3VidGVzdHMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgbmV3U3VidGVzdENvdW50Kys7XG4gICAgICAgICAgICAgIHJldHVybiBzdWJ0ZXN0LmNvcHlUbyh7XG4gICAgICAgICAgICAgICAgYXNzZXNzbWVudElkOiB0YXJnZXRBc3Nlc3NtZW50SWQsXG4gICAgICAgICAgICAgICAgb3JkZXI6IHRhcmdldFN1YnRlc3RDb3VudCArIG5ld1N1YnRlc3RDb3VudCxcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZG9PbmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJlZGl0L1wiICsgdGFyZ2V0QXNzZXNzbWVudElkLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBkb09uZSgpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBTdWJ0ZXN0TGlzdEVkaXRWaWV3LnByb3RvdHlwZS5kZWxldGVTdWJ0ZXN0ID0gZnVuY3Rpb24oc3VidGVzdCkge1xuICAgIHRoaXMuYXNzZXNzbWVudC5zdWJ0ZXN0cy5yZW1vdmUoc3VidGVzdCk7XG4gICAgcmV0dXJuIHN1YnRlc3QuZGVzdHJveSgpO1xuICB9O1xuXG4gIFN1YnRlc3RMaXN0RWRpdFZpZXcucHJvdG90eXBlLmNsb3NlVmlld3MgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgbGVuLCByZWYsIHZpZXc7XG4gICAgcmVmID0gdGhpcy52aWV3cztcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZpZXcgPSByZWZbaV07XG4gICAgICB2aWV3LmNsb3NlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZpZXdzID0gW107XG4gIH07XG5cbiAgcmV0dXJuIFN1YnRlc3RMaXN0RWRpdFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBTdWJ0ZXN0TGlzdEVsZW1lbnRWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZSA6IFwic3VidGVzdF9lbGVtZW50XCJcbiAgdGFnTmFtZSA6IFwibGlcIlxuXG4gIGV2ZW50czogXG4gICAgJ2NsaWNrIC5pY29uX2VkaXQnICAgICA6ICdlZGl0J1xuICAgIFwiY2xpY2sgLmljb25fZGVsZXRlXCIgICA6IFwidG9nZ2xlRGVsZXRlQ29uZmlybVwiXG4gICAgXCJjbGljayAuZGVsZXRlX2NhbmNlbFwiIDogXCJ0b2dnbGVEZWxldGVDb25maXJtXCJcbiAgICBcImNsaWNrIC5kZWxldGVfZGVsZXRlXCIgOiBcImRlbGV0ZVwiXG4gICAgXCJjbGljayAuaWNvbl9jb3B5XCIgICAgIDogXCJvcGVuQ29weU1lbnVcIlxuICAgIFwiY2xpY2sgLmRvX2NvcHlcIiAgICAgICA6IFwiZG9Db3B5XCJcbiAgICBcImNsaWNrIC5jYW5jZWxfY29weVwiICAgOiBcImNhbmNlbENvcHlcIlxuXG4gICAgXCJjbGljayAubmFtZVwiIDogXCJ0b2dnbGVTZWxlY3RlZFwiXG5cbiAgdG9nZ2xlU2VsZWN0ZWQ6IC0+XG4gICAgaWYgQHNlbGVjdGVkID09IHRydWVcbiAgICAgIEBzZWxlY3RlZCA9IGZhbHNlXG4gICAgICBAJGVsLnJlbW92ZUNsYXNzIFwic3VidGVzdC1zZWxlY3RlZFwiXG4gICAgZWxzZVxuICAgICAgQHNlbGVjdGVkID0gdHJ1ZVxuICAgICAgQCRlbC5hZGRDbGFzcyBcInN1YnRlc3Qtc2VsZWN0ZWRcIlxuXG4gIHRvZ2dsZURlbGV0ZUNvbmZpcm06IC0+IEAkZWwuZmluZChcIi5kZWxldGVfY29uZmlybVwiKS5mYWRlVG9nZ2xlKDI1MCk7IGZhbHNlXG5cbiAgZGVsZXRlOiAtPiBAdHJpZ2dlciBcInN1YnRlc3Q6ZGVsZXRlXCIsIEBtb2RlbDsgZmFsc2VcblxuICBlZGl0OiAtPlxuICAgIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJzdWJ0ZXN0LyN7QG1vZGVsLmlkfVwiLCB0cnVlXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgQG1vZGVsID0gb3B0aW9ucy5zdWJ0ZXN0XG4gICAgQGdyb3VwID0gb3B0aW9ucy5ncm91cCAjIGZvciBjb3B5aW5nXG5cbiAgICAjIFRoaXMgaXMgZm9yICQuc29ydGFibGUuIERvbid0IHJlbW92ZS5cbiAgICBAJGVsLmF0dHIgXCJkYXRhLWlkXCIsIEBtb2RlbC5pZFxuXG4gIG9wZW5Db3B5TWVudTogLT5cbiAgICBAJGVsLmZpbmQoXCIuY29weV9tZW51XCIpLnJlbW92ZUNsYXNzKFwiY29uZmlybWF0aW9uXCIpXG4gICAgQCRlbC5maW5kKFwiLmNvcHlfc2VsZWN0XCIpLmFwcGVuZChcIjxvcHRpb24gZGlzYWJsZWQ9J2Rpc2FibGVkJyBzZWxlY3RlZD0nc2VsZWN0ZWQnPkxvYWRpbmcgYXNzZXNzbWVudHMuLi48L29wdGlvbj5cIilcbiAgICBAZmV0Y2hBc3Nlc3NtZW50cygpXG5cblxuICBmZXRjaEFzc2Vzc21lbnRzOiA9PlxuICAgIEBncm91cEFzc2Vzc21lbnRzID0gbmV3IEFzc2Vzc21lbnRzXG4gICAgQGdyb3VwQXNzZXNzbWVudHMuZmV0Y2hcbiAgICAgIGtleTogQGdyb3VwXG4gICAgICBzdWNjZXNzOiA9PlxuICAgICAgICBAcG9wdWxhdGVBc3Nlc3NtZW50U2VsZWN0b3IoKVxuICBcbiAgcG9wdWxhdGVBc3Nlc3NtZW50U2VsZWN0b3I6ID0+XG4gICAgb3B0aW9uTGlzdCA9IFwiXCJcbiAgICBmb3IgYXNzZXNzbWVudCBpbiBAZ3JvdXBBc3Nlc3NtZW50cy5tb2RlbHNcbiAgICAgIG9wdGlvbkxpc3QgKz0gXCI8b3B0aW9uIGRhdGEtYXNzZXNzbWVudElkPScje2Fzc2Vzc21lbnQuaWR9Jz4je2Fzc2Vzc21lbnQuZ2V0KFwibmFtZVwiKX08L29wdGlvbj5cIlxuICAgICRzZWxlY3QgPSBAJGVsLmZpbmQoXCIuY29weV9zZWxlY3RcIikuaHRtbChvcHRpb25MaXN0KVxuICAgICAgXG4gIGRvQ29weTogKGUpIC0+XG4gICAgQHRyaWdnZXIgXCJzdWJ0ZXN0OmNvcHlcIiwgQCRlbC5maW5kKFwiLmNvcHlfc2VsZWN0IDpzZWxlY3RlZFwiKS5hdHRyKCdkYXRhLWFzc2Vzc21lbnRJZCcpLCBAbW9kZWwuaWRcbiAgICBAJGVsLmZpbmQoXCIuY29weV9tZW51XCIpLmFkZENsYXNzKFwiY29uZmlybWF0aW9uXCIpXG4gICAgXG4gIGNhbmNlbENvcHk6IC0+XG4gICAgQCRlbC5maW5kKFwiLmNvcHlfbWVudVwiKS5hZGRDbGFzcyhcImNvbmZpcm1hdGlvblwiKVxuXG4gIHJlbmRlcjogLT5cbiAgICBzdWJ0ZXN0TmFtZSAgID0gXCI8c3BhbiBjbGFzcz0nbmFtZSc+I3tAbW9kZWwuZ2V0KFwibmFtZVwiKX08L3NwYW4+XCJcbiAgICBwcm90b3R5cGUgICAgID0gXCI8c3BhbiBjbGFzcz0nc21hbGxfZ3JleSc+I3tAbW9kZWwuZ2V0KFwicHJvdG90eXBlXCIpfTwvc3Bhbj5cIlxuICAgIGljb25EcmFnICAgICAgPSBcIjxpbWcgc3JjPSdpbWFnZXMvaWNvbl9kcmFnLnBuZycgdGl0bGU9J0RyYWcgdG8gcmVvcmRlcicgY2xhc3M9J2ljb24gc29ydGFibGVfaGFuZGxlJz5cIlxuICAgIGljb25FZGl0ICAgICAgPSBcIjxpbWcgc3JjPSdpbWFnZXMvaWNvbl9lZGl0LnBuZycgdGl0bGU9J0VkaXQnIGNsYXNzPSdpY29uIGljb25fZWRpdCc+XCJcbiAgICBpY29uRGVsZXRlICAgID0gXCI8aW1nIHNyYz0naW1hZ2VzL2ljb25fZGVsZXRlLnBuZycgdGl0bGU9J0RlbGV0ZScgY2xhc3M9J2ljb24gaWNvbl9kZWxldGUnPlwiXG4gICAgY29weUljb24gICAgICA9IFwiPGltZyBzcmM9J2ltYWdlcy9pY29uX2NvcHlfdG8ucG5nJyB0aXRsZT0nQ29weSB0by4uLicgY2xhc3M9J2ljb24gaWNvbl9jb3B5Jz5cIlxuICAgIGNvcHlNZW51ICAgICAgPSBcIjxkaXYgY2xhc3M9J2NvbmZpcm1hdGlvbiBjb3B5X21lbnUnPjxzZWxlY3QgY2xhc3M9J2NvcHlfc2VsZWN0Jz48L3NlbGVjdD48YnI+PGJ1dHRvbiBjbGFzcz0nZG9fY29weSBjb21tYW5kJz5Db3B5PC9idXR0b24+IDxidXR0b24gY2xhc3M9J2NhbmNlbF9jb3B5IGNvbW1hbmQnPkNhbmNlbDwvYnV0dG9uPjwvZGl2PlwiXG4gICAgZGVsZXRlQ29uZmlybSA9IFwiPGJyPjxzcGFuIGNsYXNzPSdkZWxldGVfY29uZmlybSc+PGRpdiBjbGFzcz0nbWVudV9ib3gnPkNvbmZpcm0gPGJ1dHRvbiBjbGFzcz0nZGVsZXRlX2RlbGV0ZSBjb21tYW5kX3JlZCc+RGVsZXRlPC9idXR0b24+IDxidXR0b24gY2xhc3M9J2RlbGV0ZV9jYW5jZWwgY29tbWFuZCc+Q2FuY2VsPC9idXR0b24+PC9kaXY+PC9zcGFuPlwiXG4gICAgQCRlbC5odG1sIFwiXG4gICAgICA8dGFibGU+PHRyPlxuICAgICAgPHRkPiN7aWNvbkRyYWd9PC90ZD5cbiAgICAgIDx0ZD5cbiAgICAgICAgI3tzdWJ0ZXN0TmFtZX1cbiAgICAgICAgI3twcm90b3R5cGV9XG4gICAgICAgICN7aWNvbkVkaXR9XG4gICAgICAgICN7Y29weUljb259XG4gICAgICAgICN7aWNvbkRlbGV0ZX1cbiAgICAgICAgI3tkZWxldGVDb25maXJtfVxuICAgICAgICAje2NvcHlNZW51fVxuICAgICAgPC90ZD5cbiAgICAgIDwvdHI+PC90YWJsZT5cbiAgICBcIlxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG4iLCJ2YXIgU3VidGVzdExpc3RFbGVtZW50VmlldyxcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5TdWJ0ZXN0TGlzdEVsZW1lbnRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFN1YnRlc3RMaXN0RWxlbWVudFZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFN1YnRlc3RMaXN0RWxlbWVudFZpZXcoKSB7XG4gICAgdGhpcy5wb3B1bGF0ZUFzc2Vzc21lbnRTZWxlY3RvciA9IGJpbmQodGhpcy5wb3B1bGF0ZUFzc2Vzc21lbnRTZWxlY3RvciwgdGhpcyk7XG4gICAgdGhpcy5mZXRjaEFzc2Vzc21lbnRzID0gYmluZCh0aGlzLmZldGNoQXNzZXNzbWVudHMsIHRoaXMpO1xuICAgIHJldHVybiBTdWJ0ZXN0TGlzdEVsZW1lbnRWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgU3VidGVzdExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJzdWJ0ZXN0X2VsZW1lbnRcIjtcblxuICBTdWJ0ZXN0TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS50YWdOYW1lID0gXCJsaVwiO1xuXG4gIFN1YnRlc3RMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICAnY2xpY2sgLmljb25fZWRpdCc6ICdlZGl0JyxcbiAgICBcImNsaWNrIC5pY29uX2RlbGV0ZVwiOiBcInRvZ2dsZURlbGV0ZUNvbmZpcm1cIixcbiAgICBcImNsaWNrIC5kZWxldGVfY2FuY2VsXCI6IFwidG9nZ2xlRGVsZXRlQ29uZmlybVwiLFxuICAgIFwiY2xpY2sgLmRlbGV0ZV9kZWxldGVcIjogXCJkZWxldGVcIixcbiAgICBcImNsaWNrIC5pY29uX2NvcHlcIjogXCJvcGVuQ29weU1lbnVcIixcbiAgICBcImNsaWNrIC5kb19jb3B5XCI6IFwiZG9Db3B5XCIsXG4gICAgXCJjbGljayAuY2FuY2VsX2NvcHlcIjogXCJjYW5jZWxDb3B5XCIsXG4gICAgXCJjbGljayAubmFtZVwiOiBcInRvZ2dsZVNlbGVjdGVkXCJcbiAgfTtcblxuICBTdWJ0ZXN0TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS50b2dnbGVTZWxlY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnNlbGVjdGVkID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcy4kZWwucmVtb3ZlQ2xhc3MoXCJzdWJ0ZXN0LXNlbGVjdGVkXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLiRlbC5hZGRDbGFzcyhcInN1YnRlc3Qtc2VsZWN0ZWRcIik7XG4gICAgfVxuICB9O1xuXG4gIFN1YnRlc3RMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnRvZ2dsZURlbGV0ZUNvbmZpcm0gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRlbC5maW5kKFwiLmRlbGV0ZV9jb25maXJtXCIpLmZhZGVUb2dnbGUoMjUwKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgU3VidGVzdExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGVbXCJkZWxldGVcIl0gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRyaWdnZXIoXCJzdWJ0ZXN0OmRlbGV0ZVwiLCB0aGlzLm1vZGVsKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgU3VidGVzdExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuZWRpdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwic3VidGVzdC9cIiArIHRoaXMubW9kZWwuaWQsIHRydWUpO1xuICB9O1xuXG4gIFN1YnRlc3RMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5tb2RlbCA9IG9wdGlvbnMuc3VidGVzdDtcbiAgICB0aGlzLmdyb3VwID0gb3B0aW9ucy5ncm91cDtcbiAgICByZXR1cm4gdGhpcy4kZWwuYXR0cihcImRhdGEtaWRcIiwgdGhpcy5tb2RlbC5pZCk7XG4gIH07XG5cbiAgU3VidGVzdExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUub3BlbkNvcHlNZW51ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwuZmluZChcIi5jb3B5X21lbnVcIikucmVtb3ZlQ2xhc3MoXCJjb25maXJtYXRpb25cIik7XG4gICAgdGhpcy4kZWwuZmluZChcIi5jb3B5X3NlbGVjdFwiKS5hcHBlbmQoXCI8b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz5Mb2FkaW5nIGFzc2Vzc21lbnRzLi4uPC9vcHRpb24+XCIpO1xuICAgIHJldHVybiB0aGlzLmZldGNoQXNzZXNzbWVudHMoKTtcbiAgfTtcblxuICBTdWJ0ZXN0TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5mZXRjaEFzc2Vzc21lbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5ncm91cEFzc2Vzc21lbnRzID0gbmV3IEFzc2Vzc21lbnRzO1xuICAgIHJldHVybiB0aGlzLmdyb3VwQXNzZXNzbWVudHMuZmV0Y2goe1xuICAgICAga2V5OiB0aGlzLmdyb3VwLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMucG9wdWxhdGVBc3Nlc3NtZW50U2VsZWN0b3IoKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgU3VidGVzdExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUucG9wdWxhdGVBc3Nlc3NtZW50U2VsZWN0b3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgJHNlbGVjdCwgYXNzZXNzbWVudCwgaSwgbGVuLCBvcHRpb25MaXN0LCByZWY7XG4gICAgb3B0aW9uTGlzdCA9IFwiXCI7XG4gICAgcmVmID0gdGhpcy5ncm91cEFzc2Vzc21lbnRzLm1vZGVscztcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFzc2Vzc21lbnQgPSByZWZbaV07XG4gICAgICBvcHRpb25MaXN0ICs9IFwiPG9wdGlvbiBkYXRhLWFzc2Vzc21lbnRJZD0nXCIgKyBhc3Nlc3NtZW50LmlkICsgXCInPlwiICsgKGFzc2Vzc21lbnQuZ2V0KFwibmFtZVwiKSkgKyBcIjwvb3B0aW9uPlwiO1xuICAgIH1cbiAgICByZXR1cm4gJHNlbGVjdCA9IHRoaXMuJGVsLmZpbmQoXCIuY29weV9zZWxlY3RcIikuaHRtbChvcHRpb25MaXN0KTtcbiAgfTtcblxuICBTdWJ0ZXN0TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5kb0NvcHkgPSBmdW5jdGlvbihlKSB7XG4gICAgdGhpcy50cmlnZ2VyKFwic3VidGVzdDpjb3B5XCIsIHRoaXMuJGVsLmZpbmQoXCIuY29weV9zZWxlY3QgOnNlbGVjdGVkXCIpLmF0dHIoJ2RhdGEtYXNzZXNzbWVudElkJyksIHRoaXMubW9kZWwuaWQpO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLmNvcHlfbWVudVwiKS5hZGRDbGFzcyhcImNvbmZpcm1hdGlvblwiKTtcbiAgfTtcblxuICBTdWJ0ZXN0TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5jYW5jZWxDb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIuY29weV9tZW51XCIpLmFkZENsYXNzKFwiY29uZmlybWF0aW9uXCIpO1xuICB9O1xuXG4gIFN1YnRlc3RMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5SWNvbiwgY29weU1lbnUsIGRlbGV0ZUNvbmZpcm0sIGljb25EZWxldGUsIGljb25EcmFnLCBpY29uRWRpdCwgcHJvdG90eXBlLCBzdWJ0ZXN0TmFtZTtcbiAgICBzdWJ0ZXN0TmFtZSA9IFwiPHNwYW4gY2xhc3M9J25hbWUnPlwiICsgKHRoaXMubW9kZWwuZ2V0KFwibmFtZVwiKSkgKyBcIjwvc3Bhbj5cIjtcbiAgICBwcm90b3R5cGUgPSBcIjxzcGFuIGNsYXNzPSdzbWFsbF9ncmV5Jz5cIiArICh0aGlzLm1vZGVsLmdldChcInByb3RvdHlwZVwiKSkgKyBcIjwvc3Bhbj5cIjtcbiAgICBpY29uRHJhZyA9IFwiPGltZyBzcmM9J2ltYWdlcy9pY29uX2RyYWcucG5nJyB0aXRsZT0nRHJhZyB0byByZW9yZGVyJyBjbGFzcz0naWNvbiBzb3J0YWJsZV9oYW5kbGUnPlwiO1xuICAgIGljb25FZGl0ID0gXCI8aW1nIHNyYz0naW1hZ2VzL2ljb25fZWRpdC5wbmcnIHRpdGxlPSdFZGl0JyBjbGFzcz0naWNvbiBpY29uX2VkaXQnPlwiO1xuICAgIGljb25EZWxldGUgPSBcIjxpbWcgc3JjPSdpbWFnZXMvaWNvbl9kZWxldGUucG5nJyB0aXRsZT0nRGVsZXRlJyBjbGFzcz0naWNvbiBpY29uX2RlbGV0ZSc+XCI7XG4gICAgY29weUljb24gPSBcIjxpbWcgc3JjPSdpbWFnZXMvaWNvbl9jb3B5X3RvLnBuZycgdGl0bGU9J0NvcHkgdG8uLi4nIGNsYXNzPSdpY29uIGljb25fY29weSc+XCI7XG4gICAgY29weU1lbnUgPSBcIjxkaXYgY2xhc3M9J2NvbmZpcm1hdGlvbiBjb3B5X21lbnUnPjxzZWxlY3QgY2xhc3M9J2NvcHlfc2VsZWN0Jz48L3NlbGVjdD48YnI+PGJ1dHRvbiBjbGFzcz0nZG9fY29weSBjb21tYW5kJz5Db3B5PC9idXR0b24+IDxidXR0b24gY2xhc3M9J2NhbmNlbF9jb3B5IGNvbW1hbmQnPkNhbmNlbDwvYnV0dG9uPjwvZGl2PlwiO1xuICAgIGRlbGV0ZUNvbmZpcm0gPSBcIjxicj48c3BhbiBjbGFzcz0nZGVsZXRlX2NvbmZpcm0nPjxkaXYgY2xhc3M9J21lbnVfYm94Jz5Db25maXJtIDxidXR0b24gY2xhc3M9J2RlbGV0ZV9kZWxldGUgY29tbWFuZF9yZWQnPkRlbGV0ZTwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdkZWxldGVfY2FuY2VsIGNvbW1hbmQnPkNhbmNlbDwvYnV0dG9uPjwvZGl2Pjwvc3Bhbj5cIjtcbiAgICB0aGlzLiRlbC5odG1sKFwiPHRhYmxlPjx0cj4gPHRkPlwiICsgaWNvbkRyYWcgKyBcIjwvdGQ+IDx0ZD4gXCIgKyBzdWJ0ZXN0TmFtZSArIFwiIFwiICsgcHJvdG90eXBlICsgXCIgXCIgKyBpY29uRWRpdCArIFwiIFwiICsgY29weUljb24gKyBcIiBcIiArIGljb25EZWxldGUgKyBcIiBcIiArIGRlbGV0ZUNvbmZpcm0gKyBcIiBcIiArIGNvcHlNZW51ICsgXCIgPC90ZD4gPC90cj48L3RhYmxlPlwiKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgcmV0dXJuIFN1YnRlc3RMaXN0RWxlbWVudFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBTdWJ0ZXN0RWRpdFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcInN1YnRlc3RfZWRpdFwiXG5cbiAgZXZlbnRzOlxuICAgICdjbGljayAuYmFja19idXR0b24nICAgICAgICAgOiAnZ29CYWNrJ1xuICAgICdjbGljayAuc2F2ZV9zdWJ0ZXN0JyAgICAgICAgOiAnc2F2ZVN1YnRlc3QnXG5cbiAgICAnY2xpY2sgLnJpY2h0ZXh0X2VkaXQnICAgICA6ICdyaWNodGV4dEVkaXQnXG4gICAgJ2NsaWNrIC5yaWNodGV4dF9zYXZlJyAgICAgOiAncmljaHRleHRTYXZlJ1xuICAgICdjbGljayAucmljaHRleHRfY2FuY2VsJyAgIDogJ3JpY2h0ZXh0Q2FuY2VsJ1xuICAgICdjaGFuZ2UgI2Rpc3BsYXlfY29kZScgOiAndmFsaWRhdGVTeW50YXgnXG5cblxuICByaWNodGV4dENvbmZpZzogW1xuICAgICAgXCJrZXlcIiAgICAgICAgICAgOiBcImVudW1lcmF0b3JcIlxuICAgICAgXCJhdHRyaWJ1dGVOYW1lXCIgOiBcImVudW1lcmF0b3JIZWxwXCJcbiAgICAsXG4gICAgICBcImtleVwiICAgICAgICAgICA6IFwiZGlhbG9nXCJcbiAgICAgIFwiYXR0cmlidXRlTmFtZVwiIDogXCJzdHVkZW50RGlhbG9nXCJcbiAgICAsXG4gICAgICBcImtleVwiICAgICAgICAgICA6IFwidHJhbnNpdGlvblwiXG4gICAgICBcImF0dHJpYnV0ZU5hbWVcIiA6IFwidHJhbnNpdGlvbkNvbW1lbnRcIlxuICBdXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cblxuICAgIEBhY3Rpdml0eSA9IG51bGxcbiAgICBAdGltZXIgPSAwXG4gICAgXG4gICAgQHJpY2h0ZXh0S2V5cyA9IF8ucGx1Y2soQHJpY2h0ZXh0Q29uZmlnLCBcImtleVwiKVxuXG4gICAgQG1vZGVsICAgICAgPSBvcHRpb25zLm1vZGVsXG4gICAgQGFzc2Vzc21lbnQgPSBvcHRpb25zLmFzc2Vzc21lbnRcbiAgICBAY29uZmlnICAgICA9IFRhbmdlcmluZS5jb25maWcuc3VidGVzdFxuXG4gICAgb3B0aW9ucy5wYXJlbnQgPSBAXG4gICAgQHByb3RvdHlwZVZpZXdzICA9IFRhbmdlcmluZS5jb25maWcuZ2V0IFwicHJvdG90eXBlVmlld3NcIlxuICAgIEBwcm90b3R5cGVFZGl0b3IgPSBuZXcgd2luZG93W0Bwcm90b3R5cGVWaWV3c1tAbW9kZWwuZ2V0ICdwcm90b3R5cGUnXVsnZWRpdCddXSBvcHRpb25zXG5cbiAgICBAcHJvdG90eXBlRWRpdG9yLm9uIFwicXVlc3Rpb24tZWRpdFwiLCAocXVlc3Rpb25JZCkgPT5cbiAgICAgIEBzYXZlXG4gICAgICAgIHF1ZXN0aW9uU2F2ZSAgOiBmYWxzZVxuICAgICAgICBzdWNjZXNzICAgICAgIDogLT4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZSBcInF1ZXN0aW9uLyN7cXVlc3Rpb25JZH1cIiwgdHJ1ZVxuXG4gIGdvQmFjazogPT5cbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiZWRpdC9cIiArIEBtb2RlbC5nZXQoXCJhc3Nlc3NtZW50SWRcIiksIHRydWVcblxuXG4gIHZhbGlkYXRlU3ludGF4OiAoZXZlbnQpIC0+XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgIGNvZGUgPSAkdGFyZ2V0LnZhbCgpXG4gICAgaWYgbm90IF8uaXNFbXB0eShjb2RlKVxuICAgICAgdHJ5XG4gICAgICAgIG9sZEFuc3dlciA9IEBhbnN3ZXJcbiAgICAgICAgQGFuc3dlciA9IHt9XG4gICAgICAgIEBpc1ZhbGlkID0gQ29mZmVlU2NyaXB0LmNvbXBpbGUuYXBwbHkoQCwgW2NvZGVdKVxuICAgICAgICBpZiBvbGRBbnN3ZXI/IHRoZW4gQGFuc3dlciA9IG9sZEFuc3dlciBlbHNlIGRlbGV0ZSB0aGlzW1wiYW5zd2VyXCJdXG4gICAgICBjYXRjaCBlcnJvclxuICAgICAgICBuYW1lID0gKCgvZnVuY3Rpb24gKC57MSx9KVxcKC8pLmV4ZWMoZXJyb3IuY29uc3RydWN0b3IudG9TdHJpbmcoKSlbMV0pXG4gICAgICAgIHdoZXJlID0gJHRhcmdldC5hdHRyKCdpZCcpLmh1bWFuaXplKClcbiAgICAgICAgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgYWxlcnQgXCJFcnJvciBpbiAje3doZXJlfVxcblxcbiN7bmFtZX1cXG5cXG4je21lc3NhZ2V9XCJcblxuICBnZXRSaWNodGV4dENvbmZpZzogKGV2ZW50KSAtPlxuXG4gICAgaWYgXy5pc1N0cmluZyBldmVudFxuICAgICAgZGF0YUtleSA9IGV2ZW50XG4gICAgZWxzZVxuICAgICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgICAgZGF0YUtleSA9ICR0YXJnZXQucGFyZW50KCkuYXR0cihcImRhdGEtcmljaHRleHRLZXlcIikgfHwgJHRhcmdldC5wYXJlbnQoKS5wYXJlbnQoKS5hdHRyKFwiZGF0YS1yaWNodGV4dEtleVwiKVxuXG4gICAgYXR0cmlidXRlTmFtZSA9IF8ud2hlcmUoQHJpY2h0ZXh0Q29uZmlnLCBcImtleVwiOmRhdGFLZXkpWzBdLmF0dHJpYnV0ZU5hbWVcblxuICAgIHJldHVybiB7XG4gICAgICBcImRhdGFLZXlcIiAgICAgICA6IGRhdGFLZXlcbiAgICAgIFwiYXR0cmlidXRlTmFtZVwiIDogYXR0cmlidXRlTmFtZVxuICAgIH1cblxuXG4gIHJpY2h0ZXh0RWRpdDogKGV2ZW50KSAtPlxuXG4gICAgY29uZmlnID0gQGdldFJpY2h0ZXh0Q29uZmlnIGV2ZW50XG5cbiAgICBAJGVsLmZpbmQoXCIuI3tjb25maWcuZGF0YUtleX1fcHJldmlldywgLiN7Y29uZmlnLmRhdGFLZXl9X2VkaXQsIC4je2NvbmZpZy5kYXRhS2V5fV9idXR0b25zXCIpLmZhZGVUb2dnbGUoMjUwKVxuICAgIFxuICAgIEBlZGl0b3IgPSB7fSBpZiBub3QgQGVkaXRvcj9cbiAgICBAJGVsLmZpbmQoXCJ0ZXh0YXJlYSMje2NvbmZpZy5kYXRhS2V5fV90ZXh0YXJlYVwiKS5odG1sKEBtb2RlbC5lc2NhcGUoY29uZmlnLmF0dHJpYnV0ZU5hbWUpIHx8IFwiXCIpXG4gICAgQGVkaXRvcltjb25maWcuZGF0YUtleV0gPSBDS0VESVRPUi5yZXBsYWNlKFwiI3tjb25maWcuZGF0YUtleX1fdGV4dGFyZWFcIilcblxuICByaWNodGV4dFNhdmU6IChldmVudCkgLT5cblxuICAgIGNvbmZpZyA9IEBnZXRSaWNodGV4dENvbmZpZyBldmVudFxuICAgIG5ld0F0dHJpYnV0ZXMgPSB7fVxuICAgIG5ld0F0dHJpYnV0ZXNbY29uZmlnLmF0dHJpYnV0ZU5hbWVdID0gQGVkaXRvcltjb25maWcuZGF0YUtleV0uZ2V0RGF0YSgpXG5cbiAgICBAbW9kZWwuc2F2ZSBuZXdBdHRyaWJ1dGVzLCBcbiAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgIEByaWNodGV4dENhbmNlbChjb25maWcuZGF0YUtleSlcbiAgICAgIGVycm9yOiA9PlxuICAgICAgICBhbGVydCBcIlNhdmUgZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4uXCJcblxuICByaWNodGV4dENhbmNlbDogKGV2ZW50KSAtPlxuXG4gICAgY29uZmlnID0gQGdldFJpY2h0ZXh0Q29uZmlnIGV2ZW50XG5cbiAgICAkcHJldmlldyA9ICQoXCJkaXYuI3tjb25maWcuZGF0YUtleX1fcHJldmlld1wiKVxuICAgICRwcmV2aWV3Lmh0bWwgQG1vZGVsLmdldChjb25maWcuYXR0cmlidXRlTmFtZSkgfHwgXCJcIlxuICAgICRwcmV2aWV3LmZhZGVJbigyNTApXG4gICAgQCRlbC5maW5kKFwiYnV0dG9uLiN7Y29uZmlnLmRhdGFLZXl9X2VkaXQsIC4je2NvbmZpZy5kYXRhS2V5fV9idXR0b25zXCIpLmZhZGVUb2dnbGUoMjUwKVxuICAgIEBlZGl0b3JbY29uZmlnLmRhdGFLZXldLmRlc3Ryb3koKVxuXG4gIHNhdmVTdWJ0ZXN0OiAtPiBAc2F2ZSgpXG5cbiAgc2F2ZTogKCBvcHRpb25zPXt9ICkgPT5cblxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgQGFjdGl2aXR5ID09IG51bGxcbiAgICBAYWN0aXZpdHkgPSBcInNhdmluZ1wiXG5cbiAgICAjIGJ5IGRlZmF1bHQgc2F2ZSBwcm90b3R5cGUgYXMgd2VsbFxuICAgIG9wdGlvbnMucHJvdG90eXBlU2F2ZSA9IGlmIG9wdGlvbnMucHJvdG90eXBlU2F2ZT8gdGhlbiBvcHRpb25zLnByb3JvdHlwZVNhdmUgZWxzZSB0cnVlXG5cbiAgICBwcm90b3R5cGUgPSBAbW9kZWwuZ2V0KFwicHJvdG90eXBlXCIpXG5cbiAgICBAbW9kZWwuc2V0XG4gICAgICBuYW1lICAgICAgICAgICAgICA6IEAkZWwuZmluZChcIiNzdWJ0ZXN0X25hbWVcIikudmFsKClcbiAgICAgIGVudW1lcmF0b3JIZWxwICAgIDogQCRlbC5maW5kKFwiI2VudW1lcmF0b3JfaGVscFwiKS52YWwoKVxuICAgICAgc3R1ZGVudERpYWxvZyAgICAgOiBAJGVsLmZpbmQoXCIjc3R1ZGVudF9kaWFsb2dcIikudmFsKClcbiAgICAgIHRyYW5zaXRpb25Db21tZW50IDogQCRlbC5maW5kKFwiI3RyYW5zaXRpb25fY29tbWVudFwiKS52YWwoKVxuICAgICAgc2tpcHBhYmxlICAgICAgICAgOiBAJGVsLmZpbmQoXCIjc2tpcF9yYWRpbyBpbnB1dDpyYWRpb1tuYW1lPXNraXBwYWJsZV06Y2hlY2tlZFwiKS52YWwoKSA9PSBcInRydWVcIlxuICAgICAgcnRsICAgICAgICAgICAgICAgOiBAJGVsLmZpbmQoXCIjcnRsX3JhZGlvIGlucHV0OnJhZGlvW25hbWU9cnRsXTpjaGVja2VkXCIpLnZhbCgpID09IFwidHJ1ZVwiXG4gICAgICBiYWNrQnV0dG9uICAgICAgICA6IEAkZWwuZmluZChcIiNiYWNrX2J1dHRvbl9yYWRpbyBpbnB1dDpyYWRpb1tuYW1lPWJhY2tfYnV0dG9uXTpjaGVja2VkXCIpLnZhbCgpID09IFwidHJ1ZVwiXG5cbiAgICAgIGVudW1lcmF0b3JIZWxwICAgIDogQCRlbC5maW5kKFwiI2VudW1lcmF0b3JfdGV4dGFyZWFcIikudmFsKClcbiAgICAgIHN0dWRlbnREaWFsb2cgICAgIDogQCRlbC5maW5kKFwiI2RpYWxvZ190ZXh0YXJlYVwiKS52YWwoKVxuICAgICAgdHJhbnNpdGlvbkNvbW1lbnQgOiBAJGVsLmZpbmQoXCIjdHJhbnNpdGlvbl90ZXh0YXJlYVwiKS52YWwoKVxuXG4gICAgICBsYW5ndWFnZSA6IEAkZWwuZmluZChcIiNsYW5ndWFnZVwiKS52YWwoKVxuXG5cbiAgICAgIGRpc3BsYXlDb2RlIDogQCRlbC5maW5kKFwiI2Rpc3BsYXlfY29kZVwiKS52YWwoKVxuXG4gICAgICBmb250RmFtaWx5IDogQCRlbC5maW5kKFwiI2ZvbnRfZmFtaWx5XCIpLnZhbCgpXG5cbiAgICAjIGltcG9ydGFudCBub3QgdG8gbGV0IHByb3RvdHlwZXMgdXNlIHN1Y2Nlc3Mgb3IgZXJyb3JcbiAgICBAcHJvdG90eXBlRWRpdG9yLnNhdmUob3B0aW9ucylcblxuICAgICMgb25seSBjYXJlIGFib3V0IGVycm9ycyBpZiBpdCdzIG5vdCBhbiBcIm9uIGVkaXRcIiBzYXZlXG4gICAgaWYgQHByb3RvdHlwZUVkaXRvci5pc1ZhbGlkKCkgPT0gZmFsc2VcbiAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiVGhlcmUgYXJlIGVycm9ycyBvbiB0aGlzIHBhZ2VcIlxuICAgICAgQHByb3RvdHlwZUVkaXRvci5zaG93RXJyb3JzPygpXG4gICAgICBAYWN0aXZpdHkgPSBudWxsXG4gICAgZWxzZVxuICAgICAgQG1vZGVsLnNhdmUgbnVsbCxcbiAgICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgICBAYWN0aXZpdHkgPSBudWxsXG4gICAgICAgICAgIyBwcmVmZXIgdGhlIHN1Y2Nlc3MgY2FsbGJhY2tcbiAgICAgICAgICByZXR1cm4gb3B0aW9ucy5zdWNjZXNzKCkgaWYgb3B0aW9ucy5zdWNjZXNzXG4gICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJTdWJ0ZXN0IFNhdmVkXCJcbiAgICAgICAgICBjbGVhclRpbWVvdXQgQHRpbWVyXG4gICAgICAgICAgQHRpbWVyID0gc2V0VGltZW91dCBAZ29CYWNrLCAxMDAwXG5cbiAgICAgICAgZXJyb3I6ID0+XG4gICAgICAgICAgQGFjdGl2aXR5ID0gbnVsbFxuICAgICAgICAgIHJldHVybiBvcHRpb25zLmVycm9yKCkgaWYgb3B0aW9ucy5lcnJvcj9cbiAgICAgICAgICBVdGlscy5taWRBbGVydCBcIlNhdmUgZXJyb3JcIlxuXG5cbiAgcmVuZGVyOiAtPlxuICAgIGFzc2Vzc21lbnROYW1lID0gQGFzc2Vzc21lbnQuZXNjYXBlIFwibmFtZVwiXG4gICAgbmFtZSAgICAgICAgPSBAbW9kZWwuZXNjYXBlIFwibmFtZVwiXG4gICAgcHJvdG90eXBlICAgPSBAbW9kZWwuZ2V0IFwicHJvdG90eXBlXCJcbiAgICBlbnVtbWVyYXRvciA9IEBtb2RlbC5nZXRTdHJpbmcoXCJlbnVtZXJhdG9ySGVscFwiKVxuICAgIGRpYWxvZyAgICAgID0gQG1vZGVsLmdldFN0cmluZyhcInN0dWRlbnREaWFsb2dcIilcbiAgICB0cmFuc2l0aW9uICA9IEBtb2RlbC5nZXRTdHJpbmcoXCJ0cmFuc2l0aW9uQ29tbWVudFwiKVxuICAgIHNraXBwYWJsZSAgID0gQG1vZGVsLmdldEJvb2xlYW4oXCJza2lwcGFibGVcIilcbiAgICBydGwgICAgICAgICA9IEBtb2RlbC5nZXRCb29sZWFuKFwicnRsXCIpXG4gICAgYmFja0J1dHRvbiAgPSBAbW9kZWwuZ2V0Qm9vbGVhbihcImJhY2tCdXR0b25cIilcbiAgICBmb250RmFtaWx5ICA9IEBtb2RlbC5nZXRFc2NhcGVkU3RyaW5nKFwiZm9udEZhbWlseVwiKVxuICAgIGRpc3BsYXlDb2RlID0gQG1vZGVsLmdldFN0cmluZyhcImRpc3BsYXlDb2RlXCIpXG4gICAgbGFuZ3VhZ2UgICAgPSBAbW9kZWwuZ2V0U3RyaW5nKFwibGFuZ3VhZ2VcIilcbiAgICBncm91cEhhbmRsZSA9IFRhbmdlcmluZS5zZXR0aW5ncy5nZXRFc2NhcGVkU3RyaW5nKFwiZ3JvdXBIYW5kbGVcIilcblxuICAgIHJ0bEVkaXRIdG1sID0gXCJcIlxuICAgIGlmIHByb3RvdHlwZSBpcyAnZ3JpZCdcbiAgICAgIHJ0bEVkaXRIdG1sID0gXCJcbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsPlJpZ2h0LXRvLUxlZnQgZGlyZWN0aW9uPC9sYWJlbD48YnI+XG4gICAgICAgIDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cbiAgICAgICAgICA8ZGl2IGlkPSdydGxfcmFkaW8nIGNsYXNzPSdidXR0b25zZXQnPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj0ncnRsX3RydWUnPlllczwvbGFiZWw+PGlucHV0IG5hbWU9J3J0bCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJyBpZD0ncnRsX3RydWUnICN7J2NoZWNrZWQnIGlmIHJ0bH0+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdydGxfZmFsc2UnPk5vPC9sYWJlbD48aW5wdXQgbmFtZT0ncnRsJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0ncnRsX2ZhbHNlJyAjeydjaGVja2VkJyBpZiBub3QgcnRsfT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cIlxuXG4gICAgQCRlbC5odG1sIFwiXG4gICAgICA8aDE+U3VidGVzdCBFZGl0b3I8L2gxPlxuICAgICAgPHRhYmxlIGNsYXNzPSdiYXNpY19pbmZvJz5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aD5Hcm91cDwvdGg+XG4gICAgICAgICAgPHRkPiN7Z3JvdXBIYW5kbGV9PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aD5Bc3Nlc3NtZW50PC90aD5cbiAgICAgICAgICA8dGQ+I3thc3Nlc3NtZW50TmFtZX08L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgPC90YWJsZT5cbiAgICAgIDxidXR0b24gY2xhc3M9J3NhdmVfc3VidGVzdCBjb21tYW5kJz5Eb25lPC9idXR0b24+XG4gICAgICA8ZGl2IGlkPSdzdWJ0ZXN0X2VkaXRfZm9ybScgY2xhc3M9J2VkaXRfZm9ybSc+XG4gICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICA8bGFiZWwgZm9yPSdzdWJ0ZXN0X25hbWUnPk5hbWU8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCBpZD0nc3VidGVzdF9uYW1lJyB2YWx1ZT0nI3tuYW1lfSc+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nc3VidGVzdF9wcm90b3R5cGUnIHRpdGxlPSdUaGlzIGlzIGEgYmFzaWMgdHlwZSBvZiBzdWJ0ZXN0LiAoZS5nLiBTdXJ2ZXksIEdyaWQsIExvY2F0aW9uLCBJZCwgQ29uc2VudCkuIFRoaXMgcHJvcGVydHkgaXMgc2V0IGluIGFzc2Vzc21lbnQgYnVpbGRlciB3aGVuIHlvdSBhZGQgYSBzdWJ0ZXN0LiBJdCBpcyB1bmNoYW5nZWFibGUuJz5Qcm90b3R5cGU8L2xhYmVsPjxicj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdpbmZvX2JveCc+I3twcm90b3R5cGV9PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nbGFuZ3VhZ2UnPkxhbmd1YWdlIGNvZGU8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCBpZD0nbGFuZ3VhZ2UnIHZhbHVlPScje2xhbmd1YWdlfSc+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICA8bGFiZWw+U2tpcHBhYmxlPC9sYWJlbD48YnI+XG4gICAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgICAgPGRpdiBpZD0nc2tpcF9yYWRpbycgY2xhc3M9J2J1dHRvbnNldCc+XG4gICAgICAgICAgICAgIDxsYWJlbCBmb3I9J3NraXBfdHJ1ZSc+WWVzPC9sYWJlbD48aW5wdXQgbmFtZT0nc2tpcHBhYmxlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnIGlkPSdza2lwX3RydWUnICN7J2NoZWNrZWQnIGlmIHNraXBwYWJsZX0+XG4gICAgICAgICAgICAgIDxsYWJlbCBmb3I9J3NraXBfZmFsc2UnPk5vPC9sYWJlbD48aW5wdXQgbmFtZT0nc2tpcHBhYmxlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0nc2tpcF9mYWxzZScgI3snY2hlY2tlZCcgaWYgbm90IHNraXBwYWJsZX0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgI3tydGxFZGl0SHRtbHx8Jyd9XG5cbiAgICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICAgIDxsYWJlbD5EaXNwbGF5IEJhY2sgYnV0dG9uPC9sYWJlbD48YnI+XG4gICAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgICAgPGRpdiBpZD0nYmFja19idXR0b25fcmFkaW8nIGNsYXNzPSdidXR0b25zZXQnPlxuICAgICAgICAgICAgICA8bGFiZWwgZm9yPSdiYWNrX2J1dHRvbl90cnVlJz5ZZXM8L2xhYmVsPjxpbnB1dCBuYW1lPSdiYWNrX2J1dHRvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJyBpZD0nYmFja19idXR0b25fdHJ1ZScgI3snY2hlY2tlZCcgaWYgYmFja0J1dHRvbn0+XG4gICAgICAgICAgICAgIDxsYWJlbCBmb3I9J2JhY2tfYnV0dG9uX2ZhbHNlJz5ObzwvbGFiZWw+PGlucHV0IG5hbWU9J2JhY2tfYnV0dG9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0nYmFja19idXR0b25fZmFsc2UnICN7J2NoZWNrZWQnIGlmIG5vdCBiYWNrQnV0dG9ufT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnIGRhdGEtcmljaHRleHRLZXk9J2VudW1lcmF0b3InPlxuICAgICAgICAgIDxsYWJlbCBmb3I9J2VudW1lcmF0b3JfdGV4dGFyZWEnIHRpdGxlPSdJZiB0ZXh0IGlzIHN1cHBsaWVkLCBhIGhlbHAgYnV0dG9uIHdpbGwgYXBwZWFyIGF0IHRoZSB0b3Agb2YgdGhlIHN1YnRlc3QgYXMgYSByZWZlcmVuY2UgZm9yIHRoZSBlbnVtZXJhdG9yLiBJZiB5b3UgYXJlIHBhc3RpbmcgZnJvbSB3b3JkIGl0IGlzIHJlY29tbWVuZGVkIHRvIHBhc3RlIGludG8gYSBwbGFpbiB0ZXh0IGVkaXRvciBmaXJzdCwgYW5kIHRoZW4gaW50byB0aGlzIGJveC4nPkVudW1lcmF0b3IgaGVscCA8YnV0dG9uIGNsYXNzPSdyaWNodGV4dF9lZGl0IGNvbW1hbmQnPkVkaXQ8L2J1dHRvbj48L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2luZm9fYm94X3dpZGUgZW51bWVyYXRvcl9wcmV2aWV3Jz4je2VudW1tZXJhdG9yfTwvZGl2PlxuICAgICAgICAgIDx0ZXh0YXJlYSBpZD0nZW51bWVyYXRvcl90ZXh0YXJlYScgY2xhc3M9J2NvbmZpcm1hdGlvbic+I3tlbnVtbWVyYXRvcn08L3RleHRhcmVhPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2VudW1lcmF0b3JfYnV0dG9ucyBjb25maXJtYXRpb24nPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ncmljaHRleHRfc2F2ZSBjb21tYW5kJz5TYXZlPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdyaWNodGV4dF9jYW5jZWwgY29tbWFuZCc+Q2FuY2VsPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZScgZGF0YS1yaWNodGV4dEtleT0nZGlhbG9nJz5cbiAgICAgICAgICA8bGFiZWwgZm9yPSdkaWFsb2dfdGV4dGFyZWEnIHRpdGxlPSdHZW5lcmFsbHkgdGhpcyBpcyBhIHNjcmlwdCB0aGF0IHdpbGwgYmUgcmVhZCB0byB0aGUgc3R1ZGVudC4gSWYgeW91IGFyZSBwYXN0aW5nIGZyb20gd29yZCBpdCBpcyByZWNvbW1lbmRlZCB0byBwYXN0ZSBpbnRvIGEgcGxhaW4gdGV4dCBlZGl0b3IgZmlyc3QsIGFuZCB0aGVuIGludG8gdGhpcyBib3guJz5TdHVkZW50IERpYWxvZyA8YnV0dG9uIGNsYXNzPSdyaWNodGV4dF9lZGl0IGNvbW1hbmQnPkVkaXQ8L2J1dHRvbj48L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2luZm9fYm94X3dpZGUgZGlhbG9nX3ByZXZpZXcnPiN7ZGlhbG9nfTwvZGl2PlxuICAgICAgICAgIDx0ZXh0YXJlYSBpZD0nZGlhbG9nX3RleHRhcmVhJyBjbGFzcz0nY29uZmlybWF0aW9uJz4je2RpYWxvZ308L3RleHRhcmVhPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2RpYWxvZ19idXR0b25zIGNvbmZpcm1hdGlvbic+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdyaWNodGV4dF9zYXZlIGNvbW1hbmQnPlNhdmU8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J3JpY2h0ZXh0X2NhbmNlbCBjb21tYW5kJz5DYW5jZWw8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJyBkYXRhLXJpY2h0ZXh0S2V5PSd0cmFuc2l0aW9uJz5cbiAgICAgICAgICA8bGFiZWwgZm9yPSd0cmFuc2l0aW9uX3Rlc3RhcmVhJyB0aXRsZT0nVGhpcyB3aWxsIGJlIGRpc3BsYXllZCB3aXRoIGEgZ3JleSBiYWNrZ3JvdW5kIGFib3ZlIHRoZSBuZXh0IGJ1dHRvbiwgc2ltaWxhciB0byB0aGUgc3R1ZGVudCBkaWFsb2cgdGV4dC4gSWYgeW91IGFyZSBwYXN0aW5nIGZyb20gV29yZCBpdCBpcyByZWNvbW1lbmRlZCB0byBwYXN0ZSBpbnRvIGEgcGxhaW4gdGV4dCBlZGl0b3IgZmlyc3QsIGFuZCB0aGVuIGludG8gdGhpcyBib3guJz5UcmFuc2l0aW9uIENvbW1lbnQgPGJ1dHRvbiBjbGFzcz0ncmljaHRleHRfZWRpdCBjb21tYW5kJz5FZGl0PC9idXR0b24+PC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdpbmZvX2JveF93aWRlIHRyYW5zaXRpb25fcHJldmlldyc+I3t0cmFuc2l0aW9ufTwvZGl2PlxuICAgICAgICAgIDx0ZXh0YXJlYSBpZD0ndHJhbnNpdGlvbl90ZXh0YXJlYScgY2xhc3M9J2NvbmZpcm1hdGlvbic+I3t0cmFuc2l0aW9ufTwvdGV4dGFyZWE+XG4gICAgICAgICAgPGRpdiBjbGFzcz0ndHJhbnNpdGlvbl9idXR0b25zIGNvbmZpcm1hdGlvbic+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdyaWNodGV4dF9zYXZlIGNvbW1hbmQnPlNhdmU8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J3JpY2h0ZXh0X2NhbmNlbCBjb21tYW5kJz5DYW5jZWw8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICA8bGFiZWwgZm9yPSdmb250X2ZhbWlseScgdGl0bGU9J1BsZWFzZSBiZSBhd2FyZSB0aGF0IHdoYXRldmVyIGZvbnQgaXMgc3BlY2lmaWVkLCBtdXN0IGJlIGF2YWlsYWJsZSBvbiB0aGUgdXNlcmBzIHN5c3RlbS4gV2hlbiBtdWx0aXBsZSBmb250cyBhcmUgZW50ZXJlZCBzZXBhcmF0ZWQgYnkgY29tbWFzLCB0aGV5IGFyZSByYW5rZWQgaW4gb3JkZXIgb2YgcHJlZmVyZW5jZSBmcm9tIGxlZnQgdG8gcmlnaHQuIEZvbnQgbmFtZXMgd2l0aCBzcGFjZXMgbXVzdCBiZSB3cmFwcGVkIGluIGRvdWJsZSBxdW90ZXMuJz5QcmVmZXJyZWQgZm9udDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IGlkPSdmb250X2ZhbWlseScgdmFsdWU9JyN7Zm9udEZhbWlseX0nPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J2Rpc3BsYXlfY29kZScgdGl0bGU9J1RoaXMgQ29mZmVlU2NyaXB0IGNvZGUgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoaXMgcXVlc3Rpb24gaXMgc2hvd24uIFRoaXMgb3B0aW9uIG1heSBvbmx5IGJlIHVzZWQgd2hlbiBGb2N1cyBNb2RlIGlzIG9uLic+QWN0aW9uIG9uIGRpc3BsYXk8L2xhYmVsPlxuICAgICAgICAgICAgPHRleHRhcmVhIGlkPSdkaXNwbGF5X2NvZGUnPiN7ZGlzcGxheUNvZGV9PC90ZXh0YXJlYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBpZD0ncHJvdG90eXBlX2F0dHJpYnV0ZXMnPjwvZGl2PlxuXG4gICAgICA8YnV0dG9uIGNsYXNzPSdzYXZlX3N1YnRlc3QgY29tbWFuZCc+RG9uZTwvYnV0dG9uPlxuICAgICAgXCJcblxuICAgIEBwcm90b3R5cGVFZGl0b3Iuc2V0RWxlbWVudCBAJGVsLmZpbmQoJyNwcm90b3R5cGVfYXR0cmlidXRlcycpXG4gICAgQHByb3RvdHlwZUVkaXRvci5yZW5kZXI/KClcbiAgICBcbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICBhZnRlclJlbmRlcjogLT5cbiAgICBAcHJvdG90eXBlRWRpdG9yPy5hZnRlclJlbmRlcj8oKVxuXG5cbiAgb25DbG9zZTogLT5cbiAgICBAcHJvdG90eXBlRWRpdG9yLmNsb3NlPygpXG5cbiIsInZhciBTdWJ0ZXN0RWRpdFZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuU3VidGVzdEVkaXRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFN1YnRlc3RFZGl0Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gU3VidGVzdEVkaXRWaWV3KCkge1xuICAgIHRoaXMuc2F2ZSA9IGJpbmQodGhpcy5zYXZlLCB0aGlzKTtcbiAgICB0aGlzLmdvQmFjayA9IGJpbmQodGhpcy5nb0JhY2ssIHRoaXMpO1xuICAgIHJldHVybiBTdWJ0ZXN0RWRpdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBTdWJ0ZXN0RWRpdFZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwic3VidGVzdF9lZGl0XCI7XG5cbiAgU3VidGVzdEVkaXRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrIC5iYWNrX2J1dHRvbic6ICdnb0JhY2snLFxuICAgICdjbGljayAuc2F2ZV9zdWJ0ZXN0JzogJ3NhdmVTdWJ0ZXN0JyxcbiAgICAnY2xpY2sgLnJpY2h0ZXh0X2VkaXQnOiAncmljaHRleHRFZGl0JyxcbiAgICAnY2xpY2sgLnJpY2h0ZXh0X3NhdmUnOiAncmljaHRleHRTYXZlJyxcbiAgICAnY2xpY2sgLnJpY2h0ZXh0X2NhbmNlbCc6ICdyaWNodGV4dENhbmNlbCcsXG4gICAgJ2NoYW5nZSAjZGlzcGxheV9jb2RlJzogJ3ZhbGlkYXRlU3ludGF4J1xuICB9O1xuXG4gIFN1YnRlc3RFZGl0Vmlldy5wcm90b3R5cGUucmljaHRleHRDb25maWcgPSBbXG4gICAge1xuICAgICAgXCJrZXlcIjogXCJlbnVtZXJhdG9yXCIsXG4gICAgICBcImF0dHJpYnV0ZU5hbWVcIjogXCJlbnVtZXJhdG9ySGVscFwiXG4gICAgfSwge1xuICAgICAgXCJrZXlcIjogXCJkaWFsb2dcIixcbiAgICAgIFwiYXR0cmlidXRlTmFtZVwiOiBcInN0dWRlbnREaWFsb2dcIlxuICAgIH0sIHtcbiAgICAgIFwia2V5XCI6IFwidHJhbnNpdGlvblwiLFxuICAgICAgXCJhdHRyaWJ1dGVOYW1lXCI6IFwidHJhbnNpdGlvbkNvbW1lbnRcIlxuICAgIH1cbiAgXTtcblxuICBTdWJ0ZXN0RWRpdFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5hY3Rpdml0eSA9IG51bGw7XG4gICAgdGhpcy50aW1lciA9IDA7XG4gICAgdGhpcy5yaWNodGV4dEtleXMgPSBfLnBsdWNrKHRoaXMucmljaHRleHRDb25maWcsIFwia2V5XCIpO1xuICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIHRoaXMuYXNzZXNzbWVudCA9IG9wdGlvbnMuYXNzZXNzbWVudDtcbiAgICB0aGlzLmNvbmZpZyA9IFRhbmdlcmluZS5jb25maWcuc3VidGVzdDtcbiAgICBvcHRpb25zLnBhcmVudCA9IHRoaXM7XG4gICAgdGhpcy5wcm90b3R5cGVWaWV3cyA9IFRhbmdlcmluZS5jb25maWcuZ2V0KFwicHJvdG90eXBlVmlld3NcIik7XG4gICAgdGhpcy5wcm90b3R5cGVFZGl0b3IgPSBuZXcgd2luZG93W3RoaXMucHJvdG90eXBlVmlld3NbdGhpcy5tb2RlbC5nZXQoJ3Byb3RvdHlwZScpXVsnZWRpdCddXShvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5wcm90b3R5cGVFZGl0b3Iub24oXCJxdWVzdGlvbi1lZGl0XCIsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHF1ZXN0aW9uSWQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnNhdmUoe1xuICAgICAgICAgIHF1ZXN0aW9uU2F2ZTogZmFsc2UsXG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcInF1ZXN0aW9uL1wiICsgcXVlc3Rpb25JZCwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9O1xuXG4gIFN1YnRlc3RFZGl0Vmlldy5wcm90b3R5cGUuZ29CYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJlZGl0L1wiICsgdGhpcy5tb2RlbC5nZXQoXCJhc3Nlc3NtZW50SWRcIiksIHRydWUpO1xuICB9O1xuXG4gIFN1YnRlc3RFZGl0Vmlldy5wcm90b3R5cGUudmFsaWRhdGVTeW50YXggPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCBjb2RlLCBlcnJvciwgbWVzc2FnZSwgbmFtZSwgb2xkQW5zd2VyLCB3aGVyZTtcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgIGNvZGUgPSAkdGFyZ2V0LnZhbCgpO1xuICAgIGlmICghXy5pc0VtcHR5KGNvZGUpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBvbGRBbnN3ZXIgPSB0aGlzLmFuc3dlcjtcbiAgICAgICAgdGhpcy5hbnN3ZXIgPSB7fTtcbiAgICAgICAgdGhpcy5pc1ZhbGlkID0gQ29mZmVlU2NyaXB0LmNvbXBpbGUuYXBwbHkodGhpcywgW2NvZGVdKTtcbiAgICAgICAgaWYgKG9sZEFuc3dlciAhPSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYW5zd2VyID0gb2xkQW5zd2VyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBkZWxldGUgdGhpc1tcImFuc3dlclwiXTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgICBuYW1lID0gKC9mdW5jdGlvbiAoLnsxLH0pXFwoLy5leGVjKGVycm9yLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkpWzFdKTtcbiAgICAgICAgd2hlcmUgPSAkdGFyZ2V0LmF0dHIoJ2lkJykuaHVtYW5pemUoKTtcbiAgICAgICAgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICAgIHJldHVybiBhbGVydChcIkVycm9yIGluIFwiICsgd2hlcmUgKyBcIlxcblxcblwiICsgbmFtZSArIFwiXFxuXFxuXCIgKyBtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU3VidGVzdEVkaXRWaWV3LnByb3RvdHlwZS5nZXRSaWNodGV4dENvbmZpZyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIGF0dHJpYnV0ZU5hbWUsIGRhdGFLZXk7XG4gICAgaWYgKF8uaXNTdHJpbmcoZXZlbnQpKSB7XG4gICAgICBkYXRhS2V5ID0gZXZlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgICBkYXRhS2V5ID0gJHRhcmdldC5wYXJlbnQoKS5hdHRyKFwiZGF0YS1yaWNodGV4dEtleVwiKSB8fCAkdGFyZ2V0LnBhcmVudCgpLnBhcmVudCgpLmF0dHIoXCJkYXRhLXJpY2h0ZXh0S2V5XCIpO1xuICAgIH1cbiAgICBhdHRyaWJ1dGVOYW1lID0gXy53aGVyZSh0aGlzLnJpY2h0ZXh0Q29uZmlnLCB7XG4gICAgICBcImtleVwiOiBkYXRhS2V5XG4gICAgfSlbMF0uYXR0cmlidXRlTmFtZTtcbiAgICByZXR1cm4ge1xuICAgICAgXCJkYXRhS2V5XCI6IGRhdGFLZXksXG4gICAgICBcImF0dHJpYnV0ZU5hbWVcIjogYXR0cmlidXRlTmFtZVxuICAgIH07XG4gIH07XG5cbiAgU3VidGVzdEVkaXRWaWV3LnByb3RvdHlwZS5yaWNodGV4dEVkaXQgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBjb25maWc7XG4gICAgY29uZmlnID0gdGhpcy5nZXRSaWNodGV4dENvbmZpZyhldmVudCk7XG4gICAgdGhpcy4kZWwuZmluZChcIi5cIiArIGNvbmZpZy5kYXRhS2V5ICsgXCJfcHJldmlldywgLlwiICsgY29uZmlnLmRhdGFLZXkgKyBcIl9lZGl0LCAuXCIgKyBjb25maWcuZGF0YUtleSArIFwiX2J1dHRvbnNcIikuZmFkZVRvZ2dsZSgyNTApO1xuICAgIGlmICh0aGlzLmVkaXRvciA9PSBudWxsKSB7XG4gICAgICB0aGlzLmVkaXRvciA9IHt9O1xuICAgIH1cbiAgICB0aGlzLiRlbC5maW5kKFwidGV4dGFyZWEjXCIgKyBjb25maWcuZGF0YUtleSArIFwiX3RleHRhcmVhXCIpLmh0bWwodGhpcy5tb2RlbC5lc2NhcGUoY29uZmlnLmF0dHJpYnV0ZU5hbWUpIHx8IFwiXCIpO1xuICAgIHJldHVybiB0aGlzLmVkaXRvcltjb25maWcuZGF0YUtleV0gPSBDS0VESVRPUi5yZXBsYWNlKGNvbmZpZy5kYXRhS2V5ICsgXCJfdGV4dGFyZWFcIik7XG4gIH07XG5cbiAgU3VidGVzdEVkaXRWaWV3LnByb3RvdHlwZS5yaWNodGV4dFNhdmUgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBjb25maWcsIG5ld0F0dHJpYnV0ZXM7XG4gICAgY29uZmlnID0gdGhpcy5nZXRSaWNodGV4dENvbmZpZyhldmVudCk7XG4gICAgbmV3QXR0cmlidXRlcyA9IHt9O1xuICAgIG5ld0F0dHJpYnV0ZXNbY29uZmlnLmF0dHJpYnV0ZU5hbWVdID0gdGhpcy5lZGl0b3JbY29uZmlnLmRhdGFLZXldLmdldERhdGEoKTtcbiAgICByZXR1cm4gdGhpcy5tb2RlbC5zYXZlKG5ld0F0dHJpYnV0ZXMsIHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJpY2h0ZXh0Q2FuY2VsKGNvbmZpZy5kYXRhS2V5KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFsZXJ0KFwiU2F2ZSBlcnJvci4gUGxlYXNlIHRyeSBhZ2Fpbi5cIik7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFN1YnRlc3RFZGl0Vmlldy5wcm90b3R5cGUucmljaHRleHRDYW5jZWwgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkcHJldmlldywgY29uZmlnO1xuICAgIGNvbmZpZyA9IHRoaXMuZ2V0UmljaHRleHRDb25maWcoZXZlbnQpO1xuICAgICRwcmV2aWV3ID0gJChcImRpdi5cIiArIGNvbmZpZy5kYXRhS2V5ICsgXCJfcHJldmlld1wiKTtcbiAgICAkcHJldmlldy5odG1sKHRoaXMubW9kZWwuZ2V0KGNvbmZpZy5hdHRyaWJ1dGVOYW1lKSB8fCBcIlwiKTtcbiAgICAkcHJldmlldy5mYWRlSW4oMjUwKTtcbiAgICB0aGlzLiRlbC5maW5kKFwiYnV0dG9uLlwiICsgY29uZmlnLmRhdGFLZXkgKyBcIl9lZGl0LCAuXCIgKyBjb25maWcuZGF0YUtleSArIFwiX2J1dHRvbnNcIikuZmFkZVRvZ2dsZSgyNTApO1xuICAgIHJldHVybiB0aGlzLmVkaXRvcltjb25maWcuZGF0YUtleV0uZGVzdHJveSgpO1xuICB9O1xuXG4gIFN1YnRlc3RFZGl0Vmlldy5wcm90b3R5cGUuc2F2ZVN1YnRlc3QgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zYXZlKCk7XG4gIH07XG5cbiAgU3VidGVzdEVkaXRWaWV3LnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBiYXNlLCBwcm90b3R5cGU7XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAodGhpcy5hY3Rpdml0eSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2aXR5ID0gXCJzYXZpbmdcIjtcbiAgICBvcHRpb25zLnByb3RvdHlwZVNhdmUgPSBvcHRpb25zLnByb3RvdHlwZVNhdmUgIT0gbnVsbCA/IG9wdGlvbnMucHJvcm90eXBlU2F2ZSA6IHRydWU7XG4gICAgcHJvdG90eXBlID0gdGhpcy5tb2RlbC5nZXQoXCJwcm90b3R5cGVcIik7XG4gICAgdGhpcy5tb2RlbC5zZXQoe1xuICAgICAgbmFtZTogdGhpcy4kZWwuZmluZChcIiNzdWJ0ZXN0X25hbWVcIikudmFsKCksXG4gICAgICBlbnVtZXJhdG9ySGVscDogdGhpcy4kZWwuZmluZChcIiNlbnVtZXJhdG9yX2hlbHBcIikudmFsKCksXG4gICAgICBzdHVkZW50RGlhbG9nOiB0aGlzLiRlbC5maW5kKFwiI3N0dWRlbnRfZGlhbG9nXCIpLnZhbCgpLFxuICAgICAgdHJhbnNpdGlvbkNvbW1lbnQ6IHRoaXMuJGVsLmZpbmQoXCIjdHJhbnNpdGlvbl9jb21tZW50XCIpLnZhbCgpLFxuICAgICAgc2tpcHBhYmxlOiB0aGlzLiRlbC5maW5kKFwiI3NraXBfcmFkaW8gaW5wdXQ6cmFkaW9bbmFtZT1za2lwcGFibGVdOmNoZWNrZWRcIikudmFsKCkgPT09IFwidHJ1ZVwiLFxuICAgICAgcnRsOiB0aGlzLiRlbC5maW5kKFwiI3J0bF9yYWRpbyBpbnB1dDpyYWRpb1tuYW1lPXJ0bF06Y2hlY2tlZFwiKS52YWwoKSA9PT0gXCJ0cnVlXCIsXG4gICAgICBiYWNrQnV0dG9uOiB0aGlzLiRlbC5maW5kKFwiI2JhY2tfYnV0dG9uX3JhZGlvIGlucHV0OnJhZGlvW25hbWU9YmFja19idXR0b25dOmNoZWNrZWRcIikudmFsKCkgPT09IFwidHJ1ZVwiLFxuICAgICAgZW51bWVyYXRvckhlbHA6IHRoaXMuJGVsLmZpbmQoXCIjZW51bWVyYXRvcl90ZXh0YXJlYVwiKS52YWwoKSxcbiAgICAgIHN0dWRlbnREaWFsb2c6IHRoaXMuJGVsLmZpbmQoXCIjZGlhbG9nX3RleHRhcmVhXCIpLnZhbCgpLFxuICAgICAgdHJhbnNpdGlvbkNvbW1lbnQ6IHRoaXMuJGVsLmZpbmQoXCIjdHJhbnNpdGlvbl90ZXh0YXJlYVwiKS52YWwoKSxcbiAgICAgIGxhbmd1YWdlOiB0aGlzLiRlbC5maW5kKFwiI2xhbmd1YWdlXCIpLnZhbCgpLFxuICAgICAgZGlzcGxheUNvZGU6IHRoaXMuJGVsLmZpbmQoXCIjZGlzcGxheV9jb2RlXCIpLnZhbCgpLFxuICAgICAgZm9udEZhbWlseTogdGhpcy4kZWwuZmluZChcIiNmb250X2ZhbWlseVwiKS52YWwoKVxuICAgIH0pO1xuICAgIHRoaXMucHJvdG90eXBlRWRpdG9yLnNhdmUob3B0aW9ucyk7XG4gICAgaWYgKHRoaXMucHJvdG90eXBlRWRpdG9yLmlzVmFsaWQoKSA9PT0gZmFsc2UpIHtcbiAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiVGhlcmUgYXJlIGVycm9ycyBvbiB0aGlzIHBhZ2VcIik7XG4gICAgICBpZiAodHlwZW9mIChiYXNlID0gdGhpcy5wcm90b3R5cGVFZGl0b3IpLnNob3dFcnJvcnMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBiYXNlLnNob3dFcnJvcnMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmFjdGl2aXR5ID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMubW9kZWwuc2F2ZShudWxsLCB7XG4gICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLmFjdGl2aXR5ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuc3VjY2VzcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQoXCJTdWJ0ZXN0IFNhdmVkXCIpO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVyKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy50aW1lciA9IHNldFRpbWVvdXQoX3RoaXMuZ29CYWNrLCAxMDAwKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSxcbiAgICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLmFjdGl2aXR5ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmVycm9yICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZXJyb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIlNhdmUgZXJyb3JcIik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBTdWJ0ZXN0RWRpdFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhc3Nlc3NtZW50TmFtZSwgYmFja0J1dHRvbiwgYmFzZSwgZGlhbG9nLCBkaXNwbGF5Q29kZSwgZW51bW1lcmF0b3IsIGZvbnRGYW1pbHksIGdyb3VwSGFuZGxlLCBsYW5ndWFnZSwgbmFtZSwgcHJvdG90eXBlLCBydGwsIHJ0bEVkaXRIdG1sLCBza2lwcGFibGUsIHRyYW5zaXRpb247XG4gICAgYXNzZXNzbWVudE5hbWUgPSB0aGlzLmFzc2Vzc21lbnQuZXNjYXBlKFwibmFtZVwiKTtcbiAgICBuYW1lID0gdGhpcy5tb2RlbC5lc2NhcGUoXCJuYW1lXCIpO1xuICAgIHByb3RvdHlwZSA9IHRoaXMubW9kZWwuZ2V0KFwicHJvdG90eXBlXCIpO1xuICAgIGVudW1tZXJhdG9yID0gdGhpcy5tb2RlbC5nZXRTdHJpbmcoXCJlbnVtZXJhdG9ySGVscFwiKTtcbiAgICBkaWFsb2cgPSB0aGlzLm1vZGVsLmdldFN0cmluZyhcInN0dWRlbnREaWFsb2dcIik7XG4gICAgdHJhbnNpdGlvbiA9IHRoaXMubW9kZWwuZ2V0U3RyaW5nKFwidHJhbnNpdGlvbkNvbW1lbnRcIik7XG4gICAgc2tpcHBhYmxlID0gdGhpcy5tb2RlbC5nZXRCb29sZWFuKFwic2tpcHBhYmxlXCIpO1xuICAgIHJ0bCA9IHRoaXMubW9kZWwuZ2V0Qm9vbGVhbihcInJ0bFwiKTtcbiAgICBiYWNrQnV0dG9uID0gdGhpcy5tb2RlbC5nZXRCb29sZWFuKFwiYmFja0J1dHRvblwiKTtcbiAgICBmb250RmFtaWx5ID0gdGhpcy5tb2RlbC5nZXRFc2NhcGVkU3RyaW5nKFwiZm9udEZhbWlseVwiKTtcbiAgICBkaXNwbGF5Q29kZSA9IHRoaXMubW9kZWwuZ2V0U3RyaW5nKFwiZGlzcGxheUNvZGVcIik7XG4gICAgbGFuZ3VhZ2UgPSB0aGlzLm1vZGVsLmdldFN0cmluZyhcImxhbmd1YWdlXCIpO1xuICAgIGdyb3VwSGFuZGxlID0gVGFuZ2VyaW5lLnNldHRpbmdzLmdldEVzY2FwZWRTdHJpbmcoXCJncm91cEhhbmRsZVwiKTtcbiAgICBydGxFZGl0SHRtbCA9IFwiXCI7XG4gICAgaWYgKHByb3RvdHlwZSA9PT0gJ2dyaWQnKSB7XG4gICAgICBydGxFZGl0SHRtbCA9IFwiPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWw+UmlnaHQtdG8tTGVmdCBkaXJlY3Rpb248L2xhYmVsPjxicj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8ZGl2IGlkPSdydGxfcmFkaW8nIGNsYXNzPSdidXR0b25zZXQnPiA8bGFiZWwgZm9yPSdydGxfdHJ1ZSc+WWVzPC9sYWJlbD48aW5wdXQgbmFtZT0ncnRsJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnIGlkPSdydGxfdHJ1ZScgXCIgKyAocnRsID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8bGFiZWwgZm9yPSdydGxfZmFsc2UnPk5vPC9sYWJlbD48aW5wdXQgbmFtZT0ncnRsJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0ncnRsX2ZhbHNlJyBcIiArICghcnRsID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PlwiO1xuICAgIH1cbiAgICB0aGlzLiRlbC5odG1sKFwiPGgxPlN1YnRlc3QgRWRpdG9yPC9oMT4gPHRhYmxlIGNsYXNzPSdiYXNpY19pbmZvJz4gPHRyPiA8dGg+R3JvdXA8L3RoPiA8dGQ+XCIgKyBncm91cEhhbmRsZSArIFwiPC90ZD4gPC90cj4gPHRyPiA8dGg+QXNzZXNzbWVudDwvdGg+IDx0ZD5cIiArIGFzc2Vzc21lbnROYW1lICsgXCI8L3RkPiA8L3RyPiA8L3RhYmxlPiA8YnV0dG9uIGNsYXNzPSdzYXZlX3N1YnRlc3QgY29tbWFuZCc+RG9uZTwvYnV0dG9uPiA8ZGl2IGlkPSdzdWJ0ZXN0X2VkaXRfZm9ybScgY2xhc3M9J2VkaXRfZm9ybSc+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nc3VidGVzdF9uYW1lJz5OYW1lPC9sYWJlbD4gPGlucHV0IGlkPSdzdWJ0ZXN0X25hbWUnIHZhbHVlPSdcIiArIG5hbWUgKyBcIic+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3N1YnRlc3RfcHJvdG90eXBlJyB0aXRsZT0nVGhpcyBpcyBhIGJhc2ljIHR5cGUgb2Ygc3VidGVzdC4gKGUuZy4gU3VydmV5LCBHcmlkLCBMb2NhdGlvbiwgSWQsIENvbnNlbnQpLiBUaGlzIHByb3BlcnR5IGlzIHNldCBpbiBhc3Nlc3NtZW50IGJ1aWxkZXIgd2hlbiB5b3UgYWRkIGEgc3VidGVzdC4gSXQgaXMgdW5jaGFuZ2VhYmxlLic+UHJvdG90eXBlPC9sYWJlbD48YnI+IDxkaXYgY2xhc3M9J2luZm9fYm94Jz5cIiArIHByb3RvdHlwZSArIFwiPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J2xhbmd1YWdlJz5MYW5ndWFnZSBjb2RlPC9sYWJlbD4gPGlucHV0IGlkPSdsYW5ndWFnZScgdmFsdWU9J1wiICsgbGFuZ3VhZ2UgKyBcIic+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbD5Ta2lwcGFibGU8L2xhYmVsPjxicj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8ZGl2IGlkPSdza2lwX3JhZGlvJyBjbGFzcz0nYnV0dG9uc2V0Jz4gPGxhYmVsIGZvcj0nc2tpcF90cnVlJz5ZZXM8L2xhYmVsPjxpbnB1dCBuYW1lPSdza2lwcGFibGUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZScgaWQ9J3NraXBfdHJ1ZScgXCIgKyAoc2tpcHBhYmxlID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8bGFiZWwgZm9yPSdza2lwX2ZhbHNlJz5ObzwvbGFiZWw+PGlucHV0IG5hbWU9J3NraXBwYWJsZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZScgaWQ9J3NraXBfZmFsc2UnIFwiICsgKCFza2lwcGFibGUgPyAnY2hlY2tlZCcgOiB2b2lkIDApICsgXCI+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IFwiICsgKHJ0bEVkaXRIdG1sIHx8ICcnKSArIFwiIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsPkRpc3BsYXkgQmFjayBidXR0b248L2xhYmVsPjxicj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8ZGl2IGlkPSdiYWNrX2J1dHRvbl9yYWRpbycgY2xhc3M9J2J1dHRvbnNldCc+IDxsYWJlbCBmb3I9J2JhY2tfYnV0dG9uX3RydWUnPlllczwvbGFiZWw+PGlucHV0IG5hbWU9J2JhY2tfYnV0dG9uJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnIGlkPSdiYWNrX2J1dHRvbl90cnVlJyBcIiArIChiYWNrQnV0dG9uID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8bGFiZWwgZm9yPSdiYWNrX2J1dHRvbl9mYWxzZSc+Tm88L2xhYmVsPjxpbnB1dCBuYW1lPSdiYWNrX2J1dHRvbicgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZScgaWQ9J2JhY2tfYnV0dG9uX2ZhbHNlJyBcIiArICghYmFja0J1dHRvbiA/ICdjaGVja2VkJyA6IHZvaWQgMCkgKyBcIj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnIGRhdGEtcmljaHRleHRLZXk9J2VudW1lcmF0b3InPiA8bGFiZWwgZm9yPSdlbnVtZXJhdG9yX3RleHRhcmVhJyB0aXRsZT0nSWYgdGV4dCBpcyBzdXBwbGllZCwgYSBoZWxwIGJ1dHRvbiB3aWxsIGFwcGVhciBhdCB0aGUgdG9wIG9mIHRoZSBzdWJ0ZXN0IGFzIGEgcmVmZXJlbmNlIGZvciB0aGUgZW51bWVyYXRvci4gSWYgeW91IGFyZSBwYXN0aW5nIGZyb20gd29yZCBpdCBpcyByZWNvbW1lbmRlZCB0byBwYXN0ZSBpbnRvIGEgcGxhaW4gdGV4dCBlZGl0b3IgZmlyc3QsIGFuZCB0aGVuIGludG8gdGhpcyBib3guJz5FbnVtZXJhdG9yIGhlbHAgPGJ1dHRvbiBjbGFzcz0ncmljaHRleHRfZWRpdCBjb21tYW5kJz5FZGl0PC9idXR0b24+PC9sYWJlbD4gPGRpdiBjbGFzcz0naW5mb19ib3hfd2lkZSBlbnVtZXJhdG9yX3ByZXZpZXcnPlwiICsgZW51bW1lcmF0b3IgKyBcIjwvZGl2PiA8dGV4dGFyZWEgaWQ9J2VudW1lcmF0b3JfdGV4dGFyZWEnIGNsYXNzPSdjb25maXJtYXRpb24nPlwiICsgZW51bW1lcmF0b3IgKyBcIjwvdGV4dGFyZWE+IDxkaXYgY2xhc3M9J2VudW1lcmF0b3JfYnV0dG9ucyBjb25maXJtYXRpb24nPiA8YnV0dG9uIGNsYXNzPSdyaWNodGV4dF9zYXZlIGNvbW1hbmQnPlNhdmU8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz0ncmljaHRleHRfY2FuY2VsIGNvbW1hbmQnPkNhbmNlbDwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJyBkYXRhLXJpY2h0ZXh0S2V5PSdkaWFsb2cnPiA8bGFiZWwgZm9yPSdkaWFsb2dfdGV4dGFyZWEnIHRpdGxlPSdHZW5lcmFsbHkgdGhpcyBpcyBhIHNjcmlwdCB0aGF0IHdpbGwgYmUgcmVhZCB0byB0aGUgc3R1ZGVudC4gSWYgeW91IGFyZSBwYXN0aW5nIGZyb20gd29yZCBpdCBpcyByZWNvbW1lbmRlZCB0byBwYXN0ZSBpbnRvIGEgcGxhaW4gdGV4dCBlZGl0b3IgZmlyc3QsIGFuZCB0aGVuIGludG8gdGhpcyBib3guJz5TdHVkZW50IERpYWxvZyA8YnV0dG9uIGNsYXNzPSdyaWNodGV4dF9lZGl0IGNvbW1hbmQnPkVkaXQ8L2J1dHRvbj48L2xhYmVsPiA8ZGl2IGNsYXNzPSdpbmZvX2JveF93aWRlIGRpYWxvZ19wcmV2aWV3Jz5cIiArIGRpYWxvZyArIFwiPC9kaXY+IDx0ZXh0YXJlYSBpZD0nZGlhbG9nX3RleHRhcmVhJyBjbGFzcz0nY29uZmlybWF0aW9uJz5cIiArIGRpYWxvZyArIFwiPC90ZXh0YXJlYT4gPGRpdiBjbGFzcz0nZGlhbG9nX2J1dHRvbnMgY29uZmlybWF0aW9uJz4gPGJ1dHRvbiBjbGFzcz0ncmljaHRleHRfc2F2ZSBjb21tYW5kJz5TYXZlPC9idXR0b24+IDxidXR0b24gY2xhc3M9J3JpY2h0ZXh0X2NhbmNlbCBjb21tYW5kJz5DYW5jZWw8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZScgZGF0YS1yaWNodGV4dEtleT0ndHJhbnNpdGlvbic+IDxsYWJlbCBmb3I9J3RyYW5zaXRpb25fdGVzdGFyZWEnIHRpdGxlPSdUaGlzIHdpbGwgYmUgZGlzcGxheWVkIHdpdGggYSBncmV5IGJhY2tncm91bmQgYWJvdmUgdGhlIG5leHQgYnV0dG9uLCBzaW1pbGFyIHRvIHRoZSBzdHVkZW50IGRpYWxvZyB0ZXh0LiBJZiB5b3UgYXJlIHBhc3RpbmcgZnJvbSBXb3JkIGl0IGlzIHJlY29tbWVuZGVkIHRvIHBhc3RlIGludG8gYSBwbGFpbiB0ZXh0IGVkaXRvciBmaXJzdCwgYW5kIHRoZW4gaW50byB0aGlzIGJveC4nPlRyYW5zaXRpb24gQ29tbWVudCA8YnV0dG9uIGNsYXNzPSdyaWNodGV4dF9lZGl0IGNvbW1hbmQnPkVkaXQ8L2J1dHRvbj48L2xhYmVsPiA8ZGl2IGNsYXNzPSdpbmZvX2JveF93aWRlIHRyYW5zaXRpb25fcHJldmlldyc+XCIgKyB0cmFuc2l0aW9uICsgXCI8L2Rpdj4gPHRleHRhcmVhIGlkPSd0cmFuc2l0aW9uX3RleHRhcmVhJyBjbGFzcz0nY29uZmlybWF0aW9uJz5cIiArIHRyYW5zaXRpb24gKyBcIjwvdGV4dGFyZWE+IDxkaXYgY2xhc3M9J3RyYW5zaXRpb25fYnV0dG9ucyBjb25maXJtYXRpb24nPiA8YnV0dG9uIGNsYXNzPSdyaWNodGV4dF9zYXZlIGNvbW1hbmQnPlNhdmU8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz0ncmljaHRleHRfY2FuY2VsIGNvbW1hbmQnPkNhbmNlbDwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nZm9udF9mYW1pbHknIHRpdGxlPSdQbGVhc2UgYmUgYXdhcmUgdGhhdCB3aGF0ZXZlciBmb250IGlzIHNwZWNpZmllZCwgbXVzdCBiZSBhdmFpbGFibGUgb24gdGhlIHVzZXJgcyBzeXN0ZW0uIFdoZW4gbXVsdGlwbGUgZm9udHMgYXJlIGVudGVyZWQgc2VwYXJhdGVkIGJ5IGNvbW1hcywgdGhleSBhcmUgcmFua2VkIGluIG9yZGVyIG9mIHByZWZlcmVuY2UgZnJvbSBsZWZ0IHRvIHJpZ2h0LiBGb250IG5hbWVzIHdpdGggc3BhY2VzIG11c3QgYmUgd3JhcHBlZCBpbiBkb3VibGUgcXVvdGVzLic+UHJlZmVycmVkIGZvbnQ8L2xhYmVsPiA8aW5wdXQgaWQ9J2ZvbnRfZmFtaWx5JyB2YWx1ZT0nXCIgKyBmb250RmFtaWx5ICsgXCInPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J2Rpc3BsYXlfY29kZScgdGl0bGU9J1RoaXMgQ29mZmVlU2NyaXB0IGNvZGUgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoaXMgcXVlc3Rpb24gaXMgc2hvd24uIFRoaXMgb3B0aW9uIG1heSBvbmx5IGJlIHVzZWQgd2hlbiBGb2N1cyBNb2RlIGlzIG9uLic+QWN0aW9uIG9uIGRpc3BsYXk8L2xhYmVsPiA8dGV4dGFyZWEgaWQ9J2Rpc3BsYXlfY29kZSc+XCIgKyBkaXNwbGF5Q29kZSArIFwiPC90ZXh0YXJlYT4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBpZD0ncHJvdG90eXBlX2F0dHJpYnV0ZXMnPjwvZGl2PiA8YnV0dG9uIGNsYXNzPSdzYXZlX3N1YnRlc3QgY29tbWFuZCc+RG9uZTwvYnV0dG9uPlwiKTtcbiAgICB0aGlzLnByb3RvdHlwZUVkaXRvci5zZXRFbGVtZW50KHRoaXMuJGVsLmZpbmQoJyNwcm90b3R5cGVfYXR0cmlidXRlcycpKTtcbiAgICBpZiAodHlwZW9mIChiYXNlID0gdGhpcy5wcm90b3R5cGVFZGl0b3IpLnJlbmRlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBiYXNlLnJlbmRlcigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgU3VidGVzdEVkaXRWaWV3LnByb3RvdHlwZS5hZnRlclJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZWY7XG4gICAgcmV0dXJuIChyZWYgPSB0aGlzLnByb3RvdHlwZUVkaXRvcikgIT0gbnVsbCA/IHR5cGVvZiByZWYuYWZ0ZXJSZW5kZXIgPT09IFwiZnVuY3Rpb25cIiA/IHJlZi5hZnRlclJlbmRlcigpIDogdm9pZCAwIDogdm9pZCAwO1xuICB9O1xuXG4gIFN1YnRlc3RFZGl0Vmlldy5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBiYXNlO1xuICAgIHJldHVybiB0eXBlb2YgKGJhc2UgPSB0aGlzLnByb3RvdHlwZUVkaXRvcikuY2xvc2UgPT09IFwiZnVuY3Rpb25cIiA/IGJhc2UuY2xvc2UoKSA6IHZvaWQgMDtcbiAgfTtcblxuICByZXR1cm4gU3VidGVzdEVkaXRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgU3VidGVzdFJ1blZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJTdWJ0ZXN0UnVuVmlld1wiXG5cbiAgZXZlbnRzOlxuICAgICdjbGljayAuc3VidGVzdC1uZXh0JyA6ICduZXh0J1xuICAgICdjbGljayAuc3VidGVzdC1iYWNrJyA6ICdiYWNrJ1xuICAgICdjbGljayAuc3VidGVzdF9oZWxwJyA6ICd0b2dnbGVIZWxwJ1xuICAgICdjbGljayAuc2tpcCcgICAgICAgICA6ICdza2lwJ1xuXG4gIHRvZ2dsZUhlbHA6IC0+IEAkZWwuZmluZChcIi5lbnVtZXJhdG9yX2hlbHBcIikuZmFkZVRvZ2dsZSgyNTApXG5cbiAgaTE4bjogLT5cbiAgICBAdGV4dCA9XG4gICAgICBcIm5leHRcIiA6IHQoXCJTdWJ0ZXN0UnVuVmlldy5idXR0b24ubmV4dFwiKVxuICAgICAgXCJiYWNrXCIgOiB0KFwiU3VidGVzdFJ1blZpZXcuYnV0dG9uLmJhY2tcIilcbiAgICAgIFwic2tpcFwiIDogdChcIlN1YnRlc3RSdW5WaWV3LmJ1dHRvbi5za2lwXCIpXG4gICAgICBcImhlbHBcIiA6IHQoXCJTdWJ0ZXN0UnVuVmlldy5idXR0b24uaGVscFwiKVxuXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgICBAaTE4bigpXG5cbiAgICBAcHJvdG9WaWV3cyAgPSBUYW5nZXJpbmUuY29uZmlnLmdldCBcInByb3RvdHlwZVZpZXdzXCJcbiAgICBAbW9kZWwgICAgICAgPSBvcHRpb25zLm1vZGVsXG4gICAgQHBhcmVudCAgICAgID0gb3B0aW9ucy5wYXJlbnRcbiAgICBAZm9udFN0eWxlID0gXCJzdHlsZT1cXFwiZm9udC1mYW1pbHk6ICN7QG1vZGVsLmdldCgnZm9udEZhbWlseScpfSAhaW1wb3J0YW50O1xcXCJcIiBpZiBAbW9kZWwuZ2V0KFwiZm9udEZhbWlseVwiKSAhPSBcIlwiXG5cbiAgICBAcHJvdG90eXBlUmVuZGVyZWQgPSBmYWxzZVxuXG4gIHJlbmRlcjogLT5cblxuICAgIF9yZW5kZXIgPSA9PlxuXG4gICAgICBAZGVsZWdhdGVFdmVudHMoKVxuXG4gICAgICBlbnVtZXJhdG9ySGVscCA9IGlmIChAbW9kZWwuZ2V0KFwiZW51bWVyYXRvckhlbHBcIikgfHwgXCJcIikgIT0gXCJcIiB0aGVuIFwiPGJ1dHRvbiBjbGFzcz0nc3VidGVzdF9oZWxwIGNvbW1hbmQnPiN7QHRleHQuaGVscH08L2J1dHRvbj48ZGl2IGNsYXNzPSdlbnVtZXJhdG9yX2hlbHAnICN7QGZvbnRTdHlsZSB8fCBcIlwifT4je0Btb2RlbC5nZXQgJ2VudW1lcmF0b3JIZWxwJ308L2Rpdj5cIiBlbHNlIFwiXCJcbiAgICAgIHN0dWRlbnREaWFsb2cgID0gaWYgKEBtb2RlbC5nZXQoXCJzdHVkZW50RGlhbG9nXCIpICB8fCBcIlwiKSAhPSBcIlwiIHRoZW4gXCI8ZGl2IGNsYXNzPSdzdHVkZW50X2RpYWxvZycgI3tAZm9udFN0eWxlIHx8IFwiXCJ9PiN7QG1vZGVsLmdldCAnc3R1ZGVudERpYWxvZyd9PC9kaXY+XCIgZWxzZSBcIlwiXG4gICAgICB0cmFuc2l0aW9uQ29tbWVudCAgPSBpZiAoQG1vZGVsLmdldChcInRyYW5zaXRpb25Db21tZW50XCIpICB8fCBcIlwiKSAhPSBcIlwiIHRoZW4gXCI8ZGl2IGNsYXNzPSdzdHVkZW50X2RpYWxvZycgI3tAZm9udFN0eWxlIHx8IFwiXCJ9PiN7QG1vZGVsLmdldCAndHJhbnNpdGlvbkNvbW1lbnQnfTwvZGl2PiA8YnI+XCIgZWxzZSBcIlwiXG5cbiAgICAgIHNraXBwYWJsZSA9IEBtb2RlbC5nZXQoXCJza2lwcGFibGVcIikgPT0gdHJ1ZSB8fCBAbW9kZWwuZ2V0KFwic2tpcHBhYmxlXCIpID09IFwidHJ1ZVwiXG4gICAgICBiYWNrYWJsZSA9ICggQG1vZGVsLmdldChcImJhY2tCdXR0b25cIikgPT0gdHJ1ZSB8fCBAbW9kZWwuZ2V0KFwiYmFja0J1dHRvblwiKSA9PSBcInRydWVcIiApIGFuZCBAcGFyZW50LmluZGV4IGlzbnQgMFxuXG4gICAgICBza2lwQnV0dG9uID0gXCI8YnV0dG9uIGNsYXNzPSdza2lwIG5hdmlnYXRpb24nPiN7QHRleHQuc2tpcH08L2J1dHRvbj5cIiBpZiBza2lwcGFibGVcbiAgICAgIGJhY2tCdXR0b24gPSBcIjxidXR0b24gY2xhc3M9J3N1YnRlc3QtYmFjayBuYXZpZ2F0aW9uJz4je0B0ZXh0LmJhY2t9PC9idXR0b24+XCIgaWYgYmFja2FibGVcblxuXG4gICAgICBAJGVsLmh0bWwgXCJcbiAgICAgICAgPGgyPiN7QG1vZGVsLmdldCAnbmFtZSd9PC9oMj5cbiAgICAgICAgI3tlbnVtZXJhdG9ySGVscH1cbiAgICAgICAgI3tzdHVkZW50RGlhbG9nfVxuICAgICAgICA8ZGl2IGlkPSdwcm90b3R5cGVfd3JhcHBlcic+PC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz0nY29udHJvbGxzIGNsZWFyZml4Jz5cbiAgICAgICAgICAje3RyYW5zaXRpb25Db21tZW50fVxuICAgICAgICAgICN7YmFja0J1dHRvbiBvciAnJ31cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdzdWJ0ZXN0LW5leHQgbmF2aWdhdGlvbic+I3tAdGV4dC5uZXh0fTwvYnV0dG9uPlxuICAgICAgICAgICN7c2tpcEJ1dHRvbiBvciAnJ31cbiAgICAgICAgPC9kaXY+XG4gICAgICBcIlxuXG4gICAgICAjIFVzZSBwcm90b3R5cGUgc3BlY2lmaWMgdmlld3MgaGVyZVxuICAgICAgQHByb3RvdHlwZVZpZXcgPSBuZXcgd2luZG93W0Bwcm90b1ZpZXdzW0Btb2RlbC5nZXQgJ3Byb3RvdHlwZSddWydydW4nXV1cbiAgICAgICAgbW9kZWwgIDogQG1vZGVsXG4gICAgICAgIHBhcmVudCA6IEBcbiAgICAgIEBwcm90b3R5cGVWaWV3Lm9uIFwicmVuZGVyZWRcIiwgICAgPT4gQGZsYWdSZW5kZXIoXCJwcm90b3R5cGVcIilcbiAgICAgIEBwcm90b3R5cGVWaWV3Lm9uIFwic3ViUmVuZGVyZWRcIiwgPT4gQHRyaWdnZXIgXCJzdWJSZW5kZXJlZFwiXG4gICAgICBAcHJvdG90eXBlVmlldy5vbiBcInNob3dOZXh0XCIsICAgID0+IEBzaG93TmV4dCgpXG4gICAgICBAcHJvdG90eXBlVmlldy5vbiBcImhpZGVOZXh0XCIsICAgID0+IEBoaWRlTmV4dCgpXG4gICAgICBAcHJvdG90eXBlVmlldy5vbiBcInJlYWR5XCIsICAgICAgID0+IEBwcm90b3R5cGVSZW5kZXJlZCA9IHRydWU7XG4gICAgICBAcHJvdG90eXBlVmlldy5zZXRFbGVtZW50KEAkZWwuZmluZCgnI3Byb3RvdHlwZV93cmFwcGVyJykpXG4gICAgICBAcHJvdG90eXBlVmlldy5yZW5kZXIoKVxuXG4gICAgICBAZmxhZ1JlbmRlciBcInN1YnRlc3RcIlxuXG4gICAgY29kZSA9IGlmIEBtb2RlbC5oYXMoXCJsYW5ndWFnZVwiKSBhbmQgQG1vZGVsLmdldChcImxhbmd1YWdlXCIpICE9IFwiXCJcbiAgICAgICAgQG1vZGVsLmdldChcImxhbmd1YWdlXCIpXG4gICAgICBlbHNlXG4gICAgICAgIFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJsYW5ndWFnZVwiKVxuXG4gICAgY29kZSA9IFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJsYW5ndWFnZVwiKSBpZiB0eXBlb2YgVGFuZ2VyaW5lLmxvY2FsZXNbY29kZV0gPT0gXCJ1bmRlZmluZWRcIlxuXG4gICAgVXRpbHMuY2hhbmdlTGFuZ3VhZ2UgY29kZSwgKGVyciwgdCkgLT5cbiAgICAgIHdpbmRvdy50ID0gdFxuICAgICAgX3JlbmRlcigpXG5cblxuICBmbGFnUmVuZGVyOiAoIGZsYWcgKSA9PlxuICAgIEByZW5kZXJGbGFncyA9IHt9IGlmIG5vdCBAcmVuZGVyRmxhZ3NcbiAgICBAcmVuZGVyRmxhZ3NbZmxhZ10gPSB0cnVlXG5cbiAgICBpZiBAcmVuZGVyRmxhZ3NbJ3N1YnRlc3QnXSAmJiBAcmVuZGVyRmxhZ3NbJ3Byb3RvdHlwZSddXG4gICAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICBhZnRlclJlbmRlcjogPT5cbiAgICBAcHJvdG90eXBlVmlldz8uYWZ0ZXJSZW5kZXI/KClcbiAgICBAb25TaG93KClcblxuICBzaG93TmV4dDogPT4gQCRlbC5maW5kKFwiLmNvbnRyb2xsc1wiKS5zaG93KClcbiAgaGlkZU5leHQ6ID0+IEAkZWwuZmluZChcIi5jb250cm9sbHNcIikuaGlkZSgpXG5cbiAgb25TaG93OiAtPlxuICAgIGRpc3BsYXlDb2RlID0gQG1vZGVsLmdldFN0cmluZyhcImRpc3BsYXlDb2RlXCIpXG5cbiAgICBpZiBub3QgXy5pc0VtcHR5U3RyaW5nKGRpc3BsYXlDb2RlKVxuXG4gICAgICB0cnlcbiAgICAgICAgQ29mZmVlU2NyaXB0LmV2YWwuYXBwbHkoQCwgW2Rpc3BsYXlDb2RlXSlcbiAgICAgIGNhdGNoIGVycm9yXG4gICAgICAgIG5hbWUgPSAoKC9mdW5jdGlvbiAoLnsxLH0pXFwoLykuZXhlYyhlcnJvci5jb25zdHJ1Y3Rvci50b1N0cmluZygpKVsxXSlcbiAgICAgICAgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2VcbiAgICAgICAgYWxlcnQgXCIje25hbWV9XFxuXFxuI3ttZXNzYWdlfVwiXG4gICAgICAgIGNvbnNvbGUubG9nIFwiZGlzcGxheUNvZGUgRXJyb3I6IFwiICsgSlNPTi5zdHJpbmdpZnkoZXJyb3IpXG5cbiAgICBAcHJvdG90eXBlVmlldy51cGRhdGVFeGVjdXRlUmVhZHk/KHRydWUpXG5cbiAgZ2V0R3JpZFNjb3JlOiAtPlxuICAgIGxpbmsgPSBAbW9kZWwuZ2V0KFwiZ3JpZExpbmtJZFwiKSB8fCBcIlwiXG4gICAgaWYgbGluayA9PSBcIlwiIHRoZW4gcmV0dXJuXG4gICAgZ3JpZCA9IEBwYXJlbnQubW9kZWwuc3VidGVzdHMuZ2V0IEBtb2RlbC5nZXQoXCJncmlkTGlua0lkXCIpXG4gICAgZ3JpZFNjb3JlID0gQHBhcmVudC5yZXN1bHQuZ2V0R3JpZFNjb3JlIGdyaWQuaWRcbiAgICBncmlkU2NvcmVcblxuICBncmlkV2FzQXV0b3N0b3BwZWQ6IC0+XG4gICAgbGluayA9IEBtb2RlbC5nZXQoXCJncmlkTGlua0lkXCIpIHx8IFwiXCJcbiAgICBpZiBsaW5rID09IFwiXCIgdGhlbiByZXR1cm5cbiAgICBncmlkID0gQHBhcmVudC5tb2RlbC5zdWJ0ZXN0cy5nZXQgQG1vZGVsLmdldChcImdyaWRMaW5rSWRcIilcbiAgICBncmlkV2FzQXV0b3N0b3BwZWQgPSBAcGFyZW50LnJlc3VsdC5ncmlkV2FzQXV0b3N0b3BwZWQgZ3JpZC5pZFxuXG4gIG9uQ2xvc2U6IC0+XG4gICAgQHByb3RvdHlwZVZpZXc/LmNsb3NlPygpXG5cbiAgaXNWYWxpZDogLT5cbiAgICBpZiBub3QgQHByb3RvdHlwZVJlbmRlcmVkIHRoZW4gcmV0dXJuIGZhbHNlXG4gICAgaWYgQHByb3RvdHlwZVZpZXcuaXNWYWxpZD9cbiAgICAgIHJldHVybiBAcHJvdG90eXBlVmlldy5pc1ZhbGlkKClcbiAgICBlbHNlXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB0cnVlXG5cbiAgc2hvd0Vycm9yczogLT5cbiAgICBAcHJvdG90eXBlVmlldy5zaG93RXJyb3JzKClcblxuICBnZXRTdW06IC0+XG4gICAgaWYgQHByb3RvdHlwZVZpZXcuZ2V0U3VtP1xuICAgICAgcmV0dXJuIEBwcm90b3R5cGVWaWV3LmdldFN1bSgpXG4gICAgZWxzZVxuICAgICAgIyBtYXliZSBhIGJldHRlciBmYWxsYmFja1xuICAgICAgcmV0dXJuIHtjb3JyZWN0OjAsaW5jb3JyZWN0OjAsbWlzc2luZzowLHRvdGFsOjB9XG5cbiAgYWJvcnQ6IC0+XG4gICAgQHBhcmVudC5hYm9ydCgpXG5cbiAgZ2V0UmVzdWx0OiAtPlxuICAgIHJlc3VsdCA9IEBwcm90b3R5cGVWaWV3LmdldFJlc3VsdCgpXG4gICAgaGFzaCA9IEBtb2RlbC5nZXQoXCJoYXNoXCIpIGlmIEBtb2RlbC5oYXMoXCJoYXNoXCIpXG4gICAgcmV0dXJuIHtcbiAgICAgICdib2R5JyA6IHJlc3VsdFxuICAgICAgJ21ldGEnIDpcbiAgICAgICAgJ2hhc2gnIDogaGFzaFxuICAgIH1cblxuICBnZXRTa2lwcGVkOiAtPlxuICAgIGlmIEBwcm90b3R5cGVWaWV3LmdldFNraXBwZWQ/XG4gICAgICByZXR1cm4gQHByb3RvdHlwZVZpZXcuZ2V0U2tpcHBlZCgpXG4gICAgZWxzZVxuICAgICAgdGhyb3cgXCJQcm90b3R5cGUgc2tpcHBpbmcgbm90IGltcGxlbWVudGVkXCJcblxuICBuZXh0OiAtPiBAdHJpZ2dlciBcIm5leHRcIlxuICBiYWNrOiAtPiBAdHJpZ2dlciBcImJhY2tcIlxuICBza2lwOiAtPiBAcGFyZW50LnNraXAoKVxuIiwidmFyIFN1YnRlc3RSdW5WaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblN1YnRlc3RSdW5WaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFN1YnRlc3RSdW5WaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBTdWJ0ZXN0UnVuVmlldygpIHtcbiAgICB0aGlzLmhpZGVOZXh0ID0gYmluZCh0aGlzLmhpZGVOZXh0LCB0aGlzKTtcbiAgICB0aGlzLnNob3dOZXh0ID0gYmluZCh0aGlzLnNob3dOZXh0LCB0aGlzKTtcbiAgICB0aGlzLmFmdGVyUmVuZGVyID0gYmluZCh0aGlzLmFmdGVyUmVuZGVyLCB0aGlzKTtcbiAgICB0aGlzLmZsYWdSZW5kZXIgPSBiaW5kKHRoaXMuZmxhZ1JlbmRlciwgdGhpcyk7XG4gICAgcmV0dXJuIFN1YnRlc3RSdW5WaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgU3VidGVzdFJ1blZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiU3VidGVzdFJ1blZpZXdcIjtcblxuICBTdWJ0ZXN0UnVuVmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdjbGljayAuc3VidGVzdC1uZXh0JzogJ25leHQnLFxuICAgICdjbGljayAuc3VidGVzdC1iYWNrJzogJ2JhY2snLFxuICAgICdjbGljayAuc3VidGVzdF9oZWxwJzogJ3RvZ2dsZUhlbHAnLFxuICAgICdjbGljayAuc2tpcCc6ICdza2lwJ1xuICB9O1xuXG4gIFN1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS50b2dnbGVIZWxwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIuZW51bWVyYXRvcl9oZWxwXCIpLmZhZGVUb2dnbGUoMjUwKTtcbiAgfTtcblxuICBTdWJ0ZXN0UnVuVmlldy5wcm90b3R5cGUuaTE4biA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRleHQgPSB7XG4gICAgICBcIm5leHRcIjogdChcIlN1YnRlc3RSdW5WaWV3LmJ1dHRvbi5uZXh0XCIpLFxuICAgICAgXCJiYWNrXCI6IHQoXCJTdWJ0ZXN0UnVuVmlldy5idXR0b24uYmFja1wiKSxcbiAgICAgIFwic2tpcFwiOiB0KFwiU3VidGVzdFJ1blZpZXcuYnV0dG9uLnNraXBcIiksXG4gICAgICBcImhlbHBcIjogdChcIlN1YnRlc3RSdW5WaWV3LmJ1dHRvbi5oZWxwXCIpXG4gICAgfTtcbiAgfTtcblxuICBTdWJ0ZXN0UnVuVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLmkxOG4oKTtcbiAgICB0aGlzLnByb3RvVmlld3MgPSBUYW5nZXJpbmUuY29uZmlnLmdldChcInByb3RvdHlwZVZpZXdzXCIpO1xuICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIHRoaXMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gICAgaWYgKHRoaXMubW9kZWwuZ2V0KFwiZm9udEZhbWlseVwiKSAhPT0gXCJcIikge1xuICAgICAgdGhpcy5mb250U3R5bGUgPSBcInN0eWxlPVxcXCJmb250LWZhbWlseTogXCIgKyAodGhpcy5tb2RlbC5nZXQoJ2ZvbnRGYW1pbHknKSkgKyBcIiAhaW1wb3J0YW50O1xcXCJcIjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJvdG90eXBlUmVuZGVyZWQgPSBmYWxzZTtcbiAgfTtcblxuICBTdWJ0ZXN0UnVuVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIF9yZW5kZXIsIGNvZGU7XG4gICAgX3JlbmRlciA9IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYmFja0J1dHRvbiwgYmFja2FibGUsIGVudW1lcmF0b3JIZWxwLCBza2lwQnV0dG9uLCBza2lwcGFibGUsIHN0dWRlbnREaWFsb2csIHRyYW5zaXRpb25Db21tZW50O1xuICAgICAgICBfdGhpcy5kZWxlZ2F0ZUV2ZW50cygpO1xuICAgICAgICBlbnVtZXJhdG9ySGVscCA9IChfdGhpcy5tb2RlbC5nZXQoXCJlbnVtZXJhdG9ySGVscFwiKSB8fCBcIlwiKSAhPT0gXCJcIiA/IFwiPGJ1dHRvbiBjbGFzcz0nc3VidGVzdF9oZWxwIGNvbW1hbmQnPlwiICsgX3RoaXMudGV4dC5oZWxwICsgXCI8L2J1dHRvbj48ZGl2IGNsYXNzPSdlbnVtZXJhdG9yX2hlbHAnIFwiICsgKF90aGlzLmZvbnRTdHlsZSB8fCBcIlwiKSArIFwiPlwiICsgKF90aGlzLm1vZGVsLmdldCgnZW51bWVyYXRvckhlbHAnKSkgKyBcIjwvZGl2PlwiIDogXCJcIjtcbiAgICAgICAgc3R1ZGVudERpYWxvZyA9IChfdGhpcy5tb2RlbC5nZXQoXCJzdHVkZW50RGlhbG9nXCIpIHx8IFwiXCIpICE9PSBcIlwiID8gXCI8ZGl2IGNsYXNzPSdzdHVkZW50X2RpYWxvZycgXCIgKyAoX3RoaXMuZm9udFN0eWxlIHx8IFwiXCIpICsgXCI+XCIgKyAoX3RoaXMubW9kZWwuZ2V0KCdzdHVkZW50RGlhbG9nJykpICsgXCI8L2Rpdj5cIiA6IFwiXCI7XG4gICAgICAgIHRyYW5zaXRpb25Db21tZW50ID0gKF90aGlzLm1vZGVsLmdldChcInRyYW5zaXRpb25Db21tZW50XCIpIHx8IFwiXCIpICE9PSBcIlwiID8gXCI8ZGl2IGNsYXNzPSdzdHVkZW50X2RpYWxvZycgXCIgKyAoX3RoaXMuZm9udFN0eWxlIHx8IFwiXCIpICsgXCI+XCIgKyAoX3RoaXMubW9kZWwuZ2V0KCd0cmFuc2l0aW9uQ29tbWVudCcpKSArIFwiPC9kaXY+IDxicj5cIiA6IFwiXCI7XG4gICAgICAgIHNraXBwYWJsZSA9IF90aGlzLm1vZGVsLmdldChcInNraXBwYWJsZVwiKSA9PT0gdHJ1ZSB8fCBfdGhpcy5tb2RlbC5nZXQoXCJza2lwcGFibGVcIikgPT09IFwidHJ1ZVwiO1xuICAgICAgICBiYWNrYWJsZSA9IChfdGhpcy5tb2RlbC5nZXQoXCJiYWNrQnV0dG9uXCIpID09PSB0cnVlIHx8IF90aGlzLm1vZGVsLmdldChcImJhY2tCdXR0b25cIikgPT09IFwidHJ1ZVwiKSAmJiBfdGhpcy5wYXJlbnQuaW5kZXggIT09IDA7XG4gICAgICAgIGlmIChza2lwcGFibGUpIHtcbiAgICAgICAgICBza2lwQnV0dG9uID0gXCI8YnV0dG9uIGNsYXNzPSdza2lwIG5hdmlnYXRpb24nPlwiICsgX3RoaXMudGV4dC5za2lwICsgXCI8L2J1dHRvbj5cIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFja2FibGUpIHtcbiAgICAgICAgICBiYWNrQnV0dG9uID0gXCI8YnV0dG9uIGNsYXNzPSdzdWJ0ZXN0LWJhY2sgbmF2aWdhdGlvbic+XCIgKyBfdGhpcy50ZXh0LmJhY2sgKyBcIjwvYnV0dG9uPlwiO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLiRlbC5odG1sKFwiPGgyPlwiICsgKF90aGlzLm1vZGVsLmdldCgnbmFtZScpKSArIFwiPC9oMj4gXCIgKyBlbnVtZXJhdG9ySGVscCArIFwiIFwiICsgc3R1ZGVudERpYWxvZyArIFwiIDxkaXYgaWQ9J3Byb3RvdHlwZV93cmFwcGVyJz48L2Rpdj4gPGRpdiBjbGFzcz0nY29udHJvbGxzIGNsZWFyZml4Jz4gXCIgKyB0cmFuc2l0aW9uQ29tbWVudCArIFwiIFwiICsgKGJhY2tCdXR0b24gfHwgJycpICsgXCIgPGJ1dHRvbiBjbGFzcz0nc3VidGVzdC1uZXh0IG5hdmlnYXRpb24nPlwiICsgX3RoaXMudGV4dC5uZXh0ICsgXCI8L2J1dHRvbj4gXCIgKyAoc2tpcEJ1dHRvbiB8fCAnJykgKyBcIiA8L2Rpdj5cIik7XG4gICAgICAgIF90aGlzLnByb3RvdHlwZVZpZXcgPSBuZXcgd2luZG93W190aGlzLnByb3RvVmlld3NbX3RoaXMubW9kZWwuZ2V0KCdwcm90b3R5cGUnKV1bJ3J1biddXSh7XG4gICAgICAgICAgbW9kZWw6IF90aGlzLm1vZGVsLFxuICAgICAgICAgIHBhcmVudDogX3RoaXNcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLnByb3RvdHlwZVZpZXcub24oXCJyZW5kZXJlZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuZmxhZ1JlbmRlcihcInByb3RvdHlwZVwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLnByb3RvdHlwZVZpZXcub24oXCJzdWJSZW5kZXJlZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMudHJpZ2dlcihcInN1YlJlbmRlcmVkXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMucHJvdG90eXBlVmlldy5vbihcInNob3dOZXh0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5zaG93TmV4dCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMucHJvdG90eXBlVmlldy5vbihcImhpZGVOZXh0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5oaWRlTmV4dCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMucHJvdG90eXBlVmlldy5vbihcInJlYWR5XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5wcm90b3R5cGVSZW5kZXJlZCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5wcm90b3R5cGVWaWV3LnNldEVsZW1lbnQoX3RoaXMuJGVsLmZpbmQoJyNwcm90b3R5cGVfd3JhcHBlcicpKTtcbiAgICAgICAgX3RoaXMucHJvdG90eXBlVmlldy5yZW5kZXIoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzLmZsYWdSZW5kZXIoXCJzdWJ0ZXN0XCIpO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKTtcbiAgICBjb2RlID0gdGhpcy5tb2RlbC5oYXMoXCJsYW5ndWFnZVwiKSAmJiB0aGlzLm1vZGVsLmdldChcImxhbmd1YWdlXCIpICE9PSBcIlwiID8gdGhpcy5tb2RlbC5nZXQoXCJsYW5ndWFnZVwiKSA6IFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJsYW5ndWFnZVwiKTtcbiAgICBpZiAodHlwZW9mIFRhbmdlcmluZS5sb2NhbGVzW2NvZGVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBjb2RlID0gVGFuZ2VyaW5lLnNldHRpbmdzLmdldChcImxhbmd1YWdlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gVXRpbHMuY2hhbmdlTGFuZ3VhZ2UoY29kZSwgZnVuY3Rpb24oZXJyLCB0KSB7XG4gICAgICB3aW5kb3cudCA9IHQ7XG4gICAgICByZXR1cm4gX3JlbmRlcigpO1xuICAgIH0pO1xuICB9O1xuXG4gIFN1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5mbGFnUmVuZGVyID0gZnVuY3Rpb24oZmxhZykge1xuICAgIGlmICghdGhpcy5yZW5kZXJGbGFncykge1xuICAgICAgdGhpcy5yZW5kZXJGbGFncyA9IHt9O1xuICAgIH1cbiAgICB0aGlzLnJlbmRlckZsYWdzW2ZsYWddID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5yZW5kZXJGbGFnc1snc3VidGVzdCddICYmIHRoaXMucmVuZGVyRmxhZ3NbJ3Byb3RvdHlwZSddKSB7XG4gICAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gICAgfVxuICB9O1xuXG4gIFN1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5hZnRlclJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZWY7XG4gICAgaWYgKChyZWYgPSB0aGlzLnByb3RvdHlwZVZpZXcpICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVmLmFmdGVyUmVuZGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmVmLmFmdGVyUmVuZGVyKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm9uU2hvdygpO1xuICB9O1xuXG4gIFN1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5zaG93TmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLmNvbnRyb2xsc1wiKS5zaG93KCk7XG4gIH07XG5cbiAgU3VidGVzdFJ1blZpZXcucHJvdG90eXBlLmhpZGVOZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIuY29udHJvbGxzXCIpLmhpZGUoKTtcbiAgfTtcblxuICBTdWJ0ZXN0UnVuVmlldy5wcm90b3R5cGUub25TaG93ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJhc2UsIGRpc3BsYXlDb2RlLCBlcnJvciwgbWVzc2FnZSwgbmFtZTtcbiAgICBkaXNwbGF5Q29kZSA9IHRoaXMubW9kZWwuZ2V0U3RyaW5nKFwiZGlzcGxheUNvZGVcIik7XG4gICAgaWYgKCFfLmlzRW1wdHlTdHJpbmcoZGlzcGxheUNvZGUpKSB7XG4gICAgICB0cnkge1xuICAgICAgICBDb2ZmZWVTY3JpcHRbXCJldmFsXCJdLmFwcGx5KHRoaXMsIFtkaXNwbGF5Q29kZV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgICBuYW1lID0gKC9mdW5jdGlvbiAoLnsxLH0pXFwoLy5leGVjKGVycm9yLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkpWzFdKTtcbiAgICAgICAgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICAgIGFsZXJ0KG5hbWUgKyBcIlxcblxcblwiICsgbWVzc2FnZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZGlzcGxheUNvZGUgRXJyb3I6IFwiICsgSlNPTi5zdHJpbmdpZnkoZXJyb3IpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiAoYmFzZSA9IHRoaXMucHJvdG90eXBlVmlldykudXBkYXRlRXhlY3V0ZVJlYWR5ID09PSBcImZ1bmN0aW9uXCIgPyBiYXNlLnVwZGF0ZUV4ZWN1dGVSZWFkeSh0cnVlKSA6IHZvaWQgMDtcbiAgfTtcblxuICBTdWJ0ZXN0UnVuVmlldy5wcm90b3R5cGUuZ2V0R3JpZFNjb3JlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdyaWQsIGdyaWRTY29yZSwgbGluaztcbiAgICBsaW5rID0gdGhpcy5tb2RlbC5nZXQoXCJncmlkTGlua0lkXCIpIHx8IFwiXCI7XG4gICAgaWYgKGxpbmsgPT09IFwiXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZ3JpZCA9IHRoaXMucGFyZW50Lm1vZGVsLnN1YnRlc3RzLmdldCh0aGlzLm1vZGVsLmdldChcImdyaWRMaW5rSWRcIikpO1xuICAgIGdyaWRTY29yZSA9IHRoaXMucGFyZW50LnJlc3VsdC5nZXRHcmlkU2NvcmUoZ3JpZC5pZCk7XG4gICAgcmV0dXJuIGdyaWRTY29yZTtcbiAgfTtcblxuICBTdWJ0ZXN0UnVuVmlldy5wcm90b3R5cGUuZ3JpZFdhc0F1dG9zdG9wcGVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdyaWQsIGdyaWRXYXNBdXRvc3RvcHBlZCwgbGluaztcbiAgICBsaW5rID0gdGhpcy5tb2RlbC5nZXQoXCJncmlkTGlua0lkXCIpIHx8IFwiXCI7XG4gICAgaWYgKGxpbmsgPT09IFwiXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZ3JpZCA9IHRoaXMucGFyZW50Lm1vZGVsLnN1YnRlc3RzLmdldCh0aGlzLm1vZGVsLmdldChcImdyaWRMaW5rSWRcIikpO1xuICAgIHJldHVybiBncmlkV2FzQXV0b3N0b3BwZWQgPSB0aGlzLnBhcmVudC5yZXN1bHQuZ3JpZFdhc0F1dG9zdG9wcGVkKGdyaWQuaWQpO1xuICB9O1xuXG4gIFN1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlZjtcbiAgICByZXR1cm4gKHJlZiA9IHRoaXMucHJvdG90eXBlVmlldykgIT0gbnVsbCA/IHR5cGVvZiByZWYuY2xvc2UgPT09IFwiZnVuY3Rpb25cIiA/IHJlZi5jbG9zZSgpIDogdm9pZCAwIDogdm9pZCAwO1xuICB9O1xuXG4gIFN1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCF0aGlzLnByb3RvdHlwZVJlbmRlcmVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3RvdHlwZVZpZXcuaXNWYWxpZCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm90b3R5cGVWaWV3LmlzVmFsaWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBTdWJ0ZXN0UnVuVmlldy5wcm90b3R5cGUuc2hvd0Vycm9ycyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnByb3RvdHlwZVZpZXcuc2hvd0Vycm9ycygpO1xuICB9O1xuXG4gIFN1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5nZXRTdW0gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5wcm90b3R5cGVWaWV3LmdldFN1bSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm90b3R5cGVWaWV3LmdldFN1bSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb3JyZWN0OiAwLFxuICAgICAgICBpbmNvcnJlY3Q6IDAsXG4gICAgICAgIG1pc3Npbmc6IDAsXG4gICAgICAgIHRvdGFsOiAwXG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICBTdWJ0ZXN0UnVuVmlldy5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQuYWJvcnQoKTtcbiAgfTtcblxuICBTdWJ0ZXN0UnVuVmlldy5wcm90b3R5cGUuZ2V0UmVzdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGhhc2gsIHJlc3VsdDtcbiAgICByZXN1bHQgPSB0aGlzLnByb3RvdHlwZVZpZXcuZ2V0UmVzdWx0KCk7XG4gICAgaWYgKHRoaXMubW9kZWwuaGFzKFwiaGFzaFwiKSkge1xuICAgICAgaGFzaCA9IHRoaXMubW9kZWwuZ2V0KFwiaGFzaFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICdib2R5JzogcmVzdWx0LFxuICAgICAgJ21ldGEnOiB7XG4gICAgICAgICdoYXNoJzogaGFzaFxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgU3VidGVzdFJ1blZpZXcucHJvdG90eXBlLmdldFNraXBwZWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5wcm90b3R5cGVWaWV3LmdldFNraXBwZWQgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvdG90eXBlVmlldy5nZXRTa2lwcGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IFwiUHJvdG90eXBlIHNraXBwaW5nIG5vdCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cbiAgfTtcblxuICBTdWJ0ZXN0UnVuVmlldy5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJuZXh0XCIpO1xuICB9O1xuXG4gIFN1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5iYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcImJhY2tcIik7XG4gIH07XG5cbiAgU3VidGVzdFJ1blZpZXcucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQuc2tpcCgpO1xuICB9O1xuXG4gIHJldHVybiBTdWJ0ZXN0UnVuVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIENvbnNlbnRSdW5WaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZSA6IFwiQ29uc2VudFJ1blZpZXdcIlxuXG4gIGV2ZW50czpcbiAgICAnY2xpY2sgI25vbl9jb25zZW50X2NvbmZpcm0nIDogJ25vQ29uc2VudCdcblxuICBvbkNvbnNlbnRDaGFuZ2U6ID0+XG4gICAgaWYgQGNvbnNlbnRCdXR0b24uYW5zd2VyIGlzIFwieWVzXCJcbiAgICAgIEBjbGVhck1lc3NhZ2VzKClcbiAgICBlbHNlXG4gICAgICBAc2hvd05vbkNvbnNlbnQoKVxuXG4gIGkxOG46IC0+XG4gICAgQHRleHQgPVxuICAgICAgZGVmYXVsdENvbnNlbnQgICAgOiB0KFwiQ29uc2VudFJ1blZpZXcubGFiZWwuZGVmYXVsdF9jb25zZW50X3Byb21wdFwiKVxuICAgICAgY29uZmlybU5vbmNvbnNlbnQgOiB0KFwiQ29uc2VudFJ1blZpZXcubGFiZWwuY29uZmlybV9ub25jb25zZW50XCIpXG4gICAgICBjb25maXJtICAgICAgICAgICA6IHQoXCJDb25zZW50UnVuVmlldy5idXR0b24uY29uZmlybVwiKVxuICAgICAgeWVzICAgICAgICAgICAgICAgOiB0KFwiQ29uc2VudFJ1blZpZXcuYnV0dG9uLnllc19jb250aW51ZVwiKVxuICAgICAgbm8gICAgICAgICAgICAgICAgOiB0KFwiQ29uc2VudFJ1blZpZXcuYnV0dG9uLm5vX3N0b3BcIilcbiAgICAgIHNlbGVjdCAgICAgICAgICAgIDogdChcIkNvbnNlbnRSdW5WaWV3Lm1lc3NhZ2Uuc2VsZWN0XCIpXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgICBAaTE4bigpXG5cbiAgICBAY29uZmlybWVkTm9uQ29uc2VudCA9IGZhbHNlXG4gICAgQG1vZGVsICA9IG9wdGlvbnMubW9kZWxcbiAgICBAcGFyZW50ID0gb3B0aW9ucy5wYXJlbnRcbiAgICBAZGF0YUVudHJ5ID0gb3B0aW9ucy5kYXRhRW50cnlcblxuICBcbiAgcmVuZGVyOiAtPlxuXG4gICAgQCRlbC5odG1sIFwiXG4gICAgICA8ZGl2IGNsYXNzPSdxdWVzdGlvbic+XG4gICAgICAgIDxsYWJlbD4je0Btb2RlbC5nZXQoJ3Byb21wdCcpIHx8IEB0ZXh0LmRlZmF1bHRDb25zZW50fTwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9J21lc3NhZ2VzJz48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbm9uX2NvbnNlbnRfZm9ybSBjb25maXJtYXRpb24nPlxuICAgICAgICAgIDxkaXY+I3tAdGV4dC5jb25maXJtTm9uY29uc2VudH08L2Rpdj5cbiAgICAgICAgICA8YnV0dG9uIGlkPSdub25fY29uc2VudF9jb25maXJtJyBjbGFzcz0nY29tbWFuZCc+I3tAdGV4dC5jb25maXJtfTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0nY29uc2VudC1idXR0b24nPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgXCJcblxuICAgIHVubGVzcyBAZGF0YUVudHJ5XG5cbiAgICAgIHByZXZpb3VzID0gQHBhcmVudC5wYXJlbnQucmVzdWx0LmdldEJ5SGFzaChAbW9kZWwuZ2V0KCdoYXNoJykpXG4gICAgICBhbnN3ZXIgPSBwcmV2aW91cy5jb25zZW50IGlmIHByZXZpb3VzXG5cbiAgICBAY29uc2VudEJ1dHRvbiA9IG5ldyBCdXR0b25WaWV3XG4gICAgICBvcHRpb25zIDogW1xuICAgICAgICB7IGxhYmVsIDogQHRleHQueWVzLCB2YWx1ZSA6IFwieWVzXCIgfVxuICAgICAgICB7IGxhYmVsIDogQHRleHQubm8sICB2YWx1ZSA6IFwibm9cIiB9XG4gICAgICBdXG4gICAgICBtb2RlICAgICAgOiBcInNpbmdsZVwiXG4gICAgICBkYXRhRW50cnkgOiBmYWxzZVxuICAgICAgYW5zd2VyICAgIDogYW5zd2VyIG9yIFwiXCJcbiAgICBcbiAgICBAY29uc2VudEJ1dHRvbi5zZXRFbGVtZW50IEAkZWwuZmluZChcIi5jb25zZW50LWJ1dHRvblwiKVxuICAgIEBjb25zZW50QnV0dG9uLm9uIFwiY2hhbmdlXCIsIEBvbkNvbnNlbnRDaGFuZ2VcbiAgICBAY29uc2VudEJ1dHRvbi5yZW5kZXIoKVxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG4gICAgQHRyaWdnZXIgXCJyZWFkeVwiXG4gIFxuICBpc1ZhbGlkOiAtPlxuICAgIGlmIEBjb25maXJtZWROb25Db25zZW50IGlzIGZhbHNlXG4gICAgICBpZiBAY29uc2VudEJ1dHRvbi5hbnN3ZXIgaXMgXCJ5ZXNcIlxuICAgICAgICB0cnVlXG4gICAgICBlbHNlXG4gICAgICAgIGZhbHNlXG4gICAgZWxzZVxuICAgICAgdHJ1ZVxuXG4gIHNob3dOb25Db25zZW50OiAtPlxuICAgIEAkZWwuZmluZChcIi5ub25fY29uc2VudF9mb3JtXCIpLnNob3coMjUwKVxuXG4gIGNsZWFyTWVzc2FnZXM6IC0+XG4gICAgQCRlbC5maW5kKFwiLm5vbl9jb25zZW50X2Zvcm1cIikuaGlkZSgyNTApXG4gICAgQCRlbC5maW5kKFwiLm1lc3NhZ2VzXCIpLmh0bWwgXCJcIlxuXG4gIG5vQ29uc2VudDogLT5cbiAgICBAY29uZmlybWVkTm9uQ29uc2VudCA9IHRydWVcbiAgICBAcGFyZW50LmFib3J0KClcbiAgICByZXR1cm4gZmFsc2VcbiAgXG4gIGdldFNraXBwZWQ6IC0+XG4gICAgcmV0dXJuIFwiY29uc2VudFwiIDogXCJza2lwcGVkXCJcbiAgXG4gIHNob3dFcnJvcnM6IC0+XG4gICAgYW5zd2VyID0gQGNvbnNlbnRCdXR0b24uYW5zd2VyIFxuICAgIGlmIGFuc3dlciA9PSBcIm5vXCJcbiAgICAgIFV0aWxzLm1pZEFsZXJ0IEB0ZXh0LmNvbmZpcm1cbiAgICAgIEBzaG93Tm9uQ29uc2VudCgpXG4gICAgZWxzZSBpZiBhbnN3ZXIgPT0gdW5kZWZpbmVkXG4gICAgICAkKFwiLm1lc3NhZ2VzXCIpLmh0bWwgQHRleHQuc2VsZWN0XG5cbiAgZ2V0UmVzdWx0OiAtPlxuICAgIHJldHVybiBcImNvbnNlbnRcIiA6IEBjb25zZW50QnV0dG9uLmFuc3dlclxuXG4gIG9uQ2xvc2U6IC0+XG4gICAgQGNvbnNlbnRCdXR0b24/LmNsb3NlPygpXG4iLCJ2YXIgQ29uc2VudFJ1blZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuQ29uc2VudFJ1blZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoQ29uc2VudFJ1blZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIENvbnNlbnRSdW5WaWV3KCkge1xuICAgIHRoaXMub25Db25zZW50Q2hhbmdlID0gYmluZCh0aGlzLm9uQ29uc2VudENoYW5nZSwgdGhpcyk7XG4gICAgcmV0dXJuIENvbnNlbnRSdW5WaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgQ29uc2VudFJ1blZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiQ29uc2VudFJ1blZpZXdcIjtcblxuICBDb25zZW50UnVuVmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdjbGljayAjbm9uX2NvbnNlbnRfY29uZmlybSc6ICdub0NvbnNlbnQnXG4gIH07XG5cbiAgQ29uc2VudFJ1blZpZXcucHJvdG90eXBlLm9uQ29uc2VudENoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmNvbnNlbnRCdXR0b24uYW5zd2VyID09PSBcInllc1wiKSB7XG4gICAgICByZXR1cm4gdGhpcy5jbGVhck1lc3NhZ2VzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnNob3dOb25Db25zZW50KCk7XG4gICAgfVxuICB9O1xuXG4gIENvbnNlbnRSdW5WaWV3LnByb3RvdHlwZS5pMThuID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCA9IHtcbiAgICAgIGRlZmF1bHRDb25zZW50OiB0KFwiQ29uc2VudFJ1blZpZXcubGFiZWwuZGVmYXVsdF9jb25zZW50X3Byb21wdFwiKSxcbiAgICAgIGNvbmZpcm1Ob25jb25zZW50OiB0KFwiQ29uc2VudFJ1blZpZXcubGFiZWwuY29uZmlybV9ub25jb25zZW50XCIpLFxuICAgICAgY29uZmlybTogdChcIkNvbnNlbnRSdW5WaWV3LmJ1dHRvbi5jb25maXJtXCIpLFxuICAgICAgeWVzOiB0KFwiQ29uc2VudFJ1blZpZXcuYnV0dG9uLnllc19jb250aW51ZVwiKSxcbiAgICAgIG5vOiB0KFwiQ29uc2VudFJ1blZpZXcuYnV0dG9uLm5vX3N0b3BcIiksXG4gICAgICBzZWxlY3Q6IHQoXCJDb25zZW50UnVuVmlldy5tZXNzYWdlLnNlbGVjdFwiKVxuICAgIH07XG4gIH07XG5cbiAgQ29uc2VudFJ1blZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5pMThuKCk7XG4gICAgdGhpcy5jb25maXJtZWROb25Db25zZW50ID0gZmFsc2U7XG4gICAgdGhpcy5tb2RlbCA9IG9wdGlvbnMubW9kZWw7XG4gICAgdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgICByZXR1cm4gdGhpcy5kYXRhRW50cnkgPSBvcHRpb25zLmRhdGFFbnRyeTtcbiAgfTtcblxuICBDb25zZW50UnVuVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFuc3dlciwgcHJldmlvdXM7XG4gICAgdGhpcy4kZWwuaHRtbChcIjxkaXYgY2xhc3M9J3F1ZXN0aW9uJz4gPGxhYmVsPlwiICsgKHRoaXMubW9kZWwuZ2V0KCdwcm9tcHQnKSB8fCB0aGlzLnRleHQuZGVmYXVsdENvbnNlbnQpICsgXCI8L2xhYmVsPiA8ZGl2IGNsYXNzPSdtZXNzYWdlcyc+PC9kaXY+IDxkaXYgY2xhc3M9J25vbl9jb25zZW50X2Zvcm0gY29uZmlybWF0aW9uJz4gPGRpdj5cIiArIHRoaXMudGV4dC5jb25maXJtTm9uY29uc2VudCArIFwiPC9kaXY+IDxidXR0b24gaWQ9J25vbl9jb25zZW50X2NvbmZpcm0nIGNsYXNzPSdjb21tYW5kJz5cIiArIHRoaXMudGV4dC5jb25maXJtICsgXCI8L2J1dHRvbj4gPC9kaXY+IDxkaXYgY2xhc3M9J2NvbnNlbnQtYnV0dG9uJz48L2Rpdj4gPC9kaXY+XCIpO1xuICAgIGlmICghdGhpcy5kYXRhRW50cnkpIHtcbiAgICAgIHByZXZpb3VzID0gdGhpcy5wYXJlbnQucGFyZW50LnJlc3VsdC5nZXRCeUhhc2godGhpcy5tb2RlbC5nZXQoJ2hhc2gnKSk7XG4gICAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgYW5zd2VyID0gcHJldmlvdXMuY29uc2VudDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jb25zZW50QnV0dG9uID0gbmV3IEJ1dHRvblZpZXcoe1xuICAgICAgb3B0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgbGFiZWw6IHRoaXMudGV4dC55ZXMsXG4gICAgICAgICAgdmFsdWU6IFwieWVzXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgIGxhYmVsOiB0aGlzLnRleHQubm8sXG4gICAgICAgICAgdmFsdWU6IFwibm9cIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgbW9kZTogXCJzaW5nbGVcIixcbiAgICAgIGRhdGFFbnRyeTogZmFsc2UsXG4gICAgICBhbnN3ZXI6IGFuc3dlciB8fCBcIlwiXG4gICAgfSk7XG4gICAgdGhpcy5jb25zZW50QnV0dG9uLnNldEVsZW1lbnQodGhpcy4kZWwuZmluZChcIi5jb25zZW50LWJ1dHRvblwiKSk7XG4gICAgdGhpcy5jb25zZW50QnV0dG9uLm9uKFwiY2hhbmdlXCIsIHRoaXMub25Db25zZW50Q2hhbmdlKTtcbiAgICB0aGlzLmNvbnNlbnRCdXR0b24ucmVuZGVyKCk7XG4gICAgdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlYWR5XCIpO1xuICB9O1xuXG4gIENvbnNlbnRSdW5WaWV3LnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuY29uZmlybWVkTm9uQ29uc2VudCA9PT0gZmFsc2UpIHtcbiAgICAgIGlmICh0aGlzLmNvbnNlbnRCdXR0b24uYW5zd2VyID09PSBcInllc1wiKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgQ29uc2VudFJ1blZpZXcucHJvdG90eXBlLnNob3dOb25Db25zZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIubm9uX2NvbnNlbnRfZm9ybVwiKS5zaG93KDI1MCk7XG4gIH07XG5cbiAgQ29uc2VudFJ1blZpZXcucHJvdG90eXBlLmNsZWFyTWVzc2FnZXMgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRlbC5maW5kKFwiLm5vbl9jb25zZW50X2Zvcm1cIikuaGlkZSgyNTApO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLm1lc3NhZ2VzXCIpLmh0bWwoXCJcIik7XG4gIH07XG5cbiAgQ29uc2VudFJ1blZpZXcucHJvdG90eXBlLm5vQ29uc2VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuY29uZmlybWVkTm9uQ29uc2VudCA9IHRydWU7XG4gICAgdGhpcy5wYXJlbnQuYWJvcnQoKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgQ29uc2VudFJ1blZpZXcucHJvdG90eXBlLmdldFNraXBwZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCJjb25zZW50XCI6IFwic2tpcHBlZFwiXG4gICAgfTtcbiAgfTtcblxuICBDb25zZW50UnVuVmlldy5wcm90b3R5cGUuc2hvd0Vycm9ycyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbnN3ZXI7XG4gICAgYW5zd2VyID0gdGhpcy5jb25zZW50QnV0dG9uLmFuc3dlcjtcbiAgICBpZiAoYW5zd2VyID09PSBcIm5vXCIpIHtcbiAgICAgIFV0aWxzLm1pZEFsZXJ0KHRoaXMudGV4dC5jb25maXJtKTtcbiAgICAgIHJldHVybiB0aGlzLnNob3dOb25Db25zZW50KCk7XG4gICAgfSBlbHNlIGlmIChhbnN3ZXIgPT09IHZvaWQgMCkge1xuICAgICAgcmV0dXJuICQoXCIubWVzc2FnZXNcIikuaHRtbCh0aGlzLnRleHQuc2VsZWN0KTtcbiAgICB9XG4gIH07XG5cbiAgQ29uc2VudFJ1blZpZXcucHJvdG90eXBlLmdldFJlc3VsdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBcImNvbnNlbnRcIjogdGhpcy5jb25zZW50QnV0dG9uLmFuc3dlclxuICAgIH07XG4gIH07XG5cbiAgQ29uc2VudFJ1blZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVmO1xuICAgIHJldHVybiAocmVmID0gdGhpcy5jb25zZW50QnV0dG9uKSAhPSBudWxsID8gdHlwZW9mIHJlZi5jbG9zZSA9PT0gXCJmdW5jdGlvblwiID8gcmVmLmNsb3NlKCkgOiB2b2lkIDAgOiB2b2lkIDA7XG4gIH07XG5cbiAgcmV0dXJuIENvbnNlbnRSdW5WaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgQ29uc2VudEVkaXRWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZSA6IFwiQ29uc2VudEVkaXRWaWV3XCJcblxuICBpbml0aWFsaXplOiAoIG9wdGlvbnMgKSAtPlxuICAgIEBtb2RlbCA9IG9wdGlvbnMubW9kZWxcbiAgICBAcGFyZW50ID0gb3B0aW9ucy5wYXJlbnRcblxuICBpc1ZhbGlkOiAtPiB0cnVlXG5cbiAgc2F2ZTogLT5cbiAgICBAbW9kZWwuc2V0XG4gICAgICBcInByb21wdFwiIDogQCRlbC5maW5kKFwiI2NvbnNlbnRfcHJvbXB0XCIpLnZhbCgpXG5cbiAgcmVuZGVyOiAtPlxuICAgIHByb21wdCA9IEBtb2RlbC5nZXQoXCJwcm9tcHRcIikgfHwgXCJcIlxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICA8bGFiZWwgZm9yPSdjb25zZW50X3Byb21wdCc+Q29uc2VudCBwcm9tcHQ8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgaWQ9J2NvbnNlbnRfcHJvbXB0JyB2YWx1ZT0nI3twcm9tcHR9Jz5cbiAgICAgIDwvZGl2PlxuICAgIFwiXG4iLCJ2YXIgQ29uc2VudEVkaXRWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuQ29uc2VudEVkaXRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKENvbnNlbnRFZGl0Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQ29uc2VudEVkaXRWaWV3KCkge1xuICAgIHJldHVybiBDb25zZW50RWRpdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBDb25zZW50RWRpdFZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiQ29uc2VudEVkaXRWaWV3XCI7XG5cbiAgQ29uc2VudEVkaXRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIHJldHVybiB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICB9O1xuXG4gIENvbnNlbnRFZGl0Vmlldy5wcm90b3R5cGUuaXNWYWxpZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIENvbnNlbnRFZGl0Vmlldy5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1vZGVsLnNldCh7XG4gICAgICBcInByb21wdFwiOiB0aGlzLiRlbC5maW5kKFwiI2NvbnNlbnRfcHJvbXB0XCIpLnZhbCgpXG4gICAgfSk7XG4gIH07XG5cbiAgQ29uc2VudEVkaXRWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJvbXB0O1xuICAgIHByb21wdCA9IHRoaXMubW9kZWwuZ2V0KFwicHJvbXB0XCIpIHx8IFwiXCI7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwoXCI8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J2NvbnNlbnRfcHJvbXB0Jz5Db25zZW50IHByb21wdDwvbGFiZWw+IDxpbnB1dCBpZD0nY29uc2VudF9wcm9tcHQnIHZhbHVlPSdcIiArIHByb21wdCArIFwiJz4gPC9kaXY+XCIpO1xuICB9O1xuXG4gIHJldHVybiBDb25zZW50RWRpdFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBEYXRldGltZVJ1blZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcImRhdGV0aW1lXCJcblxuICBpMThuOiAtPlxuXG4gICAgQHRleHQgPSBcbiAgICAgIHllYXIgOiB0KFwiRGF0ZXRpbWVSdW5WaWV3LmxhYmVsLnllYXJcIilcbiAgICAgIG1vbnRoIDogdChcIkRhdGV0aW1lUnVuVmlldy5sYWJlbC5tb250aFwiKVxuICAgICAgZGF5IDogdChcIkRhdGV0aW1lUnVuVmlldy5sYWJlbC5kYXlcIilcbiAgICAgIHRpbWUgOiB0KFwiRGF0ZXRpbWVSdW5WaWV3LmxhYmVsLnRpbWVcIilcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cblxuICAgIEBpMThuKClcblxuICAgIEBtb2RlbCAgPSBvcHRpb25zLm1vZGVsXG4gICAgQHBhcmVudCA9IG9wdGlvbnMucGFyZW50XG4gICAgQGRhdGFFbnRyeSA9IG9wdGlvbnMuZGF0YUVudHJ5XG4gIFxuICByZW5kZXI6IC0+XG4gICAgZGF0ZVRpbWUgPSBuZXcgRGF0ZSgpXG4gICAgeWVhciAgICAgPSBkYXRlVGltZS5nZXRGdWxsWWVhcigpXG4gICAgbW9udGhzICAgPSBbdChcImphblwiKSx0KFwiZmViXCIpLHQoXCJtYXJcIiksdChcImFwclwiKSx0KFwibWF5XCIpLHQoXCJqdW5cIiksdChcImp1bFwiKSx0KFwiYXVnXCIpLHQoXCJzZXBcIiksdChcIm9jdFwiKSx0KFwibm92XCIpLHQoXCJkZWNcIildXG4gICAgbW9udGggICAgPSBtb250aHNbZGF0ZVRpbWUuZ2V0TW9udGgoKV1cbiAgICBkYXkgICAgICA9IGRhdGVUaW1lLmdldERhdGUoKVxuICAgIG1pbnV0ZXMgID0gZGF0ZVRpbWUuZ2V0TWludXRlcygpXG4gICAgbWludXRlcyAgPSBcIjBcIiArIG1pbnV0ZXMgaWYgbWludXRlcyA8IDEwXG4gICAgdGltZSAgICAgPSBkYXRlVGltZS5nZXRIb3VycygpICsgXCI6XCIgKyBtaW51dGVzXG5cbiAgICB1bmxlc3MgQGRhdGFFbnRyeVxuXG5cbiAgICAgIHByZXZpb3VzID0gQHBhcmVudC5wYXJlbnQucmVzdWx0LmdldEJ5SGFzaChAbW9kZWwuZ2V0KCdoYXNoJykpXG5cbiAgICAgIGlmIHByZXZpb3VzXG4gICAgICAgIHllYXIgID0gcHJldmlvdXMueWVhclxuICAgICAgICBtb250aCA9IHByZXZpb3VzLm1vbnRoXG4gICAgICAgIGRheSAgID0gcHJldmlvdXMuZGF5XG4gICAgICAgIHRpbWUgID0gcHJldmlvdXMudGltZVxuXG4gICAgQCRlbC5odG1sIFwiXG4gICAgICA8ZGl2IGNsYXNzPSdxdWVzdGlvbic+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQ+PGxhYmVsIGZvcj0neWVhcic+I3tAdGV4dC55ZWFyfTwvbGFiZWw+PGlucHV0IGlkPSd5ZWFyJyB2YWx1ZT0nI3t5ZWFyfSc+PC90ZD5cbiAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgPGxhYmVsIGZvcj0nbW9udGgnPiN7QHRleHQubW9udGh9PC9sYWJlbD48YnI+XG4gICAgICAgICAgICAgIDxzZWxlY3QgaWQ9J21vbnRoJyB2YWx1ZT0nI3ttb250aH0nPiN7KFwiPG9wdGlvbiB2YWx1ZT0nI3ttfScgI3soXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCIgaWYgbSBpcyBtb250aCkgfHwgJyd9PiN7bS50aXRsZWl6ZSgpfSA8L29wdGlvbj5cIiBmb3IgbSBpbiBtb250aHMpLmpvaW4oJycpfTwvc2VsZWN0PlxuICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDx0ZD48bGFiZWwgZm9yPSdkYXknPiN7QHRleHQuZGF5fTwvbGFiZWw+PGlucHV0IGlkPSdkYXknIHR5cGU9J2RheScgdmFsdWU9JyN7ZGF5fSc+PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZD48bGFiZWwgZm9yPSd0aW1lJz4je0B0ZXh0LnRpbWV9PC9sYWJlbD48YnI+PGlucHV0IHR5cGU9J3RleHQnIGlkPSd0aW1lJyB2YWx1ZT0nI3t0aW1lfSc+PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgICBcIlxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuICAgIEB0cmlnZ2VyIFwicmVhZHlcIlxuICBcbiAgZ2V0UmVzdWx0OiAtPlxuICAgIHJldHVybiB7XG4gICAgICBcInllYXJcIiAgOiBAJGVsLmZpbmQoXCIjeWVhclwiKS52YWwoKVxuICAgICAgXCJtb250aFwiIDogQCRlbC5maW5kKFwiI21vbnRoXCIpLnZhbCgpXG4gICAgICBcImRheVwiICAgOiBAJGVsLmZpbmQoXCIjZGF5XCIpLnZhbCgpXG4gICAgICBcInRpbWVcIiAgOiBAJGVsLmZpbmQoXCIjdGltZVwiKS52YWwoKVxuICAgIH1cblxuICBnZXRTa2lwcGVkOiAtPlxuICAgIHJldHVybiB7XG4gICAgICBcInllYXJcIiAgOiBcInNraXBwZWRcIlxuICAgICAgXCJtb250aFwiIDogXCJza2lwcGVkXCJcbiAgICAgIFwiZGF5XCIgICA6IFwic2tpcHBlZFwiXG4gICAgICBcInRpbWVcIiAgOiBcInNraXBwZWRcIlxuICAgIH1cblxuICBpc1ZhbGlkOiAtPlxuICAgIHRydWVcblxuICBzaG93RXJyb3JzOiAtPlxuICAgIHRydWVcblxuICBuZXh0OiAtPlxuICAgIGNvbnNvbGUubG9nKFwibmV4dCEhXCIpXG4gICAgQHByb3RvdHlwZVZpZXcub24gXCJjbGljayAubmV4dFwiLCAgICA9PlxuICAgICAgY29uc29sZS5sb2coXCJjbGlja21lIVwiKVxuICAgICAgdGhpcy5uZXh0KClcbiAgICBAcGFyZW50Lm5leHQoKVxuICBiYWNrOiAtPiBAcGFyZW50LmJhY2soKVxuIiwidmFyIERhdGV0aW1lUnVuVmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkRhdGV0aW1lUnVuVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChEYXRldGltZVJ1blZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIERhdGV0aW1lUnVuVmlldygpIHtcbiAgICByZXR1cm4gRGF0ZXRpbWVSdW5WaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgRGF0ZXRpbWVSdW5WaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcImRhdGV0aW1lXCI7XG5cbiAgRGF0ZXRpbWVSdW5WaWV3LnByb3RvdHlwZS5pMThuID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCA9IHtcbiAgICAgIHllYXI6IHQoXCJEYXRldGltZVJ1blZpZXcubGFiZWwueWVhclwiKSxcbiAgICAgIG1vbnRoOiB0KFwiRGF0ZXRpbWVSdW5WaWV3LmxhYmVsLm1vbnRoXCIpLFxuICAgICAgZGF5OiB0KFwiRGF0ZXRpbWVSdW5WaWV3LmxhYmVsLmRheVwiKSxcbiAgICAgIHRpbWU6IHQoXCJEYXRldGltZVJ1blZpZXcubGFiZWwudGltZVwiKVxuICAgIH07XG4gIH07XG5cbiAgRGF0ZXRpbWVSdW5WaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMuaTE4bigpO1xuICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIHRoaXMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gICAgcmV0dXJuIHRoaXMuZGF0YUVudHJ5ID0gb3B0aW9ucy5kYXRhRW50cnk7XG4gIH07XG5cbiAgRGF0ZXRpbWVSdW5WaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGF0ZVRpbWUsIGRheSwgbSwgbWludXRlcywgbW9udGgsIG1vbnRocywgcHJldmlvdXMsIHRpbWUsIHllYXI7XG4gICAgZGF0ZVRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgIHllYXIgPSBkYXRlVGltZS5nZXRGdWxsWWVhcigpO1xuICAgIG1vbnRocyA9IFt0KFwiamFuXCIpLCB0KFwiZmViXCIpLCB0KFwibWFyXCIpLCB0KFwiYXByXCIpLCB0KFwibWF5XCIpLCB0KFwianVuXCIpLCB0KFwianVsXCIpLCB0KFwiYXVnXCIpLCB0KFwic2VwXCIpLCB0KFwib2N0XCIpLCB0KFwibm92XCIpLCB0KFwiZGVjXCIpXTtcbiAgICBtb250aCA9IG1vbnRoc1tkYXRlVGltZS5nZXRNb250aCgpXTtcbiAgICBkYXkgPSBkYXRlVGltZS5nZXREYXRlKCk7XG4gICAgbWludXRlcyA9IGRhdGVUaW1lLmdldE1pbnV0ZXMoKTtcbiAgICBpZiAobWludXRlcyA8IDEwKSB7XG4gICAgICBtaW51dGVzID0gXCIwXCIgKyBtaW51dGVzO1xuICAgIH1cbiAgICB0aW1lID0gZGF0ZVRpbWUuZ2V0SG91cnMoKSArIFwiOlwiICsgbWludXRlcztcbiAgICBpZiAoIXRoaXMuZGF0YUVudHJ5KSB7XG4gICAgICBwcmV2aW91cyA9IHRoaXMucGFyZW50LnBhcmVudC5yZXN1bHQuZ2V0QnlIYXNoKHRoaXMubW9kZWwuZ2V0KCdoYXNoJykpO1xuICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgIHllYXIgPSBwcmV2aW91cy55ZWFyO1xuICAgICAgICBtb250aCA9IHByZXZpb3VzLm1vbnRoO1xuICAgICAgICBkYXkgPSBwcmV2aW91cy5kYXk7XG4gICAgICAgIHRpbWUgPSBwcmV2aW91cy50aW1lO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLiRlbC5odG1sKFwiPGRpdiBjbGFzcz0ncXVlc3Rpb24nPiA8dGFibGU+IDx0cj4gPHRkPjxsYWJlbCBmb3I9J3llYXInPlwiICsgdGhpcy50ZXh0LnllYXIgKyBcIjwvbGFiZWw+PGlucHV0IGlkPSd5ZWFyJyB2YWx1ZT0nXCIgKyB5ZWFyICsgXCInPjwvdGQ+IDx0ZD4gPGxhYmVsIGZvcj0nbW9udGgnPlwiICsgdGhpcy50ZXh0Lm1vbnRoICsgXCI8L2xhYmVsPjxicj4gPHNlbGVjdCBpZD0nbW9udGgnIHZhbHVlPSdcIiArIG1vbnRoICsgXCInPlwiICsgKCgoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgbGVuLCByZXN1bHRzO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gbW9udGhzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIG0gPSBtb250aHNbaV07XG4gICAgICAgIHJlc3VsdHMucHVzaChcIjxvcHRpb24gdmFsdWU9J1wiICsgbSArIFwiJyBcIiArICgobSA9PT0gbW9udGggPyBcInNlbGVjdGVkPSdzZWxlY3RlZCdcIiA6IHZvaWQgMCkgfHwgJycpICsgXCI+XCIgKyAobS50aXRsZWl6ZSgpKSArIFwiIDwvb3B0aW9uPlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pKCkpLmpvaW4oJycpKSArIFwiPC9zZWxlY3Q+IDwvdGQ+IDx0ZD48bGFiZWwgZm9yPSdkYXknPlwiICsgdGhpcy50ZXh0LmRheSArIFwiPC9sYWJlbD48aW5wdXQgaWQ9J2RheScgdHlwZT0nZGF5JyB2YWx1ZT0nXCIgKyBkYXkgKyBcIic+PC90ZD4gPC90cj4gPHRyPiA8dGQ+PGxhYmVsIGZvcj0ndGltZSc+XCIgKyB0aGlzLnRleHQudGltZSArIFwiPC9sYWJlbD48YnI+PGlucHV0IHR5cGU9J3RleHQnIGlkPSd0aW1lJyB2YWx1ZT0nXCIgKyB0aW1lICsgXCInPjwvdGQ+IDwvdHI+IDwvdGFibGU+IDwvZGl2PlwiKTtcbiAgICB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVhZHlcIik7XG4gIH07XG5cbiAgRGF0ZXRpbWVSdW5WaWV3LnByb3RvdHlwZS5nZXRSZXN1bHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCJ5ZWFyXCI6IHRoaXMuJGVsLmZpbmQoXCIjeWVhclwiKS52YWwoKSxcbiAgICAgIFwibW9udGhcIjogdGhpcy4kZWwuZmluZChcIiNtb250aFwiKS52YWwoKSxcbiAgICAgIFwiZGF5XCI6IHRoaXMuJGVsLmZpbmQoXCIjZGF5XCIpLnZhbCgpLFxuICAgICAgXCJ0aW1lXCI6IHRoaXMuJGVsLmZpbmQoXCIjdGltZVwiKS52YWwoKVxuICAgIH07XG4gIH07XG5cbiAgRGF0ZXRpbWVSdW5WaWV3LnByb3RvdHlwZS5nZXRTa2lwcGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFwieWVhclwiOiBcInNraXBwZWRcIixcbiAgICAgIFwibW9udGhcIjogXCJza2lwcGVkXCIsXG4gICAgICBcImRheVwiOiBcInNraXBwZWRcIixcbiAgICAgIFwidGltZVwiOiBcInNraXBwZWRcIlxuICAgIH07XG4gIH07XG5cbiAgRGF0ZXRpbWVSdW5WaWV3LnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgRGF0ZXRpbWVSdW5WaWV3LnByb3RvdHlwZS5zaG93RXJyb3JzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgRGF0ZXRpbWVSdW5WaWV3LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5sb2coXCJuZXh0ISFcIik7XG4gICAgdGhpcy5wcm90b3R5cGVWaWV3Lm9uKFwiY2xpY2sgLm5leHRcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiY2xpY2ttZSFcIik7XG4gICAgICAgIHJldHVybiBfdGhpcy5uZXh0KCk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQubmV4dCgpO1xuICB9O1xuXG4gIERhdGV0aW1lUnVuVmlldy5wcm90b3R5cGUuYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudC5iYWNrKCk7XG4gIH07XG5cbiAgcmV0dXJuIERhdGV0aW1lUnVuVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIERhdGV0aW1lRWRpdFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJEYXRldGltZUVkaXRWaWV3XCJcblxuICBpbml0aWFsaXplOiAoIG9wdGlvbnMgKSAtPlxuICAgIEBtb2RlbCA9IG9wdGlvbnMubW9kZWxcbiAgICBAcGFyZW50ID0gb3B0aW9ucy5wYXJlbnRcblxuICBzYXZlOiAtPiAjZG8gbm90aGluZ1xuICBcbiAgaXNWYWxpZDogLT4gdHJ1ZSIsInZhciBEYXRldGltZUVkaXRWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuRGF0ZXRpbWVFZGl0VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChEYXRldGltZUVkaXRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBEYXRldGltZUVkaXRWaWV3KCkge1xuICAgIHJldHVybiBEYXRldGltZUVkaXRWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgRGF0ZXRpbWVFZGl0Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJEYXRldGltZUVkaXRWaWV3XCI7XG5cbiAgRGF0ZXRpbWVFZGl0Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgfTtcblxuICBEYXRldGltZUVkaXRWaWV3LnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24oKSB7fTtcblxuICBEYXRldGltZUVkaXRWaWV3LnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgcmV0dXJuIERhdGV0aW1lRWRpdFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBMb2NhdGlvblJ1blZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcIkxvY2F0aW9uUnVuVmlld1wiXG5cbiAgZXZlbnRzOlxuICAgIFwiY2xpY2sgLmNsZWFyXCIgOiBcImNsZWFySW5wdXRzXCJcbiAgICBcImNoYW5nZSBzZWxlY3RcIiA6IFwib25TZWxlY3RDaGFuZ2VcIlxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuXG4gICAgQG1vZGVsICA9IEBvcHRpb25zLm1vZGVsXG4gICAgQHBhcmVudCA9IEBvcHRpb25zLnBhcmVudFxuXG4gICAgQGxpbWl0ICA9IEBvcHRpb25zLmxpbWl0XG5cbiAgICBAbGV2ZWxzICAgICAgID0gQG1vZGVsLmdldChcImxldmVsc1wiKSAgICAgICAgICB8fCBbXVxuICAgIEBsb2NhdGlvbkNvbHMgPSBAbW9kZWwuZ2V0KFwibG9jYXRpb25Db2xzXCIpICAgIHx8IFtdXG4gICAgQGxvY2F0aW9ucyAgICA9IEBtb2RlbC5nZXQoXCJsb2NhdGlvbnNcIikgICAgICAgfHwgW11cblxuICAgIEBzZWxlY3RlZExvY2F0aW9uID0gW11cblxuICAgIEBsZXZlbHMgPSBAbGV2ZWxzLnNsaWNlKDAsIEBsaW1pdCkgaWYgQGxpbWl0P1xuXG4gICAgaWYgQGxldmVscy5sZW5ndGggPT0gMSAmJiBAbGV2ZWxzWzBdID09IFwiXCJcbiAgICAgIEBsZXZlbHMgPSBbXVxuICAgIGlmIEBsb2NhdGlvbkNvbHMubGVuZ3RoID09IDEgJiYgQGxvY2F0aW9uQ29sc1swXSA9PSBcIlwiXG4gICAgICBAbG9jYXRpb25Db2xzID0gW11cbiAgICBpZiBAbG9jYXRpb25zLmxlbmd0aCA9PSAxICYmIEBsb2NhdGlvbnNbMF0gPT0gXCJcIlxuICAgICAgQGxvY2F0aW9ucyA9IFtdXG5cbiAgICBAbGV2ZWxDb2xNYXAgPSBbXVxuICAgIGZvciBsZXZlbCwgaSBpbiBAbGV2ZWxzXG4gICAgICBAbGV2ZWxDb2xNYXBbaV0gPSBfLmluZGV4T2YgQGxvY2F0aW9uQ29scywgbGV2ZWxcbiAgICBAbGV2ZWxDb2xNYXAgPSBAbGV2ZWxDb2xNYXAuc2xpY2UoMCwgQGxpbWl0KSBpZiBAbGltaXQ/XG5cbiAgY2xlYXJJbnB1dHM6IC0+XG4gICAgQHJlc2V0U2VsZWN0cygwKVxuICAgIFwiXCJcblxuICByZXNldFNlbGVjdHM6IChpbmRleCkgLT5cbiAgICBmb3IgaSBpbiBbaW5kZXguLkBsZXZlbHMubGVuZ3RoLTFdXG4gICAgICBAJGVsLmZpbmQoXCIjbGV2ZWxfI3tpfVwiKS5odG1sID0gXCI8b3B0aW9uIHNlbGVjdGVkPSdzZWxlY3RlZCcgdmFsdWU9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz5QbGVhc2Ugc2VsZWN0IGEgI3tAbGV2ZWxzW2ldfTwvb3B0aW9uPlwiXG4gICAgICBAJGVsLmZpbmQoXCIjbGV2ZWxfI3tpfVwiKS52YWwoXCJcIilcbiAgICAgIGlmIGkgaXNudCAwIHRoZW4gQCRlbC5maW5kKFwiI2xldmVsXyN7aX1cIikuYXR0cihcImRpc2FibGVkXCIsIHRydWUpXG5cblxuICByZW5kZXI6IC0+XG4gICAgQCRlbC5odG1sIFwiPGRpdiBjbGFzcz0nbG9jLWNvbnRhaW5lcic+PC9kaXY+XCJcbiAgICBAbG9jVmlldyA9IG5ldyBMb2NWaWV3XG4gICAgQGxvY1ZpZXcuc2V0RWxlbWVudCBAJGVsLmZpbmQoXCIubG9jLWNvbnRhaW5lclwiKVxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuICAgIEB0cmlnZ2VyIFwicmVhZHlcIlxuXG5cbiAgb25TZWxlY3RDaGFuZ2U6IChldmVudCkgLT5cbiAgICBAdHJpZ2dlciBcInNlbGVjdC1jaGFuZ2VcIlxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICBsZXZlbENoYW5nZWQgPSBwYXJzZUludCgkdGFyZ2V0LmF0dHIoXCJkYXRhLWxldmVsXCIpKVxuICAgIG5ld1ZhbHVlID0gJHRhcmdldC52YWwoKVxuICAgIG5leHRMZXZlbCA9IGxldmVsQ2hhbmdlZCArIDFcbiAgICBpZiBsZXZlbENoYW5nZWQgaXNudCBAbGV2ZWxzLmxlbmd0aC0xXG4gICAgICBAcmVzZXRTZWxlY3RzKG5leHRMZXZlbCsxKVxuICAgICAgQCRlbC5maW5kKFwiI2xldmVsXyN7bmV4dExldmVsfVwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAgIEAkZWwuZmluZChcIiNsZXZlbF8je25leHRMZXZlbH1cIikuaHRtbCBAZ2V0T3B0aW9ucyhuZXh0TGV2ZWwpXG4gICAgICBAc2VsZWN0ZWRMb2NhdGlvbiA9IFtdXG4gICAgZWxzZVxuICAgICAgbGV2ZWxWYWxzID0gW11cbiAgICAgIGZvciBsZXZlbCwgaSBpbiBAbGV2ZWxzXG4gICAgICAgIGxldmVsVmFscy5wdXNoIEAkZWwuZmluZChcIiNsZXZlbF8je2l9XCIpLnZhbCgpXG5cbiAgICAgIG1hdGNoQ291bnQgPSAwXG4gICAgICBleHBlY3RlZENvdW50ID0gbGV2ZWxWYWxzLmxlbmd0aFxuICAgICAgbGV2ZWxDb2xNYXAgPSBAbGV2ZWxDb2xNYXBcbiAgICAgIEBzZWxlY3RlZExvY2F0aW9uID0gXy5maW5kKEBsb2NhdGlvbnMsIChhcnIpIC0+XG4gICAgICAgIG1hdGNoQ291bnQgPSAwXG4gICAgICAgIGZvciBsZXZlbCwgaSBpbiBsZXZlbFZhbHNcbiAgICAgICAgICBpZiBhcnJbbGV2ZWxDb2xNYXBbaV1dIGlzIGxldmVsVmFsc1tpXSB0aGVuIG1hdGNoQ291bnQgKz0gMVxuICAgICAgICByZXR1cm4gbWF0Y2hDb3VudCA9PSBleHBlY3RlZENvdW50XG4gICAgICApXG4gICAgXCJcIlxuXG5cbiAgZ2V0T3B0aW9uczogKGluZGV4KS0+XG5cbiAgICB0YXJnZXRJbmRleCA9IEBsZXZlbENvbE1hcFtpbmRleF1cblxuICAgIGRvbmVPcHRpb25zID0gW11cbiAgICBjdXJyZW50T3B0aW9ucyA9IFtdXG4gICAgbGV2ZWxPcHRpb25zID0gJydcblxuICAgIHBhcmVudFZhbHVlcyA9IFtdXG4gICAgZm9yIGkgaW4gWzAuLmluZGV4XVxuICAgICAgYnJlYWsgaWYgaSBpcyBpbmRleFxuICAgICAgcGFyZW50VmFsdWVzLnB1c2ggQCRlbC5maW5kKFwiI2xldmVsXyN7aX1cIikudmFsKClcblxuICAgIGZvciBsb2NhdGlvbiwgaSBpbiBAbG9jYXRpb25zXG5cbiAgICAgIHVubGVzcyB+ZG9uZU9wdGlvbnMuaW5kZXhPZiBsb2NhdGlvblt0YXJnZXRJbmRleF1cblxuICAgICAgICBpc05vdENoaWxkID0gaW5kZXggaXMgMFxuICAgICAgICBpc1ZhbGlkQ2hpbGQgPSB0cnVlXG4gICAgICAgIGZvciBpIGluIFswLi5NYXRoLm1heChpbmRleC0xLDApXVxuXG4gICAgICAgICAgaWYgcGFyZW50VmFsdWVzW2ldIGlzbnQgbG9jYXRpb25bQGxldmVsQ29sTWFwW2ldXVxuICAgICAgICAgICAgaXNWYWxpZENoaWxkID0gZmFsc2VcbiAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgaWYgaXNOb3RDaGlsZCBvciBpc1ZhbGlkQ2hpbGRcblxuICAgICAgICAgIGRvbmVPcHRpb25zLnB1c2ggbG9jYXRpb25bdGFyZ2V0SW5kZXhdXG4gICAgICAgICAgY3VycmVudE9wdGlvbnMucHVzaCBfKGxvY2F0aW9uW3RhcmdldEluZGV4XSkuZXNjYXBlKClcblxuICAgIGZvciBsb2NhdGlvbk5hbWUgaW4gXy5zb3J0QnkoY3VycmVudE9wdGlvbnMsIChlbCkgLT4gcmV0dXJuIGVsKVxuICAgICAgbGV2ZWxPcHRpb25zICs9IFwiXG4gICAgICAgIDxvcHRpb24gdmFsdWU9JyN7bG9jYXRpb25OYW1lfSc+I3tsb2NhdGlvbk5hbWV9PC9vcHRpb24+XG4gICAgICBcIlxuXG4gICAgcmV0dXJuIFwiXG4gICAgICA8b3B0aW9uIHNlbGVjdGVkPSdzZWxlY3RlZCcgdmFsdWU9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz5QbGVhc2Ugc2VsZWN0IGEgI3tAbGV2ZWxzW2luZGV4XX08L29wdGlvbj5cbiAgICBcIiArIGxldmVsT3B0aW9uc1xuXG5cblxuICBnZXRSZXN1bHQ6IChmaWx0ZXJlZCA9IGZhbHNlKS0+XG4gICAgcmVzdWx0ID1cbiAgICAgIGxhYmVscyAgIDogW11cbiAgICAgIGxvY2F0aW9uIDogW11cbiAgICB2YWx1ZXMgPSBAbG9jVmlldy52YWx1ZSgpXG4gICAgcmVzdWx0LmxhYmVscyAgID0gT2JqZWN0LmtleXMgdmFsdWVzXG4gICAgcmVzdWx0LmxvY2F0aW9uID0gcmVzdWx0LmxhYmVscy5tYXAgKGVsKSAtPiB2YWx1ZXNbZWxdXG4gICAgcmV0dXJuIHJlc3VsdFxuXG4gIGdldFNraXBwZWQ6IC0+XG4gICAgcmV0dXJuIHtcbiAgICAgIFwibGFiZWxzXCIgICA6IChjb2x1bW4ucmVwbGFjZSgvW1xccy1dL2csXCJfXCIpIGZvciBjb2x1bW4gaW4gQGxvY2F0aW9uQ29scylcbiAgICAgIFwibG9jYXRpb25cIiA6IChcInNraXBwZWRcIiBmb3IgbG9jYXRpb25Db2xzIGluIEBsb2NhdGlvbkNvbHMpXG4gICAgfVxuXG5cbiAgaXNWYWxpZDogLT5cbiAgICBAJGVsLmZpbmQoXCIubWVzc2FnZVwiKS5yZW1vdmUoKVxuICAgIHNlbGVjdHMgPSBAJGVsLmZpbmQoXCJzZWxlY3RcIilcbiAgICBmb3IgaW5wdXQsIGkgaW4gc2VsZWN0c1xuICAgICAgcmV0dXJuIGZhbHNlIGlmIF8oJChpbnB1dCkudmFsKCkpLmlzRW1wdHlTdHJpbmcoKVxuXG4gICAgcmV0dXJuIGZhbHNlIGlmIEBzZWxlY3RlZExvY2F0aW9uID09IFtdXG4gICAgdHJ1ZVxuXG4gIHNob3dFcnJvcnM6IC0+XG4gICAgc2VsZWN0cyA9IEAkZWwuZmluZChcInNlbGVjdFwiKVxuICAgIGZvciBpbnB1dCBpbiBzZWxlY3RzXG4gICAgICBpZiBfKCQoaW5wdXQpLnZhbCgpKS5pc0VtcHR5U3RyaW5nKClcbiAgICAgICAgJChpbnB1dCkuYWZ0ZXIgXCIgPHNwYW4gY2xhc3M9J21lc3NhZ2UnPiN7JCgnbGFiZWxbZm9yPScrJChpbnB1dCkuYXR0cignaWQnKSsnXScpLnRleHQoKX0gbXVzdCBiZSBmaWxsZWQuPC9zcGFuPlwiXG5cbiAgb25DbG9zZTogLT5cbiAgICBAbG9jVmlldy5yZW1vdmUoKVxuXG4gIGdldFN1bTogLT5cbiAgICBjb3VudHMgPVxuICAgICAgY29ycmVjdCAgIDogMFxuICAgICAgaW5jb3JyZWN0IDogMFxuICAgICAgbWlzc2luZyAgIDogMFxuICAgICAgdG90YWwgICAgIDogMFxuICAgICAgXG4gICAgZm9yIGlucHV0IGluIEAkZWwuZmluZChcImlucHV0XCIpXG4gICAgICAkaW5wdXQgPSAkKGlucHV0KVxuICAgICAgY291bnRzWydjb3JyZWN0J10gICArPSAxIGlmICgkaW5wdXQudmFsKCl8fFwiXCIpICE9IFwiXCJcbiAgICAgIGNvdW50c1snaW5jb3JyZWN0J10gKz0gMCBpZiBmYWxzZVxuICAgICAgY291bnRzWydtaXNzaW5nJ10gICArPSAxIGlmICgkaW5wdXQudmFsKCl8fFwiXCIpID09IFwiXCJcbiAgICAgIGNvdW50c1sndG90YWwnXSAgICAgKz0gMSBpZiB0cnVlXG5cbiAgICByZXR1cm4ge1xuICAgICAgY29ycmVjdCAgIDogY291bnRzWydjb3JyZWN0J11cbiAgICAgIGluY29ycmVjdCA6IGNvdW50c1snaW5jb3JyZWN0J11cbiAgICAgIG1pc3NpbmcgICA6IGNvdW50c1snbWlzc2luZyddXG4gICAgICB0b3RhbCAgICAgOiBjb3VudHNbJ3RvdGFsJ11cbiAgICB9XG4iLCJ2YXIgTG9jYXRpb25SdW5WaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuTG9jYXRpb25SdW5WaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKExvY2F0aW9uUnVuVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gTG9jYXRpb25SdW5WaWV3KCkge1xuICAgIHJldHVybiBMb2NhdGlvblJ1blZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBMb2NhdGlvblJ1blZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiTG9jYXRpb25SdW5WaWV3XCI7XG5cbiAgTG9jYXRpb25SdW5WaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgXCJjbGljayAuY2xlYXJcIjogXCJjbGVhcklucHV0c1wiLFxuICAgIFwiY2hhbmdlIHNlbGVjdFwiOiBcIm9uU2VsZWN0Q2hhbmdlXCJcbiAgfTtcblxuICBMb2NhdGlvblJ1blZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGksIGosIGxlbiwgbGV2ZWwsIHJlZjtcbiAgICB0aGlzLm1vZGVsID0gdGhpcy5vcHRpb25zLm1vZGVsO1xuICAgIHRoaXMucGFyZW50ID0gdGhpcy5vcHRpb25zLnBhcmVudDtcbiAgICB0aGlzLmxpbWl0ID0gdGhpcy5vcHRpb25zLmxpbWl0O1xuICAgIHRoaXMubGV2ZWxzID0gdGhpcy5tb2RlbC5nZXQoXCJsZXZlbHNcIikgfHwgW107XG4gICAgdGhpcy5sb2NhdGlvbkNvbHMgPSB0aGlzLm1vZGVsLmdldChcImxvY2F0aW9uQ29sc1wiKSB8fCBbXTtcbiAgICB0aGlzLmxvY2F0aW9ucyA9IHRoaXMubW9kZWwuZ2V0KFwibG9jYXRpb25zXCIpIHx8IFtdO1xuICAgIHRoaXMuc2VsZWN0ZWRMb2NhdGlvbiA9IFtdO1xuICAgIGlmICh0aGlzLmxpbWl0ICE9IG51bGwpIHtcbiAgICAgIHRoaXMubGV2ZWxzID0gdGhpcy5sZXZlbHMuc2xpY2UoMCwgdGhpcy5saW1pdCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmxldmVscy5sZW5ndGggPT09IDEgJiYgdGhpcy5sZXZlbHNbMF0gPT09IFwiXCIpIHtcbiAgICAgIHRoaXMubGV2ZWxzID0gW107XG4gICAgfVxuICAgIGlmICh0aGlzLmxvY2F0aW9uQ29scy5sZW5ndGggPT09IDEgJiYgdGhpcy5sb2NhdGlvbkNvbHNbMF0gPT09IFwiXCIpIHtcbiAgICAgIHRoaXMubG9jYXRpb25Db2xzID0gW107XG4gICAgfVxuICAgIGlmICh0aGlzLmxvY2F0aW9ucy5sZW5ndGggPT09IDEgJiYgdGhpcy5sb2NhdGlvbnNbMF0gPT09IFwiXCIpIHtcbiAgICAgIHRoaXMubG9jYXRpb25zID0gW107XG4gICAgfVxuICAgIHRoaXMubGV2ZWxDb2xNYXAgPSBbXTtcbiAgICByZWYgPSB0aGlzLmxldmVscztcbiAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgbGV2ZWwgPSByZWZbaV07XG4gICAgICB0aGlzLmxldmVsQ29sTWFwW2ldID0gXy5pbmRleE9mKHRoaXMubG9jYXRpb25Db2xzLCBsZXZlbCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmxpbWl0ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLmxldmVsQ29sTWFwID0gdGhpcy5sZXZlbENvbE1hcC5zbGljZSgwLCB0aGlzLmxpbWl0KTtcbiAgICB9XG4gIH07XG5cbiAgTG9jYXRpb25SdW5WaWV3LnByb3RvdHlwZS5jbGVhcklucHV0cyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVzZXRTZWxlY3RzKDApO1xuICAgIHJldHVybiBcIlwiO1xuICB9O1xuXG4gIExvY2F0aW9uUnVuVmlldy5wcm90b3R5cGUucmVzZXRTZWxlY3RzID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICB2YXIgaSwgaiwgcmVmLCByZWYxLCByZXN1bHRzO1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGkgPSBqID0gcmVmID0gaW5kZXgsIHJlZjEgPSB0aGlzLmxldmVscy5sZW5ndGggLSAxOyByZWYgPD0gcmVmMSA/IGogPD0gcmVmMSA6IGogPj0gcmVmMTsgaSA9IHJlZiA8PSByZWYxID8gKytqIDogLS1qKSB7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiI2xldmVsX1wiICsgaSkuaHRtbCA9IFwiPG9wdGlvbiBzZWxlY3RlZD0nc2VsZWN0ZWQnIHZhbHVlPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+UGxlYXNlIHNlbGVjdCBhIFwiICsgdGhpcy5sZXZlbHNbaV0gKyBcIjwvb3B0aW9uPlwiO1xuICAgICAgdGhpcy4kZWwuZmluZChcIiNsZXZlbF9cIiArIGkpLnZhbChcIlwiKTtcbiAgICAgIGlmIChpICE9PSAwKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaCh0aGlzLiRlbC5maW5kKFwiI2xldmVsX1wiICsgaSkuYXR0cihcImRpc2FibGVkXCIsIHRydWUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdHMucHVzaCh2b2lkIDApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBMb2NhdGlvblJ1blZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGVsLmh0bWwoXCI8ZGl2IGNsYXNzPSdsb2MtY29udGFpbmVyJz48L2Rpdj5cIik7XG4gICAgdGhpcy5sb2NWaWV3ID0gbmV3IExvY1ZpZXc7XG4gICAgdGhpcy5sb2NWaWV3LnNldEVsZW1lbnQodGhpcy4kZWwuZmluZChcIi5sb2MtY29udGFpbmVyXCIpKTtcbiAgICB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVhZHlcIik7XG4gIH07XG5cbiAgTG9jYXRpb25SdW5WaWV3LnByb3RvdHlwZS5vblNlbGVjdENoYW5nZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIGV4cGVjdGVkQ291bnQsIGksIGosIGxlbiwgbGV2ZWwsIGxldmVsQ2hhbmdlZCwgbGV2ZWxDb2xNYXAsIGxldmVsVmFscywgbWF0Y2hDb3VudCwgbmV3VmFsdWUsIG5leHRMZXZlbCwgcmVmO1xuICAgIHRoaXMudHJpZ2dlcihcInNlbGVjdC1jaGFuZ2VcIik7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICBsZXZlbENoYW5nZWQgPSBwYXJzZUludCgkdGFyZ2V0LmF0dHIoXCJkYXRhLWxldmVsXCIpKTtcbiAgICBuZXdWYWx1ZSA9ICR0YXJnZXQudmFsKCk7XG4gICAgbmV4dExldmVsID0gbGV2ZWxDaGFuZ2VkICsgMTtcbiAgICBpZiAobGV2ZWxDaGFuZ2VkICE9PSB0aGlzLmxldmVscy5sZW5ndGggLSAxKSB7XG4gICAgICB0aGlzLnJlc2V0U2VsZWN0cyhuZXh0TGV2ZWwgKyAxKTtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIjbGV2ZWxfXCIgKyBuZXh0TGV2ZWwpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIjbGV2ZWxfXCIgKyBuZXh0TGV2ZWwpLmh0bWwodGhpcy5nZXRPcHRpb25zKG5leHRMZXZlbCkpO1xuICAgICAgdGhpcy5zZWxlY3RlZExvY2F0aW9uID0gW107XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldmVsVmFscyA9IFtdO1xuICAgICAgcmVmID0gdGhpcy5sZXZlbHM7XG4gICAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICBsZXZlbCA9IHJlZltpXTtcbiAgICAgICAgbGV2ZWxWYWxzLnB1c2godGhpcy4kZWwuZmluZChcIiNsZXZlbF9cIiArIGkpLnZhbCgpKTtcbiAgICAgIH1cbiAgICAgIG1hdGNoQ291bnQgPSAwO1xuICAgICAgZXhwZWN0ZWRDb3VudCA9IGxldmVsVmFscy5sZW5ndGg7XG4gICAgICBsZXZlbENvbE1hcCA9IHRoaXMubGV2ZWxDb2xNYXA7XG4gICAgICB0aGlzLnNlbGVjdGVkTG9jYXRpb24gPSBfLmZpbmQodGhpcy5sb2NhdGlvbnMsIGZ1bmN0aW9uKGFycikge1xuICAgICAgICB2YXIgaywgbGVuMTtcbiAgICAgICAgbWF0Y2hDb3VudCA9IDA7XG4gICAgICAgIGZvciAoaSA9IGsgPSAwLCBsZW4xID0gbGV2ZWxWYWxzLmxlbmd0aDsgayA8IGxlbjE7IGkgPSArK2spIHtcbiAgICAgICAgICBsZXZlbCA9IGxldmVsVmFsc1tpXTtcbiAgICAgICAgICBpZiAoYXJyW2xldmVsQ29sTWFwW2ldXSA9PT0gbGV2ZWxWYWxzW2ldKSB7XG4gICAgICAgICAgICBtYXRjaENvdW50ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXRjaENvdW50ID09PSBleHBlY3RlZENvdW50O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBcIlwiO1xuICB9O1xuXG4gIExvY2F0aW9uUnVuVmlldy5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgdmFyIGN1cnJlbnRPcHRpb25zLCBkb25lT3B0aW9ucywgaSwgaXNOb3RDaGlsZCwgaXNWYWxpZENoaWxkLCBqLCBrLCBsLCBsZW4sIGxlbjEsIGxldmVsT3B0aW9ucywgbG9jYXRpb24sIGxvY2F0aW9uTmFtZSwgbSwgcGFyZW50VmFsdWVzLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHRhcmdldEluZGV4O1xuICAgIHRhcmdldEluZGV4ID0gdGhpcy5sZXZlbENvbE1hcFtpbmRleF07XG4gICAgZG9uZU9wdGlvbnMgPSBbXTtcbiAgICBjdXJyZW50T3B0aW9ucyA9IFtdO1xuICAgIGxldmVsT3B0aW9ucyA9ICcnO1xuICAgIHBhcmVudFZhbHVlcyA9IFtdO1xuICAgIGZvciAoaSA9IGogPSAwLCByZWYgPSBpbmRleDsgMCA8PSByZWYgPyBqIDw9IHJlZiA6IGogPj0gcmVmOyBpID0gMCA8PSByZWYgPyArK2ogOiAtLWopIHtcbiAgICAgIGlmIChpID09PSBpbmRleCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHBhcmVudFZhbHVlcy5wdXNoKHRoaXMuJGVsLmZpbmQoXCIjbGV2ZWxfXCIgKyBpKS52YWwoKSk7XG4gICAgfVxuICAgIHJlZjEgPSB0aGlzLmxvY2F0aW9ucztcbiAgICBmb3IgKGkgPSBrID0gMCwgbGVuID0gcmVmMS5sZW5ndGg7IGsgPCBsZW47IGkgPSArK2spIHtcbiAgICAgIGxvY2F0aW9uID0gcmVmMVtpXTtcbiAgICAgIGlmICghfmRvbmVPcHRpb25zLmluZGV4T2YobG9jYXRpb25bdGFyZ2V0SW5kZXhdKSkge1xuICAgICAgICBpc05vdENoaWxkID0gaW5kZXggPT09IDA7XG4gICAgICAgIGlzVmFsaWRDaGlsZCA9IHRydWU7XG4gICAgICAgIGZvciAoaSA9IGwgPSAwLCByZWYyID0gTWF0aC5tYXgoaW5kZXggLSAxLCAwKTsgMCA8PSByZWYyID8gbCA8PSByZWYyIDogbCA+PSByZWYyOyBpID0gMCA8PSByZWYyID8gKytsIDogLS1sKSB7XG4gICAgICAgICAgaWYgKHBhcmVudFZhbHVlc1tpXSAhPT0gbG9jYXRpb25bdGhpcy5sZXZlbENvbE1hcFtpXV0pIHtcbiAgICAgICAgICAgIGlzVmFsaWRDaGlsZCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc05vdENoaWxkIHx8IGlzVmFsaWRDaGlsZCkge1xuICAgICAgICAgIGRvbmVPcHRpb25zLnB1c2gobG9jYXRpb25bdGFyZ2V0SW5kZXhdKTtcbiAgICAgICAgICBjdXJyZW50T3B0aW9ucy5wdXNoKF8obG9jYXRpb25bdGFyZ2V0SW5kZXhdKS5lc2NhcGUoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmVmMyA9IF8uc29ydEJ5KGN1cnJlbnRPcHRpb25zLCBmdW5jdGlvbihlbCkge1xuICAgICAgcmV0dXJuIGVsO1xuICAgIH0pO1xuICAgIGZvciAobSA9IDAsIGxlbjEgPSByZWYzLmxlbmd0aDsgbSA8IGxlbjE7IG0rKykge1xuICAgICAgbG9jYXRpb25OYW1lID0gcmVmM1ttXTtcbiAgICAgIGxldmVsT3B0aW9ucyArPSBcIjxvcHRpb24gdmFsdWU9J1wiICsgbG9jYXRpb25OYW1lICsgXCInPlwiICsgbG9jYXRpb25OYW1lICsgXCI8L29wdGlvbj5cIjtcbiAgICB9XG4gICAgcmV0dXJuIChcIjxvcHRpb24gc2VsZWN0ZWQ9J3NlbGVjdGVkJyB2YWx1ZT0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPlBsZWFzZSBzZWxlY3QgYSBcIiArIHRoaXMubGV2ZWxzW2luZGV4XSArIFwiPC9vcHRpb24+XCIpICsgbGV2ZWxPcHRpb25zO1xuICB9O1xuXG4gIExvY2F0aW9uUnVuVmlldy5wcm90b3R5cGUuZ2V0UmVzdWx0ID0gZnVuY3Rpb24oZmlsdGVyZWQpIHtcbiAgICB2YXIgcmVzdWx0LCB2YWx1ZXM7XG4gICAgaWYgKGZpbHRlcmVkID09IG51bGwpIHtcbiAgICAgIGZpbHRlcmVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJlc3VsdCA9IHtcbiAgICAgIGxhYmVsczogW10sXG4gICAgICBsb2NhdGlvbjogW11cbiAgICB9O1xuICAgIHZhbHVlcyA9IHRoaXMubG9jVmlldy52YWx1ZSgpO1xuICAgIHJlc3VsdC5sYWJlbHMgPSBPYmplY3Qua2V5cyh2YWx1ZXMpO1xuICAgIHJlc3VsdC5sb2NhdGlvbiA9IHJlc3VsdC5sYWJlbHMubWFwKGZ1bmN0aW9uKGVsKSB7XG4gICAgICByZXR1cm4gdmFsdWVzW2VsXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIExvY2F0aW9uUnVuVmlldy5wcm90b3R5cGUuZ2V0U2tpcHBlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb2x1bW4sIGxvY2F0aW9uQ29scztcbiAgICByZXR1cm4ge1xuICAgICAgXCJsYWJlbHNcIjogKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaiwgbGVuLCByZWYsIHJlc3VsdHM7XG4gICAgICAgIHJlZiA9IHRoaXMubG9jYXRpb25Db2xzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGNvbHVtbiA9IHJlZltqXTtcbiAgICAgICAgICByZXN1bHRzLnB1c2goY29sdW1uLnJlcGxhY2UoL1tcXHMtXS9nLCBcIl9cIikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSkuY2FsbCh0aGlzKSxcbiAgICAgIFwibG9jYXRpb25cIjogKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaiwgbGVuLCByZWYsIHJlc3VsdHM7XG4gICAgICAgIHJlZiA9IHRoaXMubG9jYXRpb25Db2xzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGxvY2F0aW9uQ29scyA9IHJlZltqXTtcbiAgICAgICAgICByZXN1bHRzLnB1c2goXCJza2lwcGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSkuY2FsbCh0aGlzKVxuICAgIH07XG4gIH07XG5cbiAgTG9jYXRpb25SdW5WaWV3LnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGlucHV0LCBqLCBsZW4sIHNlbGVjdHM7XG4gICAgdGhpcy4kZWwuZmluZChcIi5tZXNzYWdlXCIpLnJlbW92ZSgpO1xuICAgIHNlbGVjdHMgPSB0aGlzLiRlbC5maW5kKFwic2VsZWN0XCIpO1xuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSBzZWxlY3RzLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgaW5wdXQgPSBzZWxlY3RzW2ldO1xuICAgICAgaWYgKF8oJChpbnB1dCkudmFsKCkpLmlzRW1wdHlTdHJpbmcoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLnNlbGVjdGVkTG9jYXRpb24gPT09IFtdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIExvY2F0aW9uUnVuVmlldy5wcm90b3R5cGUuc2hvd0Vycm9ycyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbnB1dCwgaiwgbGVuLCByZXN1bHRzLCBzZWxlY3RzO1xuICAgIHNlbGVjdHMgPSB0aGlzLiRlbC5maW5kKFwic2VsZWN0XCIpO1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGogPSAwLCBsZW4gPSBzZWxlY3RzLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICBpbnB1dCA9IHNlbGVjdHNbal07XG4gICAgICBpZiAoXygkKGlucHV0KS52YWwoKSkuaXNFbXB0eVN0cmluZygpKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaCgkKGlucHV0KS5hZnRlcihcIiA8c3BhbiBjbGFzcz0nbWVzc2FnZSc+XCIgKyAoJCgnbGFiZWxbZm9yPScgKyAkKGlucHV0KS5hdHRyKCdpZCcpICsgJ10nKS50ZXh0KCkpICsgXCIgbXVzdCBiZSBmaWxsZWQuPC9zcGFuPlwiKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRzLnB1c2godm9pZCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgTG9jYXRpb25SdW5WaWV3LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jVmlldy5yZW1vdmUoKTtcbiAgfTtcblxuICBMb2NhdGlvblJ1blZpZXcucHJvdG90eXBlLmdldFN1bSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkaW5wdXQsIGNvdW50cywgaW5wdXQsIGosIGxlbiwgcmVmO1xuICAgIGNvdW50cyA9IHtcbiAgICAgIGNvcnJlY3Q6IDAsXG4gICAgICBpbmNvcnJlY3Q6IDAsXG4gICAgICBtaXNzaW5nOiAwLFxuICAgICAgdG90YWw6IDBcbiAgICB9O1xuICAgIHJlZiA9IHRoaXMuJGVsLmZpbmQoXCJpbnB1dFwiKTtcbiAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIGlucHV0ID0gcmVmW2pdO1xuICAgICAgJGlucHV0ID0gJChpbnB1dCk7XG4gICAgICBpZiAoKCRpbnB1dC52YWwoKSB8fCBcIlwiKSAhPT0gXCJcIikge1xuICAgICAgICBjb3VudHNbJ2NvcnJlY3QnXSArPSAxO1xuICAgICAgfVxuICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgIGNvdW50c1snaW5jb3JyZWN0J10gKz0gMDtcbiAgICAgIH1cbiAgICAgIGlmICgoJGlucHV0LnZhbCgpIHx8IFwiXCIpID09PSBcIlwiKSB7XG4gICAgICAgIGNvdW50c1snbWlzc2luZyddICs9IDE7XG4gICAgICB9XG4gICAgICBpZiAodHJ1ZSkge1xuICAgICAgICBjb3VudHNbJ3RvdGFsJ10gKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvcnJlY3Q6IGNvdW50c1snY29ycmVjdCddLFxuICAgICAgaW5jb3JyZWN0OiBjb3VudHNbJ2luY29ycmVjdCddLFxuICAgICAgbWlzc2luZzogY291bnRzWydtaXNzaW5nJ10sXG4gICAgICB0b3RhbDogY291bnRzWyd0b3RhbCddXG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4gTG9jYXRpb25SdW5WaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgTG9jYXRpb25FZGl0VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiTG9jYXRpb25FZGl0Vmlld1wiXG5cbiAgZXZlbnRzOlxuICAgICdrZXl1cCAjZGF0YScgICAgICAgICAgICAgICA6ICd1cGRhdGVEYXRhJ1xuICAgICdrZXl1cCAjbGV2ZWxzJyAgICAgICAgICAgICA6ICd1cGRhdGVMZXZlbHMnXG4gICAgJ2NsaWNrICNkYXRhX2Zvcm1hdCBpbnB1dCcgICA6ICd1cGRhdGVEYXRhJ1xuICAgICdjbGljayAjbGV2ZWxzX2Zvcm1hdCBpbnB1dCcgOiAndXBkYXRlTGV2ZWxzJ1xuXG5cbiAgdXBkYXRlRGF0YTogKGV2ZW50KSAtPlxuICAgIGlmIGhhc1RhYnNcbiAgICAgIEAkZWwuZmluZChcIiNkYXRhX2Zvcm1hdCA6cmFkaW9bdmFsdWU9J1RhYnMnXVwiKS5hdHRyKFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIikuYnV0dG9uKFwicmVmcmVzaFwiKVxuICAgIGVsc2VcbiAgICAgIEAkZWwuZmluZChcIiNkYXRhX2Zvcm1hdCA6cmFkaW9bdmFsdWU9J0NvbW1hcyddXCIpLmF0dHIoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKS5idXR0b24oXCJyZWZyZXNoXCIpXG5cbiAgdXBkYXRlRGF0YTogKGV2ZW50KSAtPlxuICAgIGlmIGV2ZW50Py50eXBlID09IFwiY2xpY2tcIlxuICAgICAgaWYgJChldmVudC50YXJnZXQpLnZhbCgpID09IFwiVGFic1wiXG4gICAgICAgIEBkYXRhQ29tbWFUb1RhYigpXG4gICAgICAgIGhhc1RhYnMgICA9IHRydWVcbiAgICAgICAgaGFzQ29tbWFzID0gZmFsc2VcbiAgICAgIGVsc2VcbiAgICAgICAgQGRhdGFUYWJUb0NvbW1hKClcbiAgICAgICAgaGFzVGFicyAgID0gZmFsc2VcbiAgICAgICAgaGFzQ29tbWFzID0gdHJ1ZVxuXG4gICAgZWxzZVxuICAgICAgZGF0YSA9IEAkZWwuZmluZChcIiNkYXRhXCIpLnZhbCgpXG4gICAgICBoYXNUYWJzID0gZGF0YS5tYXRjaCgvXFx0L2cpP1xuICAgICAgaGFzQ29tbWFzID0gZGF0YS5tYXRjaCgvLC9nKT9cblxuICAgIGlmIGhhc1RhYnNcbiAgICAgIEAkZWwuZmluZChcIiNkYXRhX2Zvcm1hdCA6cmFkaW9bdmFsdWU9J1RhYnMnXVwiKS5hdHRyKFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIikuYnV0dG9uKFwicmVmcmVzaFwiKVxuICAgIGVsc2VcbiAgICAgIEAkZWwuZmluZChcIiNkYXRhX2Zvcm1hdCA6cmFkaW9bdmFsdWU9J0NvbW1hcyddXCIpLmF0dHIoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKS5idXR0b24oXCJyZWZyZXNoXCIpXG5cbiAgdXBkYXRlTGV2ZWxzOiAoZXZlbnQpIC0+XG4gICAgaWYgZXZlbnQ/LnR5cGUgPT0gXCJjbGlja1wiXG4gICAgICBpZiAkKGV2ZW50LnRhcmdldCkudmFsKCkgPT0gXCJUYWJzXCJcbiAgICAgICAgQGxldmVsc0NvbW1hVG9UYWIoKVxuICAgICAgICBoYXNUYWJzICAgPSB0cnVlXG4gICAgICAgIGhhc0NvbW1hcyA9IGZhbHNlXG4gICAgICBlbHNlXG4gICAgICAgIEBsZXZlbHNUYWJUb0NvbW1hKClcbiAgICAgICAgaGFzVGFicyAgID0gZmFsc2VcbiAgICAgICAgaGFzQ29tbWFzID0gdHJ1ZVxuXG4gICAgZWxzZVxuICAgICAgbGV2ZWxzICAgID0gQCRlbC5maW5kKFwiI2xldmVsc1wiKS52YWwoKVxuICAgICAgaGFzVGFicyAgID0gbGV2ZWxzLm1hdGNoKC9cXHQvZyk/XG4gICAgICBoYXNDb21tYXMgPSBsZXZlbHMubWF0Y2goLywvZyk/XG5cbiAgICBsZXZlbHMgPSBAJGVsLmZpbmQoXCIjbGV2ZWxzXCIpLnZhbCgpXG4gICAgaGFzVGFicyAgID0gbGV2ZWxzLm1hdGNoKC9cXHQvZyk/XG4gICAgaGFzQ29tbWFzID0gbGV2ZWxzLm1hdGNoKC8sL2cpP1xuICAgIGlmIGhhc1RhYnNcbiAgICAgIEAkZWwuZmluZChcIiNsZXZlbHNfZm9ybWF0IDpyYWRpb1t2YWx1ZT0nVGFicyddXCIpLmF0dHIoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKS5idXR0b24oXCJyZWZyZXNoXCIpXG4gICAgZWxzZVxuICAgICAgQCRlbC5maW5kKFwiI2xldmVsc19mb3JtYXQgOnJhZGlvW3ZhbHVlPSdDb21tYXMnXVwiKS5hdHRyKFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIikuYnV0dG9uKFwicmVmcmVzaFwiKVxuXG5cbiAgZGF0YVRhYlRvQ29tbWE6IC0+XG4gICAgQCRlbC5maW5kKFwiI2RhdGFcIikudmFsKFN0cmluZyhAJGVsLmZpbmQoXCIjZGF0YVwiKS52YWwoKSkucmVwbGFjZSgvXFx0L2csXCIsIFwiKSlcbiAgICBAJGVsLmZpbmQoXCIjbG9jYXRpb25Db2xzXCIpLnZhbChTdHJpbmcoQCRlbC5maW5kKFwiI2xvY2F0aW9uQ29sc1wiKS52YWwoKSkucmVwbGFjZSgvXFx0L2csXCIsIFwiKSlcblxuICBkYXRhQ29tbWFUb1RhYjogLT5cbiAgICBAJGVsLmZpbmQoXCIjZGF0YVwiKS52YWwoQCRlbC5maW5kKFwiI2RhdGFcIikudmFsKCkucmVwbGFjZSgvLCAqL2csIFwiXFx0XCIpKVxuICAgIEAkZWwuZmluZChcIiNsb2NhdGlvbkNvbHNcIikudmFsKEAkZWwuZmluZChcIiNsb2NhdGlvbkNvbHNcIikudmFsKCkucmVwbGFjZSgvLCAqL2csIFwiXFx0XCIpKVxuXG4gIGxldmVsc1RhYlRvQ29tbWE6IC0+IEAkZWwuZmluZChcIiNsZXZlbHNcIikudmFsKFN0cmluZyhAJGVsLmZpbmQoXCIjbGV2ZWxzXCIpLnZhbCgpKS5yZXBsYWNlKC9cXHQvZyxcIiwgXCIpKVxuICBsZXZlbHNDb21tYVRvVGFiOiAtPiBAJGVsLmZpbmQoXCIjbGV2ZWxzXCIpLnZhbChAJGVsLmZpbmQoXCIjbGV2ZWxzXCIpLnZhbCgpLnJlcGxhY2UoLywgKi9nLCBcIlxcdFwiKSlcblxuICBzYXZlOiAtPlxuICAgIGlmIEAkZWwuZmluZChcIiNkYXRhXCIpLnZhbCgpLm1hdGNoKC9cXHQvZyk/XG4gICAgICBAJGVsLmZpbmQoXCIjZGF0YV9mb3JtYXQgOnJhZGlvW3ZhbHVlPSdUYWJzJ11cIikuYXR0cihcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIpLmJ1dHRvbihcInJlZnJlc2hcIilcbiAgICAgIEBkYXRhVGFiVG9Db21tYSgpXG4gICAgaWYgQCRlbC5maW5kKFwiI2xldmVsc1wiKS52YWwoKS5tYXRjaCgvXFx0L2cpP1xuICAgICAgQGxldmVsc1RhYlRvQ29tbWEoKVxuICAgICAgQCRlbC5maW5kKFwiI2xldmVsc19mb3JtYXQgOnJhZGlvW3ZhbHVlPSdUYWJzJ11cIikuYXR0cihcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIpLmJ1dHRvbihcInJlZnJlc2hcIilcblxuICAgIGxldmVscyA9IEAkZWwuZmluZChcIiNsZXZlbHNcIikudmFsKCkuc3BsaXQoLywgKi9nKVxuICAgIGZvciBsZXZlbCwgaSBpbiBsZXZlbHNcbiAgICAgIGxldmVsc1tpXSA9ICQudHJpbShsZXZlbCkucmVwbGFjZSgvW15hLXpBLVowLTknXS9nLFwiXCIpXG5cbiAgICBsb2NhdGlvbkNvbHMgPSBAJGVsLmZpbmQoXCIjbG9jYXRpb25Db2xzXCIpLnZhbCgpLnNwbGl0KC8sICovZylcbiAgICBmb3IgY29sLCBpIGluIGxvY2F0aW9uQ29sc1xuICAgICAgY29sW2ldID0gJC50cmltKGNvbCkucmVwbGFjZSgvW15hLXpBLVowLTknXS9nLFwiXCIpXG5cbiAgICAjIHJlbW92ZXMgL1xccy9cbiAgICBsb2NhdGlvbnNWYWx1ZSA9ICQudHJpbShAJGVsLmZpbmQoXCIjZGF0YVwiKS52YWwoKSlcblxuICAgIGxvY2F0aW9ucyA9IGxvY2F0aW9uc1ZhbHVlLnNwbGl0KFwiXFxuXCIpXG5cbiAgICBmb3IgbG9jYXRpb24sIGkgaW4gbG9jYXRpb25zXG4gICAgICBsb2NhdGlvbnNbaV0gPSBsb2NhdGlvbi5zcGxpdCgvLCAqL2cpXG5cbiAgICBAbW9kZWwuc2V0XG4gICAgICBcImxldmVsc1wiICAgICAgIDogbGV2ZWxzXG4gICAgICBcImxvY2F0aW9uQ29sc1wiIDogbG9jYXRpb25Db2xzXG4gICAgICBcImxvY2F0aW9uc1wiICAgIDogbG9jYXRpb25zXG5cbiAgaXNWYWxpZDogLT5cbiAgICBsZXZlbHMgICAgICAgPSBAbW9kZWwuZ2V0KFwibGV2ZWxzXCIpXG4gICAgbG9jYXRpb25Db2xzID0gQG1vZGVsLmdldChcImxvY2F0aW9uQ29sc1wiKVxuXG4gICAgZm9yIGxldmVsIGluIGxldmVsc1xuICAgICAgaWYgXy5pbmRleE9mKGxvY2F0aW9uQ29scywgbGV2ZWwpID09IC0xXG4gICAgICAgIEBlcnJvcnMucHVzaCBcImxldmVsX2NvbHVtbl9tYXRjaFwiIHVubGVzcyBcImxldmVsX2NvbHVtbl9tYXRjaFwiIGluIEBlcnJvcnNcblxuICAgIGZvciBsb2NhdGlvbiBpbiBAbW9kZWwuZ2V0KFwibG9jYXRpb25zXCIpXG4gICAgICBpZiBsb2NhdGlvbi5sZW5ndGggIT0gbG9jYXRpb25Db2xzLmxlbmd0aFxuICAgICAgICBAZXJyb3JzLnB1c2ggXCJjb2x1bW5fbWF0Y2hcIiB1bmxlc3MgXCJjb2x1bW5fbWF0Y2hcIiBpbiBAZXJyb3JzXG4gICAgcmV0dXJuIEBlcnJvcnMubGVuZ3RoID09IDBcblxuICBzaG93RXJyb3JzOiAtPlxuICAgIGFsZXJ0VGV4dCA9IFwiUGxlYXNlIGNvcnJlY3QgdGhlIGZvbGxvd2luZyBlcnJvcnM6XFxuXFxuXCJcbiAgICBmb3IgZXJyb3IgaW4gQGVycm9yc1xuICAgICAgYWxlcnRUZXh0ICs9IEBlcnJvck1lc3NhZ2VzW2Vycm9yXVxuICAgIGFsZXJ0IGFsZXJ0VGV4dFxuICAgIEBlcnJvcnMgPSBbXVxuXG4gIGluaXRpYWxpemU6ICggb3B0aW9ucyApIC0+XG4gICAgQGVycm9ycyA9IFtdXG4gICAgQG1vZGVsID0gb3B0aW9ucy5tb2RlbFxuICAgIEBlcnJvck1lc3NhZ2VzID1cbiAgICAgIFwiY29sdW1uX21hdGNoXCIgICAgICAgOiBcIlNvbWUgY29sdW1ucyBpbiB0aGUgbG9jYXRpb24gZGF0YSBkbyBub3QgbWF0Y2ggdGhlIG51bWJlciBvZiBjb2x1bW5zIGluIHRoZSBnZW9ncmFwaGljIGxldmVscy5cIlxuICAgICAgXCJsZXZlbF9jb2x1bW5fbWF0Y2hcIiA6IFwiT25lIG9yIG1vcmUgR2VvZ3JhcGhpYyBMZXZlbHMgY2Fubm90IGJlIG1hdGNoZWQgdG8gdmFsaWQgTG9jYXRpb24gQ29sdW1ucy5cIlxuXG4gIHJlbmRlcjogLT5cbiAgICBsZXZlbHMgICAgPSBAbW9kZWwuZ2V0KFwibGV2ZWxzXCIpICAgICAgICAgIHx8IFtdXG4gICAgbG9jYXRpb25Db2xzID0gQG1vZGVsLmdldChcImxvY2F0aW9uQ29sc1wiKSB8fCBbXVxuICAgIGxvY2F0aW9ucyA9IEBtb2RlbC5nZXQoXCJsb2NhdGlvbnNcIikgICAgICAgfHwgW11cblxuICAgIGxldmVscyA9IF8uZXNjYXBlKGxldmVscy5qb2luKFwiLCBcIikpXG4gICAgbG9jYXRpb25Db2xzID0gXy5lc2NhcGUobG9jYXRpb25Db2xzLmpvaW4oXCIsIFwiKSlcblxuICAgIGxvY2F0aW9ucyA9IGxvY2F0aW9ucy5qb2luKFwiXFxuXCIpXG4gICAgaWYgXy5pc0FycmF5KGxvY2F0aW9ucylcbiAgICAgIGZvciBsb2NhdGlvbiwgaSBpbiBsb2NhdGlvbnNcbiAgICAgICAgbG9jYXRpb25zW2ldID0gXy5lc2NhcGUobG9jYXRpb24uam9pbihcIiwgXCIpKVxuXG4gICAgQCRlbC5odG1sICBcIlxuXG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cbiAgICAgICAgICA8bGFiZWwgZm9yPSdsZXZlbHMnIHRpdGxlPSdUaGlzIGlzIGEgY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgZ2VvZ3JhcGhpYyBsZXZlbHMuIChFLmcuIENvdW50cnksIFByb3ZpbmNlLCBEaXN0cmljdCwgU2Nob29sIElkKSBUaGVzZSBhcmUgdGhlIGxldmVscyB0aGF0IHlvdSB3b3VsZCBjb25zaWRlciBpbmRpdmlkdWFsIGZpZWxkcyBvbiB0aGUgbG9jYXRpb24gZm9ybS4nPkdlb2dyYXBoaWMgTGV2ZWxzPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgaWQ9J2xldmVscycgdmFsdWU9JyN7bGV2ZWxzfSc+XG4gICAgICAgICAgPGxhYmVsIHRpdGxlPSdUYW5nZXJpbmUgdXNlcyBjb21tYSBzZXBhcmF0ZWQgdmFsdWVzLiBJZiB5b3UgY29weSBhbmQgcGFzdGUgZnJvbSBhbm90aGVyIHByb2dyYW0gbGlrZSBFeGNlbCwgdGhlIHZhbHVlcyB3aWxsIGJlIHRhYiBzZXBhcmF0ZWQuIFRoZXNlIGJ1dHRvbnMgYWxsb3cgeW91IHRvIHN3aXRjaCBiYWNrIGFuZCBmb3J0aCwgaG93ZXZlciwgVGFuZ2VyaW5lIHdpbGwgYWx3YXlzIHNhdmUgdGhlIGNvbW1hIHZlcnNpb24uJz5Gb3JtYXQ8L2xhYmVsPjxicj5cbiAgICAgICAgICA8ZGl2IGlkPSdsZXZlbHNfZm9ybWF0JyBjbGFzcz0nYnV0dG9uc2V0Jz5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J2xldmVsc190YWJzJz5UYWJzPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCBpZD0nbGV2ZWxzX3RhYnMnIG5hbWU9J2xldmVsc19mb3JtYXQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nVGFicyc+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdsZXZlbHNfY29tbWFzJz5Db21tYXM8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IGlkPSdsZXZlbHNfY29tbWFzJyBuYW1lPSdsZXZlbHNfZm9ybWF0JyB0eXBlPSdyYWRpbycgdmFsdWU9J0NvbW1hcyc+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgIDxsYWJlbCBmb3I9J2NvbHMnIHRpdGxlPSdDb21tYSBzcGVyYXRlZCB2YWx1ZXMsIHdpdGggbXVsdGlwbGUgcm93cyBzZXBhcmF0ZWQgYnkgbGluZS4gVGhpcyBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgdG8gYXV0b2ZpbGwgdGhlIGxvY2F0aW9uIGRhdGEuJz5Mb2NhdGlvbiBDb2x1bW5zPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgaWQ9J2xvY2F0aW9uQ29scycgdmFsdWU9JyN7bG9jYXRpb25Db2xzfSc+PGJyPjxicj5cbiAgICAgICAgICA8bGFiZWwgZm9yPSdkYXRhJyB0aXRsZT0nQ29tbWEgc3BlcmF0ZWQgdmFsdWVzLCB3aXRoIG11bHRpcGxlIHJvd3Mgc2VwYXJhdGVkIGJ5IGxpbmUuIFRoaXMgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIHRvIGF1dG9maWxsIHRoZSBsb2NhdGlvbiBkYXRhLic+TG9jYXRpb24gRGF0YTwvbGFiZWw+XG4gICAgICAgICAgPHRleHRhcmVhIGlkPSdkYXRhJz4je2xvY2F0aW9uc308L3RleHRhcmVhPjxicj5cbiAgICAgICAgICA8bGFiZWwgdGl0bGU9J1RhbmdlcmluZSB1c2VzIGNvbW1hIHNlcGFyYXRlZCB2YWx1ZXMuIElmIHlvdSBjb3B5IGFuZCBwYXN0ZSBmcm9tIGFub3RoZXIgcHJvZ3JhbSBsaWtlIEV4Y2VsLCB0aGUgdmFsdWVzIHdpbGwgYmUgdGFiIHNlcGFyYXRlZC4gVGhlc2UgYnV0dG9ucyBhbGxvdyB5b3UgdG8gc3dpdGNoIGJhY2sgYW5kIGZvcnRoLCBob3dldmVyLCBUYW5nZXJpbmUgd2lsbCBhbHdheXMgc2F2ZSB0aGUgY29tbWEgdmVyc2lvbi4nPkZvcm1hdDwvbGFiZWw+PGJyPiAgICAgICAgPGRpdiBpZD0nZGF0YV9mb3JtYXQnIGNsYXNzPSdidXR0b25zZXQnPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj0nZGF0YV90YWJzJz5UYWJzPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCBpZD0nZGF0YV90YWJzJyBuYW1lPSdkYXRhX2Zvcm1hdCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdUYWJzJz5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J2RhdGFfY29tbWFzJz5Db21tYXM8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IGlkPSdkYXRhX2NvbW1hcycgbmFtZT0nZGF0YV9mb3JtYXQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nQ29tbWFzJz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIFxuICAgICAgPC9kaXY+XG4gICAgXCJcblxuICBhZnRlclJlbmRlcjogLT5cbiAgICBAdXBkYXRlTGV2ZWxzKClcbiAgICBAdXBkYXRlRGF0YSgpXG5cbiIsInZhciBMb2NhdGlvbkVkaXRWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgaW5kZXhPZiA9IFtdLmluZGV4T2YgfHwgZnVuY3Rpb24oaXRlbSkgeyBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7IGlmIChpIGluIHRoaXMgJiYgdGhpc1tpXSA9PT0gaXRlbSkgcmV0dXJuIGk7IH0gcmV0dXJuIC0xOyB9O1xuXG5Mb2NhdGlvbkVkaXRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKExvY2F0aW9uRWRpdFZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIExvY2F0aW9uRWRpdFZpZXcoKSB7XG4gICAgcmV0dXJuIExvY2F0aW9uRWRpdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBMb2NhdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIkxvY2F0aW9uRWRpdFZpZXdcIjtcblxuICBMb2NhdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2tleXVwICNkYXRhJzogJ3VwZGF0ZURhdGEnLFxuICAgICdrZXl1cCAjbGV2ZWxzJzogJ3VwZGF0ZUxldmVscycsXG4gICAgJ2NsaWNrICNkYXRhX2Zvcm1hdCBpbnB1dCc6ICd1cGRhdGVEYXRhJyxcbiAgICAnY2xpY2sgI2xldmVsc19mb3JtYXQgaW5wdXQnOiAndXBkYXRlTGV2ZWxzJ1xuICB9O1xuXG4gIExvY2F0aW9uRWRpdFZpZXcucHJvdG90eXBlLnVwZGF0ZURhdGEgPSBmdW5jdGlvbihldmVudCkge1xuICAgIGlmIChoYXNUYWJzKSB7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNkYXRhX2Zvcm1hdCA6cmFkaW9bdmFsdWU9J1RhYnMnXVwiKS5hdHRyKFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIikuYnV0dG9uKFwicmVmcmVzaFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjZGF0YV9mb3JtYXQgOnJhZGlvW3ZhbHVlPSdDb21tYXMnXVwiKS5hdHRyKFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIikuYnV0dG9uKFwicmVmcmVzaFwiKTtcbiAgICB9XG4gIH07XG5cbiAgTG9jYXRpb25FZGl0Vmlldy5wcm90b3R5cGUudXBkYXRlRGF0YSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGRhdGEsIGhhc0NvbW1hcywgaGFzVGFicztcbiAgICBpZiAoKGV2ZW50ICE9IG51bGwgPyBldmVudC50eXBlIDogdm9pZCAwKSA9PT0gXCJjbGlja1wiKSB7XG4gICAgICBpZiAoJChldmVudC50YXJnZXQpLnZhbCgpID09PSBcIlRhYnNcIikge1xuICAgICAgICB0aGlzLmRhdGFDb21tYVRvVGFiKCk7XG4gICAgICAgIGhhc1RhYnMgPSB0cnVlO1xuICAgICAgICBoYXNDb21tYXMgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGF0YVRhYlRvQ29tbWEoKTtcbiAgICAgICAgaGFzVGFicyA9IGZhbHNlO1xuICAgICAgICBoYXNDb21tYXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gdGhpcy4kZWwuZmluZChcIiNkYXRhXCIpLnZhbCgpO1xuICAgICAgaGFzVGFicyA9IGRhdGEubWF0Y2goL1xcdC9nKSAhPSBudWxsO1xuICAgICAgaGFzQ29tbWFzID0gZGF0YS5tYXRjaCgvLC9nKSAhPSBudWxsO1xuICAgIH1cbiAgICBpZiAoaGFzVGFicykge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjZGF0YV9mb3JtYXQgOnJhZGlvW3ZhbHVlPSdUYWJzJ11cIikuYXR0cihcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIpLmJ1dHRvbihcInJlZnJlc2hcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiI2RhdGFfZm9ybWF0IDpyYWRpb1t2YWx1ZT0nQ29tbWFzJ11cIikuYXR0cihcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIpLmJ1dHRvbihcInJlZnJlc2hcIik7XG4gICAgfVxuICB9O1xuXG4gIExvY2F0aW9uRWRpdFZpZXcucHJvdG90eXBlLnVwZGF0ZUxldmVscyA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGhhc0NvbW1hcywgaGFzVGFicywgbGV2ZWxzO1xuICAgIGlmICgoZXZlbnQgIT0gbnVsbCA/IGV2ZW50LnR5cGUgOiB2b2lkIDApID09PSBcImNsaWNrXCIpIHtcbiAgICAgIGlmICgkKGV2ZW50LnRhcmdldCkudmFsKCkgPT09IFwiVGFic1wiKSB7XG4gICAgICAgIHRoaXMubGV2ZWxzQ29tbWFUb1RhYigpO1xuICAgICAgICBoYXNUYWJzID0gdHJ1ZTtcbiAgICAgICAgaGFzQ29tbWFzID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmxldmVsc1RhYlRvQ29tbWEoKTtcbiAgICAgICAgaGFzVGFicyA9IGZhbHNlO1xuICAgICAgICBoYXNDb21tYXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXZlbHMgPSB0aGlzLiRlbC5maW5kKFwiI2xldmVsc1wiKS52YWwoKTtcbiAgICAgIGhhc1RhYnMgPSBsZXZlbHMubWF0Y2goL1xcdC9nKSAhPSBudWxsO1xuICAgICAgaGFzQ29tbWFzID0gbGV2ZWxzLm1hdGNoKC8sL2cpICE9IG51bGw7XG4gICAgfVxuICAgIGxldmVscyA9IHRoaXMuJGVsLmZpbmQoXCIjbGV2ZWxzXCIpLnZhbCgpO1xuICAgIGhhc1RhYnMgPSBsZXZlbHMubWF0Y2goL1xcdC9nKSAhPSBudWxsO1xuICAgIGhhc0NvbW1hcyA9IGxldmVscy5tYXRjaCgvLC9nKSAhPSBudWxsO1xuICAgIGlmIChoYXNUYWJzKSB7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNsZXZlbHNfZm9ybWF0IDpyYWRpb1t2YWx1ZT0nVGFicyddXCIpLmF0dHIoXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiKS5idXR0b24oXCJyZWZyZXNoXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNsZXZlbHNfZm9ybWF0IDpyYWRpb1t2YWx1ZT0nQ29tbWFzJ11cIikuYXR0cihcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIpLmJ1dHRvbihcInJlZnJlc2hcIik7XG4gICAgfVxuICB9O1xuXG4gIExvY2F0aW9uRWRpdFZpZXcucHJvdG90eXBlLmRhdGFUYWJUb0NvbW1hID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwuZmluZChcIiNkYXRhXCIpLnZhbChTdHJpbmcodGhpcy4kZWwuZmluZChcIiNkYXRhXCIpLnZhbCgpKS5yZXBsYWNlKC9cXHQvZywgXCIsIFwiKSk7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjbG9jYXRpb25Db2xzXCIpLnZhbChTdHJpbmcodGhpcy4kZWwuZmluZChcIiNsb2NhdGlvbkNvbHNcIikudmFsKCkpLnJlcGxhY2UoL1xcdC9nLCBcIiwgXCIpKTtcbiAgfTtcblxuICBMb2NhdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5kYXRhQ29tbWFUb1RhYiA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGVsLmZpbmQoXCIjZGF0YVwiKS52YWwodGhpcy4kZWwuZmluZChcIiNkYXRhXCIpLnZhbCgpLnJlcGxhY2UoLywgKi9nLCBcIlxcdFwiKSk7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjbG9jYXRpb25Db2xzXCIpLnZhbCh0aGlzLiRlbC5maW5kKFwiI2xvY2F0aW9uQ29sc1wiKS52YWwoKS5yZXBsYWNlKC8sICovZywgXCJcXHRcIikpO1xuICB9O1xuXG4gIExvY2F0aW9uRWRpdFZpZXcucHJvdG90eXBlLmxldmVsc1RhYlRvQ29tbWEgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNsZXZlbHNcIikudmFsKFN0cmluZyh0aGlzLiRlbC5maW5kKFwiI2xldmVsc1wiKS52YWwoKSkucmVwbGFjZSgvXFx0L2csIFwiLCBcIikpO1xuICB9O1xuXG4gIExvY2F0aW9uRWRpdFZpZXcucHJvdG90eXBlLmxldmVsc0NvbW1hVG9UYWIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNsZXZlbHNcIikudmFsKHRoaXMuJGVsLmZpbmQoXCIjbGV2ZWxzXCIpLnZhbCgpLnJlcGxhY2UoLywgKi9nLCBcIlxcdFwiKSk7XG4gIH07XG5cbiAgTG9jYXRpb25FZGl0Vmlldy5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb2wsIGksIGosIGssIGwsIGxlbiwgbGVuMSwgbGVuMiwgbGV2ZWwsIGxldmVscywgbG9jYXRpb24sIGxvY2F0aW9uQ29scywgbG9jYXRpb25zLCBsb2NhdGlvbnNWYWx1ZTtcbiAgICBpZiAodGhpcy4kZWwuZmluZChcIiNkYXRhXCIpLnZhbCgpLm1hdGNoKC9cXHQvZykgIT0gbnVsbCkge1xuICAgICAgdGhpcy4kZWwuZmluZChcIiNkYXRhX2Zvcm1hdCA6cmFkaW9bdmFsdWU9J1RhYnMnXVwiKS5hdHRyKFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIikuYnV0dG9uKFwicmVmcmVzaFwiKTtcbiAgICAgIHRoaXMuZGF0YVRhYlRvQ29tbWEoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuJGVsLmZpbmQoXCIjbGV2ZWxzXCIpLnZhbCgpLm1hdGNoKC9cXHQvZykgIT0gbnVsbCkge1xuICAgICAgdGhpcy5sZXZlbHNUYWJUb0NvbW1hKCk7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiI2xldmVsc19mb3JtYXQgOnJhZGlvW3ZhbHVlPSdUYWJzJ11cIikuYXR0cihcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIpLmJ1dHRvbihcInJlZnJlc2hcIik7XG4gICAgfVxuICAgIGxldmVscyA9IHRoaXMuJGVsLmZpbmQoXCIjbGV2ZWxzXCIpLnZhbCgpLnNwbGl0KC8sICovZyk7XG4gICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IGxldmVscy5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgIGxldmVsID0gbGV2ZWxzW2ldO1xuICAgICAgbGV2ZWxzW2ldID0gJC50cmltKGxldmVsKS5yZXBsYWNlKC9bXmEtekEtWjAtOSddL2csIFwiXCIpO1xuICAgIH1cbiAgICBsb2NhdGlvbkNvbHMgPSB0aGlzLiRlbC5maW5kKFwiI2xvY2F0aW9uQ29sc1wiKS52YWwoKS5zcGxpdCgvLCAqL2cpO1xuICAgIGZvciAoaSA9IGsgPSAwLCBsZW4xID0gbG9jYXRpb25Db2xzLmxlbmd0aDsgayA8IGxlbjE7IGkgPSArK2spIHtcbiAgICAgIGNvbCA9IGxvY2F0aW9uQ29sc1tpXTtcbiAgICAgIGNvbFtpXSA9ICQudHJpbShjb2wpLnJlcGxhY2UoL1teYS16QS1aMC05J10vZywgXCJcIik7XG4gICAgfVxuICAgIGxvY2F0aW9uc1ZhbHVlID0gJC50cmltKHRoaXMuJGVsLmZpbmQoXCIjZGF0YVwiKS52YWwoKSk7XG4gICAgbG9jYXRpb25zID0gbG9jYXRpb25zVmFsdWUuc3BsaXQoXCJcXG5cIik7XG4gICAgZm9yIChpID0gbCA9IDAsIGxlbjIgPSBsb2NhdGlvbnMubGVuZ3RoOyBsIDwgbGVuMjsgaSA9ICsrbCkge1xuICAgICAgbG9jYXRpb24gPSBsb2NhdGlvbnNbaV07XG4gICAgICBsb2NhdGlvbnNbaV0gPSBsb2NhdGlvbi5zcGxpdCgvLCAqL2cpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5tb2RlbC5zZXQoe1xuICAgICAgXCJsZXZlbHNcIjogbGV2ZWxzLFxuICAgICAgXCJsb2NhdGlvbkNvbHNcIjogbG9jYXRpb25Db2xzLFxuICAgICAgXCJsb2NhdGlvbnNcIjogbG9jYXRpb25zXG4gICAgfSk7XG4gIH07XG5cbiAgTG9jYXRpb25FZGl0Vmlldy5wcm90b3R5cGUuaXNWYWxpZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBqLCBrLCBsZW4sIGxlbjEsIGxldmVsLCBsZXZlbHMsIGxvY2F0aW9uLCBsb2NhdGlvbkNvbHMsIHJlZjtcbiAgICBsZXZlbHMgPSB0aGlzLm1vZGVsLmdldChcImxldmVsc1wiKTtcbiAgICBsb2NhdGlvbkNvbHMgPSB0aGlzLm1vZGVsLmdldChcImxvY2F0aW9uQ29sc1wiKTtcbiAgICBmb3IgKGogPSAwLCBsZW4gPSBsZXZlbHMubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIGxldmVsID0gbGV2ZWxzW2pdO1xuICAgICAgaWYgKF8uaW5kZXhPZihsb2NhdGlvbkNvbHMsIGxldmVsKSA9PT0gLTEpIHtcbiAgICAgICAgaWYgKGluZGV4T2YuY2FsbCh0aGlzLmVycm9ycywgXCJsZXZlbF9jb2x1bW5fbWF0Y2hcIikgPCAwKSB7XG4gICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChcImxldmVsX2NvbHVtbl9tYXRjaFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZWYgPSB0aGlzLm1vZGVsLmdldChcImxvY2F0aW9uc1wiKTtcbiAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmLmxlbmd0aDsgayA8IGxlbjE7IGsrKykge1xuICAgICAgbG9jYXRpb24gPSByZWZba107XG4gICAgICBpZiAobG9jYXRpb24ubGVuZ3RoICE9PSBsb2NhdGlvbkNvbHMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChpbmRleE9mLmNhbGwodGhpcy5lcnJvcnMsIFwiY29sdW1uX21hdGNoXCIpIDwgMCkge1xuICAgICAgICAgIHRoaXMuZXJyb3JzLnB1c2goXCJjb2x1bW5fbWF0Y2hcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZXJyb3JzLmxlbmd0aCA9PT0gMDtcbiAgfTtcblxuICBMb2NhdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5zaG93RXJyb3JzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFsZXJ0VGV4dCwgZXJyb3IsIGosIGxlbiwgcmVmO1xuICAgIGFsZXJ0VGV4dCA9IFwiUGxlYXNlIGNvcnJlY3QgdGhlIGZvbGxvd2luZyBlcnJvcnM6XFxuXFxuXCI7XG4gICAgcmVmID0gdGhpcy5lcnJvcnM7XG4gICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICBlcnJvciA9IHJlZltqXTtcbiAgICAgIGFsZXJ0VGV4dCArPSB0aGlzLmVycm9yTWVzc2FnZXNbZXJyb3JdO1xuICAgIH1cbiAgICBhbGVydChhbGVydFRleHQpO1xuICAgIHJldHVybiB0aGlzLmVycm9ycyA9IFtdO1xuICB9O1xuXG4gIExvY2F0aW9uRWRpdFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICByZXR1cm4gdGhpcy5lcnJvck1lc3NhZ2VzID0ge1xuICAgICAgXCJjb2x1bW5fbWF0Y2hcIjogXCJTb21lIGNvbHVtbnMgaW4gdGhlIGxvY2F0aW9uIGRhdGEgZG8gbm90IG1hdGNoIHRoZSBudW1iZXIgb2YgY29sdW1ucyBpbiB0aGUgZ2VvZ3JhcGhpYyBsZXZlbHMuXCIsXG4gICAgICBcImxldmVsX2NvbHVtbl9tYXRjaFwiOiBcIk9uZSBvciBtb3JlIEdlb2dyYXBoaWMgTGV2ZWxzIGNhbm5vdCBiZSBtYXRjaGVkIHRvIHZhbGlkIExvY2F0aW9uIENvbHVtbnMuXCJcbiAgICB9O1xuICB9O1xuXG4gIExvY2F0aW9uRWRpdFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBqLCBsZW4sIGxldmVscywgbG9jYXRpb24sIGxvY2F0aW9uQ29scywgbG9jYXRpb25zO1xuICAgIGxldmVscyA9IHRoaXMubW9kZWwuZ2V0KFwibGV2ZWxzXCIpIHx8IFtdO1xuICAgIGxvY2F0aW9uQ29scyA9IHRoaXMubW9kZWwuZ2V0KFwibG9jYXRpb25Db2xzXCIpIHx8IFtdO1xuICAgIGxvY2F0aW9ucyA9IHRoaXMubW9kZWwuZ2V0KFwibG9jYXRpb25zXCIpIHx8IFtdO1xuICAgIGxldmVscyA9IF8uZXNjYXBlKGxldmVscy5qb2luKFwiLCBcIikpO1xuICAgIGxvY2F0aW9uQ29scyA9IF8uZXNjYXBlKGxvY2F0aW9uQ29scy5qb2luKFwiLCBcIikpO1xuICAgIGxvY2F0aW9ucyA9IGxvY2F0aW9ucy5qb2luKFwiXFxuXCIpO1xuICAgIGlmIChfLmlzQXJyYXkobG9jYXRpb25zKSkge1xuICAgICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IGxvY2F0aW9ucy5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgICAgbG9jYXRpb24gPSBsb2NhdGlvbnNbaV07XG4gICAgICAgIGxvY2F0aW9uc1tpXSA9IF8uZXNjYXBlKGxvY2F0aW9uLmpvaW4oXCIsIFwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiRlbC5odG1sKFwiPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8ZGl2IGNsYXNzPSdtZW51X2JveCc+IDxsYWJlbCBmb3I9J2xldmVscycgdGl0bGU9J1RoaXMgaXMgYSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBnZW9ncmFwaGljIGxldmVscy4gKEUuZy4gQ291bnRyeSwgUHJvdmluY2UsIERpc3RyaWN0LCBTY2hvb2wgSWQpIFRoZXNlIGFyZSB0aGUgbGV2ZWxzIHRoYXQgeW91IHdvdWxkIGNvbnNpZGVyIGluZGl2aWR1YWwgZmllbGRzIG9uIHRoZSBsb2NhdGlvbiBmb3JtLic+R2VvZ3JhcGhpYyBMZXZlbHM8L2xhYmVsPiA8aW5wdXQgaWQ9J2xldmVscycgdmFsdWU9J1wiICsgbGV2ZWxzICsgXCInPiA8bGFiZWwgdGl0bGU9J1RhbmdlcmluZSB1c2VzIGNvbW1hIHNlcGFyYXRlZCB2YWx1ZXMuIElmIHlvdSBjb3B5IGFuZCBwYXN0ZSBmcm9tIGFub3RoZXIgcHJvZ3JhbSBsaWtlIEV4Y2VsLCB0aGUgdmFsdWVzIHdpbGwgYmUgdGFiIHNlcGFyYXRlZC4gVGhlc2UgYnV0dG9ucyBhbGxvdyB5b3UgdG8gc3dpdGNoIGJhY2sgYW5kIGZvcnRoLCBob3dldmVyLCBUYW5nZXJpbmUgd2lsbCBhbHdheXMgc2F2ZSB0aGUgY29tbWEgdmVyc2lvbi4nPkZvcm1hdDwvbGFiZWw+PGJyPiA8ZGl2IGlkPSdsZXZlbHNfZm9ybWF0JyBjbGFzcz0nYnV0dG9uc2V0Jz4gPGxhYmVsIGZvcj0nbGV2ZWxzX3RhYnMnPlRhYnM8L2xhYmVsPiA8aW5wdXQgaWQ9J2xldmVsc190YWJzJyBuYW1lPSdsZXZlbHNfZm9ybWF0JyB0eXBlPSdyYWRpbycgdmFsdWU9J1RhYnMnPiA8bGFiZWwgZm9yPSdsZXZlbHNfY29tbWFzJz5Db21tYXM8L2xhYmVsPiA8aW5wdXQgaWQ9J2xldmVsc19jb21tYXMnIG5hbWU9J2xldmVsc19mb3JtYXQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nQ29tbWFzJz4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8ZGl2IGNsYXNzPSdtZW51X2JveCc+IDxsYWJlbCBmb3I9J2NvbHMnIHRpdGxlPSdDb21tYSBzcGVyYXRlZCB2YWx1ZXMsIHdpdGggbXVsdGlwbGUgcm93cyBzZXBhcmF0ZWQgYnkgbGluZS4gVGhpcyBpbmZvcm1hdGlvbiB3aWxsIGJlIHVzZWQgdG8gYXV0b2ZpbGwgdGhlIGxvY2F0aW9uIGRhdGEuJz5Mb2NhdGlvbiBDb2x1bW5zPC9sYWJlbD4gPGlucHV0IGlkPSdsb2NhdGlvbkNvbHMnIHZhbHVlPSdcIiArIGxvY2F0aW9uQ29scyArIFwiJz48YnI+PGJyPiA8bGFiZWwgZm9yPSdkYXRhJyB0aXRsZT0nQ29tbWEgc3BlcmF0ZWQgdmFsdWVzLCB3aXRoIG11bHRpcGxlIHJvd3Mgc2VwYXJhdGVkIGJ5IGxpbmUuIFRoaXMgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIHRvIGF1dG9maWxsIHRoZSBsb2NhdGlvbiBkYXRhLic+TG9jYXRpb24gRGF0YTwvbGFiZWw+IDx0ZXh0YXJlYSBpZD0nZGF0YSc+XCIgKyBsb2NhdGlvbnMgKyBcIjwvdGV4dGFyZWE+PGJyPiA8bGFiZWwgdGl0bGU9J1RhbmdlcmluZSB1c2VzIGNvbW1hIHNlcGFyYXRlZCB2YWx1ZXMuIElmIHlvdSBjb3B5IGFuZCBwYXN0ZSBmcm9tIGFub3RoZXIgcHJvZ3JhbSBsaWtlIEV4Y2VsLCB0aGUgdmFsdWVzIHdpbGwgYmUgdGFiIHNlcGFyYXRlZC4gVGhlc2UgYnV0dG9ucyBhbGxvdyB5b3UgdG8gc3dpdGNoIGJhY2sgYW5kIGZvcnRoLCBob3dldmVyLCBUYW5nZXJpbmUgd2lsbCBhbHdheXMgc2F2ZSB0aGUgY29tbWEgdmVyc2lvbi4nPkZvcm1hdDwvbGFiZWw+PGJyPiAgICAgICAgPGRpdiBpZD0nZGF0YV9mb3JtYXQnIGNsYXNzPSdidXR0b25zZXQnPiA8bGFiZWwgZm9yPSdkYXRhX3RhYnMnPlRhYnM8L2xhYmVsPiA8aW5wdXQgaWQ9J2RhdGFfdGFicycgbmFtZT0nZGF0YV9mb3JtYXQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nVGFicyc+IDxsYWJlbCBmb3I9J2RhdGFfY29tbWFzJz5Db21tYXM8L2xhYmVsPiA8aW5wdXQgaWQ9J2RhdGFfY29tbWFzJyBuYW1lPSdkYXRhX2Zvcm1hdCcgdHlwZT0ncmFkaW8nIHZhbHVlPSdDb21tYXMnPiA8L2Rpdj4gPC9kaXY+XCIpO1xuICB9O1xuXG4gIExvY2F0aW9uRWRpdFZpZXcucHJvdG90eXBlLmFmdGVyUmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy51cGRhdGVMZXZlbHMoKTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVEYXRhKCk7XG4gIH07XG5cbiAgcmV0dXJuIExvY2F0aW9uRWRpdFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBTdXJ2ZXlSdW5WaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZTogXCJTdXJ2ZXlSdW5WaWV3XCJcblxuICBldmVudHM6XG4gICAgJ2NsaWNrIC5uZXh0X3F1ZXN0aW9uJyA6ICduZXh0UXVlc3Rpb24nXG4gICAgJ2NsaWNrIC5wcmV2X3F1ZXN0aW9uJyA6ICdwcmV2UXVlc3Rpb24nXG5cbiAgbmV4dFF1ZXN0aW9uOiAtPlxuXG4gICAgY3VycmVudFF1ZXN0aW9uVmlldyA9IEBxdWVzdGlvblZpZXdzW0BxdWVzdGlvbkluZGV4XVxuXG4gICAgIyBzaG93IGVycm9ycyBiZWZvcmUgZG9pbmcgYW55dGhpbmcgaWYgdGhlcmUgYXJlIGFueVxuICAgIHJldHVybiBAc2hvd0Vycm9ycyhjdXJyZW50UXVlc3Rpb25WaWV3KSB1bmxlc3MgQGlzVmFsaWQoY3VycmVudFF1ZXN0aW9uVmlldylcblxuICAgICMgZmluZCB0aGUgbm9uLXNraXBwZWQgcXVlc3Rpb25zXG4gICAgaXNBdmFpbGFibGUgPSBbXVxuICAgIGZvciBxdWVzdGlvbiwgaSBpbiBAcXVlc3Rpb25WaWV3c1xuICAgICAgaXNBdXRvc3RvcHBlZCAgPSBxdWVzdGlvbi4kZWwuaGFzQ2xhc3MoXCJkaXNhYmxlZF9hdXRvc3RvcFwiKVxuICAgICAgaXNMb2dpY1NraXBwZWQgPSBxdWVzdGlvbi4kZWwuaGFzQ2xhc3MoXCJkaXNhYmxlZF9za2lwcGVkXCIpXG4gICAgICBpc0F2YWlsYWJsZS5wdXNoIGkgaWYgbm90IChpc0F1dG9zdG9wcGVkIG9yIGlzTG9naWNTa2lwcGVkKVxuICAgIGlzQXZhaWxhYmxlICA9IF8uZmlsdGVyIGlzQXZhaWxhYmxlLCAoZSkgPT4gZSA+IEBxdWVzdGlvbkluZGV4XG5cbiAgICAjIGRvbid0IGdvIGFueXdoZXJlIHVubGVzcyB3ZSBoYXZlIHNvbWV3aGVyZSB0byBnb1xuICAgIGlmIGlzQXZhaWxhYmxlLmxlbmd0aCA9PSAwXG4gICAgICBwbGFubmVkSW5kZXggPSBAcXVlc3Rpb25JbmRleFxuICAgIGVsc2VcbiAgICAgIHBsYW5uZWRJbmRleCA9IE1hdGgubWluLmFwcGx5KHBsYW5uZWRJbmRleCwgaXNBdmFpbGFibGUpXG5cbiAgICBpZiBAcXVlc3Rpb25JbmRleCAhPSBwbGFubmVkSW5kZXhcbiAgICAgIEBxdWVzdGlvbkluZGV4ID0gcGxhbm5lZEluZGV4XG4gICAgICBAdXBkYXRlUXVlc3Rpb25WaXNpYmlsaXR5KClcbiAgICAgIEB1cGRhdGVQcm9ncmVzc0J1dHRvbnMoKVxuXG4gIHByZXZRdWVzdGlvbjogLT5cblxuICAgIGN1cnJlbnRRdWVzdGlvblZpZXcgPSBAcXVlc3Rpb25WaWV3c1tAcXVlc3Rpb25JbmRleF1cblxuICAgICMgc2hvdyBlcnJvcnMgYmVmb3JlIGRvaW5nIGFueXRoaW5nIGlmIHRoZXJlIGFyZSBhbnlcbiAgICByZXR1cm4gQHNob3dFcnJvcnMoY3VycmVudFF1ZXN0aW9uVmlldykgdW5sZXNzIEBpc1ZhbGlkKGN1cnJlbnRRdWVzdGlvblZpZXcpXG5cbiAgICAjIGZpbmQgdGhlIG5vbi1za2lwcGVkIHF1ZXN0aW9uc1xuICAgIGlzQXZhaWxhYmxlID0gW11cbiAgICBmb3IgcXVlc3Rpb24sIGkgaW4gQHF1ZXN0aW9uVmlld3NcbiAgICAgIGlzQXV0b3N0b3BwZWQgID0gcXVlc3Rpb24uJGVsLmhhc0NsYXNzKFwiZGlzYWJsZWRfYXV0b3N0b3BcIilcbiAgICAgIGlzTG9naWNTa2lwcGVkID0gcXVlc3Rpb24uJGVsLmhhc0NsYXNzKFwiZGlzYWJsZWRfc2tpcHBlZFwiKVxuICAgICAgaXNBdmFpbGFibGUucHVzaCBpIGlmIG5vdCAoaXNBdXRvc3RvcHBlZCBvciBpc0xvZ2ljU2tpcHBlZClcbiAgICBpc0F2YWlsYWJsZSAgPSBfLmZpbHRlciBpc0F2YWlsYWJsZSwgKGUpID0+IGUgPCBAcXVlc3Rpb25JbmRleFxuXG4gICAgIyBkb24ndCBnbyBhbnl3aGVyZSB1bmxlc3Mgd2UgaGF2ZSBzb21ld2hlcmUgdG8gZ29cbiAgICBpZiBpc0F2YWlsYWJsZS5sZW5ndGggPT0gMFxuICAgICAgcGxhbm5lZEluZGV4ID0gQHF1ZXN0aW9uSW5kZXhcbiAgICBlbHNlXG4gICAgICBwbGFubmVkSW5kZXggPSBNYXRoLm1heC5hcHBseShwbGFubmVkSW5kZXgsIGlzQXZhaWxhYmxlKVxuXG4gICAgaWYgQHF1ZXN0aW9uSW5kZXggIT0gcGxhbm5lZEluZGV4XG4gICAgICBAcXVlc3Rpb25JbmRleCA9IHBsYW5uZWRJbmRleFxuICAgICAgQHVwZGF0ZVF1ZXN0aW9uVmlzaWJpbGl0eSgpXG4gICAgICBAdXBkYXRlUHJvZ3Jlc3NCdXR0b25zKClcblxuICB1cGRhdGVQcm9ncmVzc0J1dHRvbnM6IC0+XG5cbiAgICBpc0F2YWlsYWJsZSA9IFtdXG4gICAgZm9yIHF1ZXN0aW9uLCBpIGluIEBxdWVzdGlvblZpZXdzXG4gICAgICBpc0F1dG9zdG9wcGVkICA9IHF1ZXN0aW9uLiRlbC5oYXNDbGFzcyhcImRpc2FibGVkX2F1dG9zdG9wXCIpXG4gICAgICBpc0xvZ2ljU2tpcHBlZCA9IHF1ZXN0aW9uLiRlbC5oYXNDbGFzcyhcImRpc2FibGVkX3NraXBwZWRcIilcbiAgICAgIGlzQXZhaWxhYmxlLnB1c2ggaSBpZiBub3QgKGlzQXV0b3N0b3BwZWQgb3IgaXNMb2dpY1NraXBwZWQpXG4gICAgaXNBdmFpbGFibGUucHVzaCBAcXVlc3Rpb25JbmRleFxuXG4gICAgJHByZXYgPSBAJGVsLmZpbmQoXCIucHJldl9xdWVzdGlvblwiKVxuICAgICRuZXh0ID0gQCRlbC5maW5kKFwiLm5leHRfcXVlc3Rpb25cIilcblxuICAgIG1pbmltdW0gPSBNYXRoLm1pbi5hcHBseSggbWluaW11bSwgaXNBdmFpbGFibGUgKVxuICAgIG1heGltdW0gPSBNYXRoLm1heC5hcHBseSggbWF4aW11bSwgaXNBdmFpbGFibGUgKVxuXG4gICAgaWYgQHF1ZXN0aW9uSW5kZXggPT0gbWluaW11bVxuICAgICAgJHByZXYuaGlkZSgpXG4gICAgZWxzZVxuICAgICAgJHByZXYuc2hvdygpXG5cbiAgICBpZiBAcXVlc3Rpb25JbmRleCA9PSBtYXhpbXVtXG4gICAgICAkbmV4dC5oaWRlKClcbiAgICBlbHNlXG4gICAgICAkbmV4dC5zaG93KClcblxuICB1cGRhdGVFeGVjdXRlUmVhZHk6IChyZWFkeSkgPT5cblxuICAgIEBleGVjdXRlUmVhZHkgPSByZWFkeVxuXG4gICAgcmV0dXJuIGlmIG5vdCBAdHJpZ2dlclNob3dMaXN0P1xuXG4gICAgaWYgQHRyaWdnZXJTaG93TGlzdC5sZW5ndGggPiAwXG4gICAgICBmb3IgaW5kZXggaW4gQHRyaWdnZXJTaG93TGlzdFxuICAgICAgICBAcXVlc3Rpb25WaWV3c1tpbmRleF0/LnRyaWdnZXIgXCJzaG93XCJcbiAgICAgIEB0cmlnZ2VyU2hvd0xpc3QgPSBbXVxuXG4gICAgQHVwZGF0ZVNraXBMb2dpYygpIGlmIEBleGVjdXRlUmVhZHlcblxuXG4gIHVwZGF0ZVF1ZXN0aW9uVmlzaWJpbGl0eTogLT5cblxuICAgIHJldHVybiB1bmxlc3MgQG1vZGVsLmdldChcImZvY3VzTW9kZVwiKVxuXG4gICAgaWYgQHF1ZXN0aW9uSW5kZXggPT0gQHF1ZXN0aW9uVmlld3MubGVuZ3RoXG4gICAgICBAJGVsLmZpbmQoXCIjc3VtbWFyeV9jb250YWluZXJcIikuaHRtbCBcIlxuICAgICAgICBsYXN0IHBhZ2UgaGVyZVxuICAgICAgXCJcbiAgICAgIEAkZWwuZmluZChcIiNuZXh0X3F1ZXN0aW9uXCIpLmhpZGUoKVxuICAgIGVsc2VcbiAgICAgIEAkZWwuZmluZChcIiNzdW1tYXJ5X2NvbnRhaW5lclwiKS5lbXB0eSgpXG4gICAgICBAJGVsLmZpbmQoXCIjbmV4dF9xdWVzdGlvblwiKS5zaG93KClcblxuICAgICRxdWVzdGlvbnMgPSBAJGVsLmZpbmQoXCIucXVlc3Rpb25cIilcbiAgICAkcXVlc3Rpb25zLmhpZGUoKVxuICAgICRxdWVzdGlvbnMuZXEoQHF1ZXN0aW9uSW5kZXgpLnNob3coKVxuXG4gICAgIyB0cmlnZ2VyIHRoZSBxdWVzdGlvbiB0byBydW4gaXQncyBkaXNwbGF5IGNvZGUgaWYgdGhlIHN1YnRlc3QncyBkaXNwbGF5Y29kZSBoYXMgYWxyZWFkeSByYW5cbiAgICAjIGlmIG5vdCwgYWRkIGl0IHRvIGEgbGlzdCB0byBydW4gbGF0ZXIuXG4gICAgaWYgQGV4ZWN1dGVSZWFkeSBcbiAgICAgIEBxdWVzdGlvblZpZXdzW0BxdWVzdGlvbkluZGV4XS50cmlnZ2VyIFwic2hvd1wiXG4gICAgZWxzZVxuICAgICAgQHRyaWdnZXJTaG93TGlzdCA9IFtdIGlmIG5vdCBAdHJpZ2dlclNob3dMaXN0XG4gICAgICBAdHJpZ2dlclNob3dMaXN0LnB1c2ggQHF1ZXN0aW9uSW5kZXhcblxuICBzaG93UXVlc3Rpb246IChpbmRleCkgLT5cbiAgICBAcXVlc3Rpb25JbmRleCA9IGluZGV4IGlmIF8uaXNOdW1iZXIoaW5kZXgpICYmIGluZGV4IDwgQHF1ZXN0aW9uVmlld3MubGVuZ3RoICYmIGluZGV4ID4gMFxuICAgIEB1cGRhdGVRdWVzdGlvblZpc2liaWxpdHkoKVxuICAgIEB1cGRhdGVQcm9ncmVzc0J1dHRvbnMoKVxuXG4gIGkxOG46IC0+XG4gICAgQHRleHQgPSBcbiAgICAgIHBsZWFzZUFuc3dlciA6IHQoXCJTdXJ2ZXlSdW5WaWV3Lm1lc3NhZ2UucGxlYXNlX2Fuc3dlclwiKVxuICAgICAgY29ycmVjdEVycm9ycyA6IHQoXCJTdXJ2ZXlSdW5WaWV3Lm1lc3NhZ2UuY29ycmVjdF9lcnJvcnNcIilcbiAgICAgIG5vdEVub3VnaCA6IF8odChcIlN1cnZleVJ1blZpZXcubWVzc2FnZS5ub3RfZW5vdWdoXCIpKS5lc2NhcGUoKVxuICAgICAgXG4gICAgICBwcmV2aW91c1F1ZXN0aW9uIDogdChcIlN1cnZleVJ1blZpZXcuYnV0dG9uLnByZXZpb3VzX3F1ZXN0aW9uXCIpXG4gICAgICBuZXh0UXVlc3Rpb24gOiB0KFwiU3VydmV5UnVuVmlldy5idXR0b24ubmV4dF9xdWVzdGlvblwiKVxuXG5cblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBAbW9kZWwgICAgICAgICA9IG9wdGlvbnMubW9kZWxcbiAgICBAcGFyZW50ICAgICAgICA9IG9wdGlvbnMucGFyZW50XG4gICAgQGRhdGFFbnRyeSAgICAgPSBvcHRpb25zLmRhdGFFbnRyeVxuICAgIEBpc09ic2VydmF0aW9uID0gb3B0aW9ucy5pc09ic2VydmF0aW9uXG4gICAgQGZvY3VzTW9kZSAgICAgPSBAbW9kZWwuZ2V0Qm9vbGVhbihcImZvY3VzTW9kZVwiKVxuICAgIEBxdWVzdGlvbkluZGV4ID0gMCBpZiBAZm9jdXNNb2RlXG4gICAgQHF1ZXN0aW9uVmlld3MgPSBbXVxuICAgIEBhbnN3ZXJlZCAgICAgID0gW11cbiAgICBAcmVuZGVyQ291bnQgICA9IDBcblxuICAgIEBpMThuKClcblxuICAgIEBxdWVzdGlvbnMgICAgID0gbmV3IFF1ZXN0aW9ucygpXG4gICAgIyBAcXVlc3Rpb25zLmRiLnZpZXcgPSBcInF1ZXN0aW9uc0J5U3VidGVzdElkXCIgQnJpbmcgdGhpcyBiYWNrIHdoZW4gcHJvdG90eXBlcyBtYWtlIHNlbnNlIGFnYWluXG4gICAgQHF1ZXN0aW9ucy5mZXRjaFxuICAgICAga2V5OiBcInFcIiArIEBtb2RlbC5nZXQoXCJhc3Nlc3NtZW50SWRcIilcbiAgICAgIHN1Y2Nlc3M6IChjb2xsZWN0aW9uKSA9PlxuICAgICAgICBAcXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9ucyBjb2xsZWN0aW9uLndoZXJlIHtcInN1YnRlc3RJZFwiOkBtb2RlbC5pZH0gXG4gICAgICAgIEBxdWVzdGlvbnMuc29ydCgpXG4gICAgICAgIEByZWFkeSA9IHRydWVcbiAgICAgICAgQHJlbmRlcigpXG5cbiAgIyB3aGVuIGEgcXVlc3Rpb24gaXMgYW5zd2VyZWRcbiAgb25RdWVzdGlvbkFuc3dlcjogKGVsZW1lbnQpID0+XG5cbiAgICByZXR1cm4gdW5sZXNzIEByZW5kZXJDb3VudCA9PSBAcXVlc3Rpb25zLmxlbmd0aFxuXG4gICAgaWYgQGlzT2JzZXJ2YXRpb25cblxuICAgICAgIyBmaW5kIHRoZSB2aWV3IG9mIHRoZSBxdWVzdGlvblxuICAgICAgY2lkID0gJChlbGVtZW50KS5hdHRyKFwiZGF0YS1jaWRcIilcbiAgICAgIGZvciB2aWV3IGluIEBxdWVzdGlvblZpZXdzXG4gICAgICAgIGlmIHZpZXcuY2lkID09IGNpZCAmJiB2aWV3LnR5cGUgIT0gXCJtdWx0aXBsZVwiICMgaWYgaXQncyBtdWx0aXBsZSBkb24ndCBnbyBzY3JvbGxpblxuXG4gICAgICAgICAgIyBmaW5kIGxhc3Qgb3IgbmV4dCBub3Qgc2tpcHBlZFxuICAgICAgICAgIG5leHQgPSAkKHZpZXcuZWwpLm5leHQoKVxuICAgICAgICAgIHdoaWxlIG5leHQubGVuZ3RoICE9IDAgJiYgbmV4dC5oYXNDbGFzcyhcImRpc2FibGVkX3NraXBwZWRcIilcbiAgICAgICAgICAgIG5leHQgPSAkKG5leHQpLm5leHQoKVxuICAgICAgICAgIFxuICAgICAgICAgICMgaWYgaXQncyBub3QgdGhlIGxhc3QsIHNjcm9sbCB0byBpdFxuICAgICAgICAgIGlmIG5leHQubGVuZ3RoICE9IDBcbiAgICAgICAgICAgIG5leHQuc2Nyb2xsVG8oKVxuXG4gICAgIyBhdXRvIHN0b3AgYWZ0ZXIgbGltaXRcbiAgICBAYXV0b3N0b3BwZWQgICAgPSBmYWxzZVxuICAgIGF1dG9zdG9wTGltaXQgICA9IHBhcnNlSW50KEBtb2RlbC5nZXQoXCJhdXRvc3RvcExpbWl0XCIpKSB8fCAwXG4gICAgbG9uZ2VzdFNlcXVlbmNlID0gMFxuICAgIGF1dG9zdG9wQ291bnQgICA9IDBcblxuICAgIGlmIGF1dG9zdG9wTGltaXQgPiAwXG4gICAgICBmb3IgaSBpbiBbMS4uQHF1ZXN0aW9uVmlld3MubGVuZ3RoXSAjIGp1c3QgaW4gY2FzZSB0aGV5IGNhbid0IGNvdW50XG4gICAgICAgIGN1cnJlbnRBbnN3ZXIgPSBAcXVlc3Rpb25WaWV3c1tpLTFdLmFuc3dlclxuICAgICAgICBpZiBjdXJyZW50QW5zd2VyID09IFwiMFwiIG9yIGN1cnJlbnRBbnN3ZXIgPT0gXCI5XCJcbiAgICAgICAgICBhdXRvc3RvcENvdW50KytcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGF1dG9zdG9wQ291bnQgPSAwXG4gICAgICAgIGxvbmdlc3RTZXF1ZW5jZSA9IE1hdGgubWF4KGxvbmdlc3RTZXF1ZW5jZSwgYXV0b3N0b3BDb3VudClcbiAgICAgICAgIyBpZiB0aGUgdmFsdWUgaXMgc2V0LCB3ZSd2ZSBnb3QgYSB0aHJlc2hvbGQgZXhjZWVkaW5nIHJ1biwgYW5kIGl0J3Mgbm90IGFscmVhZHkgYXV0b3N0b3BwZWRcbiAgICAgICAgaWYgYXV0b3N0b3BMaW1pdCAhPSAwICYmIGxvbmdlc3RTZXF1ZW5jZSA+PSBhdXRvc3RvcExpbWl0ICYmIG5vdCBAYXV0b3N0b3BwZWRcbiAgICAgICAgICBAYXV0b3N0b3BwZWQgPSB0cnVlXG4gICAgICAgICAgQGF1dG9zdG9wSW5kZXggPSBpXG4gICAgQHVwZGF0ZUF1dG9zdG9wKClcbiAgICBAdXBkYXRlU2tpcExvZ2ljKClcbiAgXG4gIHVwZGF0ZUF1dG9zdG9wOiAtPlxuICAgIGF1dG9zdG9wTGltaXQgPSBwYXJzZUludChAbW9kZWwuZ2V0KFwiYXV0b3N0b3BMaW1pdFwiKSkgfHwgMFxuICAgIGZvciB2aWV3LCBpIGluIEBxdWVzdGlvblZpZXdzXG4gICAgICBpZiBpID4gKEBhdXRvc3RvcEluZGV4IC0gMSlcbiAgICAgICAgdmlldy4kZWwuYWRkQ2xhc3MgICAgXCJkaXNhYmxlZF9hdXRvc3RvcFwiIGlmICAgICBAYXV0b3N0b3BwZWRcbiAgICAgICAgdmlldy4kZWwucmVtb3ZlQ2xhc3MgXCJkaXNhYmxlZF9hdXRvc3RvcFwiIGlmIG5vdCBAYXV0b3N0b3BwZWRcblxuICB1cGRhdGVTa2lwTG9naWM6ID0+XG4gICAgZm9yIHF1ZXN0aW9uVmlldyBpbiBAcXVlc3Rpb25WaWV3c1xuICAgICAgcXVlc3Rpb24gPSBxdWVzdGlvblZpZXcubW9kZWxcbiAgICAgIHNraXBMb2dpY0NvZGUgPSBxdWVzdGlvbi5nZXQgXCJza2lwTG9naWNcIlxuICAgICAgaWYgbm90IF8uaXNFbXB0eVN0cmluZyhza2lwTG9naWNDb2RlKVxuICAgICAgICB0cnlcbiAgICAgICAgICByZXN1bHQgPSBDb2ZmZWVTY3JpcHQuZXZhbC5hcHBseShALCBbc2tpcExvZ2ljQ29kZV0pXG4gICAgICAgIGNhdGNoIGVycm9yXG4gICAgICAgICAgbmFtZSA9ICgoL2Z1bmN0aW9uICguezEsfSlcXCgvKS5leGVjKGVycm9yLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkpWzFdKVxuICAgICAgICAgIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlXG4gICAgICAgICAgYWxlcnQgXCJTa2lwIGxvZ2ljIGVycm9yIGluIHF1ZXN0aW9uICN7cXVlc3Rpb24uZ2V0KCduYW1lJyl9XFxuXFxuI3tuYW1lfVxcblxcbiN7bWVzc2FnZX1cIlxuXG4gICAgICAgIGlmIHJlc3VsdFxuICAgICAgICAgIHF1ZXN0aW9uVmlldy4kZWwuYWRkQ2xhc3MgXCJkaXNhYmxlZF9za2lwcGVkXCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHF1ZXN0aW9uVmlldy4kZWwucmVtb3ZlQ2xhc3MgXCJkaXNhYmxlZF9za2lwcGVkXCJcbiAgICAgIHF1ZXN0aW9uVmlldy51cGRhdGVWYWxpZGl0eSgpXG5cbiAgaXNWYWxpZDogKHZpZXdzID0gQHF1ZXN0aW9uVmlld3MpIC0+XG4gICAgcmV0dXJuIHRydWUgaWYgbm90IHZpZXdzPyAjIGlmIHRoZXJlJ3Mgbm90aGluZyB0byBjaGVjaywgaXQgbXVzdCBiZSBnb29kXG4gICAgdmlld3MgPSBbdmlld3NdIGlmIG5vdCBfLmlzQXJyYXkodmlld3MpXG4gICAgZm9yIHF2LCBpIGluIHZpZXdzXG4gICAgICBxdi51cGRhdGVWYWxpZGl0eSgpXG4gICAgICAjIGNhbiB3ZSBza2lwIGl0P1xuICAgICAgaWYgbm90IHF2Lm1vZGVsLmdldEJvb2xlYW4oXCJza2lwcGFibGVcIilcbiAgICAgICAgIyBpcyBpdCB2YWxpZFxuICAgICAgICBpZiBub3QgcXYuaXNWYWxpZFxuICAgICAgICAgICMgcmVkIGFsZXJ0ISFcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICByZXR1cm4gdHJ1ZVxuXG4gIGdldFNraXBwZWQ6IC0+XG4gICAgcmVzdWx0ID0ge31cbiAgICByZXN1bHRbQHF1ZXN0aW9ucy5tb2RlbHNbaV0uZ2V0KFwibmFtZVwiKV0gPSBcInNraXBwZWRcIiBmb3IgcXYsIGkgaW4gQHF1ZXN0aW9uVmlld3NcbiAgICByZXR1cm4gcmVzdWx0XG5cbiAgZ2V0UmVzdWx0OiA9PlxuICAgIHJlc3VsdCA9IHt9XG4gICAgZm9yIHF2LCBpIGluIEBxdWVzdGlvblZpZXdzXG4gICAgICByZXN1bHRbQHF1ZXN0aW9ucy5tb2RlbHNbaV0uZ2V0KFwibmFtZVwiKV0gPVxuICAgICAgICBpZiBxdi5ub3RBc2tlZCAjIGJlY2F1c2Ugb2YgZ3JpZCBzY29yZVxuICAgICAgICAgIHF2Lm5vdEFza2VkUmVzdWx0XG4gICAgICAgIGVsc2UgaWYgbm90IF8uaXNFbXB0eShxdi5hbnN3ZXIpICMgdXNlIGFuc3dlclxuICAgICAgICAgIHF2LmFuc3dlclxuICAgICAgICBlbHNlIGlmIHF2LnNraXBwZWQgXG4gICAgICAgICAgcXYuc2tpcHBlZFJlc3VsdFxuICAgICAgICBlbHNlIGlmIHF2LiRlbC5oYXNDbGFzcyhcImRpc2FibGVkX3NraXBwZWRcIilcbiAgICAgICAgICBxdi5sb2dpY1NraXBwZWRSZXN1bHRcbiAgICAgICAgZWxzZSBpZiBxdi4kZWwuaGFzQ2xhc3MoXCJkaXNhYmxlZF9hdXRvc3RvcFwiKVxuICAgICAgICAgIHF2Lm5vdEFza2VkQXV0b3N0b3BSZXN1bHRcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHF2LmFuc3dlclxuICAgIHJldHVybiByZXN1bHRcblxuICBzaG93RXJyb3JzOiAodmlld3MgPSBAcXVlc3Rpb25WaWV3cykgLT5cbiAgICBAJGVsLmZpbmQoJy5tZXNzYWdlJykucmVtb3ZlKClcbiAgICBmaXJzdCA9IHRydWVcbiAgICB2aWV3cyA9IFt2aWV3c10gaWYgbm90IF8uaXNBcnJheSh2aWV3cylcbiAgICBmb3IgcXYsIGkgaW4gdmlld3NcbiAgICAgIGlmIG5vdCBfLmlzU3RyaW5nKHF2KVxuICAgICAgICBtZXNzYWdlID0gXCJcIlxuICAgICAgICBpZiBub3QgcXYuaXNWYWxpZFxuXG4gICAgICAgICAgIyBoYW5kbGUgY3VzdG9tIHZhbGlkYXRpb24gZXJyb3IgbWVzc2FnZXNcbiAgICAgICAgICBjdXN0b21NZXNzYWdlID0gcXYubW9kZWwuZ2V0KFwiY3VzdG9tVmFsaWRhdGlvbk1lc3NhZ2VcIilcbiAgICAgICAgICBpZiBub3QgXy5pc0VtcHR5KGN1c3RvbU1lc3NhZ2UpXG4gICAgICAgICAgICBtZXNzYWdlID0gY3VzdG9tTWVzc2FnZVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBAdGV4dC5wbGVhc2VBbnN3ZXJcblxuICAgICAgICAgIGlmIGZpcnN0ID09IHRydWVcbiAgICAgICAgICAgIEBzaG93UXVlc3Rpb24oaSkgaWYgdmlld3MgPT0gQHF1ZXN0aW9uVmlld3NcbiAgICAgICAgICAgIHF2LiRlbC5zY3JvbGxUbygpXG4gICAgICAgICAgICBVdGlscy5taWRBbGVydCBAdGV4dC5jb3JyZWN0RXJyb3JzXG4gICAgICAgICAgICBmaXJzdCA9IGZhbHNlXG4gICAgICAgIHF2LnNldE1lc3NhZ2UgbWVzc2FnZVxuXG4gIHJlbmRlcjogLT5cbiAgICByZXR1cm4gdW5sZXNzIEByZWFkeVxuICAgIEAkZWwuZW1wdHkoKVxuXG4gICAgdW5sZXNzIEBkYXRhRW50cnlcbiAgICAgICMgY2xhc3MgZG9lc24ndCBoYXZlIHRoaXMgaGVpcmFyY2h5XG4gICAgICBpZiBAcGFyZW50PyBhbmQgQHBhcmVudC5wYXJlbnQ/IGFuZCBAcGFyZW50LnBhcmVudC5yZXN1bHQ/XG4gICAgICAgIHByZXZpb3VzID0gQHBhcmVudC5wYXJlbnQucmVzdWx0LmdldEJ5SGFzaChAbW9kZWwuZ2V0KCdoYXNoJykpXG5cbiAgICBub3RBc2tlZENvdW50ID0gMFxuICAgIEBxdWVzdGlvbnMuc29ydCgpXG4gICAgaWYgQHF1ZXN0aW9ucy5tb2RlbHM/XG4gICAgICBmb3IgcXVlc3Rpb24sIGkgaW4gQHF1ZXN0aW9ucy5tb2RlbHNcbiAgICAgICAgIyBza2lwIHRoZSByZXN0IGlmIHNjb3JlIG5vdCBoaWdoIGVub3VnaFxuXG4gICAgICAgIHJlcXVpcmVkID0gcGFyc2VJbnQocXVlc3Rpb24uZ2V0KFwibGlua2VkR3JpZFNjb3JlXCIpKSB8fCAwXG5cbiAgICAgICAgaXNOb3RBc2tlZCA9ICggKCByZXF1aXJlZCAhPSAwICYmIEBwYXJlbnQuZ2V0R3JpZFNjb3JlKCkgPCByZXF1aXJlZCApIHx8IEBwYXJlbnQuZ3JpZFdhc0F1dG9zdG9wcGVkKCkgKSAmJiBAcGFyZW50LmdldEdyaWRTY29yZSgpICE9IGZhbHNlXG5cbiAgICAgICAgaWYgaXNOb3RBc2tlZCB0aGVuIG5vdEFza2VkQ291bnQrK1xuXG4gICAgICAgIG5hbWUgICA9IHF1ZXN0aW9uLmVzY2FwZShcIm5hbWVcIikucmVwbGFjZSAvW15BLVphLXowLTlfXS9nLCBcIi1cIlxuICAgICAgICBhbnN3ZXIgPSBwcmV2aW91c1tuYW1lXSBpZiBwcmV2aW91c1xuICAgICAgICBcbiAgICAgICAgb25lVmlldyA9IG5ldyBRdWVzdGlvblJ1blZpZXcgXG4gICAgICAgICAgbW9kZWwgICAgICAgICA6IHF1ZXN0aW9uXG4gICAgICAgICAgcGFyZW50ICAgICAgICA6IEBcbiAgICAgICAgICBkYXRhRW50cnkgICAgIDogQGRhdGFFbnRyeVxuICAgICAgICAgIG5vdEFza2VkICAgICAgOiBpc05vdEFza2VkXG4gICAgICAgICAgaXNPYnNlcnZhdGlvbiA6IEBpc09ic2VydmF0aW9uXG4gICAgICAgICAgYW5zd2VyICAgICAgICA6IGFuc3dlclxuXG4gICAgICAgIG9uZVZpZXcub24gXCJyZW5kZXJlZFwiLCBAb25RdWVzdGlvblJlbmRlcmVkXG4gICAgICAgIG9uZVZpZXcub24gXCJhbnN3ZXIgc2Nyb2xsXCIsIEBvblF1ZXN0aW9uQW5zd2VyXG5cbiAgICAgICAgQHF1ZXN0aW9uVmlld3NbaV0gPSBvbmVWaWV3XG4gICAgICAgIEAkZWwuYXBwZW5kIG9uZVZpZXcuZWxcblxuICAgICAgZm9yIHF1ZXN0aW9uVmlldyBpbiBAcXVlc3Rpb25WaWV3c1xuICAgICAgICBxdWVzdGlvblZpZXcucmVuZGVyKClcblxuXG4gICAgICBpZiBAZm9jdXNNb2RlXG4gICAgICAgIEB1cGRhdGVRdWVzdGlvblZpc2liaWxpdHkoKVxuICAgICAgICBAJGVsLmFwcGVuZCBcIlxuICAgICAgICAgIDxkaXYgaWQ9J3N1bW1hcnlfY29udGFpbmVyJz48L2Rpdj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSduYXZpZ2F0aW9uIHByZXZfcXVlc3Rpb24nPiN7QHRleHQucHJldmlvdXNRdWVzdGlvbn08L2J1dHRvbj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSduYXZpZ2F0aW9uIG5leHRfcXVlc3Rpb24nPiN7QHRleHQubmV4dFF1ZXN0aW9ufTwvYnV0dG9uPlxuICAgICAgICBcIlxuICAgICAgICBAdXBkYXRlUHJvZ3Jlc3NCdXR0b25zKClcblxuICAgIGlmIEBxdWVzdGlvbnMubGVuZ3RoID09IG5vdEFza2VkQ291bnRcbiAgICAgIEBwYXJlbnQubmV4dD8oKVxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgb25RdWVzdGlvblJlbmRlcmVkOiA9PlxuICAgIEByZW5kZXJDb3VudCsrXG4gICAgaWYgQHJlbmRlckNvdW50ID09IEBxdWVzdGlvbnMubGVuZ3RoXG4gICAgICBAdHJpZ2dlciBcInJlYWR5XCJcbiAgICAgIEB1cGRhdGVTa2lwTG9naWMoKVxuICAgIEB0cmlnZ2VyIFwic3ViUmVuZGVyZWRcIlxuXG4gIG9uQ2xvc2U6LT5cbiAgICBmb3IgcXYgaW4gQHF1ZXN0aW9uVmlld3NcbiAgICAgIHF2LmNsb3NlPygpXG4gICAgQHF1ZXN0aW9uVmlld3MgPSBbXVxuIiwidmFyIFN1cnZleVJ1blZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuU3VydmV5UnVuVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChTdXJ2ZXlSdW5WaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBTdXJ2ZXlSdW5WaWV3KCkge1xuICAgIHRoaXMub25RdWVzdGlvblJlbmRlcmVkID0gYmluZCh0aGlzLm9uUXVlc3Rpb25SZW5kZXJlZCwgdGhpcyk7XG4gICAgdGhpcy5nZXRSZXN1bHQgPSBiaW5kKHRoaXMuZ2V0UmVzdWx0LCB0aGlzKTtcbiAgICB0aGlzLnVwZGF0ZVNraXBMb2dpYyA9IGJpbmQodGhpcy51cGRhdGVTa2lwTG9naWMsIHRoaXMpO1xuICAgIHRoaXMub25RdWVzdGlvbkFuc3dlciA9IGJpbmQodGhpcy5vblF1ZXN0aW9uQW5zd2VyLCB0aGlzKTtcbiAgICB0aGlzLnVwZGF0ZUV4ZWN1dGVSZWFkeSA9IGJpbmQodGhpcy51cGRhdGVFeGVjdXRlUmVhZHksIHRoaXMpO1xuICAgIHJldHVybiBTdXJ2ZXlSdW5WaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgU3VydmV5UnVuVmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJTdXJ2ZXlSdW5WaWV3XCI7XG5cbiAgU3VydmV5UnVuVmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdjbGljayAubmV4dF9xdWVzdGlvbic6ICduZXh0UXVlc3Rpb24nLFxuICAgICdjbGljayAucHJldl9xdWVzdGlvbic6ICdwcmV2UXVlc3Rpb24nXG4gIH07XG5cbiAgU3VydmV5UnVuVmlldy5wcm90b3R5cGUubmV4dFF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGN1cnJlbnRRdWVzdGlvblZpZXcsIGksIGlzQXV0b3N0b3BwZWQsIGlzQXZhaWxhYmxlLCBpc0xvZ2ljU2tpcHBlZCwgaiwgbGVuLCBwbGFubmVkSW5kZXgsIHF1ZXN0aW9uLCByZWY7XG4gICAgY3VycmVudFF1ZXN0aW9uVmlldyA9IHRoaXMucXVlc3Rpb25WaWV3c1t0aGlzLnF1ZXN0aW9uSW5kZXhdO1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKGN1cnJlbnRRdWVzdGlvblZpZXcpKSB7XG4gICAgICByZXR1cm4gdGhpcy5zaG93RXJyb3JzKGN1cnJlbnRRdWVzdGlvblZpZXcpO1xuICAgIH1cbiAgICBpc0F2YWlsYWJsZSA9IFtdO1xuICAgIHJlZiA9IHRoaXMucXVlc3Rpb25WaWV3cztcbiAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgcXVlc3Rpb24gPSByZWZbaV07XG4gICAgICBpc0F1dG9zdG9wcGVkID0gcXVlc3Rpb24uJGVsLmhhc0NsYXNzKFwiZGlzYWJsZWRfYXV0b3N0b3BcIik7XG4gICAgICBpc0xvZ2ljU2tpcHBlZCA9IHF1ZXN0aW9uLiRlbC5oYXNDbGFzcyhcImRpc2FibGVkX3NraXBwZWRcIik7XG4gICAgICBpZiAoIShpc0F1dG9zdG9wcGVkIHx8IGlzTG9naWNTa2lwcGVkKSkge1xuICAgICAgICBpc0F2YWlsYWJsZS5wdXNoKGkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpc0F2YWlsYWJsZSA9IF8uZmlsdGVyKGlzQXZhaWxhYmxlLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBlID4gX3RoaXMucXVlc3Rpb25JbmRleDtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICAgIGlmIChpc0F2YWlsYWJsZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHBsYW5uZWRJbmRleCA9IHRoaXMucXVlc3Rpb25JbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgcGxhbm5lZEluZGV4ID0gTWF0aC5taW4uYXBwbHkocGxhbm5lZEluZGV4LCBpc0F2YWlsYWJsZSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnF1ZXN0aW9uSW5kZXggIT09IHBsYW5uZWRJbmRleCkge1xuICAgICAgdGhpcy5xdWVzdGlvbkluZGV4ID0gcGxhbm5lZEluZGV4O1xuICAgICAgdGhpcy51cGRhdGVRdWVzdGlvblZpc2liaWxpdHkoKTtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZVByb2dyZXNzQnV0dG9ucygpO1xuICAgIH1cbiAgfTtcblxuICBTdXJ2ZXlSdW5WaWV3LnByb3RvdHlwZS5wcmV2UXVlc3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VycmVudFF1ZXN0aW9uVmlldywgaSwgaXNBdXRvc3RvcHBlZCwgaXNBdmFpbGFibGUsIGlzTG9naWNTa2lwcGVkLCBqLCBsZW4sIHBsYW5uZWRJbmRleCwgcXVlc3Rpb24sIHJlZjtcbiAgICBjdXJyZW50UXVlc3Rpb25WaWV3ID0gdGhpcy5xdWVzdGlvblZpZXdzW3RoaXMucXVlc3Rpb25JbmRleF07XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQoY3VycmVudFF1ZXN0aW9uVmlldykpIHtcbiAgICAgIHJldHVybiB0aGlzLnNob3dFcnJvcnMoY3VycmVudFF1ZXN0aW9uVmlldyk7XG4gICAgfVxuICAgIGlzQXZhaWxhYmxlID0gW107XG4gICAgcmVmID0gdGhpcy5xdWVzdGlvblZpZXdzO1xuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICBxdWVzdGlvbiA9IHJlZltpXTtcbiAgICAgIGlzQXV0b3N0b3BwZWQgPSBxdWVzdGlvbi4kZWwuaGFzQ2xhc3MoXCJkaXNhYmxlZF9hdXRvc3RvcFwiKTtcbiAgICAgIGlzTG9naWNTa2lwcGVkID0gcXVlc3Rpb24uJGVsLmhhc0NsYXNzKFwiZGlzYWJsZWRfc2tpcHBlZFwiKTtcbiAgICAgIGlmICghKGlzQXV0b3N0b3BwZWQgfHwgaXNMb2dpY1NraXBwZWQpKSB7XG4gICAgICAgIGlzQXZhaWxhYmxlLnB1c2goaSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlzQXZhaWxhYmxlID0gXy5maWx0ZXIoaXNBdmFpbGFibGUsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIGUgPCBfdGhpcy5xdWVzdGlvbkluZGV4O1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgaWYgKGlzQXZhaWxhYmxlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcGxhbm5lZEluZGV4ID0gdGhpcy5xdWVzdGlvbkluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBwbGFubmVkSW5kZXggPSBNYXRoLm1heC5hcHBseShwbGFubmVkSW5kZXgsIGlzQXZhaWxhYmxlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucXVlc3Rpb25JbmRleCAhPT0gcGxhbm5lZEluZGV4KSB7XG4gICAgICB0aGlzLnF1ZXN0aW9uSW5kZXggPSBwbGFubmVkSW5kZXg7XG4gICAgICB0aGlzLnVwZGF0ZVF1ZXN0aW9uVmlzaWJpbGl0eSgpO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlUHJvZ3Jlc3NCdXR0b25zKCk7XG4gICAgfVxuICB9O1xuXG4gIFN1cnZleVJ1blZpZXcucHJvdG90eXBlLnVwZGF0ZVByb2dyZXNzQnV0dG9ucyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkbmV4dCwgJHByZXYsIGksIGlzQXV0b3N0b3BwZWQsIGlzQXZhaWxhYmxlLCBpc0xvZ2ljU2tpcHBlZCwgaiwgbGVuLCBtYXhpbXVtLCBtaW5pbXVtLCBxdWVzdGlvbiwgcmVmO1xuICAgIGlzQXZhaWxhYmxlID0gW107XG4gICAgcmVmID0gdGhpcy5xdWVzdGlvblZpZXdzO1xuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICBxdWVzdGlvbiA9IHJlZltpXTtcbiAgICAgIGlzQXV0b3N0b3BwZWQgPSBxdWVzdGlvbi4kZWwuaGFzQ2xhc3MoXCJkaXNhYmxlZF9hdXRvc3RvcFwiKTtcbiAgICAgIGlzTG9naWNTa2lwcGVkID0gcXVlc3Rpb24uJGVsLmhhc0NsYXNzKFwiZGlzYWJsZWRfc2tpcHBlZFwiKTtcbiAgICAgIGlmICghKGlzQXV0b3N0b3BwZWQgfHwgaXNMb2dpY1NraXBwZWQpKSB7XG4gICAgICAgIGlzQXZhaWxhYmxlLnB1c2goaSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlzQXZhaWxhYmxlLnB1c2godGhpcy5xdWVzdGlvbkluZGV4KTtcbiAgICAkcHJldiA9IHRoaXMuJGVsLmZpbmQoXCIucHJldl9xdWVzdGlvblwiKTtcbiAgICAkbmV4dCA9IHRoaXMuJGVsLmZpbmQoXCIubmV4dF9xdWVzdGlvblwiKTtcbiAgICBtaW5pbXVtID0gTWF0aC5taW4uYXBwbHkobWluaW11bSwgaXNBdmFpbGFibGUpO1xuICAgIG1heGltdW0gPSBNYXRoLm1heC5hcHBseShtYXhpbXVtLCBpc0F2YWlsYWJsZSk7XG4gICAgaWYgKHRoaXMucXVlc3Rpb25JbmRleCA9PT0gbWluaW11bSkge1xuICAgICAgJHByZXYuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkcHJldi5zaG93KCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnF1ZXN0aW9uSW5kZXggPT09IG1heGltdW0pIHtcbiAgICAgIHJldHVybiAkbmV4dC5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkbmV4dC5zaG93KCk7XG4gICAgfVxuICB9O1xuXG4gIFN1cnZleVJ1blZpZXcucHJvdG90eXBlLnVwZGF0ZUV4ZWN1dGVSZWFkeSA9IGZ1bmN0aW9uKHJlYWR5KSB7XG4gICAgdmFyIGluZGV4LCBqLCBsZW4sIHJlZiwgcmVmMTtcbiAgICB0aGlzLmV4ZWN1dGVSZWFkeSA9IHJlYWR5O1xuICAgIGlmICh0aGlzLnRyaWdnZXJTaG93TGlzdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnRyaWdnZXJTaG93TGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICByZWYgPSB0aGlzLnRyaWdnZXJTaG93TGlzdDtcbiAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICBpbmRleCA9IHJlZltqXTtcbiAgICAgICAgaWYgKChyZWYxID0gdGhpcy5xdWVzdGlvblZpZXdzW2luZGV4XSkgIT0gbnVsbCkge1xuICAgICAgICAgIHJlZjEudHJpZ2dlcihcInNob3dcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMudHJpZ2dlclNob3dMaXN0ID0gW107XG4gICAgfVxuICAgIGlmICh0aGlzLmV4ZWN1dGVSZWFkeSkge1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlU2tpcExvZ2ljKCk7XG4gICAgfVxuICB9O1xuXG4gIFN1cnZleVJ1blZpZXcucHJvdG90eXBlLnVwZGF0ZVF1ZXN0aW9uVmlzaWJpbGl0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkcXVlc3Rpb25zO1xuICAgIGlmICghdGhpcy5tb2RlbC5nZXQoXCJmb2N1c01vZGVcIikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMucXVlc3Rpb25JbmRleCA9PT0gdGhpcy5xdWVzdGlvblZpZXdzLmxlbmd0aCkge1xuICAgICAgdGhpcy4kZWwuZmluZChcIiNzdW1tYXJ5X2NvbnRhaW5lclwiKS5odG1sKFwibGFzdCBwYWdlIGhlcmVcIik7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiI25leHRfcXVlc3Rpb25cIikuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiI3N1bW1hcnlfY29udGFpbmVyXCIpLmVtcHR5KCk7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiI25leHRfcXVlc3Rpb25cIikuc2hvdygpO1xuICAgIH1cbiAgICAkcXVlc3Rpb25zID0gdGhpcy4kZWwuZmluZChcIi5xdWVzdGlvblwiKTtcbiAgICAkcXVlc3Rpb25zLmhpZGUoKTtcbiAgICAkcXVlc3Rpb25zLmVxKHRoaXMucXVlc3Rpb25JbmRleCkuc2hvdygpO1xuICAgIGlmICh0aGlzLmV4ZWN1dGVSZWFkeSkge1xuICAgICAgcmV0dXJuIHRoaXMucXVlc3Rpb25WaWV3c1t0aGlzLnF1ZXN0aW9uSW5kZXhdLnRyaWdnZXIoXCJzaG93XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXRoaXMudHJpZ2dlclNob3dMaXN0KSB7XG4gICAgICAgIHRoaXMudHJpZ2dlclNob3dMaXN0ID0gW107XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy50cmlnZ2VyU2hvd0xpc3QucHVzaCh0aGlzLnF1ZXN0aW9uSW5kZXgpO1xuICAgIH1cbiAgfTtcblxuICBTdXJ2ZXlSdW5WaWV3LnByb3RvdHlwZS5zaG93UXVlc3Rpb24gPSBmdW5jdGlvbihpbmRleCkge1xuICAgIGlmIChfLmlzTnVtYmVyKGluZGV4KSAmJiBpbmRleCA8IHRoaXMucXVlc3Rpb25WaWV3cy5sZW5ndGggJiYgaW5kZXggPiAwKSB7XG4gICAgICB0aGlzLnF1ZXN0aW9uSW5kZXggPSBpbmRleDtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVRdWVzdGlvblZpc2liaWxpdHkoKTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVQcm9ncmVzc0J1dHRvbnMoKTtcbiAgfTtcblxuICBTdXJ2ZXlSdW5WaWV3LnByb3RvdHlwZS5pMThuID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCA9IHtcbiAgICAgIHBsZWFzZUFuc3dlcjogdChcIlN1cnZleVJ1blZpZXcubWVzc2FnZS5wbGVhc2VfYW5zd2VyXCIpLFxuICAgICAgY29ycmVjdEVycm9yczogdChcIlN1cnZleVJ1blZpZXcubWVzc2FnZS5jb3JyZWN0X2Vycm9yc1wiKSxcbiAgICAgIG5vdEVub3VnaDogXyh0KFwiU3VydmV5UnVuVmlldy5tZXNzYWdlLm5vdF9lbm91Z2hcIikpLmVzY2FwZSgpLFxuICAgICAgcHJldmlvdXNRdWVzdGlvbjogdChcIlN1cnZleVJ1blZpZXcuYnV0dG9uLnByZXZpb3VzX3F1ZXN0aW9uXCIpLFxuICAgICAgbmV4dFF1ZXN0aW9uOiB0KFwiU3VydmV5UnVuVmlldy5idXR0b24ubmV4dF9xdWVzdGlvblwiKVxuICAgIH07XG4gIH07XG5cbiAgU3VydmV5UnVuVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICAgIHRoaXMuZGF0YUVudHJ5ID0gb3B0aW9ucy5kYXRhRW50cnk7XG4gICAgdGhpcy5pc09ic2VydmF0aW9uID0gb3B0aW9ucy5pc09ic2VydmF0aW9uO1xuICAgIHRoaXMuZm9jdXNNb2RlID0gdGhpcy5tb2RlbC5nZXRCb29sZWFuKFwiZm9jdXNNb2RlXCIpO1xuICAgIGlmICh0aGlzLmZvY3VzTW9kZSkge1xuICAgICAgdGhpcy5xdWVzdGlvbkluZGV4ID0gMDtcbiAgICB9XG4gICAgdGhpcy5xdWVzdGlvblZpZXdzID0gW107XG4gICAgdGhpcy5hbnN3ZXJlZCA9IFtdO1xuICAgIHRoaXMucmVuZGVyQ291bnQgPSAwO1xuICAgIHRoaXMuaTE4bigpO1xuICAgIHRoaXMucXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9ucygpO1xuICAgIHJldHVybiB0aGlzLnF1ZXN0aW9ucy5mZXRjaCh7XG4gICAgICBrZXk6IFwicVwiICsgdGhpcy5tb2RlbC5nZXQoXCJhc3Nlc3NtZW50SWRcIiksXG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICBfdGhpcy5xdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zKGNvbGxlY3Rpb24ud2hlcmUoe1xuICAgICAgICAgICAgXCJzdWJ0ZXN0SWRcIjogX3RoaXMubW9kZWwuaWRcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgX3RoaXMucXVlc3Rpb25zLnNvcnQoKTtcbiAgICAgICAgICBfdGhpcy5yZWFkeSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlcigpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBTdXJ2ZXlSdW5WaWV3LnByb3RvdHlwZS5vblF1ZXN0aW9uQW5zd2VyID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHZhciBhdXRvc3RvcENvdW50LCBhdXRvc3RvcExpbWl0LCBjaWQsIGN1cnJlbnRBbnN3ZXIsIGksIGosIGssIGxlbiwgbG9uZ2VzdFNlcXVlbmNlLCBuZXh0LCByZWYsIHJlZjEsIHZpZXc7XG4gICAgaWYgKHRoaXMucmVuZGVyQ291bnQgIT09IHRoaXMucXVlc3Rpb25zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc09ic2VydmF0aW9uKSB7XG4gICAgICBjaWQgPSAkKGVsZW1lbnQpLmF0dHIoXCJkYXRhLWNpZFwiKTtcbiAgICAgIHJlZiA9IHRoaXMucXVlc3Rpb25WaWV3cztcbiAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICB2aWV3ID0gcmVmW2pdO1xuICAgICAgICBpZiAodmlldy5jaWQgPT09IGNpZCAmJiB2aWV3LnR5cGUgIT09IFwibXVsdGlwbGVcIikge1xuICAgICAgICAgIG5leHQgPSAkKHZpZXcuZWwpLm5leHQoKTtcbiAgICAgICAgICB3aGlsZSAobmV4dC5sZW5ndGggIT09IDAgJiYgbmV4dC5oYXNDbGFzcyhcImRpc2FibGVkX3NraXBwZWRcIikpIHtcbiAgICAgICAgICAgIG5leHQgPSAkKG5leHQpLm5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5leHQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICBuZXh0LnNjcm9sbFRvKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuYXV0b3N0b3BwZWQgPSBmYWxzZTtcbiAgICBhdXRvc3RvcExpbWl0ID0gcGFyc2VJbnQodGhpcy5tb2RlbC5nZXQoXCJhdXRvc3RvcExpbWl0XCIpKSB8fCAwO1xuICAgIGxvbmdlc3RTZXF1ZW5jZSA9IDA7XG4gICAgYXV0b3N0b3BDb3VudCA9IDA7XG4gICAgaWYgKGF1dG9zdG9wTGltaXQgPiAwKSB7XG4gICAgICBmb3IgKGkgPSBrID0gMSwgcmVmMSA9IHRoaXMucXVlc3Rpb25WaWV3cy5sZW5ndGg7IDEgPD0gcmVmMSA/IGsgPD0gcmVmMSA6IGsgPj0gcmVmMTsgaSA9IDEgPD0gcmVmMSA/ICsrayA6IC0taykge1xuICAgICAgICBjdXJyZW50QW5zd2VyID0gdGhpcy5xdWVzdGlvblZpZXdzW2kgLSAxXS5hbnN3ZXI7XG4gICAgICAgIGlmIChjdXJyZW50QW5zd2VyID09PSBcIjBcIiB8fCBjdXJyZW50QW5zd2VyID09PSBcIjlcIikge1xuICAgICAgICAgIGF1dG9zdG9wQ291bnQrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhdXRvc3RvcENvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBsb25nZXN0U2VxdWVuY2UgPSBNYXRoLm1heChsb25nZXN0U2VxdWVuY2UsIGF1dG9zdG9wQ291bnQpO1xuICAgICAgICBpZiAoYXV0b3N0b3BMaW1pdCAhPT0gMCAmJiBsb25nZXN0U2VxdWVuY2UgPj0gYXV0b3N0b3BMaW1pdCAmJiAhdGhpcy5hdXRvc3RvcHBlZCkge1xuICAgICAgICAgIHRoaXMuYXV0b3N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuYXV0b3N0b3BJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy51cGRhdGVBdXRvc3RvcCgpO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZVNraXBMb2dpYygpO1xuICB9O1xuXG4gIFN1cnZleVJ1blZpZXcucHJvdG90eXBlLnVwZGF0ZUF1dG9zdG9wID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGF1dG9zdG9wTGltaXQsIGksIGosIGxlbiwgcmVmLCByZXN1bHRzLCB2aWV3O1xuICAgIGF1dG9zdG9wTGltaXQgPSBwYXJzZUludCh0aGlzLm1vZGVsLmdldChcImF1dG9zdG9wTGltaXRcIikpIHx8IDA7XG4gICAgcmVmID0gdGhpcy5xdWVzdGlvblZpZXdzO1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgdmlldyA9IHJlZltpXTtcbiAgICAgIGlmIChpID4gKHRoaXMuYXV0b3N0b3BJbmRleCAtIDEpKSB7XG4gICAgICAgIGlmICh0aGlzLmF1dG9zdG9wcGVkKSB7XG4gICAgICAgICAgdmlldy4kZWwuYWRkQ2xhc3MoXCJkaXNhYmxlZF9hdXRvc3RvcFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuYXV0b3N0b3BwZWQpIHtcbiAgICAgICAgICByZXN1bHRzLnB1c2godmlldy4kZWwucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZF9hdXRvc3RvcFwiKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHZvaWQgMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdHMucHVzaCh2b2lkIDApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBTdXJ2ZXlSdW5WaWV3LnByb3RvdHlwZS51cGRhdGVTa2lwTG9naWMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZXJyb3IsIGosIGxlbiwgbWVzc2FnZSwgbmFtZSwgcXVlc3Rpb24sIHF1ZXN0aW9uVmlldywgcmVmLCByZXN1bHQsIHJlc3VsdHMsIHNraXBMb2dpY0NvZGU7XG4gICAgcmVmID0gdGhpcy5xdWVzdGlvblZpZXdzO1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHF1ZXN0aW9uVmlldyA9IHJlZltqXTtcbiAgICAgIHF1ZXN0aW9uID0gcXVlc3Rpb25WaWV3Lm1vZGVsO1xuICAgICAgc2tpcExvZ2ljQ29kZSA9IHF1ZXN0aW9uLmdldChcInNraXBMb2dpY1wiKTtcbiAgICAgIGlmICghXy5pc0VtcHR5U3RyaW5nKHNraXBMb2dpY0NvZGUpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzdWx0ID0gQ29mZmVlU2NyaXB0W1wiZXZhbFwiXS5hcHBseSh0aGlzLCBbc2tpcExvZ2ljQ29kZV0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgICBlcnJvciA9IGVycm9yMTtcbiAgICAgICAgICBuYW1lID0gKC9mdW5jdGlvbiAoLnsxLH0pXFwoLy5leGVjKGVycm9yLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkpWzFdKTtcbiAgICAgICAgICBtZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAgICAgICBhbGVydChcIlNraXAgbG9naWMgZXJyb3IgaW4gcXVlc3Rpb24gXCIgKyAocXVlc3Rpb24uZ2V0KCduYW1lJykpICsgXCJcXG5cXG5cIiArIG5hbWUgKyBcIlxcblxcblwiICsgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHF1ZXN0aW9uVmlldy4kZWwuYWRkQ2xhc3MoXCJkaXNhYmxlZF9za2lwcGVkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHF1ZXN0aW9uVmlldy4kZWwucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZF9za2lwcGVkXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN1bHRzLnB1c2gocXVlc3Rpb25WaWV3LnVwZGF0ZVZhbGlkaXR5KCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBTdXJ2ZXlSdW5WaWV3LnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24odmlld3MpIHtcbiAgICB2YXIgaSwgaiwgbGVuLCBxdjtcbiAgICBpZiAodmlld3MgPT0gbnVsbCkge1xuICAgICAgdmlld3MgPSB0aGlzLnF1ZXN0aW9uVmlld3M7XG4gICAgfVxuICAgIGlmICh2aWV3cyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFfLmlzQXJyYXkodmlld3MpKSB7XG4gICAgICB2aWV3cyA9IFt2aWV3c107XG4gICAgfVxuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSB2aWV3cy5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgIHF2ID0gdmlld3NbaV07XG4gICAgICBxdi51cGRhdGVWYWxpZGl0eSgpO1xuICAgICAgaWYgKCFxdi5tb2RlbC5nZXRCb29sZWFuKFwic2tpcHBhYmxlXCIpKSB7XG4gICAgICAgIGlmICghcXYuaXNWYWxpZCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBTdXJ2ZXlSdW5WaWV3LnByb3RvdHlwZS5nZXRTa2lwcGVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGosIGxlbiwgcXYsIHJlZiwgcmVzdWx0O1xuICAgIHJlc3VsdCA9IHt9O1xuICAgIHJlZiA9IHRoaXMucXVlc3Rpb25WaWV3cztcbiAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgcXYgPSByZWZbaV07XG4gICAgICByZXN1bHRbdGhpcy5xdWVzdGlvbnMubW9kZWxzW2ldLmdldChcIm5hbWVcIildID0gXCJza2lwcGVkXCI7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgU3VydmV5UnVuVmlldy5wcm90b3R5cGUuZ2V0UmVzdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGosIGxlbiwgcXYsIHJlZiwgcmVzdWx0O1xuICAgIHJlc3VsdCA9IHt9O1xuICAgIHJlZiA9IHRoaXMucXVlc3Rpb25WaWV3cztcbiAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgcXYgPSByZWZbaV07XG4gICAgICByZXN1bHRbdGhpcy5xdWVzdGlvbnMubW9kZWxzW2ldLmdldChcIm5hbWVcIildID0gcXYubm90QXNrZWQgPyBxdi5ub3RBc2tlZFJlc3VsdCA6ICFfLmlzRW1wdHkocXYuYW5zd2VyKSA/IHF2LmFuc3dlciA6IHF2LnNraXBwZWQgPyBxdi5za2lwcGVkUmVzdWx0IDogcXYuJGVsLmhhc0NsYXNzKFwiZGlzYWJsZWRfc2tpcHBlZFwiKSA/IHF2LmxvZ2ljU2tpcHBlZFJlc3VsdCA6IHF2LiRlbC5oYXNDbGFzcyhcImRpc2FibGVkX2F1dG9zdG9wXCIpID8gcXYubm90QXNrZWRBdXRvc3RvcFJlc3VsdCA6IHF2LmFuc3dlcjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBTdXJ2ZXlSdW5WaWV3LnByb3RvdHlwZS5zaG93RXJyb3JzID0gZnVuY3Rpb24odmlld3MpIHtcbiAgICB2YXIgY3VzdG9tTWVzc2FnZSwgZmlyc3QsIGksIGosIGxlbiwgbWVzc2FnZSwgcXYsIHJlc3VsdHM7XG4gICAgaWYgKHZpZXdzID09IG51bGwpIHtcbiAgICAgIHZpZXdzID0gdGhpcy5xdWVzdGlvblZpZXdzO1xuICAgIH1cbiAgICB0aGlzLiRlbC5maW5kKCcubWVzc2FnZScpLnJlbW92ZSgpO1xuICAgIGZpcnN0ID0gdHJ1ZTtcbiAgICBpZiAoIV8uaXNBcnJheSh2aWV3cykpIHtcbiAgICAgIHZpZXdzID0gW3ZpZXdzXTtcbiAgICB9XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSB2aWV3cy5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgIHF2ID0gdmlld3NbaV07XG4gICAgICBpZiAoIV8uaXNTdHJpbmcocXYpKSB7XG4gICAgICAgIG1lc3NhZ2UgPSBcIlwiO1xuICAgICAgICBpZiAoIXF2LmlzVmFsaWQpIHtcbiAgICAgICAgICBjdXN0b21NZXNzYWdlID0gcXYubW9kZWwuZ2V0KFwiY3VzdG9tVmFsaWRhdGlvbk1lc3NhZ2VcIik7XG4gICAgICAgICAgaWYgKCFfLmlzRW1wdHkoY3VzdG9tTWVzc2FnZSkpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBjdXN0b21NZXNzYWdlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gdGhpcy50ZXh0LnBsZWFzZUFuc3dlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZpcnN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAodmlld3MgPT09IHRoaXMucXVlc3Rpb25WaWV3cykge1xuICAgICAgICAgICAgICB0aGlzLnNob3dRdWVzdGlvbihpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHF2LiRlbC5zY3JvbGxUbygpO1xuICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQodGhpcy50ZXh0LmNvcnJlY3RFcnJvcnMpO1xuICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0cy5wdXNoKHF2LnNldE1lc3NhZ2UobWVzc2FnZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKHZvaWQgMCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIFN1cnZleVJ1blZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbnN3ZXIsIGJhc2UsIGksIGlzTm90QXNrZWQsIGosIGssIGxlbiwgbGVuMSwgbmFtZSwgbm90QXNrZWRDb3VudCwgb25lVmlldywgcHJldmlvdXMsIHF1ZXN0aW9uLCBxdWVzdGlvblZpZXcsIHJlZiwgcmVmMSwgcmVxdWlyZWQ7XG4gICAgaWYgKCF0aGlzLnJlYWR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuJGVsLmVtcHR5KCk7XG4gICAgaWYgKCF0aGlzLmRhdGFFbnRyeSkge1xuICAgICAgaWYgKCh0aGlzLnBhcmVudCAhPSBudWxsKSAmJiAodGhpcy5wYXJlbnQucGFyZW50ICE9IG51bGwpICYmICh0aGlzLnBhcmVudC5wYXJlbnQucmVzdWx0ICE9IG51bGwpKSB7XG4gICAgICAgIHByZXZpb3VzID0gdGhpcy5wYXJlbnQucGFyZW50LnJlc3VsdC5nZXRCeUhhc2godGhpcy5tb2RlbC5nZXQoJ2hhc2gnKSk7XG4gICAgICB9XG4gICAgfVxuICAgIG5vdEFza2VkQ291bnQgPSAwO1xuICAgIHRoaXMucXVlc3Rpb25zLnNvcnQoKTtcbiAgICBpZiAodGhpcy5xdWVzdGlvbnMubW9kZWxzICE9IG51bGwpIHtcbiAgICAgIHJlZiA9IHRoaXMucXVlc3Rpb25zLm1vZGVscztcbiAgICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICAgIHF1ZXN0aW9uID0gcmVmW2ldO1xuICAgICAgICByZXF1aXJlZCA9IHBhcnNlSW50KHF1ZXN0aW9uLmdldChcImxpbmtlZEdyaWRTY29yZVwiKSkgfHwgMDtcbiAgICAgICAgaXNOb3RBc2tlZCA9ICgocmVxdWlyZWQgIT09IDAgJiYgdGhpcy5wYXJlbnQuZ2V0R3JpZFNjb3JlKCkgPCByZXF1aXJlZCkgfHwgdGhpcy5wYXJlbnQuZ3JpZFdhc0F1dG9zdG9wcGVkKCkpICYmIHRoaXMucGFyZW50LmdldEdyaWRTY29yZSgpICE9PSBmYWxzZTtcbiAgICAgICAgaWYgKGlzTm90QXNrZWQpIHtcbiAgICAgICAgICBub3RBc2tlZENvdW50Kys7XG4gICAgICAgIH1cbiAgICAgICAgbmFtZSA9IHF1ZXN0aW9uLmVzY2FwZShcIm5hbWVcIikucmVwbGFjZSgvW15BLVphLXowLTlfXS9nLCBcIi1cIik7XG4gICAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICAgIGFuc3dlciA9IHByZXZpb3VzW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIG9uZVZpZXcgPSBuZXcgUXVlc3Rpb25SdW5WaWV3KHtcbiAgICAgICAgICBtb2RlbDogcXVlc3Rpb24sXG4gICAgICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgICAgIGRhdGFFbnRyeTogdGhpcy5kYXRhRW50cnksXG4gICAgICAgICAgbm90QXNrZWQ6IGlzTm90QXNrZWQsXG4gICAgICAgICAgaXNPYnNlcnZhdGlvbjogdGhpcy5pc09ic2VydmF0aW9uLFxuICAgICAgICAgIGFuc3dlcjogYW5zd2VyXG4gICAgICAgIH0pO1xuICAgICAgICBvbmVWaWV3Lm9uKFwicmVuZGVyZWRcIiwgdGhpcy5vblF1ZXN0aW9uUmVuZGVyZWQpO1xuICAgICAgICBvbmVWaWV3Lm9uKFwiYW5zd2VyIHNjcm9sbFwiLCB0aGlzLm9uUXVlc3Rpb25BbnN3ZXIpO1xuICAgICAgICB0aGlzLnF1ZXN0aW9uVmlld3NbaV0gPSBvbmVWaWV3O1xuICAgICAgICB0aGlzLiRlbC5hcHBlbmQob25lVmlldy5lbCk7XG4gICAgICB9XG4gICAgICByZWYxID0gdGhpcy5xdWVzdGlvblZpZXdzO1xuICAgICAgZm9yIChrID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgIHF1ZXN0aW9uVmlldyA9IHJlZjFba107XG4gICAgICAgIHF1ZXN0aW9uVmlldy5yZW5kZXIoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmZvY3VzTW9kZSkge1xuICAgICAgICB0aGlzLnVwZGF0ZVF1ZXN0aW9uVmlzaWJpbGl0eSgpO1xuICAgICAgICB0aGlzLiRlbC5hcHBlbmQoXCI8ZGl2IGlkPSdzdW1tYXJ5X2NvbnRhaW5lcic+PC9kaXY+IDxidXR0b24gY2xhc3M9J25hdmlnYXRpb24gcHJldl9xdWVzdGlvbic+XCIgKyB0aGlzLnRleHQucHJldmlvdXNRdWVzdGlvbiArIFwiPC9idXR0b24+IDxidXR0b24gY2xhc3M9J25hdmlnYXRpb24gbmV4dF9xdWVzdGlvbic+XCIgKyB0aGlzLnRleHQubmV4dFF1ZXN0aW9uICsgXCI8L2J1dHRvbj5cIik7XG4gICAgICAgIHRoaXMudXBkYXRlUHJvZ3Jlc3NCdXR0b25zKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLnF1ZXN0aW9ucy5sZW5ndGggPT09IG5vdEFza2VkQ291bnQpIHtcbiAgICAgIGlmICh0eXBlb2YgKGJhc2UgPSB0aGlzLnBhcmVudCkubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGJhc2UubmV4dCgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgU3VydmV5UnVuVmlldy5wcm90b3R5cGUub25RdWVzdGlvblJlbmRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW5kZXJDb3VudCsrO1xuICAgIGlmICh0aGlzLnJlbmRlckNvdW50ID09PSB0aGlzLnF1ZXN0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHRoaXMudHJpZ2dlcihcInJlYWR5XCIpO1xuICAgICAgdGhpcy51cGRhdGVTa2lwTG9naWMoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInN1YlJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIFN1cnZleVJ1blZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaiwgbGVuLCBxdiwgcmVmO1xuICAgIHJlZiA9IHRoaXMucXVlc3Rpb25WaWV3cztcbiAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHF2ID0gcmVmW2pdO1xuICAgICAgaWYgKHR5cGVvZiBxdi5jbG9zZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHF2LmNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnF1ZXN0aW9uVmlld3MgPSBbXTtcbiAgfTtcblxuICByZXR1cm4gU3VydmV5UnVuVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIFN1cnZleUVkaXRWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZTogXCJTdXJ2ZXlFZGl0Vmlld1wiXG5cbiAgZXZlbnRzOlxuICAgICdjbGljayAuYWRkX3F1ZXN0aW9uJyAgICAgICAgOiAndG9nZ2xlQWRkUXVlc3Rpb24nXG4gICAgJ2NsaWNrIC5hZGRfcXVlc3Rpb25fY2FuY2VsJyA6ICd0b2dnbGVBZGRRdWVzdGlvbidcbiAgICAnY2xpY2sgLmFkZF9xdWVzdGlvbl9hZGQnICAgIDogJ2FkZFF1ZXN0aW9uJ1xuICAgICdrZXlwcmVzcyAjcXVlc3Rpb25fbmFtZScgICAgOiAnYWRkUXVlc3Rpb24nXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cbiAgICBAbW9kZWwgPSBvcHRpb25zLm1vZGVsXG4gICAgQHBhcmVudCA9IG9wdGlvbnMucGFyZW50XG4gICAgQHN1YnRlc3RzID0gb3B0aW9ucy5zdWJ0ZXN0c1xuICAgIEBtb2RlbC5xdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zXG4gICAgQHF1ZXN0aW9uc0VkaXRWaWV3ID0gbmV3IFF1ZXN0aW9uc0VkaXRWaWV3XG4gICAgICBxdWVzdGlvbnMgOiBAbW9kZWwucXVlc3Rpb25zXG5cbiAgICBVdGlscy53b3JraW5nIHRydWVcbiAgICBAbW9kZWwucXVlc3Rpb25zLmZldGNoXG4gICAgICBrZXk6IEBtb2RlbC5nZXQgXCJhc3Nlc3NtZW50SWRcIlxuICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgVXRpbHMud29ya2luZyBmYWxzZVxuICAgICAgICBAcXVlc3Rpb25zRWRpdFZpZXcucXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9ucyhAbW9kZWwucXVlc3Rpb25zLndoZXJlIHtzdWJ0ZXN0SWQgOiBAbW9kZWwuaWQgIH0pXG4gICAgICAgIEBxdWVzdGlvbnNFZGl0Vmlldy5xdWVzdGlvbnMuZW5zdXJlT3JkZXIoKVxuXG4gICAgICAgIEBxdWVzdGlvbnNFZGl0Vmlldy5vbiBcInF1ZXN0aW9uLWVkaXRcIiwgKHF1ZXN0aW9uSWQpID0+IEB0cmlnZ2VyIFwicXVlc3Rpb24tZWRpdFwiLCBxdWVzdGlvbklkXG4gICAgICAgIEBxdWVzdGlvbnNFZGl0Vmlldy5xdWVzdGlvbnMub24gXCJjaGFuZ2VcIiwgQHJlbmRlclF1ZXN0aW9uc1xuICAgICAgICBAcmVuZGVyUXVlc3Rpb25zKClcbiAgICAgIGVycm9yOiAoYSwgYikgPT5cbiAgICAgICAgVXRpbHMud29ya2luZyBmYWxzZVxuICAgICAgICBVdGlscy5taWRBbGVydCBcIkVycm9yPGJyPkNvdWxkIG5vdCBsb2FkIHF1ZXN0aW9uczxicj4je2F9LCAje2J9XCIsIDUwMDBcblxuICB0b2dnbGVBZGRRdWVzdGlvbjogPT5cbiAgICBAJGVsLmZpbmQoXCIjYWRkX3F1ZXN0aW9uX2Zvcm0sIC5hZGRfcXVlc3Rpb25cIikuZmFkZVRvZ2dsZSAyNTAsID0+XG4gICAgICBpZiBAJGVsLmZpbmQoXCIjYWRkX3F1ZXN0aW9uX2Zvcm1cIikuaXMoXCI6dmlzaWJsZVwiKVxuICAgICAgICBAJGVsLmZpbmQoXCIjcXVlc3Rpb25fcHJvbXB0XCIpLmZvY3VzKClcbiAgICByZXR1cm4gZmFsc2VcblxuICBhZGRRdWVzdGlvbjogKGV2ZW50KSAtPlxuICAgIFxuICAgIGlmIGV2ZW50LnR5cGUgIT0gXCJjbGlja1wiICYmIGV2ZW50LndoaWNoICE9IDEzXG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIFxuICAgIG5ld0F0dHJpYnV0ZXMgPSAkLmV4dGVuZCBUYW5nZXJpbmUudGVtcGxhdGVzLmdldChcInF1ZXN0aW9uVGVtcGxhdGVcIiksXG4gICAgICBzdWJ0ZXN0SWQgICAgOiBAbW9kZWwuaWRcbiAgICAgIGFzc2Vzc21lbnRJZCA6IEBtb2RlbC5nZXQgXCJhc3Nlc3NtZW50SWRcIlxuICAgICAgaWQgICAgICAgICAgIDogVXRpbHMuZ3VpZCgpXG4gICAgICBvcmRlciAgICAgICAgOiBAcXVlc3Rpb25zRWRpdFZpZXcucXVlc3Rpb25zLmxlbmd0aFxuICAgICAgcHJvbXB0ICAgICAgIDogQCRlbC5maW5kKCcjcXVlc3Rpb25fcHJvbXB0JykudmFsKClcbiAgICAgIG5hbWUgICAgICAgICA6IEAkZWwuZmluZCgnI3F1ZXN0aW9uX25hbWUnKS52YWwoKS5zYWZldHlEYW5jZSgpXG5cbiAgICBucSA9IEBxdWVzdGlvbnNFZGl0Vmlldy5xdWVzdGlvbnMuY3JlYXRlIG5ld0F0dHJpYnV0ZXNcbiAgICBAcmVuZGVyUXVlc3Rpb25zKClcbiAgICBAJGVsLmZpbmQoXCIjYWRkX3F1ZXN0aW9uX2Zvcm0gaW5wdXRcIikudmFsICcnXG4gICAgQCRlbC5maW5kKFwiI3F1ZXN0aW9uX3Byb21wdFwiKS5mb2N1cygpXG5cbiAgICByZXR1cm4gZmFsc2VcblxuICBpc1ZhbGlkOiAtPiB0cnVlXG5cbiAgc2F2ZTogKG9wdGlvbnMpIC0+XG5cbiAgICBvcHRpb25zLnF1ZXN0aW9uU2F2ZSA9IGlmIG9wdGlvbnMucXVlc3Rpb25TYXZlPyB0aGVuIG9wdGlvbnMucXVlc3Rpb25TYXZlIGVsc2UgdHJ1ZVxuXG4gICAgQG1vZGVsLnNldFxuICAgICAgXCJncmlkTGlua0lkXCIgICAgOiBAJGVsLmZpbmQoXCIjbGlua19zZWxlY3Qgb3B0aW9uOnNlbGVjdGVkXCIpLnZhbCgpXG4gICAgICBcImF1dG9zdG9wTGltaXRcIiA6IHBhcnNlSW50KEAkZWwuZmluZChcIiNhdXRvc3RvcF9saW1pdFwiKS52YWwoKSkgfHwgMFxuICAgICAgXCJmb2N1c01vZGVcIiAgICAgOiBAJGVsLmZpbmQoXCIjZm9jdXNfbW9kZSBpbnB1dDpjaGVja2VkXCIpLnZhbCgpID09IFwidHJ1ZVwiXG5cbiAgICBpZiBAbW9kZWwuZ2V0KFwiZ3JpZExpbmtJZFwiKSAhPSBcIlwiICYmIEBtb2RlbC5xdWVzdGlvbnM/XG4gICAgICBsaW5rZWRRdWVzdGlvbnMgPSBbXVxuICAgICAgZm9yIHF1ZXN0aW9uIGluIEBtb2RlbC5xdWVzdGlvbnMud2hlcmUge1wic3VidGVzdElkXCIgOiBAbW9kZWwuaWR9XG4gICAgICAgIGFwcGxpY2FibGUgPSBxdWVzdGlvbi5nZXROdW1iZXIoXCJsaW5rZWRHcmlkU2NvcmVcIikgIT0gMCAmJiBAaXRlbU51bWJlckJ5TGlua0lkW0Btb2RlbC5nZXQoXCJncmlkTGlua0lkXCIpXT9cbiAgICAgICAgaWYgYXBwbGljYWJsZSAmJiBxdWVzdGlvbi5nZXQoXCJsaW5rZWRHcmlkU2NvcmVcIikgPiBAaXRlbU51bWJlckJ5TGlua0lkW0Btb2RlbC5nZXQoXCJncmlkTGlua0lkXCIpXVxuICAgICAgICAgIGxpbmtlZFF1ZXN0aW9ucy5wdXNoIHF1ZXN0aW9uLmdldChcIm5hbWVcIilcblxuICAgICAgaWYgbGlua2VkUXVlc3Rpb25zLmxlbmd0aCA+IDBcbiAgICAgICAgYWxlcnQgXCJVbnJlYWNoYWJsZSBxdWVzdGlvbiB3YXJuaW5nXFxuXFxuVGhlIGxpbmtlZCBncmlkIGNvbnRhaW5zIGZld2VyIGl0ZW1zIHRoYW4gcXVlc3Rpb24jeyhcInNcIiBpZiBsaW5rZWRRdWVzdGlvbnMubGVuZ3RoPjEpfHxcIlwifTogI3tsaW5rZWRRdWVzdGlvbnMuam9pbihcIiwgXCIpfSBkZW1hbmQjeyhcInNcIiBpZiBub3QgbGlua2VkUXVlc3Rpb25zLmxlbmd0aD4xKXx8XCJcIn0uXCJcblxuICAgICMgYmxhbmsgb3V0IG91ciBlcnJvciBxdWV1ZXNcbiAgICBub3RTYXZlZCA9IFtdXG4gICAgZW1wdHlPcHRpb25zID0gW11cbiAgICByZXF1aXJlc0dyaWQgPSBbXVxuICAgIGR1cGxpY2F0ZVZhcmlhYmxlcyA9IFtdXG5cbiAgICB2YXJpYWJsZU5hbWVzID0ge31cblxuICAgICMgY2hlY2sgZm9yIFwiZXJyb3JzXCJcbiAgICBmb3IgcXVlc3Rpb24sIGkgaW4gQHF1ZXN0aW9uc0VkaXRWaWV3LnF1ZXN0aW9ucy5tb2RlbHNcblxuICAgICAgaWYgcXVlc3Rpb24uZ2V0KFwibmFtZVwiKSAhPSBcIlwiXG4gICAgICAgIHZhcmlhYmxlTmFtZXNbcXVlc3Rpb24uZ2V0KFwibmFtZVwiKV0gPSAwIGlmIG5vdCBfLmlzTnVtYmVyKHZhcmlhYmxlTmFtZXNbcXVlc3Rpb24uZ2V0KFwibmFtZVwiKV0pXG4gICAgICAgIHZhcmlhYmxlTmFtZXNbcXVlc3Rpb24uZ2V0KFwibmFtZVwiKV0rK1xuXG4gICAgICBpZiBxdWVzdGlvbi5nZXQoXCJ0eXBlXCIpICE9IFwib3BlblwiICYmIHF1ZXN0aW9uLmdldChcIm9wdGlvbnNcIik/Lmxlbmd0aCA9PSAwICYmICF+cXVlc3Rpb24uZ2V0U3RyaW5nKCdkaXNwbGF5Q29kZScpLmluZGV4T2YoJ3NldE9wdGlvbnMnKVxuICAgICAgICBlbXB0eU9wdGlvbnMucHVzaCBpICsgMVxuICAgICAgXG4gICAgICAgIGlmIG9wdGlvbnMucXVlc3Rpb25TYXZlXG4gICAgICAgICAgaWYgbm90IHF1ZXN0aW9uLnNhdmUoKVxuICAgICAgICAgICAgbm90U2F2ZWQucHVzaCBpXG4gICAgICAgICAgaWYgcXVlc3Rpb24uaGFzKFwibGlua2VkR3JpZFNjb3JlXCIpICYmIHF1ZXN0aW9uLmdldChcImxpbmtlZEdyaWRTY29yZVwiKSAhPSBcIlwiICYmIHF1ZXN0aW9uLmdldChcImxpbmtlZEdyaWRTY29yZVwiKSAhPSAwICYmIEBtb2RlbC5oYXMoXCJncmlkTGlua0lkXCIpID09IFwiXCIgJiYgQG1vZGVsLmdldChcImdyaWRMaW5rSWRcIikgPT0gXCJcIlxuICAgICAgICAgICAgcmVxdWlyZXNHcmlkLnB1c2ggaVxuICAgICAgICBcbiAgICBmb3IgbmFtZSwgY291bnQgb2YgdmFyaWFibGVOYW1lc1xuICAgICAgZHVwbGljYXRlVmFyaWFibGVzLnB1c2ggbmFtZSBpZiBjb3VudCAhPSAxXG5cbiAgICAjIGRpc3BsYXkgZXJyb3JzXG4gICAgYVdhcm5pbmdzID0gW11cbiAgICBpZiBub3RTYXZlZC5sZW5ndGggIT0gMFxuICAgICAgVXRpbHMubWlkQWxlcnQgXCJFcnJvcjxicj48YnI+UXVlc3Rpb25zOiA8YnI+I3tub3RTYXZlZC5qb2luKCcsICcpfTxicj5ub3Qgc2F2ZWRcIlxuICAgIGlmIG9wdGlvbnMucXVlc3Rpb25TYXZlICYmIGVtcHR5T3B0aW9ucy5sZW5ndGggIT0gMFxuICAgICAgcGx1cmFsID0gZW1wdHlPcHRpb25zLmxlbmd0aCA+IDFcbiAgICAgIF9xdWVzdGlvbiA9IGlmIHBsdXJhbCB0aGVuIFwiUXVlc3Rpb25zXCIgZWxzZSBcIlF1ZXN0aW9uXCJcbiAgICAgIF9oYXMgICAgICA9IGlmIHBsdXJhbCB0aGVuIFwiaGF2ZVwiIGVsc2UgXCJoYXNcIlxuICAgICAgYVdhcm5pbmdzLnB1c2ggXCItICN7X3F1ZXN0aW9ufSAje2VtcHR5T3B0aW9ucy5qb2luKCcgLCcpfSAjeyBfaGFzIH0gbm8gb3B0aW9ucy5cIlxuICAgIGlmIHJlcXVpcmVzR3JpZC5sZW5ndGggIT0gMFxuICAgICAgcGx1cmFsID0gZW1wdHlPcHRpb25zLmxlbmd0aCA+IDFcbiAgICAgIF9xdWVzdGlvbiA9IGlmIHBsdXJhbCB0aGVuIFwiUXVlc3Rpb25zXCIgZWxzZSBcIlF1ZXN0aW9uXCJcbiAgICAgIF9yZXF1aXJlICA9IGlmIHBsdXJhbCB0aGVuIFwicmVxdWlyZVwiIGVsc2UgXCJyZXF1aXJlc1wiXG4gICAgICBhV2FybmluZ3MucHVzaCBcIi0gI3sgX3F1ZXN0aW9uIH0gI3tyZXF1aXJlc0dyaWQuam9pbignICwnKX0gI3sgX3JlcXVpcmUgfSBhIGdyaWQgdG8gYmUgbGlua2VkIHRvIHRoaXMgdGVzdC5cIlxuICAgIGlmIGR1cGxpY2F0ZVZhcmlhYmxlcy5sZW5ndGggIT0gMFxuICAgICAgYVdhcm5pbmdzLnB1c2ggXCItIFRoZSBmb2xsb3dpbmcgdmFyaWFibGVzIGFyZSBkdXBsaWNhdGVzXFxuICN7ZHVwbGljYXRlVmFyaWFibGVzLmpvaW4oJywgJyl9XCJcblxuICAgIGlmIGFXYXJuaW5ncy5sZW5ndGggIT0gMFxuICAgICAgdFdhcm5pbmdzID0gYVdhcm5pbmdzLmpvaW4oXCJcXG5cXG5cIilcbiAgICAgIGFsZXJ0IFwiV2FybmluZ1xcblxcbiN7dFdhcm5pbmdzfVwiXG5cblxuICBvbkNsb3NlOiAtPlxuICAgIEBxdWVzdGlvbnNMaXN0RWRpdD8uY2xvc2UoKVxuXG4gIHJlbmRlclF1ZXN0aW9uczogPT5cbiAgICBAcXVlc3Rpb25zRWRpdFZpZXc/LnJlbmRlcigpXG5cbiAgcmVuZGVyOiAtPlxuICAgICAgXG4jICAgIGFkZFF1ZXN0aW9uU2VsZWN0ID0gXCI8c2VsZWN0IGlkPSdhZGRfcXVlc3Rpb25fc2VsZWN0Jz5cIlxuIyAgICBmb3IgdGVtcGxhdGUgaW4gVGFuZ2VyaW5lLnRlbXBsYXRlcy5vcHRpb25UZW1wbGF0ZXNcbiMgICAgICBhZGRRdWVzdGlvblNlbGVjdCArPSBcIjxvcHRpb24gdmFsdWU9JyN7dGVtcGxhdGUubmFtZX0nPiN7dGVtcGxhdGUubmFtZX08L29wdGlvbj5cIlxuIyAgICBhZGRRdWVzdGlvblNlbGVjdCArPSBcIjwvc2VsZWN0PlwiXG5cbiAgICBncmlkTGlua0lkID0gQG1vZGVsLmdldChcImdyaWRMaW5rSWRcIikgfHwgXCJcIlxuICAgIGF1dG9zdG9wTGltaXQgPSBwYXJzZUludChAbW9kZWwuZ2V0KFwiYXV0b3N0b3BMaW1pdFwiKSkgfHwgMFxuICAgIGZvY3VzTW9kZSA9IEBtb2RlbC5nZXRCb29sZWFuKFwiZm9jdXNNb2RlXCIpXG5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsIGZvcj0nYXV0b3N0b3BfbGltaXQnIHRpdGxlPSdUaGUgc3VydmV5IHdpbGwgZGlzY29udGludWUgYWZ0ZXIgYW55IE4gY29uc2VjdXRpdmUgcXVlc3Rpb25zIGhhdmUgYmVlbiBhbnN3ZXJlZCB3aXRoIGEgJnF1b3Q7MCZxdW90OyB2YWx1ZSBvcHRpb24uJz5BdXRvc3RvcCBhZnRlciBOIGluY29ycmVjdDwvbGFiZWw+PGJyPlxuICAgICAgICA8aW5wdXQgaWQ9J2F1dG9zdG9wX2xpbWl0JyB0eXBlPSdudW1iZXInIHZhbHVlPScje2F1dG9zdG9wTGltaXR9Jz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICAgIDxsYWJlbCB0aXRsZT0nRGlzcGxheXMgb25lIHF1ZXN0aW9uIGF0IGEgdGltZSB3aXRoIG5leHQgYW5kIHByZXZpb3VzIGJ1dHRvbnMuJz5Gb2N1cyBtb2RlPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGlkPSdmb2N1c19tb2RlJyBjbGFzcz0nYnV0dG9uc2V0Jz5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J2ZvY3VzX3RydWUnPlllczwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgbmFtZT0nZm9jdXNfbW9kZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJyBpZD0nZm9jdXNfdHJ1ZScgI3snY2hlY2tlZCcgaWYgZm9jdXNNb2RlfT5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J2ZvY3VzX2ZhbHNlJz5ObzwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgbmFtZT0nZm9jdXNfbW9kZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZScgaWQ9J2ZvY3VzX2ZhbHNlJyAjeydjaGVja2VkJyBpZiBub3QgZm9jdXNNb2RlfT5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGlkPSdncmlkX2xpbmsnPjwvZGl2PlxuICAgICAgPGRpdiBpZD0ncXVlc3Rpb25zJz5cbiAgICAgICAgPGgyPlF1ZXN0aW9uczwvaDI+XG4gICAgICAgIDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cbiAgICAgICAgICA8ZGl2IGlkPSdxdWVzdGlvbl9saXN0X3dyYXBwZXInPjxpbWcgY2xhc3M9J2xvYWRpbmcnIHNyYz0naW1hZ2VzL2xvYWRpbmcuZ2lmJz48dWw+PC91bD48L2Rpdj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdhZGRfcXVlc3Rpb24gY29tbWFuZCc+QWRkIFF1ZXN0aW9uPC9idXR0b24+XG4gICAgICAgICAgPGRpdiBpZD0nYWRkX3F1ZXN0aW9uX2Zvcm0nIGNsYXNzPSdjb25maXJtYXRpb24nPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgICAgICA8aDI+TmV3IFF1ZXN0aW9uPC9oMj5cbiAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ncXVlc3Rpb25fcHJvbXB0Jz5Qcm9tcHQ8L2xhYmVsPlxuICAgICAgICAgICAgICA8aW5wdXQgaWQ9J3F1ZXN0aW9uX3Byb21wdCc+XG4gICAgICAgICAgICAgIDxsYWJlbCBmb3I9J3F1ZXN0aW9uX25hbWUnPlZhcmlhYmxlIG5hbWU8L2xhYmVsPlxuICAgICAgICAgICAgICA8aW5wdXQgaWQ9J3F1ZXN0aW9uX25hbWUnIHRpdGxlPSdBbGxvd2VkIGNoYXJhY3RlcnM6IEEtWiwgYS16LCAwLTksIGFuZCB1bmRlcnNjb3Jlcy4nPjxicj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0nYWRkX3F1ZXN0aW9uX2FkZCBjb21tYW5kJz5BZGQ8L2J1dHRvbj48YnV0dG9uIGNsYXNzPSdhZGRfcXVlc3Rpb25fY2FuY2VsIGNvbW1hbmQnPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+IFxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlwiXG5cbiAgICBAJGVsLmZpbmQoXCIjcXVlc3Rpb25fbGlzdF93cmFwcGVyIC5sb2FkaW5nXCIpLnJlbW92ZSgpXG4gICAgQHF1ZXN0aW9uc0VkaXRWaWV3LnNldEVsZW1lbnQgQCRlbC5maW5kKFwiI3F1ZXN0aW9uX2xpc3Rfd3JhcHBlciB1bFwiKVxuXG4gICAgQHJlbmRlclF1ZXN0aW9ucygpXG5cbiAgICAjIHNob3cgbGlua2VkIGdyaWQgb3B0aW9uc1xuICAgIGdyaWRTdWJ0ZXN0cyA9IEBzdWJ0ZXN0cy53aGVyZVxuICAgICAgcHJvdG90eXBlICAgIDogJ2dyaWQnICMgb25seSBncmlkcyBjYW4gcHJvdmlkZSBzY29yZXNcblxuICAgIGxpbmtTZWxlY3QgPSBcIlxuICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICA8bGFiZWwgZm9yPSdsaW5rX3NlbGVjdCc+TGlua2VkIHRvIGdyaWQ8L2xhYmVsPjxicj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgIDxzZWxlY3QgaWQ9J2xpbmtfc2VsZWN0Jz5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPScnPk5vbmU8L29wdGlvbj5cIlxuICAgIGZvciBzdWJ0ZXN0IGluIGdyaWRTdWJ0ZXN0cyBcbiAgICAgIEBpdGVtTnVtYmVyQnlMaW5rSWQgPSB7fSBpZiBub3QgQGl0ZW1OdW1iZXJCeUxpbmtJZD9cbiAgICAgIEBpdGVtTnVtYmVyQnlMaW5rSWRbc3VidGVzdC5pZF0gPSBzdWJ0ZXN0LmdldChcIml0ZW1zXCIpLmxlbmd0aFxuICAgICAgbGlua1NlbGVjdCArPSBcIjxvcHRpb24gdmFsdWU9JyN7c3VidGVzdC5pZH0nICN7aWYgKGdyaWRMaW5rSWQgPT0gc3VidGVzdC5pZCkgdGhlbiAnc2VsZWN0ZWQnIGVsc2UgJyd9PiN7c3VidGVzdC5nZXQgJ25hbWUnfTwvb3B0aW9uPlwiXG4gICAgbGlua1NlbGVjdCArPSBcIjwvc2VsZWN0PjwvZGl2PjwvZGl2PlwiXG4gICAgQCRlbC5maW5kKCcjZ3JpZF9saW5rJykuaHRtbCBsaW5rU2VsZWN0XG5cbiIsInZhciBTdXJ2ZXlFZGl0VmlldyxcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5TdXJ2ZXlFZGl0VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChTdXJ2ZXlFZGl0Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gU3VydmV5RWRpdFZpZXcoKSB7XG4gICAgdGhpcy5yZW5kZXJRdWVzdGlvbnMgPSBiaW5kKHRoaXMucmVuZGVyUXVlc3Rpb25zLCB0aGlzKTtcbiAgICB0aGlzLnRvZ2dsZUFkZFF1ZXN0aW9uID0gYmluZCh0aGlzLnRvZ2dsZUFkZFF1ZXN0aW9uLCB0aGlzKTtcbiAgICByZXR1cm4gU3VydmV5RWRpdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBTdXJ2ZXlFZGl0Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJTdXJ2ZXlFZGl0Vmlld1wiO1xuXG4gIFN1cnZleUVkaXRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrIC5hZGRfcXVlc3Rpb24nOiAndG9nZ2xlQWRkUXVlc3Rpb24nLFxuICAgICdjbGljayAuYWRkX3F1ZXN0aW9uX2NhbmNlbCc6ICd0b2dnbGVBZGRRdWVzdGlvbicsXG4gICAgJ2NsaWNrIC5hZGRfcXVlc3Rpb25fYWRkJzogJ2FkZFF1ZXN0aW9uJyxcbiAgICAna2V5cHJlc3MgI3F1ZXN0aW9uX25hbWUnOiAnYWRkUXVlc3Rpb24nXG4gIH07XG5cbiAgU3VydmV5RWRpdFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5tb2RlbCA9IG9wdGlvbnMubW9kZWw7XG4gICAgdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgICB0aGlzLnN1YnRlc3RzID0gb3B0aW9ucy5zdWJ0ZXN0cztcbiAgICB0aGlzLm1vZGVsLnF1ZXN0aW9ucyA9IG5ldyBRdWVzdGlvbnM7XG4gICAgdGhpcy5xdWVzdGlvbnNFZGl0VmlldyA9IG5ldyBRdWVzdGlvbnNFZGl0Vmlldyh7XG4gICAgICBxdWVzdGlvbnM6IHRoaXMubW9kZWwucXVlc3Rpb25zXG4gICAgfSk7XG4gICAgVXRpbHMud29ya2luZyh0cnVlKTtcbiAgICByZXR1cm4gdGhpcy5tb2RlbC5xdWVzdGlvbnMuZmV0Y2goe1xuICAgICAga2V5OiB0aGlzLm1vZGVsLmdldChcImFzc2Vzc21lbnRJZFwiKSxcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICAgICAgX3RoaXMucXVlc3Rpb25zRWRpdFZpZXcucXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9ucyhfdGhpcy5tb2RlbC5xdWVzdGlvbnMud2hlcmUoe1xuICAgICAgICAgICAgc3VidGVzdElkOiBfdGhpcy5tb2RlbC5pZFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBfdGhpcy5xdWVzdGlvbnNFZGl0Vmlldy5xdWVzdGlvbnMuZW5zdXJlT3JkZXIoKTtcbiAgICAgICAgICBfdGhpcy5xdWVzdGlvbnNFZGl0Vmlldy5vbihcInF1ZXN0aW9uLWVkaXRcIiwgZnVuY3Rpb24ocXVlc3Rpb25JZCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnRyaWdnZXIoXCJxdWVzdGlvbi1lZGl0XCIsIHF1ZXN0aW9uSWQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIF90aGlzLnF1ZXN0aW9uc0VkaXRWaWV3LnF1ZXN0aW9ucy5vbihcImNoYW5nZVwiLCBfdGhpcy5yZW5kZXJRdWVzdGlvbnMpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJRdWVzdGlvbnMoKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIFV0aWxzLndvcmtpbmcoZmFsc2UpO1xuICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIkVycm9yPGJyPkNvdWxkIG5vdCBsb2FkIHF1ZXN0aW9uczxicj5cIiArIGEgKyBcIiwgXCIgKyBiLCA1MDAwKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgU3VydmV5RWRpdFZpZXcucHJvdG90eXBlLnRvZ2dsZUFkZFF1ZXN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwuZmluZChcIiNhZGRfcXVlc3Rpb25fZm9ybSwgLmFkZF9xdWVzdGlvblwiKS5mYWRlVG9nZ2xlKDI1MCwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChfdGhpcy4kZWwuZmluZChcIiNhZGRfcXVlc3Rpb25fZm9ybVwiKS5pcyhcIjp2aXNpYmxlXCIpKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLiRlbC5maW5kKFwiI3F1ZXN0aW9uX3Byb21wdFwiKS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgU3VydmV5RWRpdFZpZXcucHJvdG90eXBlLmFkZFF1ZXN0aW9uID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgbmV3QXR0cmlidXRlcywgbnE7XG4gICAgaWYgKGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIiAmJiBldmVudC53aGljaCAhPT0gMTMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBuZXdBdHRyaWJ1dGVzID0gJC5leHRlbmQoVGFuZ2VyaW5lLnRlbXBsYXRlcy5nZXQoXCJxdWVzdGlvblRlbXBsYXRlXCIpLCB7XG4gICAgICBzdWJ0ZXN0SWQ6IHRoaXMubW9kZWwuaWQsXG4gICAgICBhc3Nlc3NtZW50SWQ6IHRoaXMubW9kZWwuZ2V0KFwiYXNzZXNzbWVudElkXCIpLFxuICAgICAgaWQ6IFV0aWxzLmd1aWQoKSxcbiAgICAgIG9yZGVyOiB0aGlzLnF1ZXN0aW9uc0VkaXRWaWV3LnF1ZXN0aW9ucy5sZW5ndGgsXG4gICAgICBwcm9tcHQ6IHRoaXMuJGVsLmZpbmQoJyNxdWVzdGlvbl9wcm9tcHQnKS52YWwoKSxcbiAgICAgIG5hbWU6IHRoaXMuJGVsLmZpbmQoJyNxdWVzdGlvbl9uYW1lJykudmFsKCkuc2FmZXR5RGFuY2UoKVxuICAgIH0pO1xuICAgIG5xID0gdGhpcy5xdWVzdGlvbnNFZGl0Vmlldy5xdWVzdGlvbnMuY3JlYXRlKG5ld0F0dHJpYnV0ZXMpO1xuICAgIHRoaXMucmVuZGVyUXVlc3Rpb25zKCk7XG4gICAgdGhpcy4kZWwuZmluZChcIiNhZGRfcXVlc3Rpb25fZm9ybSBpbnB1dFwiKS52YWwoJycpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIjcXVlc3Rpb25fcHJvbXB0XCIpLmZvY3VzKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIFN1cnZleUVkaXRWaWV3LnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgU3VydmV5RWRpdFZpZXcucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIF9oYXMsIF9xdWVzdGlvbiwgX3JlcXVpcmUsIGFXYXJuaW5ncywgYXBwbGljYWJsZSwgY291bnQsIGR1cGxpY2F0ZVZhcmlhYmxlcywgZW1wdHlPcHRpb25zLCBpLCBqLCBrLCBsZW4sIGxlbjEsIGxpbmtlZFF1ZXN0aW9ucywgbmFtZSwgbm90U2F2ZWQsIHBsdXJhbCwgcXVlc3Rpb24sIHJlZiwgcmVmMSwgcmVmMiwgcmVxdWlyZXNHcmlkLCB0V2FybmluZ3MsIHZhcmlhYmxlTmFtZXM7XG4gICAgb3B0aW9ucy5xdWVzdGlvblNhdmUgPSBvcHRpb25zLnF1ZXN0aW9uU2F2ZSAhPSBudWxsID8gb3B0aW9ucy5xdWVzdGlvblNhdmUgOiB0cnVlO1xuICAgIHRoaXMubW9kZWwuc2V0KHtcbiAgICAgIFwiZ3JpZExpbmtJZFwiOiB0aGlzLiRlbC5maW5kKFwiI2xpbmtfc2VsZWN0IG9wdGlvbjpzZWxlY3RlZFwiKS52YWwoKSxcbiAgICAgIFwiYXV0b3N0b3BMaW1pdFwiOiBwYXJzZUludCh0aGlzLiRlbC5maW5kKFwiI2F1dG9zdG9wX2xpbWl0XCIpLnZhbCgpKSB8fCAwLFxuICAgICAgXCJmb2N1c01vZGVcIjogdGhpcy4kZWwuZmluZChcIiNmb2N1c19tb2RlIGlucHV0OmNoZWNrZWRcIikudmFsKCkgPT09IFwidHJ1ZVwiXG4gICAgfSk7XG4gICAgaWYgKHRoaXMubW9kZWwuZ2V0KFwiZ3JpZExpbmtJZFwiKSAhPT0gXCJcIiAmJiAodGhpcy5tb2RlbC5xdWVzdGlvbnMgIT0gbnVsbCkpIHtcbiAgICAgIGxpbmtlZFF1ZXN0aW9ucyA9IFtdO1xuICAgICAgcmVmID0gdGhpcy5tb2RlbC5xdWVzdGlvbnMud2hlcmUoe1xuICAgICAgICBcInN1YnRlc3RJZFwiOiB0aGlzLm1vZGVsLmlkXG4gICAgICB9KTtcbiAgICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICBxdWVzdGlvbiA9IHJlZltqXTtcbiAgICAgICAgYXBwbGljYWJsZSA9IHF1ZXN0aW9uLmdldE51bWJlcihcImxpbmtlZEdyaWRTY29yZVwiKSAhPT0gMCAmJiAodGhpcy5pdGVtTnVtYmVyQnlMaW5rSWRbdGhpcy5tb2RlbC5nZXQoXCJncmlkTGlua0lkXCIpXSAhPSBudWxsKTtcbiAgICAgICAgaWYgKGFwcGxpY2FibGUgJiYgcXVlc3Rpb24uZ2V0KFwibGlua2VkR3JpZFNjb3JlXCIpID4gdGhpcy5pdGVtTnVtYmVyQnlMaW5rSWRbdGhpcy5tb2RlbC5nZXQoXCJncmlkTGlua0lkXCIpXSkge1xuICAgICAgICAgIGxpbmtlZFF1ZXN0aW9ucy5wdXNoKHF1ZXN0aW9uLmdldChcIm5hbWVcIikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobGlua2VkUXVlc3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWxlcnQoXCJVbnJlYWNoYWJsZSBxdWVzdGlvbiB3YXJuaW5nXFxuXFxuVGhlIGxpbmtlZCBncmlkIGNvbnRhaW5zIGZld2VyIGl0ZW1zIHRoYW4gcXVlc3Rpb25cIiArICgobGlua2VkUXVlc3Rpb25zLmxlbmd0aCA+IDEgPyBcInNcIiA6IHZvaWQgMCkgfHwgXCJcIikgKyBcIjogXCIgKyAobGlua2VkUXVlc3Rpb25zLmpvaW4oXCIsIFwiKSkgKyBcIiBkZW1hbmRcIiArICgoIWxpbmtlZFF1ZXN0aW9ucy5sZW5ndGggPiAxID8gXCJzXCIgOiB2b2lkIDApIHx8IFwiXCIpICsgXCIuXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBub3RTYXZlZCA9IFtdO1xuICAgIGVtcHR5T3B0aW9ucyA9IFtdO1xuICAgIHJlcXVpcmVzR3JpZCA9IFtdO1xuICAgIGR1cGxpY2F0ZVZhcmlhYmxlcyA9IFtdO1xuICAgIHZhcmlhYmxlTmFtZXMgPSB7fTtcbiAgICByZWYxID0gdGhpcy5xdWVzdGlvbnNFZGl0Vmlldy5xdWVzdGlvbnMubW9kZWxzO1xuICAgIGZvciAoaSA9IGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBpID0gKytrKSB7XG4gICAgICBxdWVzdGlvbiA9IHJlZjFbaV07XG4gICAgICBpZiAocXVlc3Rpb24uZ2V0KFwibmFtZVwiKSAhPT0gXCJcIikge1xuICAgICAgICBpZiAoIV8uaXNOdW1iZXIodmFyaWFibGVOYW1lc1txdWVzdGlvbi5nZXQoXCJuYW1lXCIpXSkpIHtcbiAgICAgICAgICB2YXJpYWJsZU5hbWVzW3F1ZXN0aW9uLmdldChcIm5hbWVcIildID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXJpYWJsZU5hbWVzW3F1ZXN0aW9uLmdldChcIm5hbWVcIildKys7XG4gICAgICB9XG4gICAgICBpZiAocXVlc3Rpb24uZ2V0KFwidHlwZVwiKSAhPT0gXCJvcGVuXCIgJiYgKChyZWYyID0gcXVlc3Rpb24uZ2V0KFwib3B0aW9uc1wiKSkgIT0gbnVsbCA/IHJlZjIubGVuZ3RoIDogdm9pZCAwKSA9PT0gMCAmJiAhfnF1ZXN0aW9uLmdldFN0cmluZygnZGlzcGxheUNvZGUnKS5pbmRleE9mKCdzZXRPcHRpb25zJykpIHtcbiAgICAgICAgZW1wdHlPcHRpb25zLnB1c2goaSArIDEpO1xuICAgICAgICBpZiAob3B0aW9ucy5xdWVzdGlvblNhdmUpIHtcbiAgICAgICAgICBpZiAoIXF1ZXN0aW9uLnNhdmUoKSkge1xuICAgICAgICAgICAgbm90U2F2ZWQucHVzaChpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHF1ZXN0aW9uLmhhcyhcImxpbmtlZEdyaWRTY29yZVwiKSAmJiBxdWVzdGlvbi5nZXQoXCJsaW5rZWRHcmlkU2NvcmVcIikgIT09IFwiXCIgJiYgcXVlc3Rpb24uZ2V0KFwibGlua2VkR3JpZFNjb3JlXCIpICE9PSAwICYmIHRoaXMubW9kZWwuaGFzKFwiZ3JpZExpbmtJZFwiKSA9PT0gXCJcIiAmJiB0aGlzLm1vZGVsLmdldChcImdyaWRMaW5rSWRcIikgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHJlcXVpcmVzR3JpZC5wdXNoKGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKG5hbWUgaW4gdmFyaWFibGVOYW1lcykge1xuICAgICAgY291bnQgPSB2YXJpYWJsZU5hbWVzW25hbWVdO1xuICAgICAgaWYgKGNvdW50ICE9PSAxKSB7XG4gICAgICAgIGR1cGxpY2F0ZVZhcmlhYmxlcy5wdXNoKG5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBhV2FybmluZ3MgPSBbXTtcbiAgICBpZiAobm90U2F2ZWQubGVuZ3RoICE9PSAwKSB7XG4gICAgICBVdGlscy5taWRBbGVydChcIkVycm9yPGJyPjxicj5RdWVzdGlvbnM6IDxicj5cIiArIChub3RTYXZlZC5qb2luKCcsICcpKSArIFwiPGJyPm5vdCBzYXZlZFwiKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMucXVlc3Rpb25TYXZlICYmIGVtcHR5T3B0aW9ucy5sZW5ndGggIT09IDApIHtcbiAgICAgIHBsdXJhbCA9IGVtcHR5T3B0aW9ucy5sZW5ndGggPiAxO1xuICAgICAgX3F1ZXN0aW9uID0gcGx1cmFsID8gXCJRdWVzdGlvbnNcIiA6IFwiUXVlc3Rpb25cIjtcbiAgICAgIF9oYXMgPSBwbHVyYWwgPyBcImhhdmVcIiA6IFwiaGFzXCI7XG4gICAgICBhV2FybmluZ3MucHVzaChcIi0gXCIgKyBfcXVlc3Rpb24gKyBcIiBcIiArIChlbXB0eU9wdGlvbnMuam9pbignICwnKSkgKyBcIiBcIiArIF9oYXMgKyBcIiBubyBvcHRpb25zLlwiKTtcbiAgICB9XG4gICAgaWYgKHJlcXVpcmVzR3JpZC5sZW5ndGggIT09IDApIHtcbiAgICAgIHBsdXJhbCA9IGVtcHR5T3B0aW9ucy5sZW5ndGggPiAxO1xuICAgICAgX3F1ZXN0aW9uID0gcGx1cmFsID8gXCJRdWVzdGlvbnNcIiA6IFwiUXVlc3Rpb25cIjtcbiAgICAgIF9yZXF1aXJlID0gcGx1cmFsID8gXCJyZXF1aXJlXCIgOiBcInJlcXVpcmVzXCI7XG4gICAgICBhV2FybmluZ3MucHVzaChcIi0gXCIgKyBfcXVlc3Rpb24gKyBcIiBcIiArIChyZXF1aXJlc0dyaWQuam9pbignICwnKSkgKyBcIiBcIiArIF9yZXF1aXJlICsgXCIgYSBncmlkIHRvIGJlIGxpbmtlZCB0byB0aGlzIHRlc3QuXCIpO1xuICAgIH1cbiAgICBpZiAoZHVwbGljYXRlVmFyaWFibGVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgYVdhcm5pbmdzLnB1c2goXCItIFRoZSBmb2xsb3dpbmcgdmFyaWFibGVzIGFyZSBkdXBsaWNhdGVzXFxuIFwiICsgKGR1cGxpY2F0ZVZhcmlhYmxlcy5qb2luKCcsICcpKSk7XG4gICAgfVxuICAgIGlmIChhV2FybmluZ3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICB0V2FybmluZ3MgPSBhV2FybmluZ3Muam9pbihcIlxcblxcblwiKTtcbiAgICAgIHJldHVybiBhbGVydChcIldhcm5pbmdcXG5cXG5cIiArIHRXYXJuaW5ncyk7XG4gICAgfVxuICB9O1xuXG4gIFN1cnZleUVkaXRWaWV3LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlZjtcbiAgICByZXR1cm4gKHJlZiA9IHRoaXMucXVlc3Rpb25zTGlzdEVkaXQpICE9IG51bGwgPyByZWYuY2xvc2UoKSA6IHZvaWQgMDtcbiAgfTtcblxuICBTdXJ2ZXlFZGl0Vmlldy5wcm90b3R5cGUucmVuZGVyUXVlc3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlZjtcbiAgICByZXR1cm4gKHJlZiA9IHRoaXMucXVlc3Rpb25zRWRpdFZpZXcpICE9IG51bGwgPyByZWYucmVuZGVyKCkgOiB2b2lkIDA7XG4gIH07XG5cbiAgU3VydmV5RWRpdFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhdXRvc3RvcExpbWl0LCBmb2N1c01vZGUsIGdyaWRMaW5rSWQsIGdyaWRTdWJ0ZXN0cywgaiwgbGVuLCBsaW5rU2VsZWN0LCBzdWJ0ZXN0O1xuICAgIGdyaWRMaW5rSWQgPSB0aGlzLm1vZGVsLmdldChcImdyaWRMaW5rSWRcIikgfHwgXCJcIjtcbiAgICBhdXRvc3RvcExpbWl0ID0gcGFyc2VJbnQodGhpcy5tb2RlbC5nZXQoXCJhdXRvc3RvcExpbWl0XCIpKSB8fCAwO1xuICAgIGZvY3VzTW9kZSA9IHRoaXMubW9kZWwuZ2V0Qm9vbGVhbihcImZvY3VzTW9kZVwiKTtcbiAgICB0aGlzLiRlbC5odG1sKFwiPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdhdXRvc3RvcF9saW1pdCcgdGl0bGU9J1RoZSBzdXJ2ZXkgd2lsbCBkaXNjb250aW51ZSBhZnRlciBhbnkgTiBjb25zZWN1dGl2ZSBxdWVzdGlvbnMgaGF2ZSBiZWVuIGFuc3dlcmVkIHdpdGggYSAmcXVvdDswJnF1b3Q7IHZhbHVlIG9wdGlvbi4nPkF1dG9zdG9wIGFmdGVyIE4gaW5jb3JyZWN0PC9sYWJlbD48YnI+IDxpbnB1dCBpZD0nYXV0b3N0b3BfbGltaXQnIHR5cGU9J251bWJlcicgdmFsdWU9J1wiICsgYXV0b3N0b3BMaW1pdCArIFwiJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIHRpdGxlPSdEaXNwbGF5cyBvbmUgcXVlc3Rpb24gYXQgYSB0aW1lIHdpdGggbmV4dCBhbmQgcHJldmlvdXMgYnV0dG9ucy4nPkZvY3VzIG1vZGU8L2xhYmVsPiA8ZGl2IGlkPSdmb2N1c19tb2RlJyBjbGFzcz0nYnV0dG9uc2V0Jz4gPGxhYmVsIGZvcj0nZm9jdXNfdHJ1ZSc+WWVzPC9sYWJlbD4gPGlucHV0IG5hbWU9J2ZvY3VzX21vZGUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZScgaWQ9J2ZvY3VzX3RydWUnIFwiICsgKGZvY3VzTW9kZSA/ICdjaGVja2VkJyA6IHZvaWQgMCkgKyBcIj4gPGxhYmVsIGZvcj0nZm9jdXNfZmFsc2UnPk5vPC9sYWJlbD4gPGlucHV0IG5hbWU9J2ZvY3VzX21vZGUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnIGlkPSdmb2N1c19mYWxzZScgXCIgKyAoIWZvY3VzTW9kZSA/ICdjaGVja2VkJyA6IHZvaWQgMCkgKyBcIj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGlkPSdncmlkX2xpbmsnPjwvZGl2PiA8ZGl2IGlkPSdxdWVzdGlvbnMnPiA8aDI+UXVlc3Rpb25zPC9oMj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8ZGl2IGlkPSdxdWVzdGlvbl9saXN0X3dyYXBwZXInPjxpbWcgY2xhc3M9J2xvYWRpbmcnIHNyYz0naW1hZ2VzL2xvYWRpbmcuZ2lmJz48dWw+PC91bD48L2Rpdj4gPGJ1dHRvbiBjbGFzcz0nYWRkX3F1ZXN0aW9uIGNvbW1hbmQnPkFkZCBRdWVzdGlvbjwvYnV0dG9uPiA8ZGl2IGlkPSdhZGRfcXVlc3Rpb25fZm9ybScgY2xhc3M9J2NvbmZpcm1hdGlvbic+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gPGgyPk5ldyBRdWVzdGlvbjwvaDI+IDxsYWJlbCBmb3I9J3F1ZXN0aW9uX3Byb21wdCc+UHJvbXB0PC9sYWJlbD4gPGlucHV0IGlkPSdxdWVzdGlvbl9wcm9tcHQnPiA8bGFiZWwgZm9yPSdxdWVzdGlvbl9uYW1lJz5WYXJpYWJsZSBuYW1lPC9sYWJlbD4gPGlucHV0IGlkPSdxdWVzdGlvbl9uYW1lJyB0aXRsZT0nQWxsb3dlZCBjaGFyYWN0ZXJzOiBBLVosIGEteiwgMC05LCBhbmQgdW5kZXJzY29yZXMuJz48YnI+IDxidXR0b24gY2xhc3M9J2FkZF9xdWVzdGlvbl9hZGQgY29tbWFuZCc+QWRkPC9idXR0b24+PGJ1dHRvbiBjbGFzcz0nYWRkX3F1ZXN0aW9uX2NhbmNlbCBjb21tYW5kJz5DYW5jZWw8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+XCIpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIjcXVlc3Rpb25fbGlzdF93cmFwcGVyIC5sb2FkaW5nXCIpLnJlbW92ZSgpO1xuICAgIHRoaXMucXVlc3Rpb25zRWRpdFZpZXcuc2V0RWxlbWVudCh0aGlzLiRlbC5maW5kKFwiI3F1ZXN0aW9uX2xpc3Rfd3JhcHBlciB1bFwiKSk7XG4gICAgdGhpcy5yZW5kZXJRdWVzdGlvbnMoKTtcbiAgICBncmlkU3VidGVzdHMgPSB0aGlzLnN1YnRlc3RzLndoZXJlKHtcbiAgICAgIHByb3RvdHlwZTogJ2dyaWQnXG4gICAgfSk7XG4gICAgbGlua1NlbGVjdCA9IFwiPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdsaW5rX3NlbGVjdCc+TGlua2VkIHRvIGdyaWQ8L2xhYmVsPjxicj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8c2VsZWN0IGlkPSdsaW5rX3NlbGVjdCc+IDxvcHRpb24gdmFsdWU9Jyc+Tm9uZTwvb3B0aW9uPlwiO1xuICAgIGZvciAoaiA9IDAsIGxlbiA9IGdyaWRTdWJ0ZXN0cy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgc3VidGVzdCA9IGdyaWRTdWJ0ZXN0c1tqXTtcbiAgICAgIGlmICh0aGlzLml0ZW1OdW1iZXJCeUxpbmtJZCA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuaXRlbU51bWJlckJ5TGlua0lkID0ge307XG4gICAgICB9XG4gICAgICB0aGlzLml0ZW1OdW1iZXJCeUxpbmtJZFtzdWJ0ZXN0LmlkXSA9IHN1YnRlc3QuZ2V0KFwiaXRlbXNcIikubGVuZ3RoO1xuICAgICAgbGlua1NlbGVjdCArPSBcIjxvcHRpb24gdmFsdWU9J1wiICsgc3VidGVzdC5pZCArIFwiJyBcIiArICgoZ3JpZExpbmtJZCA9PT0gc3VidGVzdC5pZCkgPyAnc2VsZWN0ZWQnIDogJycpICsgXCI+XCIgKyAoc3VidGVzdC5nZXQoJ25hbWUnKSkgKyBcIjwvb3B0aW9uPlwiO1xuICAgIH1cbiAgICBsaW5rU2VsZWN0ICs9IFwiPC9zZWxlY3Q+PC9kaXY+PC9kaXY+XCI7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoJyNncmlkX2xpbmsnKS5odG1sKGxpbmtTZWxlY3QpO1xuICB9O1xuXG4gIHJldHVybiBTdXJ2ZXlFZGl0VmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIElkUnVuVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiaWRcIlxuICBcbiAgZXZlbnRzOlxuICAgICdjbGljayAjZ2VuZXJhdGUnICAgICAgICA6ICdnZW5lcmF0ZSdcbiAgICAnY2hhbmdlICNwYXJ0aWNpcGFudF9pZCcgOiAnc2V0VmFsaWRhdG9yJ1xuICBcbiAgaTE4bjogLT5cbiAgICBAdGV4dCA9IFxuICAgICAgaWRlbnRpZmllciA6IHQoXCJJZFJ1blZpZXcubGFiZWwuaWRlbnRpZmllclwiKVxuICAgICAgZ2VuZXJhdGUgICA6IHQoXCJJZFJ1blZpZXcuYnV0dG9uLmdlbmVyYXRlXCIpXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgICBAaTE4bigpXG5cbiAgICBAbW9kZWwgICAgID0gb3B0aW9ucy5tb2RlbFxuICAgIEBwYXJlbnQgICAgPSBvcHRpb25zLnBhcmVudFxuICAgIEBkYXRhRW50cnkgPSBvcHRpb25zLmRhdGFFbnRyeVxuXG4gICAgQHZhbGlkYXRvciA9IG5ldyBDaGVja0RpZ2l0XG5cbiAgcmVuZGVyOiAtPlxuXG4gICAgdW5sZXNzIEBkYXRhRW50cnlcbiAgICAgIHByZXZpb3VzID0gQHBhcmVudC5wYXJlbnQucmVzdWx0LmdldEJ5SGFzaChAbW9kZWwuZ2V0KCdoYXNoJykpXG4gICAgICBpZiBwcmV2aW91c1xuICAgICAgICBwYXJ0aWNpcGFudElkID0gcHJldmlvdXMucGFydGljaXBhbnRfaWRcblxuICAgIEAkZWwuaHRtbCBcIlxuICAgIDxmb3JtPlxuICAgICAgPGxhYmVsIGZvcj0ncGFydGljaXBhbnRfaWQnPiN7QHRleHQuaWRlbnRpZmllcn08L2xhYmVsPlxuICAgICAgPGlucHV0IGlkPSdwYXJ0aWNpcGFudF9pZCcgbmFtZT0ncGFydGljaXBhbnRfaWQnIHZhbHVlPScje3BhcnRpY2lwYW50SWR8fCcnfSc+XG4gICAgICA8YnV0dG9uIGlkPSdnZW5lcmF0ZScgY2xhc3M9J2NvbW1hbmQnPiN7QHRleHQuZ2VuZXJhdGV9PC9idXR0b24+XG4gICAgICA8ZGl2IGNsYXNzPSdtZXNzYWdlcyc+PC9kaXY+XG4gICAgPC9mb3JtPlwiXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG4gICAgQHRyaWdnZXIgXCJyZWFkeVwiXG5cbiAgZ2V0UmVzdWx0OiAtPlxuICAgIHJldHVybiB7ICdwYXJ0aWNpcGFudF9pZCcgOiBAJGVsLmZpbmQoXCIjcGFydGljaXBhbnRfaWRcIikudmFsKCkgfVxuXG4gIGdldFNraXBwZWQ6IC0+XG4gICAgcmV0dXJuIHsgJ3BhcnRpY2lwYW50X2lkJyA6IFwic2tpcHBlZFwiIH1cblxuICBzZXRWYWxpZGF0b3I6IC0+XG4gICAgQHZhbGlkYXRvci5zZXQgQGdldFJlc3VsdCgpWydwYXJ0aWNpcGFudF9pZCddXG5cbiAgaXNWYWxpZDogLT5cbiAgICBAc2V0VmFsaWRhdG9yKClcbiAgICByZXR1cm4gZmFsc2UgaWYgbm90IEB2YWxpZGF0b3IuaXNWYWxpZCgpXG4gICAgQHVwZGF0ZU5hdmlnYXRpb24oKVxuICAgIFxuICBzaG93RXJyb3JzOiAtPlxuICAgIEAkZWwuZmluZChcIi5tZXNzYWdlc1wiKS5odG1sIEB2YWxpZGF0b3IuZ2V0RXJyb3JzKCkuam9pbihcIiwgXCIpXG5cbiAgZ2VuZXJhdGU6IC0+XG4gICAgQCRlbC5maW5kKFwiLm1lc3NhZ2VzXCIpLmVtcHR5KClcbiAgICBAJGVsLmZpbmQoJyNwYXJ0aWNpcGFudF9pZCcpLnZhbCBAdmFsaWRhdG9yLmdlbmVyYXRlKClcbiAgICBmYWxzZVxuXG4gIHVwZGF0ZU5hdmlnYXRpb246IC0+XG4gICAgVGFuZ2VyaW5lLm5hdi5zZXRTdHVkZW50IEBnZXRSZXN1bHQoKVsncGFydGljaXBhbnRfaWQnXVxuIiwidmFyIElkUnVuVmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbklkUnVuVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChJZFJ1blZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIElkUnVuVmlldygpIHtcbiAgICByZXR1cm4gSWRSdW5WaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgSWRSdW5WaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcImlkXCI7XG5cbiAgSWRSdW5WaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrICNnZW5lcmF0ZSc6ICdnZW5lcmF0ZScsXG4gICAgJ2NoYW5nZSAjcGFydGljaXBhbnRfaWQnOiAnc2V0VmFsaWRhdG9yJ1xuICB9O1xuXG4gIElkUnVuVmlldy5wcm90b3R5cGUuaTE4biA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRleHQgPSB7XG4gICAgICBpZGVudGlmaWVyOiB0KFwiSWRSdW5WaWV3LmxhYmVsLmlkZW50aWZpZXJcIiksXG4gICAgICBnZW5lcmF0ZTogdChcIklkUnVuVmlldy5idXR0b24uZ2VuZXJhdGVcIilcbiAgICB9O1xuICB9O1xuXG4gIElkUnVuVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLmkxOG4oKTtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICAgIHRoaXMuZGF0YUVudHJ5ID0gb3B0aW9ucy5kYXRhRW50cnk7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yID0gbmV3IENoZWNrRGlnaXQ7XG4gIH07XG5cbiAgSWRSdW5WaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFydGljaXBhbnRJZCwgcHJldmlvdXM7XG4gICAgaWYgKCF0aGlzLmRhdGFFbnRyeSkge1xuICAgICAgcHJldmlvdXMgPSB0aGlzLnBhcmVudC5wYXJlbnQucmVzdWx0LmdldEJ5SGFzaCh0aGlzLm1vZGVsLmdldCgnaGFzaCcpKTtcbiAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICBwYXJ0aWNpcGFudElkID0gcHJldmlvdXMucGFydGljaXBhbnRfaWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuJGVsLmh0bWwoXCI8Zm9ybT4gPGxhYmVsIGZvcj0ncGFydGljaXBhbnRfaWQnPlwiICsgdGhpcy50ZXh0LmlkZW50aWZpZXIgKyBcIjwvbGFiZWw+IDxpbnB1dCBpZD0ncGFydGljaXBhbnRfaWQnIG5hbWU9J3BhcnRpY2lwYW50X2lkJyB2YWx1ZT0nXCIgKyAocGFydGljaXBhbnRJZCB8fCAnJykgKyBcIic+IDxidXR0b24gaWQ9J2dlbmVyYXRlJyBjbGFzcz0nY29tbWFuZCc+XCIgKyB0aGlzLnRleHQuZ2VuZXJhdGUgKyBcIjwvYnV0dG9uPiA8ZGl2IGNsYXNzPSdtZXNzYWdlcyc+PC9kaXY+IDwvZm9ybT5cIik7XG4gICAgdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlYWR5XCIpO1xuICB9O1xuXG4gIElkUnVuVmlldy5wcm90b3R5cGUuZ2V0UmVzdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICdwYXJ0aWNpcGFudF9pZCc6IHRoaXMuJGVsLmZpbmQoXCIjcGFydGljaXBhbnRfaWRcIikudmFsKClcbiAgICB9O1xuICB9O1xuXG4gIElkUnVuVmlldy5wcm90b3R5cGUuZ2V0U2tpcHBlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAncGFydGljaXBhbnRfaWQnOiBcInNraXBwZWRcIlxuICAgIH07XG4gIH07XG5cbiAgSWRSdW5WaWV3LnByb3RvdHlwZS5zZXRWYWxpZGF0b3IgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0b3Iuc2V0KHRoaXMuZ2V0UmVzdWx0KClbJ3BhcnRpY2lwYW50X2lkJ10pO1xuICB9O1xuXG4gIElkUnVuVmlldy5wcm90b3R5cGUuaXNWYWxpZCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0VmFsaWRhdG9yKCk7XG4gICAgaWYgKCF0aGlzLnZhbGlkYXRvci5pc1ZhbGlkKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlTmF2aWdhdGlvbigpO1xuICB9O1xuXG4gIElkUnVuVmlldy5wcm90b3R5cGUuc2hvd0Vycm9ycyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLm1lc3NhZ2VzXCIpLmh0bWwodGhpcy52YWxpZGF0b3IuZ2V0RXJyb3JzKCkuam9pbihcIiwgXCIpKTtcbiAgfTtcblxuICBJZFJ1blZpZXcucHJvdG90eXBlLmdlbmVyYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwuZmluZChcIi5tZXNzYWdlc1wiKS5lbXB0eSgpO1xuICAgIHRoaXMuJGVsLmZpbmQoJyNwYXJ0aWNpcGFudF9pZCcpLnZhbCh0aGlzLnZhbGlkYXRvci5nZW5lcmF0ZSgpKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgSWRSdW5WaWV3LnByb3RvdHlwZS51cGRhdGVOYXZpZ2F0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5uYXYuc2V0U3R1ZGVudCh0aGlzLmdldFJlc3VsdCgpWydwYXJ0aWNpcGFudF9pZCddKTtcbiAgfTtcblxuICByZXR1cm4gSWRSdW5WaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgSWRFZGl0VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiSWRFZGl0Vmlld1wiXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cbiAgICBAbW9kZWwgPSBvcHRpb25zLm1vZGVsXG4gICAgQHBhcmVudCA9IG9wdGlvbnMucGFyZW50XG5cbiAgaXNWYWxpZDogLT4gdHJ1ZVxuXG4gIHNhdmU6IC0+ICMgZG8gbm90aGluZyIsInZhciBJZEVkaXRWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuSWRFZGl0VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChJZEVkaXRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBJZEVkaXRWaWV3KCkge1xuICAgIHJldHVybiBJZEVkaXRWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgSWRFZGl0Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJJZEVkaXRWaWV3XCI7XG5cbiAgSWRFZGl0Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgfTtcblxuICBJZEVkaXRWaWV3LnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgSWRFZGl0Vmlldy5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uKCkge307XG5cbiAgcmV0dXJuIElkRWRpdFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBHcmlkUnVuVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiZ3JpZF9wcm90b3R5cGVcIlxuXG4gIGV2ZW50czogaWYgTW9kZXJuaXpyLnRvdWNoIHRoZW4ge1xuICAgICdjbGljayAuZ3JpZF9lbGVtZW50JyAgICAgOiAnZ3JpZENsaWNrJyAjY2xpY2tcbiAgICAnY2xpY2sgLmVuZF9vZl9ncmlkX2xpbmUnIDogJ2VuZE9mR3JpZExpbmVDbGljaycgI2NsaWNrXG4gICAgJ2NsaWNrIC5zdGFydF90aW1lJyAgOiAnc3RhcnRUaW1lcidcbiAgICAnY2xpY2sgLnN0b3BfdGltZScgICA6ICdzdG9wVGltZXInXG4gICAgJ2NsaWNrIC5yZXN0YXJ0JyAgICAgOiAncmVzdGFydFRpbWVyJ1xuICB9IGVsc2Uge1xuICAgICdjbGljayAuZW5kX29mX2dyaWRfbGluZScgOiAnZW5kT2ZHcmlkTGluZUNsaWNrJ1xuICAgICdjbGljayAuZ3JpZF9lbGVtZW50JyAgICAgOiAnZ3JpZENsaWNrJ1xuICAgICdjbGljayAuc3RhcnRfdGltZScgICAgICAgOiAnc3RhcnRUaW1lcidcbiAgICAnY2xpY2sgLnN0b3BfdGltZScgICAgICAgIDogJ3N0b3BUaW1lcidcbiAgICAnY2xpY2sgLnJlc3RhcnQnICAgICAgICAgIDogJ3Jlc3RhcnRUaW1lcidcbiAgfVxuXG4gIHJlc3RhcnRUaW1lcjogLT5cbiAgICBAc3RvcFRpbWVyKHNpbXBsZVN0b3A6dHJ1ZSkgaWYgQHRpbWVSdW5uaW5nXG5cbiAgICBAcmVzZXRWYXJpYWJsZXMoKVxuXG4gICAgQCRlbC5maW5kKFwiLmVsZW1lbnRfd3JvbmdcIikucmVtb3ZlQ2xhc3MgXCJlbGVtZW50X3dyb25nXCJcbiAgICBAJGVsLmZpbmQoXCIuZ3JpZF9lbGVtZW50XCIpLnJlbW92ZUNsYXNzIFwiZWxlbWVudF9taW51dGVcIlxuXG4gIGdyaWRDbGljazogKGV2ZW50KSA9PlxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICBAbW9kZUhhbmRsZXJzW0Btb2RlXT8oZXZlbnQpXG5cbiAgbWFya0hhbmRsZXI6IChldmVudCkgPT5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG4gICAgaW5kZXggPSAkdGFyZ2V0LmF0dHIoJ2RhdGEtaW5kZXgnKVxuXG4gICAgaW5kZXhJc250QmVsb3dMYXN0QXR0ZW1wdGVkID0gcGFyc2VJbnQoaW5kZXgpID4gcGFyc2VJbnQoQGxhc3RBdHRlbXB0ZWQpXG4gICAgbGFzdEF0dGVtcHRlZElzbnRaZXJvICAgICAgID0gcGFyc2VJbnQoQGxhc3RBdHRlbXB0ZWQpICE9IDBcbiAgICBjb3JyZWN0aW9uc0Rpc2FibGVkICAgICAgICAgPSBAZGF0YUVudHJ5IGlzIGZhbHNlIGFuZCBAcGFyZW50Py5wYXJlbnQ/LmVuYWJsZUNvcnJlY3Rpb25zIGlzIGZhbHNlXG5cbiAgICByZXR1cm4gaWYgY29ycmVjdGlvbnNEaXNhYmxlZCAmJiBsYXN0QXR0ZW1wdGVkSXNudFplcm8gJiYgaW5kZXhJc250QmVsb3dMYXN0QXR0ZW1wdGVkXG5cbiAgICBAbWFya0VsZW1lbnQoaW5kZXgpXG4gICAgQGNoZWNrQXV0b3N0b3AoKSBpZiBAYXV0b3N0b3AgIT0gMFxuXG5cbiAgaW50ZXJtZWRpYXRlSXRlbUhhbmRsZXI6IChldmVudCkgPT5cbiAgICBAdGltZUludGVybWVkaWF0ZUNhcHR1cmVkID0gQGdldFRpbWUoKSAtIEBzdGFydFRpbWVcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG4gICAgaW5kZXggPSAkdGFyZ2V0LmF0dHIoJ2RhdGEtaW5kZXgnKVxuICAgIEBpdGVtQXRUaW1lID0gaW5kZXhcbiAgICBAJGVsLmZpbmQoXCIuZ3JpZF9lbGVtZW50XCIpLnJlbW92ZUNsYXNzKFwiZWxlbWVudF9taW51dGVcIilcbiAgICAkdGFyZ2V0LmFkZENsYXNzIFwiZWxlbWVudF9taW51dGVcIlxuICAgIEB1cGRhdGVNb2RlIFwibWFya1wiXG5cblxuICBjaGVja0F1dG9zdG9wOiAtPlxuICAgIGlmIEB0aW1lUnVubmluZ1xuICAgICAgYXV0b0NvdW50ID0gMFxuICAgICAgZm9yIGkgaW4gWzAuLkBhdXRvc3RvcC0xXVxuICAgICAgICBpZiBAZ3JpZE91dHB1dFtpXSA9PSBcImNvcnJlY3RcIiB0aGVuIGJyZWFrXG4gICAgICAgIGF1dG9Db3VudCsrXG4gICAgICBpZiBAYXV0b3N0b3BwZWQgPT0gZmFsc2VcbiAgICAgICAgaWYgYXV0b0NvdW50ID09IEBhdXRvc3RvcCB0aGVuIEBhdXRvc3RvcFRlc3QoKVxuICAgICAgaWYgQGF1dG9zdG9wcGVkID09IHRydWUgJiYgYXV0b0NvdW50IDwgQGF1dG9zdG9wICYmIEB1bmRvYWJsZSA9PSB0cnVlIHRoZW4gQHVuQXV0b3N0b3BUZXN0KClcblxuICAgICAgICAjIG1vZGUgaXMgdXNlZCBmb3Igb3BlcmF0aW9ucyBsaWtlIHByZS1wb3B1bGF0aW5nIHRoZSBncmlkIHdoZW4gZG9pbmcgY29ycmVjdGlvbnMuXG4gIG1hcmtFbGVtZW50OiAoaW5kZXgsIHZhbHVlID0gbnVsbCwgbW9kZSkgLT5cbiAgICAjIGlmIGxhc3QgYXR0ZW1wdGVkIGhhcyBiZWVuIHNldCwgYW5kIHRoZSBjbGljayBpcyBhYm92ZSBpdCwgdGhlbiBjYW5jZWxcbiAgICBcbiAgICBjb3JyZWN0aW9uc0Rpc2FibGVkICAgICAgICAgPSBAZGF0YUVudHJ5IGlzIGZhbHNlIGFuZCBAcGFyZW50Py5wYXJlbnQ/LmVuYWJsZUNvcnJlY3Rpb25zPyBhbmQgQHBhcmVudD8ucGFyZW50Py5lbmFibGVDb3JyZWN0aW9ucyBpcyBmYWxzZVxuICAgIGxhc3RBdHRlbXB0ZWRJc250WmVybyAgICAgICA9IHBhcnNlSW50KEBsYXN0QXR0ZW1wdGVkKSAhPSAwXG4gICAgaW5kZXhJc250QmVsb3dMYXN0QXR0ZW1wdGVkID0gcGFyc2VJbnQoaW5kZXgpID4gcGFyc2VJbnQoQGxhc3RBdHRlbXB0ZWQpXG5cbiAgICByZXR1cm4gaWYgY29ycmVjdGlvbnNEaXNhYmxlZCBhbmQgbGFzdEF0dGVtcHRlZElzbnRaZXJvIGFuZCBpbmRleElzbnRCZWxvd0xhc3RBdHRlbXB0ZWRcblxuICAgICR0YXJnZXQgPSBAJGVsLmZpbmQoXCIuZ3JpZF9lbGVtZW50W2RhdGEtaW5kZXg9I3tpbmRleH1dXCIpXG4gICAgaWYgbW9kZSAhPSAncG9wdWxhdGUnXG4gICAgICBAbWFya1JlY29yZC5wdXNoIGluZGV4XG5cbiAgICBpZiBub3QgQGF1dG9zdG9wcGVkXG4gICAgICBpZiB2YWx1ZSA9PSBudWxsICMgbm90IHNwZWNpZnlpbmcgdGhlIHZhbHVlLCBqdXN0IHRvZ2dsZVxuICAgICAgICBAZ3JpZE91dHB1dFtpbmRleC0xXSA9IGlmIChAZ3JpZE91dHB1dFtpbmRleC0xXSA9PSBcImNvcnJlY3RcIikgdGhlbiBcImluY29ycmVjdFwiIGVsc2UgXCJjb3JyZWN0XCJcbiAgICAgICAgJHRhcmdldC50b2dnbGVDbGFzcyBcImVsZW1lbnRfd3JvbmdcIlxuICAgICAgZWxzZSAjIHZhbHVlIHNwZWNpZmllZFxuICAgICAgICBAZ3JpZE91dHB1dFtpbmRleC0xXSA9IHZhbHVlXG4gICAgICAgIGlmIHZhbHVlID09IFwiaW5jb3JyZWN0XCJcbiAgICAgICAgICAkdGFyZ2V0LmFkZENsYXNzIFwiZWxlbWVudF93cm9uZ1wiXG4gICAgICAgIGVsc2UgaWYgdmFsdWUgPT0gXCJjb3JyZWN0XCJcbiAgICAgICAgICAkdGFyZ2V0LnJlbW92ZUNsYXNzIFwiZWxlbWVudF93cm9uZ1wiXG5cbiAgZW5kT2ZHcmlkTGluZUNsaWNrOiAoZXZlbnQpIC0+XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgIGlmIEBtb2RlID09IFwibWFya1wiXG4gICAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG5cbiAgICAgICMgaWYgd2hhdCB3ZSBjbGlja2VkIGlzIGFscmVhZHkgbWFya2VkIHdyb25nXG4gICAgICBpZiAkdGFyZ2V0Lmhhc0NsYXNzKFwiZWxlbWVudF93cm9uZ1wiKVxuICAgICAgICAjIFlFUywgbWFyayBpdCByaWdodFxuICAgICAgICAkdGFyZ2V0LnJlbW92ZUNsYXNzIFwiZWxlbWVudF93cm9uZ1wiXG4gICAgICAgIGluZGV4ID0gJHRhcmdldC5hdHRyKCdkYXRhLWluZGV4JylcbiAgICAgICAgZm9yIGkgaW4gW2luZGV4Li4oaW5kZXgtKEBjb2x1bW5zLTEpKV1cbiAgICAgICAgICBAbWFya0VsZW1lbnQgaSwgXCJjb3JyZWN0XCJcbiAgICAgIGVsc2UgaWYgISR0YXJnZXQuaGFzQ2xhc3MoXCJlbGVtZW50X3dyb25nXCIpICYmICFAYXV0b3N0b3BwZWRcbiAgICAgICAgIyBOTywgbWFyayBpdCB3cm9uZ1xuICAgICAgICAkdGFyZ2V0LmFkZENsYXNzIFwiZWxlbWVudF93cm9uZ1wiXG4gICAgICAgIGluZGV4ID0gJHRhcmdldC5hdHRyKCdkYXRhLWluZGV4JylcbiAgICAgICAgZm9yIGkgaW4gW2luZGV4Li4oaW5kZXgtKEBjb2x1bW5zLTEpKV1cbiAgICAgICAgICBAbWFya0VsZW1lbnQgaSwgXCJpbmNvcnJlY3RcIlxuXG4gICAgICBAY2hlY2tBdXRvc3RvcCgpIGlmIEBhdXRvc3RvcCAhPSAwXG5cbiAgbGFzdEhhbmRsZXI6IChldmVudCwgaW5kZXgpID0+XG4gICAgaWYgaW5kZXg/XG4gICAgICAkdGFyZ2V0ID0gQCRlbC5maW5kKFwiLmdyaWRfZWxlbWVudFtkYXRhLWluZGV4PSN7aW5kZXh9XVwiKVxuICAgIGVsc2VcbiAgICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICAgIGluZGV4ICAgPSAkdGFyZ2V0LmF0dHIoJ2RhdGEtaW5kZXgnKVxuXG4gICAgaWYgaW5kZXggLSAxID49IEBncmlkT3V0cHV0Lmxhc3RJbmRleE9mKFwiaW5jb3JyZWN0XCIpXG4gICAgICBAJGVsLmZpbmQoXCIuZWxlbWVudF9sYXN0XCIpLnJlbW92ZUNsYXNzIFwiZWxlbWVudF9sYXN0XCJcbiAgICAgICR0YXJnZXQuYWRkQ2xhc3MgXCJlbGVtZW50X2xhc3RcIlxuICAgICAgQGxhc3RBdHRlbXB0ZWQgPSBpbmRleFxuXG4gIHN0YXJ0VGltZXI6IC0+XG4gICAgaWYgQHRpbWVyU3RvcHBlZCA9PSBmYWxzZSAmJiBAdGltZVJ1bm5pbmcgPT0gZmFsc2VcbiAgICAgIEBpbnRlcnZhbCA9IHNldEludGVydmFsKCBAdXBkYXRlQ291bnRkb3duLCAxMDAwICkgIyBtYWdpYyBudW1iZXJcbiAgICAgIEBzdGFydFRpbWUgPSBAZ2V0VGltZSgpXG4gICAgICBAdGltZVJ1bm5pbmcgPSB0cnVlXG4gICAgICBAdXBkYXRlTW9kZSBcIm1hcmtcIlxuICAgICAgQGVuYWJsZUdyaWQoKVxuICAgICAgQHVwZGF0ZUNvdW50ZG93bigpXG5cbiAgZW5hYmxlR3JpZDogLT5cbiAgICBAJGVsLmZpbmQoXCJ0YWJsZS5kaXNhYmxlZCwgZGl2LmRpc2FibGVkXCIpLnJlbW92ZUNsYXNzKFwiZGlzYWJsZWRcIilcblxuICBzdG9wVGltZXI6IChldmVudCwgbWVzc2FnZSA9IGZhbHNlKSAtPlxuXG4gICAgcmV0dXJuIGlmIEB0aW1lUnVubmluZyAhPSB0cnVlICMgc3RvcCBvbmx5IGlmIG5lZWRlZFxuXG4gICAgaWYgZXZlbnQ/LnRhcmdldFxuICAgICAgQGxhc3RIYW5kbGVyKG51bGwsIEBpdGVtcy5sZW5ndGgpXG5cbiAgICAjIGRvIHRoZXNlIGFsd2F5c1xuICAgIGNsZWFySW50ZXJ2YWwgQGludGVydmFsXG4gICAgQHN0b3BUaW1lID0gQGdldFRpbWUoKVxuICAgIEB0aW1lUnVubmluZyA9IGZhbHNlXG4gICAgQHRpbWVyU3RvcHBlZCA9IHRydWVcblxuICAgIEB1cGRhdGVDb3VudGRvd24oKVxuXG4gICAgIyBkbyB0aGVzZSBpZiBpdCdzIG5vdCBhIHNpbXBsZSBzdG9wXG4gICAgI2lmIG5vdCBldmVudD8uc2ltcGxlU3RvcFxuICAgICAgI1V0aWxzLmZsYXNoKClcblxuXG4gIGF1dG9zdG9wVGVzdDogLT5cbiAgICBVdGlscy5mbGFzaCgpXG4gICAgY2xlYXJJbnRlcnZhbCBAaW50ZXJ2YWxcbiAgICBAc3RvcFRpbWUgPSBAZ2V0VGltZSgpXG4gICAgQGF1dG9zdG9wcGVkID0gdHJ1ZVxuICAgIEB0aW1lclN0b3BwZWQgPSB0cnVlXG4gICAgQHRpbWVSdW5uaW5nID0gZmFsc2VcbiAgICBAJGVsLmZpbmQoXCIuZ3JpZF9lbGVtZW50XCIpLnNsaWNlKEBhdXRvc3RvcC0xLEBhdXRvc3RvcCkuYWRkQ2xhc3MgXCJlbGVtZW50X2xhc3RcIiAjanF1ZXJ5IGlzIHdlaXJkIHNvbWV0aW1lc1xuICAgIEBsYXN0QXR0ZW1wdGVkID0gQGF1dG9zdG9wXG4gICAgQHRpbWVvdXQgPSBzZXRUaW1lb3V0KEByZW1vdmVVbmRvLCAzMDAwKSAjIGdpdmUgdGhlbSAzIHNlY29uZHMgdG8gdW5kby4gbWFnaWMgbnVtYmVyXG4gICAgVXRpbHMudG9wQWxlcnQgQHRleHQuYXV0b3N0b3BcblxuICByZW1vdmVVbmRvOiA9PlxuICAgIEB1bmRvYWJsZSA9IGZhbHNlXG4gICAgQHVwZGF0ZU1vZGUgXCJkaXNhYmxlZFwiXG4gICAgY2xlYXJUaW1lb3V0KEB0aW1lb3V0KVxuXG4gIHVuQXV0b3N0b3BUZXN0OiAtPlxuICAgIEBpbnRlcnZhbCA9IHNldEludGVydmFsKEB1cGRhdGVDb3VudGRvd24sMTAwMCApICMgbWFnaWMgbnVtYmVyXG4gICAgQHVwZGF0ZUNvdW50ZG93bigpXG4gICAgQGF1dG9zdG9wcGVkID0gZmFsc2VcbiAgICBAbGFzdEF0dGVtcHRlZCA9IDBcbiAgICBAJGVsLmZpbmQoXCIuZ3JpZF9lbGVtZW50XCIpLnNsaWNlKEBhdXRvc3RvcC0xLEBhdXRvc3RvcCkucmVtb3ZlQ2xhc3MgXCJlbGVtZW50X2xhc3RcIlxuICAgIEB0aW1lUnVubmluZyA9IHRydWVcbiAgICBAdXBkYXRlTW9kZSBcIm1hcmtcIlxuICAgIFV0aWxzLnRvcEFsZXJ0IHQoXCJHcmlkUnVuVmlldy5tZXNzYWdlLmF1dG9zdG9wX2NhbmNlbFwiKVxuXG4gIHVwZGF0ZUNvdW50ZG93bjogPT5cbiAgICAjIHNvbWV0aW1lcyB0aGUgXCJ0aWNrXCIgZG9lc24ndCBoYXBwZW4gd2l0aGluIGEgc2Vjb25kXG4gICAgQHRpbWVFbGFwc2VkID0gTWF0aC5taW4oQGdldFRpbWUoKSAtIEBzdGFydFRpbWUsIEB0aW1lcilcblxuICAgIEB0aW1lUmVtYWluaW5nID0gQHRpbWVyIC0gQHRpbWVFbGFwc2VkXG5cbiAgICBAJGVsLmZpbmQoXCIudGltZXJcIikuaHRtbCBAdGltZVJlbWFpbmluZ1xuXG4gICAgaWYgQHRpbWVSdW5uaW5nIGlzIHRydWUgYW5kIEBjYXB0dXJlTGFzdEF0dGVtcHRlZCBhbmQgQHRpbWVSZW1haW5pbmcgPD0gMCBcbiAgICAgICAgQHN0b3BUaW1lcihzaW1wbGVTdG9wOnRydWUpXG4gICAgICAgIFV0aWxzLmJhY2tncm91bmQgXCJyZWRcIlxuICAgICAgICBfLmRlbGF5KFxuICAgICAgICAgID0+XG4gICAgICAgICAgICBhbGVydCBAdGV4dC50b3VjaExhc3RJdGVtXG4gICAgICAgICAgICBVdGlscy5iYWNrZ3JvdW5kIFwiXCJcbiAgICAgICAgLCAxZTMpICMgbWFnaWMgbnVtYmVyXG5cbiAgICAgICAgQHVwZGF0ZU1vZGUgXCJsYXN0XCJcblxuXG4gICAgaWYgQGNhcHR1cmVJdGVtQXRUaW1lICYmICFAZ290SW50ZXJtZWRpYXRlICYmICFAbWludXRlTWVzc2FnZSAmJiBAdGltZUVsYXBzZWQgPj0gQGNhcHR1cmVBZnRlclNlY29uZHNcbiAgICAgIFV0aWxzLmZsYXNoIFwieWVsbG93XCJcbiAgICAgIFV0aWxzLm1pZEFsZXJ0IHQoXCJwbGVhc2Ugc2VsZWN0IHRoZSBpdGVtIHRoZSBjaGlsZCBpcyBjdXJyZW50bHkgYXR0ZW1wdGluZ1wiKVxuICAgICAgQG1pbnV0ZU1lc3NhZ2UgPSB0cnVlXG4gICAgICBAdXBkYXRlTW9kZSBcIm1pbnV0ZUl0ZW1cIlxuXG5cbiAgdXBkYXRlTW9kZTogKCBtb2RlID0gbnVsbCApID0+XG4gICAgIyBkb250JyBjaGFuZ2UgdGhlIG1vZGUgaWYgdGhlIHRpbWUgaGFzIG5ldmVyIGJlZW4gc3RhcnRlZFxuICAgIGlmIChtb2RlPT1udWxsICYmIEB0aW1lRWxhcHNlZCA9PSAwICYmIG5vdCBAZGF0YUVudHJ5KSB8fCBtb2RlID09IFwiZGlzYWJsZWRcIlxuICAgICAgQG1vZGVCdXR0b24uc2V0VmFsdWUgbnVsbFxuICAgIGVsc2UgaWYgbW9kZT8gIyBtYW51YWxseSBjaGFuZ2UgdGhlIG1vZGVcbiAgICAgIEBtb2RlID0gbW9kZVxuICAgICAgQG1vZGVCdXR0b24uc2V0VmFsdWUgQG1vZGVcbiAgICBlbHNlICMgaGFuZGxlIGEgY2xpY2sgZXZlbnRcbiAgICAgIEBtb2RlID0gQG1vZGVCdXR0b24uZ2V0VmFsdWUoKVxuXG4gIGdldFRpbWU6IC0+XG4gICAgTWF0aC5yb3VuZCgobmV3IERhdGUoKSkuZ2V0VGltZSgpIC8gMTAwMClcblxuICByZXNldFZhcmlhYmxlczogLT5cblxuICAgIEB0aW1lciAgICA9IHBhcnNlSW50KEBtb2RlbC5nZXQoXCJ0aW1lclwiKSkgfHwgMFxuICAgIEB1bnRpbWVkICA9IEB0aW1lciA9PSAwIHx8IEBkYXRhRW50cnkgIyBEbyBub3Qgc2hvdyB0aGUgdGltZXIgaWYgaXQncyBkaXNhc2JsZWQgb3IgZGF0YSBlbnRyeSBtb2RlXG5cbiAgICBAZ290TWludXRlSXRlbSA9IGZhbHNlXG4gICAgQG1pbnV0ZU1lc3NhZ2UgPSBmYWxzZVxuICAgIEBpdGVtQXRUaW1lID0gbnVsbFxuXG4gICAgQHRpbWVJbnRlcm1lZGlhdGVDYXB0dXJlZCA9IG51bGxcblxuICAgIEBtYXJrUmVjb3JkID0gW11cblxuICAgIEB0aW1lclN0b3BwZWQgPSBmYWxzZVxuXG4gICAgQHN0YXJ0VGltZSA9IDBcbiAgICBAc3RvcFRpbWUgID0gMFxuICAgIEB0aW1lRWxhcHNlZCA9IDBcbiAgICBAdGltZVJlbWFpbmluZyA9IEB0aW1lclxuICAgIEBsYXN0QXR0ZW1wdGVkID0gMFxuXG4gICAgQGludGVydmFsID0gbnVsbFxuXG4gICAgQHVuZG9hYmxlID0gdHJ1ZVxuXG4gICAgQHRpbWVSdW5uaW5nID0gZmFsc2VcblxuXG4gICAgQGl0ZW1zICAgID0gXy5jb21wYWN0KEBtb2RlbC5nZXQoXCJpdGVtc1wiKSkgIyBtaWxkIHNhbml0aXphdGlvbiwgaGFwcGVucyBhdCBzYXZlIHRvb1xuXG4gICAgQGl0ZW1NYXAgPSBbXVxuICAgIEBtYXBJdGVtID0gW11cblxuICAgIGlmIEBtb2RlbC5oYXMoXCJyYW5kb21pemVcIikgJiYgQG1vZGVsLmdldChcInJhbmRvbWl6ZVwiKVxuICAgICAgQGl0ZW1NYXAgPSBAaXRlbXMubWFwICh2YWx1ZSwgaSkgLT4gaVxuXG4gICAgICBAaXRlbXMuZm9yRWFjaCAoaXRlbSwgaSkgLT5cbiAgICAgICAgdGVtcCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIEBpdGVtcy5sZW5ndGgpXG4gICAgICAgIHRlbXBWYWx1ZSA9IEBpdGVtTWFwW3RlbXBdXG4gICAgICAgIEBpdGVtTWFwW3RlbXBdID0gQGl0ZW1NYXBbaV1cbiAgICAgICAgQGl0ZW1NYXBbaV0gPSB0ZW1wVmFsdWVcbiAgICAgICwgQFxuICAgICAgXG4gICAgICBAaXRlbU1hcC5mb3JFYWNoIChpdGVtLCBpKSAtPlxuICAgICAgICBAbWFwSXRlbVtAaXRlbU1hcFtpXV0gPSBpXG4gICAgICAsIEBcbiAgICBlbHNlXG4gICAgICBAaXRlbXMuZm9yRWFjaCAoaXRlbSwgaSkgLT4gXG4gICAgICAgIEBpdGVtTWFwW2ldID0gaVxuICAgICAgICBAbWFwSXRlbVtpXSA9IGlcbiAgICAgICwgQFxuXG4gICAgaWYgIUBjYXB0dXJlTGFzdEF0dGVtcHRlZCAmJiAhQGNhcHR1cmVJdGVtQXRUaW1lXG4gICAgICBAbW9kZSA9IFwibWFya1wiXG4gICAgZWxzZVxuICAgICAgQG1vZGUgPSBcImRpc2FibGVkXCJcblxuICAgIEBtb2RlID0gXCJtYXJrXCIgaWYgQGRhdGFFbnRyeVxuXG4gICAgQGdyaWRPdXRwdXQgPSBAaXRlbXMubWFwIC0+ICdjb3JyZWN0J1xuXG4gICAgQGNvbHVtbnMgID0gcGFyc2VJbnQoQG1vZGVsLmdldChcImNvbHVtbnNcIikpIHx8IDNcblxuICAgIEBhdXRvc3RvcCA9IGlmIEB1bnRpbWVkIHRoZW4gMCBlbHNlIChwYXJzZUludChAbW9kZWwuZ2V0KFwiYXV0b3N0b3BcIikpIHx8IDApXG4gICAgQGF1dG9zdG9wcGVkID0gZmFsc2VcblxuICAgIEAkZWwuZmluZChcIi5ncmlkX2VsZW1lbnRcIikucmVtb3ZlQ2xhc3MoXCJlbGVtZW50X3dyb25nXCIpLnJlbW92ZUNsYXNzKFwiZWxlbWVudF9sYXN0XCIpLmFkZENsYXNzKFwiZGlzYWJsZWRcIilcbiAgICBAJGVsLmZpbmQoXCJ0YWJsZVwiKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpXG5cbiAgICBAJGVsLmZpbmQoXCIudGltZXJcIikuaHRtbCBAdGltZXJcblxuICAgIHVubGVzcyBAZGF0YUVudHJ5XG5cbiAgICAgICMgY2xhc3MgZG9lc24ndCBoYXZlIHRoaXMgaGVpcmFyY2h5XG4gICAgICBpZiBAcGFyZW50PyBhbmQgQHBhcmVudC5wYXJlbnQ/IGFuZCBAcGFyZW50LnBhcmVudC5yZXN1bHQ/XG5cbiAgICAgICAgcHJldmlvdXMgPSBAcGFyZW50LnBhcmVudC5yZXN1bHQuZ2V0QnlIYXNoKEBtb2RlbC5nZXQoJ2hhc2gnKSlcbiAgICAgICAgaWYgcHJldmlvdXNcblxuICAgICAgICAgICMgICAgIGl0ZW1zID0gZGF0YS5pdGVtc1xuICAgICAgICAgIEBjYXB0dXJlTGFzdEF0dGVtcHRlZCAgICAgPSBwcmV2aW91cy5jYXB0dXJlX2xhc3RfYXR0ZW1wdGVkXG4gICAgICAgICAgQGl0ZW1BdFRpbWUgICAgICAgICAgICAgICA9IHByZXZpb3VzLml0ZW1fYXRfdGltZVxuICAgICAgICAgIEB0aW1lSW50ZXJtZWRpYXRlQ2FwdHVyZWQgPSBwcmV2aW91cy50aW1lX2ludGVybWVkaWF0ZV9jYXB0dXJlZFxuICAgICAgICAgIEBjYXB0dXJlSXRlbUF0VGltZSAgICAgICAgPSBwcmV2aW91cy5jYXB0dXJlX2l0ZW1fYXRfdGltZVxuICAgICAgICAgIEBhdXRvc3RvcCAgICAgICAgICAgICAgICAgPSBwcmV2aW91cy5hdXRvX3N0b3BcbiAgICAgICAgICBAbGFzdEF0dGVtcHRlZCAgICAgICAgICAgID0gcHJldmlvdXMuYXR0ZW1wdGVkXG4gICAgICAgICAgQHRpbWVSZW1haW5pbmcgICAgICAgICAgICA9IHByZXZpb3VzLnRpbWVfcmVtYWluXG4gICAgICAgICAgQG1hcmtSZWNvcmQgICAgICAgICAgICAgICA9IHByZXZpb3VzLm1hcmtfcmVjb3JkXG5cbiAgICBAdXBkYXRlTW9kZSBAbW9kZSBpZiBAbW9kZUJ1dHRvbj9cblxuICBpMThuOiAtPlxuXG4gICAgQHRleHQgPVxuICAgICAgYXV0b3N0b3AgICAgICAgICAgIDogdChcIkdyaWRSdW5WaWV3Lm1lc3NhZ2UuYXV0b3N0b3BcIilcbiAgICAgIHRvdWNoTGFzdEl0ZW0gICAgICA6IHQoXCJHcmlkUnVuVmlldy5tZXNzYWdlLnRvdWNoX2xhc3RfaXRlbVwiKVxuICAgICAgc3VidGVzdE5vdENvbXBsZXRlIDogdChcIkdyaWRSdW5WaWV3Lm1lc3NhZ2Uuc3VidGVzdF9ub3RfY29tcGxldGVcIilcblxuICAgICAgaW5wdXRNb2RlICAgICA6IHQoXCJHcmlkUnVuVmlldy5sYWJlbC5pbnB1dF9tb2RlXCIpXG4gICAgICB0aW1lUmVtYWluaW5nICA6IHQoXCJHcmlkUnVuVmlldy5sYWJlbC50aW1lX3JlbWFpbmluZ1wiKVxuICAgICAgd2FzQXV0b3N0b3BwZWQgOiB0KFwiR3JpZFJ1blZpZXcubGFiZWwud2FzX2F1dG9zdG9wcGVkXCIpXG5cbiAgICAgIG1hcmsgICAgICAgICAgOiB0KFwiR3JpZFJ1blZpZXcuYnV0dG9uLm1hcmtcIilcbiAgICAgIHN0YXJ0ICAgICAgICAgOiB0KFwiR3JpZFJ1blZpZXcuYnV0dG9uLnN0YXJ0XCIpXG4gICAgICBzdG9wICAgICAgICAgIDogdChcIkdyaWRSdW5WaWV3LmJ1dHRvbi5zdG9wXCIpXG4gICAgICByZXN0YXJ0ICAgICAgIDogdChcIkdyaWRSdW5WaWV3LmJ1dHRvbi5yZXN0YXJ0XCIpXG4gICAgICBsYXN0QXR0ZW1wdGVkIDogdChcIkdyaWRSdW5WaWV3LmJ1dHRvbi5sYXN0X2F0dGVtcHRlZFwiKVxuXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgICBAaTE4bigpXG5cbiAgICBAZm9udFN0eWxlID0gXCJzdHlsZT1cXFwiZm9udC1mYW1pbHk6ICN7QG1vZGVsLmdldCgnZm9udEZhbWlseScpfSAhaW1wb3J0YW50O1xcXCJcIiBpZiBAbW9kZWwuZ2V0KFwiZm9udEZhbWlseVwiKSAhPSBcIlwiIFxuXG4gICAgQGNhcHR1cmVBZnRlclNlY29uZHMgID0gaWYgQG1vZGVsLmhhcyhcImNhcHR1cmVBZnRlclNlY29uZHNcIikgIHRoZW4gQG1vZGVsLmdldChcImNhcHR1cmVBZnRlclNlY29uZHNcIikgIGVsc2UgMFxuICAgIEBjYXB0dXJlSXRlbUF0VGltZSAgICA9IGlmIEBtb2RlbC5oYXMoXCJjYXB0dXJlSXRlbUF0VGltZVwiKSAgICB0aGVuIEBtb2RlbC5nZXQoXCJjYXB0dXJlSXRlbUF0VGltZVwiKSAgICBlbHNlIGZhbHNlXG4gICAgQGNhcHR1cmVMYXN0QXR0ZW1wdGVkID0gaWYgQG1vZGVsLmhhcyhcImNhcHR1cmVMYXN0QXR0ZW1wdGVkXCIpIHRoZW4gQG1vZGVsLmdldChcImNhcHR1cmVMYXN0QXR0ZW1wdGVkXCIpIGVsc2UgdHJ1ZVxuICAgIEBlbmRPZkxpbmUgICAgICAgICAgICA9IGlmIEBtb2RlbC5oYXMoXCJlbmRPZkxpbmVcIikgICAgICAgICAgICB0aGVuIEBtb2RlbC5nZXQoXCJlbmRPZkxpbmVcIikgICAgICAgICAgICBlbHNlIHRydWVcblxuICAgIEBsYXlvdXRNb2RlID0gaWYgQG1vZGVsLmhhcyhcImxheW91dE1vZGVcIikgdGhlbiBAbW9kZWwuZ2V0KFwibGF5b3V0TW9kZVwiKSBlbHNlIFwiZml4ZWRcIlxuICAgIEBmb250U2l6ZSAgID0gaWYgQG1vZGVsLmhhcyhcImZvbnRTaXplXCIpICAgdGhlbiBAbW9kZWwuZ2V0KFwiZm9udFNpemVcIikgICBlbHNlIFwibm9ybWFsXCJcblxuICAgIGlmIEBmb250U2l6ZSA9PSBcInNtYWxsXCJcbiAgICAgIGZvbnRTaXplQ2xhc3MgPSBcImZvbnRfc2l6ZV9zbWFsbFwiXG4gICAgZWxzZVxuICAgICAgZm9udFNpemVDbGFzcyA9IFwiXCJcblxuICAgIEBydGwgPSBAbW9kZWwuZ2V0Qm9vbGVhbiBcInJ0bFwiXG4gICAgQCRlbC5hZGRDbGFzcyBcInJ0bC1ncmlkXCIgaWYgQHJ0bCBcblxuICAgIEB0b3RhbFRpbWUgPSBAbW9kZWwuZ2V0KFwidGltZXJcIikgfHwgMFxuXG4gICAgQG1vZGVIYW5kbGVycyA9XG4gICAgICBcIm1hcmtcIiAgICAgICA6IEBtYXJrSGFuZGxlclxuICAgICAgXCJsYXN0XCIgICAgICAgOiBAbGFzdEhhbmRsZXJcbiAgICAgIFwibWludXRlSXRlbVwiIDogQGludGVybWVkaWF0ZUl0ZW1IYW5kbGVyXG4gICAgICBkaXNhYmxlZCAgICAgOiAkLm5vb3BcblxuICAgIEBkYXRhRW50cnkgPSBvcHRpb25zLmRhdGFFbnRyeVxuXG4gICAgQG1vZGVsICA9IG9wdGlvbnMubW9kZWxcbiAgICBAcGFyZW50ID0gb3B0aW9ucy5wYXJlbnRcblxuICAgIEByZXNldFZhcmlhYmxlcygpXG5cbiAgICBAZ3JpZEVsZW1lbnQgICAgICAgICA9IF8udGVtcGxhdGUgXCI8dGQ+PGJ1dHRvbiBkYXRhLWxhYmVsPSd7e2xhYmVsfX0nIGRhdGEtaW5kZXg9J3t7aX19JyBjbGFzcz0nZ3JpZF9lbGVtZW50ICN7Zm9udFNpemVDbGFzc30nICN7QGZvbnRTdHlsZSB8fCBcIlwifT57e2xhYmVsfX08L2J1dHRvbj48L3RkPlwiXG4gICAgQHZhcmlhYmxlR3JpZEVsZW1lbnQgPSBfLnRlbXBsYXRlIFwiPGJ1dHRvbiBkYXRhLWxhYmVsPSd7e2xhYmVsfX0nIGRhdGEtaW5kZXg9J3t7aX19JyBjbGFzcz0nZ3JpZF9lbGVtZW50ICN7Zm9udFNpemVDbGFzc30nICN7QGZvbnRTdHlsZSB8fCBcIlwifT57e2xhYmVsfX08L2J1dHRvbj5cIlxuXG4gICAgaWYgQGxheW91dE1vZGUgPT0gXCJmaXhlZFwiXG4gICAgICBAZW5kT2ZHcmlkTGluZSA9IF8udGVtcGxhdGUgXCI8dGQ+PGJ1dHRvbiBkYXRhLWluZGV4PSd7e2l9fScgY2xhc3M9J2VuZF9vZl9ncmlkX2xpbmUnPio8L2J1dHRvbj48L3RkPlwiXG4gICAgZWxzZVxuICAgICAgQGVuZE9mR3JpZExpbmUgPSBfLnRlbXBsYXRlIFwiXCJcblxuICByZW5kZXI6IC0+XG5cbiAgICBkb25lID0gMFxuXG4gICAgc3RhcnRUaW1lckhUTUwgPSBcIjxkaXYgY2xhc3M9J3RpbWVyX3dyYXBwZXInPjxidXR0b24gY2xhc3M9J3N0YXJ0X3RpbWUgdGltZSc+I3tAdGV4dC5zdGFydH08L2J1dHRvbj48ZGl2IGNsYXNzPSd0aW1lcic+I3tAdGltZXJ9PC9kaXY+PC9kaXY+XCJcblxuICAgIGRpc2FibGluZyA9IFwiZGlzYWJsZWRcIiB1bmxlc3MgQHVudGltZWRcblxuICAgIGRpc3BsYXlSdGwgPSBcInJ0bF9tb2RlXCIgaWYgQHJ0bFxuXG4gICAgaHRtbCA9IGlmIG5vdCBAdW50aW1lZCB0aGVuIHN0YXJ0VGltZXJIVE1MIGVsc2UgXCJcIlxuXG4gICAgZ3JpZEhUTUwgPSBcIlwiXG5cbiAgICBpZiBAbGF5b3V0TW9kZSA9PSBcImZpeGVkXCJcbiAgICAgIGdyaWRIVE1MICs9IFwiPHRhYmxlIGNsYXNzPSdncmlkICN7ZGlzYWJsaW5nfSAje2Rpc3BsYXlSdGx8fCcnfSc+XCJcbiAgICAgIGZpcnN0Um93ID0gdHJ1ZVxuICAgICAgbG9vcFxuICAgICAgICBicmVhayBpZiBkb25lID4gQGl0ZW1zLmxlbmd0aFxuICAgICAgICBncmlkSFRNTCArPSBcIjx0cj5cIlxuICAgICAgICBmb3IgaSBpbiBbMS4uQGNvbHVtbnNdXG4gICAgICAgICAgaWYgZG9uZSA8IEBpdGVtcy5sZW5ndGhcbiAgICAgICAgICAgIGdyaWRIVE1MICs9IEBncmlkRWxlbWVudCB7IGxhYmVsIDogXy5lc2NhcGUoQGl0ZW1zW0BpdGVtTWFwW2RvbmVdXSksIGk6IGRvbmUrMSB9XG4gICAgICAgICAgZG9uZSsrXG4gICAgICAgICMgZG9uJ3Qgc2hvdyB0aGUgc2tpcCByb3cgYnV0dG9uIGZvciB0aGUgZmlyc3Qgcm93XG4gICAgICAgIGlmIGZpcnN0Um93XG4gICAgICAgICAgZ3JpZEhUTUwgKz0gXCI8dGQ+PC90ZD5cIiBpZiBkb25lIDwgKCBAaXRlbXMubGVuZ3RoICsgMSApICYmIEBlbmRPZkxpbmVcbiAgICAgICAgICBmaXJzdFJvdyA9IGZhbHNlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBncmlkSFRNTCArPSBAZW5kT2ZHcmlkTGluZSh7aTpkb25lfSkgaWYgZG9uZSA8ICggQGl0ZW1zLmxlbmd0aCArIDEgKSAmJiBAZW5kT2ZMaW5lXG5cbiAgICAgICAgZ3JpZEhUTUwgKz0gXCI8L3RyPlwiXG4gICAgICBncmlkSFRNTCArPSBcIjwvdGFibGU+XCJcbiAgICBlbHNlXG4gICAgICBncmlkSFRNTCArPSBcIjxkaXYgY2xhc3M9J2dyaWQgI3tkaXNhYmxpbmd9ICN7ZGlzcGxheVJ0bHx8Jyd9Jz5cIlxuICAgICAgZm9yIGl0ZW0sIGkgaW4gQGl0ZW1zXG4gICAgICAgIGdyaWRIVE1MICs9IEB2YXJpYWJsZUdyaWRFbGVtZW50XG4gICAgICAgICAgXCJsYWJlbFwiIDogXy5lc2NhcGUoQGl0ZW1zW0BpdGVtTWFwW2ldXSlcbiAgICAgICAgICBcImlcIiAgICAgOiBpKzFcbiAgICAgIGdyaWRIVE1MICs9IFwiPC9kaXY+XCJcbiAgICBodG1sICs9IGdyaWRIVE1MXG4gICAgc3RvcFRpbWVySFRNTCA9IFwiPGRpdiBjbGFzcz0ndGltZXJfd3JhcHBlcic+PGJ1dHRvbiBjbGFzcz0nc3RvcF90aW1lIHRpbWUnPiN7QHRleHQuc3RvcH08L2J1dHRvbj48ZGl2IGNsYXNzPSd0aW1lcic+I3tAdGltZXJ9PC9kaXY+PC9kaXY+XCJcblxuICAgIHJlc2V0QnV0dG9uID0gXCJcbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gY2xhc3M9J3Jlc3RhcnQgY29tbWFuZCc+I3tAdGV4dC5yZXN0YXJ0fTwvYnV0dG9uPlxuICAgICAgICA8YnI+XG4gICAgICA8L2Rpdj5cbiAgICBcIlxuXG4gICAgI1xuICAgICMgTW9kZSBzZWxlY3RvclxuICAgICNcblxuICAgIG1vZGVTZWxlY3RvciA9IFwiXCJcbiAgICAjIGlmIGFueSBvdGhlciBvcHRpb24gaXMgYXZhaWFsYmUgb3RoZXIgdGhhbiBtYXJrLCB0aGVuIHNob3cgdGhlIHNlbGVjdG9yXG4gICAgaWYgQGNhcHR1cmVMYXN0QXR0ZW1wdGVkIHx8IEBjYXB0dXJlSXRlbUF0VGltZVxuXG4gICAgICBAbW9kZUJ1dHRvbj8uY2xvc2UoKVxuXG4gICAgICBidXR0b25Db25maWcgPVxuICAgICAgICBvcHRpb25zIDogW11cbiAgICAgICAgbW9kZSAgICA6IFwic2luZ2xlXCJcblxuICAgICAgYnV0dG9uQ29uZmlnLm9wdGlvbnMucHVzaCB7XG4gICAgICAgIGxhYmVsIDogQHRleHQubWFya1xuICAgICAgICB2YWx1ZSA6IFwibWFya1wiXG4gICAgICB9XG5cbiAgICAgIGJ1dHRvbkNvbmZpZy5vcHRpb25zLnB1c2gge1xuICAgICAgICBsYWJlbCA6IHQoIFwiaXRlbSBhdCBfX3NlY29uZHNfXyBzZWNvbmRzXCIsIHNlY29uZHMgOiBAY2FwdHVyZUFmdGVyU2Vjb25kcyApXG4gICAgICAgIHZhbHVlIDogXCJtaW51dGVJdGVtXCJcbiAgICAgIH0gaWYgQGNhcHR1cmVJdGVtQXRUaW1lXG5cbiAgICAgIGJ1dHRvbkNvbmZpZy5vcHRpb25zLnB1c2gge1xuICAgICAgICBsYWJlbCA6IEB0ZXh0Lmxhc3RBdHRlbXB0ZWRcbiAgICAgICAgdmFsdWUgOiBcImxhc3RcIlxuICAgICAgfSBpZiBAY2FwdHVyZUxhc3RBdHRlbXB0ZWRcblxuICAgICAgQG1vZGVCdXR0b24gPSBuZXcgQnV0dG9uVmlldyBidXR0b25Db25maWdcbiAgICAgIEBtb2RlQnV0dG9uLm9uIFwiY2hhbmdlIGNsaWNrXCIsICg9PiBAdXBkYXRlTW9kZSgpKSwgQFxuICAgICAgbW9kZVNlbGVjdG9yID0gXCJcbiAgICAgICAgPGRpdiBjbGFzcz0nZ3JpZF9tb2RlX3dyYXBwZXIgcXVlc3Rpb24gY2xlYXJmaXgnPlxuICAgICAgICAgIDxsYWJlbD4je0B0ZXh0LmlucHV0TW9kZX08L2xhYmVsPjxicj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdtb2RlLWJ1dHRvbic+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgXCJcblxuICAgIGRhdGFFbnRyeSA9IFwiXG4gICAgICA8dGFibGUgY2xhc3M9J2NsYXNzX3RhYmxlJz5cblxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRkPiN7QHRleHQud2FzQXV0b3N0b3BwZWR9PC90ZD48dGQ+PGlucHV0IHR5cGU9J2NoZWNrYm94JyBjbGFzcz0nZGF0YV9hdXRvc3RvcHBlZCc+PC90ZD5cbiAgICAgICAgPC90cj5cblxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRkPiN7QHRleHQudGltZVJlbWFpbmluZ308L3RkPjx0ZD48aW5wdXQgdHlwZT0nbnVtYmVyJyBjbGFzcz0nZGF0YV90aW1lX3JlbWFpbic+PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGFibGU+XG4gICAgXCJcblxuICAgIGh0bWwgKz0gXCJcbiAgICAgICN7aWYgbm90IEB1bnRpbWVkIHRoZW4gc3RvcFRpbWVySFRNTCBlbHNlIFwiXCJ9XG4gICAgICAje2lmIG5vdCBAdW50aW1lZCB0aGVuIHJlc2V0QnV0dG9uIGVsc2UgXCJcIn1cbiAgICAgICN7bW9kZVNlbGVjdG9yfVxuICAgICAgI3soZGF0YUVudHJ5IGlmIEBkYXRhRW50cnkpIHx8ICcnfVxuICAgIFwiXG5cbiAgICBAJGVsLmh0bWwgaHRtbFxuXG4gICAgQG1vZGVCdXR0b24uc2V0RWxlbWVudCBAJGVsLmZpbmQgXCIubW9kZS1idXR0b25cIlxuICAgIEBtb2RlQnV0dG9uLnJlbmRlcigpXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiAgICBAdHJpZ2dlciBcInJlYWR5XCJcblxuICAgIHVubGVzcyBAZGF0YUVudHJ5XG4gICAgICBcbiAgICAgICMgY2xhc3MgZG9lc24ndCBoYXZlIHRoaXMgaGVpcmFyY2h5XG4gICAgICBpZiBAcGFyZW50PyBhbmQgQHBhcmVudC5wYXJlbnQ/IGFuZCBAcGFyZW50LnBhcmVudC5yZXN1bHQ/XG5cbiAgICAgICAgcHJldmlvdXMgPSBAcGFyZW50LnBhcmVudC5yZXN1bHQuZ2V0QnlIYXNoKEBtb2RlbC5nZXQoJ2hhc2gnKSlcbiAgICAgICAgaWYgcHJldmlvdXNcbiAgICAgICAgICBAbWFya1JlY29yZCA9IHByZXZpb3VzLm1hcmtfcmVjb3JkXG5cbiAgICAgICAgICBmb3IgaXRlbSwgaSBpbiBAbWFya1JlY29yZFxuICAgICAgICAgICAgQG1hcmtFbGVtZW50IGl0ZW0sIG51bGwsICdwb3B1bGF0ZSdcblxuICAgICAgICAgIEBpdGVtQXRUaW1lID0gcHJldmlvdXMuaXRlbV9hdF90aW1lXG4gICAgICAgICAgJHRhcmdldCA9IEAkZWwuZmluZChcIi5ncmlkX2VsZW1lbnRbZGF0YS1pbmRleD0je0BpdGVtQXRUaW1lfV1cIilcbiAgICAgICAgICAkdGFyZ2V0LmFkZENsYXNzIFwiZWxlbWVudF9taW51dGVcIlxuXG4gICAgICAgICAgQGxhc3RBdHRlbXB0ZWQgPSBwcmV2aW91cy5hdHRlbXB0ZWRcbiAgICAgICAgICAkdGFyZ2V0ID0gQCRlbC5maW5kKFwiLmdyaWRfZWxlbWVudFtkYXRhLWluZGV4PSN7QGxhc3RBdHRlbXB0ZWR9XVwiKVxuICAgICAgICAgICR0YXJnZXQuYWRkQ2xhc3MgXCJlbGVtZW50X2xhc3RcIlxuXG4gIGlzVmFsaWQ6IC0+XG4gICAgIyBTdG9wIHRpbWVyIGlmIHN0aWxsIHJ1bm5pbmcuIElzc3VlICMyNDBcbiAgICBAc3RvcFRpbWVyKCkgaWYgQHRpbWVSdW5uaW5nXG5cbiAgICBpZiBwYXJzZUludChAbGFzdEF0dGVtcHRlZCkgaXMgQGl0ZW1zLmxlbmd0aCBhbmQgQHRpbWVSZW1haW5pbmcgaXMgMFxuXG4gICAgICBpdGVtID0gQGl0ZW1zW0BpdGVtcy5sZW5ndGgtMV1cbiAgICAgIGlmIGNvbmZpcm0odChcIkdyaWRSdW5WaWV3Lm1lc3NhZ2UubGFzdF9pdGVtX2NvbmZpcm1cIiwgaXRlbTppdGVtKSlcbiAgICAgICAgQHVwZGF0ZU1vZGVcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIGVsc2VcbiAgICAgICAgQG1lc3NhZ2VzID0gaWYgQG1lc3NhZ2VzPy5wdXNoIHRoZW4gQG1lc3NhZ2VzLmNvbmNhdChbbXNnXSkgZWxzZSBbbXNnXVxuICAgICAgICBAdXBkYXRlTW9kZSBcImxhc3RcIlxuICAgICAgICByZXR1cm4gZmFsc2VcblxuICAgIHJldHVybiBmYWxzZSBpZiBAY2FwdHVyZUxhc3RBdHRlbXB0ZWQgJiYgQGxhc3RBdHRlbXB0ZWQgPT0gMFxuICAgICMgbWlnaHQgbmVlZCB0byBsZXQgaXQga25vdyBpZiBpdCdzIHRpbWVkIG9yIHVudGltZWQgdG9vIDo6c2hydWc6OlxuICAgIHJldHVybiBmYWxzZSBpZiBAdGltZVJ1bm5pbmcgPT0gdHJ1ZVxuICAgIHJldHVybiBmYWxzZSBpZiBAdGltZXIgIT0gMCAmJiBAdGltZVJlbWFpbmluZyA9PSBAdGltZXJcbiAgICB0cnVlXG5cbiAgc2hvd0Vycm9yczogLT5cbiAgICBtZXNzYWdlcyA9IEBtZXNzYWdlcyB8fCBbXVxuICAgIEBtZXNzYWdlcyA9IFtdXG5cbiAgICB0aW1lckhhc250UnVuICAgID0gQHRpbWVyICE9IDAgJiYgQHRpbWVSZW1haW5pbmcgPT0gQHRpbWVyXG4gICAgbm9MYXN0SXRlbSAgICAgICA9IEBjYXB0dXJlTGFzdEF0dGVtcHRlZCAmJiBAbGFzdEF0dGVtcHRlZCA9PSAwXG4gICAgdGltZVN0aWxsUnVubmluZyA9IEB0aW1lUnVuaW5nID09IHRydWVcblxuICAgIGlmIHRpbWVySGFzbnRSdW5cbiAgICAgIG1lc3NhZ2VzLnB1c2ggQHRleHQuc3VidGVzdE5vdENvbXBsZXRlXG5cbiAgICBpZiBub0xhc3RJdGVtICYmIG5vdCB0aW1lckhhc250UnVuXG4gICAgICBtZXNzYWdlcy5wdXNoIEB0ZXh0LnRvdWNoTGFzdEl0ZW1cbiAgICAgIEB1cGRhdGVNb2RlIFwibGFzdFwiXG5cbiAgICBpZiB0aW1lU3RpbGxSdW5uaW5nXG4gICAgICBtZXNzYWdlcy5wdXNoIEB0ZXh0LnRpbWVTdGlsbFJ1bm5pbmdcblxuICAgIFV0aWxzLm1pZEFsZXJ0IG1lc3NhZ2VzLmpvaW4oXCI8YnI+XCIpLCAzMDAwICMgbWFnaWMgbnVtYmVyXG5cbiAgZ2V0UmVzdWx0OiAtPlxuICAgIGNvbXBsZXRlUmVzdWx0cyA9IFtdXG4gICAgaXRlbVJlc3VsdHMgPSBbXVxuICAgIEBsYXN0QXR0ZW1wdGVkID0gQGl0ZW1zLmxlbmd0aCBpZiBub3QgQGNhcHR1cmVMYXN0QXR0ZW1wdGVkXG5cbiAgICBmb3IgaXRlbSwgaSBpbiBAaXRlbXNcblxuICAgICAgaWYgQG1hcEl0ZW1baV0gPCBAbGFzdEF0dGVtcHRlZFxuICAgICAgICBpdGVtUmVzdWx0c1tpXSA9XG4gICAgICAgICAgaXRlbVJlc3VsdCA6IEBncmlkT3V0cHV0W0BtYXBJdGVtW2ldXVxuICAgICAgICAgIGl0ZW1MYWJlbCAgOiBpdGVtXG4gICAgICBlbHNlXG4gICAgICAgIGl0ZW1SZXN1bHRzW2ldID1cbiAgICAgICAgICBpdGVtUmVzdWx0IDogXCJtaXNzaW5nXCJcbiAgICAgICAgICBpdGVtTGFiZWwgOiBAaXRlbXNbQG1hcEl0ZW1baV1dXG5cbiAgICBAbGFzdEF0dGVtcHRlZCA9IGZhbHNlIGlmIG5vdCBAY2FwdHVyZUxhc3RBdHRlbXB0ZWRcblxuICAgIGlmIEBkYXRhRW50cnlcbiAgICAgIGF1dG9zdG9wcGVkID0gQCRlbC5maW5kKFwiLmRhdGFfYXV0b3N0b3BwZWRcIikuaXMoXCI6Y2hlY2tlZFwiKVxuICAgICAgdGltZVJlbWFpbmluZyA9IHBhcnNlSW50KEAkZWwuZmluZChcIi5kYXRhX3RpbWVfcmVtYWluXCIpLnZhbCgpKVxuICAgIGVsc2VcbiAgICAgIGF1dG9zdG9wcGVkICAgPSBAYXV0b3N0b3BwZWRcbiAgICAgIHRpbWVSZW1haW5pbmcgPSBAdGltZVJlbWFpbmluZ1xuXG4gICAgcmVzdWx0ID1cbiAgICAgIFwiY2FwdHVyZV9sYXN0X2F0dGVtcHRlZFwiICAgICA6IEBjYXB0dXJlTGFzdEF0dGVtcHRlZFxuICAgICAgXCJpdGVtX2F0X3RpbWVcIiAgICAgICAgICAgICAgIDogQGl0ZW1BdFRpbWVcbiAgICAgIFwidGltZV9pbnRlcm1lZGlhdGVfY2FwdHVyZWRcIiA6IEB0aW1lSW50ZXJtZWRpYXRlQ2FwdHVyZWRcbiAgICAgIFwiY2FwdHVyZV9pdGVtX2F0X3RpbWVcIiAgICAgICA6IEBjYXB0dXJlSXRlbUF0VGltZVxuICAgICAgXCJhdXRvX3N0b3BcIiAgICAgOiBhdXRvc3RvcHBlZFxuICAgICAgXCJhdHRlbXB0ZWRcIiAgICAgOiBAbGFzdEF0dGVtcHRlZFxuICAgICAgXCJpdGVtc1wiICAgICAgICAgOiBpdGVtUmVzdWx0c1xuICAgICAgXCJ0aW1lX3JlbWFpblwiICAgOiB0aW1lUmVtYWluaW5nXG4gICAgICBcIm1hcmtfcmVjb3JkXCIgICA6IEBtYXJrUmVjb3JkXG4gICAgICBcInZhcmlhYmxlX25hbWVcIiA6IEBtb2RlbC5nZXQoXCJ2YXJpYWJsZU5hbWVcIilcbiAgICByZXR1cm4gcmVzdWx0XG5cbiAgZ2V0U2tpcHBlZDogLT5cbiAgICBpdGVtUmVzdWx0cyA9IFtdXG5cbiAgICBmb3IgaXRlbSwgaSBpbiBAaXRlbXNcbiAgICAgIGl0ZW1SZXN1bHRzW2ldID1cbiAgICAgICAgaXRlbVJlc3VsdCA6IFwic2tpcHBlZFwiXG4gICAgICAgIGl0ZW1MYWJlbCAgOiBpdGVtXG5cbiAgICByZXN1bHQgPVxuICAgICAgXCJjYXB0dXJlX2xhc3RfYXR0ZW1wdGVkXCIgICAgIDogXCJza2lwcGVkXCJcbiAgICAgIFwiaXRlbV9hdF90aW1lXCIgICAgICAgICAgICAgICA6IFwic2tpcHBlZFwiXG4gICAgICBcInRpbWVfaW50ZXJtZWRpYXRlX2NhcHR1cmVkXCIgOiBcInNraXBwZWRcIlxuICAgICAgXCJjYXB0dXJlX2l0ZW1fYXRfdGltZVwiICAgICAgIDogXCJza2lwcGVkXCJcbiAgICAgIFwiYXV0b19zdG9wXCIgICAgIDogXCJza2lwcGVkXCJcbiAgICAgIFwiYXR0ZW1wdGVkXCIgICAgIDogXCJza2lwcGVkXCJcbiAgICAgIFwiaXRlbXNcIiAgICAgICAgIDogaXRlbVJlc3VsdHNcbiAgICAgIFwidGltZV9yZW1haW5cIiAgIDogXCJza2lwcGVkXCJcbiAgICAgIFwibWFya19yZWNvcmRcIiAgIDogXCJza2lwcGVkXCJcbiAgICAgIFwidmFyaWFibGVfbmFtZVwiIDogQG1vZGVsLmdldChcInZhcmlhYmxlTmFtZVwiKVxuXG4gIG9uQ2xvc2U6IC0+XG4gICAgY2xlYXJJbnRlcnZhbChAaW50ZXJ2YWwpXG5cbiIsInZhciBHcmlkUnVuVmlldyxcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5HcmlkUnVuVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChHcmlkUnVuVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gR3JpZFJ1blZpZXcoKSB7XG4gICAgdGhpcy51cGRhdGVNb2RlID0gYmluZCh0aGlzLnVwZGF0ZU1vZGUsIHRoaXMpO1xuICAgIHRoaXMudXBkYXRlQ291bnRkb3duID0gYmluZCh0aGlzLnVwZGF0ZUNvdW50ZG93biwgdGhpcyk7XG4gICAgdGhpcy5yZW1vdmVVbmRvID0gYmluZCh0aGlzLnJlbW92ZVVuZG8sIHRoaXMpO1xuICAgIHRoaXMubGFzdEhhbmRsZXIgPSBiaW5kKHRoaXMubGFzdEhhbmRsZXIsIHRoaXMpO1xuICAgIHRoaXMuaW50ZXJtZWRpYXRlSXRlbUhhbmRsZXIgPSBiaW5kKHRoaXMuaW50ZXJtZWRpYXRlSXRlbUhhbmRsZXIsIHRoaXMpO1xuICAgIHRoaXMubWFya0hhbmRsZXIgPSBiaW5kKHRoaXMubWFya0hhbmRsZXIsIHRoaXMpO1xuICAgIHRoaXMuZ3JpZENsaWNrID0gYmluZCh0aGlzLmdyaWRDbGljaywgdGhpcyk7XG4gICAgcmV0dXJuIEdyaWRSdW5WaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgR3JpZFJ1blZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiZ3JpZF9wcm90b3R5cGVcIjtcblxuICBHcmlkUnVuVmlldy5wcm90b3R5cGUuZXZlbnRzID0gTW9kZXJuaXpyLnRvdWNoID8ge1xuICAgICdjbGljayAuZ3JpZF9lbGVtZW50JzogJ2dyaWRDbGljaycsXG4gICAgJ2NsaWNrIC5lbmRfb2ZfZ3JpZF9saW5lJzogJ2VuZE9mR3JpZExpbmVDbGljaycsXG4gICAgJ2NsaWNrIC5zdGFydF90aW1lJzogJ3N0YXJ0VGltZXInLFxuICAgICdjbGljayAuc3RvcF90aW1lJzogJ3N0b3BUaW1lcicsXG4gICAgJ2NsaWNrIC5yZXN0YXJ0JzogJ3Jlc3RhcnRUaW1lcidcbiAgfSA6IHtcbiAgICAnY2xpY2sgLmVuZF9vZl9ncmlkX2xpbmUnOiAnZW5kT2ZHcmlkTGluZUNsaWNrJyxcbiAgICAnY2xpY2sgLmdyaWRfZWxlbWVudCc6ICdncmlkQ2xpY2snLFxuICAgICdjbGljayAuc3RhcnRfdGltZSc6ICdzdGFydFRpbWVyJyxcbiAgICAnY2xpY2sgLnN0b3BfdGltZSc6ICdzdG9wVGltZXInLFxuICAgICdjbGljayAucmVzdGFydCc6ICdyZXN0YXJ0VGltZXInXG4gIH07XG5cbiAgR3JpZFJ1blZpZXcucHJvdG90eXBlLnJlc3RhcnRUaW1lciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnRpbWVSdW5uaW5nKSB7XG4gICAgICB0aGlzLnN0b3BUaW1lcih7XG4gICAgICAgIHNpbXBsZVN0b3A6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLnJlc2V0VmFyaWFibGVzKCk7XG4gICAgdGhpcy4kZWwuZmluZChcIi5lbGVtZW50X3dyb25nXCIpLnJlbW92ZUNsYXNzKFwiZWxlbWVudF93cm9uZ1wiKTtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5ncmlkX2VsZW1lbnRcIikucmVtb3ZlQ2xhc3MoXCJlbGVtZW50X21pbnV0ZVwiKTtcbiAgfTtcblxuICBHcmlkUnVuVmlldy5wcm90b3R5cGUuZ3JpZENsaWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgYmFzZSwgbmFtZTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybiB0eXBlb2YgKGJhc2UgPSB0aGlzLm1vZGVIYW5kbGVycylbbmFtZSA9IHRoaXMubW9kZV0gPT09IFwiZnVuY3Rpb25cIiA/IGJhc2VbbmFtZV0oZXZlbnQpIDogdm9pZCAwO1xuICB9O1xuXG4gIEdyaWRSdW5WaWV3LnByb3RvdHlwZS5tYXJrSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIGNvcnJlY3Rpb25zRGlzYWJsZWQsIGluZGV4LCBpbmRleElzbnRCZWxvd0xhc3RBdHRlbXB0ZWQsIGxhc3RBdHRlbXB0ZWRJc250WmVybywgcmVmLCByZWYxO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgaW5kZXggPSAkdGFyZ2V0LmF0dHIoJ2RhdGEtaW5kZXgnKTtcbiAgICBpbmRleElzbnRCZWxvd0xhc3RBdHRlbXB0ZWQgPSBwYXJzZUludChpbmRleCkgPiBwYXJzZUludCh0aGlzLmxhc3RBdHRlbXB0ZWQpO1xuICAgIGxhc3RBdHRlbXB0ZWRJc250WmVybyA9IHBhcnNlSW50KHRoaXMubGFzdEF0dGVtcHRlZCkgIT09IDA7XG4gICAgY29ycmVjdGlvbnNEaXNhYmxlZCA9IHRoaXMuZGF0YUVudHJ5ID09PSBmYWxzZSAmJiAoKHJlZiA9IHRoaXMucGFyZW50KSAhPSBudWxsID8gKHJlZjEgPSByZWYucGFyZW50KSAhPSBudWxsID8gcmVmMS5lbmFibGVDb3JyZWN0aW9ucyA6IHZvaWQgMCA6IHZvaWQgMCkgPT09IGZhbHNlO1xuICAgIGlmIChjb3JyZWN0aW9uc0Rpc2FibGVkICYmIGxhc3RBdHRlbXB0ZWRJc250WmVybyAmJiBpbmRleElzbnRCZWxvd0xhc3RBdHRlbXB0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5tYXJrRWxlbWVudChpbmRleCk7XG4gICAgaWYgKHRoaXMuYXV0b3N0b3AgIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmNoZWNrQXV0b3N0b3AoKTtcbiAgICB9XG4gIH07XG5cbiAgR3JpZFJ1blZpZXcucHJvdG90eXBlLmludGVybWVkaWF0ZUl0ZW1IYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldCwgaW5kZXg7XG4gICAgdGhpcy50aW1lSW50ZXJtZWRpYXRlQ2FwdHVyZWQgPSB0aGlzLmdldFRpbWUoKSAtIHRoaXMuc3RhcnRUaW1lO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgaW5kZXggPSAkdGFyZ2V0LmF0dHIoJ2RhdGEtaW5kZXgnKTtcbiAgICB0aGlzLml0ZW1BdFRpbWUgPSBpbmRleDtcbiAgICB0aGlzLiRlbC5maW5kKFwiLmdyaWRfZWxlbWVudFwiKS5yZW1vdmVDbGFzcyhcImVsZW1lbnRfbWludXRlXCIpO1xuICAgICR0YXJnZXQuYWRkQ2xhc3MoXCJlbGVtZW50X21pbnV0ZVwiKTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVNb2RlKFwibWFya1wiKTtcbiAgfTtcblxuICBHcmlkUnVuVmlldy5wcm90b3R5cGUuY2hlY2tBdXRvc3RvcCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhdXRvQ291bnQsIGksIGosIHJlZjtcbiAgICBpZiAodGhpcy50aW1lUnVubmluZykge1xuICAgICAgYXV0b0NvdW50ID0gMDtcbiAgICAgIGZvciAoaSA9IGogPSAwLCByZWYgPSB0aGlzLmF1dG9zdG9wIC0gMTsgMCA8PSByZWYgPyBqIDw9IHJlZiA6IGogPj0gcmVmOyBpID0gMCA8PSByZWYgPyArK2ogOiAtLWopIHtcbiAgICAgICAgaWYgKHRoaXMuZ3JpZE91dHB1dFtpXSA9PT0gXCJjb3JyZWN0XCIpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBhdXRvQ291bnQrKztcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmF1dG9zdG9wcGVkID09PSBmYWxzZSkge1xuICAgICAgICBpZiAoYXV0b0NvdW50ID09PSB0aGlzLmF1dG9zdG9wKSB7XG4gICAgICAgICAgdGhpcy5hdXRvc3RvcFRlc3QoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYXV0b3N0b3BwZWQgPT09IHRydWUgJiYgYXV0b0NvdW50IDwgdGhpcy5hdXRvc3RvcCAmJiB0aGlzLnVuZG9hYmxlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuQXV0b3N0b3BUZXN0KCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEdyaWRSdW5WaWV3LnByb3RvdHlwZS5tYXJrRWxlbWVudCA9IGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSwgbW9kZSkge1xuICAgIHZhciAkdGFyZ2V0LCBjb3JyZWN0aW9uc0Rpc2FibGVkLCBpbmRleElzbnRCZWxvd0xhc3RBdHRlbXB0ZWQsIGxhc3RBdHRlbXB0ZWRJc250WmVybywgcmVmLCByZWYxLCByZWYyLCByZWYzO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICB2YWx1ZSA9IG51bGw7XG4gICAgfVxuICAgIGNvcnJlY3Rpb25zRGlzYWJsZWQgPSB0aGlzLmRhdGFFbnRyeSA9PT0gZmFsc2UgJiYgKCgocmVmID0gdGhpcy5wYXJlbnQpICE9IG51bGwgPyAocmVmMSA9IHJlZi5wYXJlbnQpICE9IG51bGwgPyByZWYxLmVuYWJsZUNvcnJlY3Rpb25zIDogdm9pZCAwIDogdm9pZCAwKSAhPSBudWxsKSAmJiAoKHJlZjIgPSB0aGlzLnBhcmVudCkgIT0gbnVsbCA/IChyZWYzID0gcmVmMi5wYXJlbnQpICE9IG51bGwgPyByZWYzLmVuYWJsZUNvcnJlY3Rpb25zIDogdm9pZCAwIDogdm9pZCAwKSA9PT0gZmFsc2U7XG4gICAgbGFzdEF0dGVtcHRlZElzbnRaZXJvID0gcGFyc2VJbnQodGhpcy5sYXN0QXR0ZW1wdGVkKSAhPT0gMDtcbiAgICBpbmRleElzbnRCZWxvd0xhc3RBdHRlbXB0ZWQgPSBwYXJzZUludChpbmRleCkgPiBwYXJzZUludCh0aGlzLmxhc3RBdHRlbXB0ZWQpO1xuICAgIGlmIChjb3JyZWN0aW9uc0Rpc2FibGVkICYmIGxhc3RBdHRlbXB0ZWRJc250WmVybyAmJiBpbmRleElzbnRCZWxvd0xhc3RBdHRlbXB0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgJHRhcmdldCA9IHRoaXMuJGVsLmZpbmQoXCIuZ3JpZF9lbGVtZW50W2RhdGEtaW5kZXg9XCIgKyBpbmRleCArIFwiXVwiKTtcbiAgICBpZiAobW9kZSAhPT0gJ3BvcHVsYXRlJykge1xuICAgICAgdGhpcy5tYXJrUmVjb3JkLnB1c2goaW5kZXgpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuYXV0b3N0b3BwZWQpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLmdyaWRPdXRwdXRbaW5kZXggLSAxXSA9ICh0aGlzLmdyaWRPdXRwdXRbaW5kZXggLSAxXSA9PT0gXCJjb3JyZWN0XCIpID8gXCJpbmNvcnJlY3RcIiA6IFwiY29ycmVjdFwiO1xuICAgICAgICByZXR1cm4gJHRhcmdldC50b2dnbGVDbGFzcyhcImVsZW1lbnRfd3JvbmdcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmdyaWRPdXRwdXRbaW5kZXggLSAxXSA9IHZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgPT09IFwiaW5jb3JyZWN0XCIpIHtcbiAgICAgICAgICByZXR1cm4gJHRhcmdldC5hZGRDbGFzcyhcImVsZW1lbnRfd3JvbmdcIik7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IFwiY29ycmVjdFwiKSB7XG4gICAgICAgICAgcmV0dXJuICR0YXJnZXQucmVtb3ZlQ2xhc3MoXCJlbGVtZW50X3dyb25nXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEdyaWRSdW5WaWV3LnByb3RvdHlwZS5lbmRPZkdyaWRMaW5lQ2xpY2sgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCBpLCBpbmRleCwgaiwgaywgcmVmLCByZWYxLCByZWYyLCByZWYzO1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMubW9kZSA9PT0gXCJtYXJrXCIpIHtcbiAgICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgICBpZiAoJHRhcmdldC5oYXNDbGFzcyhcImVsZW1lbnRfd3JvbmdcIikpIHtcbiAgICAgICAgJHRhcmdldC5yZW1vdmVDbGFzcyhcImVsZW1lbnRfd3JvbmdcIik7XG4gICAgICAgIGluZGV4ID0gJHRhcmdldC5hdHRyKCdkYXRhLWluZGV4Jyk7XG4gICAgICAgIGZvciAoaSA9IGogPSByZWYgPSBpbmRleCwgcmVmMSA9IGluZGV4IC0gKHRoaXMuY29sdW1ucyAtIDEpOyByZWYgPD0gcmVmMSA/IGogPD0gcmVmMSA6IGogPj0gcmVmMTsgaSA9IHJlZiA8PSByZWYxID8gKytqIDogLS1qKSB7XG4gICAgICAgICAgdGhpcy5tYXJrRWxlbWVudChpLCBcImNvcnJlY3RcIik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoISR0YXJnZXQuaGFzQ2xhc3MoXCJlbGVtZW50X3dyb25nXCIpICYmICF0aGlzLmF1dG9zdG9wcGVkKSB7XG4gICAgICAgICR0YXJnZXQuYWRkQ2xhc3MoXCJlbGVtZW50X3dyb25nXCIpO1xuICAgICAgICBpbmRleCA9ICR0YXJnZXQuYXR0cignZGF0YS1pbmRleCcpO1xuICAgICAgICBmb3IgKGkgPSBrID0gcmVmMiA9IGluZGV4LCByZWYzID0gaW5kZXggLSAodGhpcy5jb2x1bW5zIC0gMSk7IHJlZjIgPD0gcmVmMyA/IGsgPD0gcmVmMyA6IGsgPj0gcmVmMzsgaSA9IHJlZjIgPD0gcmVmMyA/ICsrayA6IC0taykge1xuICAgICAgICAgIHRoaXMubWFya0VsZW1lbnQoaSwgXCJpbmNvcnJlY3RcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmF1dG9zdG9wICE9PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrQXV0b3N0b3AoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgR3JpZFJ1blZpZXcucHJvdG90eXBlLmxhc3RIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQsIGluZGV4KSB7XG4gICAgdmFyICR0YXJnZXQ7XG4gICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICR0YXJnZXQgPSB0aGlzLiRlbC5maW5kKFwiLmdyaWRfZWxlbWVudFtkYXRhLWluZGV4PVwiICsgaW5kZXggKyBcIl1cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgICBpbmRleCA9ICR0YXJnZXQuYXR0cignZGF0YS1pbmRleCcpO1xuICAgIH1cbiAgICBpZiAoaW5kZXggLSAxID49IHRoaXMuZ3JpZE91dHB1dC5sYXN0SW5kZXhPZihcImluY29ycmVjdFwiKSkge1xuICAgICAgdGhpcy4kZWwuZmluZChcIi5lbGVtZW50X2xhc3RcIikucmVtb3ZlQ2xhc3MoXCJlbGVtZW50X2xhc3RcIik7XG4gICAgICAkdGFyZ2V0LmFkZENsYXNzKFwiZWxlbWVudF9sYXN0XCIpO1xuICAgICAgcmV0dXJuIHRoaXMubGFzdEF0dGVtcHRlZCA9IGluZGV4O1xuICAgIH1cbiAgfTtcblxuICBHcmlkUnVuVmlldy5wcm90b3R5cGUuc3RhcnRUaW1lciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnRpbWVyU3RvcHBlZCA9PT0gZmFsc2UgJiYgdGhpcy50aW1lUnVubmluZyA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh0aGlzLnVwZGF0ZUNvdW50ZG93biwgMTAwMCk7XG4gICAgICB0aGlzLnN0YXJ0VGltZSA9IHRoaXMuZ2V0VGltZSgpO1xuICAgICAgdGhpcy50aW1lUnVubmluZyA9IHRydWU7XG4gICAgICB0aGlzLnVwZGF0ZU1vZGUoXCJtYXJrXCIpO1xuICAgICAgdGhpcy5lbmFibGVHcmlkKCk7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVDb3VudGRvd24oKTtcbiAgICB9XG4gIH07XG5cbiAgR3JpZFJ1blZpZXcucHJvdG90eXBlLmVuYWJsZUdyaWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcInRhYmxlLmRpc2FibGVkLCBkaXYuZGlzYWJsZWRcIikucmVtb3ZlQ2xhc3MoXCJkaXNhYmxlZFwiKTtcbiAgfTtcblxuICBHcmlkUnVuVmlldy5wcm90b3R5cGUuc3RvcFRpbWVyID0gZnVuY3Rpb24oZXZlbnQsIG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PSBudWxsKSB7XG4gICAgICBtZXNzYWdlID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzLnRpbWVSdW5uaW5nICE9PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChldmVudCAhPSBudWxsID8gZXZlbnQudGFyZ2V0IDogdm9pZCAwKSB7XG4gICAgICB0aGlzLmxhc3RIYW5kbGVyKG51bGwsIHRoaXMuaXRlbXMubGVuZ3RoKTtcbiAgICB9XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgICB0aGlzLnN0b3BUaW1lID0gdGhpcy5nZXRUaW1lKCk7XG4gICAgdGhpcy50aW1lUnVubmluZyA9IGZhbHNlO1xuICAgIHRoaXMudGltZXJTdG9wcGVkID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVDb3VudGRvd24oKTtcbiAgfTtcblxuICBHcmlkUnVuVmlldy5wcm90b3R5cGUuYXV0b3N0b3BUZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgVXRpbHMuZmxhc2goKTtcbiAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpO1xuICAgIHRoaXMuc3RvcFRpbWUgPSB0aGlzLmdldFRpbWUoKTtcbiAgICB0aGlzLmF1dG9zdG9wcGVkID0gdHJ1ZTtcbiAgICB0aGlzLnRpbWVyU3RvcHBlZCA9IHRydWU7XG4gICAgdGhpcy50aW1lUnVubmluZyA9IGZhbHNlO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIuZ3JpZF9lbGVtZW50XCIpLnNsaWNlKHRoaXMuYXV0b3N0b3AgLSAxLCB0aGlzLmF1dG9zdG9wKS5hZGRDbGFzcyhcImVsZW1lbnRfbGFzdFwiKTtcbiAgICB0aGlzLmxhc3RBdHRlbXB0ZWQgPSB0aGlzLmF1dG9zdG9wO1xuICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5yZW1vdmVVbmRvLCAzMDAwKTtcbiAgICByZXR1cm4gVXRpbHMudG9wQWxlcnQodGhpcy50ZXh0LmF1dG9zdG9wKTtcbiAgfTtcblxuICBHcmlkUnVuVmlldy5wcm90b3R5cGUucmVtb3ZlVW5kbyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudW5kb2FibGUgPSBmYWxzZTtcbiAgICB0aGlzLnVwZGF0ZU1vZGUoXCJkaXNhYmxlZFwiKTtcbiAgICByZXR1cm4gY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gIH07XG5cbiAgR3JpZFJ1blZpZXcucHJvdG90eXBlLnVuQXV0b3N0b3BUZXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMudXBkYXRlQ291bnRkb3duLCAxMDAwKTtcbiAgICB0aGlzLnVwZGF0ZUNvdW50ZG93bigpO1xuICAgIHRoaXMuYXV0b3N0b3BwZWQgPSBmYWxzZTtcbiAgICB0aGlzLmxhc3RBdHRlbXB0ZWQgPSAwO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIuZ3JpZF9lbGVtZW50XCIpLnNsaWNlKHRoaXMuYXV0b3N0b3AgLSAxLCB0aGlzLmF1dG9zdG9wKS5yZW1vdmVDbGFzcyhcImVsZW1lbnRfbGFzdFwiKTtcbiAgICB0aGlzLnRpbWVSdW5uaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnVwZGF0ZU1vZGUoXCJtYXJrXCIpO1xuICAgIHJldHVybiBVdGlscy50b3BBbGVydCh0KFwiR3JpZFJ1blZpZXcubWVzc2FnZS5hdXRvc3RvcF9jYW5jZWxcIikpO1xuICB9O1xuXG4gIEdyaWRSdW5WaWV3LnByb3RvdHlwZS51cGRhdGVDb3VudGRvd24gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRpbWVFbGFwc2VkID0gTWF0aC5taW4odGhpcy5nZXRUaW1lKCkgLSB0aGlzLnN0YXJ0VGltZSwgdGhpcy50aW1lcik7XG4gICAgdGhpcy50aW1lUmVtYWluaW5nID0gdGhpcy50aW1lciAtIHRoaXMudGltZUVsYXBzZWQ7XG4gICAgdGhpcy4kZWwuZmluZChcIi50aW1lclwiKS5odG1sKHRoaXMudGltZVJlbWFpbmluZyk7XG4gICAgaWYgKHRoaXMudGltZVJ1bm5pbmcgPT09IHRydWUgJiYgdGhpcy5jYXB0dXJlTGFzdEF0dGVtcHRlZCAmJiB0aGlzLnRpbWVSZW1haW5pbmcgPD0gMCkge1xuICAgICAgdGhpcy5zdG9wVGltZXIoe1xuICAgICAgICBzaW1wbGVTdG9wOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIFV0aWxzLmJhY2tncm91bmQoXCJyZWRcIik7XG4gICAgICBfLmRlbGF5KChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgYWxlcnQoX3RoaXMudGV4dC50b3VjaExhc3RJdGVtKTtcbiAgICAgICAgICByZXR1cm4gVXRpbHMuYmFja2dyb3VuZChcIlwiKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLCAxZTMpO1xuICAgICAgdGhpcy51cGRhdGVNb2RlKFwibGFzdFwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY2FwdHVyZUl0ZW1BdFRpbWUgJiYgIXRoaXMuZ290SW50ZXJtZWRpYXRlICYmICF0aGlzLm1pbnV0ZU1lc3NhZ2UgJiYgdGhpcy50aW1lRWxhcHNlZCA+PSB0aGlzLmNhcHR1cmVBZnRlclNlY29uZHMpIHtcbiAgICAgIFV0aWxzLmZsYXNoKFwieWVsbG93XCIpO1xuICAgICAgVXRpbHMubWlkQWxlcnQodChcInBsZWFzZSBzZWxlY3QgdGhlIGl0ZW0gdGhlIGNoaWxkIGlzIGN1cnJlbnRseSBhdHRlbXB0aW5nXCIpKTtcbiAgICAgIHRoaXMubWludXRlTWVzc2FnZSA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVNb2RlKFwibWludXRlSXRlbVwiKTtcbiAgICB9XG4gIH07XG5cbiAgR3JpZFJ1blZpZXcucHJvdG90eXBlLnVwZGF0ZU1vZGUgPSBmdW5jdGlvbihtb2RlKSB7XG4gICAgaWYgKG1vZGUgPT0gbnVsbCkge1xuICAgICAgbW9kZSA9IG51bGw7XG4gICAgfVxuICAgIGlmICgobW9kZSA9PT0gbnVsbCAmJiB0aGlzLnRpbWVFbGFwc2VkID09PSAwICYmICF0aGlzLmRhdGFFbnRyeSkgfHwgbW9kZSA9PT0gXCJkaXNhYmxlZFwiKSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2RlQnV0dG9uLnNldFZhbHVlKG51bGwpO1xuICAgIH0gZWxzZSBpZiAobW9kZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgICAgcmV0dXJuIHRoaXMubW9kZUJ1dHRvbi5zZXRWYWx1ZSh0aGlzLm1vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2RlID0gdGhpcy5tb2RlQnV0dG9uLmdldFZhbHVlKCk7XG4gICAgfVxuICB9O1xuXG4gIEdyaWRSdW5WaWV3LnByb3RvdHlwZS5nZXRUaW1lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAvIDEwMDApO1xuICB9O1xuXG4gIEdyaWRSdW5WaWV3LnByb3RvdHlwZS5yZXNldFZhcmlhYmxlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwcmV2aW91cztcbiAgICB0aGlzLnRpbWVyID0gcGFyc2VJbnQodGhpcy5tb2RlbC5nZXQoXCJ0aW1lclwiKSkgfHwgMDtcbiAgICB0aGlzLnVudGltZWQgPSB0aGlzLnRpbWVyID09PSAwIHx8IHRoaXMuZGF0YUVudHJ5O1xuICAgIHRoaXMuZ290TWludXRlSXRlbSA9IGZhbHNlO1xuICAgIHRoaXMubWludXRlTWVzc2FnZSA9IGZhbHNlO1xuICAgIHRoaXMuaXRlbUF0VGltZSA9IG51bGw7XG4gICAgdGhpcy50aW1lSW50ZXJtZWRpYXRlQ2FwdHVyZWQgPSBudWxsO1xuICAgIHRoaXMubWFya1JlY29yZCA9IFtdO1xuICAgIHRoaXMudGltZXJTdG9wcGVkID0gZmFsc2U7XG4gICAgdGhpcy5zdGFydFRpbWUgPSAwO1xuICAgIHRoaXMuc3RvcFRpbWUgPSAwO1xuICAgIHRoaXMudGltZUVsYXBzZWQgPSAwO1xuICAgIHRoaXMudGltZVJlbWFpbmluZyA9IHRoaXMudGltZXI7XG4gICAgdGhpcy5sYXN0QXR0ZW1wdGVkID0gMDtcbiAgICB0aGlzLmludGVydmFsID0gbnVsbDtcbiAgICB0aGlzLnVuZG9hYmxlID0gdHJ1ZTtcbiAgICB0aGlzLnRpbWVSdW5uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5pdGVtcyA9IF8uY29tcGFjdCh0aGlzLm1vZGVsLmdldChcIml0ZW1zXCIpKTtcbiAgICB0aGlzLml0ZW1NYXAgPSBbXTtcbiAgICB0aGlzLm1hcEl0ZW0gPSBbXTtcbiAgICBpZiAodGhpcy5tb2RlbC5oYXMoXCJyYW5kb21pemVcIikgJiYgdGhpcy5tb2RlbC5nZXQoXCJyYW5kb21pemVcIikpIHtcbiAgICAgIHRoaXMuaXRlbU1hcCA9IHRoaXMuaXRlbXMubWFwKGZ1bmN0aW9uKHZhbHVlLCBpKSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLml0ZW1zLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaSkge1xuICAgICAgICB2YXIgdGVtcCwgdGVtcFZhbHVlO1xuICAgICAgICB0ZW1wID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdGhpcy5pdGVtcy5sZW5ndGgpO1xuICAgICAgICB0ZW1wVmFsdWUgPSB0aGlzLml0ZW1NYXBbdGVtcF07XG4gICAgICAgIHRoaXMuaXRlbU1hcFt0ZW1wXSA9IHRoaXMuaXRlbU1hcFtpXTtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbU1hcFtpXSA9IHRlbXBWYWx1ZTtcbiAgICAgIH0sIHRoaXMpO1xuICAgICAgdGhpcy5pdGVtTWFwLmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXBJdGVtW3RoaXMuaXRlbU1hcFtpXV0gPSBpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpKSB7XG4gICAgICAgIHRoaXMuaXRlbU1hcFtpXSA9IGk7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcEl0ZW1baV0gPSBpO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICAgIGlmICghdGhpcy5jYXB0dXJlTGFzdEF0dGVtcHRlZCAmJiAhdGhpcy5jYXB0dXJlSXRlbUF0VGltZSkge1xuICAgICAgdGhpcy5tb2RlID0gXCJtYXJrXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubW9kZSA9IFwiZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgaWYgKHRoaXMuZGF0YUVudHJ5KSB7XG4gICAgICB0aGlzLm1vZGUgPSBcIm1hcmtcIjtcbiAgICB9XG4gICAgdGhpcy5ncmlkT3V0cHV0ID0gdGhpcy5pdGVtcy5tYXAoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gJ2NvcnJlY3QnO1xuICAgIH0pO1xuICAgIHRoaXMuY29sdW1ucyA9IHBhcnNlSW50KHRoaXMubW9kZWwuZ2V0KFwiY29sdW1uc1wiKSkgfHwgMztcbiAgICB0aGlzLmF1dG9zdG9wID0gdGhpcy51bnRpbWVkID8gMCA6IHBhcnNlSW50KHRoaXMubW9kZWwuZ2V0KFwiYXV0b3N0b3BcIikpIHx8IDA7XG4gICAgdGhpcy5hdXRvc3RvcHBlZCA9IGZhbHNlO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIuZ3JpZF9lbGVtZW50XCIpLnJlbW92ZUNsYXNzKFwiZWxlbWVudF93cm9uZ1wiKS5yZW1vdmVDbGFzcyhcImVsZW1lbnRfbGFzdFwiKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCJ0YWJsZVwiKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIudGltZXJcIikuaHRtbCh0aGlzLnRpbWVyKTtcbiAgICBpZiAoIXRoaXMuZGF0YUVudHJ5KSB7XG4gICAgICBpZiAoKHRoaXMucGFyZW50ICE9IG51bGwpICYmICh0aGlzLnBhcmVudC5wYXJlbnQgIT0gbnVsbCkgJiYgKHRoaXMucGFyZW50LnBhcmVudC5yZXN1bHQgIT0gbnVsbCkpIHtcbiAgICAgICAgcHJldmlvdXMgPSB0aGlzLnBhcmVudC5wYXJlbnQucmVzdWx0LmdldEJ5SGFzaCh0aGlzLm1vZGVsLmdldCgnaGFzaCcpKTtcbiAgICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgICAgdGhpcy5jYXB0dXJlTGFzdEF0dGVtcHRlZCA9IHByZXZpb3VzLmNhcHR1cmVfbGFzdF9hdHRlbXB0ZWQ7XG4gICAgICAgICAgdGhpcy5pdGVtQXRUaW1lID0gcHJldmlvdXMuaXRlbV9hdF90aW1lO1xuICAgICAgICAgIHRoaXMudGltZUludGVybWVkaWF0ZUNhcHR1cmVkID0gcHJldmlvdXMudGltZV9pbnRlcm1lZGlhdGVfY2FwdHVyZWQ7XG4gICAgICAgICAgdGhpcy5jYXB0dXJlSXRlbUF0VGltZSA9IHByZXZpb3VzLmNhcHR1cmVfaXRlbV9hdF90aW1lO1xuICAgICAgICAgIHRoaXMuYXV0b3N0b3AgPSBwcmV2aW91cy5hdXRvX3N0b3A7XG4gICAgICAgICAgdGhpcy5sYXN0QXR0ZW1wdGVkID0gcHJldmlvdXMuYXR0ZW1wdGVkO1xuICAgICAgICAgIHRoaXMudGltZVJlbWFpbmluZyA9IHByZXZpb3VzLnRpbWVfcmVtYWluO1xuICAgICAgICAgIHRoaXMubWFya1JlY29yZCA9IHByZXZpb3VzLm1hcmtfcmVjb3JkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLm1vZGVCdXR0b24gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlTW9kZSh0aGlzLm1vZGUpO1xuICAgIH1cbiAgfTtcblxuICBHcmlkUnVuVmlldy5wcm90b3R5cGUuaTE4biA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRleHQgPSB7XG4gICAgICBhdXRvc3RvcDogdChcIkdyaWRSdW5WaWV3Lm1lc3NhZ2UuYXV0b3N0b3BcIiksXG4gICAgICB0b3VjaExhc3RJdGVtOiB0KFwiR3JpZFJ1blZpZXcubWVzc2FnZS50b3VjaF9sYXN0X2l0ZW1cIiksXG4gICAgICBzdWJ0ZXN0Tm90Q29tcGxldGU6IHQoXCJHcmlkUnVuVmlldy5tZXNzYWdlLnN1YnRlc3Rfbm90X2NvbXBsZXRlXCIpLFxuICAgICAgaW5wdXRNb2RlOiB0KFwiR3JpZFJ1blZpZXcubGFiZWwuaW5wdXRfbW9kZVwiKSxcbiAgICAgIHRpbWVSZW1haW5pbmc6IHQoXCJHcmlkUnVuVmlldy5sYWJlbC50aW1lX3JlbWFpbmluZ1wiKSxcbiAgICAgIHdhc0F1dG9zdG9wcGVkOiB0KFwiR3JpZFJ1blZpZXcubGFiZWwud2FzX2F1dG9zdG9wcGVkXCIpLFxuICAgICAgbWFyazogdChcIkdyaWRSdW5WaWV3LmJ1dHRvbi5tYXJrXCIpLFxuICAgICAgc3RhcnQ6IHQoXCJHcmlkUnVuVmlldy5idXR0b24uc3RhcnRcIiksXG4gICAgICBzdG9wOiB0KFwiR3JpZFJ1blZpZXcuYnV0dG9uLnN0b3BcIiksXG4gICAgICByZXN0YXJ0OiB0KFwiR3JpZFJ1blZpZXcuYnV0dG9uLnJlc3RhcnRcIiksXG4gICAgICBsYXN0QXR0ZW1wdGVkOiB0KFwiR3JpZFJ1blZpZXcuYnV0dG9uLmxhc3RfYXR0ZW1wdGVkXCIpXG4gICAgfTtcbiAgfTtcblxuICBHcmlkUnVuVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgZm9udFNpemVDbGFzcztcbiAgICB0aGlzLmkxOG4oKTtcbiAgICBpZiAodGhpcy5tb2RlbC5nZXQoXCJmb250RmFtaWx5XCIpICE9PSBcIlwiKSB7XG4gICAgICB0aGlzLmZvbnRTdHlsZSA9IFwic3R5bGU9XFxcImZvbnQtZmFtaWx5OiBcIiArICh0aGlzLm1vZGVsLmdldCgnZm9udEZhbWlseScpKSArIFwiICFpbXBvcnRhbnQ7XFxcIlwiO1xuICAgIH1cbiAgICB0aGlzLmNhcHR1cmVBZnRlclNlY29uZHMgPSB0aGlzLm1vZGVsLmhhcyhcImNhcHR1cmVBZnRlclNlY29uZHNcIikgPyB0aGlzLm1vZGVsLmdldChcImNhcHR1cmVBZnRlclNlY29uZHNcIikgOiAwO1xuICAgIHRoaXMuY2FwdHVyZUl0ZW1BdFRpbWUgPSB0aGlzLm1vZGVsLmhhcyhcImNhcHR1cmVJdGVtQXRUaW1lXCIpID8gdGhpcy5tb2RlbC5nZXQoXCJjYXB0dXJlSXRlbUF0VGltZVwiKSA6IGZhbHNlO1xuICAgIHRoaXMuY2FwdHVyZUxhc3RBdHRlbXB0ZWQgPSB0aGlzLm1vZGVsLmhhcyhcImNhcHR1cmVMYXN0QXR0ZW1wdGVkXCIpID8gdGhpcy5tb2RlbC5nZXQoXCJjYXB0dXJlTGFzdEF0dGVtcHRlZFwiKSA6IHRydWU7XG4gICAgdGhpcy5lbmRPZkxpbmUgPSB0aGlzLm1vZGVsLmhhcyhcImVuZE9mTGluZVwiKSA/IHRoaXMubW9kZWwuZ2V0KFwiZW5kT2ZMaW5lXCIpIDogdHJ1ZTtcbiAgICB0aGlzLmxheW91dE1vZGUgPSB0aGlzLm1vZGVsLmhhcyhcImxheW91dE1vZGVcIikgPyB0aGlzLm1vZGVsLmdldChcImxheW91dE1vZGVcIikgOiBcImZpeGVkXCI7XG4gICAgdGhpcy5mb250U2l6ZSA9IHRoaXMubW9kZWwuaGFzKFwiZm9udFNpemVcIikgPyB0aGlzLm1vZGVsLmdldChcImZvbnRTaXplXCIpIDogXCJub3JtYWxcIjtcbiAgICBpZiAodGhpcy5mb250U2l6ZSA9PT0gXCJzbWFsbFwiKSB7XG4gICAgICBmb250U2l6ZUNsYXNzID0gXCJmb250X3NpemVfc21hbGxcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9udFNpemVDbGFzcyA9IFwiXCI7XG4gICAgfVxuICAgIHRoaXMucnRsID0gdGhpcy5tb2RlbC5nZXRCb29sZWFuKFwicnRsXCIpO1xuICAgIGlmICh0aGlzLnJ0bCkge1xuICAgICAgdGhpcy4kZWwuYWRkQ2xhc3MoXCJydGwtZ3JpZFwiKTtcbiAgICB9XG4gICAgdGhpcy50b3RhbFRpbWUgPSB0aGlzLm1vZGVsLmdldChcInRpbWVyXCIpIHx8IDA7XG4gICAgdGhpcy5tb2RlSGFuZGxlcnMgPSB7XG4gICAgICBcIm1hcmtcIjogdGhpcy5tYXJrSGFuZGxlcixcbiAgICAgIFwibGFzdFwiOiB0aGlzLmxhc3RIYW5kbGVyLFxuICAgICAgXCJtaW51dGVJdGVtXCI6IHRoaXMuaW50ZXJtZWRpYXRlSXRlbUhhbmRsZXIsXG4gICAgICBkaXNhYmxlZDogJC5ub29wXG4gICAgfTtcbiAgICB0aGlzLmRhdGFFbnRyeSA9IG9wdGlvbnMuZGF0YUVudHJ5O1xuICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIHRoaXMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gICAgdGhpcy5yZXNldFZhcmlhYmxlcygpO1xuICAgIHRoaXMuZ3JpZEVsZW1lbnQgPSBfLnRlbXBsYXRlKFwiPHRkPjxidXR0b24gZGF0YS1sYWJlbD0ne3tsYWJlbH19JyBkYXRhLWluZGV4PSd7e2l9fScgY2xhc3M9J2dyaWRfZWxlbWVudCBcIiArIGZvbnRTaXplQ2xhc3MgKyBcIicgXCIgKyAodGhpcy5mb250U3R5bGUgfHwgXCJcIikgKyBcIj57e2xhYmVsfX08L2J1dHRvbj48L3RkPlwiKTtcbiAgICB0aGlzLnZhcmlhYmxlR3JpZEVsZW1lbnQgPSBfLnRlbXBsYXRlKFwiPGJ1dHRvbiBkYXRhLWxhYmVsPSd7e2xhYmVsfX0nIGRhdGEtaW5kZXg9J3t7aX19JyBjbGFzcz0nZ3JpZF9lbGVtZW50IFwiICsgZm9udFNpemVDbGFzcyArIFwiJyBcIiArICh0aGlzLmZvbnRTdHlsZSB8fCBcIlwiKSArIFwiPnt7bGFiZWx9fTwvYnV0dG9uPlwiKTtcbiAgICBpZiAodGhpcy5sYXlvdXRNb2RlID09PSBcImZpeGVkXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLmVuZE9mR3JpZExpbmUgPSBfLnRlbXBsYXRlKFwiPHRkPjxidXR0b24gZGF0YS1pbmRleD0ne3tpfX0nIGNsYXNzPSdlbmRfb2ZfZ3JpZF9saW5lJz4qPC9idXR0b24+PC90ZD5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmVuZE9mR3JpZExpbmUgPSBfLnRlbXBsYXRlKFwiXCIpO1xuICAgIH1cbiAgfTtcblxuICBHcmlkUnVuVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyICR0YXJnZXQsIGJ1dHRvbkNvbmZpZywgZGF0YUVudHJ5LCBkaXNhYmxpbmcsIGRpc3BsYXlSdGwsIGRvbmUsIGZpcnN0Um93LCBncmlkSFRNTCwgaHRtbCwgaSwgaXRlbSwgaiwgaywgbCwgbGVuLCBsZW4xLCBtb2RlU2VsZWN0b3IsIHByZXZpb3VzLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlc2V0QnV0dG9uLCBzdGFydFRpbWVySFRNTCwgc3RvcFRpbWVySFRNTDtcbiAgICBkb25lID0gMDtcbiAgICBzdGFydFRpbWVySFRNTCA9IFwiPGRpdiBjbGFzcz0ndGltZXJfd3JhcHBlcic+PGJ1dHRvbiBjbGFzcz0nc3RhcnRfdGltZSB0aW1lJz5cIiArIHRoaXMudGV4dC5zdGFydCArIFwiPC9idXR0b24+PGRpdiBjbGFzcz0ndGltZXInPlwiICsgdGhpcy50aW1lciArIFwiPC9kaXY+PC9kaXY+XCI7XG4gICAgaWYgKCF0aGlzLnVudGltZWQpIHtcbiAgICAgIGRpc2FibGluZyA9IFwiZGlzYWJsZWRcIjtcbiAgICB9XG4gICAgaWYgKHRoaXMucnRsKSB7XG4gICAgICBkaXNwbGF5UnRsID0gXCJydGxfbW9kZVwiO1xuICAgIH1cbiAgICBodG1sID0gIXRoaXMudW50aW1lZCA/IHN0YXJ0VGltZXJIVE1MIDogXCJcIjtcbiAgICBncmlkSFRNTCA9IFwiXCI7XG4gICAgaWYgKHRoaXMubGF5b3V0TW9kZSA9PT0gXCJmaXhlZFwiKSB7XG4gICAgICBncmlkSFRNTCArPSBcIjx0YWJsZSBjbGFzcz0nZ3JpZCBcIiArIGRpc2FibGluZyArIFwiIFwiICsgKGRpc3BsYXlSdGwgfHwgJycpICsgXCInPlwiO1xuICAgICAgZmlyc3RSb3cgPSB0cnVlO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgaWYgKGRvbmUgPiB0aGlzLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGdyaWRIVE1MICs9IFwiPHRyPlwiO1xuICAgICAgICBmb3IgKGkgPSBqID0gMSwgcmVmID0gdGhpcy5jb2x1bW5zOyAxIDw9IHJlZiA/IGogPD0gcmVmIDogaiA+PSByZWY7IGkgPSAxIDw9IHJlZiA/ICsraiA6IC0taikge1xuICAgICAgICAgIGlmIChkb25lIDwgdGhpcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGdyaWRIVE1MICs9IHRoaXMuZ3JpZEVsZW1lbnQoe1xuICAgICAgICAgICAgICBsYWJlbDogXy5lc2NhcGUodGhpcy5pdGVtc1t0aGlzLml0ZW1NYXBbZG9uZV1dKSxcbiAgICAgICAgICAgICAgaTogZG9uZSArIDFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkb25lKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0Um93KSB7XG4gICAgICAgICAgaWYgKGRvbmUgPCAodGhpcy5pdGVtcy5sZW5ndGggKyAxKSAmJiB0aGlzLmVuZE9mTGluZSkge1xuICAgICAgICAgICAgZ3JpZEhUTUwgKz0gXCI8dGQ+PC90ZD5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmlyc3RSb3cgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZG9uZSA8ICh0aGlzLml0ZW1zLmxlbmd0aCArIDEpICYmIHRoaXMuZW5kT2ZMaW5lKSB7XG4gICAgICAgICAgICBncmlkSFRNTCArPSB0aGlzLmVuZE9mR3JpZExpbmUoe1xuICAgICAgICAgICAgICBpOiBkb25lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ3JpZEhUTUwgKz0gXCI8L3RyPlwiO1xuICAgICAgfVxuICAgICAgZ3JpZEhUTUwgKz0gXCI8L3RhYmxlPlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBncmlkSFRNTCArPSBcIjxkaXYgY2xhc3M9J2dyaWQgXCIgKyBkaXNhYmxpbmcgKyBcIiBcIiArIChkaXNwbGF5UnRsIHx8ICcnKSArIFwiJz5cIjtcbiAgICAgIHJlZjEgPSB0aGlzLml0ZW1zO1xuICAgICAgZm9yIChpID0gayA9IDAsIGxlbiA9IHJlZjEubGVuZ3RoOyBrIDwgbGVuOyBpID0gKytrKSB7XG4gICAgICAgIGl0ZW0gPSByZWYxW2ldO1xuICAgICAgICBncmlkSFRNTCArPSB0aGlzLnZhcmlhYmxlR3JpZEVsZW1lbnQoe1xuICAgICAgICAgIFwibGFiZWxcIjogXy5lc2NhcGUodGhpcy5pdGVtc1t0aGlzLml0ZW1NYXBbaV1dKSxcbiAgICAgICAgICBcImlcIjogaSArIDFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBncmlkSFRNTCArPSBcIjwvZGl2PlwiO1xuICAgIH1cbiAgICBodG1sICs9IGdyaWRIVE1MO1xuICAgIHN0b3BUaW1lckhUTUwgPSBcIjxkaXYgY2xhc3M9J3RpbWVyX3dyYXBwZXInPjxidXR0b24gY2xhc3M9J3N0b3BfdGltZSB0aW1lJz5cIiArIHRoaXMudGV4dC5zdG9wICsgXCI8L2J1dHRvbj48ZGl2IGNsYXNzPSd0aW1lcic+XCIgKyB0aGlzLnRpbWVyICsgXCI8L2Rpdj48L2Rpdj5cIjtcbiAgICByZXNldEJ1dHRvbiA9IFwiPGRpdj4gPGJ1dHRvbiBjbGFzcz0ncmVzdGFydCBjb21tYW5kJz5cIiArIHRoaXMudGV4dC5yZXN0YXJ0ICsgXCI8L2J1dHRvbj4gPGJyPiA8L2Rpdj5cIjtcbiAgICBtb2RlU2VsZWN0b3IgPSBcIlwiO1xuICAgIGlmICh0aGlzLmNhcHR1cmVMYXN0QXR0ZW1wdGVkIHx8IHRoaXMuY2FwdHVyZUl0ZW1BdFRpbWUpIHtcbiAgICAgIGlmICgocmVmMiA9IHRoaXMubW9kZUJ1dHRvbikgIT0gbnVsbCkge1xuICAgICAgICByZWYyLmNsb3NlKCk7XG4gICAgICB9XG4gICAgICBidXR0b25Db25maWcgPSB7XG4gICAgICAgIG9wdGlvbnM6IFtdLFxuICAgICAgICBtb2RlOiBcInNpbmdsZVwiXG4gICAgICB9O1xuICAgICAgYnV0dG9uQ29uZmlnLm9wdGlvbnMucHVzaCh7XG4gICAgICAgIGxhYmVsOiB0aGlzLnRleHQubWFyayxcbiAgICAgICAgdmFsdWU6IFwibWFya1wiXG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLmNhcHR1cmVJdGVtQXRUaW1lKSB7XG4gICAgICAgIGJ1dHRvbkNvbmZpZy5vcHRpb25zLnB1c2goe1xuICAgICAgICAgIGxhYmVsOiB0KFwiaXRlbSBhdCBfX3NlY29uZHNfXyBzZWNvbmRzXCIsIHtcbiAgICAgICAgICAgIHNlY29uZHM6IHRoaXMuY2FwdHVyZUFmdGVyU2Vjb25kc1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIHZhbHVlOiBcIm1pbnV0ZUl0ZW1cIlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmNhcHR1cmVMYXN0QXR0ZW1wdGVkKSB7XG4gICAgICAgIGJ1dHRvbkNvbmZpZy5vcHRpb25zLnB1c2goe1xuICAgICAgICAgIGxhYmVsOiB0aGlzLnRleHQubGFzdEF0dGVtcHRlZCxcbiAgICAgICAgICB2YWx1ZTogXCJsYXN0XCJcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICB0aGlzLm1vZGVCdXR0b24gPSBuZXcgQnV0dG9uVmlldyhidXR0b25Db25maWcpO1xuICAgICAgdGhpcy5tb2RlQnV0dG9uLm9uKFwiY2hhbmdlIGNsaWNrXCIsICgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVNb2RlKCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSksIHRoaXMpO1xuICAgICAgbW9kZVNlbGVjdG9yID0gXCI8ZGl2IGNsYXNzPSdncmlkX21vZGVfd3JhcHBlciBxdWVzdGlvbiBjbGVhcmZpeCc+IDxsYWJlbD5cIiArIHRoaXMudGV4dC5pbnB1dE1vZGUgKyBcIjwvbGFiZWw+PGJyPiA8ZGl2IGNsYXNzPSdtb2RlLWJ1dHRvbic+PC9kaXY+IDwvZGl2PlwiO1xuICAgIH1cbiAgICBkYXRhRW50cnkgPSBcIjx0YWJsZSBjbGFzcz0nY2xhc3NfdGFibGUnPiA8dHI+IDx0ZD5cIiArIHRoaXMudGV4dC53YXNBdXRvc3RvcHBlZCArIFwiPC90ZD48dGQ+PGlucHV0IHR5cGU9J2NoZWNrYm94JyBjbGFzcz0nZGF0YV9hdXRvc3RvcHBlZCc+PC90ZD4gPC90cj4gPHRyPiA8dGQ+XCIgKyB0aGlzLnRleHQudGltZVJlbWFpbmluZyArIFwiPC90ZD48dGQ+PGlucHV0IHR5cGU9J251bWJlcicgY2xhc3M9J2RhdGFfdGltZV9yZW1haW4nPjwvdGQ+IDwvdHI+IDwvdGFibGU+XCI7XG4gICAgaHRtbCArPSAoIXRoaXMudW50aW1lZCA/IHN0b3BUaW1lckhUTUwgOiBcIlwiKSArIFwiIFwiICsgKCF0aGlzLnVudGltZWQgPyByZXNldEJ1dHRvbiA6IFwiXCIpICsgXCIgXCIgKyBtb2RlU2VsZWN0b3IgKyBcIiBcIiArICgodGhpcy5kYXRhRW50cnkgPyBkYXRhRW50cnkgOiB2b2lkIDApIHx8ICcnKTtcbiAgICB0aGlzLiRlbC5odG1sKGh0bWwpO1xuICAgIHRoaXMubW9kZUJ1dHRvbi5zZXRFbGVtZW50KHRoaXMuJGVsLmZpbmQoXCIubW9kZS1idXR0b25cIikpO1xuICAgIHRoaXMubW9kZUJ1dHRvbi5yZW5kZXIoKTtcbiAgICB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgICB0aGlzLnRyaWdnZXIoXCJyZWFkeVwiKTtcbiAgICBpZiAoIXRoaXMuZGF0YUVudHJ5KSB7XG4gICAgICBpZiAoKHRoaXMucGFyZW50ICE9IG51bGwpICYmICh0aGlzLnBhcmVudC5wYXJlbnQgIT0gbnVsbCkgJiYgKHRoaXMucGFyZW50LnBhcmVudC5yZXN1bHQgIT0gbnVsbCkpIHtcbiAgICAgICAgcHJldmlvdXMgPSB0aGlzLnBhcmVudC5wYXJlbnQucmVzdWx0LmdldEJ5SGFzaCh0aGlzLm1vZGVsLmdldCgnaGFzaCcpKTtcbiAgICAgICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICAgICAgdGhpcy5tYXJrUmVjb3JkID0gcHJldmlvdXMubWFya19yZWNvcmQ7XG4gICAgICAgICAgcmVmMyA9IHRoaXMubWFya1JlY29yZDtcbiAgICAgICAgICBmb3IgKGkgPSBsID0gMCwgbGVuMSA9IHJlZjMubGVuZ3RoOyBsIDwgbGVuMTsgaSA9ICsrbCkge1xuICAgICAgICAgICAgaXRlbSA9IHJlZjNbaV07XG4gICAgICAgICAgICB0aGlzLm1hcmtFbGVtZW50KGl0ZW0sIG51bGwsICdwb3B1bGF0ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLml0ZW1BdFRpbWUgPSBwcmV2aW91cy5pdGVtX2F0X3RpbWU7XG4gICAgICAgICAgJHRhcmdldCA9IHRoaXMuJGVsLmZpbmQoXCIuZ3JpZF9lbGVtZW50W2RhdGEtaW5kZXg9XCIgKyB0aGlzLml0ZW1BdFRpbWUgKyBcIl1cIik7XG4gICAgICAgICAgJHRhcmdldC5hZGRDbGFzcyhcImVsZW1lbnRfbWludXRlXCIpO1xuICAgICAgICAgIHRoaXMubGFzdEF0dGVtcHRlZCA9IHByZXZpb3VzLmF0dGVtcHRlZDtcbiAgICAgICAgICAkdGFyZ2V0ID0gdGhpcy4kZWwuZmluZChcIi5ncmlkX2VsZW1lbnRbZGF0YS1pbmRleD1cIiArIHRoaXMubGFzdEF0dGVtcHRlZCArIFwiXVwiKTtcbiAgICAgICAgICByZXR1cm4gJHRhcmdldC5hZGRDbGFzcyhcImVsZW1lbnRfbGFzdFwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBHcmlkUnVuVmlldy5wcm90b3R5cGUuaXNWYWxpZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpdGVtLCByZWY7XG4gICAgaWYgKHRoaXMudGltZVJ1bm5pbmcpIHtcbiAgICAgIHRoaXMuc3RvcFRpbWVyKCk7XG4gICAgfVxuICAgIGlmIChwYXJzZUludCh0aGlzLmxhc3RBdHRlbXB0ZWQpID09PSB0aGlzLml0ZW1zLmxlbmd0aCAmJiB0aGlzLnRpbWVSZW1haW5pbmcgPT09IDApIHtcbiAgICAgIGl0ZW0gPSB0aGlzLml0ZW1zW3RoaXMuaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICBpZiAoY29uZmlybSh0KFwiR3JpZFJ1blZpZXcubWVzc2FnZS5sYXN0X2l0ZW1fY29uZmlybVwiLCB7XG4gICAgICAgIGl0ZW06IGl0ZW1cbiAgICAgIH0pKSkge1xuICAgICAgICB0aGlzLnVwZGF0ZU1vZGU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9ICgocmVmID0gdGhpcy5tZXNzYWdlcykgIT0gbnVsbCA/IHJlZi5wdXNoIDogdm9pZCAwKSA/IHRoaXMubWVzc2FnZXMuY29uY2F0KFttc2ddKSA6IFttc2ddO1xuICAgICAgICB0aGlzLnVwZGF0ZU1vZGUoXCJsYXN0XCIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLmNhcHR1cmVMYXN0QXR0ZW1wdGVkICYmIHRoaXMubGFzdEF0dGVtcHRlZCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy50aW1lUnVubmluZyA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy50aW1lciAhPT0gMCAmJiB0aGlzLnRpbWVSZW1haW5pbmcgPT09IHRoaXMudGltZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgR3JpZFJ1blZpZXcucHJvdG90eXBlLnNob3dFcnJvcnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbWVzc2FnZXMsIG5vTGFzdEl0ZW0sIHRpbWVTdGlsbFJ1bm5pbmcsIHRpbWVySGFzbnRSdW47XG4gICAgbWVzc2FnZXMgPSB0aGlzLm1lc3NhZ2VzIHx8IFtdO1xuICAgIHRoaXMubWVzc2FnZXMgPSBbXTtcbiAgICB0aW1lckhhc250UnVuID0gdGhpcy50aW1lciAhPT0gMCAmJiB0aGlzLnRpbWVSZW1haW5pbmcgPT09IHRoaXMudGltZXI7XG4gICAgbm9MYXN0SXRlbSA9IHRoaXMuY2FwdHVyZUxhc3RBdHRlbXB0ZWQgJiYgdGhpcy5sYXN0QXR0ZW1wdGVkID09PSAwO1xuICAgIHRpbWVTdGlsbFJ1bm5pbmcgPSB0aGlzLnRpbWVSdW5pbmcgPT09IHRydWU7XG4gICAgaWYgKHRpbWVySGFzbnRSdW4pIHtcbiAgICAgIG1lc3NhZ2VzLnB1c2godGhpcy50ZXh0LnN1YnRlc3ROb3RDb21wbGV0ZSk7XG4gICAgfVxuICAgIGlmIChub0xhc3RJdGVtICYmICF0aW1lckhhc250UnVuKSB7XG4gICAgICBtZXNzYWdlcy5wdXNoKHRoaXMudGV4dC50b3VjaExhc3RJdGVtKTtcbiAgICAgIHRoaXMudXBkYXRlTW9kZShcImxhc3RcIik7XG4gICAgfVxuICAgIGlmICh0aW1lU3RpbGxSdW5uaW5nKSB7XG4gICAgICBtZXNzYWdlcy5wdXNoKHRoaXMudGV4dC50aW1lU3RpbGxSdW5uaW5nKTtcbiAgICB9XG4gICAgcmV0dXJuIFV0aWxzLm1pZEFsZXJ0KG1lc3NhZ2VzLmpvaW4oXCI8YnI+XCIpLCAzMDAwKTtcbiAgfTtcblxuICBHcmlkUnVuVmlldy5wcm90b3R5cGUuZ2V0UmVzdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGF1dG9zdG9wcGVkLCBjb21wbGV0ZVJlc3VsdHMsIGksIGl0ZW0sIGl0ZW1SZXN1bHRzLCBqLCBsZW4sIHJlZiwgcmVzdWx0LCB0aW1lUmVtYWluaW5nO1xuICAgIGNvbXBsZXRlUmVzdWx0cyA9IFtdO1xuICAgIGl0ZW1SZXN1bHRzID0gW107XG4gICAgaWYgKCF0aGlzLmNhcHR1cmVMYXN0QXR0ZW1wdGVkKSB7XG4gICAgICB0aGlzLmxhc3RBdHRlbXB0ZWQgPSB0aGlzLml0ZW1zLmxlbmd0aDtcbiAgICB9XG4gICAgcmVmID0gdGhpcy5pdGVtcztcbiAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgaXRlbSA9IHJlZltpXTtcbiAgICAgIGlmICh0aGlzLm1hcEl0ZW1baV0gPCB0aGlzLmxhc3RBdHRlbXB0ZWQpIHtcbiAgICAgICAgaXRlbVJlc3VsdHNbaV0gPSB7XG4gICAgICAgICAgaXRlbVJlc3VsdDogdGhpcy5ncmlkT3V0cHV0W3RoaXMubWFwSXRlbVtpXV0sXG4gICAgICAgICAgaXRlbUxhYmVsOiBpdGVtXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtUmVzdWx0c1tpXSA9IHtcbiAgICAgICAgICBpdGVtUmVzdWx0OiBcIm1pc3NpbmdcIixcbiAgICAgICAgICBpdGVtTGFiZWw6IHRoaXMuaXRlbXNbdGhpcy5tYXBJdGVtW2ldXVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXRoaXMuY2FwdHVyZUxhc3RBdHRlbXB0ZWQpIHtcbiAgICAgIHRoaXMubGFzdEF0dGVtcHRlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5kYXRhRW50cnkpIHtcbiAgICAgIGF1dG9zdG9wcGVkID0gdGhpcy4kZWwuZmluZChcIi5kYXRhX2F1dG9zdG9wcGVkXCIpLmlzKFwiOmNoZWNrZWRcIik7XG4gICAgICB0aW1lUmVtYWluaW5nID0gcGFyc2VJbnQodGhpcy4kZWwuZmluZChcIi5kYXRhX3RpbWVfcmVtYWluXCIpLnZhbCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXV0b3N0b3BwZWQgPSB0aGlzLmF1dG9zdG9wcGVkO1xuICAgICAgdGltZVJlbWFpbmluZyA9IHRoaXMudGltZVJlbWFpbmluZztcbiAgICB9XG4gICAgcmVzdWx0ID0ge1xuICAgICAgXCJjYXB0dXJlX2xhc3RfYXR0ZW1wdGVkXCI6IHRoaXMuY2FwdHVyZUxhc3RBdHRlbXB0ZWQsXG4gICAgICBcIml0ZW1fYXRfdGltZVwiOiB0aGlzLml0ZW1BdFRpbWUsXG4gICAgICBcInRpbWVfaW50ZXJtZWRpYXRlX2NhcHR1cmVkXCI6IHRoaXMudGltZUludGVybWVkaWF0ZUNhcHR1cmVkLFxuICAgICAgXCJjYXB0dXJlX2l0ZW1fYXRfdGltZVwiOiB0aGlzLmNhcHR1cmVJdGVtQXRUaW1lLFxuICAgICAgXCJhdXRvX3N0b3BcIjogYXV0b3N0b3BwZWQsXG4gICAgICBcImF0dGVtcHRlZFwiOiB0aGlzLmxhc3RBdHRlbXB0ZWQsXG4gICAgICBcIml0ZW1zXCI6IGl0ZW1SZXN1bHRzLFxuICAgICAgXCJ0aW1lX3JlbWFpblwiOiB0aW1lUmVtYWluaW5nLFxuICAgICAgXCJtYXJrX3JlY29yZFwiOiB0aGlzLm1hcmtSZWNvcmQsXG4gICAgICBcInZhcmlhYmxlX25hbWVcIjogdGhpcy5tb2RlbC5nZXQoXCJ2YXJpYWJsZU5hbWVcIilcbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgR3JpZFJ1blZpZXcucHJvdG90eXBlLmdldFNraXBwZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgaXRlbSwgaXRlbVJlc3VsdHMsIGosIGxlbiwgcmVmLCByZXN1bHQ7XG4gICAgaXRlbVJlc3VsdHMgPSBbXTtcbiAgICByZWYgPSB0aGlzLml0ZW1zO1xuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICBpdGVtID0gcmVmW2ldO1xuICAgICAgaXRlbVJlc3VsdHNbaV0gPSB7XG4gICAgICAgIGl0ZW1SZXN1bHQ6IFwic2tpcHBlZFwiLFxuICAgICAgICBpdGVtTGFiZWw6IGl0ZW1cbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQgPSB7XG4gICAgICBcImNhcHR1cmVfbGFzdF9hdHRlbXB0ZWRcIjogXCJza2lwcGVkXCIsXG4gICAgICBcIml0ZW1fYXRfdGltZVwiOiBcInNraXBwZWRcIixcbiAgICAgIFwidGltZV9pbnRlcm1lZGlhdGVfY2FwdHVyZWRcIjogXCJza2lwcGVkXCIsXG4gICAgICBcImNhcHR1cmVfaXRlbV9hdF90aW1lXCI6IFwic2tpcHBlZFwiLFxuICAgICAgXCJhdXRvX3N0b3BcIjogXCJza2lwcGVkXCIsXG4gICAgICBcImF0dGVtcHRlZFwiOiBcInNraXBwZWRcIixcbiAgICAgIFwiaXRlbXNcIjogaXRlbVJlc3VsdHMsXG4gICAgICBcInRpbWVfcmVtYWluXCI6IFwic2tpcHBlZFwiLFxuICAgICAgXCJtYXJrX3JlY29yZFwiOiBcInNraXBwZWRcIixcbiAgICAgIFwidmFyaWFibGVfbmFtZVwiOiB0aGlzLm1vZGVsLmdldChcInZhcmlhYmxlTmFtZVwiKVxuICAgIH07XG4gIH07XG5cbiAgR3JpZFJ1blZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTtcbiAgfTtcblxuICByZXR1cm4gR3JpZFJ1blZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBHcmlkRWRpdFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJHcmlkRWRpdFZpZXdcIlxuXG4gIGV2ZW50czpcbiAgICAnYmx1ciAjc3VidGVzdF9pdGVtcycgOiAnY2xlYW5XaGl0ZXNwYWNlJ1xuXG4gIGNsZWFuV2hpdGVzcGFjZTogLT5cbiAgICBAJGVsLmZpbmQoXCIjc3VidGVzdF9pdGVtc1wiKS52YWwoIEAkZWwuZmluZChcIiNzdWJ0ZXN0X2l0ZW1zXCIpLnZhbCgpLnJlcGxhY2UoL1xccysvZywgJyAnKSApXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cbiAgICBAbW9kZWwgPSBvcHRpb25zLm1vZGVsXG5cbiAgaXNWYWxpZDogLT4gdHJ1ZVxuXG4gIHNhdmU6IC0+XG4gICAgIyB2YWxpZGF0aW9uIGNhbiBiZSBkb25lIG9uIG1vZGVscywgcGVyaGFwcyB0aGVyZSBpcyBhIGJldHRlciBwYWxjZSB0byBkbyBpdFxuICAgIGlmIC9cXHR8LC8udGVzdChAJGVsLmZpbmQoXCIjc3VidGVzdF9pdGVtc1wiKS52YWwoKSkgdGhlbiBhbGVydCBcIlBsZWFzZSByZW1lbWJlclxcblxcbkdyaWQgaXRlbXMgYXJlIHNwYWNlIFxcXCIgXFxcIiBkZWxpbWl0ZWRcIlxuXG4gICAgQG1vZGVsLnNldFxuICAgICAgY2FwdHVyZUxhc3RBdHRlbXB0ZWQ6IEAkZWwuZmluZChcIiNjYXB0dXJlX2xhc3RfYXR0ZW1wdGVkIGlucHV0OmNoZWNrZWRcIikudmFsKCkgPT0gXCJ0cnVlXCJcbiAgICAgIGVuZE9mTGluZTogICAgICAgICAgICBAJGVsLmZpbmQoXCIjZW5kX29mX2xpbmUgaW5wdXQ6Y2hlY2tlZFwiKS52YWwoKSAgICAgICAgICAgID09IFwidHJ1ZVwiXG4gICAgICBjYXB0dXJlSXRlbUF0VGltZTogICAgQCRlbC5maW5kKFwiI2NhcHR1cmVfaXRlbV9hdF90aW1lIGlucHV0OmNoZWNrZWRcIikudmFsKCkgICA9PSBcInRydWVcIlxuICAgICAgY2FwdHVyZUFmdGVyU2Vjb25kczogIHBhcnNlSW50KEAkZWwuZmluZChcIiNjYXB0dXJlX2FmdGVyX3NlY29uZHNcIikudmFsKCkpXG5cbiAgICAgIGZvbnRTaXplOiAgIEAkZWwuZmluZChcIiNmb250X3NpemUgaW5wdXQ6Y2hlY2tlZFwiKS52YWwoKVxuICAgICAgbGF5b3V0TW9kZTogQCRlbC5maW5kKFwiI2xheW91dF9tb2RlIGlucHV0OmNoZWNrZWRcIikudmFsKClcblxuICAgICAgcmFuZG9taXplOiBAJGVsLmZpbmQoXCIjcmFuZG9taXplIGlucHV0OmNoZWNrZWRcIikudmFsKCkgPT0gXCJ0cnVlXCJcbiAgICAgIHRpbWVyICAgIDogcGFyc2VJbnQoIEAkZWwuZmluZChcIiNzdWJ0ZXN0X3RpbWVyXCIpLnZhbCgpIClcbiAgICAgIGl0ZW1zICAgIDogXy5jb21wYWN0KCBAJGVsLmZpbmQoXCIjc3VidGVzdF9pdGVtc1wiKS52YWwoKS5zcGxpdChcIiBcIikgKSAjIG1pbGQgc2FuaXRpemF0aW9uLCBoYXBwZW5zIGF0IHJlYWQgdG9vXG4gICAgICBjb2x1bW5zICA6IHBhcnNlSW50KCBAJGVsLmZpbmQoXCIjc3VidGVzdF9jb2x1bW5zXCIpLnZhbCgpIClcbiAgICAgIGF1dG9zdG9wIDogcGFyc2VJbnQoIEAkZWwuZmluZChcIiNzdWJ0ZXN0X2F1dG9zdG9wXCIpLnZhbCgpIClcbiAgICAgIHZhcmlhYmxlTmFtZSA6IEAkZWwuZmluZChcIiNzdWJ0ZXN0X3ZhcmlhYmxlX25hbWVcIikudmFsKCkucmVwbGFjZSgvXFxzL2csIFwiX1wiKS5yZXBsYWNlKC9bXmEtekEtWjAtOV9dL2csXCJcIilcblxuXG4gIHJlbmRlcjogLT5cbiAgICBpdGVtcyAgICAgICAgPSBAbW9kZWwuZ2V0KFwiaXRlbXNcIikuam9pbiBcIiBcIlxuICAgIHRpbWVyICAgICAgICA9IEBtb2RlbC5nZXQoXCJ0aW1lclwiKSAgICAgICAgfHwgMFxuICAgIGNvbHVtbnMgICAgICA9IEBtb2RlbC5nZXQoXCJjb2x1bW5zXCIpICAgICAgfHwgMFxuICAgIGF1dG9zdG9wICAgICA9IEBtb2RlbC5nZXQoXCJhdXRvc3RvcFwiKSAgICAgfHwgMFxuICAgIHZhcmlhYmxlTmFtZSA9IEBtb2RlbC5nZXQoXCJ2YXJpYWJsZU5hbWVcIikgfHwgXCJcIlxuICAgIFxuICAgIHJhbmRvbWl6ZSAgICA9IGlmIEBtb2RlbC5oYXMoXCJyYW5kb21pemVcIikgdGhlbiBAbW9kZWwuZ2V0KFwicmFuZG9taXplXCIpIGVsc2UgZmFsc2VcbiAgICBcbiAgICBjYXB0dXJlSXRlbUF0VGltZSAgICA9IGlmIEBtb2RlbC5oYXMoXCJjYXB0dXJlSXRlbUF0VGltZVwiKSAgICB0aGVuIEBtb2RlbC5nZXQoXCJjYXB0dXJlSXRlbUF0VGltZVwiKSAgICBlbHNlIGZhbHNlXG4gICAgY2FwdHVyZUFmdGVyU2Vjb25kcyAgPSBpZiBAbW9kZWwuaGFzKFwiY2FwdHVyZUFmdGVyU2Vjb25kc1wiKSAgdGhlbiBAbW9kZWwuZ2V0KFwiY2FwdHVyZUFmdGVyU2Vjb25kc1wiKSAgZWxzZSAwXG4gICAgY2FwdHVyZUxhc3RBdHRlbXB0ZWQgPSBpZiBAbW9kZWwuaGFzKFwiY2FwdHVyZUxhc3RBdHRlbXB0ZWRcIikgdGhlbiBAbW9kZWwuZ2V0KFwiY2FwdHVyZUxhc3RBdHRlbXB0ZWRcIikgZWxzZSB0cnVlXG4gICAgZW5kT2ZMaW5lICAgICAgICAgICAgPSBpZiBAbW9kZWwuaGFzKFwiZW5kT2ZMaW5lXCIpICAgICAgICAgICAgdGhlbiBAbW9kZWwuZ2V0KFwiZW5kT2ZMaW5lXCIpICAgICAgICAgICAgZWxzZSB0cnVlXG5cbiAgICBmb250U2l6ZSAgID0gaWYgQG1vZGVsLmhhcyhcImZvbnRTaXplXCIpICAgdGhlbiBAbW9kZWwuZ2V0KFwiZm9udFNpemVcIikgICBlbHNlIFwibWVkaXVtXCJcbiAgICBsYXlvdXRNb2RlID0gaWYgQG1vZGVsLmhhcyhcImxheW91dE1vZGVcIikgdGhlbiBAbW9kZWwuZ2V0KFwibGF5b3V0TW9kZVwiKSBlbHNlIFwiZml4ZWRcIlxuXG5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsIGZvcj0nc3VidGVzdF92YXJpYWJsZV9uYW1lJyB0aXRsZT0nVGhpcyB3aWxsIGJlIHVzZWQgZm9yIENTViBleHBvcnRpbmcuJz5WYXJpYWJsZSBuYW1lPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IGlkPSdzdWJ0ZXN0X3ZhcmlhYmxlX25hbWUnIHZhbHVlPScje3ZhcmlhYmxlTmFtZX0nPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxsYWJlbCBmb3I9J3N1YnRlc3RfaXRlbXMnIHRpdGxlPSdUaGVzZSBpdGVtcyBhcmUgc3BhY2UgZGVsaW1pdGVkLiBQYXN0aW5nIHRleHQgZnJvbSBvdGhlciBhcHBsaWNhdGlvbnMgbWF5IGluc2VydCB0YWJzIGFuZCBuZXcgbGluZXMuIFdoaXRlc3BhY2Ugd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGNvcnJlY3RlZC4nPkdyaWQgSXRlbXM8L2xhYmVsPlxuICAgICAgICA8dGV4dGFyZWEgaWQ9J3N1YnRlc3RfaXRlbXMnPiN7aXRlbXN9PC90ZXh0YXJlYT5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG5cbiAgICAgICAgPGxhYmVsPlJhbmRvbWl6ZSBpdGVtczwvbGFiZWw+PGJyPlxuICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgPGRpdiBpZD0ncmFuZG9taXplJyBjbGFzcz0nYnV0dG9uc2V0Jz5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J3JhbmRvbWl6ZV90cnVlJz5ZZXM8L2xhYmVsPjxpbnB1dCBuYW1lPSdyYW5kb21pemUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZScgaWQ9J3JhbmRvbWl6ZV90cnVlJyAjeydjaGVja2VkJyBpZiByYW5kb21pemV9PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj0ncmFuZG9taXplX2ZhbHNlJz5ObzwvbGFiZWw+PGlucHV0IG5hbWU9J3JhbmRvbWl6ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZScgaWQ9J3JhbmRvbWl6ZV9mYWxzZScgI3snY2hlY2tlZCcgaWYgbm90IHJhbmRvbWl6ZX0+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxicj5cbiAgICAgICAgPGxhYmVsPkxheW91dCBtb2RlPC9sYWJlbD48YnI+XG4gICAgICAgIDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cbiAgICAgICAgICA8ZGl2IGlkPSdsYXlvdXRfbW9kZScgY2xhc3M9J2J1dHRvbnNldCc+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdsYXlvdXRfbW9kZV9maXhlZCc+Rml4ZWQ8aW1nPjwvbGFiZWw+PGlucHV0IG5hbWU9J2xheW91dF9tb2RlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZpeGVkJyBpZD0nbGF5b3V0X21vZGVfZml4ZWQnICN7aWYgbGF5b3V0TW9kZSA9PSBcImZpeGVkXCIgdGhlbiBcImNoZWNrZWRcIiBlbHNlIFwiXCJ9PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj0nbGF5b3V0X21vZGVfdmFyaWFibGUnPlZhcmlhYmxlPGltZz48L2xhYmVsPjxpbnB1dCBuYW1lPSdsYXlvdXRfbW9kZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd2YXJpYWJsZScgaWQ9J2xheW91dF9tb2RlX3ZhcmlhYmxlJyAje2lmIGxheW91dE1vZGUgPT0gXCJ2YXJpYWJsZVwiIHRoZW4gXCJjaGVja2VkXCIgZWxzZSBcIlwifT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGJyPlxuICAgICAgICA8bGFiZWw+R3JpZCBmb250IHNpemU8L2xhYmVsPjxicj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgIDxkaXYgaWQ9J2ZvbnRfc2l6ZScgY2xhc3M9J2J1dHRvbnNldCc+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdmb250X3NpemVfbWVkaXVtJz5NZWRpdW08L2xhYmVsPjxpbnB1dCBuYW1lPSdmb250X3NpemUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nbWVkaXVtJyBpZD0nZm9udF9zaXplX21lZGl1bScgI3tpZiBmb250U2l6ZSA9PSBcIm1lZGl1bVwiIHRoZW4gJ2NoZWNrZWQnIGVsc2UgJyd9PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj0nZm9udF9zaXplX3NtYWxsJz5TbWFsbDwvbGFiZWw+PGlucHV0IG5hbWU9J2ZvbnRfc2l6ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdzbWFsbCcgaWQ9J2ZvbnRfc2l6ZV9zbWFsbCcgI3tpZiBmb250U2l6ZSA9PSBcInNtYWxsXCIgdGhlbiAnY2hlY2tlZCcgZWxzZSAnJ30+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxicj5cblxuICAgICAgICA8bGFiZWw+Q2FwdHVyZSBpdGVtIGF0IHNwZWNpZmllZCBudW1iZXIgb2Ygc2Vjb25kczwvbGFiZWw+PGJyPlxuICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgPGRpdiBpZD0nY2FwdHVyZV9pdGVtX2F0X3RpbWUnIGNsYXNzPSdidXR0b25zZXQnPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj0nY2FwdHVyZV9pdGVtX2F0X3RpbWVfdHJ1ZSc+WWVzPC9sYWJlbD48aW5wdXQgbmFtZT0nY2FwdHVyZV9pdGVtX2F0X3RpbWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZScgaWQ9J2NhcHR1cmVfaXRlbV9hdF90aW1lX3RydWUnICN7J2NoZWNrZWQnIGlmIGNhcHR1cmVJdGVtQXRUaW1lfT5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J2NhcHR1cmVfaXRlbV9hdF90aW1lX2ZhbHNlJz5ObzwvbGFiZWw+PGlucHV0IG5hbWU9J2NhcHR1cmVfaXRlbV9hdF90aW1lJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0nY2FwdHVyZV9pdGVtX2F0X3RpbWVfZmFsc2UnICN7J2NoZWNrZWQnIGlmIG5vdCBjYXB0dXJlSXRlbUF0VGltZX0+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj0nY2FwdHVyZV9hZnRlcl9zZWNvbmRzJyB0aXRsZT0nQWZ0ZXIgdGhpcyBudW1iZXIgb2Ygc2Vjb25kcyBoYXMgcGFzc2VkIHRoZSBlbnVtZXJhdG9yIHdpbGwgYmUgaW5zdHJ1Y3RlZCB0byBtYXJrIHRoZSBpdGVtIGN1cnJlbnRseSBiZWluZyBhdHRlbXB0ZWQsIGFuZCB0aGVuIHJlc3VtZS4nPlNlY29uZHM8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IGlkPSdjYXB0dXJlX2FmdGVyX3NlY29uZHMnIHZhbHVlPScje2NhcHR1cmVBZnRlclNlY29uZHN9JyB0eXBlPSdudW1iZXInPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8YnI+XG5cbiAgICAgICAgPGxhYmVsPkNhcHR1cmUgbGFzdCBpdGVtIGF0dGVtcHRlZDwvbGFiZWw+PGJyPlxuICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgPGRpdiBpZD0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZCcgY2xhc3M9J2J1dHRvbnNldCc+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdjYXB0dXJlX2xhc3RfYXR0ZW1wdGVkX3RydWUnPlllczwvbGFiZWw+PGlucHV0IG5hbWU9J2NhcHR1cmVfbGFzdF9hdHRlbXB0ZWQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZScgaWQ9J2NhcHR1cmVfbGFzdF9hdHRlbXB0ZWRfdHJ1ZScgI3snY2hlY2tlZCcgaWYgY2FwdHVyZUxhc3RBdHRlbXB0ZWR9PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZF9mYWxzZSc+Tm88L2xhYmVsPjxpbnB1dCBuYW1lPSdjYXB0dXJlX2xhc3RfYXR0ZW1wdGVkJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZF9mYWxzZScgI3snY2hlY2tlZCcgaWYgbm90IGNhcHR1cmVMYXN0QXR0ZW1wdGVkfT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGJyPlxuXG4gICAgICAgIDxsYWJlbD5NYXJrIGVudGlyZSBsaW5lIGJ1dHRvbjwvbGFiZWw+PGJyPlxuICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgPGRpdiBpZD0nZW5kX29mX2xpbmUnIGNsYXNzPSdidXR0b25zZXQnPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj0nZW5kX29mX2xpbmVfdHJ1ZSc+WWVzPC9sYWJlbD48aW5wdXQgbmFtZT0nZW5kX29mX2xpbmUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZScgaWQ9J2VuZF9vZl9saW5lX3RydWUnICN7J2NoZWNrZWQnIGlmIGVuZE9mTGluZX0+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdlbmRfb2ZfbGluZV9mYWxzZSc+Tm88L2xhYmVsPjxpbnB1dCBuYW1lPSdlbmRfb2ZfbGluZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZScgaWQ9J2VuZF9vZl9saW5lX2ZhbHNlJyAjeydjaGVja2VkJyBpZiBub3QgZW5kT2ZMaW5lfT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cblxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsIGZvcj0nc3VidGVzdF9jb2x1bW5zJyB0aXRsZT0nTnVtYmVyIG9mIGNvbHVtbnMgaW4gd2hpY2ggdG8gZGlzcGxheSB0aGUgZ3JpZCBpdGVtcy4nPkNvbHVtbnM8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgaWQ9J3N1YnRlc3RfY29sdW1ucycgdmFsdWU9JyN7Y29sdW1uc30nIHR5cGU9J251bWJlcic+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsIGZvcj0nc3VidGVzdF9hdXRvc3RvcCcgdGl0bGU9J051bWJlciBvZiBpbmNvcnJlY3QgaXRlbXMgaW4gYSByb3cgZnJvbSB0aGUgYmVnaW5uaW5nLCBhZnRlciB3aGljaCwgdGhlIHRlc3QgYXV0b21hdGljYWxseSBzdG9wcy4gSWYgdGhlIGl0ZW0gdGhhdCB0cmlnZ2VyZWQgdGhlIGF1dG9zdG9wIHdhcyBhbiBlbnVtZXJhdG9yIGVycm9yLCB0aGUgZW51bWVyYXRvciBoYXMgMyBzZWNvbmRzIHRvIHVuZG8gYW55IGluY29ycmVjdCBpdGVtIGFuZCByZXN1bWUgdGhlIHRlc3QuIE90aGVyd2lzZSwgdGhlIHRlc3QgaXMgc3RvcHBlZCBidXQgbWF5IHN0aWxsIGJlIHJlc2V0IGNvbXBsZXRlbHkuJz5BdXRvc3RvcDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCBpZD0nc3VidGVzdF9hdXRvc3RvcCcgdmFsdWU9JyN7YXV0b3N0b3B9JyB0eXBlPSdudW1iZXInPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxsYWJlbCBmb3I9J3N1YnRlc3RfdGltZXInIHRpdGxlPSdTZWNvbmRzIHRvIGdpdmUgdGhlIGNoaWxkIHRvIGNvbXBsZXRlIHRoZSB0ZXN0LiBTZXR0aW5nIHRoaXMgdmFsdWUgdG8gMCB3aWxsIG1ha2UgdGhlIHRlc3QgdW50aW1lZC4nPlRpbWVyPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IGlkPSdzdWJ0ZXN0X3RpbWVyJyB2YWx1ZT0nI3t0aW1lcn0nIHR5cGU9J251bWJlcic+XG4gICAgICA8L2Rpdj5cIlxuXG4iLCJ2YXIgR3JpZEVkaXRWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuR3JpZEVkaXRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEdyaWRFZGl0Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gR3JpZEVkaXRWaWV3KCkge1xuICAgIHJldHVybiBHcmlkRWRpdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBHcmlkRWRpdFZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiR3JpZEVkaXRWaWV3XCI7XG5cbiAgR3JpZEVkaXRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2JsdXIgI3N1YnRlc3RfaXRlbXMnOiAnY2xlYW5XaGl0ZXNwYWNlJ1xuICB9O1xuXG4gIEdyaWRFZGl0Vmlldy5wcm90b3R5cGUuY2xlYW5XaGl0ZXNwYWNlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjc3VidGVzdF9pdGVtc1wiKS52YWwodGhpcy4kZWwuZmluZChcIiNzdWJ0ZXN0X2l0ZW1zXCIpLnZhbCgpLnJlcGxhY2UoL1xccysvZywgJyAnKSk7XG4gIH07XG5cbiAgR3JpZEVkaXRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgfTtcblxuICBHcmlkRWRpdFZpZXcucHJvdG90eXBlLmlzVmFsaWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBHcmlkRWRpdFZpZXcucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoL1xcdHwsLy50ZXN0KHRoaXMuJGVsLmZpbmQoXCIjc3VidGVzdF9pdGVtc1wiKS52YWwoKSkpIHtcbiAgICAgIGFsZXJ0KFwiUGxlYXNlIHJlbWVtYmVyXFxuXFxuR3JpZCBpdGVtcyBhcmUgc3BhY2UgXFxcIiBcXFwiIGRlbGltaXRlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubW9kZWwuc2V0KHtcbiAgICAgIGNhcHR1cmVMYXN0QXR0ZW1wdGVkOiB0aGlzLiRlbC5maW5kKFwiI2NhcHR1cmVfbGFzdF9hdHRlbXB0ZWQgaW5wdXQ6Y2hlY2tlZFwiKS52YWwoKSA9PT0gXCJ0cnVlXCIsXG4gICAgICBlbmRPZkxpbmU6IHRoaXMuJGVsLmZpbmQoXCIjZW5kX29mX2xpbmUgaW5wdXQ6Y2hlY2tlZFwiKS52YWwoKSA9PT0gXCJ0cnVlXCIsXG4gICAgICBjYXB0dXJlSXRlbUF0VGltZTogdGhpcy4kZWwuZmluZChcIiNjYXB0dXJlX2l0ZW1fYXRfdGltZSBpbnB1dDpjaGVja2VkXCIpLnZhbCgpID09PSBcInRydWVcIixcbiAgICAgIGNhcHR1cmVBZnRlclNlY29uZHM6IHBhcnNlSW50KHRoaXMuJGVsLmZpbmQoXCIjY2FwdHVyZV9hZnRlcl9zZWNvbmRzXCIpLnZhbCgpKSxcbiAgICAgIGZvbnRTaXplOiB0aGlzLiRlbC5maW5kKFwiI2ZvbnRfc2l6ZSBpbnB1dDpjaGVja2VkXCIpLnZhbCgpLFxuICAgICAgbGF5b3V0TW9kZTogdGhpcy4kZWwuZmluZChcIiNsYXlvdXRfbW9kZSBpbnB1dDpjaGVja2VkXCIpLnZhbCgpLFxuICAgICAgcmFuZG9taXplOiB0aGlzLiRlbC5maW5kKFwiI3JhbmRvbWl6ZSBpbnB1dDpjaGVja2VkXCIpLnZhbCgpID09PSBcInRydWVcIixcbiAgICAgIHRpbWVyOiBwYXJzZUludCh0aGlzLiRlbC5maW5kKFwiI3N1YnRlc3RfdGltZXJcIikudmFsKCkpLFxuICAgICAgaXRlbXM6IF8uY29tcGFjdCh0aGlzLiRlbC5maW5kKFwiI3N1YnRlc3RfaXRlbXNcIikudmFsKCkuc3BsaXQoXCIgXCIpKSxcbiAgICAgIGNvbHVtbnM6IHBhcnNlSW50KHRoaXMuJGVsLmZpbmQoXCIjc3VidGVzdF9jb2x1bW5zXCIpLnZhbCgpKSxcbiAgICAgIGF1dG9zdG9wOiBwYXJzZUludCh0aGlzLiRlbC5maW5kKFwiI3N1YnRlc3RfYXV0b3N0b3BcIikudmFsKCkpLFxuICAgICAgdmFyaWFibGVOYW1lOiB0aGlzLiRlbC5maW5kKFwiI3N1YnRlc3RfdmFyaWFibGVfbmFtZVwiKS52YWwoKS5yZXBsYWNlKC9cXHMvZywgXCJfXCIpLnJlcGxhY2UoL1teYS16QS1aMC05X10vZywgXCJcIilcbiAgICB9KTtcbiAgfTtcblxuICBHcmlkRWRpdFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhdXRvc3RvcCwgY2FwdHVyZUFmdGVyU2Vjb25kcywgY2FwdHVyZUl0ZW1BdFRpbWUsIGNhcHR1cmVMYXN0QXR0ZW1wdGVkLCBjb2x1bW5zLCBlbmRPZkxpbmUsIGZvbnRTaXplLCBpdGVtcywgbGF5b3V0TW9kZSwgcmFuZG9taXplLCB0aW1lciwgdmFyaWFibGVOYW1lO1xuICAgIGl0ZW1zID0gdGhpcy5tb2RlbC5nZXQoXCJpdGVtc1wiKS5qb2luKFwiIFwiKTtcbiAgICB0aW1lciA9IHRoaXMubW9kZWwuZ2V0KFwidGltZXJcIikgfHwgMDtcbiAgICBjb2x1bW5zID0gdGhpcy5tb2RlbC5nZXQoXCJjb2x1bW5zXCIpIHx8IDA7XG4gICAgYXV0b3N0b3AgPSB0aGlzLm1vZGVsLmdldChcImF1dG9zdG9wXCIpIHx8IDA7XG4gICAgdmFyaWFibGVOYW1lID0gdGhpcy5tb2RlbC5nZXQoXCJ2YXJpYWJsZU5hbWVcIikgfHwgXCJcIjtcbiAgICByYW5kb21pemUgPSB0aGlzLm1vZGVsLmhhcyhcInJhbmRvbWl6ZVwiKSA/IHRoaXMubW9kZWwuZ2V0KFwicmFuZG9taXplXCIpIDogZmFsc2U7XG4gICAgY2FwdHVyZUl0ZW1BdFRpbWUgPSB0aGlzLm1vZGVsLmhhcyhcImNhcHR1cmVJdGVtQXRUaW1lXCIpID8gdGhpcy5tb2RlbC5nZXQoXCJjYXB0dXJlSXRlbUF0VGltZVwiKSA6IGZhbHNlO1xuICAgIGNhcHR1cmVBZnRlclNlY29uZHMgPSB0aGlzLm1vZGVsLmhhcyhcImNhcHR1cmVBZnRlclNlY29uZHNcIikgPyB0aGlzLm1vZGVsLmdldChcImNhcHR1cmVBZnRlclNlY29uZHNcIikgOiAwO1xuICAgIGNhcHR1cmVMYXN0QXR0ZW1wdGVkID0gdGhpcy5tb2RlbC5oYXMoXCJjYXB0dXJlTGFzdEF0dGVtcHRlZFwiKSA/IHRoaXMubW9kZWwuZ2V0KFwiY2FwdHVyZUxhc3RBdHRlbXB0ZWRcIikgOiB0cnVlO1xuICAgIGVuZE9mTGluZSA9IHRoaXMubW9kZWwuaGFzKFwiZW5kT2ZMaW5lXCIpID8gdGhpcy5tb2RlbC5nZXQoXCJlbmRPZkxpbmVcIikgOiB0cnVlO1xuICAgIGZvbnRTaXplID0gdGhpcy5tb2RlbC5oYXMoXCJmb250U2l6ZVwiKSA/IHRoaXMubW9kZWwuZ2V0KFwiZm9udFNpemVcIikgOiBcIm1lZGl1bVwiO1xuICAgIGxheW91dE1vZGUgPSB0aGlzLm1vZGVsLmhhcyhcImxheW91dE1vZGVcIikgPyB0aGlzLm1vZGVsLmdldChcImxheW91dE1vZGVcIikgOiBcImZpeGVkXCI7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwoXCI8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3N1YnRlc3RfdmFyaWFibGVfbmFtZScgdGl0bGU9J1RoaXMgd2lsbCBiZSB1c2VkIGZvciBDU1YgZXhwb3J0aW5nLic+VmFyaWFibGUgbmFtZTwvbGFiZWw+IDxpbnB1dCBpZD0nc3VidGVzdF92YXJpYWJsZV9uYW1lJyB2YWx1ZT0nXCIgKyB2YXJpYWJsZU5hbWUgKyBcIic+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3N1YnRlc3RfaXRlbXMnIHRpdGxlPSdUaGVzZSBpdGVtcyBhcmUgc3BhY2UgZGVsaW1pdGVkLiBQYXN0aW5nIHRleHQgZnJvbSBvdGhlciBhcHBsaWNhdGlvbnMgbWF5IGluc2VydCB0YWJzIGFuZCBuZXcgbGluZXMuIFdoaXRlc3BhY2Ugd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGNvcnJlY3RlZC4nPkdyaWQgSXRlbXM8L2xhYmVsPiA8dGV4dGFyZWEgaWQ9J3N1YnRlc3RfaXRlbXMnPlwiICsgaXRlbXMgKyBcIjwvdGV4dGFyZWE+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbD5SYW5kb21pemUgaXRlbXM8L2xhYmVsPjxicj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8ZGl2IGlkPSdyYW5kb21pemUnIGNsYXNzPSdidXR0b25zZXQnPiA8bGFiZWwgZm9yPSdyYW5kb21pemVfdHJ1ZSc+WWVzPC9sYWJlbD48aW5wdXQgbmFtZT0ncmFuZG9taXplJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnIGlkPSdyYW5kb21pemVfdHJ1ZScgXCIgKyAocmFuZG9taXplID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8bGFiZWwgZm9yPSdyYW5kb21pemVfZmFsc2UnPk5vPC9sYWJlbD48aW5wdXQgbmFtZT0ncmFuZG9taXplJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0ncmFuZG9taXplX2ZhbHNlJyBcIiArICghcmFuZG9taXplID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8L2Rpdj4gPC9kaXY+IDxicj4gPGxhYmVsPkxheW91dCBtb2RlPC9sYWJlbD48YnI+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gPGRpdiBpZD0nbGF5b3V0X21vZGUnIGNsYXNzPSdidXR0b25zZXQnPiA8bGFiZWwgZm9yPSdsYXlvdXRfbW9kZV9maXhlZCc+Rml4ZWQ8aW1nPjwvbGFiZWw+PGlucHV0IG5hbWU9J2xheW91dF9tb2RlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZpeGVkJyBpZD0nbGF5b3V0X21vZGVfZml4ZWQnIFwiICsgKGxheW91dE1vZGUgPT09IFwiZml4ZWRcIiA/IFwiY2hlY2tlZFwiIDogXCJcIikgKyBcIj4gPGxhYmVsIGZvcj0nbGF5b3V0X21vZGVfdmFyaWFibGUnPlZhcmlhYmxlPGltZz48L2xhYmVsPjxpbnB1dCBuYW1lPSdsYXlvdXRfbW9kZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd2YXJpYWJsZScgaWQ9J2xheW91dF9tb2RlX3ZhcmlhYmxlJyBcIiArIChsYXlvdXRNb2RlID09PSBcInZhcmlhYmxlXCIgPyBcImNoZWNrZWRcIiA6IFwiXCIpICsgXCI+IDwvZGl2PiA8L2Rpdj4gPGJyPiA8bGFiZWw+R3JpZCBmb250IHNpemU8L2xhYmVsPjxicj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8ZGl2IGlkPSdmb250X3NpemUnIGNsYXNzPSdidXR0b25zZXQnPiA8bGFiZWwgZm9yPSdmb250X3NpemVfbWVkaXVtJz5NZWRpdW08L2xhYmVsPjxpbnB1dCBuYW1lPSdmb250X3NpemUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nbWVkaXVtJyBpZD0nZm9udF9zaXplX21lZGl1bScgXCIgKyAoZm9udFNpemUgPT09IFwibWVkaXVtXCIgPyAnY2hlY2tlZCcgOiAnJykgKyBcIj4gPGxhYmVsIGZvcj0nZm9udF9zaXplX3NtYWxsJz5TbWFsbDwvbGFiZWw+PGlucHV0IG5hbWU9J2ZvbnRfc2l6ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdzbWFsbCcgaWQ9J2ZvbnRfc2l6ZV9zbWFsbCcgXCIgKyAoZm9udFNpemUgPT09IFwic21hbGxcIiA/ICdjaGVja2VkJyA6ICcnKSArIFwiPiA8L2Rpdj4gPC9kaXY+IDxicj4gPGxhYmVsPkNhcHR1cmUgaXRlbSBhdCBzcGVjaWZpZWQgbnVtYmVyIG9mIHNlY29uZHM8L2xhYmVsPjxicj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8ZGl2IGlkPSdjYXB0dXJlX2l0ZW1fYXRfdGltZScgY2xhc3M9J2J1dHRvbnNldCc+IDxsYWJlbCBmb3I9J2NhcHR1cmVfaXRlbV9hdF90aW1lX3RydWUnPlllczwvbGFiZWw+PGlucHV0IG5hbWU9J2NhcHR1cmVfaXRlbV9hdF90aW1lJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnIGlkPSdjYXB0dXJlX2l0ZW1fYXRfdGltZV90cnVlJyBcIiArIChjYXB0dXJlSXRlbUF0VGltZSA/ICdjaGVja2VkJyA6IHZvaWQgMCkgKyBcIj4gPGxhYmVsIGZvcj0nY2FwdHVyZV9pdGVtX2F0X3RpbWVfZmFsc2UnPk5vPC9sYWJlbD48aW5wdXQgbmFtZT0nY2FwdHVyZV9pdGVtX2F0X3RpbWUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnIGlkPSdjYXB0dXJlX2l0ZW1fYXRfdGltZV9mYWxzZScgXCIgKyAoIWNhcHR1cmVJdGVtQXRUaW1lID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdjYXB0dXJlX2FmdGVyX3NlY29uZHMnIHRpdGxlPSdBZnRlciB0aGlzIG51bWJlciBvZiBzZWNvbmRzIGhhcyBwYXNzZWQgdGhlIGVudW1lcmF0b3Igd2lsbCBiZSBpbnN0cnVjdGVkIHRvIG1hcmsgdGhlIGl0ZW0gY3VycmVudGx5IGJlaW5nIGF0dGVtcHRlZCwgYW5kIHRoZW4gcmVzdW1lLic+U2Vjb25kczwvbGFiZWw+IDxpbnB1dCBpZD0nY2FwdHVyZV9hZnRlcl9zZWNvbmRzJyB2YWx1ZT0nXCIgKyBjYXB0dXJlQWZ0ZXJTZWNvbmRzICsgXCInIHR5cGU9J251bWJlcic+IDwvZGl2PiA8L2Rpdj4gPGJyPiA8bGFiZWw+Q2FwdHVyZSBsYXN0IGl0ZW0gYXR0ZW1wdGVkPC9sYWJlbD48YnI+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gPGRpdiBpZD0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZCcgY2xhc3M9J2J1dHRvbnNldCc+IDxsYWJlbCBmb3I9J2NhcHR1cmVfbGFzdF9hdHRlbXB0ZWRfdHJ1ZSc+WWVzPC9sYWJlbD48aW5wdXQgbmFtZT0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJyBpZD0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZF90cnVlJyBcIiArIChjYXB0dXJlTGFzdEF0dGVtcHRlZCA/ICdjaGVja2VkJyA6IHZvaWQgMCkgKyBcIj4gPGxhYmVsIGZvcj0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZF9mYWxzZSc+Tm88L2xhYmVsPjxpbnB1dCBuYW1lPSdjYXB0dXJlX2xhc3RfYXR0ZW1wdGVkJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZF9mYWxzZScgXCIgKyAoIWNhcHR1cmVMYXN0QXR0ZW1wdGVkID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8L2Rpdj4gPC9kaXY+IDxicj4gPGxhYmVsPk1hcmsgZW50aXJlIGxpbmUgYnV0dG9uPC9sYWJlbD48YnI+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gPGRpdiBpZD0nZW5kX29mX2xpbmUnIGNsYXNzPSdidXR0b25zZXQnPiA8bGFiZWwgZm9yPSdlbmRfb2ZfbGluZV90cnVlJz5ZZXM8L2xhYmVsPjxpbnB1dCBuYW1lPSdlbmRfb2ZfbGluZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJyBpZD0nZW5kX29mX2xpbmVfdHJ1ZScgXCIgKyAoZW5kT2ZMaW5lID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8bGFiZWwgZm9yPSdlbmRfb2ZfbGluZV9mYWxzZSc+Tm88L2xhYmVsPjxpbnB1dCBuYW1lPSdlbmRfb2ZfbGluZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZScgaWQ9J2VuZF9vZl9saW5lX2ZhbHNlJyBcIiArICghZW5kT2ZMaW5lID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3N1YnRlc3RfY29sdW1ucycgdGl0bGU9J051bWJlciBvZiBjb2x1bW5zIGluIHdoaWNoIHRvIGRpc3BsYXkgdGhlIGdyaWQgaXRlbXMuJz5Db2x1bW5zPC9sYWJlbD4gPGlucHV0IGlkPSdzdWJ0ZXN0X2NvbHVtbnMnIHZhbHVlPSdcIiArIGNvbHVtbnMgKyBcIicgdHlwZT0nbnVtYmVyJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nc3VidGVzdF9hdXRvc3RvcCcgdGl0bGU9J051bWJlciBvZiBpbmNvcnJlY3QgaXRlbXMgaW4gYSByb3cgZnJvbSB0aGUgYmVnaW5uaW5nLCBhZnRlciB3aGljaCwgdGhlIHRlc3QgYXV0b21hdGljYWxseSBzdG9wcy4gSWYgdGhlIGl0ZW0gdGhhdCB0cmlnZ2VyZWQgdGhlIGF1dG9zdG9wIHdhcyBhbiBlbnVtZXJhdG9yIGVycm9yLCB0aGUgZW51bWVyYXRvciBoYXMgMyBzZWNvbmRzIHRvIHVuZG8gYW55IGluY29ycmVjdCBpdGVtIGFuZCByZXN1bWUgdGhlIHRlc3QuIE90aGVyd2lzZSwgdGhlIHRlc3QgaXMgc3RvcHBlZCBidXQgbWF5IHN0aWxsIGJlIHJlc2V0IGNvbXBsZXRlbHkuJz5BdXRvc3RvcDwvbGFiZWw+IDxpbnB1dCBpZD0nc3VidGVzdF9hdXRvc3RvcCcgdmFsdWU9J1wiICsgYXV0b3N0b3AgKyBcIicgdHlwZT0nbnVtYmVyJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nc3VidGVzdF90aW1lcicgdGl0bGU9J1NlY29uZHMgdG8gZ2l2ZSB0aGUgY2hpbGQgdG8gY29tcGxldGUgdGhlIHRlc3QuIFNldHRpbmcgdGhpcyB2YWx1ZSB0byAwIHdpbGwgbWFrZSB0aGUgdGVzdCB1bnRpbWVkLic+VGltZXI8L2xhYmVsPiA8aW5wdXQgaWQ9J3N1YnRlc3RfdGltZXInIHZhbHVlPSdcIiArIHRpbWVyICsgXCInIHR5cGU9J251bWJlcic+IDwvZGl2PlwiKTtcbiAgfTtcblxuICByZXR1cm4gR3JpZEVkaXRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgT2JzZXJ2YXRpb25SdW5WaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZTogXCJPYnNlcnZhdGlvblJ1blZpZXdcIlxuXG4gIGV2ZW50czpcbiAgICBcImNsaWNrIC5zdGFydF90aW1lXCIgOiBcInN0YXJ0T2JzZXJ2YXRpb25zXCJcbiAgICBcImNsaWNrIC5zdG9wX3RpbWVcIiAgOiBcInN0b3BPYnNlcnZhdGlvbnNcIlxuICAgIFwiY2xpY2sgLmRvbmVcIiA6IFwiY29tcGxldGVPYnNlcnZhdGlvblwiXG5cbiAgQEZPUkNFID0gMVxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuXG4gICAgQG1vZGVsICA9IG9wdGlvbnMubW9kZWxcbiAgICBAcGFyZW50ID0gb3B0aW9ucy5wYXJlbnRcblxuICAgIEB3YXJuaW5nU2Vjb25kcyA9IDVcblxuICAgIEBpbml0aWFsaXplRmxhZ3MoKVxuICAgIEBpbml0aWFsaXplU3VydmV5KClcblxuXG4gIGluaXRpYWxpemVTdXJ2ZXk6IC0+XG4gICAgQG9uQ2xvc2UoKSBpZiBAc3VydmV5PyAjIGlmIHdlJ3JlIFJFaW5pdGlhbGl6aW5nIGNsb3NlIHRoZSBvbGQgdmlld3MgZmlyc3RcbiAgICBcbiAgICBhdHRyaWJ1dGVzID0gJC5leHRlbmQoQG1vZGVsLmdldCgnc3VydmV5QXR0cmlidXRlcycpLCB7IFwiX2lkXCIgOiBAbW9kZWwuaWQgfSlcblxuICAgICMgMS1pbmRleGVkIGFycmF5LCBjb252ZW5pZW50IGJlY2F1c2UgdGhlIDB0aCBvYnNlcnZhdGlvbiBkb2Vzbid0IHRha2UgcGxhY2UsIGJ1dCB0aGUgbnRoIGRvZXMuXG4gICAgIyBtYWtlcyBhbiBhcnJheSBvZiBpZGVudGljYWwgbW9kZWxzIGJhc2VkIG9uIHRoZSBhYm92ZSBhdHRyaWJ1dGVzXG4gICAgbW9kZWxzID0gKG5ldyBCYWNrYm9uZS5Nb2RlbCBhdHRyaWJ1dGVzIGZvciBpIGluIFsxLi5wYXJzZUludChAbW9kZWwuZ2V0KCd0b3RhbFNlY29uZHMnKS9AbW9kZWwuZ2V0KCdpbnRlcnZhbExlbmd0aCcpKV0pXG4gICAgbW9kZWxzLnVuc2hpZnQoXCJcIilcbiAgICBcbiAgICBAc2tpcHBhYmxlVmlldyA9IG5ldyBTdXJ2ZXlSdW5WaWV3XG4gICAgICBcIm1vZGVsXCIgICAgICAgICA6IG1vZGVsc1sxXVxuICAgICAgXCJwYXJlbnRcIiAgICAgICAgOiBAXG4gICAgICBcImlzT2JzZXJ2YXRpb25cIiA6IHRydWVcblxuICAgIFxuICAgIEBzdXJ2ZXkgPVxuICAgICAgXCJtb2RlbHNcIiAgICA6IG1vZGVsc1xuICAgICAgXCJyZXN1bHRzXCIgICA6IFtdXG5cbiAgaW5pdGlhbGl6ZUZsYWdzOiAtPlxuICAgIEBpQW0gPVxuICAgICAgXCJjb3VudGluZ1wiIDogZmFsc2VcbiAgICAgIFwicmVjb3JkaW5nXCIgOiBmYWxzZVxuICAgIEBpSGF2ZW50ID1cbiAgICAgIFwid2FybmVkXCIgOiB0cnVlXG4gICAgQGlIYXZlID1cbiAgICAgIFwicnVuT25jZVwiIDogZmFsc2VcbiAgICAgIFwiZmluaXNoZWRcIiA6IGZhbHNlXG4gICAgQG15ID1cbiAgICAgIFwidGltZVwiIDpcbiAgICAgICAgXCJzdGFydFwiICAgOiAwXG4gICAgICAgIFwiZWxhcHNlZFwiIDogMFxuICAgICAgXCJvYnNlcnZhdGlvblwiIDpcbiAgICAgICAgXCJpbmRleFwiICAgICA6IDBcbiAgICAgICAgXCJvbGRJbmRleFwiICA6IDBcbiAgICAgICAgXCJjb21wbGV0ZWRcIiA6IDBcbiAgICAgICAgXCJ0b3RhbFwiICAgICA6IHBhcnNlSW50KCBAbW9kZWwuZ2V0KCd0b3RhbFNlY29uZHMnKSAvIEBtb2RlbC5nZXQoJ2ludGVydmFsTGVuZ3RoJykgKVxuXG5cbiAgc3RhcnRPYnNlcnZhdGlvbnM6IC0+XG4gICAgIyBkb24ndCByZXNwb25kIGZvciB0aGVzZSByZWFzb25zXG4gICAgaWYgQGlBbS5jb3VudGluZyB8fCBAaUhhdmUucnVuT25jZSB0aGVuIHJldHVyblxuXG4gICAgQCRlbC5maW5kKFwiLnN0b3BfYnV0dG9uX3dyYXBwZXIsIC5uZXh0X2Rpc3BsYXksIC5jb21wbGV0ZWRfZGlzcGxheVwiKS5yZW1vdmVDbGFzcyhcImNvbmZpcm1hdGlvblwiKVxuICAgIEAkZWwuZmluZChcIi5zdGFydF9idXR0b25fd3JhcHBlclwiKS5hZGRDbGFzcyhcImNvbmZpcm1hdGlvblwiKVxuICAgIEB0aW1lckludGVydmFsICAgPSBzZXRJbnRlcnZhbCBAdGljaywgMTAwMFxuICAgIEBpQW0uY291bnRpbmcgICAgPSB0cnVlXG4gICAgQG15LnRpbWUuc3RhcnQgICA9IEBnZXRUaW1lKClcbiAgICBAbXkudGltZS5lbGFwc2VkID0gMFxuXG4gIHN0b3BPYnNlcnZhdGlvbnM6IChlKSAtPlxuICAgIGNsZWFySW50ZXJ2YWwgQHRpbWVySW50ZXJ2YWxcbiAgICBmcm9tQ2xpY2sgPSBlP1xuICAgIGlzbnRQcmVtYXR1cmVTdG9wID0gISBlP1xuICAgIGlmIGU/IFxuICAgICAgQHRyaWdnZXIgXCJzaG93TmV4dFwiXG5cbiAgICBpZiBpc250UHJlbWF0dXJlU3RvcCAmJiBub3QgQGlIYXZlLmZpbmlzaGVkXG4gICAgICBpZiBAaUFtLnJlY29yZGluZ1xuICAgICAgICBAcmVzZXRPYnNlcnZhdGlvbkZsYWdzKClcbiAgICAgICAgQHNhdmVDdXJyZW50U3VydmV5KClcbiAgICAgIEBteS5vYnNlcnZhdGlvbi5pbmRleCsrXG4gICAgICBAcmVuZGVyU3VydmV5KClcbiAgICBlbHNlXG4gICAgICBAJGVsLmZpbmQoXCIuc3RvcF9idXR0b25fd3JhcHBlclwiKS5hZGRDbGFzcyhcImNvbmZpcm1hdGlvblwiKVxuICAgICAgVXRpbHMubWlkQWxlcnQgdChcIm9ic2VydmF0aW9ucyBmaW5pc2hlZFwiKVxuICAgIEAkZWwuZmluZChcIi5uZXh0X2Rpc3BsYXlcIikuYWRkQ2xhc3MoXCJjb25maXJtYXRpb25cIilcbiAgICBAaUhhdmUuZmluaXNoZWQgPSB0cnVlXG4gICAgQGlIYXZlLnJ1bk9uY2UgPSB0cnVlXG4gICAgXG5cbiAgIyBydW5zIGV2ZXJ5IHNlY29uZCB0aGUgdGltZXIgaXMgcnVubmluZ1xuICB0aWNrOiA9PlxuICAgIEBteS50aW1lLmVsYXBzZWQgPSBAZ2V0VGltZSgpIC0gQG15LnRpbWUuc3RhcnRcbiAgICBAY2hlY2tJZk92ZXIoKVxuICAgIEB1cGRhdGVPYnNlcnZhdGlvbkluZGV4KClcbiAgICBAdXBkYXRlUHJvZ3Jlc3NEaXNwbGF5KClcbiAgICBAY2hlY2tTdXJ2ZXlEaXNwbGF5KClcbiAgICBAY2hlY2tPYnNlcnZhdGlvblBhY2UoKVxuICAgIEBjaGVja1dhcm5pbmcoKVxuXG4gIGNoZWNrT2JzZXJ2YXRpb25QYWNlOiA9PlxuICAgICMgaWYgd2UncmUgc3RpbGwgZW50ZXJpbmcgb2JzZXJ2YXRpb25zIGFuZCBpdCdzIHRpbWUgZm9yIHRoZSBuZXh0IG9uZVxuICAgIGlmIEBpQW0ucmVjb3JkaW5nICYmIEBteS5vYnNlcnZhdGlvbi5jb21wbGV0ZWQgPCAoQG15Lm9ic2VydmF0aW9uLmluZGV4LTEpICYmIEBteS5vYnNlcnZhdGlvbi5pbmRleCAhPSAwICMgc3RhcnRzIGF0IDAsIHRoZW4gZ29lcyB0byAxXG4gICAgICBAaUhhdmUuZm9yY2VkUHJvZ3Jlc3Npb24gPSB0cnVlXG4gICAgICBAcmVzZXRPYnNlcnZhdGlvbkZsYWdzKClcbiAgICAgIEBzYXZlQ3VycmVudFN1cnZleSgpXG4gICAgICBAcmVuZGVyU3VydmV5KClcblxuICBjaGVja1dhcm5pbmc6ID0+XG4gICAgcHJvamVjdGVkSW5kZXggPSBNYXRoLmZsb29yKCAoQG15LnRpbWUuZWxhcHNlZCArIEB3YXJuaW5nU2Vjb25kcykgLyBAbW9kZWwuZ2V0KCdpbnRlcnZhbExlbmd0aCcpIClcbiAgICBpU2hvdWxkV2FybiA9IEBteS5vYnNlcnZhdGlvbi5pbmRleCA8IHByb2plY3RlZEluZGV4ICYmICEgQGlIYXZlLmZpbmlzaGVkXG4gICAgIyBpZiB3ZSdyZSBzdGlsbCBlbnRlcmluZyBvYnNlcnZhdGlvbnMsIHdhcm4gdGhlIHVzZXJcbiAgICBpZiBAaUFtLnJlY29yZGluZyAmJiBAaUhhdmVudC53YXJuZWQgJiYgaVNob3VsZFdhcm4gJiYgQG15Lm9ic2VydmF0aW9uLmluZGV4ICE9IDAgIyBmaXJzdCBvbmUgZG9lc24ndCBjb3VudFxuICAgICAgVXRpbHMubWlkQWxlcnQgdChcIm9ic2VydmF0aW9uIGVuZGluZyBzb29uXCIpXG4gICAgICBAaUhhdmVudC53YXJuZWQgPSBmYWxzZVxuICBcbiAgZ3JpZFdhc0F1dG9zdG9wcGVkOiAtPlxuICAgIHJldHVybiBmYWxzZVxuXG4gIGNoZWNrSWZPdmVyOiA9PlxuICAgIGlmIEBteS50aW1lLmVsYXBzZWQgPj0gQG1vZGVsLmdldChcInRvdGFsU2Vjb25kc1wiKVxuICAgICAgQHN0b3BPYnNlcnZhdGlvbnMoKVxuXG4gIGNoZWNrU3VydmV5RGlzcGxheTogPT5cbiAgICAjIGNoYW5nZSwgbmVlZHMgdG8gZGlzcGxheSBuZXcgc3VydmV5XG4gICAgaWYgQG15Lm9ic2VydmF0aW9uLm9sZEluZGV4ICE9IEBteS5vYnNlcnZhdGlvbi5pbmRleCAmJiAhQGlIYXZlLmZpbmlzaGVkICYmICFAaUFtLnJlY29yZGluZ1xuICAgICAgQHJlbmRlclN1cnZleSgpXG4gICAgICBAbXkub2JzZXJ2YXRpb24ub2xkSW5kZXggPSBAbXkub2JzZXJ2YXRpb24uaW5kZXhcblxuICB1cGRhdGVPYnNlcnZhdGlvbkluZGV4OiA9PlxuICAgIEBteS5vYnNlcnZhdGlvbi5pbmRleCA9IE1hdGguZmxvb3IoICggQG15LnRpbWUuZWxhcHNlZCApIC8gQG1vZGVsLmdldCgnaW50ZXJ2YWxMZW5ndGgnKSApXG4gICAgaWYgQG15Lm9ic2VydmF0aW9uLmluZGV4ID4gQHN1cnZleS5tb2RlbHMubGVuZ3RoIC0gMVxuICAgICAgQG15Lm9ic2VydmF0aW9uLmluZGV4ID0gQHN1cnZleS5tb2RlbHMubGVuZ3RoIC0gMVxuXG4gIHVwZGF0ZVByb2dyZXNzRGlzcGxheTogLT5cbiAgICAjIGJhY2tib25lLmpzLCB5IHUgbm8gaGF2ZSBkYXRhIGJpbmRpbmdzPyBhYnN0cmFjdCBtb3JlXG4gICAgQCRlbC5maW5kKFwiLmN1cnJlbnRfb2JzZXJ2YXRpb25cIikuaHRtbCBAbXkub2JzZXJ2YXRpb24uaW5kZXhcbiAgICBAJGVsLmZpbmQoXCIuY29tcGxldGVkX2NvdW50XCIpLmh0bWwgICAgIEBteS5vYnNlcnZhdGlvbi5jb21wbGV0ZWRcblxuICAgIHRpbWVUaWxsTmV4dCA9IE1hdGgubWF4KCgoQG15Lm9ic2VydmF0aW9uLmluZGV4ICsgMSkgKiBAbW9kZWwuZ2V0KCdpbnRlcnZhbExlbmd0aCcpKSAtIEBteS50aW1lLmVsYXBzZWQsIDApXG4gICAgQCRlbC5maW5kKFwiLnRpbWVfdGlsbF9uZXh0XCIpLmh0bWwgdGltZVRpbGxOZXh0XG5cbiAgICBpZiBub3QgQGlBbS5yZWNvcmRpbmcgJiYgbm90IEBpSGF2ZS5maW5pc2hlZFxuICAgICAgQCRlbC5maW5kKFwiLm5leHRfZGlzcGxheSwgLmNvbXBsZXRlZF9kaXNwbGF5XCIpLnJlbW92ZUNsYXNzIFwiY29uZmlybWF0aW9uXCIgXG5cbiAgcmVzZXRPYnNlcnZhdGlvbkZsYWdzOiAtPlxuICAgIEBpQW0ucmVjb3JkaW5nICA9IGZhbHNlXG4gICAgQGlIYXZlbnQud2FybmVkID0gdHJ1ZVxuXG4gIGdldFRpbWU6IC0+IHBhcnNlSW50KCAoIG5ldyBEYXRlKCkgKS5nZXRUaW1lKCkgLyAxMDAwIClcblxuICBjb21wbGV0ZU9ic2VydmF0aW9uOiAob3B0aW9uKSAtPlxuXG4gICAgaWYgQHN1cnZleS52aWV3LmlzVmFsaWQoKVxuICAgICAgQHNhdmVDdXJyZW50U3VydmV5KClcbiAgICAgIEB0cmlnZ2VyIFwic2hvd05leHRcIiBpZiBAaUhhdmUuZmluaXNoZWRcbiAgICBlbHNlXG4gICAgICBAc3VydmV5LnZpZXcuc2hvd0Vycm9ycygpXG5cbiAgICBAdGljaygpICMgdXBkYXRlIGRpc3BsYXlzXG5cblxuXG5cbiAgc2F2ZUN1cnJlbnRTdXJ2ZXk6ID0+XG4gICAgQHJlc2V0T2JzZXJ2YXRpb25GbGFncygpXG4gICAgQG15Lm9ic2VydmF0aW9uLmNvbXBsZXRlZCsrXG4gICAgQHN1cnZleS5yZXN1bHRzLnB1c2hcbiAgICAgIG9ic2VydmF0aW9uTnVtYmVyIDogQHN1cnZleS52aWV3LmluZGV4ICMgdmlldydzIGluZGV4XG4gICAgICBkYXRhICAgICAgICAgICAgICA6IEBzdXJ2ZXkudmlldy5nZXRSZXN1bHQoKVxuICAgICAgc2F2ZVRpbWUgICAgICAgICAgOiBAbXkudGltZS5lbGFwc2VkXG4gICAgQHN1cnZleS52aWV3LmNsb3NlKClcbiAgICBAJGVsLmZpbmQoXCIuZG9uZVwiKS5yZW1vdmUoKVxuXG5cbiAgcmVuZGVyOiAtPlxuICAgIEB0cmlnZ2VyIFwiaGlkZU5leHRcIlxuICAgIHRvdGFsU2Vjb25kcyA9IEBtb2RlbC5nZXQoXCJ0b3RhbFNlY29uZHNcIilcblxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGRpdiBjbGFzcz0ndGltZXJfd3JhcHBlcic+XG4gICAgICAgIDxkaXYgY2xhc3M9J3Byb2dyZXNzIGNsZWFyZml4Jz5cbiAgICAgICAgICA8c3BhbiBjbGFzcz0nY29tcGxldGVkX2Rpc3BsYXkgY29uZmlybWF0aW9uJz4je3QoJ2NvbXBsZXRlZCcpfSA8ZGl2IGNsYXNzPSdpbmZvX2JveCBjb21wbGV0ZWRfY291bnQnPiN7QG15Lm9ic2VydmF0aW9uLmNvbXBsZXRlZH08L2Rpdj48L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9J25leHRfZGlzcGxheSBjb25maXJtYXRpb24nPiN7dCgnbmV4dCBvYnNlcnZhdGlvbicpfSA8ZGl2IGNsYXNzPSdpbmZvX2JveCB0aW1lX3RpbGxfbmV4dCc+I3tAbW9kZWwuZ2V0KCdpbnRlcnZhbExlbmd0aCcpfTwvZGl2Pjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz0nc3RhcnRfYnV0dG9uX3dyYXBwZXInPjxidXR0b24gY2xhc3M9J3N0YXJ0X3RpbWUgY29tbWFuZCc+I3t0KCdzdGFydCcpfTwvYnV0dG9uPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9J3N0b3BfYnV0dG9uX3dyYXBwZXIgY29uZmlybWF0aW9uJz48YnV0dG9uIGNsYXNzPSdzdG9wX3RpbWUgY29tbWFuZCc+I3t0KCdhYm9ydCBhbGwgb2JzZXJ2YXRpb25zJyl9PC9idXR0b24+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGlkPSdjdXJyZW50X3N1cnZleSc+PC9kaXY+XG4gICAgXCJcblxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuICAgIEB0cmlnZ2VyIFwicmVhZHlcIlxuXG4gIHJlbmRlclN1cnZleTogKGUpIC0+XG4gICAgaWYgbm90IEBpQW0uY291bnRpbmcgdGhlbiByZXR1cm5cbiAgICBAaUFtLnJlY29yZGluZyA9IHRydWVcbiAgICBcbiAgICBAc3VydmV5LnZpZXcgID0gbmV3IFN1cnZleVJ1blZpZXdcbiAgICAgIFwibW9kZWxcIiAgICAgICAgIDogQHN1cnZleS5tb2RlbHNbQG15Lm9ic2VydmF0aW9uLmluZGV4XVxuICAgICAgXCJwYXJlbnRcIiAgICAgICAgOiBAXG4gICAgICBcImlzT2JzZXJ2YXRpb25cIiA6IHRydWVcbiAgICBAc3VydmV5LnZpZXcuaW5kZXggPSBkbyA9PiBAbXkub2JzZXJ2YXRpb24uaW5kZXggIyBhZGQgYW4gaW5kZXggZm9yIHJlZmVyZW5jZVxuXG4gICAgIyBsaXN0ZW4gZm9yIHJlbmRlciBldmVudHMsIHBhc3MgdGhlbSB1cFxuICAgIEBzdXJ2ZXkudmlldy5vbiBcInJlbmRlcmVkIHN1YlJlbmRlcmVkXCIsID0+IEB0cmlnZ2VyIFwic3ViUmVuZGVyZWRcIlxuXG4gICAgQHN1cnZleS52aWV3LnJlbmRlcigpXG5cbiAgICBAJGVsLmZpbmQoXCIjY3VycmVudF9zdXJ2ZXlcIikuaHRtbChcIjxzcGFuIGNsYXNzPSdvYnNlcnZhdGlvbl9kaXNwbGF5IGNvbmZpcm1hdGlvbic+I3t0KCdvYnNlcnZhdGlvbicpfSA8ZGl2IGNsYXNzPSdpbmZvX2JveCBjdXJyZW50X29ic2VydmF0aW9uJz4je0BteS5vYnNlcnZhdGlvbi5pbmRleH08L2Rpdj48L3NwYW4+XCIpXG4gICAgQCRlbC5maW5kKFwiI2N1cnJlbnRfc3VydmV5XCIpLmFwcGVuZCBAc3VydmV5LnZpZXcuZWxcbiAgICBAJGVsLmZpbmQoXCIjY3VycmVudF9zdXJ2ZXlcIikuYXBwZW5kIFwiPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBkb25lJz4je3QoJ2RvbmUgd2l0aCB0aGlzIG9ic2VydmF0aW9uJyl9PC9idXR0b24+XCJcbiAgICBcbiAgICBAJGVsLmZpbmQoXCIjY3VycmVudF9zdXJ2ZXlcIikuc2Nyb2xsVG8gMjUwLCA9PiBcbiAgICAgIGlmIEBpSGF2ZS5mb3JjZWRQcm9ncmVzc2lvblxuICAgICAgICBVdGlscy5taWRBbGVydCB0KFwicGxlYXNlIGNvbnRpbnVlIHdpdGggdGhlIG5leHQgb2JzZXJ2YXRpb25cIilcbiAgICAgICAgQGlIYXZlLmZvcmNlZFByb2dyZXNzaW9uID0gZmFsc2VcbiAgICAgIGVsc2UgaWYgQGlIYXZlLmZpbmlzaGVkXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IHQoXCJwbGVhc2UgZW50ZXIgbGFzdCBvYnNlcnZhdGlvblwiKVxuXG5cbiAgb25DbG9zZTogLT5cbiAgICBAc3VydmV5LnZpZXc/LmNsb3NlKClcbiAgICBAc2tpcHBhYmxlVmlldy5jbG9zZSgpXG5cbiAgZ2V0UmVzdWx0OiAtPlxuICAgIHtcbiAgICAgIFwic3VydmV5c1wiICAgICAgICAgICAgICAgOiBAc3VydmV5LnJlc3VsdHNcbiAgICAgIFwidmFyaWFibGVOYW1lXCIgICAgICAgICAgOiBAbW9kZWwuZ2V0KFwidmFyaWFibGVOYW1lXCIpXG4gICAgICBcInRvdGFsVGltZVwiICAgICAgICAgICAgIDogQG1vZGVsLmdldChcInRvdGFsVGltZVwiKVxuICAgICAgXCJpbnRlcnZhbExlbmd0aFwiICAgICAgICA6IEBtb2RlbC5nZXQoXCJpbnRlcnZhbFRpbWVcIilcbiAgICAgIFwiY29tcGxldGVkT2JzZXJ2YXRpb25zXCIgOiBAbXkub2JzZXJ2YXRpb24uY29tcGxldGVkXG4gICAgfVxuXG4gIGdldFN1bTogLT5cbiAgICB7XG4gICAgICBcInRvdGFsXCIgOiBAbXkub2JzZXJ2YXRpb24uY29tcGxldGVkIFxuICAgIH1cblxuICBnZXRTa2lwcGVkOiAtPlxuICAgIHZpZXdSZXN1bHQgPSBAc2tpcHBhYmxlVmlldy5nZXRTa2lwcGVkKClcbiAgICBza2lwcGVkUmVzdWx0cyA9IFtdXG4gICAgZm9yIGkgaW4gWzEuLihAc3VydmV5Lm1vZGVscy5sZW5ndGgtMSldXG4gICAgICBza2lwcGVkUmVzdWx0cy5wdXNoXG4gICAgICAgIG9ic2VydmF0aW9uTnVtYmVyIDogaSAjIHZpZXcncyBpbmRleFxuICAgICAgICBkYXRhICAgICAgICAgICAgICA6IHZpZXdSZXN1bHRcbiAgICAgICAgc2F2ZVRpbWUgICAgICAgICAgOiBcInNraXBwZWRcIlxuXG4gICAgcmV0dXJuIHtcbiAgICAgIFwic3VydmV5c1wiICAgICAgICAgICAgICAgOiBza2lwcGVkUmVzdWx0c1xuICAgICAgXCJ2YXJpYWJsZU5hbWVcIiAgICAgICAgICA6IFwic2tpcHBlZFwiXG4gICAgICBcInRvdGFsVGltZVwiICAgICAgICAgICAgIDogXCJza2lwcGVkXCJcbiAgICAgIFwiaW50ZXJ2YWxMZW5ndGhcIiAgICAgICAgOiBcInNraXBwZWRcIlxuICAgICAgXCJjb21wbGV0ZWRPYnNlcnZhdGlvbnNcIiA6IFwic2tpcHBlZFwiXG4gICAgfVxuXG4gIGlzVmFsaWQ6IC0+XG4gICAgQGlIYXZlLmZpbmlzaGVkXG5cbiAgc2hvd0Vycm9yczogLT5cbiAgICBAJGVsLmZpbmQoXCJtZXNzYWdlc1wiKS5odG1sIEB2YWxpZGF0b3IuZ2V0RXJyb3JzKCkuam9pbihcIiwgXCIpXG5cbiAgdXBkYXRlTmF2aWdhdGlvbjogLT5cbiAgICBUYW5nZXJpbmUubmF2LnNldFN0dWRlbnQgQCRlbC5maW5kKCcjcGFydGljaXBhbnRfaWQnKS52YWwoKSIsInZhciBPYnNlcnZhdGlvblJ1blZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuT2JzZXJ2YXRpb25SdW5WaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKE9ic2VydmF0aW9uUnVuVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gT2JzZXJ2YXRpb25SdW5WaWV3KCkge1xuICAgIHRoaXMuc2F2ZUN1cnJlbnRTdXJ2ZXkgPSBiaW5kKHRoaXMuc2F2ZUN1cnJlbnRTdXJ2ZXksIHRoaXMpO1xuICAgIHRoaXMudXBkYXRlT2JzZXJ2YXRpb25JbmRleCA9IGJpbmQodGhpcy51cGRhdGVPYnNlcnZhdGlvbkluZGV4LCB0aGlzKTtcbiAgICB0aGlzLmNoZWNrU3VydmV5RGlzcGxheSA9IGJpbmQodGhpcy5jaGVja1N1cnZleURpc3BsYXksIHRoaXMpO1xuICAgIHRoaXMuY2hlY2tJZk92ZXIgPSBiaW5kKHRoaXMuY2hlY2tJZk92ZXIsIHRoaXMpO1xuICAgIHRoaXMuY2hlY2tXYXJuaW5nID0gYmluZCh0aGlzLmNoZWNrV2FybmluZywgdGhpcyk7XG4gICAgdGhpcy5jaGVja09ic2VydmF0aW9uUGFjZSA9IGJpbmQodGhpcy5jaGVja09ic2VydmF0aW9uUGFjZSwgdGhpcyk7XG4gICAgdGhpcy50aWNrID0gYmluZCh0aGlzLnRpY2ssIHRoaXMpO1xuICAgIHJldHVybiBPYnNlcnZhdGlvblJ1blZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBPYnNlcnZhdGlvblJ1blZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiT2JzZXJ2YXRpb25SdW5WaWV3XCI7XG5cbiAgT2JzZXJ2YXRpb25SdW5WaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgXCJjbGljayAuc3RhcnRfdGltZVwiOiBcInN0YXJ0T2JzZXJ2YXRpb25zXCIsXG4gICAgXCJjbGljayAuc3RvcF90aW1lXCI6IFwic3RvcE9ic2VydmF0aW9uc1wiLFxuICAgIFwiY2xpY2sgLmRvbmVcIjogXCJjb21wbGV0ZU9ic2VydmF0aW9uXCJcbiAgfTtcblxuICBPYnNlcnZhdGlvblJ1blZpZXcuRk9SQ0UgPSAxO1xuXG4gIE9ic2VydmF0aW9uUnVuVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICAgIHRoaXMud2FybmluZ1NlY29uZHMgPSA1O1xuICAgIHRoaXMuaW5pdGlhbGl6ZUZsYWdzKCk7XG4gICAgcmV0dXJuIHRoaXMuaW5pdGlhbGl6ZVN1cnZleSgpO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUnVuVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZVN1cnZleSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhdHRyaWJ1dGVzLCBpLCBtb2RlbHM7XG4gICAgaWYgKHRoaXMuc3VydmV5ICE9IG51bGwpIHtcbiAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgIH1cbiAgICBhdHRyaWJ1dGVzID0gJC5leHRlbmQodGhpcy5tb2RlbC5nZXQoJ3N1cnZleUF0dHJpYnV0ZXMnKSwge1xuICAgICAgXCJfaWRcIjogdGhpcy5tb2RlbC5pZFxuICAgIH0pO1xuICAgIG1vZGVscyA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBqLCByZWYsIHJlc3VsdHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSBqID0gMSwgcmVmID0gcGFyc2VJbnQodGhpcy5tb2RlbC5nZXQoJ3RvdGFsU2Vjb25kcycpIC8gdGhpcy5tb2RlbC5nZXQoJ2ludGVydmFsTGVuZ3RoJykpOyAxIDw9IHJlZiA/IGogPD0gcmVmIDogaiA+PSByZWY7IGkgPSAxIDw9IHJlZiA/ICsraiA6IC0taikge1xuICAgICAgICByZXN1bHRzLnB1c2gobmV3IEJhY2tib25lLk1vZGVsKGF0dHJpYnV0ZXMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pLmNhbGwodGhpcyk7XG4gICAgbW9kZWxzLnVuc2hpZnQoXCJcIik7XG4gICAgdGhpcy5za2lwcGFibGVWaWV3ID0gbmV3IFN1cnZleVJ1blZpZXcoe1xuICAgICAgXCJtb2RlbFwiOiBtb2RlbHNbMV0sXG4gICAgICBcInBhcmVudFwiOiB0aGlzLFxuICAgICAgXCJpc09ic2VydmF0aW9uXCI6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5zdXJ2ZXkgPSB7XG4gICAgICBcIm1vZGVsc1wiOiBtb2RlbHMsXG4gICAgICBcInJlc3VsdHNcIjogW11cbiAgICB9O1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUnVuVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZUZsYWdzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pQW0gPSB7XG4gICAgICBcImNvdW50aW5nXCI6IGZhbHNlLFxuICAgICAgXCJyZWNvcmRpbmdcIjogZmFsc2VcbiAgICB9O1xuICAgIHRoaXMuaUhhdmVudCA9IHtcbiAgICAgIFwid2FybmVkXCI6IHRydWVcbiAgICB9O1xuICAgIHRoaXMuaUhhdmUgPSB7XG4gICAgICBcInJ1bk9uY2VcIjogZmFsc2UsXG4gICAgICBcImZpbmlzaGVkXCI6IGZhbHNlXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5teSA9IHtcbiAgICAgIFwidGltZVwiOiB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJlbGFwc2VkXCI6IDBcbiAgICAgIH0sXG4gICAgICBcIm9ic2VydmF0aW9uXCI6IHtcbiAgICAgICAgXCJpbmRleFwiOiAwLFxuICAgICAgICBcIm9sZEluZGV4XCI6IDAsXG4gICAgICAgIFwiY29tcGxldGVkXCI6IDAsXG4gICAgICAgIFwidG90YWxcIjogcGFyc2VJbnQodGhpcy5tb2RlbC5nZXQoJ3RvdGFsU2Vjb25kcycpIC8gdGhpcy5tb2RlbC5nZXQoJ2ludGVydmFsTGVuZ3RoJykpXG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBPYnNlcnZhdGlvblJ1blZpZXcucHJvdG90eXBlLnN0YXJ0T2JzZXJ2YXRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuaUFtLmNvdW50aW5nIHx8IHRoaXMuaUhhdmUucnVuT25jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiRlbC5maW5kKFwiLnN0b3BfYnV0dG9uX3dyYXBwZXIsIC5uZXh0X2Rpc3BsYXksIC5jb21wbGV0ZWRfZGlzcGxheVwiKS5yZW1vdmVDbGFzcyhcImNvbmZpcm1hdGlvblwiKTtcbiAgICB0aGlzLiRlbC5maW5kKFwiLnN0YXJ0X2J1dHRvbl93cmFwcGVyXCIpLmFkZENsYXNzKFwiY29uZmlybWF0aW9uXCIpO1xuICAgIHRoaXMudGltZXJJbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMudGljaywgMTAwMCk7XG4gICAgdGhpcy5pQW0uY291bnRpbmcgPSB0cnVlO1xuICAgIHRoaXMubXkudGltZS5zdGFydCA9IHRoaXMuZ2V0VGltZSgpO1xuICAgIHJldHVybiB0aGlzLm15LnRpbWUuZWxhcHNlZCA9IDA7XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25SdW5WaWV3LnByb3RvdHlwZS5zdG9wT2JzZXJ2YXRpb25zID0gZnVuY3Rpb24oZSkge1xuICAgIHZhciBmcm9tQ2xpY2ssIGlzbnRQcmVtYXR1cmVTdG9wO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lckludGVydmFsKTtcbiAgICBmcm9tQ2xpY2sgPSBlICE9IG51bGw7XG4gICAgaXNudFByZW1hdHVyZVN0b3AgPSBlID09IG51bGw7XG4gICAgaWYgKGUgIT0gbnVsbCkge1xuICAgICAgdGhpcy50cmlnZ2VyKFwic2hvd05leHRcIik7XG4gICAgfVxuICAgIGlmIChpc250UHJlbWF0dXJlU3RvcCAmJiAhdGhpcy5pSGF2ZS5maW5pc2hlZCkge1xuICAgICAgaWYgKHRoaXMuaUFtLnJlY29yZGluZykge1xuICAgICAgICB0aGlzLnJlc2V0T2JzZXJ2YXRpb25GbGFncygpO1xuICAgICAgICB0aGlzLnNhdmVDdXJyZW50U3VydmV5KCk7XG4gICAgICB9XG4gICAgICB0aGlzLm15Lm9ic2VydmF0aW9uLmluZGV4Kys7XG4gICAgICB0aGlzLnJlbmRlclN1cnZleSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiLnN0b3BfYnV0dG9uX3dyYXBwZXJcIikuYWRkQ2xhc3MoXCJjb25maXJtYXRpb25cIik7XG4gICAgICBVdGlscy5taWRBbGVydCh0KFwib2JzZXJ2YXRpb25zIGZpbmlzaGVkXCIpKTtcbiAgICB9XG4gICAgdGhpcy4kZWwuZmluZChcIi5uZXh0X2Rpc3BsYXlcIikuYWRkQ2xhc3MoXCJjb25maXJtYXRpb25cIik7XG4gICAgdGhpcy5pSGF2ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXMuaUhhdmUucnVuT25jZSA9IHRydWU7XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25SdW5WaWV3LnByb3RvdHlwZS50aWNrID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5teS50aW1lLmVsYXBzZWQgPSB0aGlzLmdldFRpbWUoKSAtIHRoaXMubXkudGltZS5zdGFydDtcbiAgICB0aGlzLmNoZWNrSWZPdmVyKCk7XG4gICAgdGhpcy51cGRhdGVPYnNlcnZhdGlvbkluZGV4KCk7XG4gICAgdGhpcy51cGRhdGVQcm9ncmVzc0Rpc3BsYXkoKTtcbiAgICB0aGlzLmNoZWNrU3VydmV5RGlzcGxheSgpO1xuICAgIHRoaXMuY2hlY2tPYnNlcnZhdGlvblBhY2UoKTtcbiAgICByZXR1cm4gdGhpcy5jaGVja1dhcm5pbmcoKTtcbiAgfTtcblxuICBPYnNlcnZhdGlvblJ1blZpZXcucHJvdG90eXBlLmNoZWNrT2JzZXJ2YXRpb25QYWNlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuaUFtLnJlY29yZGluZyAmJiB0aGlzLm15Lm9ic2VydmF0aW9uLmNvbXBsZXRlZCA8ICh0aGlzLm15Lm9ic2VydmF0aW9uLmluZGV4IC0gMSkgJiYgdGhpcy5teS5vYnNlcnZhdGlvbi5pbmRleCAhPT0gMCkge1xuICAgICAgdGhpcy5pSGF2ZS5mb3JjZWRQcm9ncmVzc2lvbiA9IHRydWU7XG4gICAgICB0aGlzLnJlc2V0T2JzZXJ2YXRpb25GbGFncygpO1xuICAgICAgdGhpcy5zYXZlQ3VycmVudFN1cnZleSgpO1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyU3VydmV5KCk7XG4gICAgfVxuICB9O1xuXG4gIE9ic2VydmF0aW9uUnVuVmlldy5wcm90b3R5cGUuY2hlY2tXYXJuaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlTaG91bGRXYXJuLCBwcm9qZWN0ZWRJbmRleDtcbiAgICBwcm9qZWN0ZWRJbmRleCA9IE1hdGguZmxvb3IoKHRoaXMubXkudGltZS5lbGFwc2VkICsgdGhpcy53YXJuaW5nU2Vjb25kcykgLyB0aGlzLm1vZGVsLmdldCgnaW50ZXJ2YWxMZW5ndGgnKSk7XG4gICAgaVNob3VsZFdhcm4gPSB0aGlzLm15Lm9ic2VydmF0aW9uLmluZGV4IDwgcHJvamVjdGVkSW5kZXggJiYgIXRoaXMuaUhhdmUuZmluaXNoZWQ7XG4gICAgaWYgKHRoaXMuaUFtLnJlY29yZGluZyAmJiB0aGlzLmlIYXZlbnQud2FybmVkICYmIGlTaG91bGRXYXJuICYmIHRoaXMubXkub2JzZXJ2YXRpb24uaW5kZXggIT09IDApIHtcbiAgICAgIFV0aWxzLm1pZEFsZXJ0KHQoXCJvYnNlcnZhdGlvbiBlbmRpbmcgc29vblwiKSk7XG4gICAgICByZXR1cm4gdGhpcy5pSGF2ZW50Lndhcm5lZCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBPYnNlcnZhdGlvblJ1blZpZXcucHJvdG90eXBlLmdyaWRXYXNBdXRvc3RvcHBlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBPYnNlcnZhdGlvblJ1blZpZXcucHJvdG90eXBlLmNoZWNrSWZPdmVyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMubXkudGltZS5lbGFwc2VkID49IHRoaXMubW9kZWwuZ2V0KFwidG90YWxTZWNvbmRzXCIpKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdG9wT2JzZXJ2YXRpb25zKCk7XG4gICAgfVxuICB9O1xuXG4gIE9ic2VydmF0aW9uUnVuVmlldy5wcm90b3R5cGUuY2hlY2tTdXJ2ZXlEaXNwbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMubXkub2JzZXJ2YXRpb24ub2xkSW5kZXggIT09IHRoaXMubXkub2JzZXJ2YXRpb24uaW5kZXggJiYgIXRoaXMuaUhhdmUuZmluaXNoZWQgJiYgIXRoaXMuaUFtLnJlY29yZGluZykge1xuICAgICAgdGhpcy5yZW5kZXJTdXJ2ZXkoKTtcbiAgICAgIHJldHVybiB0aGlzLm15Lm9ic2VydmF0aW9uLm9sZEluZGV4ID0gdGhpcy5teS5vYnNlcnZhdGlvbi5pbmRleDtcbiAgICB9XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25SdW5WaWV3LnByb3RvdHlwZS51cGRhdGVPYnNlcnZhdGlvbkluZGV4ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5teS5vYnNlcnZhdGlvbi5pbmRleCA9IE1hdGguZmxvb3IodGhpcy5teS50aW1lLmVsYXBzZWQgLyB0aGlzLm1vZGVsLmdldCgnaW50ZXJ2YWxMZW5ndGgnKSk7XG4gICAgaWYgKHRoaXMubXkub2JzZXJ2YXRpb24uaW5kZXggPiB0aGlzLnN1cnZleS5tb2RlbHMubGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIHRoaXMubXkub2JzZXJ2YXRpb24uaW5kZXggPSB0aGlzLnN1cnZleS5tb2RlbHMubGVuZ3RoIC0gMTtcbiAgICB9XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25SdW5WaWV3LnByb3RvdHlwZS51cGRhdGVQcm9ncmVzc0Rpc3BsYXkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGltZVRpbGxOZXh0O1xuICAgIHRoaXMuJGVsLmZpbmQoXCIuY3VycmVudF9vYnNlcnZhdGlvblwiKS5odG1sKHRoaXMubXkub2JzZXJ2YXRpb24uaW5kZXgpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIuY29tcGxldGVkX2NvdW50XCIpLmh0bWwodGhpcy5teS5vYnNlcnZhdGlvbi5jb21wbGV0ZWQpO1xuICAgIHRpbWVUaWxsTmV4dCA9IE1hdGgubWF4KCgodGhpcy5teS5vYnNlcnZhdGlvbi5pbmRleCArIDEpICogdGhpcy5tb2RlbC5nZXQoJ2ludGVydmFsTGVuZ3RoJykpIC0gdGhpcy5teS50aW1lLmVsYXBzZWQsIDApO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIudGltZV90aWxsX25leHRcIikuaHRtbCh0aW1lVGlsbE5leHQpO1xuICAgIGlmICghdGhpcy5pQW0ucmVjb3JkaW5nICYmICF0aGlzLmlIYXZlLmZpbmlzaGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5uZXh0X2Rpc3BsYXksIC5jb21wbGV0ZWRfZGlzcGxheVwiKS5yZW1vdmVDbGFzcyhcImNvbmZpcm1hdGlvblwiKTtcbiAgICB9XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25SdW5WaWV3LnByb3RvdHlwZS5yZXNldE9ic2VydmF0aW9uRmxhZ3MgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlBbS5yZWNvcmRpbmcgPSBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5pSGF2ZW50Lndhcm5lZCA9IHRydWU7XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25SdW5WaWV3LnByb3RvdHlwZS5nZXRUaW1lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgfTtcblxuICBPYnNlcnZhdGlvblJ1blZpZXcucHJvdG90eXBlLmNvbXBsZXRlT2JzZXJ2YXRpb24gPSBmdW5jdGlvbihvcHRpb24pIHtcbiAgICBpZiAodGhpcy5zdXJ2ZXkudmlldy5pc1ZhbGlkKCkpIHtcbiAgICAgIHRoaXMuc2F2ZUN1cnJlbnRTdXJ2ZXkoKTtcbiAgICAgIGlmICh0aGlzLmlIYXZlLmZpbmlzaGVkKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcihcInNob3dOZXh0XCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN1cnZleS52aWV3LnNob3dFcnJvcnMoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudGljaygpO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUnVuVmlldy5wcm90b3R5cGUuc2F2ZUN1cnJlbnRTdXJ2ZXkgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlc2V0T2JzZXJ2YXRpb25GbGFncygpO1xuICAgIHRoaXMubXkub2JzZXJ2YXRpb24uY29tcGxldGVkKys7XG4gICAgdGhpcy5zdXJ2ZXkucmVzdWx0cy5wdXNoKHtcbiAgICAgIG9ic2VydmF0aW9uTnVtYmVyOiB0aGlzLnN1cnZleS52aWV3LmluZGV4LFxuICAgICAgZGF0YTogdGhpcy5zdXJ2ZXkudmlldy5nZXRSZXN1bHQoKSxcbiAgICAgIHNhdmVUaW1lOiB0aGlzLm15LnRpbWUuZWxhcHNlZFxuICAgIH0pO1xuICAgIHRoaXMuc3VydmV5LnZpZXcuY2xvc2UoKTtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5kb25lXCIpLnJlbW92ZSgpO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUnVuVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRvdGFsU2Vjb25kcztcbiAgICB0aGlzLnRyaWdnZXIoXCJoaWRlTmV4dFwiKTtcbiAgICB0b3RhbFNlY29uZHMgPSB0aGlzLm1vZGVsLmdldChcInRvdGFsU2Vjb25kc1wiKTtcbiAgICB0aGlzLiRlbC5odG1sKFwiPGRpdiBjbGFzcz0ndGltZXJfd3JhcHBlcic+IDxkaXYgY2xhc3M9J3Byb2dyZXNzIGNsZWFyZml4Jz4gPHNwYW4gY2xhc3M9J2NvbXBsZXRlZF9kaXNwbGF5IGNvbmZpcm1hdGlvbic+XCIgKyAodCgnY29tcGxldGVkJykpICsgXCIgPGRpdiBjbGFzcz0naW5mb19ib3ggY29tcGxldGVkX2NvdW50Jz5cIiArIHRoaXMubXkub2JzZXJ2YXRpb24uY29tcGxldGVkICsgXCI8L2Rpdj48L3NwYW4+IDxzcGFuIGNsYXNzPSduZXh0X2Rpc3BsYXkgY29uZmlybWF0aW9uJz5cIiArICh0KCduZXh0IG9ic2VydmF0aW9uJykpICsgXCIgPGRpdiBjbGFzcz0naW5mb19ib3ggdGltZV90aWxsX25leHQnPlwiICsgKHRoaXMubW9kZWwuZ2V0KCdpbnRlcnZhbExlbmd0aCcpKSArIFwiPC9kaXY+PC9zcGFuPiA8L2Rpdj4gPGRpdj4gPGRpdiBjbGFzcz0nc3RhcnRfYnV0dG9uX3dyYXBwZXInPjxidXR0b24gY2xhc3M9J3N0YXJ0X3RpbWUgY29tbWFuZCc+XCIgKyAodCgnc3RhcnQnKSkgKyBcIjwvYnV0dG9uPjwvZGl2PiA8ZGl2IGNsYXNzPSdzdG9wX2J1dHRvbl93cmFwcGVyIGNvbmZpcm1hdGlvbic+PGJ1dHRvbiBjbGFzcz0nc3RvcF90aW1lIGNvbW1hbmQnPlwiICsgKHQoJ2Fib3J0IGFsbCBvYnNlcnZhdGlvbnMnKSkgKyBcIjwvYnV0dG9uPjwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgaWQ9J2N1cnJlbnRfc3VydmV5Jz48L2Rpdj5cIik7XG4gICAgdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlYWR5XCIpO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUnVuVmlldy5wcm90b3R5cGUucmVuZGVyU3VydmV5ID0gZnVuY3Rpb24oZSkge1xuICAgIGlmICghdGhpcy5pQW0uY291bnRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pQW0ucmVjb3JkaW5nID0gdHJ1ZTtcbiAgICB0aGlzLnN1cnZleS52aWV3ID0gbmV3IFN1cnZleVJ1blZpZXcoe1xuICAgICAgXCJtb2RlbFwiOiB0aGlzLnN1cnZleS5tb2RlbHNbdGhpcy5teS5vYnNlcnZhdGlvbi5pbmRleF0sXG4gICAgICBcInBhcmVudFwiOiB0aGlzLFxuICAgICAgXCJpc09ic2VydmF0aW9uXCI6IHRydWVcbiAgICB9KTtcbiAgICB0aGlzLnN1cnZleS52aWV3LmluZGV4ID0gKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5teS5vYnNlcnZhdGlvbi5pbmRleDtcbiAgICAgIH07XG4gICAgfSkodGhpcykoKTtcbiAgICB0aGlzLnN1cnZleS52aWV3Lm9uKFwicmVuZGVyZWQgc3ViUmVuZGVyZWRcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy50cmlnZ2VyKFwic3ViUmVuZGVyZWRcIik7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICB0aGlzLnN1cnZleS52aWV3LnJlbmRlcigpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIjY3VycmVudF9zdXJ2ZXlcIikuaHRtbChcIjxzcGFuIGNsYXNzPSdvYnNlcnZhdGlvbl9kaXNwbGF5IGNvbmZpcm1hdGlvbic+XCIgKyAodCgnb2JzZXJ2YXRpb24nKSkgKyBcIiA8ZGl2IGNsYXNzPSdpbmZvX2JveCBjdXJyZW50X29ic2VydmF0aW9uJz5cIiArIHRoaXMubXkub2JzZXJ2YXRpb24uaW5kZXggKyBcIjwvZGl2Pjwvc3Bhbj5cIik7XG4gICAgdGhpcy4kZWwuZmluZChcIiNjdXJyZW50X3N1cnZleVwiKS5hcHBlbmQodGhpcy5zdXJ2ZXkudmlldy5lbCk7XG4gICAgdGhpcy4kZWwuZmluZChcIiNjdXJyZW50X3N1cnZleVwiKS5hcHBlbmQoXCI8YnV0dG9uIGNsYXNzPSdjb21tYW5kIGRvbmUnPlwiICsgKHQoJ2RvbmUgd2l0aCB0aGlzIG9ic2VydmF0aW9uJykpICsgXCI8L2J1dHRvbj5cIik7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjY3VycmVudF9zdXJ2ZXlcIikuc2Nyb2xsVG8oMjUwLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKF90aGlzLmlIYXZlLmZvcmNlZFByb2dyZXNzaW9uKSB7XG4gICAgICAgICAgVXRpbHMubWlkQWxlcnQodChcInBsZWFzZSBjb250aW51ZSB3aXRoIHRoZSBuZXh0IG9ic2VydmF0aW9uXCIpKTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuaUhhdmUuZm9yY2VkUHJvZ3Jlc3Npb24gPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5pSGF2ZS5maW5pc2hlZCkge1xuICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydCh0KFwicGxlYXNlIGVudGVyIGxhc3Qgb2JzZXJ2YXRpb25cIikpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuICBPYnNlcnZhdGlvblJ1blZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVmO1xuICAgIGlmICgocmVmID0gdGhpcy5zdXJ2ZXkudmlldykgIT0gbnVsbCkge1xuICAgICAgcmVmLmNsb3NlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNraXBwYWJsZVZpZXcuY2xvc2UoKTtcbiAgfTtcblxuICBPYnNlcnZhdGlvblJ1blZpZXcucHJvdG90eXBlLmdldFJlc3VsdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBcInN1cnZleXNcIjogdGhpcy5zdXJ2ZXkucmVzdWx0cyxcbiAgICAgIFwidmFyaWFibGVOYW1lXCI6IHRoaXMubW9kZWwuZ2V0KFwidmFyaWFibGVOYW1lXCIpLFxuICAgICAgXCJ0b3RhbFRpbWVcIjogdGhpcy5tb2RlbC5nZXQoXCJ0b3RhbFRpbWVcIiksXG4gICAgICBcImludGVydmFsTGVuZ3RoXCI6IHRoaXMubW9kZWwuZ2V0KFwiaW50ZXJ2YWxUaW1lXCIpLFxuICAgICAgXCJjb21wbGV0ZWRPYnNlcnZhdGlvbnNcIjogdGhpcy5teS5vYnNlcnZhdGlvbi5jb21wbGV0ZWRcbiAgICB9O1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUnVuVmlldy5wcm90b3R5cGUuZ2V0U3VtID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFwidG90YWxcIjogdGhpcy5teS5vYnNlcnZhdGlvbi5jb21wbGV0ZWRcbiAgICB9O1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUnVuVmlldy5wcm90b3R5cGUuZ2V0U2tpcHBlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBqLCByZWYsIHNraXBwZWRSZXN1bHRzLCB2aWV3UmVzdWx0O1xuICAgIHZpZXdSZXN1bHQgPSB0aGlzLnNraXBwYWJsZVZpZXcuZ2V0U2tpcHBlZCgpO1xuICAgIHNraXBwZWRSZXN1bHRzID0gW107XG4gICAgZm9yIChpID0gaiA9IDEsIHJlZiA9IHRoaXMuc3VydmV5Lm1vZGVscy5sZW5ndGggLSAxOyAxIDw9IHJlZiA/IGogPD0gcmVmIDogaiA+PSByZWY7IGkgPSAxIDw9IHJlZiA/ICsraiA6IC0taikge1xuICAgICAgc2tpcHBlZFJlc3VsdHMucHVzaCh7XG4gICAgICAgIG9ic2VydmF0aW9uTnVtYmVyOiBpLFxuICAgICAgICBkYXRhOiB2aWV3UmVzdWx0LFxuICAgICAgICBzYXZlVGltZTogXCJza2lwcGVkXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgXCJzdXJ2ZXlzXCI6IHNraXBwZWRSZXN1bHRzLFxuICAgICAgXCJ2YXJpYWJsZU5hbWVcIjogXCJza2lwcGVkXCIsXG4gICAgICBcInRvdGFsVGltZVwiOiBcInNraXBwZWRcIixcbiAgICAgIFwiaW50ZXJ2YWxMZW5ndGhcIjogXCJza2lwcGVkXCIsXG4gICAgICBcImNvbXBsZXRlZE9ic2VydmF0aW9uc1wiOiBcInNraXBwZWRcIlxuICAgIH07XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25SdW5WaWV3LnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaUhhdmUuZmluaXNoZWQ7XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25SdW5WaWV3LnByb3RvdHlwZS5zaG93RXJyb3JzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCJtZXNzYWdlc1wiKS5odG1sKHRoaXMudmFsaWRhdG9yLmdldEVycm9ycygpLmpvaW4oXCIsIFwiKSk7XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25SdW5WaWV3LnByb3RvdHlwZS51cGRhdGVOYXZpZ2F0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5uYXYuc2V0U3R1ZGVudCh0aGlzLiRlbC5maW5kKCcjcGFydGljaXBhbnRfaWQnKS52YWwoKSk7XG4gIH07XG5cbiAgcmV0dXJuIE9ic2VydmF0aW9uUnVuVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsIiMgVGhpcyBwcm90b3R5cGUgcnVucyBhIHN1cnZleSBhdCBzcGVjaWZpZWQgaW50ZXJ2YWxzLlxuY2xhc3MgT2JzZXJ2YXRpb25FZGl0VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiT2JzZXJ2YXRpb25FZGl0Vmlld1wiXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cbiAgICBAbW9kZWwgPSBvcHRpb25zLm1vZGVsXG4gICAgc3VydmV5QXR0cmlidXRlcyA9ICQuZXh0ZW5kKEBtb2RlbC5nZXQoJ3N1cnZleUF0dHJpYnV0ZXMnKSwge1wiX2lkXCI6QG1vZGVsLmlkLFwiYXNzZXNzbWVudElkXCI6QG1vZGVsLmdldChcImFzc2Vzc21lbnRJZFwiKX0pXG4gICAgQHN1cnZleU1vZGVsID0gbmV3IEJhY2tib25lLk1vZGVsKHN1cnZleUF0dHJpYnV0ZXMpXG4gICAgQHN1cnZleVZpZXcgPSBuZXcgU3VydmV5RWRpdFZpZXdcbiAgICAgIFwibW9kZWxcIiA6IEBzdXJ2ZXlNb2RlbFxuXG4gIGlzVmFsaWQ6IC0+IHRydWVcblxuICBzYXZlOiAtPlxuXG4gICAgZXJyb3JzID0gW11cblxuICAgIHRvdGFsU2Vjb25kcyAgID0gcGFyc2VJbnQoIEAkZWwuZmluZChcIiN0b3RhbF9zZWNvbmRzXCIpLnZhbCgpIClcbiAgICBpbnRlcnZhbExlbmd0aCA9IHBhcnNlSW50KCBAJGVsLmZpbmQoXCIjaW50ZXJ2YWxfbGVuZ3RoXCIpLnZhbCgpIClcblxuICAgIGlmIHRvdGFsU2Vjb25kcyA9PSAwIHRoZW4gZXJyb3JzLnB1c2ggXCJUb3RhbCBzZWNvbmRzIG5lZWRzIHRvIGJlIG5vbi16ZXJvIHZhbHVlLlwiXG4gICAgaWYgaW50ZXJ2YWxMZW5ndGggPT0gMCB0aGVuIGVycm9ycy5wdXNoIFwiSW50ZXJ2YWwgbGVuZ3RoIG5lZWRzIHRvIGJlIGEgbm9uLXplcm8gdmFsdWUuXCJcblxuICAgIGlmIGVycm9ycy5sZW5ndGggIT0gMCB0aGVuIGFsZXJ0IChcIldhcm5pbmdcXG5cXG4je2Vycm9ycy5qb2luKCdcXG4nKX1cIilcblxuICAgIEBtb2RlbC5zZXRcbiAgICAgIHRvdGFsU2Vjb25kcyAgICAgOiB0b3RhbFNlY29uZHNcbiAgICAgIGludGVydmFsTGVuZ3RoICAgOiBpbnRlcnZhbExlbmd0aFxuICAgICAgc3VydmV5QXR0cmlidXRlcyA6IEBzdXJ2ZXlNb2RlbC5hdHRyaWJ1dGVzXG5cbiAgcmVuZGVyOiAtPlxuICAgIHRvdGFsU2Vjb25kcyAgID0gQG1vZGVsLmdldChcInRvdGFsU2Vjb25kc1wiKSAgIHx8IDBcbiAgICBpbnRlcnZhbExlbmd0aCA9IEBtb2RlbC5nZXQoXCJpbnRlcnZhbExlbmd0aFwiKSB8fCAwXG5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsIGZvcj0ndG90YWxfc2Vjb25kcyc+VG90YWwgc2Vjb25kczwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCBpZD0ndG90YWxfc2Vjb25kcycgdmFsdWU9JyN7dG90YWxTZWNvbmRzfScgdHlwZT0nbnVtYmVyJz48YnI+XG5cbiAgICAgICAgPGxhYmVsIGZvcj0naW50ZXJ2YWxfbGVuZ3RoJyB0aXRsZT0nSW4gc2Vjb25kcyc+SW50ZXJ2YWwgbGVuZ3RoPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IGlkPSdpbnRlcnZhbF9sZW5ndGgnIHZhbHVlPScje2ludGVydmFsTGVuZ3RofScgdHlwZT0nbnVtYmVyJz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBpZD0nc3VydmV5X2VkaXRvcic+PC9kaXY+XG4gICAgXCJcblxuICAgIEBzdXJ2ZXlWaWV3LnNldEVsZW1lbnQoQCRlbC5maW5kKFwiI3N1cnZleV9lZGl0b3JcIikpXG4gICAgQHN1cnZleVZpZXcucmVuZGVyKClcblxuICAgICMgcmVtb3ZlIHRoZSBvcHRpb24gZm9yIHRoZSBncmlkIGxpbmtcbiAgICBAJGVsLmZpbmQoXCIjZ3JpZF9saW5rXCIpLnJlbW92ZSgpIiwidmFyIE9ic2VydmF0aW9uRWRpdFZpZXcsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5PYnNlcnZhdGlvbkVkaXRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKE9ic2VydmF0aW9uRWRpdFZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIE9ic2VydmF0aW9uRWRpdFZpZXcoKSB7XG4gICAgcmV0dXJuIE9ic2VydmF0aW9uRWRpdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBPYnNlcnZhdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIk9ic2VydmF0aW9uRWRpdFZpZXdcIjtcblxuICBPYnNlcnZhdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBzdXJ2ZXlBdHRyaWJ1dGVzO1xuICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIHN1cnZleUF0dHJpYnV0ZXMgPSAkLmV4dGVuZCh0aGlzLm1vZGVsLmdldCgnc3VydmV5QXR0cmlidXRlcycpLCB7XG4gICAgICBcIl9pZFwiOiB0aGlzLm1vZGVsLmlkLFxuICAgICAgXCJhc3Nlc3NtZW50SWRcIjogdGhpcy5tb2RlbC5nZXQoXCJhc3Nlc3NtZW50SWRcIilcbiAgICB9KTtcbiAgICB0aGlzLnN1cnZleU1vZGVsID0gbmV3IEJhY2tib25lLk1vZGVsKHN1cnZleUF0dHJpYnV0ZXMpO1xuICAgIHJldHVybiB0aGlzLnN1cnZleVZpZXcgPSBuZXcgU3VydmV5RWRpdFZpZXcoe1xuICAgICAgXCJtb2RlbFwiOiB0aGlzLnN1cnZleU1vZGVsXG4gICAgfSk7XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25FZGl0Vmlldy5wcm90b3R5cGUuaXNWYWxpZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uRWRpdFZpZXcucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZXJyb3JzLCBpbnRlcnZhbExlbmd0aCwgdG90YWxTZWNvbmRzO1xuICAgIGVycm9ycyA9IFtdO1xuICAgIHRvdGFsU2Vjb25kcyA9IHBhcnNlSW50KHRoaXMuJGVsLmZpbmQoXCIjdG90YWxfc2Vjb25kc1wiKS52YWwoKSk7XG4gICAgaW50ZXJ2YWxMZW5ndGggPSBwYXJzZUludCh0aGlzLiRlbC5maW5kKFwiI2ludGVydmFsX2xlbmd0aFwiKS52YWwoKSk7XG4gICAgaWYgKHRvdGFsU2Vjb25kcyA9PT0gMCkge1xuICAgICAgZXJyb3JzLnB1c2goXCJUb3RhbCBzZWNvbmRzIG5lZWRzIHRvIGJlIG5vbi16ZXJvIHZhbHVlLlwiKTtcbiAgICB9XG4gICAgaWYgKGludGVydmFsTGVuZ3RoID09PSAwKSB7XG4gICAgICBlcnJvcnMucHVzaChcIkludGVydmFsIGxlbmd0aCBuZWVkcyB0byBiZSBhIG5vbi16ZXJvIHZhbHVlLlwiKTtcbiAgICB9XG4gICAgaWYgKGVycm9ycy5sZW5ndGggIT09IDApIHtcbiAgICAgIGFsZXJ0KFwiV2FybmluZ1xcblxcblwiICsgKGVycm9ycy5qb2luKCdcXG4nKSkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5tb2RlbC5zZXQoe1xuICAgICAgdG90YWxTZWNvbmRzOiB0b3RhbFNlY29uZHMsXG4gICAgICBpbnRlcnZhbExlbmd0aDogaW50ZXJ2YWxMZW5ndGgsXG4gICAgICBzdXJ2ZXlBdHRyaWJ1dGVzOiB0aGlzLnN1cnZleU1vZGVsLmF0dHJpYnV0ZXNcbiAgICB9KTtcbiAgfTtcblxuICBPYnNlcnZhdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW50ZXJ2YWxMZW5ndGgsIHRvdGFsU2Vjb25kcztcbiAgICB0b3RhbFNlY29uZHMgPSB0aGlzLm1vZGVsLmdldChcInRvdGFsU2Vjb25kc1wiKSB8fCAwO1xuICAgIGludGVydmFsTGVuZ3RoID0gdGhpcy5tb2RlbC5nZXQoXCJpbnRlcnZhbExlbmd0aFwiKSB8fCAwO1xuICAgIHRoaXMuJGVsLmh0bWwoXCI8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3RvdGFsX3NlY29uZHMnPlRvdGFsIHNlY29uZHM8L2xhYmVsPiA8aW5wdXQgaWQ9J3RvdGFsX3NlY29uZHMnIHZhbHVlPSdcIiArIHRvdGFsU2Vjb25kcyArIFwiJyB0eXBlPSdudW1iZXInPjxicj4gPGxhYmVsIGZvcj0naW50ZXJ2YWxfbGVuZ3RoJyB0aXRsZT0nSW4gc2Vjb25kcyc+SW50ZXJ2YWwgbGVuZ3RoPC9sYWJlbD4gPGlucHV0IGlkPSdpbnRlcnZhbF9sZW5ndGgnIHZhbHVlPSdcIiArIGludGVydmFsTGVuZ3RoICsgXCInIHR5cGU9J251bWJlcic+IDwvZGl2PiA8ZGl2IGlkPSdzdXJ2ZXlfZWRpdG9yJz48L2Rpdj5cIik7XG4gICAgdGhpcy5zdXJ2ZXlWaWV3LnNldEVsZW1lbnQodGhpcy4kZWwuZmluZChcIiNzdXJ2ZXlfZWRpdG9yXCIpKTtcbiAgICB0aGlzLnN1cnZleVZpZXcucmVuZGVyKCk7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjZ3JpZF9saW5rXCIpLnJlbW92ZSgpO1xuICB9O1xuXG4gIHJldHVybiBPYnNlcnZhdGlvbkVkaXRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgR3BzUnVuVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiR3BzUnVuVmlld1wiXG5cbiAgZXZlbnRzOiAnY2xpY2sgLmNsZWFyJyA6ICdjbGVhcidcblxuICBjbGVhcjogLT5cbiAgICBAcG9zaXRpb24gPSBudWxsXG4gICAgQHVwZGF0ZURpc3BsYXkoKVxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBpMThuKClcbiAgICBAbW9kZWwgICAgID0gb3B0aW9ucy5tb2RlbFxuICAgIEBwYXJlbnQgICAgPSBvcHRpb25zLnBhcmVudFxuICAgIEBkYXRhRW50cnkgPSBvcHRpb25zLmRhdGFFbnRyeVxuXG5cbiAgICBAcG9zaXRpb24gPSBudWxsXG4gICAgQHJldHJ5Q291bnQgPSAwXG5cbiAgaTE4bjogLT5cbiAgICBAdGV4dCA9XG4gICAgICBcImNsZWFyXCIgOiB0KCdHcHNSdW5WaWV3LmJ1dHRvbi5jbGVhcicpXG5cbiAgICAgIFwiZ29vZFwiICAgICAgICAgICA6IHQoJ0dwc1J1blZpZXcubGFiZWwuZ29vZCcpXG4gICAgICBcIm9rXCIgICAgICAgICAgICAgOiB0KCdHcHNSdW5WaWV3LmxhYmVsLm9rJylcbiAgICAgIFwicG9vclwiICAgICAgICAgICA6IHQoJ0dwc1J1blZpZXcubGFiZWwucG9vcicpXG4gICAgICBcImxhdGl0dWRlXCIgICAgICAgOiB0KCdHcHNSdW5WaWV3LmxhYmVsLmxhdGl0dWRlJylcbiAgICAgIFwibG9uZ2l0dWRlXCIgICAgICA6IHQoJ0dwc1J1blZpZXcubGFiZWwubG9uZ2l0dWRlJylcbiAgICAgIFwiYWNjdXJhY3lcIiAgICAgICA6IHQoJ0dwc1J1blZpZXcubGFiZWwuYWNjdXJhY3knKVxuICAgICAgXCJtZXRlcnNcIiAgICAgICAgIDogdCgnR3BzUnVuVmlldy5sYWJlbC5tZXRlcnMnKVxuXG4gICAgICBcInNhdmVkUmVhZGluZ1wiICAgOiB0KCdHcHNSdW5WaWV3LmxhYmVsLnNhdmVkX3JlYWRpbmcnKVxuICAgICAgXCJjdXJyZW50UmVhZGluZ1wiIDogdCgnR3BzUnVuVmlldy5sYWJlbC5jdXJyZW50X3JlYWRpbmcnKVxuICAgICAgXCJiZXN0UmVhZGluZ1wiICAgIDogdCgnR3BzUnVuVmlldy5sYWJlbC5iZXN0X3JlYWRpbmcnKVxuICAgICAgXCJncHNTdGF0dXNcIiAgICAgIDogdCgnR3BzUnVuVmlldy5sYWJlbC5ncHNfc3RhdHVzJylcblxuICAgICAgXCJncHNPa1wiICAgICAgICA6IHQoJ0dwc1J1blZpZXcubWVzc2FnZS5ncHNfb2snKVxuICAgICAgXCJyZXRyeWluZ1wiICAgICA6IHQoJ0dwc1J1blZpZXcubWVzc2FnZS5yZXRyeWluZycpXG4gICAgICBcInNlYXJjaGluZ1wiICAgIDogdCgnR3BzUnVuVmlldy5tZXNzYWdlLnNlYXJjaGluZycpXG4gICAgICBcIm5vdFN1cHBvcnRlZFwiIDogXyh0KCdHcHNSdW5WaWV3Lm1lc3NhZ2Uubm90X3N1cHBvcnRlZCcpKS5lc2NhcGUoKVxuXG4gIHBvbGw6ID0+ICMgZnVsbCBvZiBtYWdpYyBudW1iZXJzXG5cbiAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKFxuICAgICAgICAocG9zaXRpb24pID0+XG4gICAgICAgICAgQHVwZGF0ZURpc3BsYXkgcG9zaXRpb25cbiAgICAgICAgICBAdXBkYXRlUG9zaXRpb24gcG9zaXRpb25cbiAgICAgICAgICBAdXBkYXRlU3RhdHVzIEB0ZXh0Lmdwc09rXG4gICAgICAgICAgQHJldHJ5Q291bnQgPSAwXG4gICAgICAgICAgc2V0VGltZW91dChAcG9sbCgpLCA1ICogMTAwMCkgdW5sZXNzIEBzdG9wUG9sbGluZyAjIG5vdCByZWN1cnNpb24sIG5vIHN0YWNrb3ZlcmZsb3dcbiAgICAgICxcbiAgICAgICAgKHBvc2l0aW9uRXJyb3IpID0+XG4gICAgICAgICAgQHVwZGF0ZVN0YXR1cyBwb3NpdGlvbkVycm9yLm1lc3NhZ2VcbiAgICAgICAgICBzZXRUaW1lb3V0KEBwb2xsKCksIDUgKiAxMDAwKSAgdW5sZXNzIEBzdG9wUG9sbGluZyAgIyBub3QgcmVjdXJzaW9uLCBubyBzdGFja292ZXJmbG93XG4gICAgICAgICAgQHJldHJ5Q291bnQrK1xuICAgICAgLCBcbiAgICAgICAgbWF4aW11bUFnZSAgICAgICAgIDogMTAgKiAxMDAwXG4gICAgICAgIHRpbWVvdXQgICAgICAgICAgICA6IDMwICogMTAwMFxuICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3kgOiB0cnVlXG4gICAgKVxuXG4gIGVhc2lmeTogKCBwb3NpdGlvbiApIC0+XG4gICAgcmV0dXJuIHtcbiAgICAgIGxhdCAgICAgICA6IGlmIHBvc2l0aW9uPy5jb29yZHM/LmxhdGl0dWRlPyB0aGVuIHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSBlbHNlIFwiLi4uXCJcbiAgICAgIGxvbmcgICAgICA6IGlmIHBvc2l0aW9uPy5jb29yZHM/LmxvbmdpdHVkZT8gdGhlbiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlIGVsc2UgXCIuLi5cIlxuICAgICAgYWx0ICAgICAgIDogaWYgcG9zaXRpb24/LmNvb3Jkcz8uYWx0aXR1ZGU/IHRoZW4gcG9zaXRpb24uY29vcmRzLmFsdGl0dWRlIGVsc2UgXCIuLi5cIlxuICAgICAgYWNjICAgICAgIDogaWYgcG9zaXRpb24/LmNvb3Jkcz8uYWNjdXJhY3k/IHRoZW4gcG9zaXRpb24uY29vcmRzLmFjY3VyYWN5IGVsc2UgXCIuLi5cIlxuICAgICAgYWx0QWNjICAgIDogaWYgcG9zaXRpb24/LmNvb3Jkcz8uYWx0aXR1ZGVBY2N1cmFjeT8gdGhlbiBwb3NpdGlvbi5jb29yZHMuYWx0aXR1ZGVBY2N1cmFjeSBlbHNlIFwiLi4uXCJcbiAgICAgIGhlYWRpbmcgICA6IGlmIHBvc2l0aW9uPy5jb29yZHM/LmhlYWRpbmc/IHRoZW4gcG9zaXRpb24uY29vcmRzLmhlYWRpbmcgZWxzZSBcIi4uLlwiXG4gICAgICBzcGVlZCAgICAgOiBpZiBwb3NpdGlvbj8uY29vcmRzPy5zcGVlZD8gdGhlbiBwb3NpdGlvbi5jb29yZHMuc3BlZWQgZWxzZSBcIi4uLlwiXG4gICAgICB0aW1lc3RhbXAgOiBpZiBwb3NpdGlvbj8udGltZXN0YW1wPyB0aGVuIHBvc2l0aW9uLnRpbWVzdGFtcCBlbHNlIFwiLi4uXCJcbiAgICB9XG5cbiAgdXBkYXRlUG9zaXRpb246ICggbmV3UG9zaXRpb24gKSAtPlxuICAgIG5ld1Bvc2l0aW9uID0gQGVhc2lmeShuZXdQb3NpdGlvbilcbiAgICBAcG9zaXRpb24gPSBuZXdQb3NpdGlvbiB1bmxlc3MgQHBvc2l0aW9uP1xuICAgICMgcHJlZmVyIG1vc3QgYWNjdXJhdGUgcmVzdWx0XG4gICAgaWYgKG5ld1Bvc2l0aW9uPy5hY2M/ICYmIEBwb3NpdGlvbj8uYWNjPykgJiYgbmV3UG9zaXRpb24uYWNjIDw9IEBwb3NpdGlvbi5hY2NcbiAgICAgIEBwb3NpdGlvbiA9IG5ld1Bvc2l0aW9uXG5cbiAgdXBkYXRlRGlzcGxheTogKHBvc2l0aW9uKSAtPlxuICAgIHBvc2l0aW9uID0gQGVhc2lmeSBwb3NpdGlvblxuICAgIHBvc2l0aW9ucyA9IFtcbiAgICAgIGVsICAgOiBAJGVsLmZpbmQoXCIuZ3BzX2N1cnJlbnRcIilcbiAgICAgIGRhdGEgOiBwb3NpdGlvblxuICAgICxcbiAgICAgIGVsICAgOiBAJGVsLmZpbmQoXCIuZ3BzX2Jlc3RcIilcbiAgICAgIGRhdGEgOiBAcG9zaXRpb25cbiAgICBdXG5cbiAgICBmb3IgcG9zLCBpIGluIHBvc2l0aW9uc1xuXG4gICAgICBkYXRhID0gcG9zLmRhdGFcbiAgICAgIGVsICAgPSBwb3MuZWxcblxuICAgICAgbGF0ICA9IGlmIGRhdGE/LmxhdCAgdGhlbiBwYXJzZUZsb2F0KGRhdGEubGF0KS50b0ZpeGVkKDQpICAgZWxzZSBcIi4uLlwiXG4gICAgICBsb25nID0gaWYgZGF0YT8ubG9uZyB0aGVuIHBhcnNlRmxvYXQoZGF0YS5sb25nKS50b0ZpeGVkKDQpIGVsc2UgXCIuLi5cIlxuICAgICAgYWNjICA9IGlmIGRhdGE/LmFjYyAgdGhlbiBwYXJzZUludChkYXRhLmFjYykgKyBcIiAje0B0ZXh0Lm1ldGVyc31cIiBcbiAgICAgIGVsc2UgXCIuLi5cIlxuXG4gICAgICBhY2MgPSBhY2MgK1xuICAgICAgICBpZiBwYXJzZUludChkYXRhPy5hY2MpIDwgNTAgIyBtYWdpYyBudW1iZXJcbiAgICAgICAgICBcIigje0B0ZXh0Lmdvb2R9KVwiXG4gICAgICAgIGVsc2UgaWYgcGFyc2VJbnQoZGF0YT8uYWNjKSA+IDEwMCAjIG1hZ2ljIG51bWJlclxuICAgICAgICAgIFwiKCN7QHRleHQucG9vcn0pXCJcbiAgICAgICAgZWxzZVxuICAgICAgICAgIFwiKCN7QHRleHQub2t9KVwiXG5cbiAgICAgIGh0bWwgPSBcIlxuICAgICAgICA8dGFibGU+XG4gICAgICAgICAgPHRyPjx0ZD4je0B0ZXh0LmxhdGl0dWRlfTwvdGQ+IDx0ZD4je2xhdH08L3RkPjwvdHI+XG4gICAgICAgICAgPHRyPjx0ZD4je0B0ZXh0LmxvbmdpdHVkZX08L3RkPjx0ZD4je2xvbmd9PC90ZD48L3RyPlxuICAgICAgICAgIDx0cj48dGQ+I3tAdGV4dC5hY2N1cmFjeX08L3RkPiA8dGQ+I3thY2N9PC90ZD48L3RyPlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgXCJcblxuICAgICAgZWwuaHRtbCBodG1sXG5cbiAgdXBkYXRlU3RhdHVzOiAobWVzc2FnZSA9ICcnKSAtPlxuICAgIHJldHJpZXMgPSBpZiBAcmV0cnlDb3VudCA+IDAgdGhlbiB0KCdHcHNSdW5WaWV3Lm1lc3NhZ2UuYXR0ZW1wdCcsIGNvdW50OiBAcmV0cnlDb3VudCsxKSBlbHNlIFwiXCJcbiAgICBwb2xsaW5nID0gaWYgbm90IEBzdG9wUG9sbGluZyB0aGVuIFwiPGJyPiN7QHRleHQucmV0cnlpbmd9ICN7cmV0cmllc31cIiBlbHNlIFwiXCJcbiAgICBAJGVsLmZpbmQoXCIuc3RhdHVzXCIpLmh0bWwgbWVzc2FnZSArIHBvbGxpbmdcblxuICByZW5kZXI6IC0+XG5cbiAgICBpZiBub3QgTW9kZXJuaXpyLmdlb2xvY2F0aW9uXG4gICAgICBcbiAgICAgIEAkZWwuaHRtbCBAdGV4dC5ub3RTdXBwb3J0ZWRcblxuICAgICAgQHBvc2l0aW9uID0gQGVhc2lmeShudWxsKVxuXG4gICAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiAgICAgIEB0cmlnZ2VyIFwicmVhZHlcIlxuXG4gICAgZWxzZVxuICAgICAgdW5sZXNzIEBkYXRhRW50cnlcbiAgICAgICAgcHJldmlvdXMgPSBAcGFyZW50LnBhcmVudC5yZXN1bHQuZ2V0QnlIYXNoKEBtb2RlbC5nZXQoJ2hhc2gnKSlcblxuICAgICAgaWYgcHJldmlvdXNcbiAgICAgICAgbGF0ICA9IHByZXZpb3VzLmxhdFxuICAgICAgICBsb25nID0gcHJldmlvdXMubG9uZ1xuICAgICAgICBhY2MgID0gcHJldmlvdXMuYWNjXG4gICAgICAgIEAkZWwuaHRtbCBcIlxuICAgICAgICAgIDxzZWN0aW9uPlxuICAgICAgICAgICAgPGgzPiN7QHRleHQuc2F2ZWRSZWFkaW5nfTwvaDM+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdncHNfc2F2ZWQnPlxuICAgICAgICAgICAgICA8dGFibGU+XG4gICAgICAgICAgICAgICAgPHRyPjx0ZD4je0B0ZXh0LmxhdGl0dWRlfTwvdGQ+IDx0ZD4je2xhdH08L3RkPjwvdHI+XG4gICAgICAgICAgICAgICAgPHRyPjx0ZD4je0B0ZXh0LmxvbmdpdHVkZX08L3RkPjx0ZD4je2xvbmd9PC90ZD48L3RyPlxuICAgICAgICAgICAgICAgIDx0cj48dGQ+I3tAdGV4dC5hY2N1cmFjeX08L3RkPiA8dGQ+I3thY2N9PC90ZD48L3RyPlxuICAgICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIFwiXG4gICAgICBlbHNlXG4gICAgICAgIEAkZWwuaHRtbCBcIlxuICAgICAgICAgIDxzZWN0aW9uPlxuICAgICAgICAgICAgPGgzPiN7QHRleHQuYmVzdFJlYWRpbmd9PC9oMz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2dwc19iZXN0Jz48L2Rpdj48YnV0dG9uIGNsYXNzPSdjbGVhciBjb21tYW5kJz4je0B0ZXh0LmNsZWFyfTwvYnV0dG9uPlxuICAgICAgICAgICAgPGgzPiN7QHRleHQuY3VycmVudFJlYWRpbmd9PC9oMz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2dwc19jdXJyZW50Jz48L2Rpdj5cbiAgICAgICAgICA8L3NlY3Rpb24+XG4gICAgICAgICAgPHNlY3Rpb24+XG4gICAgICAgICAgICA8aDI+I3tAdGV4dC5ncHNTdGF0dXN9PC9oMj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J3N0YXR1cyc+I3tAdGV4dC5zZWFyY2hpbmd9PC9kaXY+XG4gICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgIFwiXG4gICAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiAgICAgIEB0cmlnZ2VyIFwicmVhZHlcIlxuICAgICAgQHBvbGwoKVxuICBcbiAgZ2V0UmVzdWx0OiAtPlxuICAgIHByZXZpb3VzID0gQHBhcmVudC5wYXJlbnQucmVzdWx0LmdldEJ5SGFzaChAbW9kZWwuZ2V0KCdoYXNoJykpXG4gICAgcmV0dXJuIHByZXZpb3VzIGlmIHByZXZpb3VzXG4gICAgcmV0dXJuIEBwb3NpdGlvbiB8fCB7fVxuXG4gIGdldFNraXBwZWQ6IC0+XG4gICAgcmV0dXJuIEBwb3NpdGlvbiB8fCB7fVxuXG4gIG9uQ2xvc2U6IC0+XG4gICAgQHN0b3BQb2xsaW5nID0gdHJ1ZVxuXG4gIGlzVmFsaWQ6IC0+XG4gICAgdHJ1ZVxuXG4gIHNob3dFcnJvcnM6IC0+XG4gICAgdHJ1ZVxuIiwidmFyIEdwc1J1blZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuR3BzUnVuVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChHcHNSdW5WaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBHcHNSdW5WaWV3KCkge1xuICAgIHRoaXMucG9sbCA9IGJpbmQodGhpcy5wb2xsLCB0aGlzKTtcbiAgICByZXR1cm4gR3BzUnVuVmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEdwc1J1blZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiR3BzUnVuVmlld1wiO1xuXG4gIEdwc1J1blZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICAnY2xpY2sgLmNsZWFyJzogJ2NsZWFyJ1xuICB9O1xuXG4gIEdwc1J1blZpZXcucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5wb3NpdGlvbiA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlRGlzcGxheSgpO1xuICB9O1xuXG4gIEdwc1J1blZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5pMThuKCk7XG4gICAgdGhpcy5tb2RlbCA9IG9wdGlvbnMubW9kZWw7XG4gICAgdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgICB0aGlzLmRhdGFFbnRyeSA9IG9wdGlvbnMuZGF0YUVudHJ5O1xuICAgIHRoaXMucG9zaXRpb24gPSBudWxsO1xuICAgIHJldHVybiB0aGlzLnJldHJ5Q291bnQgPSAwO1xuICB9O1xuXG4gIEdwc1J1blZpZXcucHJvdG90eXBlLmkxOG4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0ID0ge1xuICAgICAgXCJjbGVhclwiOiB0KCdHcHNSdW5WaWV3LmJ1dHRvbi5jbGVhcicpLFxuICAgICAgXCJnb29kXCI6IHQoJ0dwc1J1blZpZXcubGFiZWwuZ29vZCcpLFxuICAgICAgXCJva1wiOiB0KCdHcHNSdW5WaWV3LmxhYmVsLm9rJyksXG4gICAgICBcInBvb3JcIjogdCgnR3BzUnVuVmlldy5sYWJlbC5wb29yJyksXG4gICAgICBcImxhdGl0dWRlXCI6IHQoJ0dwc1J1blZpZXcubGFiZWwubGF0aXR1ZGUnKSxcbiAgICAgIFwibG9uZ2l0dWRlXCI6IHQoJ0dwc1J1blZpZXcubGFiZWwubG9uZ2l0dWRlJyksXG4gICAgICBcImFjY3VyYWN5XCI6IHQoJ0dwc1J1blZpZXcubGFiZWwuYWNjdXJhY3knKSxcbiAgICAgIFwibWV0ZXJzXCI6IHQoJ0dwc1J1blZpZXcubGFiZWwubWV0ZXJzJyksXG4gICAgICBcInNhdmVkUmVhZGluZ1wiOiB0KCdHcHNSdW5WaWV3LmxhYmVsLnNhdmVkX3JlYWRpbmcnKSxcbiAgICAgIFwiY3VycmVudFJlYWRpbmdcIjogdCgnR3BzUnVuVmlldy5sYWJlbC5jdXJyZW50X3JlYWRpbmcnKSxcbiAgICAgIFwiYmVzdFJlYWRpbmdcIjogdCgnR3BzUnVuVmlldy5sYWJlbC5iZXN0X3JlYWRpbmcnKSxcbiAgICAgIFwiZ3BzU3RhdHVzXCI6IHQoJ0dwc1J1blZpZXcubGFiZWwuZ3BzX3N0YXR1cycpLFxuICAgICAgXCJncHNPa1wiOiB0KCdHcHNSdW5WaWV3Lm1lc3NhZ2UuZ3BzX29rJyksXG4gICAgICBcInJldHJ5aW5nXCI6IHQoJ0dwc1J1blZpZXcubWVzc2FnZS5yZXRyeWluZycpLFxuICAgICAgXCJzZWFyY2hpbmdcIjogdCgnR3BzUnVuVmlldy5tZXNzYWdlLnNlYXJjaGluZycpLFxuICAgICAgXCJub3RTdXBwb3J0ZWRcIjogXyh0KCdHcHNSdW5WaWV3Lm1lc3NhZ2Uubm90X3N1cHBvcnRlZCcpKS5lc2NhcGUoKVxuICAgIH07XG4gIH07XG5cbiAgR3BzUnVuVmlldy5wcm90b3R5cGUucG9sbCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgICAgIF90aGlzLnVwZGF0ZURpc3BsYXkocG9zaXRpb24pO1xuICAgICAgICBfdGhpcy51cGRhdGVQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgIF90aGlzLnVwZGF0ZVN0YXR1cyhfdGhpcy50ZXh0Lmdwc09rKTtcbiAgICAgICAgX3RoaXMucmV0cnlDb3VudCA9IDA7XG4gICAgICAgIGlmICghX3RoaXMuc3RvcFBvbGxpbmcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChfdGhpcy5wb2xsKCksIDUgKiAxMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSh0aGlzKSwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocG9zaXRpb25FcnJvcikge1xuICAgICAgICBfdGhpcy51cGRhdGVTdGF0dXMocG9zaXRpb25FcnJvci5tZXNzYWdlKTtcbiAgICAgICAgaWYgKCFfdGhpcy5zdG9wUG9sbGluZykge1xuICAgICAgICAgIHNldFRpbWVvdXQoX3RoaXMucG9sbCgpLCA1ICogMTAwMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzLnJldHJ5Q291bnQrKztcbiAgICAgIH07XG4gICAgfSkodGhpcyksIHtcbiAgICAgIG1heGltdW1BZ2U6IDEwICogMTAwMCxcbiAgICAgIHRpbWVvdXQ6IDMwICogMTAwMCxcbiAgICAgIGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIEdwc1J1blZpZXcucHJvdG90eXBlLmVhc2lmeSA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XG4gICAgdmFyIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgcmVmNSwgcmVmNjtcbiAgICByZXR1cm4ge1xuICAgICAgbGF0OiAocG9zaXRpb24gIT0gbnVsbCA/IChyZWYgPSBwb3NpdGlvbi5jb29yZHMpICE9IG51bGwgPyByZWYubGF0aXR1ZGUgOiB2b2lkIDAgOiB2b2lkIDApICE9IG51bGwgPyBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUgOiBcIi4uLlwiLFxuICAgICAgbG9uZzogKHBvc2l0aW9uICE9IG51bGwgPyAocmVmMSA9IHBvc2l0aW9uLmNvb3JkcykgIT0gbnVsbCA/IHJlZjEubG9uZ2l0dWRlIDogdm9pZCAwIDogdm9pZCAwKSAhPSBudWxsID8gcG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSA6IFwiLi4uXCIsXG4gICAgICBhbHQ6IChwb3NpdGlvbiAhPSBudWxsID8gKHJlZjIgPSBwb3NpdGlvbi5jb29yZHMpICE9IG51bGwgPyByZWYyLmFsdGl0dWRlIDogdm9pZCAwIDogdm9pZCAwKSAhPSBudWxsID8gcG9zaXRpb24uY29vcmRzLmFsdGl0dWRlIDogXCIuLi5cIixcbiAgICAgIGFjYzogKHBvc2l0aW9uICE9IG51bGwgPyAocmVmMyA9IHBvc2l0aW9uLmNvb3JkcykgIT0gbnVsbCA/IHJlZjMuYWNjdXJhY3kgOiB2b2lkIDAgOiB2b2lkIDApICE9IG51bGwgPyBwb3NpdGlvbi5jb29yZHMuYWNjdXJhY3kgOiBcIi4uLlwiLFxuICAgICAgYWx0QWNjOiAocG9zaXRpb24gIT0gbnVsbCA/IChyZWY0ID0gcG9zaXRpb24uY29vcmRzKSAhPSBudWxsID8gcmVmNC5hbHRpdHVkZUFjY3VyYWN5IDogdm9pZCAwIDogdm9pZCAwKSAhPSBudWxsID8gcG9zaXRpb24uY29vcmRzLmFsdGl0dWRlQWNjdXJhY3kgOiBcIi4uLlwiLFxuICAgICAgaGVhZGluZzogKHBvc2l0aW9uICE9IG51bGwgPyAocmVmNSA9IHBvc2l0aW9uLmNvb3JkcykgIT0gbnVsbCA/IHJlZjUuaGVhZGluZyA6IHZvaWQgMCA6IHZvaWQgMCkgIT0gbnVsbCA/IHBvc2l0aW9uLmNvb3Jkcy5oZWFkaW5nIDogXCIuLi5cIixcbiAgICAgIHNwZWVkOiAocG9zaXRpb24gIT0gbnVsbCA/IChyZWY2ID0gcG9zaXRpb24uY29vcmRzKSAhPSBudWxsID8gcmVmNi5zcGVlZCA6IHZvaWQgMCA6IHZvaWQgMCkgIT0gbnVsbCA/IHBvc2l0aW9uLmNvb3Jkcy5zcGVlZCA6IFwiLi4uXCIsXG4gICAgICB0aW1lc3RhbXA6IChwb3NpdGlvbiAhPSBudWxsID8gcG9zaXRpb24udGltZXN0YW1wIDogdm9pZCAwKSAhPSBudWxsID8gcG9zaXRpb24udGltZXN0YW1wIDogXCIuLi5cIlxuICAgIH07XG4gIH07XG5cbiAgR3BzUnVuVmlldy5wcm90b3R5cGUudXBkYXRlUG9zaXRpb24gPSBmdW5jdGlvbihuZXdQb3NpdGlvbikge1xuICAgIHZhciByZWY7XG4gICAgbmV3UG9zaXRpb24gPSB0aGlzLmVhc2lmeShuZXdQb3NpdGlvbik7XG4gICAgaWYgKHRoaXMucG9zaXRpb24gPT0gbnVsbCkge1xuICAgICAgdGhpcy5wb3NpdGlvbiA9IG5ld1Bvc2l0aW9uO1xuICAgIH1cbiAgICBpZiAoKCgobmV3UG9zaXRpb24gIT0gbnVsbCA/IG5ld1Bvc2l0aW9uLmFjYyA6IHZvaWQgMCkgIT0gbnVsbCkgJiYgKCgocmVmID0gdGhpcy5wb3NpdGlvbikgIT0gbnVsbCA/IHJlZi5hY2MgOiB2b2lkIDApICE9IG51bGwpKSAmJiBuZXdQb3NpdGlvbi5hY2MgPD0gdGhpcy5wb3NpdGlvbi5hY2MpIHtcbiAgICAgIHJldHVybiB0aGlzLnBvc2l0aW9uID0gbmV3UG9zaXRpb247XG4gICAgfVxuICB9O1xuXG4gIEdwc1J1blZpZXcucHJvdG90eXBlLnVwZGF0ZURpc3BsYXkgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuICAgIHZhciBhY2MsIGRhdGEsIGVsLCBodG1sLCBpLCBqLCBsYXQsIGxlbiwgbG9uZywgcG9zLCBwb3NpdGlvbnMsIHJlc3VsdHM7XG4gICAgcG9zaXRpb24gPSB0aGlzLmVhc2lmeShwb3NpdGlvbik7XG4gICAgcG9zaXRpb25zID0gW1xuICAgICAge1xuICAgICAgICBlbDogdGhpcy4kZWwuZmluZChcIi5ncHNfY3VycmVudFwiKSxcbiAgICAgICAgZGF0YTogcG9zaXRpb25cbiAgICAgIH0sIHtcbiAgICAgICAgZWw6IHRoaXMuJGVsLmZpbmQoXCIuZ3BzX2Jlc3RcIiksXG4gICAgICAgIGRhdGE6IHRoaXMucG9zaXRpb25cbiAgICAgIH1cbiAgICBdO1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcG9zaXRpb25zLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgcG9zID0gcG9zaXRpb25zW2ldO1xuICAgICAgZGF0YSA9IHBvcy5kYXRhO1xuICAgICAgZWwgPSBwb3MuZWw7XG4gICAgICBsYXQgPSAoZGF0YSAhPSBudWxsID8gZGF0YS5sYXQgOiB2b2lkIDApID8gcGFyc2VGbG9hdChkYXRhLmxhdCkudG9GaXhlZCg0KSA6IFwiLi4uXCI7XG4gICAgICBsb25nID0gKGRhdGEgIT0gbnVsbCA/IGRhdGEubG9uZyA6IHZvaWQgMCkgPyBwYXJzZUZsb2F0KGRhdGEubG9uZykudG9GaXhlZCg0KSA6IFwiLi4uXCI7XG4gICAgICBhY2MgPSAoZGF0YSAhPSBudWxsID8gZGF0YS5hY2MgOiB2b2lkIDApID8gcGFyc2VJbnQoZGF0YS5hY2MpICsgKFwiIFwiICsgdGhpcy50ZXh0Lm1ldGVycykgOiBcIi4uLlwiO1xuICAgICAgYWNjID0gYWNjICsgKHBhcnNlSW50KGRhdGEgIT0gbnVsbCA/IGRhdGEuYWNjIDogdm9pZCAwKSA8IDUwID8gXCIoXCIgKyB0aGlzLnRleHQuZ29vZCArIFwiKVwiIDogcGFyc2VJbnQoZGF0YSAhPSBudWxsID8gZGF0YS5hY2MgOiB2b2lkIDApID4gMTAwID8gXCIoXCIgKyB0aGlzLnRleHQucG9vciArIFwiKVwiIDogXCIoXCIgKyB0aGlzLnRleHQub2sgKyBcIilcIik7XG4gICAgICBodG1sID0gXCI8dGFibGU+IDx0cj48dGQ+XCIgKyB0aGlzLnRleHQubGF0aXR1ZGUgKyBcIjwvdGQ+IDx0ZD5cIiArIGxhdCArIFwiPC90ZD48L3RyPiA8dHI+PHRkPlwiICsgdGhpcy50ZXh0LmxvbmdpdHVkZSArIFwiPC90ZD48dGQ+XCIgKyBsb25nICsgXCI8L3RkPjwvdHI+IDx0cj48dGQ+XCIgKyB0aGlzLnRleHQuYWNjdXJhY3kgKyBcIjwvdGQ+IDx0ZD5cIiArIGFjYyArIFwiPC90ZD48L3RyPiA8L3RhYmxlPlwiO1xuICAgICAgcmVzdWx0cy5wdXNoKGVsLmh0bWwoaHRtbCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBHcHNSdW5WaWV3LnByb3RvdHlwZS51cGRhdGVTdGF0dXMgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgdmFyIHBvbGxpbmcsIHJldHJpZXM7XG4gICAgaWYgKG1lc3NhZ2UgPT0gbnVsbCkge1xuICAgICAgbWVzc2FnZSA9ICcnO1xuICAgIH1cbiAgICByZXRyaWVzID0gdGhpcy5yZXRyeUNvdW50ID4gMCA/IHQoJ0dwc1J1blZpZXcubWVzc2FnZS5hdHRlbXB0Jywge1xuICAgICAgY291bnQ6IHRoaXMucmV0cnlDb3VudCArIDFcbiAgICB9KSA6IFwiXCI7XG4gICAgcG9sbGluZyA9ICF0aGlzLnN0b3BQb2xsaW5nID8gXCI8YnI+XCIgKyB0aGlzLnRleHQucmV0cnlpbmcgKyBcIiBcIiArIHJldHJpZXMgOiBcIlwiO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLnN0YXR1c1wiKS5odG1sKG1lc3NhZ2UgKyBwb2xsaW5nKTtcbiAgfTtcblxuICBHcHNSdW5WaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYWNjLCBsYXQsIGxvbmcsIHByZXZpb3VzO1xuICAgIGlmICghTW9kZXJuaXpyLmdlb2xvY2F0aW9uKSB7XG4gICAgICB0aGlzLiRlbC5odG1sKHRoaXMudGV4dC5ub3RTdXBwb3J0ZWQpO1xuICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMuZWFzaWZ5KG51bGwpO1xuICAgICAgdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gICAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVhZHlcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghdGhpcy5kYXRhRW50cnkpIHtcbiAgICAgICAgcHJldmlvdXMgPSB0aGlzLnBhcmVudC5wYXJlbnQucmVzdWx0LmdldEJ5SGFzaCh0aGlzLm1vZGVsLmdldCgnaGFzaCcpKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICBsYXQgPSBwcmV2aW91cy5sYXQ7XG4gICAgICAgIGxvbmcgPSBwcmV2aW91cy5sb25nO1xuICAgICAgICBhY2MgPSBwcmV2aW91cy5hY2M7XG4gICAgICAgIHRoaXMuJGVsLmh0bWwoXCI8c2VjdGlvbj4gPGgzPlwiICsgdGhpcy50ZXh0LnNhdmVkUmVhZGluZyArIFwiPC9oMz4gPGRpdiBjbGFzcz0nZ3BzX3NhdmVkJz4gPHRhYmxlPiA8dHI+PHRkPlwiICsgdGhpcy50ZXh0LmxhdGl0dWRlICsgXCI8L3RkPiA8dGQ+XCIgKyBsYXQgKyBcIjwvdGQ+PC90cj4gPHRyPjx0ZD5cIiArIHRoaXMudGV4dC5sb25naXR1ZGUgKyBcIjwvdGQ+PHRkPlwiICsgbG9uZyArIFwiPC90ZD48L3RyPiA8dHI+PHRkPlwiICsgdGhpcy50ZXh0LmFjY3VyYWN5ICsgXCI8L3RkPiA8dGQ+XCIgKyBhY2MgKyBcIjwvdGQ+PC90cj4gPC90YWJsZT4gPC9kaXY+XCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kZWwuaHRtbChcIjxzZWN0aW9uPiA8aDM+XCIgKyB0aGlzLnRleHQuYmVzdFJlYWRpbmcgKyBcIjwvaDM+IDxkaXYgY2xhc3M9J2dwc19iZXN0Jz48L2Rpdj48YnV0dG9uIGNsYXNzPSdjbGVhciBjb21tYW5kJz5cIiArIHRoaXMudGV4dC5jbGVhciArIFwiPC9idXR0b24+IDxoMz5cIiArIHRoaXMudGV4dC5jdXJyZW50UmVhZGluZyArIFwiPC9oMz4gPGRpdiBjbGFzcz0nZ3BzX2N1cnJlbnQnPjwvZGl2PiA8L3NlY3Rpb24+IDxzZWN0aW9uPiA8aDI+XCIgKyB0aGlzLnRleHQuZ3BzU3RhdHVzICsgXCI8L2gyPiA8ZGl2IGNsYXNzPSdzdGF0dXMnPlwiICsgdGhpcy50ZXh0LnNlYXJjaGluZyArIFwiPC9kaXY+IDwvc2VjdGlvbj5cIik7XG4gICAgICB9XG4gICAgICB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgICAgIHRoaXMudHJpZ2dlcihcInJlYWR5XCIpO1xuICAgICAgcmV0dXJuIHRoaXMucG9sbCgpO1xuICAgIH1cbiAgfTtcblxuICBHcHNSdW5WaWV3LnByb3RvdHlwZS5nZXRSZXN1bHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJldmlvdXM7XG4gICAgcHJldmlvdXMgPSB0aGlzLnBhcmVudC5wYXJlbnQucmVzdWx0LmdldEJ5SGFzaCh0aGlzLm1vZGVsLmdldCgnaGFzaCcpKTtcbiAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgIHJldHVybiBwcmV2aW91cztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucG9zaXRpb24gfHwge307XG4gIH07XG5cbiAgR3BzUnVuVmlldy5wcm90b3R5cGUuZ2V0U2tpcHBlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uIHx8IHt9O1xuICB9O1xuXG4gIEdwc1J1blZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9wUG9sbGluZyA9IHRydWU7XG4gIH07XG5cbiAgR3BzUnVuVmlldy5wcm90b3R5cGUuaXNWYWxpZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIEdwc1J1blZpZXcucHJvdG90eXBlLnNob3dFcnJvcnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICByZXR1cm4gR3BzUnVuVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIEdwc0VkaXRWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZSA6IFwiR3BzRWRpdFZpZXdcIlxuXG4gIGluaXRpYWxpemU6ICggb3B0aW9ucyApIC0+XG4gICAgQG1vZGVsID0gb3B0aW9ucy5tb2RlbFxuICAgIEBwYXJlbnQgPSBvcHRpb25zLnBhcmVudFxuXG4gIHJlbmRlcjogLT4gIyBkbyBub3RoaW5nXG4gICAgc2ltcGxlTW9kZSA9IEBtb2RlbC5nZXQoJ3NpbXBsZU1vZGUnKVxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICA8bGFiZWw+U2ltcGxlIE1vZGU8L2xhYmVsPjxicj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgIDxkaXYgaWQ9J3NpbXBsZV9tb2RlX3JhZGlvJyBjbGFzcz0nYnV0dG9uc2V0Jz5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J3NpbXBsZV9tb2RlX3RydWUnPlllczwvbGFiZWw+PGlucHV0IG5hbWU9J3NpbXBsZV9tb2RlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnIGlkPSdzaW1wbGVfbW9kZV90cnVlJyAjeydjaGVja2VkJyBpZiBzaW1wbGVNb2RlfT5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J3NpbXBsZV9tb2RlX2ZhbHNlJz5ObzwvbGFiZWw+PGlucHV0IG5hbWU9J3NpbXBsZV9tb2RlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0nc2ltcGxlX21vZGVfZmFsc2UnICN7J2NoZWNrZWQnIGlmIG5vdCBzaW1wbGVNb2RlfT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBcIlxuXG4gIHNhdmU6IC0+XG4gICAgIyBzaW1wbGVfbW9kZV90cnVlIHdpbGwgYWx3YXlzIGJlIHRoZSBzdGF0ZSBvZiBzaW1wbGVNb2RlLlxuICAgIHNpbXBsZU1vZGVTdGF0ZSA9ICQodGhpcy4kZWwuZmluZCgnI3NpbXBsZV9tb2RlX3RydWUnKVswXSkuaXMoJzpjaGVja2VkJylcbiAgICBAbW9kZWwuc2V0KCdzaW1wbGVNb2RlJywgc2ltcGxlTW9kZVN0YXRlKVxuICBcbiAgaXNWYWxpZDogLT4gdHJ1ZVxuIiwidmFyIEdwc0VkaXRWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuR3BzRWRpdFZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoR3BzRWRpdFZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEdwc0VkaXRWaWV3KCkge1xuICAgIHJldHVybiBHcHNFZGl0Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEdwc0VkaXRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIkdwc0VkaXRWaWV3XCI7XG5cbiAgR3BzRWRpdFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5tb2RlbCA9IG9wdGlvbnMubW9kZWw7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIH07XG5cbiAgR3BzRWRpdFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzaW1wbGVNb2RlO1xuICAgIHNpbXBsZU1vZGUgPSB0aGlzLm1vZGVsLmdldCgnc2ltcGxlTW9kZScpO1xuICAgIHJldHVybiB0aGlzLiRlbC5odG1sKFwiPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWw+U2ltcGxlIE1vZGU8L2xhYmVsPjxicj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8ZGl2IGlkPSdzaW1wbGVfbW9kZV9yYWRpbycgY2xhc3M9J2J1dHRvbnNldCc+IDxsYWJlbCBmb3I9J3NpbXBsZV9tb2RlX3RydWUnPlllczwvbGFiZWw+PGlucHV0IG5hbWU9J3NpbXBsZV9tb2RlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnIGlkPSdzaW1wbGVfbW9kZV90cnVlJyBcIiArIChzaW1wbGVNb2RlID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8bGFiZWwgZm9yPSdzaW1wbGVfbW9kZV9mYWxzZSc+Tm88L2xhYmVsPjxpbnB1dCBuYW1lPSdzaW1wbGVfbW9kZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZScgaWQ9J3NpbXBsZV9tb2RlX2ZhbHNlJyBcIiArICghc2ltcGxlTW9kZSA/ICdjaGVja2VkJyA6IHZvaWQgMCkgKyBcIj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj5cIik7XG4gIH07XG5cbiAgR3BzRWRpdFZpZXcucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2ltcGxlTW9kZVN0YXRlO1xuICAgIHNpbXBsZU1vZGVTdGF0ZSA9ICQodGhpcy4kZWwuZmluZCgnI3NpbXBsZV9tb2RlX3RydWUnKVswXSkuaXMoJzpjaGVja2VkJyk7XG4gICAgcmV0dXJuIHRoaXMubW9kZWwuc2V0KCdzaW1wbGVNb2RlJywgc2ltcGxlTW9kZVN0YXRlKTtcbiAgfTtcblxuICBHcHNFZGl0Vmlldy5wcm90b3R5cGUuaXNWYWxpZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIHJldHVybiBHcHNFZGl0VmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIEdwc1ByaW50VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiR3BzXCJcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBAbW9kZWwgID0gb3B0aW9ucy5tb2RlbFxuICAgIEBwYXJlbnQgPSBvcHRpb25zLnBhcmVudFxuICBcbiAgcmVuZGVyOiAtPlxuICAgIHJldHVybiBpZiBAZm9ybWF0IGlzIFwic3RpbXVsaVwiIG9yIEBmb3JtYXQgaXMgXCJiYWNrdXBcIlxuXG4gICAgaWYgQGZvcm1hdCBpcyBcImNvbnRlbnRcIlxuICAgICAgQCRlbC5odG1sIFwiQ2FwdHVyZSBHcHMgbG9jYXRpb25cIlxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG4iLCJ2YXIgR3BzUHJpbnRWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuR3BzUHJpbnRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEdwc1ByaW50Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gR3BzUHJpbnRWaWV3KCkge1xuICAgIHJldHVybiBHcHNQcmludFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBHcHNQcmludFZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiR3BzXCI7XG5cbiAgR3BzUHJpbnRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIHJldHVybiB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICB9O1xuXG4gIEdwc1ByaW50Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZm9ybWF0ID09PSBcInN0aW11bGlcIiB8fCB0aGlzLmZvcm1hdCA9PT0gXCJiYWNrdXBcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5mb3JtYXQgPT09IFwiY29udGVudFwiKSB7XG4gICAgICB0aGlzLiRlbC5odG1sKFwiQ2FwdHVyZSBHcHMgbG9jYXRpb25cIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICByZXR1cm4gR3BzUHJpbnRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgUmVzdWx0IGV4dGVuZHMgQmFja2JvbmUuTW9kZWxcblxuICB1cmw6IFwicmVzdWx0XCJcblxuICBpbml0aWFsaXplOiAoIG9wdGlvbnMgKSAtPlxuXG4gICAgIyBjb3VsZCB1c2UgZGVmYXVsdHMgYnV0IGl0IG1lc3NlcyB0aGluZ3MgdXBcbiAgICBpZiBvcHRpb25zLmJsYW5rID09IHRydWVcblxuICAgICAgQHNldFxuICAgICAgICAnc3VidGVzdERhdGEnICAgICAgOiBbXVxuICAgICAgICAnc3RhcnRUaW1lJyAgICAgICAgOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpXG4gICAgICAgICdlbnVtZXJhdG9yJyAgICAgICA6IFRhbmdlcmluZS51c2VyLm5hbWUoKVxuICAgICAgICAndGFuZ2VyaW5lVmVyc2lvbicgOiBUYW5nZXJpbmUudmVyc2lvblxuICAgICAgICAnZGV2aWNlJyAgICAgICAgICAgOiBuYXZpZ2F0b3IudXNlckFnZW50XG4gICAgICAgICdpbnN0YW5jZUlkJyAgICAgICA6IFRhbmdlcmluZS5zZXR0aW5ncy5nZXRTdHJpbmcgJ2luc3RhbmNlSWQnXG5cbiAgICAgIEB1bnNldCBcImJsYW5rXCIgIyBvcHRpb25zIGF1dG9tYXRpY2FsbHkgZ2V0IGFkZGVkIHRvIHRoZSBtb2RlbC4gTGFtZS5cblxuICBhZGQ6ICggc3VidGVzdERhdGFFbGVtZW50LCBjYWxsYmFja3MgPSB7fSkgLT5cbiAgICBAc2V0U3VidGVzdERhdGEgc3VidGVzdERhdGFFbGVtZW50LCBjYWxsYmFja3NcbiAgICBAc2F2ZSBudWxsLFxuICAgICAgc3VjY2VzczogY2FsbGJhY2tzLnN1Y2Nlc3MgfHwgJC5ub29wXG4gICAgICBlcnJvcjogICBjYWxsYmFja3MuZXJyb3IgICB8fCAkLm5vb3BcblxuICBpbnNlcnQ6IChuZXdFbGVtZW50KSAtPlxuICAgIG9sZFN1YnRlc3REYXRhID0gQGdldChcInN1YnRlc3REYXRhXCIpXG4gICAgbmV3U3VidGVzdERhdGEgPSBvbGRTdWJ0ZXN0RGF0YVxuICAgIGZvciBvbGRFbGVtZW50LCBpIGluIG9sZFN1YnRlc3REYXRhXG4gICAgICBpZiBvbGRFbGVtZW50LnN1YnRlc3RJZCBpcyBuZXdFbGVtZW50LnN1YnRlc3RJZFxuICAgICAgICBuZXdTdWJ0ZXN0RGF0YVtpXSA9IG5ld0VsZW1lbnRcbiAgICAgICAgYnJlYWtcblxuICAgIEBzZXQgXCJzdWJ0ZXN0RGF0YVwiLCBuZXdTdWJ0ZXN0RGF0YVxuXG5cbiAgc2V0U3VidGVzdERhdGE6IChzdWJ0ZXN0RGF0YUVsZW1lbnQsIHN1YnRlc3RJZCkgLT5cbiAgICBzdWJ0ZXN0RGF0YUVsZW1lbnRbJ3RpbWVzdGFtcCddID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuICAgIHN1YnRlc3REYXRhID0gQGdldCAnc3VidGVzdERhdGEnXG4gICAgc3VidGVzdERhdGEucHVzaCBzdWJ0ZXN0RGF0YUVsZW1lbnRcbiAgICBAc2V0ICdzdWJ0ZXN0RGF0YScsIHN1YnRlc3REYXRhXG5cbiAgZ2V0VmFyaWFibGU6ICgga2V5ICkgLT5cbiAgICBmb3Igc3VidGVzdCBpbiBAZ2V0KFwic3VidGVzdERhdGFcIilcbiAgICAgIGRhdGEgPSBzdWJ0ZXN0LmRhdGFcbiAgICAgIGlmIGRhdGEubGFiZWxzP1xuICAgICAgICBmb3IgbGFiZWwsIGkgaW4gZGF0YS5sYWJlbHNcbiAgICAgICAgICByZXR1cm4gZGF0YS5sb2NhdGlvbltpXSBpZiBsYWJlbCBpcyBrZXlcbiAgICAgIGVsc2VcbiAgICAgICAgZm9yIHZhcmlhYmxlLCB2YWx1ZSBvZiBkYXRhXG4gICAgICAgICAgaWYgdmFyaWFibGUgPT0ga2V5XG4gICAgICAgICAgICBpZiBfLmlzT2JqZWN0KHZhbHVlKVxuICAgICAgICAgICAgICByZXR1cm4gXy5jb21wYWN0KCgobmFtZSBpZiBzdGF0ZSA9PSBcImNoZWNrZWRcIikgZm9yIG5hbWUsIHN0YXRlIG9mIHZhbHVlKSlcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgcmV0dXJuIG51bGxcblxuICBnZXRCeUhhc2g6ICggaGFzaCApIC0+XG4gICAgaWYgaGFzaFxuICAgICAgZm9yIHN1YnRlc3QgaW4gQGdldChcInN1YnRlc3REYXRhXCIpXG4gICAgICAgIGlmIGhhc2ggaXMgc3VidGVzdC5zdWJ0ZXN0SGFzaFxuICAgICAgICAgIHJldHVybiBzdWJ0ZXN0LmRhdGFcbiAgICByZXR1cm4gbnVsbFxuXG4gIGdldEdyaWRTY29yZTogKGlkKSAtPlxuICAgIGZvciBkYXR1bSBpbiBAZ2V0ICdzdWJ0ZXN0RGF0YSdcbiAgICAgIHJldHVybiBwYXJzZUludChkYXR1bS5kYXRhLmF0dGVtcHRlZCkgaWYgZGF0dW0uc3VidGVzdElkID09IGlkXG5cbiAgZ2V0SXRlbVJlc3VsdENvdW50QnlWYXJpYWJsZU5hbWU6IChuYW1lLCByZXN1bHQpIC0+XG4gICAgZm91bmQgPSBmYWxzZVxuICAgIGNvdW50ID0gMFxuICAgIGZvciBkYXR1bSBpbiBAZ2V0ICdzdWJ0ZXN0RGF0YSdcbiAgICAgIGlmIGRhdHVtLmRhdGE/IGFuZCBkYXR1bS5kYXRhLnZhcmlhYmxlX25hbWU/IGFuZCBkYXR1bS5kYXRhLnZhcmlhYmxlX25hbWUgPT0gbmFtZVxuICAgICAgICBmb3VuZCA9IHRydWVcbiAgICAgICAgaXRlbXMgPSBkYXR1bS5kYXRhLml0ZW1zXG4gICAgICAgIGZvciBpdGVtIGluIGl0ZW1zXG4gICAgICAgICAgY291bnQrKyBpZiBpdGVtLml0ZW1SZXN1bHQgPT0gcmVzdWx0XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVmFyaWFibGUgbmFtZSBcXFwiI3tuYW1lfVxcXCIgbm90IGZvdW5kXCIpIGlmIG5vdCBmb3VuZFxuICAgIHJldHVybiBjb3VudFxuXG4gIGdyaWRXYXNBdXRvc3RvcHBlZDogKGlkKSAtPlxuICAgIGZvciBkYXR1bSBpbiBAZ2V0ICdzdWJ0ZXN0RGF0YSdcbiAgICAgIHJldHVybiBkYXR1bS5kYXRhLmF1dG9fc3RvcCBpZiBkYXR1bS5zdWJ0ZXN0SWQgPT0gaWRcbiIsInZhciBSZXN1bHQsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5SZXN1bHQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoUmVzdWx0LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBSZXN1bHQoKSB7XG4gICAgcmV0dXJuIFJlc3VsdC5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFJlc3VsdC5wcm90b3R5cGUudXJsID0gXCJyZXN1bHRcIjtcblxuICBSZXN1bHQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuYmxhbmsgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuc2V0KHtcbiAgICAgICAgJ3N1YnRlc3REYXRhJzogW10sXG4gICAgICAgICdzdGFydFRpbWUnOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpLFxuICAgICAgICAnZW51bWVyYXRvcic6IFRhbmdlcmluZS51c2VyLm5hbWUoKSxcbiAgICAgICAgJ3RhbmdlcmluZVZlcnNpb24nOiBUYW5nZXJpbmUudmVyc2lvbixcbiAgICAgICAgJ2RldmljZSc6IG5hdmlnYXRvci51c2VyQWdlbnQsXG4gICAgICAgICdpbnN0YW5jZUlkJzogVGFuZ2VyaW5lLnNldHRpbmdzLmdldFN0cmluZygnaW5zdGFuY2VJZCcpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGlzLnVuc2V0KFwiYmxhbmtcIik7XG4gICAgfVxuICB9O1xuXG4gIFJlc3VsdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oc3VidGVzdERhdGFFbGVtZW50LCBjYWxsYmFja3MpIHtcbiAgICBpZiAoY2FsbGJhY2tzID09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrcyA9IHt9O1xuICAgIH1cbiAgICB0aGlzLnNldFN1YnRlc3REYXRhKHN1YnRlc3REYXRhRWxlbWVudCwgY2FsbGJhY2tzKTtcbiAgICByZXR1cm4gdGhpcy5zYXZlKG51bGwsIHtcbiAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrcy5zdWNjZXNzIHx8ICQubm9vcCxcbiAgICAgIGVycm9yOiBjYWxsYmFja3MuZXJyb3IgfHwgJC5ub29wXG4gICAgfSk7XG4gIH07XG5cbiAgUmVzdWx0LnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihuZXdFbGVtZW50KSB7XG4gICAgdmFyIGksIGosIGxlbiwgbmV3U3VidGVzdERhdGEsIG9sZEVsZW1lbnQsIG9sZFN1YnRlc3REYXRhO1xuICAgIG9sZFN1YnRlc3REYXRhID0gdGhpcy5nZXQoXCJzdWJ0ZXN0RGF0YVwiKTtcbiAgICBuZXdTdWJ0ZXN0RGF0YSA9IG9sZFN1YnRlc3REYXRhO1xuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSBvbGRTdWJ0ZXN0RGF0YS5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgIG9sZEVsZW1lbnQgPSBvbGRTdWJ0ZXN0RGF0YVtpXTtcbiAgICAgIGlmIChvbGRFbGVtZW50LnN1YnRlc3RJZCA9PT0gbmV3RWxlbWVudC5zdWJ0ZXN0SWQpIHtcbiAgICAgICAgbmV3U3VidGVzdERhdGFbaV0gPSBuZXdFbGVtZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2V0KFwic3VidGVzdERhdGFcIiwgbmV3U3VidGVzdERhdGEpO1xuICB9O1xuXG4gIFJlc3VsdC5wcm90b3R5cGUuc2V0U3VidGVzdERhdGEgPSBmdW5jdGlvbihzdWJ0ZXN0RGF0YUVsZW1lbnQsIHN1YnRlc3RJZCkge1xuICAgIHZhciBzdWJ0ZXN0RGF0YTtcbiAgICBzdWJ0ZXN0RGF0YUVsZW1lbnRbJ3RpbWVzdGFtcCddID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICBzdWJ0ZXN0RGF0YSA9IHRoaXMuZ2V0KCdzdWJ0ZXN0RGF0YScpO1xuICAgIHN1YnRlc3REYXRhLnB1c2goc3VidGVzdERhdGFFbGVtZW50KTtcbiAgICByZXR1cm4gdGhpcy5zZXQoJ3N1YnRlc3REYXRhJywgc3VidGVzdERhdGEpO1xuICB9O1xuXG4gIFJlc3VsdC5wcm90b3R5cGUuZ2V0VmFyaWFibGUgPSBmdW5jdGlvbihrZXkpIHtcbiAgICB2YXIgZGF0YSwgaSwgaiwgaywgbGFiZWwsIGxlbiwgbGVuMSwgbmFtZSwgcmVmLCByZWYxLCBzdGF0ZSwgc3VidGVzdCwgdmFsdWUsIHZhcmlhYmxlO1xuICAgIHJlZiA9IHRoaXMuZ2V0KFwic3VidGVzdERhdGFcIik7XG4gICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICBzdWJ0ZXN0ID0gcmVmW2pdO1xuICAgICAgZGF0YSA9IHN1YnRlc3QuZGF0YTtcbiAgICAgIGlmIChkYXRhLmxhYmVscyAhPSBudWxsKSB7XG4gICAgICAgIHJlZjEgPSBkYXRhLmxhYmVscztcbiAgICAgICAgZm9yIChpID0gayA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgayA8IGxlbjE7IGkgPSArK2spIHtcbiAgICAgICAgICBsYWJlbCA9IHJlZjFbaV07XG4gICAgICAgICAgaWYgKGxhYmVsID09PSBrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhLmxvY2F0aW9uW2ldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXJpYWJsZSBpbiBkYXRhKSB7XG4gICAgICAgICAgdmFsdWUgPSBkYXRhW3ZhcmlhYmxlXTtcbiAgICAgICAgICBpZiAodmFyaWFibGUgPT09IGtleSkge1xuICAgICAgICAgICAgaWYgKF8uaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfLmNvbXBhY3QoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHRzO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKG5hbWUgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRlID0gdmFsdWVbbmFtZV07XG4gICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goc3RhdGUgPT09IFwiY2hlY2tlZFwiID8gbmFtZSA6IHZvaWQgMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgICB9KSgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgUmVzdWx0LnByb3RvdHlwZS5nZXRCeUhhc2ggPSBmdW5jdGlvbihoYXNoKSB7XG4gICAgdmFyIGosIGxlbiwgcmVmLCBzdWJ0ZXN0O1xuICAgIGlmIChoYXNoKSB7XG4gICAgICByZWYgPSB0aGlzLmdldChcInN1YnRlc3REYXRhXCIpO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIHN1YnRlc3QgPSByZWZbal07XG4gICAgICAgIGlmIChoYXNoID09PSBzdWJ0ZXN0LnN1YnRlc3RIYXNoKSB7XG4gICAgICAgICAgcmV0dXJuIHN1YnRlc3QuZGF0YTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBSZXN1bHQucHJvdG90eXBlLmdldEdyaWRTY29yZSA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgdmFyIGRhdHVtLCBqLCBsZW4sIHJlZjtcbiAgICByZWYgPSB0aGlzLmdldCgnc3VidGVzdERhdGEnKTtcbiAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIGRhdHVtID0gcmVmW2pdO1xuICAgICAgaWYgKGRhdHVtLnN1YnRlc3RJZCA9PT0gaWQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGRhdHVtLmRhdGEuYXR0ZW1wdGVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgUmVzdWx0LnByb3RvdHlwZS5nZXRJdGVtUmVzdWx0Q291bnRCeVZhcmlhYmxlTmFtZSA9IGZ1bmN0aW9uKG5hbWUsIHJlc3VsdCkge1xuICAgIHZhciBjb3VudCwgZGF0dW0sIGZvdW5kLCBpdGVtLCBpdGVtcywgaiwgaywgbGVuLCBsZW4xLCByZWY7XG4gICAgZm91bmQgPSBmYWxzZTtcbiAgICBjb3VudCA9IDA7XG4gICAgcmVmID0gdGhpcy5nZXQoJ3N1YnRlc3REYXRhJyk7XG4gICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICBkYXR1bSA9IHJlZltqXTtcbiAgICAgIGlmICgoZGF0dW0uZGF0YSAhPSBudWxsKSAmJiAoZGF0dW0uZGF0YS52YXJpYWJsZV9uYW1lICE9IG51bGwpICYmIGRhdHVtLmRhdGEudmFyaWFibGVfbmFtZSA9PT0gbmFtZSkge1xuICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgIGl0ZW1zID0gZGF0dW0uZGF0YS5pdGVtcztcbiAgICAgICAgZm9yIChrID0gMCwgbGVuMSA9IGl0ZW1zLmxlbmd0aDsgayA8IGxlbjE7IGsrKykge1xuICAgICAgICAgIGl0ZW0gPSBpdGVtc1trXTtcbiAgICAgICAgICBpZiAoaXRlbS5pdGVtUmVzdWx0ID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZm91bmQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhcmlhYmxlIG5hbWUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBub3QgZm91bmRcIik7XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbiAgfTtcblxuICBSZXN1bHQucHJvdG90eXBlLmdyaWRXYXNBdXRvc3RvcHBlZCA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgdmFyIGRhdHVtLCBqLCBsZW4sIHJlZjtcbiAgICByZWYgPSB0aGlzLmdldCgnc3VidGVzdERhdGEnKTtcbiAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIGRhdHVtID0gcmVmW2pdO1xuICAgICAgaWYgKGRhdHVtLnN1YnRlc3RJZCA9PT0gaWQpIHtcbiAgICAgICAgcmV0dXJuIGRhdHVtLmRhdGEuYXV0b19zdG9wO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVzdWx0O1xuXG59KShCYWNrYm9uZS5Nb2RlbCk7XG5cbiIsImNsYXNzIFJlc3VsdHMgZXh0ZW5kcyBCYWNrYm9uZS5Db2xsZWN0aW9uXG5cbiAgdXJsIDogXCJyZXN1bHRcIlxuICBtb2RlbCA6IFJlc3VsdFxuICBkYjpcbiAgICB2aWV3OiBcImJ5UGFyZW50SWRcIlxuXG4gIGNvbXBhcmF0b3I6IChtb2RlbCkgLT5cbiAgICBtb2RlbC5nZXQoJ3N0YXJ0X3RpbWUnKSB8fCAwXG5cbiAgIyBCeSBkZWZhdWx0IGluY2x1ZGUgdGhlIGRvY3NcbiAgZmV0Y2g6IChvcHRpb25zKSAtPlxuICAgIG9wdGlvbnMgPSB7fSB1bmxlc3Mgb3B0aW9ucz9cbiAgICBvcHRpb25zLmluY2x1ZGVfZG9jcyA9IHRydWUgdW5sZXNzIG9wdGlvbnMuaW5jbHVkZV9kb2NzP1xuICAgIHN1cGVyKG9wdGlvbnMpXG4iLCJ2YXIgUmVzdWx0cyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblJlc3VsdHMgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoUmVzdWx0cywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gUmVzdWx0cygpIHtcbiAgICByZXR1cm4gUmVzdWx0cy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFJlc3VsdHMucHJvdG90eXBlLnVybCA9IFwicmVzdWx0XCI7XG5cbiAgUmVzdWx0cy5wcm90b3R5cGUubW9kZWwgPSBSZXN1bHQ7XG5cbiAgUmVzdWx0cy5wcm90b3R5cGUuZGIgPSB7XG4gICAgdmlldzogXCJieVBhcmVudElkXCJcbiAgfTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS5jb21wYXJhdG9yID0gZnVuY3Rpb24obW9kZWwpIHtcbiAgICByZXR1cm4gbW9kZWwuZ2V0KCdzdGFydF90aW1lJykgfHwgMDtcbiAgfTtcblxuICBSZXN1bHRzLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmluY2x1ZGVfZG9jcyA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zLmluY2x1ZGVfZG9jcyA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBSZXN1bHRzLl9fc3VwZXJfXy5mZXRjaC5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBSZXN1bHRzO1xuXG59KShCYWNrYm9uZS5Db2xsZWN0aW9uKTtcblxuIiwiY2xhc3MgUmVzdWx0VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwicmVzdWx0X3ZpZXdcIlxuXG4gIGV2ZW50czpcbiAgICAnY2xpY2sgLnNhdmUnICAgIDogJ3NhdmUnXG4gICAgJ2NsaWNrIC5hbm90aGVyJyA6ICdhbm90aGVyJ1xuXG4gIGFub3RoZXI6IC0+XG4gICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpXG4gICAgI1RhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJyZXN0YXJ0LyN7QGFzc2Vzc21lbnQuaWR9XCIsIHRydWVcblxuICBzYXZlOiAtPlxuICAgIEBtb2RlbC5hZGRcbiAgICAgIG5hbWUgOiBcIkFzc2Vzc21lbnQgY29tcGxldGVcIlxuICAgICAgcHJvdG90eXBlOiBcImNvbXBsZXRlXCJcbiAgICAgIGRhdGEgOlxuICAgICAgICBcImNvbW1lbnRcIiA6IEAkZWwuZmluZCgnI2FkZGl0aW9uYWwtY29tbWVudHMnKS52YWwoKSB8fCBcIlwiXG4gICAgICAgIFwiZW5kX3RpbWVcIiA6IChuZXcgRGF0ZSgpKS5nZXRUaW1lKClcbiAgICAgIHN1YnRlc3RJZCA6IFwicmVzdWx0XCJcbiAgICAsXG4gICAgICBzdWNjZXNzOiA9PlxuICAgICAgICBUYW5nZXJpbmUuYWN0aXZpdHkgPSBcIlwiXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IEB0ZXh0LnNhdmVkXG4gICAgICAgIEAkZWwuZmluZCgnLnNhdmVfc3RhdHVzJykuaHRtbCBAdGV4dC5zYXZlZFxuICAgICAgICBAJGVsLmZpbmQoJy5zYXZlX3N0YXR1cycpLnJlbW92ZUNsYXNzKCdub3Rfc2F2ZWQnKVxuICAgICAgICBAJGVsLmZpbmQoJy5xdWVzdGlvbicpLmZhZGVPdXQoMjUwKVxuXG4gICAgICAgICRidXR0b24gPSBAJGVsLmZpbmQoXCJidXR0b24uc2F2ZVwiKVxuXG4gICAgICAgICRidXR0b24ucmVtb3ZlQ2xhc3MoJ3NhdmUnKS5hZGRDbGFzcygnYW5vdGhlcicpLmh0bWwgQHRleHQuYW5vdGhlclxuICAgICAgZXJyb3I6ID0+XG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiU2F2ZSBlcnJvclwiXG4gICAgICAgIEAkZWwuZmluZCgnLnNhdmVfc3RhdHVzJykuaHRtbCBcIlJlc3VsdHMgbWF5IG5vdCBoYXZlIHNhdmVkXCJcblxuXG4gIGkxOG46IC0+XG4gICAgQHRleHQgPVxuICAgICAgXCJhc3Nlc3NtZW50Q29tcGxldGVcIiA6IHQoXCJSZXN1bHRWaWV3LmxhYmVsLmFzc2Vzc21lbnRfY29tcGxldGVcIilcbiAgICAgIFwiY29tbWVudHNcIiAgICAgICAgICAgOiB0KFwiUmVzdWx0Vmlldy5sYWJlbC5jb21tZW50c1wiKVxuICAgICAgXCJzdWJ0ZXN0c0NvbXBsZXRlZFwiICA6IHQoXCJSZXN1bHRWaWV3LmxhYmVsLnN1YnRlc3RzX2NvbXBsZXRlZFwiKVxuXG4gICAgICBcInNhdmVcIiAgICAgICAgICAgICAgIDogdChcIlJlc3VsdFZpZXcuYnV0dG9uLnNhdmVcIilcbiAgICAgIFwiYW5vdGhlclwiICAgICAgICAgICAgOiB0KFwiUmVzdWx0Vmlldy5idXR0b24uYW5vdGhlclwiKVxuXG4gICAgICBcInNhdmVkXCIgICAgICAgICAgICAgIDogdChcIlJlc3VsdFZpZXcubWVzc2FnZS5zYXZlZFwiKVxuICAgICAgXCJub3RTYXZlZFwiICAgICAgICAgICA6IHQoXCJSZXN1bHRWaWV3Lm1lc3NhZ2Uubm90X3NhdmVkXCIpXG5cblxuICBpbml0aWFsaXplOiAoIG9wdGlvbnMgKSAtPlxuXG4gICAgQGkxOG4oKVxuXG4gICAgQG1vZGVsID0gb3B0aW9ucy5tb2RlbFxuICAgIEBhc3Nlc3NtZW50ID0gb3B0aW9ucy5hc3Nlc3NtZW50XG4gICAgQHNhdmVkID0gZmFsc2VcbiAgICBAcmVzdWx0U3VtVmlldyA9IG5ldyBSZXN1bHRTdW1WaWV3XG4gICAgICBtb2RlbCAgICAgICA6IEBtb2RlbFxuICAgICAgZmluaXNoQ2hlY2sgOiBmYWxzZVxuXG4gIHJlbmRlcjogLT5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgIDxoMj4je0B0ZXh0LmFzc2Vzc21lbnRDb21wbGV0ZX08L2gyPlxuXG4gICAgICA8YnV0dG9uIGNsYXNzPSdzYXZlIGNvbW1hbmQnPiN7QHRleHQuc2F2ZX08L2J1dHRvbj5cbiAgICAgIDxkaXYgY2xhc3M9J2luZm9fYm94IHNhdmVfc3RhdHVzIG5vdF9zYXZlZCc+I3tAdGV4dC5ub3RTYXZlZH08L2Rpdj5cbiAgICAgIDxicj5cblxuICAgICAgPGRpdiBjbGFzcz0ncXVlc3Rpb24nPlxuICAgICAgICA8bGFiZWwgY2xhc3M9J3Byb21wdCcgZm9yPSdhZGRpdGlvbmFsLWNvbW1lbnRzJz4je0B0ZXh0LmNvbW1lbnRzfTwvbGFiZWw+XG4gICAgICAgIDx0ZXh0YXJlYSBpZD0nYWRkaXRpb25hbC1jb21tZW50cycgY2xhc3M9J2Z1bGxfd2lkdGgnPjwvdGV4dGFyZWE+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICA8aDI+I3tAdGV4dC5zdWJ0ZXN0c0NvbXBsZXRlZH08L2gyPlxuICAgICAgICA8ZGl2IGlkPSdyZXN1bHRfc3VtJyBjbGFzcz0naW5mb19ib3gnPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgXCJcblxuICAgIEByZXN1bHRTdW1WaWV3LnNldEVsZW1lbnQoQCRlbC5maW5kKFwiI3Jlc3VsdF9zdW1cIikpXG4gICAgQHJlc3VsdFN1bVZpZXcucmVuZGVyKClcblxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuXG4gIG9uQ2xvc2U6IC0+XG4gICAgQHJlc3VsdFN1bVZpZXcuY2xvc2UoKVxuIiwidmFyIFJlc3VsdFZpZXcsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5SZXN1bHRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFJlc3VsdFZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFJlc3VsdFZpZXcoKSB7XG4gICAgcmV0dXJuIFJlc3VsdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBSZXN1bHRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcInJlc3VsdF92aWV3XCI7XG5cbiAgUmVzdWx0Vmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdjbGljayAuc2F2ZSc6ICdzYXZlJyxcbiAgICAnY2xpY2sgLmFub3RoZXInOiAnYW5vdGhlcidcbiAgfTtcblxuICBSZXN1bHRWaWV3LnByb3RvdHlwZS5hbm90aGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfTtcblxuICBSZXN1bHRWaWV3LnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWwuYWRkKHtcbiAgICAgIG5hbWU6IFwiQXNzZXNzbWVudCBjb21wbGV0ZVwiLFxuICAgICAgcHJvdG90eXBlOiBcImNvbXBsZXRlXCIsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIFwiY29tbWVudFwiOiB0aGlzLiRlbC5maW5kKCcjYWRkaXRpb25hbC1jb21tZW50cycpLnZhbCgpIHx8IFwiXCIsXG4gICAgICAgIFwiZW5kX3RpbWVcIjogKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuICAgICAgfSxcbiAgICAgIHN1YnRlc3RJZDogXCJyZXN1bHRcIlxuICAgIH0sIHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyICRidXR0b247XG4gICAgICAgICAgVGFuZ2VyaW5lLmFjdGl2aXR5ID0gXCJcIjtcbiAgICAgICAgICBVdGlscy5taWRBbGVydChfdGhpcy50ZXh0LnNhdmVkKTtcbiAgICAgICAgICBfdGhpcy4kZWwuZmluZCgnLnNhdmVfc3RhdHVzJykuaHRtbChfdGhpcy50ZXh0LnNhdmVkKTtcbiAgICAgICAgICBfdGhpcy4kZWwuZmluZCgnLnNhdmVfc3RhdHVzJykucmVtb3ZlQ2xhc3MoJ25vdF9zYXZlZCcpO1xuICAgICAgICAgIF90aGlzLiRlbC5maW5kKCcucXVlc3Rpb24nKS5mYWRlT3V0KDI1MCk7XG4gICAgICAgICAgJGJ1dHRvbiA9IF90aGlzLiRlbC5maW5kKFwiYnV0dG9uLnNhdmVcIik7XG4gICAgICAgICAgcmV0dXJuICRidXR0b24ucmVtb3ZlQ2xhc3MoJ3NhdmUnKS5hZGRDbGFzcygnYW5vdGhlcicpLmh0bWwoX3RoaXMudGV4dC5hbm90aGVyKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgVXRpbHMubWlkQWxlcnQoXCJTYXZlIGVycm9yXCIpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy4kZWwuZmluZCgnLnNhdmVfc3RhdHVzJykuaHRtbChcIlJlc3VsdHMgbWF5IG5vdCBoYXZlIHNhdmVkXCIpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBSZXN1bHRWaWV3LnByb3RvdHlwZS5pMThuID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCA9IHtcbiAgICAgIFwiYXNzZXNzbWVudENvbXBsZXRlXCI6IHQoXCJSZXN1bHRWaWV3LmxhYmVsLmFzc2Vzc21lbnRfY29tcGxldGVcIiksXG4gICAgICBcImNvbW1lbnRzXCI6IHQoXCJSZXN1bHRWaWV3LmxhYmVsLmNvbW1lbnRzXCIpLFxuICAgICAgXCJzdWJ0ZXN0c0NvbXBsZXRlZFwiOiB0KFwiUmVzdWx0Vmlldy5sYWJlbC5zdWJ0ZXN0c19jb21wbGV0ZWRcIiksXG4gICAgICBcInNhdmVcIjogdChcIlJlc3VsdFZpZXcuYnV0dG9uLnNhdmVcIiksXG4gICAgICBcImFub3RoZXJcIjogdChcIlJlc3VsdFZpZXcuYnV0dG9uLmFub3RoZXJcIiksXG4gICAgICBcInNhdmVkXCI6IHQoXCJSZXN1bHRWaWV3Lm1lc3NhZ2Uuc2F2ZWRcIiksXG4gICAgICBcIm5vdFNhdmVkXCI6IHQoXCJSZXN1bHRWaWV3Lm1lc3NhZ2Uubm90X3NhdmVkXCIpXG4gICAgfTtcbiAgfTtcblxuICBSZXN1bHRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMuaTE4bigpO1xuICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIHRoaXMuYXNzZXNzbWVudCA9IG9wdGlvbnMuYXNzZXNzbWVudDtcbiAgICB0aGlzLnNhdmVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0U3VtVmlldyA9IG5ldyBSZXN1bHRTdW1WaWV3KHtcbiAgICAgIG1vZGVsOiB0aGlzLm1vZGVsLFxuICAgICAgZmluaXNoQ2hlY2s6IGZhbHNlXG4gICAgfSk7XG4gIH07XG5cbiAgUmVzdWx0Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwuaHRtbChcIjxoMj5cIiArIHRoaXMudGV4dC5hc3Nlc3NtZW50Q29tcGxldGUgKyBcIjwvaDI+IDxidXR0b24gY2xhc3M9J3NhdmUgY29tbWFuZCc+XCIgKyB0aGlzLnRleHQuc2F2ZSArIFwiPC9idXR0b24+IDxkaXYgY2xhc3M9J2luZm9fYm94IHNhdmVfc3RhdHVzIG5vdF9zYXZlZCc+XCIgKyB0aGlzLnRleHQubm90U2F2ZWQgKyBcIjwvZGl2PiA8YnI+IDxkaXYgY2xhc3M9J3F1ZXN0aW9uJz4gPGxhYmVsIGNsYXNzPSdwcm9tcHQnIGZvcj0nYWRkaXRpb25hbC1jb21tZW50cyc+XCIgKyB0aGlzLnRleHQuY29tbWVudHMgKyBcIjwvbGFiZWw+IDx0ZXh0YXJlYSBpZD0nYWRkaXRpb25hbC1jb21tZW50cycgY2xhc3M9J2Z1bGxfd2lkdGgnPjwvdGV4dGFyZWE+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxoMj5cIiArIHRoaXMudGV4dC5zdWJ0ZXN0c0NvbXBsZXRlZCArIFwiPC9oMj4gPGRpdiBpZD0ncmVzdWx0X3N1bScgY2xhc3M9J2luZm9fYm94Jz48L2Rpdj4gPC9kaXY+XCIpO1xuICAgIHRoaXMucmVzdWx0U3VtVmlldy5zZXRFbGVtZW50KHRoaXMuJGVsLmZpbmQoXCIjcmVzdWx0X3N1bVwiKSk7XG4gICAgdGhpcy5yZXN1bHRTdW1WaWV3LnJlbmRlcigpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICBSZXN1bHRWaWV3LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0U3VtVmlldy5jbG9zZSgpO1xuICB9O1xuXG4gIHJldHVybiBSZXN1bHRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgUmVzdWx0c1ZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJSZXN1bHRzVmlld1wiXG5cbiAgZXZlbnRzOlxuICAgICdjbGljayAuY2xvdWQnICAgIDogJ2Nsb3VkJ1xuICAgICdjbGljayAudGFibGV0cycgIDogJ3RhYmxldHMnXG4gICAgJ2NsaWNrIC5kZXRlY3QnICAgOiAnZGV0ZWN0T3B0aW9ucydcbiAgICAnY2xpY2sgLmRldGFpbHMnICA6ICdzaG93UmVzdWx0U3VtVmlldydcbiAgICAnY2xpY2sgLnJlZnJlc2gnICA6ICdyZWZyZXNoJ1xuICAgICdjbGljayAuc2hvd19hZHZhbmNlZCcgOiAndG9nZ2xlQWR2YW5jZWQnXG5cbiAgICAnY2hhbmdlICNsaW1pdCcgOiBcInNldExpbWl0XCJcbiAgICAnY2hhbmdlICNwYWdlJyA6IFwic2V0T2Zmc2V0XCJcblxuICB0b2dnbGVBZHZhbmNlZDogLT5cbiAgICBAJGVsLmZpbmQoXCIjYWR2YW5jZWRcIikudG9nZ2xlQ2xhc3MoXCJjb25maXJtYXRpb25cIilcblxuICByZWZyZXNoOiAtPlxuICAgIFV0aWxzLnJlc3RhcnRUYW5nZXJpbmUoXCJQbGVhc2Ugd2FpdC4uLlwiKVxuXG4gIHNob3dSZXN1bHRTdW1WaWV3OiAoZXZlbnQpIC0+XG4gICAgdGFyZ2V0SWQgPSAkKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtcmVzdWx0LWlkXCIpXG4gICAgJGRldGFpbHMgPSBAJGVsLmZpbmQoXCIjZGV0YWlsc18je3RhcmdldElkfVwiKVxuICAgIGlmIG5vdCBfLmlzRW1wdHkoJGRldGFpbHMuaHRtbCgpKVxuICAgICAgJGRldGFpbHMuZW1wdHkoKVxuICAgICAgcmV0dXJuXG5cbiAgICByZXN1bHQgPSBuZXcgUmVzdWx0IFwiX2lkXCIgOiB0YXJnZXRJZFxuICAgIHJlc3VsdC5mZXRjaFxuICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgdmlldyA9IG5ldyBSZXN1bHRTdW1WaWV3XG4gICAgICAgICAgbW9kZWwgICAgICAgOiByZXN1bHRcbiAgICAgICAgICBmaW5pc2hDaGVjayA6IHRydWVcbiAgICAgICAgdmlldy5yZW5kZXIoKVxuICAgICAgICAkZGV0YWlscy5odG1sIFwiPGRpdiBjbGFzcz0naW5mb19ib3gnPlwiICsgJCh2aWV3LmVsKS5odG1sKCkgKyBcIjwvZGl2PlwiXG4gICAgICAgIHZpZXcuY2xvc2UoKVxuXG5cblxuICBjbG91ZDogLT5cbiAgICBpZiBAYXZhaWxhYmxlLmNsb3VkLm9rXG4gICAgICAkLmNvdWNoLnJlcGxpY2F0ZShcbiAgICAgICAgVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKFwibG9jYWxcIiksXG4gICAgICAgIFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImdyb3VwXCIpLFxuICAgICAgICAgIHN1Y2Nlc3M6ICAgICAgPT5cbiAgICAgICAgICAgIEAkZWwuZmluZChcIi5zdGF0dXNcIikuZmluZChcIi5pbmZvX2JveFwiKS5odG1sIFwiUmVzdWx0cyBzeW5jZWQgdG8gY2xvdWQgc3VjY2Vzc2Z1bGx5XCJcbiAgICAgICAgICBlcnJvcjogKGEsIGIpID0+XG4gICAgICAgICAgICBAJGVsLmZpbmQoXCIuc3RhdHVzXCIpLmZpbmQoXCIuaW5mb19ib3hcIikuaHRtbCBcIjxkaXY+U3luYyBlcnJvcjwvZGl2PjxkaXY+I3thfSAje2J9PC9kaXY+XCJcbiAgICAgICAgLFxuICAgICAgICAgIGRvY19pZHM6IEBkb2NMaXN0XG4gICAgICApXG4gICAgZWxzZVxuICAgICAgVXRpbHMubWlkQWxlcnQgXCJDYW5ub3QgZGV0ZWN0IGNsb3VkXCJcbiAgICByZXR1cm4gZmFsc2VcblxuXG4gIHRhYmxldHM6IC0+XG4gICAgaWYgQGF2YWlsYWJsZS50YWJsZXRzLm9rQ291bnQgPiAwXG4gICAgICBmb3IgaXAgaW4gQGF2YWlsYWJsZS50YWJsZXRzLmlwc1xuICAgICAgICBkbyAoaXApID0+XG4gICAgICAgICAgJC5jb3VjaC5yZXBsaWNhdGUoXG4gICAgICAgICAgICBUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJsb2NhbFwiKSxcbiAgICAgICAgICAgIFRhbmdlcmluZS5zZXR0aW5ncy51cmxTdWJuZXQoaXApLFxuICAgICAgICAgICAgICBzdWNjZXNzOiAgICAgID0+XG4gICAgICAgICAgICAgICAgQCRlbC5maW5kKFwiLnN0YXR1c1wiKS5maW5kKFwiLmluZm9fYm94XCIpLmh0bWwgXCJSZXN1bHRzIHN5bmNlZCB0byAje0BhdmFpbGFibGUudGFibGV0cy5va0NvdW50fSBzdWNjZXNzZnVsbHlcIlxuICAgICAgICAgICAgICBlcnJvcjogKGEsIGIpID0+XG4gICAgICAgICAgICAgICAgQCRlbC5maW5kKFwiLnN0YXR1c1wiKS5maW5kKFwiLmluZm9fYm94XCIpLmh0bWwgXCI8ZGl2PlN5bmMgZXJyb3I8L2Rpdj48ZGl2PiN7YX0gI3tifTwvZGl2PlwiXG4gICAgICAgICAgICAsXG4gICAgICAgICAgICAgIGRvY19pZHM6IEBkb2NMaXN0XG4gICAgICAgICAgKVxuICAgIGVsc2VcbiAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiQ2Fubm90IGRldGVjdCB0YWJsZXRzXCJcbiAgICByZXR1cm4gZmFsc2VcblxuICBpbml0RGV0ZWN0T3B0aW9uczogLT5cbiAgICBAYXZhaWxhYmxlID1cbiAgICAgIGNsb3VkIDpcbiAgICAgICAgb2sgOiBmYWxzZVxuICAgICAgICBjaGVja2VkIDogZmFsc2VcbiAgICAgIHRhYmxldHMgOlxuICAgICAgICBpcHMgOiBbXVxuICAgICAgICBva0NvdW50ICA6IDBcbiAgICAgICAgY2hlY2tlZCAgOiAwXG4gICAgICAgIHRvdGFsIDogMjU2XG5cbiAgZGV0ZWN0T3B0aW9uczogLT5cbiAgICAkKFwiYnV0dG9uLmNsb3VkLCBidXR0b24udGFibGV0c1wiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKVxuICAgIEBkZXRlY3RDbG91ZCgpXG4gICAgQGRldGVjdFRhYmxldHMoKVxuXG4gIGRldGVjdENsb3VkOiAtPlxuICAgICMgRGV0ZWN0IENsb3VkXG4gICAgJC5hamF4XG4gICAgICBkYXRhVHlwZTogXCJqc29ucFwiXG4gICAgICB1cmw6IFRhbmdlcmluZS5zZXR0aW5ncy51cmxIb3N0KFwiZ3JvdXBcIilcbiAgICAgIHN1Y2Nlc3M6IChhLCBiKSA9PlxuICAgICAgICBAYXZhaWxhYmxlLmNsb3VkLm9rID0gdHJ1ZVxuICAgICAgZXJyb3I6IChhLCBiKSA9PlxuICAgICAgICBAYXZhaWxhYmxlLmNsb3VkLm9rID0gZmFsc2VcbiAgICAgIGNvbXBsZXRlOiA9PlxuICAgICAgICBAYXZhaWxhYmxlLmNsb3VkLmNoZWNrZWQgPSB0cnVlXG4gICAgICAgIEB1cGRhdGVPcHRpb25zKClcblxuICBkZXRlY3RUYWJsZXRzOiA9PlxuICAgIGZvciBsb2NhbCBpbiBbMC4uMjU1XVxuICAgICAgZG8gKGxvY2FsKSA9PlxuICAgICAgICBpcCA9IFRhbmdlcmluZS5zZXR0aW5ncy5zdWJuZXRJUChsb2NhbClcbiAgICAgICAgJC5hamF4XG4gICAgICAgICAgdXJsOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsU3VibmV0KGlwKVxuICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25wXCJcbiAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLThcIixcbiAgICAgICAgICB0aW1lb3V0OiAzMDAwMFxuICAgICAgICAgIGNvbXBsZXRlOiAgKHhociwgZXJyb3IpID0+XG4gICAgICAgICAgICBAYXZhaWxhYmxlLnRhYmxldHMuY2hlY2tlZCsrXG4gICAgICAgICAgICBpZiB4aHIuc3RhdHVzID09IDIwMFxuICAgICAgICAgICAgICBAYXZhaWxhYmxlLnRhYmxldHMub2tDb3VudCsrXG4gICAgICAgICAgICAgIEBhdmFpbGFibGUudGFibGV0cy5pcHMucHVzaCBpcFxuICAgICAgICAgICAgQHVwZGF0ZU9wdGlvbnMoKVxuXG4gIHVwZGF0ZU9wdGlvbnM6ID0+XG4gICAgcGVyY2VudGFnZSA9IE1hdGguZGVjaW1hbHMoKEBhdmFpbGFibGUudGFibGV0cy5jaGVja2VkIC8gQGF2YWlsYWJsZS50YWJsZXRzLnRvdGFsKSAqIDEwMCwgMilcbiAgICBpZiBwZXJjZW50YWdlID09IDEwMFxuICAgICAgbWVzc2FnZSA9IFwiZmluaXNoZWRcIlxuICAgIGVsc2VcbiAgICAgIG1lc3NhZ2UgPSBcIiN7cGVyY2VudGFnZX0lXCJcbiAgICB0YWJsZXRNZXNzYWdlID0gXCJTZWFyY2hpbmcgZm9yIHRhYmxldHM6ICN7bWVzc2FnZX1cIlxuXG4gICAgQCRlbC5maW5kKFwiLmNoZWNraW5nX3N0YXR1c1wiKS5odG1sIFwiI3t0YWJsZXRNZXNzYWdlfVwiIGlmIEBhdmFpbGFibGUudGFibGV0cy5jaGVja2VkID4gMFxuXG4gICAgaWYgQGF2YWlsYWJsZS5jbG91ZC5jaGVja2VkICYmIEBhdmFpbGFibGUudGFibGV0cy5jaGVja2VkID09IEBhdmFpbGFibGUudGFibGV0cy50b3RhbFxuICAgICAgQCRlbC5maW5kKFwiLnN0YXR1cyAuaW5mb19ib3hcIikuaHRtbCBcIkRvbmUgZGV0ZWN0aW5nIG9wdGlvbnNcIlxuICAgICAgQCRlbC5maW5kKFwiLmNoZWNraW5nX3N0YXR1c1wiKS5oaWRlKClcblxuICAgIGlmIEBhdmFpbGFibGUuY2xvdWQub2tcbiAgICAgIEAkZWwuZmluZCgnYnV0dG9uLmNsb3VkJykucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgIGlmIEBhdmFpbGFibGUudGFibGV0cy5va0NvdW50ID4gMCAmJiBwZXJjZW50YWdlID09IDEwMFxuICAgICAgQCRlbC5maW5kKCdidXR0b24udGFibGV0cycpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcblxuXG4gIGkxOG46IC0+XG4gICAgQHRleHQgPVxuICAgICAgc2F2ZU9wdGlvbnMgOiB0KFwiUmVzdWx0c1ZpZXcubGFiZWwuc2F2ZV9vcHRpb25zXCIpXG4gICAgICBjbG91ZCAgICAgICA6IHQoXCJSZXN1bHRzVmlldy5sYWJlbC5jbG91ZFwiKVxuICAgICAgdGFibGV0cyAgICAgOiB0KFwiUmVzdWx0c1ZpZXcubGFiZWwudGFibGV0c1wiKVxuICAgICAgY3N2ICAgICAgICAgOiB0KFwiUmVzdWx0c1ZpZXcubGFiZWwuY3N2XCIpXG4gICAgICBzdGFydGVkICAgICA6IHQoXCJSZXN1bHRzVmlldy5sYWJlbC5zdGFydGVkXCIpXG4gICAgICByZXN1bHRzICAgICA6IHQoXCJSZXN1bHRzVmlldy5sYWJlbC5yZXN1bHRzXCIpXG4gICAgICBkZXRhaWxzICAgICA6IHQoXCJSZXN1bHRzVmlldy5sYWJlbC5kZXRhaWxzXCIpXG4gICAgICBwYWdlICAgICAgICA6IHQoXCJSZXN1bHRzVmlldy5sYWJlbC5wYWdlXCIpXG4gICAgICBwZXJQYWdlICAgICA6IHQoXCJSZXN1bHRzVmlldy5sYWJlbC5wZXJfcGFnZVwiKVxuICAgICAgYWR2YW5jZWQgICAgOiB0KFwiUmVzdWx0c1ZpZXcubGFiZWwuYWR2YW5jZWRcIilcblxuICAgICAgbm9SZXN1bHRzICAgOiB0KFwiUmVzdWx0c1ZpZXcubWVzc2FnZS5ub19yZXN1bHRzXCIpXG5cbiAgICAgIHJlZnJlc2ggICAgIDogdChcIlJlc3VsdHNWaWV3LmJ1dHRvbi5yZWZyZXNoXCIpXG4gICAgICBkZXRlY3QgICAgICA6IHQoXCJSZXN1bHRzVmlldy5idXR0b24uZGV0ZWN0XCIpXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cblxuICAgIEBpMThuKClcblxuICAgIEByZXN1bHRMaW1pdCAgPSAxMDBcbiAgICBAcmVzdWx0T2Zmc2V0ID0gMFxuXG4gICAgQHN1YlZpZXdzID0gW11cbiAgICBAcmVzdWx0cyA9IG9wdGlvbnMucmVzdWx0c1xuICAgIEBhc3Nlc3NtZW50ID0gb3B0aW9ucy5hc3Nlc3NtZW50XG4gICAgQGRvY0xpc3QgPSBbXVxuICAgIGZvciByZXN1bHQgaW4gQHJlc3VsdHNcbiAgICAgIEBkb2NMaXN0LnB1c2ggcmVzdWx0LmdldCBcImlkXCJcbiAgICBAaW5pdERldGVjdE9wdGlvbnMoKVxuICAgIEBkZXRlY3RDbG91ZCgpXG5cbiAgcmVuZGVyOiAtPlxuXG4gICAgQGNsZWFyU3ViVmlld3MoKVxuXG4gICAgaHRtbCA9IFwiXG4gICAgICA8aDE+I3tAYXNzZXNzbWVudC5nZXRFc2NhcGVkU3RyaW5nKCduYW1lJyl9ICN7QHRleHQucmVzdWx0c308L2gxPlxuICAgICAgPGgyPiN7QHRleHQuc2F2ZU9wdGlvbnN9PC9oMj5cbiAgICAgIDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cblxuICAgICAgICA8YSBocmVmPScvYnJvY2ttYW4vYXNzZXNzbWVudC8je1RhbmdlcmluZS5kYl9uYW1lfS8je0Bhc3Nlc3NtZW50LmlkfSc+PGJ1dHRvbiBjbGFzcz0nY3N2IGNvbW1hbmQnPiN7QHRleHQuY3N2fTwvYnV0dG9uPjwvYT5cblxuICAgICAgICA8IS0tZGl2IGNsYXNzPSdzbWFsbF9ncmV5IGNsaWNrYWJsZSBzaG93X2FkdmFuY2VkJz4je0B0ZXh0LmFkdmFuY2VkfTwvZGl2LS0+XG4gICAgICAgIDxkaXYgaWQ9J2FkdmFuY2VkJyBjbGFzcz0nY29uZmlybWF0aW9uJz5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgICA8dGFibGUgY2xhc3M9J2NsYXNzX3RhYmxlJz5cbiAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgIDx0ZD48bGFiZWwgZm9yPSdleGNsdWRlcycgdGl0bGU9J1NwYWNlIGRlbGltaXRlZCwgYWNjZXB0cyBzdHJpbmcgbGl0ZXJhbHMgb3IgcmVndWxhciBleHByZXNzaW9ucyB3cmFwcGVkIGluIC8gY2hhcmFjdGVycy4nPkV4Y2x1ZGUgdmFyaWFibGVzPC9sYWJlbD48L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD48aW5wdXQgaWQ9J2V4Y2x1ZGVzJz48L3RkPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgPHRkPjxsYWJlbCBmb3I9J2luY2x1ZGVzJyB0aXRsZT0nU3BhY2UgZGVsaW1pdGVkLCBhY2NlcHRzIHN0cmluZyBsaXRlcmFscyBvciByZWd1bGFyIGV4cHJlc3Npb25zIHdyYXBwZWQgaW4gLyBjaGFyYWN0ZXJzLiBPdmVycmlkZXMgZXhjbHVzaW9ucy4nPkluY2x1ZGUgdmFyaWFibGVzPC9sYWJlbD48L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD48aW5wdXQgaWQ9J2luY2x1ZGVzJz48L3RkPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBcIlxuXG4gICAgaHRtbCArPSBcIlxuICAgICAgPGgyIGlkPSdyZXN1bHRzX2hlYWRlcic+I3tAdGV4dC5yZXN1bHRzfSAoPHNwYW4gaWQ9J3Jlc3VsdF9wb3NpdGlvbic+bG9hZGluZy4uLjwvc3Bhbj4pPC9oMj5cbiAgICAgIDxkaXYgY2xhc3M9J2NvbmZpcm1hdGlvbicgaWQ9J2NvbnRyb2xzJz5cbiAgICAgICAgPGxhYmVsIGZvcj0ncGFnZScgY2xhc3M9J3NtYWxsX2dyZXknPiN7QHRleHQucGFnZX08L2xhYmVsPjxpbnB1dCBpZD0ncGFnZScgdHlwZT0nbnVtYmVyJyB2YWx1ZT0nMCc+XG4gICAgICAgIDxsYWJlbCBmb3I9J2xpbWl0JyBjbGFzcz0nc21hbGxfZ3JleSc+I3tAdGV4dC5wZXJQYWdlfTwvbGFiZWw+PGlucHV0IGlkPSdsaW1pdCcgdHlwZT0nbnVtYmVyJyB2YWx1ZT0nMCc+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzZWN0aW9uIGlkPSdyZXN1bHRzX2NvbnRhaW5lcic+PC9zZWN0aW9uPlxuICAgICAgPGJyPlxuICAgICAgPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCByZWZyZXNoJz4je0B0ZXh0LnJlZnJlc2h9PC9idXR0b24+XG4gICAgXCJcblxuICAgIEAkZWwuaHRtbCBodG1sXG5cbiAgICBAdXBkYXRlUmVzdWx0cygpXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICBzZXRMaW1pdDogKGV2ZW50KSAtPlxuICAgICMgQHJlc3VsdE9mZnNldFxuICAgICMgQHJlc3VsdExpbWl0XG5cbiAgICBAcmVzdWx0TGltaXQgPSBwYXJzZUludCgkKFwiI2xpbWl0XCIpLnZhbCgpKSB8fCAxMDAgIyBkZWZhdWx0IDEwMFxuICAgIEB1cGRhdGVSZXN1bHRzKClcblxuICBzZXRPZmZzZXQ6IChldmVudCkgLT5cbiAgICAjIEByZXN1bHRPZmZzZXRcbiAgICAjIEByZXN1bHRMaW1pdFxuXG4gICAgdmFsICAgICAgICAgICA9IHBhcnNlSW50KCQoXCIjcGFnZVwiKS52YWwoKSkgfHwgMVxuICAgIGNhbGN1bGF0ZWQgICAgPSAodmFsIC0gMSkgKiBAcmVzdWx0TGltaXRcbiAgICBtYXhQYWdlICAgICAgID0gTWF0aC5mbG9vcihAcmVzdWx0cy5sZW5ndGggLyBAcmVzdWx0TGltaXQgKVxuICAgIEByZXN1bHRPZmZzZXQgPSBNYXRoLmxpbWl0KDAsIGNhbGN1bGF0ZWQsIG1heFBhZ2UgKiBAcmVzdWx0TGltaXQpICMgZGVmYXVsdCBwYWdlIDEgPT0gMF9vZmZzZXRcblxuICAgIEB1cGRhdGVSZXN1bHRzKClcblxuICB1cGRhdGVSZXN1bHRzOiAoZm9jdXMpID0+XG4gICAgaWYgQHJlc3VsdHM/Lmxlbmd0aCA9PSAwXG4gICAgICBAJGVsLmZpbmQoJyNyZXN1bHRzX2hlYWRlcicpLmh0bWwgQHRleHQubm9SZXN1bHRzXG4gICAgICByZXR1cm5cblxuICAgICQuYWpheFxuICAgICAgdXJsOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsVmlldygnZ3JvdXAnLCBcInJlc3VsdFN1bW1hcnlCeUFzc2Vzc21lbnRJZFwiKStcIj9kZXNjZW5kaW5nPXRydWUmbGltaXQ9I3tAcmVzdWx0TGltaXR9JnNraXA9I3tAcmVzdWx0T2Zmc2V0fVwiXG4gICAgICB0eXBlOiBcIlBPU1RcIlxuICAgICAgZGF0YVR5cGU6IFwianNvblwiXG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICBrZXlzIDogW0Bhc3Nlc3NtZW50LmlkXVxuICAgICAgKVxuICAgICAgc3VjY2VzczogKCBkYXRhICkgPT5cblxuICAgICAgICByb3dzICA9IGRhdGEucm93c1xuICAgICAgICBjb3VudCA9IHJvd3MubGVuZ3RoXG5cbiAgICAgICAgbWF4UmVzdWx0cyAgPSAxMDBcbiAgICAgICAgY3VycmVudFBhZ2UgPSBNYXRoLmZsb29yKCBAcmVzdWx0T2Zmc2V0IC8gQHJlc3VsdExpbWl0ICkgKyAxXG5cbiAgICAgICAgaWYgQHJlc3VsdHMubGVuZ3RoID4gbWF4UmVzdWx0c1xuICAgICAgICAgIEAkZWwuZmluZChcIiNjb250cm9sc1wiKS5yZW1vdmVDbGFzcyhcImNvbmZpcm1hdGlvblwiKVxuICAgICAgICAgIEAkZWwuZmluZChcIiNwYWdlXCIpLnZhbChjdXJyZW50UGFnZSlcbiAgICAgICAgICBAJGVsLmZpbmQoXCIjbGltaXRcIikudmFsKEByZXN1bHRMaW1pdClcblxuICAgICAgICBzdGFydCA9IEByZXN1bHRPZmZzZXQgKyAxXG4gICAgICAgIGVuZCAgID0gTWF0aC5taW4oQHJlc3VsdE9mZnNldCtAcmVzdWx0TGltaXQsQHJlc3VsdHMubGVuZ3RoKVxuICAgICAgICB0b3RhbCA9IEByZXN1bHRzLmxlbmd0aFxuXG4gICAgICAgIEAkZWwuZmluZCgnI3Jlc3VsdF9wb3NpdGlvbicpLmh0bWwgdChcIlJlc3VsdHNWaWV3LmxhYmVsLnBhZ2luYXRpb25cIiwge3N0YXJ0OnN0YXJ0LCBlbmQ6ZW5kLCB0b3RhbDp0b3RhbH0gKVxuXG4gICAgICAgIGh0bWxSb3dzID0gXCJcIlxuICAgICAgICBmb3Igcm93IGluIHJvd3NcblxuICAgICAgICAgIGlkICAgICAgPSByb3cudmFsdWU/LnBhcnRpY2lwYW50X2lkIHx8IFwiTm8gSURcIlxuICAgICAgICAgIGVuZFRpbWUgPSByb3cudmFsdWUuZW5kX3RpbWVcbiAgICAgICAgICBpZiBlbmRUaW1lP1xuICAgICAgICAgICAgbG9uZyAgICA9IG1vbWVudChlbmRUaW1lKS5mb3JtYXQoJ1lZWVktTU1NLUREIEhIOm1tJylcbiAgICAgICAgICAgIGZyb21Ob3cgPSBtb21lbnQoZW5kVGltZSkuZnJvbU5vdygpXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgc3RhcnRUaW1lID0gcm93LnZhbHVlLnN0YXJ0X3RpbWVcbiAgICAgICAgICAgIGxvbmcgICAgPSBcIjxiPiN7QHRleHQuc3RhcnRlZH08L2I+IFwiICsgbW9tZW50KHN0YXJ0VGltZSkuZm9ybWF0KCdZWVlZLU1NTS1ERCBISDptbScpXG4gICAgICAgICAgICBmcm9tTm93ID0gbW9tZW50KHN0YXJ0VGltZSkuZnJvbU5vdygpXG5cbiAgICAgICAgICB0aW1lICAgID0gXCIje2xvbmd9ICgje2Zyb21Ob3d9KVwiXG4gICAgICAgICAgaHRtbFJvd3MgKz0gXCJcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICN7IGlkIH0gLVxuICAgICAgICAgICAgICAjeyB0aW1lIH1cbiAgICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLXJlc3VsdC1pZD0nI3tyb3cuaWR9JyBjbGFzcz0nZGV0YWlscyBjb21tYW5kJz4je0B0ZXh0LmRldGFpbHN9PC9idXR0b24+XG4gICAgICAgICAgICAgIDxkaXYgaWQ9J2RldGFpbHNfI3tyb3cuaWR9Jz48L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIFwiXG5cbiAgICAgICAgQCRlbC5maW5kKFwiI3Jlc3VsdHNfY29udGFpbmVyXCIpLmh0bWwgaHRtbFJvd3NcblxuICAgICAgICBAJGVsLmZpbmQoZm9jdXMpLmZvY3VzKClcblxuICBhZnRlclJlbmRlcjogPT5cbiAgICBmb3IgdmlldyBpbiBAc3ViVmlld3NcbiAgICAgIHZpZXcuYWZ0ZXJSZW5kZXI/KClcblxuICBjbGVhclN1YlZpZXdzOi0+XG4gICAgZm9yIHZpZXcgaW4gQHN1YlZpZXdzXG4gICAgICB2aWV3LmNsb3NlKClcbiAgICBAc3ViVmlld3MgPSBbXVxuIiwidmFyIFJlc3VsdHNWaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblJlc3VsdHNWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFJlc3VsdHNWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBSZXN1bHRzVmlldygpIHtcbiAgICB0aGlzLmFmdGVyUmVuZGVyID0gYmluZCh0aGlzLmFmdGVyUmVuZGVyLCB0aGlzKTtcbiAgICB0aGlzLnVwZGF0ZVJlc3VsdHMgPSBiaW5kKHRoaXMudXBkYXRlUmVzdWx0cywgdGhpcyk7XG4gICAgdGhpcy51cGRhdGVPcHRpb25zID0gYmluZCh0aGlzLnVwZGF0ZU9wdGlvbnMsIHRoaXMpO1xuICAgIHRoaXMuZGV0ZWN0VGFibGV0cyA9IGJpbmQodGhpcy5kZXRlY3RUYWJsZXRzLCB0aGlzKTtcbiAgICByZXR1cm4gUmVzdWx0c1ZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBSZXN1bHRzVmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJSZXN1bHRzVmlld1wiO1xuXG4gIFJlc3VsdHNWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrIC5jbG91ZCc6ICdjbG91ZCcsXG4gICAgJ2NsaWNrIC50YWJsZXRzJzogJ3RhYmxldHMnLFxuICAgICdjbGljayAuZGV0ZWN0JzogJ2RldGVjdE9wdGlvbnMnLFxuICAgICdjbGljayAuZGV0YWlscyc6ICdzaG93UmVzdWx0U3VtVmlldycsXG4gICAgJ2NsaWNrIC5yZWZyZXNoJzogJ3JlZnJlc2gnLFxuICAgICdjbGljayAuc2hvd19hZHZhbmNlZCc6ICd0b2dnbGVBZHZhbmNlZCcsXG4gICAgJ2NoYW5nZSAjbGltaXQnOiBcInNldExpbWl0XCIsXG4gICAgJ2NoYW5nZSAjcGFnZSc6IFwic2V0T2Zmc2V0XCJcbiAgfTtcblxuICBSZXN1bHRzVmlldy5wcm90b3R5cGUudG9nZ2xlQWR2YW5jZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNhZHZhbmNlZFwiKS50b2dnbGVDbGFzcyhcImNvbmZpcm1hdGlvblwiKTtcbiAgfTtcblxuICBSZXN1bHRzVmlldy5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBVdGlscy5yZXN0YXJ0VGFuZ2VyaW5lKFwiUGxlYXNlIHdhaXQuLi5cIik7XG4gIH07XG5cbiAgUmVzdWx0c1ZpZXcucHJvdG90eXBlLnNob3dSZXN1bHRTdW1WaWV3ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJGRldGFpbHMsIHJlc3VsdCwgdGFyZ2V0SWQ7XG4gICAgdGFyZ2V0SWQgPSAkKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtcmVzdWx0LWlkXCIpO1xuICAgICRkZXRhaWxzID0gdGhpcy4kZWwuZmluZChcIiNkZXRhaWxzX1wiICsgdGFyZ2V0SWQpO1xuICAgIGlmICghXy5pc0VtcHR5KCRkZXRhaWxzLmh0bWwoKSkpIHtcbiAgICAgICRkZXRhaWxzLmVtcHR5KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyBSZXN1bHQoe1xuICAgICAgXCJfaWRcIjogdGFyZ2V0SWRcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0LmZldGNoKHtcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmlldztcbiAgICAgICAgdmlldyA9IG5ldyBSZXN1bHRTdW1WaWV3KHtcbiAgICAgICAgICBtb2RlbDogcmVzdWx0LFxuICAgICAgICAgIGZpbmlzaENoZWNrOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICB2aWV3LnJlbmRlcigpO1xuICAgICAgICAkZGV0YWlscy5odG1sKFwiPGRpdiBjbGFzcz0naW5mb19ib3gnPlwiICsgJCh2aWV3LmVsKS5odG1sKCkgKyBcIjwvZGl2PlwiKTtcbiAgICAgICAgcmV0dXJuIHZpZXcuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSZXN1bHRzVmlldy5wcm90b3R5cGUuY2xvdWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5hdmFpbGFibGUuY2xvdWQub2spIHtcbiAgICAgICQuY291Y2gucmVwbGljYXRlKFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImxvY2FsXCIpLCBUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJncm91cFwiKSwge1xuICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuJGVsLmZpbmQoXCIuc3RhdHVzXCIpLmZpbmQoXCIuaW5mb19ib3hcIikuaHRtbChcIlJlc3VsdHMgc3luY2VkIHRvIGNsb3VkIHN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSxcbiAgICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuJGVsLmZpbmQoXCIuc3RhdHVzXCIpLmZpbmQoXCIuaW5mb19ib3hcIikuaHRtbChcIjxkaXY+U3luYyBlcnJvcjwvZGl2PjxkaXY+XCIgKyBhICsgXCIgXCIgKyBiICsgXCI8L2Rpdj5cIik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcylcbiAgICAgIH0sIHtcbiAgICAgICAgZG9jX2lkczogdGhpcy5kb2NMaXN0XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgVXRpbHMubWlkQWxlcnQoXCJDYW5ub3QgZGV0ZWN0IGNsb3VkXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgUmVzdWx0c1ZpZXcucHJvdG90eXBlLnRhYmxldHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm4sIGksIGlwLCBsZW4sIHJlZjtcbiAgICBpZiAodGhpcy5hdmFpbGFibGUudGFibGV0cy5va0NvdW50ID4gMCkge1xuICAgICAgcmVmID0gdGhpcy5hdmFpbGFibGUudGFibGV0cy5pcHM7XG4gICAgICBmbiA9IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oaXApIHtcbiAgICAgICAgICByZXR1cm4gJC5jb3VjaC5yZXBsaWNhdGUoVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKFwibG9jYWxcIiksIFRhbmdlcmluZS5zZXR0aW5ncy51cmxTdWJuZXQoaXApLCB7XG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLiRlbC5maW5kKFwiLnN0YXR1c1wiKS5maW5kKFwiLmluZm9fYm94XCIpLmh0bWwoXCJSZXN1bHRzIHN5bmNlZCB0byBcIiArIF90aGlzLmF2YWlsYWJsZS50YWJsZXRzLm9rQ291bnQgKyBcIiBzdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLiRlbC5maW5kKFwiLnN0YXR1c1wiKS5maW5kKFwiLmluZm9fYm94XCIpLmh0bWwoXCI8ZGl2PlN5bmMgZXJyb3I8L2Rpdj48ZGl2PlwiICsgYSArIFwiIFwiICsgYiArIFwiPC9kaXY+XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRvY19pZHM6IF90aGlzLmRvY0xpc3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlwID0gcmVmW2ldO1xuICAgICAgICBmbihpcCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiQ2Fubm90IGRldGVjdCB0YWJsZXRzXCIpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgUmVzdWx0c1ZpZXcucHJvdG90eXBlLmluaXREZXRlY3RPcHRpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXZhaWxhYmxlID0ge1xuICAgICAgY2xvdWQ6IHtcbiAgICAgICAgb2s6IGZhbHNlLFxuICAgICAgICBjaGVja2VkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHRhYmxldHM6IHtcbiAgICAgICAgaXBzOiBbXSxcbiAgICAgICAgb2tDb3VudDogMCxcbiAgICAgICAgY2hlY2tlZDogMCxcbiAgICAgICAgdG90YWw6IDI1NlxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgUmVzdWx0c1ZpZXcucHJvdG90eXBlLmRldGVjdE9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAkKFwiYnV0dG9uLmNsb3VkLCBidXR0b24udGFibGV0c1wiKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcbiAgICB0aGlzLmRldGVjdENsb3VkKCk7XG4gICAgcmV0dXJuIHRoaXMuZGV0ZWN0VGFibGV0cygpO1xuICB9O1xuXG4gIFJlc3VsdHNWaWV3LnByb3RvdHlwZS5kZXRlY3RDbG91ZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgZGF0YVR5cGU6IFwianNvbnBcIixcbiAgICAgIHVybDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybEhvc3QoXCJncm91cFwiKSxcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5hdmFpbGFibGUuY2xvdWQub2sgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyksXG4gICAgICBlcnJvcjogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmF2YWlsYWJsZS5jbG91ZC5vayA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyksXG4gICAgICBjb21wbGV0ZTogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBfdGhpcy5hdmFpbGFibGUuY2xvdWQuY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZU9wdGlvbnMoKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgUmVzdWx0c1ZpZXcucHJvdG90eXBlLmRldGVjdFRhYmxldHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgbG9jYWwsIHJlc3VsdHM7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAobG9jYWwgPSBpID0gMDsgaSA8PSAyNTU7IGxvY2FsID0gKytpKSB7XG4gICAgICByZXN1bHRzLnB1c2goKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihsb2NhbCkge1xuICAgICAgICAgIHZhciBpcDtcbiAgICAgICAgICBpcCA9IFRhbmdlcmluZS5zZXR0aW5ncy5zdWJuZXRJUChsb2NhbCk7XG4gICAgICAgICAgcmV0dXJuICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6IFRhbmdlcmluZS5zZXR0aW5ncy51cmxTdWJuZXQoaXApLFxuICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvbnBcIixcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiLFxuICAgICAgICAgICAgdGltZW91dDogMzAwMDAsXG4gICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oeGhyLCBlcnJvcikge1xuICAgICAgICAgICAgICBfdGhpcy5hdmFpbGFibGUudGFibGV0cy5jaGVja2VkKys7XG4gICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hdmFpbGFibGUudGFibGV0cy5va0NvdW50Kys7XG4gICAgICAgICAgICAgICAgX3RoaXMuYXZhaWxhYmxlLnRhYmxldHMuaXBzLnB1c2goaXApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVPcHRpb25zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKShsb2NhbCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBSZXN1bHRzVmlldy5wcm90b3R5cGUudXBkYXRlT3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBtZXNzYWdlLCBwZXJjZW50YWdlLCB0YWJsZXRNZXNzYWdlO1xuICAgIHBlcmNlbnRhZ2UgPSBNYXRoLmRlY2ltYWxzKCh0aGlzLmF2YWlsYWJsZS50YWJsZXRzLmNoZWNrZWQgLyB0aGlzLmF2YWlsYWJsZS50YWJsZXRzLnRvdGFsKSAqIDEwMCwgMik7XG4gICAgaWYgKHBlcmNlbnRhZ2UgPT09IDEwMCkge1xuICAgICAgbWVzc2FnZSA9IFwiZmluaXNoZWRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVzc2FnZSA9IHBlcmNlbnRhZ2UgKyBcIiVcIjtcbiAgICB9XG4gICAgdGFibGV0TWVzc2FnZSA9IFwiU2VhcmNoaW5nIGZvciB0YWJsZXRzOiBcIiArIG1lc3NhZ2U7XG4gICAgaWYgKHRoaXMuYXZhaWxhYmxlLnRhYmxldHMuY2hlY2tlZCA+IDApIHtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIuY2hlY2tpbmdfc3RhdHVzXCIpLmh0bWwoXCJcIiArIHRhYmxldE1lc3NhZ2UpO1xuICAgIH1cbiAgICBpZiAodGhpcy5hdmFpbGFibGUuY2xvdWQuY2hlY2tlZCAmJiB0aGlzLmF2YWlsYWJsZS50YWJsZXRzLmNoZWNrZWQgPT09IHRoaXMuYXZhaWxhYmxlLnRhYmxldHMudG90YWwpIHtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIuc3RhdHVzIC5pbmZvX2JveFwiKS5odG1sKFwiRG9uZSBkZXRlY3Rpbmcgb3B0aW9uc1wiKTtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIuY2hlY2tpbmdfc3RhdHVzXCIpLmhpZGUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYXZhaWxhYmxlLmNsb3VkLm9rKSB7XG4gICAgICB0aGlzLiRlbC5maW5kKCdidXR0b24uY2xvdWQnKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgIH1cbiAgICBpZiAodGhpcy5hdmFpbGFibGUudGFibGV0cy5va0NvdW50ID4gMCAmJiBwZXJjZW50YWdlID09PSAxMDApIHtcbiAgICAgIHJldHVybiB0aGlzLiRlbC5maW5kKCdidXR0b24udGFibGV0cycpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgfVxuICB9O1xuXG4gIFJlc3VsdHNWaWV3LnByb3RvdHlwZS5pMThuID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCA9IHtcbiAgICAgIHNhdmVPcHRpb25zOiB0KFwiUmVzdWx0c1ZpZXcubGFiZWwuc2F2ZV9vcHRpb25zXCIpLFxuICAgICAgY2xvdWQ6IHQoXCJSZXN1bHRzVmlldy5sYWJlbC5jbG91ZFwiKSxcbiAgICAgIHRhYmxldHM6IHQoXCJSZXN1bHRzVmlldy5sYWJlbC50YWJsZXRzXCIpLFxuICAgICAgY3N2OiB0KFwiUmVzdWx0c1ZpZXcubGFiZWwuY3N2XCIpLFxuICAgICAgc3RhcnRlZDogdChcIlJlc3VsdHNWaWV3LmxhYmVsLnN0YXJ0ZWRcIiksXG4gICAgICByZXN1bHRzOiB0KFwiUmVzdWx0c1ZpZXcubGFiZWwucmVzdWx0c1wiKSxcbiAgICAgIGRldGFpbHM6IHQoXCJSZXN1bHRzVmlldy5sYWJlbC5kZXRhaWxzXCIpLFxuICAgICAgcGFnZTogdChcIlJlc3VsdHNWaWV3LmxhYmVsLnBhZ2VcIiksXG4gICAgICBwZXJQYWdlOiB0KFwiUmVzdWx0c1ZpZXcubGFiZWwucGVyX3BhZ2VcIiksXG4gICAgICBhZHZhbmNlZDogdChcIlJlc3VsdHNWaWV3LmxhYmVsLmFkdmFuY2VkXCIpLFxuICAgICAgbm9SZXN1bHRzOiB0KFwiUmVzdWx0c1ZpZXcubWVzc2FnZS5ub19yZXN1bHRzXCIpLFxuICAgICAgcmVmcmVzaDogdChcIlJlc3VsdHNWaWV3LmJ1dHRvbi5yZWZyZXNoXCIpLFxuICAgICAgZGV0ZWN0OiB0KFwiUmVzdWx0c1ZpZXcuYnV0dG9uLmRldGVjdFwiKVxuICAgIH07XG4gIH07XG5cbiAgUmVzdWx0c1ZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGksIGxlbiwgcmVmLCByZXN1bHQ7XG4gICAgdGhpcy5pMThuKCk7XG4gICAgdGhpcy5yZXN1bHRMaW1pdCA9IDEwMDtcbiAgICB0aGlzLnJlc3VsdE9mZnNldCA9IDA7XG4gICAgdGhpcy5zdWJWaWV3cyA9IFtdO1xuICAgIHRoaXMucmVzdWx0cyA9IG9wdGlvbnMucmVzdWx0cztcbiAgICB0aGlzLmFzc2Vzc21lbnQgPSBvcHRpb25zLmFzc2Vzc21lbnQ7XG4gICAgdGhpcy5kb2NMaXN0ID0gW107XG4gICAgcmVmID0gdGhpcy5yZXN1bHRzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgcmVzdWx0ID0gcmVmW2ldO1xuICAgICAgdGhpcy5kb2NMaXN0LnB1c2gocmVzdWx0LmdldChcImlkXCIpKTtcbiAgICB9XG4gICAgdGhpcy5pbml0RGV0ZWN0T3B0aW9ucygpO1xuICAgIHJldHVybiB0aGlzLmRldGVjdENsb3VkKCk7XG4gIH07XG5cbiAgUmVzdWx0c1ZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBodG1sO1xuICAgIHRoaXMuY2xlYXJTdWJWaWV3cygpO1xuICAgIGh0bWwgPSBcIjxoMT5cIiArICh0aGlzLmFzc2Vzc21lbnQuZ2V0RXNjYXBlZFN0cmluZygnbmFtZScpKSArIFwiIFwiICsgdGhpcy50ZXh0LnJlc3VsdHMgKyBcIjwvaDE+IDxoMj5cIiArIHRoaXMudGV4dC5zYXZlT3B0aW9ucyArIFwiPC9oMj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8YSBocmVmPScvYnJvY2ttYW4vYXNzZXNzbWVudC9cIiArIFRhbmdlcmluZS5kYl9uYW1lICsgXCIvXCIgKyB0aGlzLmFzc2Vzc21lbnQuaWQgKyBcIic+PGJ1dHRvbiBjbGFzcz0nY3N2IGNvbW1hbmQnPlwiICsgdGhpcy50ZXh0LmNzdiArIFwiPC9idXR0b24+PC9hPiA8IS0tZGl2IGNsYXNzPSdzbWFsbF9ncmV5IGNsaWNrYWJsZSBzaG93X2FkdmFuY2VkJz5cIiArIHRoaXMudGV4dC5hZHZhbmNlZCArIFwiPC9kaXYtLT4gPGRpdiBpZD0nYWR2YW5jZWQnIGNsYXNzPSdjb25maXJtYXRpb24nPiA8ZGl2IGNsYXNzPSdtZW51X2JveCc+IDx0YWJsZSBjbGFzcz0nY2xhc3NfdGFibGUnPiA8dHI+IDx0ZD48bGFiZWwgZm9yPSdleGNsdWRlcycgdGl0bGU9J1NwYWNlIGRlbGltaXRlZCwgYWNjZXB0cyBzdHJpbmcgbGl0ZXJhbHMgb3IgcmVndWxhciBleHByZXNzaW9ucyB3cmFwcGVkIGluIC8gY2hhcmFjdGVycy4nPkV4Y2x1ZGUgdmFyaWFibGVzPC9sYWJlbD48L3RkPiA8dGQ+PGlucHV0IGlkPSdleGNsdWRlcyc+PC90ZD4gPC90cj4gPHRyPiA8dGQ+PGxhYmVsIGZvcj0naW5jbHVkZXMnIHRpdGxlPSdTcGFjZSBkZWxpbWl0ZWQsIGFjY2VwdHMgc3RyaW5nIGxpdGVyYWxzIG9yIHJlZ3VsYXIgZXhwcmVzc2lvbnMgd3JhcHBlZCBpbiAvIGNoYXJhY3RlcnMuIE92ZXJyaWRlcyBleGNsdXNpb25zLic+SW5jbHVkZSB2YXJpYWJsZXM8L2xhYmVsPjwvdGQ+IDx0ZD48aW5wdXQgaWQ9J2luY2x1ZGVzJz48L3RkPiA8L3RyPiA8L3RhYmxlPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PlwiO1xuICAgIGh0bWwgKz0gXCI8aDIgaWQ9J3Jlc3VsdHNfaGVhZGVyJz5cIiArIHRoaXMudGV4dC5yZXN1bHRzICsgXCIgKDxzcGFuIGlkPSdyZXN1bHRfcG9zaXRpb24nPmxvYWRpbmcuLi48L3NwYW4+KTwvaDI+IDxkaXYgY2xhc3M9J2NvbmZpcm1hdGlvbicgaWQ9J2NvbnRyb2xzJz4gPGxhYmVsIGZvcj0ncGFnZScgY2xhc3M9J3NtYWxsX2dyZXknPlwiICsgdGhpcy50ZXh0LnBhZ2UgKyBcIjwvbGFiZWw+PGlucHV0IGlkPSdwYWdlJyB0eXBlPSdudW1iZXInIHZhbHVlPScwJz4gPGxhYmVsIGZvcj0nbGltaXQnIGNsYXNzPSdzbWFsbF9ncmV5Jz5cIiArIHRoaXMudGV4dC5wZXJQYWdlICsgXCI8L2xhYmVsPjxpbnB1dCBpZD0nbGltaXQnIHR5cGU9J251bWJlcicgdmFsdWU9JzAnPiA8L2Rpdj4gPHNlY3Rpb24gaWQ9J3Jlc3VsdHNfY29udGFpbmVyJz48L3NlY3Rpb24+IDxicj4gPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCByZWZyZXNoJz5cIiArIHRoaXMudGV4dC5yZWZyZXNoICsgXCI8L2J1dHRvbj5cIjtcbiAgICB0aGlzLiRlbC5odG1sKGh0bWwpO1xuICAgIHRoaXMudXBkYXRlUmVzdWx0cygpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICBSZXN1bHRzVmlldy5wcm90b3R5cGUuc2V0TGltaXQgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHRoaXMucmVzdWx0TGltaXQgPSBwYXJzZUludCgkKFwiI2xpbWl0XCIpLnZhbCgpKSB8fCAxMDA7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlUmVzdWx0cygpO1xuICB9O1xuXG4gIFJlc3VsdHNWaWV3LnByb3RvdHlwZS5zZXRPZmZzZXQgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBjYWxjdWxhdGVkLCBtYXhQYWdlLCB2YWw7XG4gICAgdmFsID0gcGFyc2VJbnQoJChcIiNwYWdlXCIpLnZhbCgpKSB8fCAxO1xuICAgIGNhbGN1bGF0ZWQgPSAodmFsIC0gMSkgKiB0aGlzLnJlc3VsdExpbWl0O1xuICAgIG1heFBhZ2UgPSBNYXRoLmZsb29yKHRoaXMucmVzdWx0cy5sZW5ndGggLyB0aGlzLnJlc3VsdExpbWl0KTtcbiAgICB0aGlzLnJlc3VsdE9mZnNldCA9IE1hdGgubGltaXQoMCwgY2FsY3VsYXRlZCwgbWF4UGFnZSAqIHRoaXMucmVzdWx0TGltaXQpO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZVJlc3VsdHMoKTtcbiAgfTtcblxuICBSZXN1bHRzVmlldy5wcm90b3R5cGUudXBkYXRlUmVzdWx0cyA9IGZ1bmN0aW9uKGZvY3VzKSB7XG4gICAgdmFyIHJlZjtcbiAgICBpZiAoKChyZWYgPSB0aGlzLnJlc3VsdHMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwKSA9PT0gMCkge1xuICAgICAgdGhpcy4kZWwuZmluZCgnI3Jlc3VsdHNfaGVhZGVyJykuaHRtbCh0aGlzLnRleHQubm9SZXN1bHRzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuICQuYWpheCh7XG4gICAgICB1cmw6IFRhbmdlcmluZS5zZXR0aW5ncy51cmxWaWV3KCdncm91cCcsIFwicmVzdWx0U3VtbWFyeUJ5QXNzZXNzbWVudElkXCIpICsgKFwiP2Rlc2NlbmRpbmc9dHJ1ZSZsaW1pdD1cIiArIHRoaXMucmVzdWx0TGltaXQgKyBcIiZza2lwPVwiICsgdGhpcy5yZXN1bHRPZmZzZXQpLFxuICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGtleXM6IFt0aGlzLmFzc2Vzc21lbnQuaWRdXG4gICAgICB9KSxcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIHZhciBjb3VudCwgY3VycmVudFBhZ2UsIGVuZCwgZW5kVGltZSwgZnJvbU5vdywgaHRtbFJvd3MsIGksIGlkLCBsZW4sIGxvbmcsIG1heFJlc3VsdHMsIHJlZjEsIHJvdywgcm93cywgc3RhcnQsIHN0YXJ0VGltZSwgdGltZSwgdG90YWw7XG4gICAgICAgICAgcm93cyA9IGRhdGEucm93cztcbiAgICAgICAgICBjb3VudCA9IHJvd3MubGVuZ3RoO1xuICAgICAgICAgIG1heFJlc3VsdHMgPSAxMDA7XG4gICAgICAgICAgY3VycmVudFBhZ2UgPSBNYXRoLmZsb29yKF90aGlzLnJlc3VsdE9mZnNldCAvIF90aGlzLnJlc3VsdExpbWl0KSArIDE7XG4gICAgICAgICAgaWYgKF90aGlzLnJlc3VsdHMubGVuZ3RoID4gbWF4UmVzdWx0cykge1xuICAgICAgICAgICAgX3RoaXMuJGVsLmZpbmQoXCIjY29udHJvbHNcIikucmVtb3ZlQ2xhc3MoXCJjb25maXJtYXRpb25cIik7XG4gICAgICAgICAgICBfdGhpcy4kZWwuZmluZChcIiNwYWdlXCIpLnZhbChjdXJyZW50UGFnZSk7XG4gICAgICAgICAgICBfdGhpcy4kZWwuZmluZChcIiNsaW1pdFwiKS52YWwoX3RoaXMucmVzdWx0TGltaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGFydCA9IF90aGlzLnJlc3VsdE9mZnNldCArIDE7XG4gICAgICAgICAgZW5kID0gTWF0aC5taW4oX3RoaXMucmVzdWx0T2Zmc2V0ICsgX3RoaXMucmVzdWx0TGltaXQsIF90aGlzLnJlc3VsdHMubGVuZ3RoKTtcbiAgICAgICAgICB0b3RhbCA9IF90aGlzLnJlc3VsdHMubGVuZ3RoO1xuICAgICAgICAgIF90aGlzLiRlbC5maW5kKCcjcmVzdWx0X3Bvc2l0aW9uJykuaHRtbCh0KFwiUmVzdWx0c1ZpZXcubGFiZWwucGFnaW5hdGlvblwiLCB7XG4gICAgICAgICAgICBzdGFydDogc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IGVuZCxcbiAgICAgICAgICAgIHRvdGFsOiB0b3RhbFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBodG1sUm93cyA9IFwiXCI7XG4gICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcm93cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgcm93ID0gcm93c1tpXTtcbiAgICAgICAgICAgIGlkID0gKChyZWYxID0gcm93LnZhbHVlKSAhPSBudWxsID8gcmVmMS5wYXJ0aWNpcGFudF9pZCA6IHZvaWQgMCkgfHwgXCJObyBJRFwiO1xuICAgICAgICAgICAgZW5kVGltZSA9IHJvdy52YWx1ZS5lbmRfdGltZTtcbiAgICAgICAgICAgIGlmIChlbmRUaW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgbG9uZyA9IG1vbWVudChlbmRUaW1lKS5mb3JtYXQoJ1lZWVktTU1NLUREIEhIOm1tJyk7XG4gICAgICAgICAgICAgIGZyb21Ob3cgPSBtb21lbnQoZW5kVGltZSkuZnJvbU5vdygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RhcnRUaW1lID0gcm93LnZhbHVlLnN0YXJ0X3RpbWU7XG4gICAgICAgICAgICAgIGxvbmcgPSAoXCI8Yj5cIiArIF90aGlzLnRleHQuc3RhcnRlZCArIFwiPC9iPiBcIikgKyBtb21lbnQoc3RhcnRUaW1lKS5mb3JtYXQoJ1lZWVktTU1NLUREIEhIOm1tJyk7XG4gICAgICAgICAgICAgIGZyb21Ob3cgPSBtb21lbnQoc3RhcnRUaW1lKS5mcm9tTm93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aW1lID0gbG9uZyArIFwiIChcIiArIGZyb21Ob3cgKyBcIilcIjtcbiAgICAgICAgICAgIGh0bWxSb3dzICs9IFwiPGRpdj4gXCIgKyBpZCArIFwiIC0gXCIgKyB0aW1lICsgXCIgPGJ1dHRvbiBkYXRhLXJlc3VsdC1pZD0nXCIgKyByb3cuaWQgKyBcIicgY2xhc3M9J2RldGFpbHMgY29tbWFuZCc+XCIgKyBfdGhpcy50ZXh0LmRldGFpbHMgKyBcIjwvYnV0dG9uPiA8ZGl2IGlkPSdkZXRhaWxzX1wiICsgcm93LmlkICsgXCInPjwvZGl2PiA8L2Rpdj5cIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMuJGVsLmZpbmQoXCIjcmVzdWx0c19jb250YWluZXJcIikuaHRtbChodG1sUm93cyk7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLiRlbC5maW5kKGZvY3VzKS5mb2N1cygpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBSZXN1bHRzVmlldy5wcm90b3R5cGUuYWZ0ZXJSZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgbGVuLCByZWYsIHJlc3VsdHMsIHZpZXc7XG4gICAgcmVmID0gdGhpcy5zdWJWaWV3cztcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2aWV3ID0gcmVmW2ldO1xuICAgICAgcmVzdWx0cy5wdXNoKHR5cGVvZiB2aWV3LmFmdGVyUmVuZGVyID09PSBcImZ1bmN0aW9uXCIgPyB2aWV3LmFmdGVyUmVuZGVyKCkgOiB2b2lkIDApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICBSZXN1bHRzVmlldy5wcm90b3R5cGUuY2xlYXJTdWJWaWV3cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBsZW4sIHJlZiwgdmlldztcbiAgICByZWYgPSB0aGlzLnN1YlZpZXdzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmlldyA9IHJlZltpXTtcbiAgICAgIHZpZXcuY2xvc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3ViVmlld3MgPSBbXTtcbiAgfTtcblxuICByZXR1cm4gUmVzdWx0c1ZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBUYWJsZXRNYW5hZ2VyVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIktsYXNzZXNWaWV3XCJcblxuICBpMThuOiAtPlxuICAgIEB0ZXh0ID1cbiAgICAgIGRldGVjdGluZ1RhYmxldHMgOiB0KFwiVGFibGV0TWFuYWdlclZpZXcubWVzc2FnZS5kZXRlY3RpbmdcIilcbiAgICAgIHN5bmNDb21wbGV0ZSAgICAgOiB0KFwiVGFibGV0TWFuYWdlclZpZXcubGFiZWwuc3luY19jb21wbGV0ZVwiKVxuXG4gIGluaXRpYWxpemU6ICggb3B0aW9ucyApIC0+XG5cbiAgICBAaTE4bigpXG5cbiAgICBAaXBCbG9jayAgPSAzMlxuICAgIEB0b3RhbElwcyA9IDI1NlxuICAgIEB0YWJsZXRPZmZzZXQgPSAwXG5cbiAgICBAY2FsbGJhY2tzID0gb3B0aW9ucy5jYWxsYmFja3NcblxuICAgIEBkb2NUeXBlcyA9IG9wdGlvbnMuZG9jVHlwZXNcblxuICBzeW5jOiA9PlxuICAgIHJldHVybiB1bmxlc3MgQHRhYmxldE9mZnNldCBpcyAwXG4gICAgQHB1bGxEb2NzKClcblxuICBwdWxsRG9jczogPT5cbiAgICBpZiBAdGFibGV0T2Zmc2V0ID09IDBcbiAgICAgIEB0YWJsZXRzID0gIyBpZiB5b3UgY2FuIHRoaW5rIG9mIGEgYmV0dGVyIGlkZWEgSSdkIGxpa2UgdG8gc2VlIGl0XG4gICAgICAgIGNoZWNrZWQgICAgOiAwXG4gICAgICAgIGNvbXBsZXRlICAgOiAwXG4gICAgICAgIHN1Y2Nlc3NmdWwgOiAwXG4gICAgICAgIG9rQ291bnQgICAgOiAwXG4gICAgICAgIGlwcyAgICAgICAgOiBbXVxuICAgICAgICByZXN1bHQgICAgIDogMFxuICAgICAgVXRpbHMubWlkQWxlcnQgQHRleHQuZGV0ZWN0aW5nVGFibGV0c1xuXG4gICAgVXRpbHMud29ya2luZyB0cnVlXG4gICAgQHJhbmRvbUlkRG9jID0gaGV4X3NoYTEoXCJcIitNYXRoLnJhbmRvbSgpKVxuICAgIFRhbmdlcmluZS4kZGIuc2F2ZURvYyBcbiAgICAgIFwiX2lkXCIgOiBAcmFuZG9tSWREb2NcbiAgICAsXG4gICAgICBzdWNjZXNzOiAoZG9jKSA9PlxuICAgICAgICBAcmFuZG9tRG9jID0gZG9jXG4gICAgICAgIGZvciBsb2NhbCBpbiBbQHRhYmxldE9mZnNldC4uKEBpcEJsb2NrLTEpK0B0YWJsZXRPZmZzZXRdXG4gICAgICAgICAgZG8gKGxvY2FsKSA9PlxuICAgICAgICAgICAgaXAgPSBUYW5nZXJpbmUuc2V0dGluZ3Muc3VibmV0SVAobG9jYWwpXG4gICAgICAgICAgICByZXEgPSAkLmFqYXhcbiAgICAgICAgICAgICAgdXJsOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsU3VibmV0KGlwKVxuICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29ucFwiXG4gICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiLFxuICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwMFxuICAgICAgICAgICAgcmVxLmNvbXBsZXRlICh4aHIsIGVycm9yKSA9PlxuICAgICAgICAgICAgICBAdGFibGV0cy5jaGVja2VkKytcbiAgICAgICAgICAgICAgaWYgcGFyc2VJbnQoeGhyLnN0YXR1cykgPT0gMjAwXG4gICAgICAgICAgICAgICAgQHRhYmxldHMub2tDb3VudCsrXG4gICAgICAgICAgICAgICAgQHRhYmxldHMuaXBzLnB1c2ggaXBcbiAgICAgICAgICAgICAgQHVwZGF0ZVB1bGwoKVxuICAgICAgZXJyb3I6IC0+XG4gICAgICAgIFV0aWxzLndvcmtpbmcgZmFsc2VcbiAgICAgICAgVXRpbHMubWlkQWxlcnQgQHRleHQuaW50ZXJuYWxFcnJvclxuXG4gIHVwZGF0ZVB1bGw6ID0+XG4gICAgIyBkbyBub3QgcHJvY2VzcyB1bmxlc3Mgd2UncmUgZG9uZSB3aXRoIGNoZWNraW5nIHRoaXMgYmxvY2tcbiAgICByZXR1cm4gaWYgQHRhYmxldHMuY2hlY2tlZCA8IEBpcEJsb2NrICsgQHRhYmxldE9mZnNldFxuXG4gICAgIyBnaXZlIHRoZSBjaG9pY2UgdG8ga2VlcCBsb29raW5nIGlmIG5vdCBhbGwgdGFibGV0cyBmb3VuZFxuICAgIGlmIEB0YWJsZXRPZmZzZXQgIT0gQHRvdGFsSXBzIC0gQGlwQmxvY2sgIyYmIGNvbmZpcm0oXCIje01hdGgubWF4KEB0YWJsZXRzLm9rQ291bnQtMSwgMCl9IHRhYmxldHMgZm91bmQuXFxuXFxuQ29udGludWUgc2VhcmNoaW5nP1wiKVxuICAgICAgcGVyY2VudGFnZSA9IE1hdGgucm91bmQoQHRhYmxldE9mZnNldCAvIEB0b3RhbElwcyAqIDEwMClcbiAgICAgIFV0aWxzLm1pZEFsZXJ0IHQoXCJUYWJsZXRNYW5hZ2VyVmlldy5tZXNzYWdlLnNlYXJjaGluZ1wiLCBwZXJjZW50YWdlOiBwZXJjZW50YWdlKVxuICAgICAgQHRhYmxldE9mZnNldCArPSBAaXBCbG9ja1xuICAgICAgQHB1bGxEb2NzKClcbiAgICBlbHNlXG5cbiAgICAgICMgLTEgYmVjYXVzZSBvbmUgb2YgdGhlbSB3aWxsIGJlIHRoaXMgY29tcHV0ZXJcbiAgICAgIEB0YWJsZXRzLm9rQ291bnQgPSBNYXRoLm1heChAdGFibGV0cy5va0NvdW50LTEsIDApXG5cbiAgICAgIGlmIEB0YWJsZXRzLm9rQ291bnQgPT0gMFxuICAgICAgICBAdGFibGV0T2Zmc2V0ID0gMFxuICAgICAgICBVdGlscy53b3JraW5nIGZhbHNlXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IHQoXCJUYWJsZXRNYW5hZ2VyVmlldy5tZXNzYWdlLmZvdW5kXCIsIGNvdW50IDogQHRhYmxldHMub2tDb3VudClcbiAgICAgICAgVGFuZ2VyaW5lLiRkYi5yZW1vdmVEb2NcbiAgICAgICAgICBcIl9pZFwiICA6IEByYW5kb21Eb2MuaWRcbiAgICAgICAgICBcIl9yZXZcIiA6IEByYW5kb21Eb2MucmV2XG4gICAgICAgIHJldHVyblxuXG4gICAgICB1bmxlc3MgY29uZmlybSh0KFwiVGFibGV0TWFuYWdlclZpZXcubWVzc2FnZS5jb25maXJtX3B1bGxcIiwgX19mb3VuZF9fIDogQHRhYmxldHMub2tDb3VudCkpXG4gICAgICAgIEB0YWJsZXRPZmZzZXQgPSAwXG4gICAgICAgIFV0aWxzLndvcmtpbmcgZmFsc2VcbiAgICAgICAgVGFuZ2VyaW5lLiRkYi5yZW1vdmVEb2NcbiAgICAgICAgICBcIl9pZFwiICA6IEByYW5kb21Eb2MuaWRcbiAgICAgICAgICBcIl9yZXZcIiA6IEByYW5kb21Eb2MucmV2XG4gICAgICAgIHJldHVyblxuXG5cbiAgICAgIFV0aWxzLm1pZEFsZXJ0IHQoXCJUYWJsZXRNYW5hZ2VyVmlldy5tZXNzYWdlLnB1bGxfc3RhdHVzXCIsIHRhYmxldENvdW50IDogQHRhYmxldHMub2tDb3VudClcbiAgICAgIGZvciBpcCBpbiBAdGFibGV0cy5pcHNcblxuICAgICAgICBkbyAoaXApID0+XG4gICAgICAgICAgIyBzZWUgaWYgb3VyIHJhbmRvbSBkb2N1bWVudCBpcyBvbiB0aGUgc2VydmVyIHdlIGp1c3QgZm91bmRcbiAgICAgICAgICBzZWxmUmVxID0gJC5hamF4XG4gICAgICAgICAgICBcInVybFwiICAgICAgICAgOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsU3VibmV0KGlwKSArIFwiL1wiICsgQHJhbmRvbUlkRG9jXG4gICAgICAgICAgICBcImRhdGFUeXBlXCIgICAgOiBcImpzb25wXCJcbiAgICAgICAgICAgIFwidGltZW91dFwiICAgICA6IDEwMDAwXG4gICAgICAgICAgICBcImNvbnRlbnRUeXBlXCIgOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiXG5cbiAgICAgICAgICBzZWxmUmVxLnN1Y2Nlc3MgKGRhdGEsIHhociwgZXJyb3IpID0+XG4gICAgICAgICAgICAjIGlmIGZvdW5kIHNlbGYgdGhlbiByZW1lbWJlciBzZWxmXG4gICAgICAgICAgICBAc2VsZlN1Ym5ldElwID0gaXBcblxuICAgICAgICAgIHNlbGZSZXEuY29tcGxldGUgKHhociwgZXJyb3IpID0+IGRvICh4aHIpID0+XG4gICAgICAgICAgICByZXR1cm4gaWYgcGFyc2VJbnQoeGhyLnN0YXR1cykgPT0gMjAwXG4gICAgICAgICAgICAjIGlmIG5vdCwgdGhlbiB3ZSBmb3VuZCBhbm90aGVyIHRhYmxldFxuICAgICAgICAgICAgdmlld1JlcSA9ICQuYWpheFxuICAgICAgICAgICAgICBcInVybFwiICAgICAgICAgOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsU3VibmV0KGlwKSArIFwiL19kZXNpZ24vdGFuZ2VyaW5lL192aWV3L2J5Q29sbGVjdGlvblwiXG4gICAgICAgICAgICAgIFwiZGF0YVR5cGVcIiAgICA6IFwianNvbnBcIlxuICAgICAgICAgICAgICBcImNvbnRlbnRUeXBlXCIgOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiLFxuICAgICAgICAgICAgICBcImRhdGFcIiAgICAgICAgOiBcbiAgICAgICAgICAgICAgICBpbmNsdWRlX2RvY3MgOiBmYWxzZVxuICAgICAgICAgICAgICAgIGtleXMgOiBKU09OLnN0cmluZ2lmeShAZG9jVHlwZXMpXG5cbiAgICAgICAgICAgIHZpZXdSZXEuc3VjY2VzcyAoZGF0YSkgPT5cbiAgICAgICAgICAgICAgZG9jTGlzdCA9IChkYXR1bS5pZCBmb3IgZGF0dW0gaW4gZGF0YS5yb3dzKVxuICAgICAgICAgICAgICAkLmNvdWNoLnJlcGxpY2F0ZShcbiAgICAgICAgICAgICAgICBUYW5nZXJpbmUuc2V0dGluZ3MudXJsU3VibmV0KGlwKSxcbiAgICAgICAgICAgICAgICBUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJsb2NhbFwiKSxcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICAgICAgPT5cbiAgICAgICAgICAgICAgICAgICAgQHRhYmxldHMuY29tcGxldGUrK1xuICAgICAgICAgICAgICAgICAgICBAdGFibGV0cy5zdWNjZXNzZnVsKytcbiAgICAgICAgICAgICAgICAgICAgQHVwZGF0ZVB1bGxSZXN1bHQoKVxuICAgICAgICAgICAgICAgICAgZXJyb3I6IChhLCBiKSA9PlxuICAgICAgICAgICAgICAgICAgICBAdGFibGV0cy5jb21wbGV0ZSsrXG4gICAgICAgICAgICAgICAgICAgIEB1cGRhdGVQdWxsUmVzdWx0KClcbiAgICAgICAgICAgICAgICAsXG4gICAgICAgICAgICAgICAgICBkb2NfaWRzOiBkb2NMaXN0XG4gICAgICAgICAgICAgIClcblxuICB1cGRhdGVQdWxsUmVzdWx0OiA9PlxuICAgIGlmIEB0YWJsZXRzLmNvbXBsZXRlID09IEB0YWJsZXRzLm9rQ291bnRcbiAgICAgIFV0aWxzLndvcmtpbmcgZmFsc2VcbiAgICAgIFV0aWxzLm1pZEFsZXJ0IHQoXCJUYWJsZXRNYW5hZ2VyVmlldy5tZXNzYWdlLnB1bGxfY29tcGxldGVcIiwgeyBzdWNjZXNzZnVsOiBAdGFibGV0cy5zdWNjZXNzZnVsLCB0b3RhbCA6IEB0YWJsZXRzLm9rQ291bnR9KVxuICAgICAgVGFuZ2VyaW5lLiRkYi5yZW1vdmVEb2MgXG4gICAgICAgIFwiX2lkXCIgIDogQHJhbmRvbURvYy5pZFxuICAgICAgICBcIl9yZXZcIiA6IEByYW5kb21Eb2MucmV2XG4gICAgICBAY2FsbGJhY2tzLmNvbXBsZXRlUHVsbD8oKVxuXG4gIHB1c2hEb2NzOiA9PlxuICAgIGlmIG5vdCBfLmlzT2JqZWN0KEBwdXNoKVxuICAgICAgVXRpbHMud29ya2luZyB0cnVlXG4gICAgICBUYW5nZXJpbmUuJGRiLnZpZXcgVGFuZ2VyaW5lLmRlc2lnbl9kb2MrXCIvYnlDb2xsZWN0aW9uXCIsIFxuICAgICAgICBrZXlzIDogQGRvY1R5cGVzXG4gICAgICAgIHN1Y2Nlc3MgOiAocmVzcG9uc2UpID0+XG4gICAgICAgICAgZG9jSWRzID0gXy5wbHVjayhyZXNwb25zZS5yb3dzLFwiaWRcIilcbiAgICAgICAgXG4gICAgICAgICAgQHB1c2ggPSBcbiAgICAgICAgICAgIGlwcyAgICA6IF8ud2l0aG91dChAdGFibGV0cy5pcHMsIEBzZWxmU3VibmV0SXApXG4gICAgICAgICAgICBkb2NJZHMgOiBkb2NJZHNcbiAgICAgICAgICAgIGN1cnJlbnQgICAgOiAwXG4gICAgICAgICAgICBjb21wbGV0ZSAgIDogMFxuICAgICAgICAgICAgc3VjY2Vzc2Z1bCA6IDBcblxuICAgICAgICAgIEBwdXNoRG9jcygpXG4gICAgZWxzZVxuXG4gICAgICBpZiBAcHVzaC5jb21wbGV0ZSA9PSBAcHVzaC5pcHMubGVuZ3RoXG4gICAgICAgIFV0aWxzLndvcmtpbmcgZmFsc2VcbiAgICAgICAgVXRpbHMuc3RpY2t5IFwiPGI+I3tAdGV4dC5zeW5jQ29tcGxldGV9PC9iPjxicj4je3QoXCJUYWJsZXRNYW5hZ2VyVmlldy5tZXNzYWdlLnN1Y2Nlc3NmdWxfY291bnRcIiwge3N1Y2Nlc3NmdWwgOiBAcHVzaC5zdWNjZXNzZnVsLCB0b3RhbCA6IEBwdXNoLmNvbXBsZXRlIH0gKSB9XCJcbiAgICAgIGVsc2VcbiAgICAgICAgVXRpbHMubWlkQWxlcnQgdChcIlRhYmxldE1hbmFnZXJWaWV3Lm1lc3NhZ2Uuc3luY2luZ1wiLHsgZG9uZTogQHB1c2guY29tcGxldGUrMSwgdG90YWwgOiBAcHVzaC5pcHMubGVuZ3RofSlcbiAgICAgICAgJC5jb3VjaC5yZXBsaWNhdGUoXG4gICAgICAgICAgVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKCBcImxvY2FsXCIgKSxcbiAgICAgICAgICBUYW5nZXJpbmUuc2V0dGluZ3MudXJsU3VibmV0KCBAcHVzaC5pcHNbIEBwdXNoLmN1cnJlbnQgXSApLFxuICAgICAgICAgICAgc3VjY2VzczogICAgICA9PlxuICAgICAgICAgICAgICBAcHVzaC5jb21wbGV0ZSsrXG4gICAgICAgICAgICAgIEBwdXNoLnN1Y2Nlc3NmdWwrK1xuICAgICAgICAgICAgICBAcHVzaERvY3MoKVxuICAgICAgICAgICAgZXJyb3I6IChhLCBiKSA9PlxuICAgICAgICAgICAgICBAcHVzaC5jb21wbGV0ZSsrXG4gICAgICAgICAgICAgIEBwdXNoRG9jcygpXG4gICAgICAgICAgLFxuICAgICAgICAgICAgZG9jX2lkczogQHB1c2guZG9jSWRzXG4gICAgICAgIClcblxuXG4iLCJ2YXIgVGFibGV0TWFuYWdlclZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuVGFibGV0TWFuYWdlclZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoVGFibGV0TWFuYWdlclZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFRhYmxldE1hbmFnZXJWaWV3KCkge1xuICAgIHRoaXMucHVzaERvY3MgPSBiaW5kKHRoaXMucHVzaERvY3MsIHRoaXMpO1xuICAgIHRoaXMudXBkYXRlUHVsbFJlc3VsdCA9IGJpbmQodGhpcy51cGRhdGVQdWxsUmVzdWx0LCB0aGlzKTtcbiAgICB0aGlzLnVwZGF0ZVB1bGwgPSBiaW5kKHRoaXMudXBkYXRlUHVsbCwgdGhpcyk7XG4gICAgdGhpcy5wdWxsRG9jcyA9IGJpbmQodGhpcy5wdWxsRG9jcywgdGhpcyk7XG4gICAgdGhpcy5zeW5jID0gYmluZCh0aGlzLnN5bmMsIHRoaXMpO1xuICAgIHJldHVybiBUYWJsZXRNYW5hZ2VyVmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFRhYmxldE1hbmFnZXJWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIktsYXNzZXNWaWV3XCI7XG5cbiAgVGFibGV0TWFuYWdlclZpZXcucHJvdG90eXBlLmkxOG4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0ID0ge1xuICAgICAgZGV0ZWN0aW5nVGFibGV0czogdChcIlRhYmxldE1hbmFnZXJWaWV3Lm1lc3NhZ2UuZGV0ZWN0aW5nXCIpLFxuICAgICAgc3luY0NvbXBsZXRlOiB0KFwiVGFibGV0TWFuYWdlclZpZXcubGFiZWwuc3luY19jb21wbGV0ZVwiKVxuICAgIH07XG4gIH07XG5cbiAgVGFibGV0TWFuYWdlclZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5pMThuKCk7XG4gICAgdGhpcy5pcEJsb2NrID0gMzI7XG4gICAgdGhpcy50b3RhbElwcyA9IDI1NjtcbiAgICB0aGlzLnRhYmxldE9mZnNldCA9IDA7XG4gICAgdGhpcy5jYWxsYmFja3MgPSBvcHRpb25zLmNhbGxiYWNrcztcbiAgICByZXR1cm4gdGhpcy5kb2NUeXBlcyA9IG9wdGlvbnMuZG9jVHlwZXM7XG4gIH07XG5cbiAgVGFibGV0TWFuYWdlclZpZXcucHJvdG90eXBlLnN5bmMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy50YWJsZXRPZmZzZXQgIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHVsbERvY3MoKTtcbiAgfTtcblxuICBUYWJsZXRNYW5hZ2VyVmlldy5wcm90b3R5cGUucHVsbERvY3MgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy50YWJsZXRPZmZzZXQgPT09IDApIHtcbiAgICAgIHRoaXMudGFibGV0cyA9IHtcbiAgICAgICAgY2hlY2tlZDogMCxcbiAgICAgICAgY29tcGxldGU6IDAsXG4gICAgICAgIHN1Y2Nlc3NmdWw6IDAsXG4gICAgICAgIG9rQ291bnQ6IDAsXG4gICAgICAgIGlwczogW10sXG4gICAgICAgIHJlc3VsdDogMFxuICAgICAgfTtcbiAgICAgIFV0aWxzLm1pZEFsZXJ0KHRoaXMudGV4dC5kZXRlY3RpbmdUYWJsZXRzKTtcbiAgICB9XG4gICAgVXRpbHMud29ya2luZyh0cnVlKTtcbiAgICB0aGlzLnJhbmRvbUlkRG9jID0gaGV4X3NoYTEoXCJcIiArIE1hdGgucmFuZG9tKCkpO1xuICAgIHJldHVybiBUYW5nZXJpbmUuJGRiLnNhdmVEb2Moe1xuICAgICAgXCJfaWRcIjogdGhpcy5yYW5kb21JZERvY1xuICAgIH0sIHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZG9jKSB7XG4gICAgICAgICAgdmFyIGksIGxvY2FsLCByZWYsIHJlZjEsIHJlc3VsdHM7XG4gICAgICAgICAgX3RoaXMucmFuZG9tRG9jID0gZG9jO1xuICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICBmb3IgKGxvY2FsID0gaSA9IHJlZiA9IF90aGlzLnRhYmxldE9mZnNldCwgcmVmMSA9IChfdGhpcy5pcEJsb2NrIC0gMSkgKyBfdGhpcy50YWJsZXRPZmZzZXQ7IHJlZiA8PSByZWYxID8gaSA8PSByZWYxIDogaSA+PSByZWYxOyBsb2NhbCA9IHJlZiA8PSByZWYxID8gKytpIDogLS1pKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goKGZ1bmN0aW9uKGxvY2FsKSB7XG4gICAgICAgICAgICAgIHZhciBpcCwgcmVxO1xuICAgICAgICAgICAgICBpcCA9IFRhbmdlcmluZS5zZXR0aW5ncy5zdWJuZXRJUChsb2NhbCk7XG4gICAgICAgICAgICAgIHJlcSA9ICQuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsU3VibmV0KGlwKSxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29ucFwiLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiLFxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDIwMDAwXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gcmVxLmNvbXBsZXRlKGZ1bmN0aW9uKHhociwgZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy50YWJsZXRzLmNoZWNrZWQrKztcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQoeGhyLnN0YXR1cykgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMudGFibGV0cy5va0NvdW50Kys7XG4gICAgICAgICAgICAgICAgICBfdGhpcy50YWJsZXRzLmlwcy5wdXNoKGlwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZVB1bGwoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KShsb2NhbCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICBVdGlscy53b3JraW5nKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIFV0aWxzLm1pZEFsZXJ0KHRoaXMudGV4dC5pbnRlcm5hbEVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBUYWJsZXRNYW5hZ2VyVmlldy5wcm90b3R5cGUudXBkYXRlUHVsbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBpcCwgbGVuLCBwZXJjZW50YWdlLCByZWYsIHJlc3VsdHM7XG4gICAgaWYgKHRoaXMudGFibGV0cy5jaGVja2VkIDwgdGhpcy5pcEJsb2NrICsgdGhpcy50YWJsZXRPZmZzZXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMudGFibGV0T2Zmc2V0ICE9PSB0aGlzLnRvdGFsSXBzIC0gdGhpcy5pcEJsb2NrKSB7XG4gICAgICBwZXJjZW50YWdlID0gTWF0aC5yb3VuZCh0aGlzLnRhYmxldE9mZnNldCAvIHRoaXMudG90YWxJcHMgKiAxMDApO1xuICAgICAgVXRpbHMubWlkQWxlcnQodChcIlRhYmxldE1hbmFnZXJWaWV3Lm1lc3NhZ2Uuc2VhcmNoaW5nXCIsIHtcbiAgICAgICAgcGVyY2VudGFnZTogcGVyY2VudGFnZVxuICAgICAgfSkpO1xuICAgICAgdGhpcy50YWJsZXRPZmZzZXQgKz0gdGhpcy5pcEJsb2NrO1xuICAgICAgcmV0dXJuIHRoaXMucHVsbERvY3MoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50YWJsZXRzLm9rQ291bnQgPSBNYXRoLm1heCh0aGlzLnRhYmxldHMub2tDb3VudCAtIDEsIDApO1xuICAgICAgaWYgKHRoaXMudGFibGV0cy5va0NvdW50ID09PSAwKSB7XG4gICAgICAgIHRoaXMudGFibGV0T2Zmc2V0ID0gMDtcbiAgICAgICAgVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0KHQoXCJUYWJsZXRNYW5hZ2VyVmlldy5tZXNzYWdlLmZvdW5kXCIsIHtcbiAgICAgICAgICBjb3VudDogdGhpcy50YWJsZXRzLm9rQ291bnRcbiAgICAgICAgfSkpO1xuICAgICAgICBUYW5nZXJpbmUuJGRiLnJlbW92ZURvYyh7XG4gICAgICAgICAgXCJfaWRcIjogdGhpcy5yYW5kb21Eb2MuaWQsXG4gICAgICAgICAgXCJfcmV2XCI6IHRoaXMucmFuZG9tRG9jLnJldlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFjb25maXJtKHQoXCJUYWJsZXRNYW5hZ2VyVmlldy5tZXNzYWdlLmNvbmZpcm1fcHVsbFwiLCB7XG4gICAgICAgIF9fZm91bmRfXzogdGhpcy50YWJsZXRzLm9rQ291bnRcbiAgICAgIH0pKSkge1xuICAgICAgICB0aGlzLnRhYmxldE9mZnNldCA9IDA7XG4gICAgICAgIFV0aWxzLndvcmtpbmcoZmFsc2UpO1xuICAgICAgICBUYW5nZXJpbmUuJGRiLnJlbW92ZURvYyh7XG4gICAgICAgICAgXCJfaWRcIjogdGhpcy5yYW5kb21Eb2MuaWQsXG4gICAgICAgICAgXCJfcmV2XCI6IHRoaXMucmFuZG9tRG9jLnJldlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgVXRpbHMubWlkQWxlcnQodChcIlRhYmxldE1hbmFnZXJWaWV3Lm1lc3NhZ2UucHVsbF9zdGF0dXNcIiwge1xuICAgICAgICB0YWJsZXRDb3VudDogdGhpcy50YWJsZXRzLm9rQ291bnRcbiAgICAgIH0pKTtcbiAgICAgIHJlZiA9IHRoaXMudGFibGV0cy5pcHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaXAgPSByZWZbaV07XG4gICAgICAgIHJlc3VsdHMucHVzaCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oaXApIHtcbiAgICAgICAgICAgIHZhciBzZWxmUmVxO1xuICAgICAgICAgICAgc2VsZlJlcSA9ICQuYWpheCh7XG4gICAgICAgICAgICAgIFwidXJsXCI6IFRhbmdlcmluZS5zZXR0aW5ncy51cmxTdWJuZXQoaXApICsgXCIvXCIgKyBfdGhpcy5yYW5kb21JZERvYyxcbiAgICAgICAgICAgICAgXCJkYXRhVHlwZVwiOiBcImpzb25wXCIsXG4gICAgICAgICAgICAgIFwidGltZW91dFwiOiAxMDAwMCxcbiAgICAgICAgICAgICAgXCJjb250ZW50VHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlbGZSZXEuc3VjY2VzcyhmdW5jdGlvbihkYXRhLCB4aHIsIGVycm9yKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy5zZWxmU3VibmV0SXAgPSBpcDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHNlbGZSZXEuY29tcGxldGUoZnVuY3Rpb24oeGhyLCBlcnJvcikge1xuICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKHhocikge1xuICAgICAgICAgICAgICAgIHZhciB2aWV3UmVxO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludCh4aHIuc3RhdHVzKSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZpZXdSZXEgPSAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgXCJ1cmxcIjogVGFuZ2VyaW5lLnNldHRpbmdzLnVybFN1Ym5ldChpcCkgKyBcIi9fZGVzaWduL3RhbmdlcmluZS9fdmlldy9ieUNvbGxlY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgIFwiZGF0YVR5cGVcIjogXCJqc29ucFwiLFxuICAgICAgICAgICAgICAgICAgXCJjb250ZW50VHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiLFxuICAgICAgICAgICAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZV9kb2NzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAga2V5czogSlNPTi5zdHJpbmdpZnkoX3RoaXMuZG9jVHlwZXMpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdSZXEuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZGF0dW0sIGRvY0xpc3Q7XG4gICAgICAgICAgICAgICAgICBkb2NMaXN0ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaiwgbGVuMSwgcmVmMSwgcmVzdWx0czE7XG4gICAgICAgICAgICAgICAgICAgIHJlZjEgPSBkYXRhLnJvd3M7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMxID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgIGRhdHVtID0gcmVmMVtqXTtcbiAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzMS5wdXNoKGRhdHVtLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czE7XG4gICAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuICQuY291Y2gucmVwbGljYXRlKFRhbmdlcmluZS5zZXR0aW5ncy51cmxTdWJuZXQoaXApLCBUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJsb2NhbFwiKSwge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICBfdGhpcy50YWJsZXRzLmNvbXBsZXRlKys7XG4gICAgICAgICAgICAgICAgICAgICAgX3RoaXMudGFibGV0cy5zdWNjZXNzZnVsKys7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZVB1bGxSZXN1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBfdGhpcy50YWJsZXRzLmNvbXBsZXRlKys7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZVB1bGxSZXN1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBkb2NfaWRzOiBkb2NMaXN0XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfSkoeGhyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpKGlwKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG4gIH07XG5cbiAgVGFibGV0TWFuYWdlclZpZXcucHJvdG90eXBlLnVwZGF0ZVB1bGxSZXN1bHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYmFzZTtcbiAgICBpZiAodGhpcy50YWJsZXRzLmNvbXBsZXRlID09PSB0aGlzLnRhYmxldHMub2tDb3VudCkge1xuICAgICAgVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICBVdGlscy5taWRBbGVydCh0KFwiVGFibGV0TWFuYWdlclZpZXcubWVzc2FnZS5wdWxsX2NvbXBsZXRlXCIsIHtcbiAgICAgICAgc3VjY2Vzc2Z1bDogdGhpcy50YWJsZXRzLnN1Y2Nlc3NmdWwsXG4gICAgICAgIHRvdGFsOiB0aGlzLnRhYmxldHMub2tDb3VudFxuICAgICAgfSkpO1xuICAgICAgVGFuZ2VyaW5lLiRkYi5yZW1vdmVEb2Moe1xuICAgICAgICBcIl9pZFwiOiB0aGlzLnJhbmRvbURvYy5pZCxcbiAgICAgICAgXCJfcmV2XCI6IHRoaXMucmFuZG9tRG9jLnJldlxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHlwZW9mIChiYXNlID0gdGhpcy5jYWxsYmFja3MpLmNvbXBsZXRlUHVsbCA9PT0gXCJmdW5jdGlvblwiID8gYmFzZS5jb21wbGV0ZVB1bGwoKSA6IHZvaWQgMDtcbiAgICB9XG4gIH07XG5cbiAgVGFibGV0TWFuYWdlclZpZXcucHJvdG90eXBlLnB1c2hEb2NzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KHRoaXMucHVzaCkpIHtcbiAgICAgIFV0aWxzLndvcmtpbmcodHJ1ZSk7XG4gICAgICByZXR1cm4gVGFuZ2VyaW5lLiRkYi52aWV3KFRhbmdlcmluZS5kZXNpZ25fZG9jICsgXCIvYnlDb2xsZWN0aW9uXCIsIHtcbiAgICAgICAga2V5czogdGhpcy5kb2NUeXBlcyxcbiAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB2YXIgZG9jSWRzO1xuICAgICAgICAgICAgZG9jSWRzID0gXy5wbHVjayhyZXNwb25zZS5yb3dzLCBcImlkXCIpO1xuICAgICAgICAgICAgX3RoaXMucHVzaCA9IHtcbiAgICAgICAgICAgICAgaXBzOiBfLndpdGhvdXQoX3RoaXMudGFibGV0cy5pcHMsIF90aGlzLnNlbGZTdWJuZXRJcCksXG4gICAgICAgICAgICAgIGRvY0lkczogZG9jSWRzLFxuICAgICAgICAgICAgICBjdXJyZW50OiAwLFxuICAgICAgICAgICAgICBjb21wbGV0ZTogMCxcbiAgICAgICAgICAgICAgc3VjY2Vzc2Z1bDogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5wdXNoRG9jcygpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMucHVzaC5jb21wbGV0ZSA9PT0gdGhpcy5wdXNoLmlwcy5sZW5ndGgpIHtcbiAgICAgICAgVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICAgIHJldHVybiBVdGlscy5zdGlja3koXCI8Yj5cIiArIHRoaXMudGV4dC5zeW5jQ29tcGxldGUgKyBcIjwvYj48YnI+XCIgKyAodChcIlRhYmxldE1hbmFnZXJWaWV3Lm1lc3NhZ2Uuc3VjY2Vzc2Z1bF9jb3VudFwiLCB7XG4gICAgICAgICAgc3VjY2Vzc2Z1bDogdGhpcy5wdXNoLnN1Y2Nlc3NmdWwsXG4gICAgICAgICAgdG90YWw6IHRoaXMucHVzaC5jb21wbGV0ZVxuICAgICAgICB9KSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgVXRpbHMubWlkQWxlcnQodChcIlRhYmxldE1hbmFnZXJWaWV3Lm1lc3NhZ2Uuc3luY2luZ1wiLCB7XG4gICAgICAgICAgZG9uZTogdGhpcy5wdXNoLmNvbXBsZXRlICsgMSxcbiAgICAgICAgICB0b3RhbDogdGhpcy5wdXNoLmlwcy5sZW5ndGhcbiAgICAgICAgfSkpO1xuICAgICAgICByZXR1cm4gJC5jb3VjaC5yZXBsaWNhdGUoVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKFwibG9jYWxcIiksIFRhbmdlcmluZS5zZXR0aW5ncy51cmxTdWJuZXQodGhpcy5wdXNoLmlwc1t0aGlzLnB1c2guY3VycmVudF0pLCB7XG4gICAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIF90aGlzLnB1c2guY29tcGxldGUrKztcbiAgICAgICAgICAgICAgX3RoaXMucHVzaC5zdWNjZXNzZnVsKys7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy5wdXNoRG9jcygpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KSh0aGlzKSxcbiAgICAgICAgICBlcnJvcjogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICBfdGhpcy5wdXNoLmNvbXBsZXRlKys7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy5wdXNoRG9jcygpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KSh0aGlzKVxuICAgICAgICB9LCB7XG4gICAgICAgICAgZG9jX2lkczogdGhpcy5wdXNoLmRvY0lkc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFRhYmxldE1hbmFnZXJWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgUmVzdWx0U3VtVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcImluZm9fYm94XCJcblxuICBldmVudHM6XG4gICAgJ2NsaWNrIC5kZXRhaWxzJyA6ICd0b2dnbGVEZXRhaWxzJ1xuXG4gIHRvZ2dsZURldGFpbHM6IC0+XG4gICAgQCRlbC5maW5kKCcuZGV0YWlsX2JveCcpLnRvZ2dsZSgyNTApXG5cblxuICBpMThuOiAtPlxuICAgIEB0ZXh0ID1cbiAgICAgIHJlc3VtZSAgICA6IHQoXCJSZXN1bHRTdW1WaWV3LmJ1dHRvbi5yZXN1bWVcIilcbiAgICAgIG5vUmVzdWx0cyA6IHQoXCJSZXN1bHRTdW1WaWV3Lm1lc3NhZ2Uubm9fcmVzdWx0c1wiKVxuXG4gIGluaXRpYWxpemU6ICggb3B0aW9ucyApIC0+XG5cbiAgICBAaTE4bigpXG5cbiAgICBAcmVzdWx0ID0gb3B0aW9ucy5tb2RlbFxuICAgIEBmaW5pc2hDaGVjayA9IG9wdGlvbnMuZmluaXNoQ2hlY2tcbiAgICBAZmluaXNoZWQgPSBpZiBfLmxhc3QoQHJlc3VsdC5hdHRyaWJ1dGVzLnN1YnRlc3REYXRhKT8uZGF0YS5lbmRfdGltZT8gdGhlbiB0cnVlIGVsc2UgZmFsc2VcblxuICAgIEBzdHVkZW50SWQgPSBcIlwiXG4gICAgZm9yIHN1YnRlc3QgaW4gQHJlc3VsdC5hdHRyaWJ1dGVzLnN1YnRlc3REYXRhXG4gICAgICBwcm90b3R5cGUgPSBzdWJ0ZXN0LnByb3RvdHlwZVxuICAgICAgaWYgcHJvdG90eXBlID09IFwiaWRcIlxuICAgICAgICBAc3R1ZGVudElkID0gc3VidGVzdC5kYXRhLnBhcnRpY2lwYW50X2lkXG4gICAgICAgIGJyZWFrXG5cbiAgcmVuZGVyOiAtPlxuICAgIGh0bWwgPSBcIjxkaXYgY2xhc3M9J2RldGFpbF9ib3gnPlwiXG4gICAgaHRtbCArPSBcIjxkaXY+PGEgaHJlZj0nI3Jlc3VtZS8je0ByZXN1bHQuZ2V0KCdhc3Nlc3NtZW50SWQnKX0vI3tAcmVzdWx0LmlkfSc+PGJ1dHRvbiBjbGFzcz0nY29tbWFuZCc+I3tAdGV4dC5yZXN1bWV9PC9idXR0b24+PC9hPjwvZGl2PlwiIHVubGVzcyBAZmluaXNoZWQgfHwgIUBmaW5pc2hDaGVja1xuICAgIGZvciBkYXR1bSwgaSBpbiBAcmVzdWx0LmdldChcInN1YnRlc3REYXRhXCIpXG4gICAgICBzdW0gPSBkYXR1bS5kYXRhLml0ZW1zPy5sZW5ndGggb3IgT2JqZWN0LmtleXMoZGF0dW0uZGF0YSkubGVuZ3RoXG4gICAgICBodG1sICs9IFwiPGRpdj4je2RhdHVtLm5hbWV9IC0gaXRlbXMgI3tzdW19PC9kaXY+XCJcbiAgICBodG1sICs9IFwiXG4gICAgICA8L2Rpdj5cbiAgICBcIlxuXG4gICAgQCRlbC5odG1sIGh0bWxcblxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuXG4iLCJ2YXIgUmVzdWx0U3VtVmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblJlc3VsdFN1bVZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoUmVzdWx0U3VtVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gUmVzdWx0U3VtVmlldygpIHtcbiAgICByZXR1cm4gUmVzdWx0U3VtVmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFJlc3VsdFN1bVZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiaW5mb19ib3hcIjtcblxuICBSZXN1bHRTdW1WaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrIC5kZXRhaWxzJzogJ3RvZ2dsZURldGFpbHMnXG4gIH07XG5cbiAgUmVzdWx0U3VtVmlldy5wcm90b3R5cGUudG9nZ2xlRGV0YWlscyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKCcuZGV0YWlsX2JveCcpLnRvZ2dsZSgyNTApO1xuICB9O1xuXG4gIFJlc3VsdFN1bVZpZXcucHJvdG90eXBlLmkxOG4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0ID0ge1xuICAgICAgcmVzdW1lOiB0KFwiUmVzdWx0U3VtVmlldy5idXR0b24ucmVzdW1lXCIpLFxuICAgICAgbm9SZXN1bHRzOiB0KFwiUmVzdWx0U3VtVmlldy5tZXNzYWdlLm5vX3Jlc3VsdHNcIilcbiAgICB9O1xuICB9O1xuXG4gIFJlc3VsdFN1bVZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGosIGxlbiwgcHJvdG90eXBlLCByZWYsIHJlZjEsIHJlc3VsdHMsIHN1YnRlc3Q7XG4gICAgdGhpcy5pMThuKCk7XG4gICAgdGhpcy5yZXN1bHQgPSBvcHRpb25zLm1vZGVsO1xuICAgIHRoaXMuZmluaXNoQ2hlY2sgPSBvcHRpb25zLmZpbmlzaENoZWNrO1xuICAgIHRoaXMuZmluaXNoZWQgPSAoKHJlZiA9IF8ubGFzdCh0aGlzLnJlc3VsdC5hdHRyaWJ1dGVzLnN1YnRlc3REYXRhKSkgIT0gbnVsbCA/IHJlZi5kYXRhLmVuZF90aW1lIDogdm9pZCAwKSAhPSBudWxsID8gdHJ1ZSA6IGZhbHNlO1xuICAgIHRoaXMuc3R1ZGVudElkID0gXCJcIjtcbiAgICByZWYxID0gdGhpcy5yZXN1bHQuYXR0cmlidXRlcy5zdWJ0ZXN0RGF0YTtcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChqID0gMCwgbGVuID0gcmVmMS5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgc3VidGVzdCA9IHJlZjFbal07XG4gICAgICBwcm90b3R5cGUgPSBzdWJ0ZXN0LnByb3RvdHlwZTtcbiAgICAgIGlmIChwcm90b3R5cGUgPT09IFwiaWRcIikge1xuICAgICAgICB0aGlzLnN0dWRlbnRJZCA9IHN1YnRlc3QuZGF0YS5wYXJ0aWNpcGFudF9pZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRzLnB1c2godm9pZCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgUmVzdWx0U3VtVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRhdHVtLCBodG1sLCBpLCBqLCBsZW4sIHJlZiwgcmVmMSwgc3VtO1xuICAgIGh0bWwgPSBcIjxkaXYgY2xhc3M9J2RldGFpbF9ib3gnPlwiO1xuICAgIGlmICghKHRoaXMuZmluaXNoZWQgfHwgIXRoaXMuZmluaXNoQ2hlY2spKSB7XG4gICAgICBodG1sICs9IFwiPGRpdj48YSBocmVmPScjcmVzdW1lL1wiICsgKHRoaXMucmVzdWx0LmdldCgnYXNzZXNzbWVudElkJykpICsgXCIvXCIgKyB0aGlzLnJlc3VsdC5pZCArIFwiJz48YnV0dG9uIGNsYXNzPSdjb21tYW5kJz5cIiArIHRoaXMudGV4dC5yZXN1bWUgKyBcIjwvYnV0dG9uPjwvYT48L2Rpdj5cIjtcbiAgICB9XG4gICAgcmVmID0gdGhpcy5yZXN1bHQuZ2V0KFwic3VidGVzdERhdGFcIik7XG4gICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgIGRhdHVtID0gcmVmW2ldO1xuICAgICAgc3VtID0gKChyZWYxID0gZGF0dW0uZGF0YS5pdGVtcykgIT0gbnVsbCA/IHJlZjEubGVuZ3RoIDogdm9pZCAwKSB8fCBPYmplY3Qua2V5cyhkYXR1bS5kYXRhKS5sZW5ndGg7XG4gICAgICBodG1sICs9IFwiPGRpdj5cIiArIGRhdHVtLm5hbWUgKyBcIiAtIGl0ZW1zIFwiICsgc3VtICsgXCI8L2Rpdj5cIjtcbiAgICB9XG4gICAgaHRtbCArPSBcIjwvZGl2PlwiO1xuICAgIHRoaXMuJGVsLmh0bWwoaHRtbCk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIHJldHVybiBSZXN1bHRTdW1WaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgRGFzaGJvYXJkVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIkRhc2hib2FyZFZpZXdcIlxuXG4gIGV2ZW50czpcbiAgICBcImNoYW5nZSAjZ3JvdXBCeVwiOiBcInVwZGF0ZVwiXG4gICAgXCJjaGFuZ2UgI2Fzc2Vzc21lbnRcIjogXCJ1cGRhdGVcIlxuICAgIFwiY2hhbmdlICNzaGlmdEhvdXJzXCI6IFwidXBkYXRlXCJcbiAgICBcImNsaWNrIC5yZXN1bHRcIjogXCJzaG93UmVzdWx0XCJcblxuICBzaG93UmVzdWx0OiAoZXZlbnQpID0+XG4gICAgcmVzdWx0RGV0YWlscyA9ICQoXCIjcmVzdWx0RGV0YWlsc1wiKVxuICAgIGlmIHJlc3VsdERldGFpbHMuaXMoXCI6dmlzaWJsZVwiKVxuICAgICAgcmVzdWx0RGV0YWlscy5oaWRlKClcbiAgICBlbHNlXG4gICAgICByZXN1bHRJZCA9ICQoZXZlbnQudGFyZ2V0KS50ZXh0KClcbiMgICAgICAkLmNvdWNoLmRiKGRvY3VtZW50LmxvY2F0aW9uLnBhdGhuYW1lLm1hdGNoKC9eXFwvKC4qPylcXC8vKS5wb3AoKSkub3BlbkRvYyByZXN1bHRJZCxcbiAgICAgICQuY291Y2guZGIoVGFuZ2VyaW5lLnNldHRpbmdzLmdyb3VwREIpLm9wZW5Eb2MgcmVzdWx0SWQsXG4gICAgICAgIHN1Y2Nlc3M6IChyZXN1bHQpID0+XG4gICAgICAgICAgcmVzdWx0RGV0YWlscy5odG1sIFwiPHByZT4je0BzeW50YXhIaWdobGlnaHQocmVzdWx0KX08L3ByZT5cIlxuICAgICAgICAgIHJlc3VsdERldGFpbHMuY3NzXG4gICAgICAgICAgICB0b3A6ICQoZXZlbnQudGFyZ2V0KS5wb3NpdGlvbigpLnRvcCArIDMwXG4gICAgICAgICAgICB3aWR0aDogNDAwXG4gICAgICAgICAgICBsZWZ0OiA1MFxuICAgICAgICAgIHJlc3VsdERldGFpbHMuc2hvdygpXG5cbiAgc3ludGF4SGlnaGxpZ2h0OiAoanNvbikgPT5cbiAgICB3aW5kb3cuanNvbiA9IGpzb25cbiAgICBpZiAodHlwZW9mIGpzb24gIT0gJ3N0cmluZycpXG4gICAgICAganNvbiA9IEpTT04uc3RyaW5naWZ5KGpzb24sIHVuZGVmaW5lZCwgMilcbiAgICBqc29uID0ganNvbi5yZXBsYWNlKC8mL2csICcmYW1wOycpLnJlcGxhY2UoLzwvZywgJyZsdDsnKS5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICByZXR1cm4ganNvbi5yZXBsYWNlIC8oXCIoXFxcXHVbYS16QS1aMC05XXs0fXxcXFxcW151XXxbXlxcXFxcIl0pKlwiKFxccyo6KT98XFxiKHRydWV8ZmFsc2V8bnVsbClcXGJ8LT9cXGQrKD86XFwuXFxkKik/KD86W2VFXVsrXFwtXT9cXGQrKT8pL2csIChtYXRjaCkgLT5cbiAgICAgIGNscyA9ICdudW1iZXInXG4gICAgICBpZiAoL15cIi8udGVzdChtYXRjaCkpXG4gICAgICAgIGlmICgvOiQvLnRlc3QobWF0Y2gpKVxuICAgICAgICAgIGNscyA9ICdrZXknXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBjbHMgPSAnc3RyaW5nJ1xuICAgICAgZWxzZSBpZiAoL3RydWV8ZmFsc2UvLnRlc3QobWF0Y2gpKVxuICAgICAgICBjbHMgPSAnYm9vbGVhbidcbiAgICAgIGVsc2UgaWYgKC9udWxsLy50ZXN0KG1hdGNoKSlcbiAgICAgICAgY2xzID0gJ251bGwnXG4gICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwiJyArIGNscyArICdcIj4nICsgbWF0Y2ggKyAnPC9zcGFuPidcblxuICB1cGRhdGU6ID0+XG4gICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcImRhc2hib2FyZC9ncm91cEJ5LyN7JChcIiNncm91cEJ5XCIpLnZhbCgpfS9hc3Nlc3NtZW50LyN7JChcIiNhc3Nlc3NtZW50XCIpLnZhbCgpfS9zaGlmdEhvdXJzLyN7JChcIiNzaGlmdEhvdXJzXCIpLnZhbCgpfVwiLCB0cnVlKVxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIGNvbnNvbGUubG9nKFwidmlldy5vcHRpb25zOiBcIiArIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpKVxuICAgIEBncm91cEJ5ID0gb3B0aW9ucy5ncm91cEJ5XG4gICAgQGtleSA9IG9wdGlvbnMuYXNzZXNzbWVudFxuICAgIGNvbnNvbGUubG9nKFwiQGtleTogXCIgKyBKU09OLnN0cmluZ2lmeShAa2V5KSlcbiAgICBAc2hpZnRIb3VycyA9IG9wdGlvbnMuc2hpZnRIb3VycyB8fCAwXG5cbiAgcmVuZGVyOiA9PlxuICAgIGNvbnNvbGUubG9nKFwiQGtleTogXCIgKyBKU09OLnN0cmluZ2lmeShAa2V5KSlcblxuICAgIGlmIEBrZXkgaXMgXCJBbGxcIlxuICAgICAgJC5jb3VjaC5kYihUYW5nZXJpbmUuZGJfbmFtZSkudmlldyBcIiN7VGFuZ2VyaW5lLmRlc2lnbl9kb2N9L2Rhc2hib2FyZFJlc3VsdHNcIixcbiAgICAgICAgcmVkdWNlOiBmYWxzZVxuICAgICAgICBzdWNjZXNzOiBAcmVuZGVyUmVzdWx0c1xuICAgIGVsc2VcbiAgICAgICQuY291Y2guZGIoVGFuZ2VyaW5lLmRiX25hbWUpLnZpZXcgXCIje1RhbmdlcmluZS5kZXNpZ25fZG9jfS9kYXNoYm9hcmRSZXN1bHRzXCIsXG4gICAgICAgIGtleTogQGtleVxuICAgICAgICByZWR1Y2U6IGZhbHNlXG4gICAgICAgIHN1Y2Nlc3M6IEByZW5kZXJSZXN1bHRzXG5cbiAgcmVuZGVyUmVzdWx0czogKHJlc3VsdCkgPT5cbiAgICB0YWJsZVJvd3MgPSB7fVxuICAgIGRhdGVzID0ge31cbiAgICBwcm9wZXJ0aWVzVG9Hcm91cEJ5ID0ge31cblxuICAgICMgRmluZCB0aGUgZmlyc3QgcG9zc2libGUgZ3JvdXBpbmcgdmFyaWFibGUgYW5kIHVzZSBpdCBpZiBub3QgZGVmaW5lZFxuICAgIEBncm91cEJ5ID0gXy5rZXlzKHJlc3VsdC5yb3dzWzBdLnZhbHVlKVswXSB1bmxlc3MgQGdyb3VwQnk/XG5cbiAgICBfLmVhY2ggcmVzdWx0LnJvd3MsIChyb3cpID0+XG4gICAgICBsZWZ0Q29sdW1uID0gcm93LnZhbHVlW0Bncm91cEJ5XVxuICAgICAgc29ydGluZ0RhdGUgPSBpZiByb3cudmFsdWUuc3RhcnRUaW1lIHRoZW4gbW9tZW50KHJvdy52YWx1ZS5zdGFydFRpbWUpLmFkZChcImhcIixAc2hpZnRIb3VycykuZm9ybWF0KFwiWVlZWU1NRERcIikgZWxzZSBcIlVua25vd25cIlxuICAgICAgZGlzcGxheURhdGUgPSBpZiByb3cudmFsdWUuc3RhcnRUaW1lIHRoZW4gbW9tZW50KHJvdy52YWx1ZS5zdGFydFRpbWUpLmFkZChcImhcIixAc2hpZnRIb3VycykuZm9ybWF0KFwiRG8gTU1NXCIpIGVsc2UgXCJVbmtub3duXCJcbiAgICAgIGRhdGVzW3NvcnRpbmdEYXRlXSA9IGRpc3BsYXlEYXRlXG4gICAgICB0YWJsZVJvd3NbbGVmdENvbHVtbl0gPSB7fSB1bmxlc3MgdGFibGVSb3dzW2xlZnRDb2x1bW5dP1xuICAgICAgdGFibGVSb3dzW2xlZnRDb2x1bW5dW3NvcnRpbmdEYXRlXSA9IFtdIHVubGVzcyB0YWJsZVJvd3NbbGVmdENvbHVtbl1bc29ydGluZ0RhdGVdP1xuICAgICAgdGFibGVSb3dzW2xlZnRDb2x1bW5dW3NvcnRpbmdEYXRlXS5wdXNoIFwiXG4gICAgICAgIDxkaXYgc3R5bGU9J3BhZGRpbmctdG9wOjEwcHg7Jz5cbiAgICAgICAgICA8dGFibGU+XG4gICAgICAgICAgI3tcbiAgICAgICAgICAgIF8ubWFwKHJvdy52YWx1ZSwgKHZhbHVlLGtleSkgPT5cbiAgICAgICAgICAgICAgcHJvcGVydGllc1RvR3JvdXBCeVtrZXldID0gdHJ1ZVxuICAgICAgICAgICAgICB2YWx1ZSA9IG1vbWVudCh2YWx1ZSkuYWRkKFwiaFwiLEBzaGlmdEhvdXJzKS5mb3JtYXQoXCJZWVlZLU1NLUREIEhIOm1tXCIpIGlmIGtleSBpcyBcInN0YXJ0VGltZVwiXG4gICAgICAgICAgICAgIHZhbHVlID0gXCI8YnV0dG9uIGNsYXNzPSdyZXN1bHQnPiN7dmFsdWV9PC9idXR0b24+XCIgaWYga2V5IGlzIFwicmVzdWx0SWRcIlxuICAgICAgICAgICAgICBcIjx0cj48dGQ+I3trZXl9PC90ZD48dGQ+I3t2YWx1ZX08L3RkPjwvdHI+XCJcbiAgICAgICAgICAgICkuam9pbihcIlwiKVxuICAgICAgICAgIH1cbiAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGhyLz5cbiAgICAgIFwiXG4gICAgQCRlbC5odG1sIFwiXG4gICAgICA8aDE+I3tUYW5nZXJpbmUuZGJfbmFtZX08L2gxPlxuICAgICAgQXNzZXNzbWVudDpcbiAgICAgIDxzZWxlY3QgaWQ9J2Fzc2Vzc21lbnQnPlxuICAgICAgPC9zZWxlY3Q+XG4gICAgICA8YnIvPlxuICAgICAgVmFsdWUgdXNlZCBmb3IgZ3JvdXBpbmc6XG4gICAgICA8c2VsZWN0IGlkPSdncm91cEJ5Jz5cbiAgICAgICAgI3tcbiAgICAgICAgICBfLm1hcCBwcm9wZXJ0aWVzVG9Hcm91cEJ5LCAodmFsdWUsa2V5KSA9PlxuICAgICAgICAgICAgXCI8b3B0aW9uICN7aWYga2V5IGlzIEBncm91cEJ5IHRoZW4gXCJzZWxlY3RlZD0ndHJ1ZSdcIiBlbHNlICcnfT5cbiAgICAgICAgICAgICAgI3trZXl9XG4gICAgICAgICAgICA8L29wdGlvbj5cIlxuICAgICAgICB9XG4gICAgICA8L3NlbGVjdD5cbiAgICAgIDxici8+XG4gICAgICA8YnIvPlxuICAgICAgPGJ1dHRvbiBvbkNsaWNrPSckKFxcXCIjYWR2YW5jZWRPcHRpb25zXFxcIikudG9nZ2xlKCknPkFkdmFuY2VkIE9wdGlvbnM8L2J1dHRvbj5cbiAgICAgIDxkaXYgc3R5bGU9J2Rpc3BsYXk6bm9uZScgaWQ9J2FkdmFuY2VkT3B0aW9ucyc+XG4gICAgICBDdXJyZW50IHRpbWUgaW4geW91ciB0aW1lem9uZSAoI3tqc3R6LmRldGVybWluZSgpLm5hbWUoKX0pIGlzICN7IG1vbWVudCgpLmZvcm1hdChcIllZWVktTU0tREQgSEg6bW1cIikgfTxici8+XG4gICAgICBTaGlmdCB0aW1lIHZhbHVlcyBieSA8aW5wdXQgaWQ9J3NoaWZ0SG91cnMnIHR5cGU9J251bWJlcicgdmFsdWU9JyN7QHNoaWZ0SG91cnN9Jz48L2lucHV0PiBob3VycyB0byBoYW5kbGUgY29ycmVjdCB0aW1lem9uZS48YnIvPlxuICAgICAgU2hpZnRlZCB0aW1lOiAjeyBtb21lbnQoKS5hZGQoXCJoXCIsQHNoaWZ0SG91cnMpLmZvcm1hdChcIllZWVktTU0tREQgSEg6bW1cIil9XG4gICAgICA8YnIvPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDx0YWJsZSBpZD0ncmVzdWx0cycgY2xhc3M9J3RhYmxlc29ydGVyJz5cbiAgICAgICAgPHRoZWFkPlxuICAgICAgICAgIDx0aD4je0Bncm91cEJ5fTwvdGg+XG4gICAgICAgICAgI3tcbiAgICAgICAgICAgIF8oZGF0ZXMpLmtleXMoKS5zb3J0KCkubWFwKCAoc29ydGluZ0RhdGUpIC0+XG4gICAgICAgICAgICAgIFwiPHRoIGNsYXNzPScje3NvcnRpbmdEYXRlfSc+I3tkYXRlc1tzb3J0aW5nRGF0ZV19PC90aD5cIlxuICAgICAgICAgICAgKS5qb2luKFwiXCIpXG4gICAgICAgICAgfVxuICAgICAgICA8L3RoZWFkPlxuICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgI3tcbiAgICAgICAgICAgIF8ubWFwKHRhYmxlUm93cywgKGRhdGFGb3JEYXRlcywgbGVmdENvbHVtbikgLT5cbiAgICAgICAgICAgICAgXCI8dHI+XG4gICAgICAgICAgICAgICAgPHRkPiN7bGVmdENvbHVtbn08L3RkPlxuICAgICAgICAgICAgICAgICN7XG4gICAgICAgICAgICAgICAgICBfKGRhdGVzKS5rZXlzKCkuc29ydCgpLm1hcCggKHNvcnRpbmdEYXRlKSAtPlxuICAgICAgICAgICAgICAgICAgICBcIjx0ZCBjbGFzcz0nI3tzb3J0aW5nRGF0ZX0nPlxuICAgICAgICAgICAgICAgICAgICAgICN7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiBkYXRhRm9yRGF0ZXNbc29ydGluZ0RhdGVdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0nc29ydC12YWx1ZScgb25DbGljaz0nJCh0aGlzKS5zaWJsaW5ncygpLnRvZ2dsZSgpJz4je2RhdGFGb3JEYXRlc1tzb3J0aW5nRGF0ZV0ubGVuZ3RofTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9J2Rpc3BsYXk6bm9uZSc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAje2RhdGFGb3JEYXRlc1tzb3J0aW5nRGF0ZV0uam9pbihcIlwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcIlxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cIlxuICAgICAgICAgICAgICAgICAgKS5qb2luKFwiXCIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3RyPlwiXG4gICAgICAgICAgICApLmpvaW4oXCJcIilcbiAgICAgICAgICB9XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgICAgPGRpdiBpZD0ncmVzdWx0RGV0YWlscyc+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzdHlsZT5cbiAgICAgICAgI3Jlc3VsdERldGFpbHN7XG4gICAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjpibGFjaztcbiAgICAgICAgICBkaXNwbGF5Om5vbmU7XG4gICAgICAgIH1cbiAgICAgICAgcHJlIHtcbiAgICAgICAgICBmb250LXNpemU6IDc1JTtcbiAgICAgICAgICBvdXRsaW5lOiAxcHggc29saWQgI2NjYzsgXG4gICAgICAgICAgcGFkZGluZzogNXB4OyBcbiAgICAgICAgICBtYXJnaW46IDVweDsgXG4gICAgICAgICAgdGV4dC1zaGFkb3c6IG5vbmU7XG4gICAgICAgICAgb3ZlcmZsb3ctd3JhcDpicmVhay13b3JkO1xuICAgICAgICB9XG4gICAgICAgIC5zdHJpbmcgeyBjb2xvcjogZ3JlZW47IH1cbiAgICAgICAgLm51bWJlciB7IGNvbG9yOiBkYXJrb3JhbmdlOyB9XG4gICAgICAgIC5ib29sZWFuIHsgY29sb3I6IGJsdWU7IH1cbiAgICAgICAgLm51bGwgeyBjb2xvcjogbWFnZW50YTsgfVxuICAgICAgICAua2V5IHsgY29sb3I6IHJlZDsgfVxuICAgICAgPC9zdHlsZT5cbiAgICBcIlxuXG4jICAgIEAkZWwuZmluZChcInRhYmxlI3Jlc3VsdHNcIikudGFibGVzb3J0ZXJcbiMgICAgICB3aWRnZXRzOiBbJ3plYnJhJ11cbiMgICAgICBzb3J0TGlzdDogW1swLDBdXVxuI8KgwqDCoMKgwqDCoHRleHRFeHRyYWN0aW9uOiAobm9kZSkgLT5cbiMgICAgICAgIHNvcnRWYWx1ZSA9ICQobm9kZSkuZmluZChcIi5zb3J0LXZhbHVlXCIpLnRleHQoKVxuIyAgICAgICAgaWYgc29ydFZhbHVlICE9IFwiXCJcbiMgICAgICAgICAgc29ydFZhbHVlXG4jICAgICAgICBlbHNlXG4jICAgICAgICAgICQobm9kZSkudGV4dCgpXG4jXG4jICAgIEAkZWwuZmluZChcIiNhZHZhbmNlZE9wdGlvbnNcIikuYXBwZW5kIFwiU2VsZWN0IHdoaWNoIGRhdGVzIHRvIHNob3c8YnIvPlwiXG4jICAgIF8oZGF0ZXMpLmtleXMoKS5zb3J0KCkubWFwKCAoc29ydGluZ0RhdGUpID0+XG4jICAgICAgZGlzcGxheURhdGUgPSBkYXRlc1tzb3J0aW5nRGF0ZV1cbiMgICAgICBkYXRlQ2hlY2tib3ggPSAkKFwiPGxhYmVsIGZvcj0nI3tzb3J0aW5nRGF0ZX0nPiN7ZGlzcGxheURhdGV9PC9sYWJlbD48aW5wdXQgbmFtZT0nI3tzb3J0aW5nRGF0ZX0nIGlkPScje3NvcnRpbmdEYXRlfScgdHlwZT0nY2hlY2tib3gnIGNoZWNrZWQ9J3RydWUnLz5cIilcbiMgICAgICBkYXRlQ2hlY2tib3guY2xpY2sgLT5cbiMgICAgICAgICQoXCIuI3tzb3J0aW5nRGF0ZX1cIikudG9nZ2xlKClcbiMgICAgICBAJGVsLmZpbmQoXCIjYWR2YW5jZWRPcHRpb25zXCIpLmFwcGVuZCBkYXRlQ2hlY2tib3hcbiMgICAgKVxuI1xuIyAgICAkLmNvdWNoLmRiKFRhbmdlcmluZS5kYl9uYW1lKS52aWV3IFwiI3tUYW5nZXJpbmUuZGVzaWduX2RvY30vZGFzaGJvYXJkUmVzdWx0c1wiLFxuIyAgICAgIGdyb3VwOiB0cnVlXG4jICAgICAgc3VjY2VzczogKHJlc3VsdCkgPT5cbiMgICAgICAgICQoXCJzZWxlY3QjYXNzZXNzbWVudFwiKS5odG1sIFwiPG9wdGlvbj5BbGw8L29wdGlvbj5cIiArXG4jICAgICAgICBfLm1hcChyZXN1bHQucm93cywgKHJvdykgPT5cbiMgICAgICAgICAgXCI8b3B0aW9uIHZhbHVlPScje3Jvdy5rZXl9JyAje2lmIHJvdy5rZXkgaXMgQGtleSB0aGVuIFwic2VsZWN0ZWQ9J3RydWUnXCIgZWxzZSBcIlwifT4je3Jvdy5rZXl9PC9vcHRpb24+XCJcbiMgICAgICAgICkuam9pbihcIlwiKVxuIyAgICAgICAgXy5lYWNoIHJlc3VsdC5yb3dzLCAocm93KSA9PlxuIyAgICAgICAgICByZXR1cm4gdW5sZXNzIHJvdy5rZXk/XG4jICAgICAgICAgICQuY291Y2guZGIoVGFuZ2VyaW5lLmRiX25hbWUpLm9wZW5Eb2Mgcm93LmtleSxcbiMgICAgICAgICAgICBzdWNjZXNzOiAocmVzdWx0KSA9PlxuIyAgICAgICAgICAgICAgJChcIm9wdGlvblt2YWx1ZT0je3Jvdy5rZXl9XVwiKS5odG1sIHJlc3VsdC5uYW1lXG4jICAgICAgICAgICAgZXJyb3I6IChyZXN1bHQpID0+XG4jICAgICAgICAgICAgICAkKFwib3B0aW9uW3ZhbHVlPSN7cm93LmtleX1dXCIpLmh0bWwgXCJVbmtub3duIGFzc2Vzc21lbnRcIlxuXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiIsInZhciBEYXNoYm9hcmRWaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkRhc2hib2FyZFZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoRGFzaGJvYXJkVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gRGFzaGJvYXJkVmlldygpIHtcbiAgICB0aGlzLnJlbmRlclJlc3VsdHMgPSBiaW5kKHRoaXMucmVuZGVyUmVzdWx0cywgdGhpcyk7XG4gICAgdGhpcy5yZW5kZXIgPSBiaW5kKHRoaXMucmVuZGVyLCB0aGlzKTtcbiAgICB0aGlzLnVwZGF0ZSA9IGJpbmQodGhpcy51cGRhdGUsIHRoaXMpO1xuICAgIHRoaXMuc3ludGF4SGlnaGxpZ2h0ID0gYmluZCh0aGlzLnN5bnRheEhpZ2hsaWdodCwgdGhpcyk7XG4gICAgdGhpcy5zaG93UmVzdWx0ID0gYmluZCh0aGlzLnNob3dSZXN1bHQsIHRoaXMpO1xuICAgIHJldHVybiBEYXNoYm9hcmRWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgRGFzaGJvYXJkVmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJEYXNoYm9hcmRWaWV3XCI7XG5cbiAgRGFzaGJvYXJkVmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgIFwiY2hhbmdlICNncm91cEJ5XCI6IFwidXBkYXRlXCIsXG4gICAgXCJjaGFuZ2UgI2Fzc2Vzc21lbnRcIjogXCJ1cGRhdGVcIixcbiAgICBcImNoYW5nZSAjc2hpZnRIb3Vyc1wiOiBcInVwZGF0ZVwiLFxuICAgIFwiY2xpY2sgLnJlc3VsdFwiOiBcInNob3dSZXN1bHRcIlxuICB9O1xuXG4gIERhc2hib2FyZFZpZXcucHJvdG90eXBlLnNob3dSZXN1bHQgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZXN1bHREZXRhaWxzLCByZXN1bHRJZDtcbiAgICByZXN1bHREZXRhaWxzID0gJChcIiNyZXN1bHREZXRhaWxzXCIpO1xuICAgIGlmIChyZXN1bHREZXRhaWxzLmlzKFwiOnZpc2libGVcIikpIHtcbiAgICAgIHJldHVybiByZXN1bHREZXRhaWxzLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0SWQgPSAkKGV2ZW50LnRhcmdldCkudGV4dCgpO1xuICAgICAgcmV0dXJuICQuY291Y2guZGIoVGFuZ2VyaW5lLnNldHRpbmdzLmdyb3VwREIpLm9wZW5Eb2MocmVzdWx0SWQsIHtcbiAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgcmVzdWx0RGV0YWlscy5odG1sKFwiPHByZT5cIiArIChfdGhpcy5zeW50YXhIaWdobGlnaHQocmVzdWx0KSkgKyBcIjwvcHJlPlwiKTtcbiAgICAgICAgICAgIHJlc3VsdERldGFpbHMuY3NzKHtcbiAgICAgICAgICAgICAgdG9wOiAkKGV2ZW50LnRhcmdldCkucG9zaXRpb24oKS50b3AgKyAzMCxcbiAgICAgICAgICAgICAgd2lkdGg6IDQwMCxcbiAgICAgICAgICAgICAgbGVmdDogNTBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdERldGFpbHMuc2hvdygpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgRGFzaGJvYXJkVmlldy5wcm90b3R5cGUuc3ludGF4SGlnaGxpZ2h0ID0gZnVuY3Rpb24oanNvbikge1xuICAgIHdpbmRvdy5qc29uID0ganNvbjtcbiAgICBpZiAodHlwZW9mIGpzb24gIT09ICdzdHJpbmcnKSB7XG4gICAgICBqc29uID0gSlNPTi5zdHJpbmdpZnkoanNvbiwgdm9pZCAwLCAyKTtcbiAgICB9XG4gICAganNvbiA9IGpzb24ucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xuICAgIHJldHVybiBqc29uLnJlcGxhY2UoLyhcIihcXFxcdVthLXpBLVowLTldezR9fFxcXFxbXnVdfFteXFxcXFwiXSkqXCIoXFxzKjopP3xcXGIodHJ1ZXxmYWxzZXxudWxsKVxcYnwtP1xcZCsoPzpcXC5cXGQqKT8oPzpbZUVdWytcXC1dP1xcZCspPykvZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHZhciBjbHM7XG4gICAgICBjbHMgPSAnbnVtYmVyJztcbiAgICAgIGlmICgvXlwiLy50ZXN0KG1hdGNoKSkge1xuICAgICAgICBpZiAoLzokLy50ZXN0KG1hdGNoKSkge1xuICAgICAgICAgIGNscyA9ICdrZXknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNscyA9ICdzdHJpbmcnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKC90cnVlfGZhbHNlLy50ZXN0KG1hdGNoKSkge1xuICAgICAgICBjbHMgPSAnYm9vbGVhbic7XG4gICAgICB9IGVsc2UgaWYgKC9udWxsLy50ZXN0KG1hdGNoKSkge1xuICAgICAgICBjbHMgPSAnbnVsbCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gJzxzcGFuIGNsYXNzPVwiJyArIGNscyArICdcIj4nICsgbWF0Y2ggKyAnPC9zcGFuPic7XG4gICAgfSk7XG4gIH07XG5cbiAgRGFzaGJvYXJkVmlldy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJkYXNoYm9hcmQvZ3JvdXBCeS9cIiArICgkKFwiI2dyb3VwQnlcIikudmFsKCkpICsgXCIvYXNzZXNzbWVudC9cIiArICgkKFwiI2Fzc2Vzc21lbnRcIikudmFsKCkpICsgXCIvc2hpZnRIb3Vycy9cIiArICgkKFwiI3NoaWZ0SG91cnNcIikudmFsKCkpLCB0cnVlKTtcbiAgfTtcblxuICBEYXNoYm9hcmRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIGNvbnNvbGUubG9nKFwidmlldy5vcHRpb25zOiBcIiArIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpKTtcbiAgICB0aGlzLmdyb3VwQnkgPSBvcHRpb25zLmdyb3VwQnk7XG4gICAgdGhpcy5rZXkgPSBvcHRpb25zLmFzc2Vzc21lbnQ7XG4gICAgY29uc29sZS5sb2coXCJAa2V5OiBcIiArIEpTT04uc3RyaW5naWZ5KHRoaXMua2V5KSk7XG4gICAgcmV0dXJuIHRoaXMuc2hpZnRIb3VycyA9IG9wdGlvbnMuc2hpZnRIb3VycyB8fCAwO1xuICB9O1xuXG4gIERhc2hib2FyZFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKFwiQGtleTogXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLmtleSkpO1xuICAgIGlmICh0aGlzLmtleSA9PT0gXCJBbGxcIikge1xuICAgICAgcmV0dXJuICQuY291Y2guZGIoVGFuZ2VyaW5lLmRiX25hbWUpLnZpZXcoVGFuZ2VyaW5lLmRlc2lnbl9kb2MgKyBcIi9kYXNoYm9hcmRSZXN1bHRzXCIsIHtcbiAgICAgICAgcmVkdWNlOiBmYWxzZSxcbiAgICAgICAgc3VjY2VzczogdGhpcy5yZW5kZXJSZXN1bHRzXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQuY291Y2guZGIoVGFuZ2VyaW5lLmRiX25hbWUpLnZpZXcoVGFuZ2VyaW5lLmRlc2lnbl9kb2MgKyBcIi9kYXNoYm9hcmRSZXN1bHRzXCIsIHtcbiAgICAgICAga2V5OiB0aGlzLmtleSxcbiAgICAgICAgcmVkdWNlOiBmYWxzZSxcbiAgICAgICAgc3VjY2VzczogdGhpcy5yZW5kZXJSZXN1bHRzXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgRGFzaGJvYXJkVmlldy5wcm90b3R5cGUucmVuZGVyUmVzdWx0cyA9IGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgIHZhciBkYXRlcywgcHJvcGVydGllc1RvR3JvdXBCeSwgdGFibGVSb3dzO1xuICAgIHRhYmxlUm93cyA9IHt9O1xuICAgIGRhdGVzID0ge307XG4gICAgcHJvcGVydGllc1RvR3JvdXBCeSA9IHt9O1xuICAgIGlmICh0aGlzLmdyb3VwQnkgPT0gbnVsbCkge1xuICAgICAgdGhpcy5ncm91cEJ5ID0gXy5rZXlzKHJlc3VsdC5yb3dzWzBdLnZhbHVlKVswXTtcbiAgICB9XG4gICAgXy5lYWNoKHJlc3VsdC5yb3dzLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihyb3cpIHtcbiAgICAgICAgdmFyIGRpc3BsYXlEYXRlLCBsZWZ0Q29sdW1uLCBzb3J0aW5nRGF0ZTtcbiAgICAgICAgbGVmdENvbHVtbiA9IHJvdy52YWx1ZVtfdGhpcy5ncm91cEJ5XTtcbiAgICAgICAgc29ydGluZ0RhdGUgPSByb3cudmFsdWUuc3RhcnRUaW1lID8gbW9tZW50KHJvdy52YWx1ZS5zdGFydFRpbWUpLmFkZChcImhcIiwgX3RoaXMuc2hpZnRIb3VycykuZm9ybWF0KFwiWVlZWU1NRERcIikgOiBcIlVua25vd25cIjtcbiAgICAgICAgZGlzcGxheURhdGUgPSByb3cudmFsdWUuc3RhcnRUaW1lID8gbW9tZW50KHJvdy52YWx1ZS5zdGFydFRpbWUpLmFkZChcImhcIiwgX3RoaXMuc2hpZnRIb3VycykuZm9ybWF0KFwiRG8gTU1NXCIpIDogXCJVbmtub3duXCI7XG4gICAgICAgIGRhdGVzW3NvcnRpbmdEYXRlXSA9IGRpc3BsYXlEYXRlO1xuICAgICAgICBpZiAodGFibGVSb3dzW2xlZnRDb2x1bW5dID09IG51bGwpIHtcbiAgICAgICAgICB0YWJsZVJvd3NbbGVmdENvbHVtbl0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFibGVSb3dzW2xlZnRDb2x1bW5dW3NvcnRpbmdEYXRlXSA9PSBudWxsKSB7XG4gICAgICAgICAgdGFibGVSb3dzW2xlZnRDb2x1bW5dW3NvcnRpbmdEYXRlXSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZVJvd3NbbGVmdENvbHVtbl1bc29ydGluZ0RhdGVdLnB1c2goXCI8ZGl2IHN0eWxlPSdwYWRkaW5nLXRvcDoxMHB4Oyc+IDx0YWJsZT4gXCIgKyAoXy5tYXAocm93LnZhbHVlLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgcHJvcGVydGllc1RvR3JvdXBCeVtrZXldID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoa2V5ID09PSBcInN0YXJ0VGltZVwiKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IG1vbWVudCh2YWx1ZSkuYWRkKFwiaFwiLCBfdGhpcy5zaGlmdEhvdXJzKS5mb3JtYXQoXCJZWVlZLU1NLUREIEhIOm1tXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoa2V5ID09PSBcInJlc3VsdElkXCIpIHtcbiAgICAgICAgICAgIHZhbHVlID0gXCI8YnV0dG9uIGNsYXNzPSdyZXN1bHQnPlwiICsgdmFsdWUgKyBcIjwvYnV0dG9uPlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gXCI8dHI+PHRkPlwiICsga2V5ICsgXCI8L3RkPjx0ZD5cIiArIHZhbHVlICsgXCI8L3RkPjwvdHI+XCI7XG4gICAgICAgIH0pLmpvaW4oXCJcIikpICsgXCIgPC90YWJsZT4gPC9kaXY+IDxoci8+XCIpO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgdGhpcy4kZWwuaHRtbChcIjxoMT5cIiArIFRhbmdlcmluZS5kYl9uYW1lICsgXCI8L2gxPiBBc3Nlc3NtZW50OiA8c2VsZWN0IGlkPSdhc3Nlc3NtZW50Jz4gPC9zZWxlY3Q+IDxici8+IFZhbHVlIHVzZWQgZm9yIGdyb3VwaW5nOiA8c2VsZWN0IGlkPSdncm91cEJ5Jz4gXCIgKyAoXy5tYXAocHJvcGVydGllc1RvR3JvdXBCeSwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICByZXR1cm4gXCI8b3B0aW9uIFwiICsgKGtleSA9PT0gX3RoaXMuZ3JvdXBCeSA/IFwic2VsZWN0ZWQ9J3RydWUnXCIgOiAnJykgKyBcIj4gXCIgKyBrZXkgKyBcIiA8L29wdGlvbj5cIjtcbiAgICAgIH07XG4gICAgfSkodGhpcykpKSArIFwiIDwvc2VsZWN0PiA8YnIvPiA8YnIvPiA8YnV0dG9uIG9uQ2xpY2s9JyQoXFxcIiNhZHZhbmNlZE9wdGlvbnNcXFwiKS50b2dnbGUoKSc+QWR2YW5jZWQgT3B0aW9uczwvYnV0dG9uPiA8ZGl2IHN0eWxlPSdkaXNwbGF5Om5vbmUnIGlkPSdhZHZhbmNlZE9wdGlvbnMnPiBDdXJyZW50IHRpbWUgaW4geW91ciB0aW1lem9uZSAoXCIgKyAoanN0ei5kZXRlcm1pbmUoKS5uYW1lKCkpICsgXCIpIGlzIFwiICsgKG1vbWVudCgpLmZvcm1hdChcIllZWVktTU0tREQgSEg6bW1cIikpICsgXCI8YnIvPiBTaGlmdCB0aW1lIHZhbHVlcyBieSA8aW5wdXQgaWQ9J3NoaWZ0SG91cnMnIHR5cGU9J251bWJlcicgdmFsdWU9J1wiICsgdGhpcy5zaGlmdEhvdXJzICsgXCInPjwvaW5wdXQ+IGhvdXJzIHRvIGhhbmRsZSBjb3JyZWN0IHRpbWV6b25lLjxici8+IFNoaWZ0ZWQgdGltZTogXCIgKyAobW9tZW50KCkuYWRkKFwiaFwiLCB0aGlzLnNoaWZ0SG91cnMpLmZvcm1hdChcIllZWVktTU0tREQgSEg6bW1cIikpICsgXCIgPGJyLz4gPC9kaXY+IDx0YWJsZSBpZD0ncmVzdWx0cycgY2xhc3M9J3RhYmxlc29ydGVyJz4gPHRoZWFkPiA8dGg+XCIgKyB0aGlzLmdyb3VwQnkgKyBcIjwvdGg+IFwiICsgKF8oZGF0ZXMpLmtleXMoKS5zb3J0KCkubWFwKGZ1bmN0aW9uKHNvcnRpbmdEYXRlKSB7XG4gICAgICByZXR1cm4gXCI8dGggY2xhc3M9J1wiICsgc29ydGluZ0RhdGUgKyBcIic+XCIgKyBkYXRlc1tzb3J0aW5nRGF0ZV0gKyBcIjwvdGg+XCI7XG4gICAgfSkuam9pbihcIlwiKSkgKyBcIiA8L3RoZWFkPiA8dGJvZHk+IFwiICsgKF8ubWFwKHRhYmxlUm93cywgZnVuY3Rpb24oZGF0YUZvckRhdGVzLCBsZWZ0Q29sdW1uKSB7XG4gICAgICByZXR1cm4gXCI8dHI+IDx0ZD5cIiArIGxlZnRDb2x1bW4gKyBcIjwvdGQ+IFwiICsgKF8oZGF0ZXMpLmtleXMoKS5zb3J0KCkubWFwKGZ1bmN0aW9uKHNvcnRpbmdEYXRlKSB7XG4gICAgICAgIHJldHVybiBcIjx0ZCBjbGFzcz0nXCIgKyBzb3J0aW5nRGF0ZSArIFwiJz4gXCIgKyAoZGF0YUZvckRhdGVzW3NvcnRpbmdEYXRlXSA/IFwiPGJ1dHRvbiBjbGFzcz0nc29ydC12YWx1ZScgb25DbGljaz0nJCh0aGlzKS5zaWJsaW5ncygpLnRvZ2dsZSgpJz5cIiArIGRhdGFGb3JEYXRlc1tzb3J0aW5nRGF0ZV0ubGVuZ3RoICsgXCI8L2J1dHRvbj4gPGRpdiBzdHlsZT0nZGlzcGxheTpub25lJz4gXCIgKyAoZGF0YUZvckRhdGVzW3NvcnRpbmdEYXRlXS5qb2luKFwiXCIpKSArIFwiIDwvZGl2PlwiIDogXCJcIikgKyBcIiA8L3RkPlwiO1xuICAgICAgfSkuam9pbihcIlwiKSkgKyBcIiA8L3RyPlwiO1xuICAgIH0pLmpvaW4oXCJcIikpICsgXCIgPC90Ym9keT4gPC90YWJsZT4gPGRpdiBpZD0ncmVzdWx0RGV0YWlscyc+IDwvZGl2PiA8c3R5bGU+ICNyZXN1bHREZXRhaWxzeyBwb3NpdGlvbjphYnNvbHV0ZTsgYmFja2dyb3VuZC1jb2xvcjpibGFjazsgZGlzcGxheTpub25lOyB9IHByZSB7IGZvbnQtc2l6ZTogNzUlOyBvdXRsaW5lOiAxcHggc29saWQgI2NjYzsgcGFkZGluZzogNXB4OyBtYXJnaW46IDVweDsgdGV4dC1zaGFkb3c6IG5vbmU7IG92ZXJmbG93LXdyYXA6YnJlYWstd29yZDsgfSAuc3RyaW5nIHsgY29sb3I6IGdyZWVuOyB9IC5udW1iZXIgeyBjb2xvcjogZGFya29yYW5nZTsgfSAuYm9vbGVhbiB7IGNvbG9yOiBibHVlOyB9IC5udWxsIHsgY29sb3I6IG1hZ2VudGE7IH0gLmtleSB7IGNvbG9yOiByZWQ7IH0gPC9zdHlsZT5cIik7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIHJldHVybiBEYXNoYm9hcmRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgQWRtaW5WaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZSA6IFwiQWRtaW5WaWV3XCJcblxuICBldmVudHM6XG4gICAgI1wiY2hhbmdlICNncm91cEJ5XCI6IFwidXBkYXRlXCJcbiAgICBcImNsaWNrIC51cGRhdGUgXCIgOiBcInVwZGF0ZVwiIFxuXG4gIHVwZGF0ZTogKGV2ZW50KSAtPlxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICBncm91cCA9ICR0YXJnZXQuYXR0cihcImRhdGEtZ3JvdXBcIilcbiAgICBVdGlscy51cGRhdGVUYW5nZXJpbmUgbnVsbCxcbiAgICAgIHRhcmdldERCIDogZ3JvdXBcblxuICBnZXRWZXJzaW9uTnVtYmVyOiAoZ3JvdXApIC0+XG4gICAgJC5hamF4IFwiLyN7Z3JvdXB9L19kZXNpZ24vI3tUYW5nZXJpbmUuZGVzaWduX2RvY30vanMvdmVyc2lvbi5qc1wiLFxuICAgICAgZGF0YVR5cGU6IFwidGV4dFwiXG4gICAgICBzdWNjZXNzOiAocmVzdWx0KSA9PlxuICAgICAgICBjb25zb2xlLmxvZyByZXN1bHRcbiAgICAgICAgQCRlbC5maW5kKFwiIyN7Z3JvdXB9LXZlcnNpb25cIikuaHRtbCByZXN1bHQubWF0Y2goL1wiKC4qKVwiLylbMV1cblxuXG4gIGluaXRpYWxpemU6ICggb3B0aW9ucyApIC0+XG4gICAgQGdyb3VwcyA9IG9wdGlvbnMuZ3JvdXBzXG5cbiAgcmVuZGVyOiA9PlxuXG4gICAgc29ydFRhYmxlID0gXy5hZnRlciBAZ3JvdXBzLmxlbmd0aCwgLT5cbiAgICAgICQoXCJ0YWJsZSNhY3RpdmUtZ3JvdXBzXCIpLnRhYmxlc29ydGVyXG4gICAgICAgIHdpZGdldHM6IFsnemVicmEnXVxuICAgICAgICBzb3J0TGlzdDogW1s1LDFdXVxuXG4gICAgQCRlbC5odG1sIFwiXG4gICAgICA8aDI+R3JvdXAgQWN0aXZpdHk8L2gyPlxuICAgICAgPHRhYmxlIGlkPSdhY3RpdmUtZ3JvdXBzJyBjbGFzcz0nY2xhc3NfdGFibGUnPlxuICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgI3tfKFtcbiAgICAgICAgICAgIFwiTmFtZVwiXG4gICAgICAgICAgICBcIkxhc3QgQ29tcGxldGUgUmVzdWx0XCJcbiAgICAgICAgICAgIFwiVG90YWwgQXNzZXNzbWVudHNcIlxuICAgICAgICAgICAgXCJUb3RhbCBSZXN1bHRzXCJcbiAgICAgICAgICAgIFwiVmVyc2lvblwiXG4gICAgICAgICAgICBcIkxhc3QgUmVzdWx0XCJcbiAgICAgICAgICBdKS5tYXAoIChoZWFkZXIpIC0+IFwiPHRoPiN7aGVhZGVyfTwvdGg+XCIpLmpvaW4oXCJcIil9XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAjeyhcIjx0ciBpZD0nI3tncm91cH0nPlxuICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgI3tncm91cH08YnI+XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgIDx0ZCBjbGFzcz0nbGFzdC1yZXN1bHQnPi4uLjwvdGQ+XG4gICAgICAgICAgICAgIDx0ZCBjbGFzcz0ndG90YWwtYXNzZXNzbWVudHMnPi4uLjwvdGQ+XG4gICAgICAgICAgICAgIDx0ZCBjbGFzcz0ndG90YWwtcmVzdWx0cyc+Li4uPC90ZD5cbiAgICAgICAgICAgICAgPHRkIGNsYXNzPSd2ZXJzaW9uJz48ZGl2Pi4uLjwvZGl2PjxidXR0b24gY2xhc3M9J3VwZGF0ZSBjb21tYW5kJyBkYXRhLWdyb3VwPScje2dyb3VwfSc+VXBkYXRlPC9idXR0b24+PC90ZD5cbiAgICAgICAgICAgICAgPHRkIGNsYXNzPSdsYXN0LXRpbWVzdGFtcCc+Li4uPC90ZD5cbiAgICAgICAgICAgIDwvdHI+XCIgZm9yIGdyb3VwIGluIEBncm91cHMpLmpvaW4oJycpfVxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICBcIlxuXG4gICAgJChcInRhYmxlI2FjdGl2ZS1ncm91cHNcIikudGFibGVzb3J0ZXJcbiAgICAgICAgd2lkZ2V0czogWyd6ZWJyYSddXG4gICAgICAgIHNvcnRMaXN0OiBbWzUsMV1dXG5cbiAgICBfKEBncm91cHMpLmVhY2ggKGdyb3VwKSA9PlxuXG4gICAgICAkZ3JvdXAgPSBAJGVsLmZpbmQoXCIjI3tncm91cH1cIilcbiAgICAgICQuYWpheCBcIi8je2dyb3VwfS9fZGVzaWduLyN7VGFuZ2VyaW5lLmRlc2lnbl9kb2N9L2pzL3ZlcnNpb24uanNcIixcbiAgICAgICAgZGF0YVR5cGU6IFwidGV4dFwiXG4gICAgICAgIHN1Y2Nlc3M6IChyZXN1bHQpIC0+XG4gICAgICAgICAgJGdyb3VwLmZpbmQoXCIudmVyc2lvbiBkaXZcIikuaHRtbCByZXN1bHQubWF0Y2goL1wiKC4qKVwiLylbMV1cblxuXG4gICAgICAgICAgJC5jb3VjaC5kYihncm91cCkudmlldyBUYW5nZXJpbmUuZGVzaWduX2RvYyArIFwiL3Jlc3VsdENvdW50XCIsXG4gICAgICAgICAgICBncm91cDogdHJ1ZVxuICAgICAgICAgICAgc3VjY2VzczogKHJlc3VsdENvdW50cykgPT5cblxuICAgICAgICAgICAgICAkZ3JvdXAuZmluZChcIi50b3RhbC1hc3Nlc3NtZW50c1wiKS5odG1sIHJlc3VsdENvdW50cy5yb3dzLmxlbmd0aFxuXG4gICAgICAgICAgICAgIGdyb3VwVG90YWxSZXN1bHRzID0gMFxuICAgICAgICAgICAgICBncm91cFRvdGFsUmVzdWx0cyArPSBwYXJzZUludChyZXN1bHRDb3VudC52YWx1ZSkgd2hpbGUgKHJlc3VsdENvdW50ID0gcmVzdWx0Q291bnRzLnJvd3MucG9wKCkpXG4gICAgICAgICAgICAgICRncm91cC5maW5kKFwiLnRvdGFsLXJlc3VsdHNcIikuaHRtbCBcIjxidXR0b24gY2xhc3M9J3Jlc3VsdHMgbmF2aWdhdGlvbic+PGEgaHJlZj0nLyN7Z3JvdXB9L19kZXNpZ24vI3tUYW5nZXJpbmUuZGVzaWduX2RvY30vaW5kZXguaHRtbCNkYXNoYm9hcmQnPiN7Z3JvdXBUb3RhbFJlc3VsdHN9PC9hPjwvYnV0dG9uPlwiXG5cbiAgICAgICAgICAgICAgKCQuY291Y2guZGIoZ3JvdXApLnZpZXcgVGFuZ2VyaW5lLmRlc2lnbl9kb2MgKyBcIi9jb21wbGV0ZWRSZXN1bHRzQnlFbmRUaW1lXCIsXG4gICAgICAgICAgICAgICAgbGltaXQ6IDFcbiAgICAgICAgICAgICAgICBkZXNjZW5kaW5nOiB0cnVlXG4gICAgICAgICAgICAgICAgc3VjY2VzczogKHJlc3VsdCkgPT5cbiAgICAgICAgICAgICAgICAgIGlmIHJlc3VsdC5yb3dzWzBdIGFuZCByZXN1bHQucm93c1swXS5rZXlcbiAgICAgICAgICAgICAgICAgICAgJGdyb3VwLmZpbmQoXCIubGFzdC10aW1lc3RhbXBcIikuaHRtbCBtb21lbnQobmV3IERhdGUocmVzdWx0LnJvd3NbMF0ua2V5KSkuZm9ybWF0KFwiWVlZWS1NTU0tREQgSEg6bW1cIilcbiAgICAgICAgICAgICAgICAgICAgJGdyb3VwLmZpbmQoXCIubGFzdC1yZXN1bHRcIikuaHRtbCBtb21lbnQocmVzdWx0LnJvd3NbMF0ua2V5KS5mcm9tTm93KClcblxuICAgICAgICAgICAgICAgIGVycm9yOiAoKSA9PlxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cgXCJDb3VsZCBub3QgcmV0cmlldmUgdmlldyAnY29tcGxldGVkUmVzdWx0c0J5RW5kVGltZScgZm9yICN7Z3JvdXB9XCJcblxuICAgICAgICAgICAgICApLmNvbXBsZXRlID0+IHNvcnRUYWJsZSgpXG5cblxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuIiwidmFyIEFkbWluVmlldyxcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5BZG1pblZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoQWRtaW5WaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBBZG1pblZpZXcoKSB7XG4gICAgdGhpcy5yZW5kZXIgPSBiaW5kKHRoaXMucmVuZGVyLCB0aGlzKTtcbiAgICByZXR1cm4gQWRtaW5WaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgQWRtaW5WaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIkFkbWluVmlld1wiO1xuXG4gIEFkbWluVmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgIFwiY2xpY2sgLnVwZGF0ZSBcIjogXCJ1cGRhdGVcIlxuICB9O1xuXG4gIEFkbWluVmlldy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldCwgZ3JvdXA7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICBncm91cCA9ICR0YXJnZXQuYXR0cihcImRhdGEtZ3JvdXBcIik7XG4gICAgcmV0dXJuIFV0aWxzLnVwZGF0ZVRhbmdlcmluZShudWxsLCB7XG4gICAgICB0YXJnZXREQjogZ3JvdXBcbiAgICB9KTtcbiAgfTtcblxuICBBZG1pblZpZXcucHJvdG90eXBlLmdldFZlcnNpb25OdW1iZXIgPSBmdW5jdGlvbihncm91cCkge1xuICAgIHJldHVybiAkLmFqYXgoXCIvXCIgKyBncm91cCArIFwiL19kZXNpZ24vXCIgKyBUYW5nZXJpbmUuZGVzaWduX2RvYyArIFwiL2pzL3ZlcnNpb24uanNcIiwge1xuICAgICAgZGF0YVR5cGU6IFwidGV4dFwiLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy4kZWwuZmluZChcIiNcIiArIGdyb3VwICsgXCItdmVyc2lvblwiKS5odG1sKHJlc3VsdC5tYXRjaCgvXCIoLiopXCIvKVsxXSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIEFkbWluVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ncm91cHMgPSBvcHRpb25zLmdyb3VwcztcbiAgfTtcblxuICBBZG1pblZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBncm91cCwgc29ydFRhYmxlO1xuICAgIHNvcnRUYWJsZSA9IF8uYWZ0ZXIodGhpcy5ncm91cHMubGVuZ3RoLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAkKFwidGFibGUjYWN0aXZlLWdyb3Vwc1wiKS50YWJsZXNvcnRlcih7XG4gICAgICAgIHdpZGdldHM6IFsnemVicmEnXSxcbiAgICAgICAgc29ydExpc3Q6IFtbNSwgMV1dXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiRlbC5odG1sKFwiPGgyPkdyb3VwIEFjdGl2aXR5PC9oMj4gPHRhYmxlIGlkPSdhY3RpdmUtZ3JvdXBzJyBjbGFzcz0nY2xhc3NfdGFibGUnPiA8dGhlYWQ+IFwiICsgKF8oW1wiTmFtZVwiLCBcIkxhc3QgQ29tcGxldGUgUmVzdWx0XCIsIFwiVG90YWwgQXNzZXNzbWVudHNcIiwgXCJUb3RhbCBSZXN1bHRzXCIsIFwiVmVyc2lvblwiLCBcIkxhc3QgUmVzdWx0XCJdKS5tYXAoZnVuY3Rpb24oaGVhZGVyKSB7XG4gICAgICByZXR1cm4gXCI8dGg+XCIgKyBoZWFkZXIgKyBcIjwvdGg+XCI7XG4gICAgfSkuam9pbihcIlwiKSkgKyBcIiA8L3RoZWFkPiA8dGJvZHk+IFwiICsgKCgoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgbGVuLCByZWYsIHJlc3VsdHM7XG4gICAgICByZWYgPSB0aGlzLmdyb3VwcztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBncm91cCA9IHJlZltpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKFwiPHRyIGlkPSdcIiArIGdyb3VwICsgXCInPiA8dGQ+IFwiICsgZ3JvdXAgKyBcIjxicj4gPC90ZD4gPHRkIGNsYXNzPSdsYXN0LXJlc3VsdCc+Li4uPC90ZD4gPHRkIGNsYXNzPSd0b3RhbC1hc3Nlc3NtZW50cyc+Li4uPC90ZD4gPHRkIGNsYXNzPSd0b3RhbC1yZXN1bHRzJz4uLi48L3RkPiA8dGQgY2xhc3M9J3ZlcnNpb24nPjxkaXY+Li4uPC9kaXY+PGJ1dHRvbiBjbGFzcz0ndXBkYXRlIGNvbW1hbmQnIGRhdGEtZ3JvdXA9J1wiICsgZ3JvdXAgKyBcIic+VXBkYXRlPC9idXR0b24+PC90ZD4gPHRkIGNsYXNzPSdsYXN0LXRpbWVzdGFtcCc+Li4uPC90ZD4gPC90cj5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9KS5jYWxsKHRoaXMpKS5qb2luKCcnKSkgKyBcIiA8L3Rib2R5PiA8L3RhYmxlPlwiKTtcbiAgICAkKFwidGFibGUjYWN0aXZlLWdyb3Vwc1wiKS50YWJsZXNvcnRlcih7XG4gICAgICB3aWRnZXRzOiBbJ3plYnJhJ10sXG4gICAgICBzb3J0TGlzdDogW1s1LCAxXV1cbiAgICB9KTtcbiAgICBfKHRoaXMuZ3JvdXBzKS5lYWNoKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICAgIHZhciAkZ3JvdXA7XG4gICAgICAgICRncm91cCA9IF90aGlzLiRlbC5maW5kKFwiI1wiICsgZ3JvdXApO1xuICAgICAgICByZXR1cm4gJC5hamF4KFwiL1wiICsgZ3JvdXAgKyBcIi9fZGVzaWduL1wiICsgVGFuZ2VyaW5lLmRlc2lnbl9kb2MgKyBcIi9qcy92ZXJzaW9uLmpzXCIsIHtcbiAgICAgICAgICBkYXRhVHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAkZ3JvdXAuZmluZChcIi52ZXJzaW9uIGRpdlwiKS5odG1sKHJlc3VsdC5tYXRjaCgvXCIoLiopXCIvKVsxXSk7XG4gICAgICAgICAgICByZXR1cm4gJC5jb3VjaC5kYihncm91cCkudmlldyhUYW5nZXJpbmUuZGVzaWduX2RvYyArIFwiL3Jlc3VsdENvdW50XCIsIHtcbiAgICAgICAgICAgICAgZ3JvdXA6IHRydWUsXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihyZXN1bHRDb3VudHMpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBncm91cFRvdGFsUmVzdWx0cywgcmVzdWx0Q291bnQ7XG4gICAgICAgICAgICAgICAgICAkZ3JvdXAuZmluZChcIi50b3RhbC1hc3Nlc3NtZW50c1wiKS5odG1sKHJlc3VsdENvdW50cy5yb3dzLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICBncm91cFRvdGFsUmVzdWx0cyA9IDA7XG4gICAgICAgICAgICAgICAgICB3aGlsZSAoKHJlc3VsdENvdW50ID0gcmVzdWx0Q291bnRzLnJvd3MucG9wKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdyb3VwVG90YWxSZXN1bHRzICs9IHBhcnNlSW50KHJlc3VsdENvdW50LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICRncm91cC5maW5kKFwiLnRvdGFsLXJlc3VsdHNcIikuaHRtbChcIjxidXR0b24gY2xhc3M9J3Jlc3VsdHMgbmF2aWdhdGlvbic+PGEgaHJlZj0nL1wiICsgZ3JvdXAgKyBcIi9fZGVzaWduL1wiICsgVGFuZ2VyaW5lLmRlc2lnbl9kb2MgKyBcIi9pbmRleC5odG1sI2Rhc2hib2FyZCc+XCIgKyBncm91cFRvdGFsUmVzdWx0cyArIFwiPC9hPjwvYnV0dG9uPlwiKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoJC5jb3VjaC5kYihncm91cCkudmlldyhUYW5nZXJpbmUuZGVzaWduX2RvYyArIFwiL2NvbXBsZXRlZFJlc3VsdHNCeUVuZFRpbWVcIiwge1xuICAgICAgICAgICAgICAgICAgICBsaW1pdDogMSxcbiAgICAgICAgICAgICAgICAgICAgZGVzY2VuZGluZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5yb3dzWzBdICYmIHJlc3VsdC5yb3dzWzBdLmtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGdyb3VwLmZpbmQoXCIubGFzdC10aW1lc3RhbXBcIikuaHRtbChtb21lbnQobmV3IERhdGUocmVzdWx0LnJvd3NbMF0ua2V5KSkuZm9ybWF0KFwiWVlZWS1NTU0tREQgSEg6bW1cIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRncm91cC5maW5kKFwiLmxhc3QtcmVzdWx0XCIpLmh0bWwobW9tZW50KHJlc3VsdC5yb3dzWzBdLmtleSkuZnJvbU5vdygpKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coXCJDb3VsZCBub3QgcmV0cmlldmUgdmlldyAnY29tcGxldGVkUmVzdWx0c0J5RW5kVGltZScgZm9yIFwiICsgZ3JvdXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KSkuY29tcGxldGUoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzb3J0VGFibGUoKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pKHRoaXMpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIHJldHVybiBBZG1pblZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCIjIEBUT0RPIEkgdGhpbmsgdGhpcyBjYW4gYmUgcmVtb3ZlZC4gdXJsIHNob3VsZCBzdGF5IFxuY2xhc3MgUXVlc3Rpb24gZXh0ZW5kcyBCYWNrYm9uZS5Nb2RlbFxuXG4gIHVybDogXCJxdWVzdGlvblwiXG5cbiAgY29uZmlnOlxuICAgIHR5cGVzIDogWyBcIm11bHRpcGxlXCIsIFwic2luZ2xlXCIsIFwib3BlblwiIF1cblxuICBkZWZhdWx0OlxuICAgIG9yZGVyICA6IDBcbiAgICBwcm9tcHQgOiBcIklzIHRoaXMgYW4gZXhhbXBsZSBxdWVzdGlvbj9cIlxuICAgIGhpbnQgICA6IFwiW2hpbnQgb3IgYW5zd2VyXVwiXG5cbiAgICAjIG1haW4gcXVlc3Rpb24gdHlwZXNcbiAgICB0eXBlIDogXCJzaW5nbGVcIlxuXG4gICAgIyBxdWVzdGlvbiBmZWF0dXJlc1xuICAgIG90aGVyV3JpdGVJbiA6IGZhbHNlXG4gICAgb3B0aW9ucyAgICAgIDogW10gIyB0cmlja3kgYml0LCBjb250YWlucyBgbGFiZWxgLGB2YWx1ZWAgcHJvcGVydHlcblxuICAgICMgb3V0c2lkZSByZXF1aXJlbWVudHNcbiAgICBsaW5rZWRHcmlkU2NvcmUgOiAwXG5cbiAgICAjIFdpdGhpbiBzdWJ0ZXN0IHJlcXVpcmVtZW50c1xuICAgIHNraXBMaW5rICAgICAgICA6IG51bGxcbiAgICBza2lwUmVxdWlyZW1lbnQgOiBudWxsXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICktPlxuICAgIFxuICAgIFxuIiwidmFyIFF1ZXN0aW9uLFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuUXVlc3Rpb24gPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoUXVlc3Rpb24sIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFF1ZXN0aW9uKCkge1xuICAgIHJldHVybiBRdWVzdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFF1ZXN0aW9uLnByb3RvdHlwZS51cmwgPSBcInF1ZXN0aW9uXCI7XG5cbiAgUXVlc3Rpb24ucHJvdG90eXBlLmNvbmZpZyA9IHtcbiAgICB0eXBlczogW1wibXVsdGlwbGVcIiwgXCJzaW5nbGVcIiwgXCJvcGVuXCJdXG4gIH07XG5cbiAgUXVlc3Rpb24ucHJvdG90eXBlW1wiZGVmYXVsdFwiXSA9IHtcbiAgICBvcmRlcjogMCxcbiAgICBwcm9tcHQ6IFwiSXMgdGhpcyBhbiBleGFtcGxlIHF1ZXN0aW9uP1wiLFxuICAgIGhpbnQ6IFwiW2hpbnQgb3IgYW5zd2VyXVwiLFxuICAgIHR5cGU6IFwic2luZ2xlXCIsXG4gICAgb3RoZXJXcml0ZUluOiBmYWxzZSxcbiAgICBvcHRpb25zOiBbXSxcbiAgICBsaW5rZWRHcmlkU2NvcmU6IDAsXG4gICAgc2tpcExpbms6IG51bGwsXG4gICAgc2tpcFJlcXVpcmVtZW50OiBudWxsXG4gIH07XG5cbiAgUXVlc3Rpb24ucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7fTtcblxuICByZXR1cm4gUXVlc3Rpb247XG5cbn0pKEJhY2tib25lLk1vZGVsKTtcblxuIiwiY2xhc3MgUXVlc3Rpb25zIGV4dGVuZHMgQmFja2JvbmUuQ29sbGVjdGlvblxuXG4gIG1vZGVsIDogUXVlc3Rpb25cbiAgdXJsICAgOiBcInF1ZXN0aW9uXCJcbiAgZGI6XG4gICAgdmlldzogXCJxdWVzdGlvbnNCeVBhcmVudElkXCJcblxuICBjb21wYXJhdG9yOiAoc3VidGVzdCkgLT5cbiAgICBzdWJ0ZXN0LmdldCBcIm9yZGVyXCJcblxuICAjIGNhbGwgdGhpcyBhZnRlciB5b3UgbG9hZCB0aGUgY29sbGVjdGlvbiB5b3UncmUgZ29pbmcgdG8gYmUgd29ya2luZyB3aXRoXG4gIGVuc3VyZU9yZGVyOiAtPlxuICAgIHRlc3QgPSAobW9kZWwuZ2V0KFwib3JkZXJcIikgZm9yIG1vZGVsIGluIEBtb2RlbHMpLmpvaW4oXCJcIilcbiAgICBvcmRlcmVkID0gKGkgZm9yIG1vZGVsLGkgaW4gQG1vZGVscykuam9pbihcIlwiKVxuICAgIGlmIHRlc3QgIT0gb3JkZXJlZFxuICAgICAgZm9yIHN1YnRlc3QsIGkgaW4gQG1vZGVsc1xuICAgICAgICBzdWJ0ZXN0LnNldCBcIm9yZGVyXCIsIGlcbiAgICAgICAgc3VidGVzdC5zYXZlKClcbiIsInZhciBRdWVzdGlvbnMsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5RdWVzdGlvbnMgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoUXVlc3Rpb25zLCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBRdWVzdGlvbnMoKSB7XG4gICAgcmV0dXJuIFF1ZXN0aW9ucy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFF1ZXN0aW9ucy5wcm90b3R5cGUubW9kZWwgPSBRdWVzdGlvbjtcblxuICBRdWVzdGlvbnMucHJvdG90eXBlLnVybCA9IFwicXVlc3Rpb25cIjtcblxuICBRdWVzdGlvbnMucHJvdG90eXBlLmRiID0ge1xuICAgIHZpZXc6IFwicXVlc3Rpb25zQnlQYXJlbnRJZFwiXG4gIH07XG5cbiAgUXVlc3Rpb25zLnByb3RvdHlwZS5jb21wYXJhdG9yID0gZnVuY3Rpb24oc3VidGVzdCkge1xuICAgIHJldHVybiBzdWJ0ZXN0LmdldChcIm9yZGVyXCIpO1xuICB9O1xuXG4gIFF1ZXN0aW9ucy5wcm90b3R5cGUuZW5zdXJlT3JkZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgaiwgbGVuLCBtb2RlbCwgb3JkZXJlZCwgcmVmLCByZXN1bHRzLCBzdWJ0ZXN0LCB0ZXN0O1xuICAgIHRlc3QgPSAoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGosIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgcmVmID0gdGhpcy5tb2RlbHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgbW9kZWwgPSByZWZbal07XG4gICAgICAgIHJlc3VsdHMucHVzaChtb2RlbC5nZXQoXCJvcmRlclwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9KS5jYWxsKHRoaXMpKS5qb2luKFwiXCIpO1xuICAgIG9yZGVyZWQgPSAoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGosIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgcmVmID0gdGhpcy5tb2RlbHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICBtb2RlbCA9IHJlZltpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkuY2FsbCh0aGlzKSkuam9pbihcIlwiKTtcbiAgICBpZiAodGVzdCAhPT0gb3JkZXJlZCkge1xuICAgICAgcmVmID0gdGhpcy5tb2RlbHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICBzdWJ0ZXN0ID0gcmVmW2ldO1xuICAgICAgICBzdWJ0ZXN0LnNldChcIm9yZGVyXCIsIGkpO1xuICAgICAgICByZXN1bHRzLnB1c2goc3VidGVzdC5zYXZlKCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBRdWVzdGlvbnM7XG5cbn0pKEJhY2tib25lLkNvbGxlY3Rpb24pO1xuXG4iLCJjbGFzcyBRdWVzdGlvblJ1blZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uXCJcblxuICBldmVudHM6XG4gICAgJ2NoYW5nZSBpbnB1dCcgICAgICAgICAgIDogJ3VwZGF0ZSdcbiAgICAnY2hhbmdlIHRleHRhcmVhJyAgICAgICAgOiAndXBkYXRlJ1xuICAgICdjbGljayAuYXV0b3Njcm9sbF9pY29uJyA6ICdzY3JvbGwnXG5cbiAgc2Nyb2xsOiAoZXZlbnQpIC0+XG4gICAgQHRyaWdnZXIgXCJzY3JvbGxcIiwgZXZlbnQsIEBtb2RlbC5nZXQoXCJvcmRlclwiKVxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBvbiBcInNob3dcIiwgPT4gQG9uU2hvdygpXG4gICAgQG1vZGVsICAgICA9IG9wdGlvbnMubW9kZWxcbiAgICBAcGFyZW50ICAgID0gb3B0aW9ucy5wYXJlbnRcbiAgICBAZGF0YUVudHJ5ID0gb3B0aW9ucy5kYXRhRW50cnlcbiAgICBAZm9udEZhbWlseSA9IEBwYXJlbnQubW9kZWwuZ2V0KCdmb250RmFtaWx5JylcbiAgICBAZm9udFN0eWxlID0gXCJzdHlsZT1cXFwiZm9udC1mYW1pbHk6ICN7QHBhcmVudC5tb2RlbC5nZXQoJ2ZvbnRGYW1pbHknKX0gIWltcG9ydGFudDtcXFwiXCIgaWYgQHBhcmVudC5tb2RlbC5nZXQoXCJmb250RmFtaWx5XCIpICE9IFwiXCIgXG5cbiAgICB1bmxlc3MgQGRhdGFFbnRyeVxuICAgICAgQGFuc3dlciA9IG9wdGlvbnMuYW5zd2VyXG4gICAgZWxzZVxuICAgICAgQGFuc3dlciA9IHt9XG5cbiAgICBAbmFtZSAgICAgPSBAbW9kZWwuZXNjYXBlKFwibmFtZVwiKS5yZXBsYWNlIC9bXkEtWmEtejAtOV9dL2csIFwiLVwiXG4gICAgQHR5cGUgICAgID0gQG1vZGVsLmdldCBcInR5cGVcIlxuICAgIEBvcHRpb25zICA9IEBtb2RlbC5nZXQgXCJvcHRpb25zXCJcbiAgICBAbm90QXNrZWQgPSBvcHRpb25zLm5vdEFza2VkXG4gICAgQGlzT2JzZXJ2YXRpb24gPSBvcHRpb25zLmlzT2JzZXJ2YXRpb25cblxuICAgIEBkZWZpbmVTcGVjaWFsQ2FzZVJlc3VsdHMoKVxuXG4gICAgaWYgQG1vZGVsLmdldEJvb2xlYW4oXCJza2lwcGFibGVcIilcbiAgICAgIEBpc1ZhbGlkID0gdHJ1ZVxuICAgICAgQHNraXBwZWQgPSB0cnVlXG4gICAgZWxzZVxuICAgICAgQGlzVmFsaWQgPSBmYWxzZVxuICAgICAgQHNraXBwZWQgPSBmYWxzZVxuICAgIFxuICAgIGlmIEBub3RBc2tlZCA9PSB0cnVlXG4gICAgICBAaXNWYWxpZCA9IHRydWVcbiAgICAgIEB1cGRhdGVSZXN1bHQoKVxuXG4gICAgaWYgQHR5cGUgPT0gXCJzaW5nbGVcIiBvciBAdHlwZSA9PSBcIm11bHRpcGxlXCJcbiAgICAgIEBidXR0b24gPSBuZXcgQnV0dG9uVmlld1xuICAgICAgICBvcHRpb25zIDogQG9wdGlvbnNcbiAgICAgICAgbW9kZSAgICA6IEB0eXBlXG4gICAgICAgIGRhdGFFbnRyeSAgOiBAZGF0YUVudHJ5XG4gICAgICAgIGFuc3dlciAgICAgOiBAYW5zd2VyXG4gICAgICAgIGZvbnRGYW1pbHkgOiBAZm9udEZhbWlseVxuXG4gICAgICBAYnV0dG9uLm9uIFwiY2hhbmdlIHJlbmRlcmVkXCIsID0+IEB1cGRhdGUoKVxuXG4gIHByZXZpb3VzQW5zd2VyOiA9PlxuICAgIEBwYXJlbnQucXVlc3Rpb25WaWV3c1tAcGFyZW50LnF1ZXN0aW9uSW5kZXggLSAxXS5hbnN3ZXIgaWYgQHBhcmVudC5xdWVzdGlvbkluZGV4ID49IDBcblxuICBvblNob3c6ID0+XG5cbiAgICBzaG93Q29kZSA9IEBtb2RlbC5nZXRTdHJpbmcoXCJkaXNwbGF5Q29kZVwiKVxuXG4gICAgcmV0dXJuIGlmIF8uaXNFbXB0eVN0cmluZyhzaG93Q29kZSlcblxuICAgIHRyeVxuICAgICAgQ29mZmVlU2NyaXB0LmV2YWwuYXBwbHkoQCwgW3Nob3dDb2RlXSlcbiAgICBjYXRjaCBlcnJvclxuICAgICAgbmFtZSA9ICgoL2Z1bmN0aW9uICguezEsfSlcXCgvKS5leGVjKGVycm9yLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkpWzFdKVxuICAgICAgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2VcbiAgICAgIGFsZXJ0IFwiRGlzcGxheSBjb2RlIGVycm9yXFxuXFxuI3tuYW1lfVxcblxcbiN7bWVzc2FnZX1cIlxuXG4gIHVwZGF0ZTogKGV2ZW50KSA9PlxuICAgIEB1cGRhdGVSZXN1bHQoKVxuICAgIEB1cGRhdGVWYWxpZGl0eSgpXG4gICAgQHRyaWdnZXIgXCJhbnN3ZXJcIiwgZXZlbnQsIEBtb2RlbC5nZXQoXCJvcmRlclwiKVxuXG4gIHVwZGF0ZVJlc3VsdDogPT5cbiAgICBpZiBAbm90QXNrZWQgPT0gdHJ1ZVxuICAgICAgaWYgQHR5cGUgPT0gXCJtdWx0aXBsZVwiXG4gICAgICAgIGZvciBvcHRpb24sIGkgaW4gQG9wdGlvbnNcbiAgICAgICAgICBAYW5zd2VyW0BvcHRpb25zW2ldLnZhbHVlXSA9IFwibm90X2Fza2VkXCJcbiAgICAgIGVsc2VcbiAgICAgICAgQGFuc3dlciA9IFwibm90X2Fza2VkXCJcbiAgICBlbHNlXG4gICAgICBpZiBAdHlwZSA9PSBcIm9wZW5cIlxuICAgICAgICBAYW5zd2VyID0gQCRlbC5maW5kKFwiIyN7QGNpZH1fI3tAbmFtZX1cIikudmFsKClcbiAgICAgIGVsc2VcbiAgICAgICAgQGFuc3dlciA9IEBidXR0b24uYW5zd2VyXG5cbiAgdXBkYXRlVmFsaWRpdHk6IC0+XG5cbiAgICBpc1NraXBwYWJsZSAgICA9IEBtb2RlbC5nZXRCb29sZWFuKFwic2tpcHBhYmxlXCIpXG4gICAgaXNBdXRvc3RvcHBlZCAgPSBAJGVsLmhhc0NsYXNzKFwiZGlzYWJsZWRfYXV0b3N0b3BcIilcbiAgICBpc0xvZ2ljU2tpcHBlZCA9IEAkZWwuaGFzQ2xhc3MoXCJkaXNhYmxlZF9za2lwcGVkXCIpXG5cbiAgICAjIGhhdmUgd2Ugb3IgY2FuIHdlIGJlIHNraXBwZWQ/XG4gICAgaWYgaXNTa2lwcGFibGUgb3IgKCBpc0xvZ2ljU2tpcHBlZCBvciBpc0F1dG9zdG9wcGVkIClcbiAgICAgICMgWUVTLCBvaywgSSBndWVzcyB3ZSdyZSB2YWxpZFxuICAgICAgQGlzVmFsaWQgPSB0cnVlXG4gICAgICBAc2tpcHBlZCA9IGlmIF8uaXNFbXB0eVN0cmluZyhAYW5zd2VyKSB0aGVuIHRydWUgZWxzZSBmYWxzZVxuICAgIGVsc2VcbiAgICAgICMgTk8sIHNvbWUga2luZCBvZiB2YWxpZGF0aW9uIG11c3Qgb2NjdXIgbm93XG4gICAgICBjdXN0b21WYWxpZGF0aW9uQ29kZSA9IEBtb2RlbC5nZXQoXCJjdXN0b21WYWxpZGF0aW9uQ29kZVwiKVxuXG4gICAgICBAYW5zd2VyID0gXCJcIiB1bmxlc3MgQGFuc3dlclxuXG4gICAgICBpZiBub3QgXy5pc0VtcHR5U3RyaW5nKGN1c3RvbVZhbGlkYXRpb25Db2RlKVxuICAgICAgICB0cnlcbiAgICAgICAgICBAaXNWYWxpZCA9IENvZmZlZVNjcmlwdC5ldmFsLmFwcGx5KEAsIFtjdXN0b21WYWxpZGF0aW9uQ29kZV0pXG4gICAgICAgIGNhdGNoIGVcbiAgICAgICAgICBhbGVydCBcIkN1c3RvbSBWYWxpZGF0aW9uIGVycm9yXFxuXFxuI3tlfVwiXG4gICAgICBlbHNlXG4gICAgICAgIEBpc1ZhbGlkID0gXG4gICAgICAgICAgc3dpdGNoIEB0eXBlXG4gICAgICAgICAgICB3aGVuIFwib3BlblwiXG4gICAgICAgICAgICAgIGlmIF8uaXNFbXB0eVN0cmluZyhAYW5zd2VyKSB8fCAoXy5pc0VtcHR5KEBhbnN3ZXIpICYmIF8uaXNPYmplY3QoQGFuc3dlcikpIHRoZW4gZmFsc2UgZWxzZSB0cnVlICMgZG9uJ3QgdXNlIGlzRW1wdHkgaGVyZVxuICAgICAgICAgICAgd2hlbiBcIm11bHRpcGxlXCJcbiAgICAgICAgICAgICAgaWYgfl8udmFsdWVzKEBhbnN3ZXIpLmluZGV4T2YoXCJjaGVja2VkXCIpIHRoZW4gdHJ1ZSAgZWxzZSBmYWxzZVxuICAgICAgICAgICAgd2hlbiBcInNpbmdsZVwiXG4gICAgICAgICAgICAgIGlmIF8uaXNFbXB0eVN0cmluZyhAYW5zd2VyKSB8fCAoXy5pc0VtcHR5KEBhbnN3ZXIpICYmIF8uaXNPYmplY3QoQGFuc3dlcikpIHRoZW4gZmFsc2UgZWxzZSB0cnVlXG5cblxuICBzZXRPcHRpb25zOiAob3B0aW9ucykgPT5cbiAgICBAYnV0dG9uLm9wdGlvbnMgPSBvcHRpb25zXG4gICAgQGJ1dHRvbi5yZW5kZXIoKVxuXG4gIHNldEFuc3dlcjogKGFuc3dlcikgPT5cbiAgICBhbGVydCBcInNldEFuc3dlciBFcnJvclxcblRyaWVkIHRvIHNldCAje0B0eXBlfSB0eXBlICN7QG5hbWV9IHF1ZXN0aW9uIHRvIHN0cmluZyBhbnN3ZXIuXCIgaWYgXy5pc1N0cmluZyhhbnN3ZXIpICYmIEB0eXBlID09IFwibXVsdGlwbGVcIlxuICAgIGFsZXJ0IFwic2V0QW5zd2VyIEVycm9yXFxuI3tAbmFtZX0gcXVlc3Rpb24gcmVxdWlyZXMgYW4gb2JqZWN0XCIgaWYgbm90IF8uaXNPYmplY3QoYW5zd2VyKSAmJiBAdHlwZSA9PSBcIm11bHRpcGxlXCJcblxuICAgIGlmIEB0eXBlID09IFwibXVsdGlwbGVcIlxuICAgICAgQGJ1dHRvbi5hbnN3ZXIgPSAkLmV4dGVuZChAYnV0dG9uLmFuc3dlciwgYW5zd2VyKVxuICAgIGVsc2UgaWYgQHR5cGUgPT0gXCJzaW5nbGVcIlxuICAgICAgQGJ1dHRvbi5hbnN3ZXIgPSBhbnN3ZXJcbiAgICBlbHNlXG4gICAgICBAYW5zd2VyID0gYW5zd2VyXG5cbiAgICBAdXBkYXRlVmFsaWRpdHkoKVxuICAgIEBidXR0b24ucmVuZGVyKClcblxuICBzZXRNZXNzYWdlOiAobWVzc2FnZSkgPT5cbiAgICBAJGVsLmZpbmQoXCIuZXJyb3JfbWVzc2FnZVwiKS5odG1sIG1lc3NhZ2VcblxuICBzZXRQcm9tcHQ6IChwcm9tcHQpID0+XG4gICAgQCRlbC5maW5kKFwiLnByb21wdFwiKS5odG1sIHByb21wdFxuXG4gIHNldEhpbnQ6IChoaW50KSA9PlxuICAgIEAkZWwuZmluZChcIi5oaW50XCIpLmh0bWwgaGludFxuXG4gIHNldE5hbWU6ICggbmV3TmFtZSA9IEBtb2RlbC5nZXQoJ25hbWUnKSApID0+XG4gICAgQG1vZGVsLnNldChcIm5hbWVcIiwgbmV3TmFtZSlcbiAgICBAbmFtZSA9IEBtb2RlbC5lc2NhcGUoXCJuYW1lXCIpLnJlcGxhY2UgL1teQS1aYS16MC05X10vZywgXCItXCJcblxuICBnZXROYW1lOiA9PlxuICAgIEBtb2RlbC5nZXQoXCJuYW1lXCIpXG5cbiAgcmVuZGVyOiAtPlxuICAgIEAkZWwuYXR0ciBcImlkXCIsIFwicXVlc3Rpb24tI3tAbmFtZX1cIlxuXG4gICAgaWYgbm90IEBub3RBc2tlZFxuXG4gICAgICBodG1sID0gXCI8ZGl2IGNsYXNzPSdlcnJvcl9tZXNzYWdlJz48L2Rpdj48ZGl2IGNsYXNzPSdwcm9tcHQnICN7QGZvbnRTdHlsZSB8fCBcIlwifT4je0Btb2RlbC5nZXQgJ3Byb21wdCd9PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPSdoaW50JyAje0Bmb250U3R5bGUgfHwgXCJcIn0+I3soQG1vZGVsLmdldCgnaGludCcpIHx8IFwiXCIpfTwvZGl2PlwiXG5cbiAgICAgIGlmIEB0eXBlID09IFwib3BlblwiXG4gICAgICAgIGlmIF8uaXNTdHJpbmcoQGFuc3dlcikgJiYgbm90IF8uaXNFbXB0eShAYW5zd2VyKVxuICAgICAgICAgIGFuc3dlclZhbHVlID0gQGFuc3dlclxuICAgICAgICBpZiBAbW9kZWwuZ2V0KFwibXVsdGlsaW5lXCIpXG4gICAgICAgICAgaHRtbCArPSBcIjxkaXY+PHRleHRhcmVhIGlkPScje0BjaWR9XyN7QG5hbWV9JyBkYXRhLWNpZD0nI3tAY2lkfScgdmFsdWU9JyN7YW5zd2VyVmFsdWUgfHwgJyd9Jz48L3RleHRhcmVhPjwvZGl2PlwiXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBodG1sICs9IFwiPGRpdj48aW5wdXQgaWQ9JyN7QGNpZH1fI3tAbmFtZX0nIGRhdGEtY2lkPScje0BjaWR9JyB2YWx1ZT0nI3thbnN3ZXJWYWx1ZSB8fCAnJ30nPjwvZGl2PlwiXG5cbiAgICAgIGVsc2VcbiAgICAgICAgaHRtbCArPSBcIjxkaXYgY2xhc3M9J2J1dHRvbl9jb250YWluZXInPjwvZGl2PlwiXG5cbiAgICAgIGh0bWwgKz0gXCI8aW1nIHNyYz0naW1hZ2VzL2ljb25fc2Nyb2xsLnBuZycgY2xhc3M9J2ljb24gYXV0b3Njcm9sbF9pY29uJyBkYXRhLWNpZD0nI3tAY2lkfSc+XCIgaWYgQGlzT2JzZXJ2YXRpb25cbiAgICAgIEAkZWwuaHRtbCBodG1sXG5cbiAgICAgIGlmIEB0eXBlID09IFwic2luZ2xlXCIgb3IgQHR5cGUgPT0gXCJtdWx0aXBsZVwiXG4gICAgICAgIEBidXR0b24uc2V0RWxlbWVudChAJGVsLmZpbmQoXCIuYnV0dG9uX2NvbnRhaW5lclwiKSlcbiAgICAgICAgQGJ1dHRvbi5vbiBcInJlbmRlcmVkXCIsID0+IEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuICAgICAgICBAYnV0dG9uLnJlbmRlcigpXG4gICAgICBlbHNlXG4gICAgICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuXG4gICAgZWxzZVxuICAgICAgQCRlbC5oaWRlKClcbiAgICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuICBcbiAgZGVmaW5lU3BlY2lhbENhc2VSZXN1bHRzOiAtPlxuICAgIGxpc3QgPSBbXCJtaXNzaW5nXCIsIFwibm90QXNrZWRcIiwgXCJza2lwcGVkXCIsIFwibG9naWNTa2lwcGVkXCIsIFwibm90QXNrZWRBdXRvc3RvcFwiXVxuICAgIGZvciBlbGVtZW50IGluIGxpc3RcbiAgICAgIGlmIEB0eXBlID09IFwic2luZ2xlXCIgfHwgQHR5cGUgPT0gXCJvcGVuXCJcbiAgICAgICAgQFtlbGVtZW50K1wiUmVzdWx0XCJdID0gZWxlbWVudFxuICAgICAgaWYgQHR5cGUgPT0gXCJtdWx0aXBsZVwiXG4gICAgICAgIEBbZWxlbWVudCtcIlJlc3VsdFwiXSA9IHt9XG4gICAgICAgIEBbZWxlbWVudCtcIlJlc3VsdFwiXVtAb3B0aW9uc1tpXS52YWx1ZV0gPSBlbGVtZW50IGZvciBvcHRpb24sIGkgaW4gQG9wdGlvbnNcbiAgICByZXR1cm5cblxuXG5jbGFzcyBTdXJ2ZXlSZXZpZXdWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZTogXCJRdWVzdGlvblJldmlld1ZpZXdcIlxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEB2aWV3cyA9IG9wdGlvbnMudmlld3NcblxuICByZW5kZXI6IC0+XG5cbiAgICBhbnN3ZXJzID0gKFwiXG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxoMz48L2gzPlxuICAgICAgPC9kaXY+XG5cbiAgICBcIiBmb3IgdmlldyBpbiBAdmlld3MpLmpvaW4oXCJcIilcblxuICAgIEAkZWwuaHRtbCBcIlxuXG4gICAgICA8aDI+UGxlYXNlIHJldmlldyB5b3VyIGFuc3dlcnMgYW5kIHByZXNzIG5leHQgd2hlbiByZWFkeS48L2gyPlxuXG4gICAgICAje2Fuc3dlcnN9XG4gICAgXCJcbiIsInZhciBRdWVzdGlvblJ1blZpZXcsIFN1cnZleVJldmlld1ZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuUXVlc3Rpb25SdW5WaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFF1ZXN0aW9uUnVuVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gUXVlc3Rpb25SdW5WaWV3KCkge1xuICAgIHRoaXMuZ2V0TmFtZSA9IGJpbmQodGhpcy5nZXROYW1lLCB0aGlzKTtcbiAgICB0aGlzLnNldE5hbWUgPSBiaW5kKHRoaXMuc2V0TmFtZSwgdGhpcyk7XG4gICAgdGhpcy5zZXRIaW50ID0gYmluZCh0aGlzLnNldEhpbnQsIHRoaXMpO1xuICAgIHRoaXMuc2V0UHJvbXB0ID0gYmluZCh0aGlzLnNldFByb21wdCwgdGhpcyk7XG4gICAgdGhpcy5zZXRNZXNzYWdlID0gYmluZCh0aGlzLnNldE1lc3NhZ2UsIHRoaXMpO1xuICAgIHRoaXMuc2V0QW5zd2VyID0gYmluZCh0aGlzLnNldEFuc3dlciwgdGhpcyk7XG4gICAgdGhpcy5zZXRPcHRpb25zID0gYmluZCh0aGlzLnNldE9wdGlvbnMsIHRoaXMpO1xuICAgIHRoaXMudXBkYXRlUmVzdWx0ID0gYmluZCh0aGlzLnVwZGF0ZVJlc3VsdCwgdGhpcyk7XG4gICAgdGhpcy51cGRhdGUgPSBiaW5kKHRoaXMudXBkYXRlLCB0aGlzKTtcbiAgICB0aGlzLm9uU2hvdyA9IGJpbmQodGhpcy5vblNob3csIHRoaXMpO1xuICAgIHRoaXMucHJldmlvdXNBbnN3ZXIgPSBiaW5kKHRoaXMucHJldmlvdXNBbnN3ZXIsIHRoaXMpO1xuICAgIHJldHVybiBRdWVzdGlvblJ1blZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBRdWVzdGlvblJ1blZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwicXVlc3Rpb25cIjtcblxuICBRdWVzdGlvblJ1blZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICAnY2hhbmdlIGlucHV0JzogJ3VwZGF0ZScsXG4gICAgJ2NoYW5nZSB0ZXh0YXJlYSc6ICd1cGRhdGUnLFxuICAgICdjbGljayAuYXV0b3Njcm9sbF9pY29uJzogJ3Njcm9sbCdcbiAgfTtcblxuICBRdWVzdGlvblJ1blZpZXcucHJvdG90eXBlLnNjcm9sbCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInNjcm9sbFwiLCBldmVudCwgdGhpcy5tb2RlbC5nZXQoXCJvcmRlclwiKSk7XG4gIH07XG5cbiAgUXVlc3Rpb25SdW5WaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMub24oXCJzaG93XCIsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMub25TaG93KCk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICAgIHRoaXMuZGF0YUVudHJ5ID0gb3B0aW9ucy5kYXRhRW50cnk7XG4gICAgdGhpcy5mb250RmFtaWx5ID0gdGhpcy5wYXJlbnQubW9kZWwuZ2V0KCdmb250RmFtaWx5Jyk7XG4gICAgaWYgKHRoaXMucGFyZW50Lm1vZGVsLmdldChcImZvbnRGYW1pbHlcIikgIT09IFwiXCIpIHtcbiAgICAgIHRoaXMuZm9udFN0eWxlID0gXCJzdHlsZT1cXFwiZm9udC1mYW1pbHk6IFwiICsgKHRoaXMucGFyZW50Lm1vZGVsLmdldCgnZm9udEZhbWlseScpKSArIFwiICFpbXBvcnRhbnQ7XFxcIlwiO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuZGF0YUVudHJ5KSB7XG4gICAgICB0aGlzLmFuc3dlciA9IG9wdGlvbnMuYW5zd2VyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFuc3dlciA9IHt9O1xuICAgIH1cbiAgICB0aGlzLm5hbWUgPSB0aGlzLm1vZGVsLmVzY2FwZShcIm5hbWVcIikucmVwbGFjZSgvW15BLVphLXowLTlfXS9nLCBcIi1cIik7XG4gICAgdGhpcy50eXBlID0gdGhpcy5tb2RlbC5nZXQoXCJ0eXBlXCIpO1xuICAgIHRoaXMub3B0aW9ucyA9IHRoaXMubW9kZWwuZ2V0KFwib3B0aW9uc1wiKTtcbiAgICB0aGlzLm5vdEFza2VkID0gb3B0aW9ucy5ub3RBc2tlZDtcbiAgICB0aGlzLmlzT2JzZXJ2YXRpb24gPSBvcHRpb25zLmlzT2JzZXJ2YXRpb247XG4gICAgdGhpcy5kZWZpbmVTcGVjaWFsQ2FzZVJlc3VsdHMoKTtcbiAgICBpZiAodGhpcy5tb2RlbC5nZXRCb29sZWFuKFwic2tpcHBhYmxlXCIpKSB7XG4gICAgICB0aGlzLmlzVmFsaWQgPSB0cnVlO1xuICAgICAgdGhpcy5za2lwcGVkID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pc1ZhbGlkID0gZmFsc2U7XG4gICAgICB0aGlzLnNraXBwZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMubm90QXNrZWQgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuaXNWYWxpZCA9IHRydWU7XG4gICAgICB0aGlzLnVwZGF0ZVJlc3VsdCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy50eXBlID09PSBcInNpbmdsZVwiIHx8IHRoaXMudHlwZSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICB0aGlzLmJ1dHRvbiA9IG5ldyBCdXR0b25WaWV3KHtcbiAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICBtb2RlOiB0aGlzLnR5cGUsXG4gICAgICAgIGRhdGFFbnRyeTogdGhpcy5kYXRhRW50cnksXG4gICAgICAgIGFuc3dlcjogdGhpcy5hbnN3ZXIsXG4gICAgICAgIGZvbnRGYW1pbHk6IHRoaXMuZm9udEZhbWlseVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcy5idXR0b24ub24oXCJjaGFuZ2UgcmVuZGVyZWRcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlKCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIFF1ZXN0aW9uUnVuVmlldy5wcm90b3R5cGUucHJldmlvdXNBbnN3ZXIgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQucXVlc3Rpb25JbmRleCA+PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJlbnQucXVlc3Rpb25WaWV3c1t0aGlzLnBhcmVudC5xdWVzdGlvbkluZGV4IC0gMV0uYW5zd2VyO1xuICAgIH1cbiAgfTtcblxuICBRdWVzdGlvblJ1blZpZXcucHJvdG90eXBlLm9uU2hvdyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlcnJvciwgbWVzc2FnZSwgbmFtZSwgc2hvd0NvZGU7XG4gICAgc2hvd0NvZGUgPSB0aGlzLm1vZGVsLmdldFN0cmluZyhcImRpc3BsYXlDb2RlXCIpO1xuICAgIGlmIChfLmlzRW1wdHlTdHJpbmcoc2hvd0NvZGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gQ29mZmVlU2NyaXB0W1wiZXZhbFwiXS5hcHBseSh0aGlzLCBbc2hvd0NvZGVdKTtcbiAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgIGVycm9yID0gZXJyb3IxO1xuICAgICAgbmFtZSA9ICgvZnVuY3Rpb24gKC57MSx9KVxcKC8uZXhlYyhlcnJvci5jb25zdHJ1Y3Rvci50b1N0cmluZygpKVsxXSk7XG4gICAgICBtZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAgIHJldHVybiBhbGVydChcIkRpc3BsYXkgY29kZSBlcnJvclxcblxcblwiICsgbmFtZSArIFwiXFxuXFxuXCIgKyBtZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgUXVlc3Rpb25SdW5WaWV3LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHRoaXMudXBkYXRlUmVzdWx0KCk7XG4gICAgdGhpcy51cGRhdGVWYWxpZGl0eSgpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJhbnN3ZXJcIiwgZXZlbnQsIHRoaXMubW9kZWwuZ2V0KFwib3JkZXJcIikpO1xuICB9O1xuXG4gIFF1ZXN0aW9uUnVuVmlldy5wcm90b3R5cGUudXBkYXRlUmVzdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGosIGxlbiwgb3B0aW9uLCByZWYsIHJlc3VsdHM7XG4gICAgaWYgKHRoaXMubm90QXNrZWQgPT09IHRydWUpIHtcbiAgICAgIGlmICh0aGlzLnR5cGUgPT09IFwibXVsdGlwbGVcIikge1xuICAgICAgICByZWYgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgICAgICBvcHRpb24gPSByZWZbaV07XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHRoaXMuYW5zd2VyW3RoaXMub3B0aW9uc1tpXS52YWx1ZV0gPSBcIm5vdF9hc2tlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFuc3dlciA9IFwibm90X2Fza2VkXCI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnR5cGUgPT09IFwib3BlblwiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFuc3dlciA9IHRoaXMuJGVsLmZpbmQoXCIjXCIgKyB0aGlzLmNpZCArIFwiX1wiICsgdGhpcy5uYW1lKS52YWwoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFuc3dlciA9IHRoaXMuYnV0dG9uLmFuc3dlcjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgUXVlc3Rpb25SdW5WaWV3LnByb3RvdHlwZS51cGRhdGVWYWxpZGl0eSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXN0b21WYWxpZGF0aW9uQ29kZSwgZSwgaXNBdXRvc3RvcHBlZCwgaXNMb2dpY1NraXBwZWQsIGlzU2tpcHBhYmxlO1xuICAgIGlzU2tpcHBhYmxlID0gdGhpcy5tb2RlbC5nZXRCb29sZWFuKFwic2tpcHBhYmxlXCIpO1xuICAgIGlzQXV0b3N0b3BwZWQgPSB0aGlzLiRlbC5oYXNDbGFzcyhcImRpc2FibGVkX2F1dG9zdG9wXCIpO1xuICAgIGlzTG9naWNTa2lwcGVkID0gdGhpcy4kZWwuaGFzQ2xhc3MoXCJkaXNhYmxlZF9za2lwcGVkXCIpO1xuICAgIGlmIChpc1NraXBwYWJsZSB8fCAoaXNMb2dpY1NraXBwZWQgfHwgaXNBdXRvc3RvcHBlZCkpIHtcbiAgICAgIHRoaXMuaXNWYWxpZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcy5za2lwcGVkID0gXy5pc0VtcHR5U3RyaW5nKHRoaXMuYW5zd2VyKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VzdG9tVmFsaWRhdGlvbkNvZGUgPSB0aGlzLm1vZGVsLmdldChcImN1c3RvbVZhbGlkYXRpb25Db2RlXCIpO1xuICAgICAgaWYgKCF0aGlzLmFuc3dlcikge1xuICAgICAgICB0aGlzLmFuc3dlciA9IFwiXCI7XG4gICAgICB9XG4gICAgICBpZiAoIV8uaXNFbXB0eVN0cmluZyhjdXN0b21WYWxpZGF0aW9uQ29kZSkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID0gQ29mZmVlU2NyaXB0W1wiZXZhbFwiXS5hcHBseSh0aGlzLCBbY3VzdG9tVmFsaWRhdGlvbkNvZGVdKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IxKSB7XG4gICAgICAgICAgZSA9IGVycm9yMTtcbiAgICAgICAgICByZXR1cm4gYWxlcnQoXCJDdXN0b20gVmFsaWRhdGlvbiBlcnJvclxcblxcblwiICsgZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJvcGVuXCI6XG4gICAgICAgICAgICAgIGlmIChfLmlzRW1wdHlTdHJpbmcodGhpcy5hbnN3ZXIpIHx8IChfLmlzRW1wdHkodGhpcy5hbnN3ZXIpICYmIF8uaXNPYmplY3QodGhpcy5hbnN3ZXIpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtdWx0aXBsZVwiOlxuICAgICAgICAgICAgICBpZiAofl8udmFsdWVzKHRoaXMuYW5zd2VyKS5pbmRleE9mKFwiY2hlY2tlZFwiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzaW5nbGVcIjpcbiAgICAgICAgICAgICAgaWYgKF8uaXNFbXB0eVN0cmluZyh0aGlzLmFuc3dlcikgfHwgKF8uaXNFbXB0eSh0aGlzLmFuc3dlcikgJiYgXy5pc09iamVjdCh0aGlzLmFuc3dlcikpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KS5jYWxsKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBRdWVzdGlvblJ1blZpZXcucHJvdG90eXBlLnNldE9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5idXR0b24ub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRoaXMuYnV0dG9uLnJlbmRlcigpO1xuICB9O1xuXG4gIFF1ZXN0aW9uUnVuVmlldy5wcm90b3R5cGUuc2V0QW5zd2VyID0gZnVuY3Rpb24oYW5zd2VyKSB7XG4gICAgaWYgKF8uaXNTdHJpbmcoYW5zd2VyKSAmJiB0aGlzLnR5cGUgPT09IFwibXVsdGlwbGVcIikge1xuICAgICAgYWxlcnQoXCJzZXRBbnN3ZXIgRXJyb3JcXG5UcmllZCB0byBzZXQgXCIgKyB0aGlzLnR5cGUgKyBcIiB0eXBlIFwiICsgdGhpcy5uYW1lICsgXCIgcXVlc3Rpb24gdG8gc3RyaW5nIGFuc3dlci5cIik7XG4gICAgfVxuICAgIGlmICghXy5pc09iamVjdChhbnN3ZXIpICYmIHRoaXMudHlwZSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICBhbGVydChcInNldEFuc3dlciBFcnJvclxcblwiICsgdGhpcy5uYW1lICsgXCIgcXVlc3Rpb24gcmVxdWlyZXMgYW4gb2JqZWN0XCIpO1xuICAgIH1cbiAgICBpZiAodGhpcy50eXBlID09PSBcIm11bHRpcGxlXCIpIHtcbiAgICAgIHRoaXMuYnV0dG9uLmFuc3dlciA9ICQuZXh0ZW5kKHRoaXMuYnV0dG9uLmFuc3dlciwgYW5zd2VyKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gXCJzaW5nbGVcIikge1xuICAgICAgdGhpcy5idXR0b24uYW5zd2VyID0gYW5zd2VyO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFuc3dlciA9IGFuc3dlcjtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVWYWxpZGl0eSgpO1xuICAgIHJldHVybiB0aGlzLmJ1dHRvbi5yZW5kZXIoKTtcbiAgfTtcblxuICBRdWVzdGlvblJ1blZpZXcucHJvdG90eXBlLnNldE1lc3NhZ2UgPSBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIuZXJyb3JfbWVzc2FnZVwiKS5odG1sKG1lc3NhZ2UpO1xuICB9O1xuXG4gIFF1ZXN0aW9uUnVuVmlldy5wcm90b3R5cGUuc2V0UHJvbXB0ID0gZnVuY3Rpb24ocHJvbXB0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIucHJvbXB0XCIpLmh0bWwocHJvbXB0KTtcbiAgfTtcblxuICBRdWVzdGlvblJ1blZpZXcucHJvdG90eXBlLnNldEhpbnQgPSBmdW5jdGlvbihoaW50KSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIuaGludFwiKS5odG1sKGhpbnQpO1xuICB9O1xuXG4gIFF1ZXN0aW9uUnVuVmlldy5wcm90b3R5cGUuc2V0TmFtZSA9IGZ1bmN0aW9uKG5ld05hbWUpIHtcbiAgICBpZiAobmV3TmFtZSA9PSBudWxsKSB7XG4gICAgICBuZXdOYW1lID0gdGhpcy5tb2RlbC5nZXQoJ25hbWUnKTtcbiAgICB9XG4gICAgdGhpcy5tb2RlbC5zZXQoXCJuYW1lXCIsIG5ld05hbWUpO1xuICAgIHJldHVybiB0aGlzLm5hbWUgPSB0aGlzLm1vZGVsLmVzY2FwZShcIm5hbWVcIikucmVwbGFjZSgvW15BLVphLXowLTlfXS9nLCBcIi1cIik7XG4gIH07XG5cbiAgUXVlc3Rpb25SdW5WaWV3LnByb3RvdHlwZS5nZXROYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubW9kZWwuZ2V0KFwibmFtZVwiKTtcbiAgfTtcblxuICBRdWVzdGlvblJ1blZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbnN3ZXJWYWx1ZSwgaHRtbDtcbiAgICB0aGlzLiRlbC5hdHRyKFwiaWRcIiwgXCJxdWVzdGlvbi1cIiArIHRoaXMubmFtZSk7XG4gICAgaWYgKCF0aGlzLm5vdEFza2VkKSB7XG4gICAgICBodG1sID0gXCI8ZGl2IGNsYXNzPSdlcnJvcl9tZXNzYWdlJz48L2Rpdj48ZGl2IGNsYXNzPSdwcm9tcHQnIFwiICsgKHRoaXMuZm9udFN0eWxlIHx8IFwiXCIpICsgXCI+XCIgKyAodGhpcy5tb2RlbC5nZXQoJ3Byb21wdCcpKSArIFwiPC9kaXY+IDxkaXYgY2xhc3M9J2hpbnQnIFwiICsgKHRoaXMuZm9udFN0eWxlIHx8IFwiXCIpICsgXCI+XCIgKyAodGhpcy5tb2RlbC5nZXQoJ2hpbnQnKSB8fCBcIlwiKSArIFwiPC9kaXY+XCI7XG4gICAgICBpZiAodGhpcy50eXBlID09PSBcIm9wZW5cIikge1xuICAgICAgICBpZiAoXy5pc1N0cmluZyh0aGlzLmFuc3dlcikgJiYgIV8uaXNFbXB0eSh0aGlzLmFuc3dlcikpIHtcbiAgICAgICAgICBhbnN3ZXJWYWx1ZSA9IHRoaXMuYW5zd2VyO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm1vZGVsLmdldChcIm11bHRpbGluZVwiKSkge1xuICAgICAgICAgIGh0bWwgKz0gXCI8ZGl2Pjx0ZXh0YXJlYSBpZD0nXCIgKyB0aGlzLmNpZCArIFwiX1wiICsgdGhpcy5uYW1lICsgXCInIGRhdGEtY2lkPSdcIiArIHRoaXMuY2lkICsgXCInIHZhbHVlPSdcIiArIChhbnN3ZXJWYWx1ZSB8fCAnJykgKyBcIic+PC90ZXh0YXJlYT48L2Rpdj5cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBodG1sICs9IFwiPGRpdj48aW5wdXQgaWQ9J1wiICsgdGhpcy5jaWQgKyBcIl9cIiArIHRoaXMubmFtZSArIFwiJyBkYXRhLWNpZD0nXCIgKyB0aGlzLmNpZCArIFwiJyB2YWx1ZT0nXCIgKyAoYW5zd2VyVmFsdWUgfHwgJycpICsgXCInPjwvZGl2PlwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBodG1sICs9IFwiPGRpdiBjbGFzcz0nYnV0dG9uX2NvbnRhaW5lcic+PC9kaXY+XCI7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc09ic2VydmF0aW9uKSB7XG4gICAgICAgIGh0bWwgKz0gXCI8aW1nIHNyYz0naW1hZ2VzL2ljb25fc2Nyb2xsLnBuZycgY2xhc3M9J2ljb24gYXV0b3Njcm9sbF9pY29uJyBkYXRhLWNpZD0nXCIgKyB0aGlzLmNpZCArIFwiJz5cIjtcbiAgICAgIH1cbiAgICAgIHRoaXMuJGVsLmh0bWwoaHRtbCk7XG4gICAgICBpZiAodGhpcy50eXBlID09PSBcInNpbmdsZVwiIHx8IHRoaXMudHlwZSA9PT0gXCJtdWx0aXBsZVwiKSB7XG4gICAgICAgIHRoaXMuYnV0dG9uLnNldEVsZW1lbnQodGhpcy4kZWwuZmluZChcIi5idXR0b25fY29udGFpbmVyXCIpKTtcbiAgICAgICAgdGhpcy5idXR0b24ub24oXCJyZW5kZXJlZFwiLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnV0dG9uLnJlbmRlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbC5oaWRlKCk7XG4gICAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gICAgfVxuICB9O1xuXG4gIFF1ZXN0aW9uUnVuVmlldy5wcm90b3R5cGUuZGVmaW5lU3BlY2lhbENhc2VSZXN1bHRzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGVsZW1lbnQsIGksIGosIGssIGxlbiwgbGVuMSwgbGlzdCwgb3B0aW9uLCByZWY7XG4gICAgbGlzdCA9IFtcIm1pc3NpbmdcIiwgXCJub3RBc2tlZFwiLCBcInNraXBwZWRcIiwgXCJsb2dpY1NraXBwZWRcIiwgXCJub3RBc2tlZEF1dG9zdG9wXCJdO1xuICAgIGZvciAoaiA9IDAsIGxlbiA9IGxpc3QubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIGVsZW1lbnQgPSBsaXN0W2pdO1xuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gXCJzaW5nbGVcIiB8fCB0aGlzLnR5cGUgPT09IFwib3BlblwiKSB7XG4gICAgICAgIHRoaXNbZWxlbWVudCArIFwiUmVzdWx0XCJdID0gZWxlbWVudDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnR5cGUgPT09IFwibXVsdGlwbGVcIikge1xuICAgICAgICB0aGlzW2VsZW1lbnQgKyBcIlJlc3VsdFwiXSA9IHt9O1xuICAgICAgICByZWYgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGZvciAoaSA9IGsgPSAwLCBsZW4xID0gcmVmLmxlbmd0aDsgayA8IGxlbjE7IGkgPSArK2spIHtcbiAgICAgICAgICBvcHRpb24gPSByZWZbaV07XG4gICAgICAgICAgdGhpc1tlbGVtZW50ICsgXCJSZXN1bHRcIl1bdGhpcy5vcHRpb25zW2ldLnZhbHVlXSA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFF1ZXN0aW9uUnVuVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cblN1cnZleVJldmlld1ZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoU3VydmV5UmV2aWV3Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gU3VydmV5UmV2aWV3VmlldygpIHtcbiAgICByZXR1cm4gU3VydmV5UmV2aWV3Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFN1cnZleVJldmlld1ZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiUXVlc3Rpb25SZXZpZXdWaWV3XCI7XG5cbiAgU3VydmV5UmV2aWV3Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy52aWV3cyA9IG9wdGlvbnMudmlld3M7XG4gIH07XG5cbiAgU3VydmV5UmV2aWV3Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFuc3dlcnMsIHZpZXc7XG4gICAgYW5zd2VycyA9ICgoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaiwgbGVuLCByZWYsIHJlc3VsdHM7XG4gICAgICByZWYgPSB0aGlzLnZpZXdzO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgIHZpZXcgPSByZWZbal07XG4gICAgICAgIHJlc3VsdHMucHVzaChcIjxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGgzPjwvaDM+IDwvZGl2PlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pLmNhbGwodGhpcykpLmpvaW4oXCJcIik7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwoXCI8aDI+UGxlYXNlIHJldmlldyB5b3VyIGFuc3dlcnMgYW5kIHByZXNzIG5leHQgd2hlbiByZWFkeS48L2gyPiBcIiArIGFuc3dlcnMpO1xuICB9O1xuXG4gIHJldHVybiBTdXJ2ZXlSZXZpZXdWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgUXVlc3Rpb25FZGl0VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcInF1ZXN0aW9uX2xpc3RfZWxlbWVudFwiXG5cbiAgZXZlbnRzIDpcbiAgICAnY2xpY2sgLmJhY2snICAgICAgICAgICAgIDogJ2dvQmFjaydcbiAgICAnY2xpY2sgLmRvbmUnICAgICAgICAgICAgIDogJ2RvbmUnXG4gICAgJ2NsaWNrIC5hZGRfb3B0aW9uJyAgICAgICA6ICdhZGRPcHRpb24nXG4gICAgJ2NsaWNrIC5kZWxldGVfb3B0aW9uJyAgICA6ICdzaG93RGVsZXRlQ29uZmlybSdcbiAgICAnY2xpY2sgLmRlbGV0ZV9jYW5jZWwnICAgIDogJ2hpZGVEZWxldGVDb25maXJtJ1xuICAgICdjbGljayAuZGVsZXRlX2RlbGV0ZScgICAgOiAnZGVsZXRlT3B0aW9uJ1xuICAgICdjbGljayAjcXVlc3Rpb25fdHlwZSBpbnB1dDpyYWRpbycgICAgICAgOiAnY2hhbmdlUXVlc3Rpb25UeXBlJ1xuICAgICdjaGFuZ2UgLm9wdGlvbl9zZWxlY3QnICAgOiAndGVtcGxhdGVGaWxsJ1xuICAgICdrZXlwcmVzcyAub3B0aW9uX3ZhbHVlJyAgOiAncXVpY2tBZGRXaXRoRW50ZXInXG4gICAgJ2tleXByZXNzIC5vcHRpb25fbGFiZWwnICA6ICdxdWlja0ZvY3VzVmFsdWUnXG4gICAgJ2NoYW5nZSAjY3VzdG9tX3ZhbGlkYXRpb25fY29kZScgOiAndmFsaWRhdGVTeW50YXgnXG4gICAgJ2NoYW5nZSAjZGlzcGxheV9jb2RlJyAgICAgICAgICAgOiAndmFsaWRhdGVTeW50YXgnXG4gICAgJ2NoYW5nZSAjc2tpcF9sb2dpYycgICAgICAgICAgICAgOiAndmFsaWRhdGVTeW50YXgnXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgICBAYWN0aXZpdHkgICA9IG51bGxcbiAgICBAdGltZXIgPSAwXG5cbiAgICBAcXVlc3Rpb24gICA9IG9wdGlvbnMucXVlc3Rpb25cbiAgICBAc3VidGVzdCAgICA9IG9wdGlvbnMuc3VidGVzdFxuICAgIEBhc3Nlc3NtZW50ID0gb3B0aW9ucy5hc3Nlc3NtZW50XG5cblxuICB2YWxpZGF0ZVN5bnRheDogKGV2ZW50KSAtPlxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICBjb2RlID0gJHRhcmdldC52YWwoKVxuICAgIGlmIG5vdCBfLmlzRW1wdHkoY29kZSlcbiAgICAgIHRyeVxuICAgICAgICBvbGRBbnN3ZXIgPSBAYW5zd2VyXG4gICAgICAgIEBhbnN3ZXIgPSB7fVxuICAgICAgICBAaXNWYWxpZCA9IENvZmZlZVNjcmlwdC5jb21waWxlLmFwcGx5KEAsIFtjb2RlXSlcbiAgICAgICAgaWYgb2xkQW5zd2VyPyB0aGVuIEBhbnN3ZXIgPSBvbGRBbnN3ZXIgZWxzZSBkZWxldGUgdGhpc1tcImFuc3dlclwiXVxuICAgICAgY2F0Y2ggZXJyb3JcbiAgICAgICAgbmFtZSA9ICgoL2Z1bmN0aW9uICguezEsfSlcXCgvKS5leGVjKGVycm9yLmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkpWzFdKVxuICAgICAgICB3aGVyZSA9ICR0YXJnZXQuYXR0cignaWQnKS5odW1hbml6ZSgpXG4gICAgICAgIG1lc3NhZ2UgPSBlcnJvci5tZXNzYWdlXG4gICAgICAgIGFsZXJ0IFwiRXJyb3IgaW4gI3t3aGVyZX1cXG5cXG4je25hbWV9XFxuXFxuI3ttZXNzYWdlfVwiXG5cbiAgcXVpY2tBZGRXaXRoRW50ZXI6IChldmVudCkgLT5cbiAgICBpZiBldmVudC5rZXlDb2RlPyAmJiBldmVudC5rZXlDb2RlICE9IDEzIHRoZW4gcmV0dXJuIHRydWVcbiAgICBAYWRkT3B0aW9uKClcblxuICBxdWlja0ZvY3VzVmFsdWU6IChldmVudCkgLT5cbiAgICBpZiBldmVudC5rZXlDb2RlPyAmJiBldmVudC5rZXlDb2RlICE9IDEzIHRoZW4gcmV0dXJuIHRydWVcbiAgICAkKGV2ZW50LnRhcmdldCkucGFyZW50KCkuZmluZChcIi5vcHRpb25fdmFsdWVcIikuZm9jdXMoKVxuXG4gIHRlbXBsYXRlRmlsbDogKGV2ZW50KSAtPlxuICAgIGluZGV4ID0gJChldmVudC50YXJnZXQpLmZpbmQoXCJvcHRpb246c2VsZWN0ZWRcIikuYXR0cignZGF0YS1pbmRleCcpXG4gICAgb3B0aW9uVGVtcGxhdGVzID0gVGFuZ2VyaW5lLnRlbXBsYXRlcy5nZXQoXCJvcHRpb25UZW1wbGF0ZXNcIilcbiAgICBpZiBvcHRpb25UZW1wbGF0ZXNbaW5kZXhdP1xuICAgICAgQHF1ZXN0aW9uLnNldCBcIm9wdGlvbnNcIiwgb3B0aW9uVGVtcGxhdGVzW2luZGV4XS5vcHRpb25zXG4gICAgICBAJGVsLmZpbmQoJyNvcHRpb25fbGlzdF93cmFwcGVyJykuaHRtbCBAZ2V0T3B0aW9uTGlzdCgpXG4gICAgcmV0dXJuIGZhbHNlXG5cbiAgZ2V0T3B0aW9uTGlzdDogLT5cbiAgICBvcHRpb25zID0gQHF1ZXN0aW9uLmdldCBcIm9wdGlvbnNcIlxuICAgIGh0bWwgPSBcIjxoMj5PcHRpb25zPC9oMj5cbiAgICAgIDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cbiAgICAgICAgPHVsIGlkPSdvcHRpb25fbGlzdCc+XG4gICAgXCJcblxuICAgIGZvciBvcHRpb24sIGkgaW4gb3B0aW9uc1xuICAgICAgXG4gICAgICBodG1sICs9IFwiXG4gICAgICA8bGkgY2xhc3M9J3F1ZXN0aW9uJz5cbiAgICAgICAgPHRhYmxlPjx0cj48dGQ+XG4gICAgICAgICAgPGltZyBzcmM9J2ltYWdlcy9pY29uX2RyYWcucG5nJyBjbGFzcz0nc29ydGFibGVfaGFuZGxlJz5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxkaXYgc3R5bGU9J2Rpc3BsYXk6IGJsb2NrOyc+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdvcHRpb25fbGFiZWxfdmFsdWUnPlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2VkaXQnIGZvcj0nb3B0aW9ucy4je2l9LmxhYmVsJz5MYWJlbDwvbGFiZWw+XG4gICAgICAgICAgICAgIDxpbnB1dCBpZD0nb3B0aW9ucy4je2l9LmxhYmVsJyB2YWx1ZT0nI3tfLmVzY2FwZShvcHRpb24ubGFiZWwpfScgcGxhY2Vob2xkZXI9J09wdGlvbiBsYWJlbCcgY2xhc3M9J29wdGlvbl9sYWJlbCc+PGJyPlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J2VkaXQnIGZvcj0nb3B0aW9ucy4je2l9LnZhbHVlJyB0aXRsZT0nQWxsb3dlZCBjaGFyYWN0ZXJzJiM1ODsgQS1aLCBhLXosIDAtOSwgYW5kIHVuZGVyc2NvcmVzLic+VmFsdWU8L2xhYmVsPlxuICAgICAgICAgICAgICA8aW5wdXQgaWQ9J29wdGlvbnMuI3tpfS52YWx1ZScgdmFsdWU9JyN7Xy5lc2NhcGUob3B0aW9uLnZhbHVlKX0nIHBsYWNlaG9sZGVyPSdPcHRpb24gdmFsdWUnIGNsYXNzPSdvcHRpb25fdmFsdWUnPjxicj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGltZyBzcmM9J2ltYWdlcy9pY29uX2RlbGV0ZS5wbmcnIGNsYXNzPSdkZWxldGVfb3B0aW9uJyBkYXRhLWluZGV4PScje2l9Jz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbmZpcm1hdGlvbiBkZWxldGVfY29uZmlybV8je2l9Jz5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0nZGVsZXRlX2RlbGV0ZSBjb21tYW5kX3JlZCcgZGF0YS1pbmRleD0nI3tpfSc+RGVsZXRlPC9idXR0b24+XG4gICAgICAgICAgICAgIDxidXR0b24gZGF0YS1pbmRleD0nI3tpfScgY2xhc3M9J2RlbGV0ZV9jYW5jZWwgY29tbWFuZCc+Q2FuY2VsPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZD48L3RyPjwvdGFibGU+XG4gICAgICA8L2xpPlxuICAgICAgXCJcbiAgICBodG1sICs9IFwiPC91bD5cblxuICAgICAgPGJ1dHRvbiBjbGFzcz0nYWRkX29wdGlvbiBjb21tYW5kJz5BZGQgb3B0aW9uPC9idXR0b24+XG4gICAgPC9kaXY+XG4gICAgXCJcblxuICAjXG4gICMgQWRkaW5nIGFuIG9wdGlvblxuICAjXG4gIGFkZE9wdGlvbjogLT5cblxuICAgIEB1cGRhdGVNb2RlbCgpXG5cbiAgICBvcHRpb25zID0gQHF1ZXN0aW9uLmdldCBcIm9wdGlvbnNcIlxuICAgIG9wdGlvbnMucHVzaFxuICAgICAgbGFiZWwgOiBcIlwiXG4gICAgICB2YWx1ZSA6IFwiXCJcbiAgICBAcXVlc3Rpb24uc2V0IFwib3B0aW9uc1wiLCBvcHRpb25zXG5cbiAgICBAcmVmcmVzaE9wdGlvbkxpc3QoKVxuXG4gICAgIyBmb2N1cyBvbiBuZXh0XG4gICAgb3B0aW9uTGlzdEVsZW1lbnRzID0gQCRlbC5maW5kKFwiI29wdGlvbl9saXN0X3dyYXBwZXIgbGlcIilcbiAgICBpZiBvcHRpb25MaXN0RWxlbWVudHMubGVuZ3RoICE9IDBcbiAgICAgICQob3B0aW9uTGlzdEVsZW1lbnRzLmxhc3QoKSkuc2Nyb2xsVG8oKS5maW5kKFwiaW5wdXQ6Zmlyc3RcIikuZm9jdXMoKVxuXG4gIHJlbmRlcjogLT5cblxuICAgIGFzc2Vzc21lbnROYW1lID0gQGFzc2Vzc21lbnQuZXNjYXBlKFwibmFtZVwiKVxuICAgIHN1YnRlc3ROYW1lICAgID0gQHN1YnRlc3QuZXNjYXBlKFwibmFtZVwiKVxuXG4gICAgbmFtZSAgICAgICAgICAgPSBAcXVlc3Rpb24uZ2V0RXNjYXBlZFN0cmluZyhcIm5hbWVcIilcbiAgICBwcm9tcHQgICAgICAgICA9IEBxdWVzdGlvbi5nZXRFc2NhcGVkU3RyaW5nKFwicHJvbXB0XCIpXG4gICAgaGludCAgICAgICAgICAgPSBAcXVlc3Rpb24uZ2V0RXNjYXBlZFN0cmluZyhcImhpbnRcIilcbiAgICBza2lwTG9naWMgICAgICA9IEBxdWVzdGlvbi5nZXRFc2NhcGVkU3RyaW5nKFwic2tpcExvZ2ljXCIpXG5cbiAgICBjdXN0b21WYWxpZGF0aW9uQ29kZSAgICA9IEBxdWVzdGlvbi5nZXRFc2NhcGVkU3RyaW5nKFwiY3VzdG9tVmFsaWRhdGlvbkNvZGVcIilcbiAgICBjdXN0b21WYWxpZGF0aW9uTWVzc2FnZSA9IEBxdWVzdGlvbi5nZXRFc2NhcGVkU3RyaW5nKFwiY3VzdG9tVmFsaWRhdGlvbk1lc3NhZ2VcIilcbiAgICBkaXNwbGF5Q29kZSAgICAgICAgICAgICA9IEBxdWVzdGlvbi5nZXRTdHJpbmcoXCJkaXNwbGF5Q29kZVwiKVxuXG4gICAgdHlwZSAgICAgICAgICAgID0gQHF1ZXN0aW9uLmdldCBcInR5cGVcIlxuICAgIG9wdGlvbnMgICAgICAgICA9IEBxdWVzdGlvbi5nZXQgXCJvcHRpb25zXCJcbiAgICBsaW5rZWRHcmlkU2NvcmUgPSBAcXVlc3Rpb24uZ2V0TnVtYmVyKFwibGlua2VkR3JpZFNjb3JlXCIpXG4gICAgc2tpcHBhYmxlICAgICAgID0gQHF1ZXN0aW9uLmdldEJvb2xlYW4oXCJza2lwcGFibGVcIilcblxuICAgIGNoZWNrT3JSYWRpbyA9IGlmIHR5cGUgPT0gXCJtdWx0aXBsZVwiIHRoZW4gXCJjaGVja2JveFwiIGVsc2UgXCJyYWRpb1wiXG5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgIDxidXR0b24gY2xhc3M9J2JhY2sgbmF2aWdhdGlvbic+QmFjazwvYnV0dG9uPlxuICAgICAgPGgxPlF1ZXN0aW9uIEVkaXRvcjwvaDE+XG4gICAgICA8dGFibGUgY2xhc3M9J2Jhc2ljX2luZm8nPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoPlN1YnRlc3Q8L3RoPlxuICAgICAgICAgIDx0ZD4je3N1YnRlc3ROYW1lfTwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGg+QXNzZXNzbWVudDwvdGg+XG4gICAgICAgICAgPHRkPiN7YXNzZXNzbWVudE5hbWV9PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGFibGU+XG4gICAgICA8YnV0dG9uIGNsYXNzPSdkb25lIGNvbW1hbmQnPkRvbmU8L2J1dHRvbj5cbiAgICAgIDxkaXYgY2xhc3M9J2VkaXRfZm9ybSc+XG4gICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICA8bGFiZWwgZm9yPSduYW1lJz5WYXJpYWJsZSBuYW1lPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgaWQ9J25hbWUnIHR5cGU9J3RleHQnIHZhbHVlPScje25hbWV9Jz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICA8bGFiZWwgZm9yPSdwcm9tcHQnPlByb21wdDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IGlkPSdwcm9tcHQnIHR5cGU9J3RleHQnIHZhbHVlPScje3Byb21wdH0nPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICAgIDxsYWJlbCBmb3I9J2hpbnQnPk5vdGUgdG8gZW51bWVyYXRvcjwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IGlkPSdoaW50JyB0eXBlPSd0ZXh0JyB2YWx1ZT0nI3toaW50fSc+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nc2tpcF9sb2dpYycgdGl0bGU9J1RoaXMgc3RhdGVtZW50IHdpbGwgYmUgc2tpcGVkIGlmIGl0IGV2YWx1YXRlcyB0byB0cnVlLiBleGFtcGxlOiBSZXN1bHRPZlF1ZXN0aW9uKFxcXCJtYXplMVxcXCIpIGlzbnQgXFxcIjJcXFwiIEV4YW1wbGUgMjogXFxcInJlZFxcXCIgaW4gUmVzdWx0T2ZNdWx0aXBsZShcXFwiZmF2ZV9jb2xvcnNcXFwiKSc+U2tpcCBpZjwvbGFiZWw+XG4gICAgICAgICAgPHRleHRhcmVhIHJvd3M9JzInIGlkPSdza2lwX2xvZ2ljJz4je3NraXBMb2dpY308L3RleHRhcmVhPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgPGxhYmVsPkN1c3RvbSB2YWxpZGF0aW9uPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdjdXN0b21fdmFsaWRhdGlvbl9jb2RlJyB0aXRsZT0nSW50ZW5kZWQgZm9yIG9wZW4gcXVlc3Rpb25zLiBUaGlzIGNvZGUgc2hvdWxkIGV2YWx1YXRlIHRvIHRydWUgb3IgZmFsc2UuIEZhbHNlIHdpbGwgdHJpZ2dlciBhbiBlcnJvciBtZXNzYWdlIGZvciB0aGlzIHF1ZXN0aW9uLiBFLmcuIEBhbnN3ZXIgPT0gXFxcIjFcXFwiIHdpbGwgZXZhbHVhdGUgdG8gZmFsc2UgZm9yIGFueSB2YWx1ZSBvdGhlciB0aGFuIDEuJz5WYWxpZCB3aGVuPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCBpZD0nY3VzdG9tX3ZhbGlkYXRpb25fY29kZScgdHlwZT0ndGV4dCcgdmFsdWU9JyN7Y3VzdG9tVmFsaWRhdGlvbkNvZGV9Jz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdjdXN0b21fdmFsaWRhdGlvbl9tZXNzYWdlJz5FcnJvciBtZXNzYWdlPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCBpZD0nY3VzdG9tX3ZhbGlkYXRpb25fbWVzc2FnZScgdHlwZT0ndGV4dCcgdmFsdWU9JyN7Y3VzdG9tVmFsaWRhdGlvbk1lc3NhZ2V9Jz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+PGJyPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdkaXNwbGF5X2NvZGUnIHRpdGxlPSdUaGlzIENvZmZlZVNjcmlwdCBjb2RlIHdpbGwgYmUgZXhlY3V0ZWQgd2hlbiB0aGlzIHF1ZXN0aW9uIGlzIHNob3duLiBUaGlzIG9wdGlvbiBtYXkgb25seSBiZSB1c2VkIHdoZW4gRm9jdXMgTW9kZSBpcyBvbi4nPkFjdGlvbiBvbiBkaXNwbGF5PC9sYWJlbD5cbiAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0nZGlzcGxheV9jb2RlJyByb3dzPScyJz4je2Rpc3BsYXlDb2RlfTwvdGV4dGFyZWE+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG5cbiAgICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICAgIDxsYWJlbD5Ta2lwcGFibGU8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgaWQ9J3NraXBfcmFkaW8nIGNsYXNzPSdidXR0b25zZXQnPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj0nc2tpcF90cnVlJz5ZZXM8L2xhYmVsPjxpbnB1dCBuYW1lPSdza2lwcGFibGUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZScgaWQ9J3NraXBfdHJ1ZScgI3snY2hlY2tlZCcgaWYgc2tpcHBhYmxlfT5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J3NraXBfZmFsc2UnPk5vPC9sYWJlbD48aW5wdXQgbmFtZT0nc2tpcHBhYmxlJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0nc2tpcF9mYWxzZScgI3snY2hlY2tlZCcgaWYgbm90IHNraXBwYWJsZX0+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nbGlua2VkX2dyaWRfc2NvcmUnPkl0ZW1zIGF0dGVtcHRlZCByZXF1aXJlZCBvbiBsaW5rZWQgZ3JpZDwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IGlkPSdsaW5rZWRfZ3JpZF9zY29yZScgdHlwZT0nbnVtYmVyJyB2YWx1ZT0nI3tsaW5rZWRHcmlkU2NvcmV9Jz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJyBpZD0ncXVlc3Rpb25fdHlwZScgY2xhc3M9J3F1ZXN0aW9uX3R5cGUnPlxuICAgICAgICAgIDxsYWJlbD5RdWVzdGlvbiBUeXBlPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdidXR0b25zZXQnPlxuICAgICAgICAgICAgPGxhYmVsIGZvcj0nc2luZ2xlJz5zaW5nbGU8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IGlkPSdzaW5nbGUnIG5hbWU9J3R5cGUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nc2luZ2xlJyAjeydjaGVja2VkJyBpZiB0eXBlID09ICdzaW5nbGUnfT5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J211bHRpcGxlJz5tdWx0aXBsZTwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgaWQ9J211bHRpcGxlJyBuYW1lPSd0eXBlJyAgdHlwZT0ncmFkaW8nIHZhbHVlPSdtdWx0aXBsZScgI3snY2hlY2tlZCcgaWYgdHlwZSA9PSAnbXVsdGlwbGUnfT5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J29wZW4nPm9wZW48L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IGlkPSdvcGVuJyBuYW1lPSd0eXBlJyAgdHlwZT0ncmFkaW8nIHZhbHVlPSdvcGVuJyAjeydjaGVja2VkJyBpZiB0eXBlID09ICdvcGVuJ30+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcIlxuXG4gICAgaWYgdHlwZSAhPSBcIm9wZW5cIlxuICAgICAgb3B0aW9uSFRNTCA9IFwiXG4gICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsIGZvcj0ncXVlc3Rpb25fdGVtcGxhdGVfc2VsZWN0Jz5GaWxsIGZyb20gdGVtcGxhdGU8L2xhYmVsPjxicj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgIDxzZWxlY3QgaWQ9J3F1ZXN0aW9uX3RlbXBsYXRlX3NlbGVjdCcgY2xhc3M9J29wdGlvbl9zZWxlY3QnPlxuICAgICAgICAgICAgPG9wdGlvbiBzZWxlY3RlZD0nc2VsZWN0ZWQnPlNlbGVjdCB0ZW1wbGF0ZTwvb3B0aW9uPlxuICAgICAgICBcIlxuICAgICAgIyBvayB0byByZWZlcm5jZSB0aGluZ3MgYnkgaW5kZXggaWYgbm90IGFuIG9iamVjdFxuICAgICAgb3B0aW9uVGVtcGxhdGVzID0gVGFuZ2VyaW5lLnRlbXBsYXRlcy5nZXQoXCJvcHRpb25UZW1wbGF0ZXNcIilcbiAgICAgIGZvciBvcHRpb24sIGkgaW4gb3B0aW9uVGVtcGxhdGVzXG4gICAgICAgIG9wdGlvbkhUTUwgKz0gXCI8b3B0aW9uIGRhdGEtaW5kZXg9JyN7aX0nIGNsYXNzPSd0ZW1wbGF0ZV9vcHRpb24nPiN7b3B0aW9uLm5hbWV9PC9vcHRpb24+XCJcblxuICAgICAgb3B0aW9uSFRNTCArPSBcIjwvc2VsZWN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBpZD0nb3B0aW9uX2xpc3Rfd3JhcHBlcic+I3tAZ2V0T3B0aW9uTGlzdCgpfTwvZGl2PlxuICAgICAgICBcIlxuICAgICAgQCRlbC5hcHBlbmQgb3B0aW9uSFRNTFxuXG4gICAgICBAcmVmcmVzaFNvcnRhYmxlKClcbiAgICAgIFxuICAgIEAkZWwuYXBwZW5kIFwiPGJ1dHRvbiBjbGFzcz0nZG9uZSBjb21tYW5kJz5Eb25lPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIFwiXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgcmVmcmVzaE9wdGlvbkxpc3Q6IC0+XG4gICAgQCRlbC5maW5kKFwiI29wdGlvbl9saXN0X3dyYXBwZXJcIikuaHRtbCBAZ2V0T3B0aW9uTGlzdCgpXG4gICAgQHJlZnJlc2hTb3J0YWJsZSgpXG5cbiAgcmVmcmVzaFNvcnRhYmxlOiAtPlxuICAgIEAkZWwuZmluZChcIiNvcHRpb25fbGlzdFwiKS5zb3J0YWJsZVxuICAgICAgaGFuZGxlIDogJy5zb3J0YWJsZV9oYW5kbGUnXG4gICAgICBzdGFydDogKGV2ZW50LCB1aSkgLT4gdWkuaXRlbS5hZGRDbGFzcyBcImRyYWdfc2hhZG93XCJcbiAgICAgIHN0b3A6ICAoZXZlbnQsIHVpKSAtPiB1aS5pdGVtLnJlbW92ZUNsYXNzIFwiZHJhZ19zaGFkb3dcIlxuICAgICAgdXBkYXRlIDogKGV2ZW50LCB1aSkgPT5cbiAgICAgICAgQHVwZGF0ZU1vZGVsKClcblxuXG4gIGhpamFja0VudGVyOiAoZXZlbnQpIC0+XG4gICAgaWYgZXZlbnQud2hpY2ggPT0gMTNcbiAgICAgIEAkZWwuZmluZChldmVudC50YXJnZXQpLmJsdXIoKVxuICAgICAgcmV0dXJuIGZhbHNlXG5cbiAgY2hhbmdlUXVlc3Rpb25UeXBlOiAoZXZlbnQpIC0+XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgICMgaWYgaXQgY2hhbmdlcywgcmVkbyB0aGUgcmVuZGVyaW5nXG4gICAgaWYgKCR0YXJnZXQudmFsKCkgIT0gXCJvcGVuXCIgJiYgQHF1ZXN0aW9uLmdldChcInR5cGVcIikgPT0gXCJvcGVuXCIpIHx8ICgkdGFyZ2V0LnZhbCgpID09IFwib3BlblwiICYmIEBxdWVzdGlvbi5nZXQoXCJ0eXBlXCIpICE9IFwib3BlblwiKVxuICAgICAgQHVwZGF0ZU1vZGVsKClcbiAgICAgIEBxdWVzdGlvbi5zZXQgXCJ0eXBlXCIsICR0YXJnZXQudmFsKClcbiAgICAgIEBxdWVzdGlvbi5zZXQgXCJvcHRpb25zXCIsIFtdXG4gICAgICBAcmVuZGVyKClcblxuICAjXG4gICMgU2F2aW5nXG4gICNcbiAgZG9uZTogLT5cbiAgICByZXR1cm4gZmFsc2UgdW5sZXNzIEBhY3Rpdml0eSA9PSBudWxsXG4gICAgQGFjdGl2aXR5ID0gXCJzYXZpbmdcIlxuXG4gICAgQHVwZGF0ZU1vZGVsKClcbiAgICBAcXVlc3Rpb24uc2F2ZSBudWxsLFxuICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgQGFjdGl2aXR5ID0gbnVsbFxuICAgICAgICBVdGlscy5taWRBbGVydCBcIlF1ZXN0aW9uIFNhdmVkXCJcbiAgICAgICAgY2xlYXJUaW1lb3V0IEB0aW1lciAjIGdvIHdpdGggdGhlIGxhc3QgdGltZW91dFxuICAgICAgICBAdGltZXIgPSBzZXRUaW1lb3V0IEBnb0JhY2ssIDUwMFxuICAgICAgZXJyb3I6ID0+XG4gICAgICAgIEBhY3Rpdml0eSA9IG51bGxcbiAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJTYXZlIGVycm9yXCJcbiAgICByZXR1cm4gZmFsc2VcblxuICBnb0JhY2s6ID0+XG4gICAgY2xhc3NPck5vdCA9ICdjbGFzcy8nIGlmIEBxdWVzdGlvbi5oYXMoXCJjdXJyaWN1bHVtSWRcIilcbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiI3tjbGFzc09yTm90fHxcIlwifXN1YnRlc3QvI3tAcXVlc3Rpb24uZ2V0KCdzdWJ0ZXN0SWQnKX1cIiwgdHJ1ZVxuICAgIHJldHVybiBmYWxzZVxuXG4gIHVwZGF0ZU1vZGVsOiA9PlxuICAgICMgYmFzaWNzXG4gICAgQHF1ZXN0aW9uLnNldFxuICAgICAgXCJwcm9tcHRcIiAgICAgICAgICA6IEAkZWwuZmluZChcIiNwcm9tcHRcIikudmFsKClcbiAgICAgIFwibmFtZVwiICAgICAgICAgICAgOiBAJGVsLmZpbmQoXCIjbmFtZVwiKS52YWwoKS5zYWZldHlEYW5jZSgpXG4gICAgICBcImhpbnRcIiAgICAgICAgICAgIDogQCRlbC5maW5kKFwiI2hpbnRcIikudmFsKClcbiAgICAgIFwic2tpcExvZ2ljXCIgICAgICAgOiBAJGVsLmZpbmQoXCIjc2tpcF9sb2dpY1wiKS52YWwoKVxuICAgICAgXCJsaW5rZWRHcmlkU2NvcmVcIiA6IHBhcnNlSW50KEAkZWwuZmluZChcIiNsaW5rZWRfZ3JpZF9zY29yZVwiKS52YWwoKSlcbiAgICAgIFwidHlwZVwiICAgICAgICAgICAgOiBAJGVsLmZpbmQoXCIjcXVlc3Rpb25fdHlwZSBpbnB1dDpjaGVja2VkXCIpLnZhbCgpXG4gICAgICBcInNraXBwYWJsZVwiICAgICAgIDogQCRlbC5maW5kKFwiI3NraXBfcmFkaW8gaW5wdXQ6cmFkaW9bbmFtZT1za2lwcGFibGVdOmNoZWNrZWRcIikudmFsKCkgPT0gXCJ0cnVlXCJcbiAgICAgIFwiY3VzdG9tVmFsaWRhdGlvbkNvZGVcIiAgICA6IEAkZWwuZmluZChcIiNjdXN0b21fdmFsaWRhdGlvbl9jb2RlXCIpLnZhbCgpXG4gICAgICBcImN1c3RvbVZhbGlkYXRpb25NZXNzYWdlXCIgOiBAJGVsLmZpbmQoXCIjY3VzdG9tX3ZhbGlkYXRpb25fbWVzc2FnZVwiKS52YWwoKVxuICAgICAgXCJkaXNwbGF5Q29kZVwiICAgICAgICAgICAgIDogQCRlbC5maW5kKFwiI2Rpc3BsYXlfY29kZVwiKS52YWwoKVxuICAgICAgXG4gICAgIyBvcHRpb25zXG4gICAgb3B0aW9ucyA9IFtdXG4gICAgaSA9IDBcbiAgICBvcHRpb25MaXN0RWxlbWVudHMgPSBAJGVsLmZpbmQoXCIjb3B0aW9uX2xpc3QgbGlcIilcbiAgICBmb3IgbGkgaW4gb3B0aW9uTGlzdEVsZW1lbnRzXG4gICAgICBsYWJlbCA9ICQobGkpLmZpbmQoXCIub3B0aW9uX2xhYmVsXCIpLnZhbCgpXG4gICAgICB2YWx1ZSA9ICQobGkpLmZpbmQoXCIub3B0aW9uX3ZhbHVlXCIpLnZhbCgpLnNhZmV0eURhbmNlKClcblxuICAgICAgaWYgbGFiZWw/IHx8IHZhbHVlP1xuICAgICAgICBvcHRpb25zW2ldID1cbiAgICAgICAgICBsYWJlbCA6IGxhYmVsXG4gICAgICAgICAgdmFsdWUgOiB2YWx1ZVxuICAgICAgICBpKytcbiAgICBcbiAgICAjIHZhbGlkYXRlIG5vdCBlbXB0eVxuICAgIGlmIG9wdGlvbnMubGVuZ3RoICE9IDAgXG4gICAgICBsYXN0ID0gb3B0aW9ucy5wb3AoKVxuICAgICAgaWYgbGFzdC5sYWJlbCAhPSBcIlwiICYmIGxhc3QudmFsdWUgIT0gXCJcIiB0aGVuIG9wdGlvbnMucHVzaCBsYXN0XG5cbiAgICBAcXVlc3Rpb24uc2V0IFwib3B0aW9uc1wiLCBvcHRpb25zXG5cbiAgI1xuICAjIERlbGV0aW5nIGFuIG9wdGlvblxuICAjXG4gIHNob3dEZWxldGVDb25maXJtOiAoZXZlbnQpIC0+IEAkZWwuZmluZChcIi5kZWxldGVfY29uZmlybV8je0AkZWwuZmluZChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtaW5kZXgnKX1cIikuZmFkZUluKDI1MClcbiAgaGlkZURlbGV0ZUNvbmZpcm06IChldmVudCkgLT4gQCRlbC5maW5kKFwiLmRlbGV0ZV9jb25maXJtXyN7QCRlbC5maW5kKGV2ZW50LnRhcmdldCkuYXR0cignZGF0YS1pbmRleCcpfVwiKS5mYWRlT3V0KDI1MClcbiAgZGVsZXRlT3B0aW9uOiAoZXZlbnQpIC0+XG4gICAgQHVwZGF0ZU1vZGVsKClcbiAgICBvcHRpb25zID0gQHF1ZXN0aW9uLmdldCBcIm9wdGlvbnNcIlxuICAgIG9wdGlvbnMuc3BsaWNlIEAkZWwuZmluZChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtaW5kZXgnKSwgMVxuICAgIEBxdWVzdGlvbi5zZXQgXCJvcHRpb25zXCIsIG9wdGlvbnNcbiAgICBAcmVmcmVzaE9wdGlvbkxpc3QoKVxuICAgIHJldHVybiBmYWxzZVxuIiwidmFyIFF1ZXN0aW9uRWRpdFZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuUXVlc3Rpb25FZGl0VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChRdWVzdGlvbkVkaXRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBRdWVzdGlvbkVkaXRWaWV3KCkge1xuICAgIHRoaXMudXBkYXRlTW9kZWwgPSBiaW5kKHRoaXMudXBkYXRlTW9kZWwsIHRoaXMpO1xuICAgIHRoaXMuZ29CYWNrID0gYmluZCh0aGlzLmdvQmFjaywgdGhpcyk7XG4gICAgcmV0dXJuIFF1ZXN0aW9uRWRpdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBRdWVzdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcInF1ZXN0aW9uX2xpc3RfZWxlbWVudFwiO1xuXG4gIFF1ZXN0aW9uRWRpdFZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICAnY2xpY2sgLmJhY2snOiAnZ29CYWNrJyxcbiAgICAnY2xpY2sgLmRvbmUnOiAnZG9uZScsXG4gICAgJ2NsaWNrIC5hZGRfb3B0aW9uJzogJ2FkZE9wdGlvbicsXG4gICAgJ2NsaWNrIC5kZWxldGVfb3B0aW9uJzogJ3Nob3dEZWxldGVDb25maXJtJyxcbiAgICAnY2xpY2sgLmRlbGV0ZV9jYW5jZWwnOiAnaGlkZURlbGV0ZUNvbmZpcm0nLFxuICAgICdjbGljayAuZGVsZXRlX2RlbGV0ZSc6ICdkZWxldGVPcHRpb24nLFxuICAgICdjbGljayAjcXVlc3Rpb25fdHlwZSBpbnB1dDpyYWRpbyc6ICdjaGFuZ2VRdWVzdGlvblR5cGUnLFxuICAgICdjaGFuZ2UgLm9wdGlvbl9zZWxlY3QnOiAndGVtcGxhdGVGaWxsJyxcbiAgICAna2V5cHJlc3MgLm9wdGlvbl92YWx1ZSc6ICdxdWlja0FkZFdpdGhFbnRlcicsXG4gICAgJ2tleXByZXNzIC5vcHRpb25fbGFiZWwnOiAncXVpY2tGb2N1c1ZhbHVlJyxcbiAgICAnY2hhbmdlICNjdXN0b21fdmFsaWRhdGlvbl9jb2RlJzogJ3ZhbGlkYXRlU3ludGF4JyxcbiAgICAnY2hhbmdlICNkaXNwbGF5X2NvZGUnOiAndmFsaWRhdGVTeW50YXgnLFxuICAgICdjaGFuZ2UgI3NraXBfbG9naWMnOiAndmFsaWRhdGVTeW50YXgnXG4gIH07XG5cbiAgUXVlc3Rpb25FZGl0Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLmFjdGl2aXR5ID0gbnVsbDtcbiAgICB0aGlzLnRpbWVyID0gMDtcbiAgICB0aGlzLnF1ZXN0aW9uID0gb3B0aW9ucy5xdWVzdGlvbjtcbiAgICB0aGlzLnN1YnRlc3QgPSBvcHRpb25zLnN1YnRlc3Q7XG4gICAgcmV0dXJuIHRoaXMuYXNzZXNzbWVudCA9IG9wdGlvbnMuYXNzZXNzbWVudDtcbiAgfTtcblxuICBRdWVzdGlvbkVkaXRWaWV3LnByb3RvdHlwZS52YWxpZGF0ZVN5bnRheCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIGNvZGUsIGVycm9yLCBtZXNzYWdlLCBuYW1lLCBvbGRBbnN3ZXIsIHdoZXJlO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgY29kZSA9ICR0YXJnZXQudmFsKCk7XG4gICAgaWYgKCFfLmlzRW1wdHkoY29kZSkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG9sZEFuc3dlciA9IHRoaXMuYW5zd2VyO1xuICAgICAgICB0aGlzLmFuc3dlciA9IHt9O1xuICAgICAgICB0aGlzLmlzVmFsaWQgPSBDb2ZmZWVTY3JpcHQuY29tcGlsZS5hcHBseSh0aGlzLCBbY29kZV0pO1xuICAgICAgICBpZiAob2xkQW5zd2VyICE9IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hbnN3ZXIgPSBvbGRBbnN3ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGRlbGV0ZSB0aGlzW1wiYW5zd2VyXCJdO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgZXJyb3IgPSBlcnJvcjE7XG4gICAgICAgIG5hbWUgPSAoL2Z1bmN0aW9uICguezEsfSlcXCgvLmV4ZWMoZXJyb3IuY29uc3RydWN0b3IudG9TdHJpbmcoKSlbMV0pO1xuICAgICAgICB3aGVyZSA9ICR0YXJnZXQuYXR0cignaWQnKS5odW1hbml6ZSgpO1xuICAgICAgICBtZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIGFsZXJ0KFwiRXJyb3IgaW4gXCIgKyB3aGVyZSArIFwiXFxuXFxuXCIgKyBuYW1lICsgXCJcXG5cXG5cIiArIG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBRdWVzdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5xdWlja0FkZFdpdGhFbnRlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKChldmVudC5rZXlDb2RlICE9IG51bGwpICYmIGV2ZW50LmtleUNvZGUgIT09IDEzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYWRkT3B0aW9uKCk7XG4gIH07XG5cbiAgUXVlc3Rpb25FZGl0Vmlldy5wcm90b3R5cGUucXVpY2tGb2N1c1ZhbHVlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAoKGV2ZW50LmtleUNvZGUgIT0gbnVsbCkgJiYgZXZlbnQua2V5Q29kZSAhPT0gMTMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gJChldmVudC50YXJnZXQpLnBhcmVudCgpLmZpbmQoXCIub3B0aW9uX3ZhbHVlXCIpLmZvY3VzKCk7XG4gIH07XG5cbiAgUXVlc3Rpb25FZGl0Vmlldy5wcm90b3R5cGUudGVtcGxhdGVGaWxsID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgaW5kZXgsIG9wdGlvblRlbXBsYXRlcztcbiAgICBpbmRleCA9ICQoZXZlbnQudGFyZ2V0KS5maW5kKFwib3B0aW9uOnNlbGVjdGVkXCIpLmF0dHIoJ2RhdGEtaW5kZXgnKTtcbiAgICBvcHRpb25UZW1wbGF0ZXMgPSBUYW5nZXJpbmUudGVtcGxhdGVzLmdldChcIm9wdGlvblRlbXBsYXRlc1wiKTtcbiAgICBpZiAob3B0aW9uVGVtcGxhdGVzW2luZGV4XSAhPSBudWxsKSB7XG4gICAgICB0aGlzLnF1ZXN0aW9uLnNldChcIm9wdGlvbnNcIiwgb3B0aW9uVGVtcGxhdGVzW2luZGV4XS5vcHRpb25zKTtcbiAgICAgIHRoaXMuJGVsLmZpbmQoJyNvcHRpb25fbGlzdF93cmFwcGVyJykuaHRtbCh0aGlzLmdldE9wdGlvbkxpc3QoKSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBRdWVzdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5nZXRPcHRpb25MaXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGh0bWwsIGksIGosIGxlbiwgb3B0aW9uLCBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSB0aGlzLnF1ZXN0aW9uLmdldChcIm9wdGlvbnNcIik7XG4gICAgaHRtbCA9IFwiPGgyPk9wdGlvbnM8L2gyPiA8ZGl2IGNsYXNzPSdtZW51X2JveCc+IDx1bCBpZD0nb3B0aW9uX2xpc3QnPlwiO1xuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSBvcHRpb25zLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgb3B0aW9uID0gb3B0aW9uc1tpXTtcbiAgICAgIGh0bWwgKz0gXCI8bGkgY2xhc3M9J3F1ZXN0aW9uJz4gPHRhYmxlPjx0cj48dGQ+IDxpbWcgc3JjPSdpbWFnZXMvaWNvbl9kcmFnLnBuZycgY2xhc3M9J3NvcnRhYmxlX2hhbmRsZSc+IDwvdGQ+IDx0ZD4gPGRpdiBzdHlsZT0nZGlzcGxheTogYmxvY2s7Jz4gPGRpdiBjbGFzcz0nb3B0aW9uX2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGNsYXNzPSdlZGl0JyBmb3I9J29wdGlvbnMuXCIgKyBpICsgXCIubGFiZWwnPkxhYmVsPC9sYWJlbD4gPGlucHV0IGlkPSdvcHRpb25zLlwiICsgaSArIFwiLmxhYmVsJyB2YWx1ZT0nXCIgKyAoXy5lc2NhcGUob3B0aW9uLmxhYmVsKSkgKyBcIicgcGxhY2Vob2xkZXI9J09wdGlvbiBsYWJlbCcgY2xhc3M9J29wdGlvbl9sYWJlbCc+PGJyPiA8bGFiZWwgY2xhc3M9J2VkaXQnIGZvcj0nb3B0aW9ucy5cIiArIGkgKyBcIi52YWx1ZScgdGl0bGU9J0FsbG93ZWQgY2hhcmFjdGVycyYjNTg7IEEtWiwgYS16LCAwLTksIGFuZCB1bmRlcnNjb3Jlcy4nPlZhbHVlPC9sYWJlbD4gPGlucHV0IGlkPSdvcHRpb25zLlwiICsgaSArIFwiLnZhbHVlJyB2YWx1ZT0nXCIgKyAoXy5lc2NhcGUob3B0aW9uLnZhbHVlKSkgKyBcIicgcGxhY2Vob2xkZXI9J09wdGlvbiB2YWx1ZScgY2xhc3M9J29wdGlvbl92YWx1ZSc+PGJyPiA8L2Rpdj4gPGltZyBzcmM9J2ltYWdlcy9pY29uX2RlbGV0ZS5wbmcnIGNsYXNzPSdkZWxldGVfb3B0aW9uJyBkYXRhLWluZGV4PSdcIiArIGkgKyBcIic+IDxkaXYgY2xhc3M9J2NvbmZpcm1hdGlvbiBkZWxldGVfY29uZmlybV9cIiArIGkgKyBcIic+IDxidXR0b24gY2xhc3M9J2RlbGV0ZV9kZWxldGUgY29tbWFuZF9yZWQnIGRhdGEtaW5kZXg9J1wiICsgaSArIFwiJz5EZWxldGU8L2J1dHRvbj4gPGJ1dHRvbiBkYXRhLWluZGV4PSdcIiArIGkgKyBcIicgY2xhc3M9J2RlbGV0ZV9jYW5jZWwgY29tbWFuZCc+Q2FuY2VsPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC90ZD48L3RyPjwvdGFibGU+IDwvbGk+XCI7XG4gICAgfVxuICAgIHJldHVybiBodG1sICs9IFwiPC91bD4gPGJ1dHRvbiBjbGFzcz0nYWRkX29wdGlvbiBjb21tYW5kJz5BZGQgb3B0aW9uPC9idXR0b24+IDwvZGl2PlwiO1xuICB9O1xuXG4gIFF1ZXN0aW9uRWRpdFZpZXcucHJvdG90eXBlLmFkZE9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBvcHRpb25MaXN0RWxlbWVudHMsIG9wdGlvbnM7XG4gICAgdGhpcy51cGRhdGVNb2RlbCgpO1xuICAgIG9wdGlvbnMgPSB0aGlzLnF1ZXN0aW9uLmdldChcIm9wdGlvbnNcIik7XG4gICAgb3B0aW9ucy5wdXNoKHtcbiAgICAgIGxhYmVsOiBcIlwiLFxuICAgICAgdmFsdWU6IFwiXCJcbiAgICB9KTtcbiAgICB0aGlzLnF1ZXN0aW9uLnNldChcIm9wdGlvbnNcIiwgb3B0aW9ucyk7XG4gICAgdGhpcy5yZWZyZXNoT3B0aW9uTGlzdCgpO1xuICAgIG9wdGlvbkxpc3RFbGVtZW50cyA9IHRoaXMuJGVsLmZpbmQoXCIjb3B0aW9uX2xpc3Rfd3JhcHBlciBsaVwiKTtcbiAgICBpZiAob3B0aW9uTGlzdEVsZW1lbnRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuICQob3B0aW9uTGlzdEVsZW1lbnRzLmxhc3QoKSkuc2Nyb2xsVG8oKS5maW5kKFwiaW5wdXQ6Zmlyc3RcIikuZm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgUXVlc3Rpb25FZGl0Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFzc2Vzc21lbnROYW1lLCBjaGVja09yUmFkaW8sIGN1c3RvbVZhbGlkYXRpb25Db2RlLCBjdXN0b21WYWxpZGF0aW9uTWVzc2FnZSwgZGlzcGxheUNvZGUsIGhpbnQsIGksIGosIGxlbiwgbGlua2VkR3JpZFNjb3JlLCBuYW1lLCBvcHRpb24sIG9wdGlvbkhUTUwsIG9wdGlvblRlbXBsYXRlcywgb3B0aW9ucywgcHJvbXB0LCBza2lwTG9naWMsIHNraXBwYWJsZSwgc3VidGVzdE5hbWUsIHR5cGU7XG4gICAgYXNzZXNzbWVudE5hbWUgPSB0aGlzLmFzc2Vzc21lbnQuZXNjYXBlKFwibmFtZVwiKTtcbiAgICBzdWJ0ZXN0TmFtZSA9IHRoaXMuc3VidGVzdC5lc2NhcGUoXCJuYW1lXCIpO1xuICAgIG5hbWUgPSB0aGlzLnF1ZXN0aW9uLmdldEVzY2FwZWRTdHJpbmcoXCJuYW1lXCIpO1xuICAgIHByb21wdCA9IHRoaXMucXVlc3Rpb24uZ2V0RXNjYXBlZFN0cmluZyhcInByb21wdFwiKTtcbiAgICBoaW50ID0gdGhpcy5xdWVzdGlvbi5nZXRFc2NhcGVkU3RyaW5nKFwiaGludFwiKTtcbiAgICBza2lwTG9naWMgPSB0aGlzLnF1ZXN0aW9uLmdldEVzY2FwZWRTdHJpbmcoXCJza2lwTG9naWNcIik7XG4gICAgY3VzdG9tVmFsaWRhdGlvbkNvZGUgPSB0aGlzLnF1ZXN0aW9uLmdldEVzY2FwZWRTdHJpbmcoXCJjdXN0b21WYWxpZGF0aW9uQ29kZVwiKTtcbiAgICBjdXN0b21WYWxpZGF0aW9uTWVzc2FnZSA9IHRoaXMucXVlc3Rpb24uZ2V0RXNjYXBlZFN0cmluZyhcImN1c3RvbVZhbGlkYXRpb25NZXNzYWdlXCIpO1xuICAgIGRpc3BsYXlDb2RlID0gdGhpcy5xdWVzdGlvbi5nZXRTdHJpbmcoXCJkaXNwbGF5Q29kZVwiKTtcbiAgICB0eXBlID0gdGhpcy5xdWVzdGlvbi5nZXQoXCJ0eXBlXCIpO1xuICAgIG9wdGlvbnMgPSB0aGlzLnF1ZXN0aW9uLmdldChcIm9wdGlvbnNcIik7XG4gICAgbGlua2VkR3JpZFNjb3JlID0gdGhpcy5xdWVzdGlvbi5nZXROdW1iZXIoXCJsaW5rZWRHcmlkU2NvcmVcIik7XG4gICAgc2tpcHBhYmxlID0gdGhpcy5xdWVzdGlvbi5nZXRCb29sZWFuKFwic2tpcHBhYmxlXCIpO1xuICAgIGNoZWNrT3JSYWRpbyA9IHR5cGUgPT09IFwibXVsdGlwbGVcIiA/IFwiY2hlY2tib3hcIiA6IFwicmFkaW9cIjtcbiAgICB0aGlzLiRlbC5odG1sKFwiPGJ1dHRvbiBjbGFzcz0nYmFjayBuYXZpZ2F0aW9uJz5CYWNrPC9idXR0b24+IDxoMT5RdWVzdGlvbiBFZGl0b3I8L2gxPiA8dGFibGUgY2xhc3M9J2Jhc2ljX2luZm8nPiA8dHI+IDx0aD5TdWJ0ZXN0PC90aD4gPHRkPlwiICsgc3VidGVzdE5hbWUgKyBcIjwvdGQ+IDwvdHI+IDx0cj4gPHRoPkFzc2Vzc21lbnQ8L3RoPiA8dGQ+XCIgKyBhc3Nlc3NtZW50TmFtZSArIFwiPC90ZD4gPC90cj4gPC90YWJsZT4gPGJ1dHRvbiBjbGFzcz0nZG9uZSBjb21tYW5kJz5Eb25lPC9idXR0b24+IDxkaXYgY2xhc3M9J2VkaXRfZm9ybSc+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nbmFtZSc+VmFyaWFibGUgbmFtZTwvbGFiZWw+IDxpbnB1dCBpZD0nbmFtZScgdHlwZT0ndGV4dCcgdmFsdWU9J1wiICsgbmFtZSArIFwiJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0ncHJvbXB0Jz5Qcm9tcHQ8L2xhYmVsPiA8aW5wdXQgaWQ9J3Byb21wdCcgdHlwZT0ndGV4dCcgdmFsdWU9J1wiICsgcHJvbXB0ICsgXCInPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdoaW50Jz5Ob3RlIHRvIGVudW1lcmF0b3I8L2xhYmVsPiA8aW5wdXQgaWQ9J2hpbnQnIHR5cGU9J3RleHQnIHZhbHVlPSdcIiArIGhpbnQgKyBcIic+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3NraXBfbG9naWMnIHRpdGxlPSdUaGlzIHN0YXRlbWVudCB3aWxsIGJlIHNraXBlZCBpZiBpdCBldmFsdWF0ZXMgdG8gdHJ1ZS4gZXhhbXBsZTogUmVzdWx0T2ZRdWVzdGlvbihcXFwibWF6ZTFcXFwiKSBpc250IFxcXCIyXFxcIiBFeGFtcGxlIDI6IFxcXCJyZWRcXFwiIGluIFJlc3VsdE9mTXVsdGlwbGUoXFxcImZhdmVfY29sb3JzXFxcIiknPlNraXAgaWY8L2xhYmVsPiA8dGV4dGFyZWEgcm93cz0nMicgaWQ9J3NraXBfbG9naWMnPlwiICsgc2tpcExvZ2ljICsgXCI8L3RleHRhcmVhPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8bGFiZWw+Q3VzdG9tIHZhbGlkYXRpb248L2xhYmVsPiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J2N1c3RvbV92YWxpZGF0aW9uX2NvZGUnIHRpdGxlPSdJbnRlbmRlZCBmb3Igb3BlbiBxdWVzdGlvbnMuIFRoaXMgY29kZSBzaG91bGQgZXZhbHVhdGUgdG8gdHJ1ZSBvciBmYWxzZS4gRmFsc2Ugd2lsbCB0cmlnZ2VyIGFuIGVycm9yIG1lc3NhZ2UgZm9yIHRoaXMgcXVlc3Rpb24uIEUuZy4gQGFuc3dlciA9PSBcXFwiMVxcXCIgd2lsbCBldmFsdWF0ZSB0byBmYWxzZSBmb3IgYW55IHZhbHVlIG90aGVyIHRoYW4gMS4nPlZhbGlkIHdoZW48L2xhYmVsPiA8aW5wdXQgaWQ9J2N1c3RvbV92YWxpZGF0aW9uX2NvZGUnIHR5cGU9J3RleHQnIHZhbHVlPSdcIiArIGN1c3RvbVZhbGlkYXRpb25Db2RlICsgXCInPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdjdXN0b21fdmFsaWRhdGlvbl9tZXNzYWdlJz5FcnJvciBtZXNzYWdlPC9sYWJlbD4gPGlucHV0IGlkPSdjdXN0b21fdmFsaWRhdGlvbl9tZXNzYWdlJyB0eXBlPSd0ZXh0JyB2YWx1ZT0nXCIgKyBjdXN0b21WYWxpZGF0aW9uTWVzc2FnZSArIFwiJz4gPC9kaXY+IDwvZGl2Pjxicj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J2Rpc3BsYXlfY29kZScgdGl0bGU9J1RoaXMgQ29mZmVlU2NyaXB0IGNvZGUgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoaXMgcXVlc3Rpb24gaXMgc2hvd24uIFRoaXMgb3B0aW9uIG1heSBvbmx5IGJlIHVzZWQgd2hlbiBGb2N1cyBNb2RlIGlzIG9uLic+QWN0aW9uIG9uIGRpc3BsYXk8L2xhYmVsPiA8dGV4dGFyZWEgaWQ9J2Rpc3BsYXlfY29kZScgcm93cz0nMic+XCIgKyBkaXNwbGF5Q29kZSArIFwiPC90ZXh0YXJlYT4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbD5Ta2lwcGFibGU8L2xhYmVsPiA8ZGl2IGlkPSdza2lwX3JhZGlvJyBjbGFzcz0nYnV0dG9uc2V0Jz4gPGxhYmVsIGZvcj0nc2tpcF90cnVlJz5ZZXM8L2xhYmVsPjxpbnB1dCBuYW1lPSdza2lwcGFibGUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZScgaWQ9J3NraXBfdHJ1ZScgXCIgKyAoc2tpcHBhYmxlID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8bGFiZWwgZm9yPSdza2lwX2ZhbHNlJz5ObzwvbGFiZWw+PGlucHV0IG5hbWU9J3NraXBwYWJsZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZScgaWQ9J3NraXBfZmFsc2UnIFwiICsgKCFza2lwcGFibGUgPyAnY2hlY2tlZCcgOiB2b2lkIDApICsgXCI+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdsaW5rZWRfZ3JpZF9zY29yZSc+SXRlbXMgYXR0ZW1wdGVkIHJlcXVpcmVkIG9uIGxpbmtlZCBncmlkPC9sYWJlbD4gPGlucHV0IGlkPSdsaW5rZWRfZ3JpZF9zY29yZScgdHlwZT0nbnVtYmVyJyB2YWx1ZT0nXCIgKyBsaW5rZWRHcmlkU2NvcmUgKyBcIic+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZScgaWQ9J3F1ZXN0aW9uX3R5cGUnIGNsYXNzPSdxdWVzdGlvbl90eXBlJz4gPGxhYmVsPlF1ZXN0aW9uIFR5cGU8L2xhYmVsPiA8ZGl2IGNsYXNzPSdidXR0b25zZXQnPiA8bGFiZWwgZm9yPSdzaW5nbGUnPnNpbmdsZTwvbGFiZWw+IDxpbnB1dCBpZD0nc2luZ2xlJyBuYW1lPSd0eXBlJyB0eXBlPSdyYWRpbycgdmFsdWU9J3NpbmdsZScgXCIgKyAodHlwZSA9PT0gJ3NpbmdsZScgPyAnY2hlY2tlZCcgOiB2b2lkIDApICsgXCI+IDxsYWJlbCBmb3I9J211bHRpcGxlJz5tdWx0aXBsZTwvbGFiZWw+IDxpbnB1dCBpZD0nbXVsdGlwbGUnIG5hbWU9J3R5cGUnICB0eXBlPSdyYWRpbycgdmFsdWU9J211bHRpcGxlJyBcIiArICh0eXBlID09PSAnbXVsdGlwbGUnID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8bGFiZWwgZm9yPSdvcGVuJz5vcGVuPC9sYWJlbD4gPGlucHV0IGlkPSdvcGVuJyBuYW1lPSd0eXBlJyAgdHlwZT0ncmFkaW8nIHZhbHVlPSdvcGVuJyBcIiArICh0eXBlID09PSAnb3BlbicgPyAnY2hlY2tlZCcgOiB2b2lkIDApICsgXCI+IDwvZGl2PiA8L2Rpdj5cIik7XG4gICAgaWYgKHR5cGUgIT09IFwib3BlblwiKSB7XG4gICAgICBvcHRpb25IVE1MID0gXCI8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3F1ZXN0aW9uX3RlbXBsYXRlX3NlbGVjdCc+RmlsbCBmcm9tIHRlbXBsYXRlPC9sYWJlbD48YnI+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gPHNlbGVjdCBpZD0ncXVlc3Rpb25fdGVtcGxhdGVfc2VsZWN0JyBjbGFzcz0nb3B0aW9uX3NlbGVjdCc+IDxvcHRpb24gc2VsZWN0ZWQ9J3NlbGVjdGVkJz5TZWxlY3QgdGVtcGxhdGU8L29wdGlvbj5cIjtcbiAgICAgIG9wdGlvblRlbXBsYXRlcyA9IFRhbmdlcmluZS50ZW1wbGF0ZXMuZ2V0KFwib3B0aW9uVGVtcGxhdGVzXCIpO1xuICAgICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IG9wdGlvblRlbXBsYXRlcy5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgICAgb3B0aW9uID0gb3B0aW9uVGVtcGxhdGVzW2ldO1xuICAgICAgICBvcHRpb25IVE1MICs9IFwiPG9wdGlvbiBkYXRhLWluZGV4PSdcIiArIGkgKyBcIicgY2xhc3M9J3RlbXBsYXRlX29wdGlvbic+XCIgKyBvcHRpb24ubmFtZSArIFwiPC9vcHRpb24+XCI7XG4gICAgICB9XG4gICAgICBvcHRpb25IVE1MICs9IFwiPC9zZWxlY3Q+IDwvZGl2PiA8ZGl2IGlkPSdvcHRpb25fbGlzdF93cmFwcGVyJz5cIiArICh0aGlzLmdldE9wdGlvbkxpc3QoKSkgKyBcIjwvZGl2PlwiO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kKG9wdGlvbkhUTUwpO1xuICAgICAgdGhpcy5yZWZyZXNoU29ydGFibGUoKTtcbiAgICB9XG4gICAgdGhpcy4kZWwuYXBwZW5kKFwiPGJ1dHRvbiBjbGFzcz0nZG9uZSBjb21tYW5kJz5Eb25lPC9idXR0b24+IDwvZGl2PlwiKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgUXVlc3Rpb25FZGl0Vmlldy5wcm90b3R5cGUucmVmcmVzaE9wdGlvbkxpc3QgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRlbC5maW5kKFwiI29wdGlvbl9saXN0X3dyYXBwZXJcIikuaHRtbCh0aGlzLmdldE9wdGlvbkxpc3QoKSk7XG4gICAgcmV0dXJuIHRoaXMucmVmcmVzaFNvcnRhYmxlKCk7XG4gIH07XG5cbiAgUXVlc3Rpb25FZGl0Vmlldy5wcm90b3R5cGUucmVmcmVzaFNvcnRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjb3B0aW9uX2xpc3RcIikuc29ydGFibGUoe1xuICAgICAgaGFuZGxlOiAnLnNvcnRhYmxlX2hhbmRsZScsXG4gICAgICBzdGFydDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgIHJldHVybiB1aS5pdGVtLmFkZENsYXNzKFwiZHJhZ19zaGFkb3dcIik7XG4gICAgICB9LFxuICAgICAgc3RvcDogZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgIHJldHVybiB1aS5pdGVtLnJlbW92ZUNsYXNzKFwiZHJhZ19zaGFkb3dcIik7XG4gICAgICB9LFxuICAgICAgdXBkYXRlOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVNb2RlbCgpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBRdWVzdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5oaWphY2tFbnRlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LndoaWNoID09PSAxMykge1xuICAgICAgdGhpcy4kZWwuZmluZChldmVudC50YXJnZXQpLmJsdXIoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgUXVlc3Rpb25FZGl0Vmlldy5wcm90b3R5cGUuY2hhbmdlUXVlc3Rpb25UeXBlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldDtcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgIGlmICgoJHRhcmdldC52YWwoKSAhPT0gXCJvcGVuXCIgJiYgdGhpcy5xdWVzdGlvbi5nZXQoXCJ0eXBlXCIpID09PSBcIm9wZW5cIikgfHwgKCR0YXJnZXQudmFsKCkgPT09IFwib3BlblwiICYmIHRoaXMucXVlc3Rpb24uZ2V0KFwidHlwZVwiKSAhPT0gXCJvcGVuXCIpKSB7XG4gICAgICB0aGlzLnVwZGF0ZU1vZGVsKCk7XG4gICAgICB0aGlzLnF1ZXN0aW9uLnNldChcInR5cGVcIiwgJHRhcmdldC52YWwoKSk7XG4gICAgICB0aGlzLnF1ZXN0aW9uLnNldChcIm9wdGlvbnNcIiwgW10pO1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICB9O1xuXG4gIFF1ZXN0aW9uRWRpdFZpZXcucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5hY3Rpdml0eSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2aXR5ID0gXCJzYXZpbmdcIjtcbiAgICB0aGlzLnVwZGF0ZU1vZGVsKCk7XG4gICAgdGhpcy5xdWVzdGlvbi5zYXZlKG51bGwsIHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMuYWN0aXZpdHkgPSBudWxsO1xuICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiUXVlc3Rpb24gU2F2ZWRcIik7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KF90aGlzLnRpbWVyKTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMudGltZXIgPSBzZXRUaW1lb3V0KF90aGlzLmdvQmFjaywgNTAwKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMuYWN0aXZpdHkgPSBudWxsO1xuICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIlNhdmUgZXJyb3JcIik7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBRdWVzdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5nb0JhY2sgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2xhc3NPck5vdDtcbiAgICBpZiAodGhpcy5xdWVzdGlvbi5oYXMoXCJjdXJyaWN1bHVtSWRcIikpIHtcbiAgICAgIGNsYXNzT3JOb3QgPSAnY2xhc3MvJztcbiAgICB9XG4gICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZSgoY2xhc3NPck5vdCB8fCBcIlwiKSArIFwic3VidGVzdC9cIiArICh0aGlzLnF1ZXN0aW9uLmdldCgnc3VidGVzdElkJykpLCB0cnVlKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgUXVlc3Rpb25FZGl0Vmlldy5wcm90b3R5cGUudXBkYXRlTW9kZWwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgaiwgbGFiZWwsIGxhc3QsIGxlbiwgbGksIG9wdGlvbkxpc3RFbGVtZW50cywgb3B0aW9ucywgdmFsdWU7XG4gICAgdGhpcy5xdWVzdGlvbi5zZXQoe1xuICAgICAgXCJwcm9tcHRcIjogdGhpcy4kZWwuZmluZChcIiNwcm9tcHRcIikudmFsKCksXG4gICAgICBcIm5hbWVcIjogdGhpcy4kZWwuZmluZChcIiNuYW1lXCIpLnZhbCgpLnNhZmV0eURhbmNlKCksXG4gICAgICBcImhpbnRcIjogdGhpcy4kZWwuZmluZChcIiNoaW50XCIpLnZhbCgpLFxuICAgICAgXCJza2lwTG9naWNcIjogdGhpcy4kZWwuZmluZChcIiNza2lwX2xvZ2ljXCIpLnZhbCgpLFxuICAgICAgXCJsaW5rZWRHcmlkU2NvcmVcIjogcGFyc2VJbnQodGhpcy4kZWwuZmluZChcIiNsaW5rZWRfZ3JpZF9zY29yZVwiKS52YWwoKSksXG4gICAgICBcInR5cGVcIjogdGhpcy4kZWwuZmluZChcIiNxdWVzdGlvbl90eXBlIGlucHV0OmNoZWNrZWRcIikudmFsKCksXG4gICAgICBcInNraXBwYWJsZVwiOiB0aGlzLiRlbC5maW5kKFwiI3NraXBfcmFkaW8gaW5wdXQ6cmFkaW9bbmFtZT1za2lwcGFibGVdOmNoZWNrZWRcIikudmFsKCkgPT09IFwidHJ1ZVwiLFxuICAgICAgXCJjdXN0b21WYWxpZGF0aW9uQ29kZVwiOiB0aGlzLiRlbC5maW5kKFwiI2N1c3RvbV92YWxpZGF0aW9uX2NvZGVcIikudmFsKCksXG4gICAgICBcImN1c3RvbVZhbGlkYXRpb25NZXNzYWdlXCI6IHRoaXMuJGVsLmZpbmQoXCIjY3VzdG9tX3ZhbGlkYXRpb25fbWVzc2FnZVwiKS52YWwoKSxcbiAgICAgIFwiZGlzcGxheUNvZGVcIjogdGhpcy4kZWwuZmluZChcIiNkaXNwbGF5X2NvZGVcIikudmFsKClcbiAgICB9KTtcbiAgICBvcHRpb25zID0gW107XG4gICAgaSA9IDA7XG4gICAgb3B0aW9uTGlzdEVsZW1lbnRzID0gdGhpcy4kZWwuZmluZChcIiNvcHRpb25fbGlzdCBsaVwiKTtcbiAgICBmb3IgKGogPSAwLCBsZW4gPSBvcHRpb25MaXN0RWxlbWVudHMubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIGxpID0gb3B0aW9uTGlzdEVsZW1lbnRzW2pdO1xuICAgICAgbGFiZWwgPSAkKGxpKS5maW5kKFwiLm9wdGlvbl9sYWJlbFwiKS52YWwoKTtcbiAgICAgIHZhbHVlID0gJChsaSkuZmluZChcIi5vcHRpb25fdmFsdWVcIikudmFsKCkuc2FmZXR5RGFuY2UoKTtcbiAgICAgIGlmICgobGFiZWwgIT0gbnVsbCkgfHwgKHZhbHVlICE9IG51bGwpKSB7XG4gICAgICAgIG9wdGlvbnNbaV0gPSB7XG4gICAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9O1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgbGFzdCA9IG9wdGlvbnMucG9wKCk7XG4gICAgICBpZiAobGFzdC5sYWJlbCAhPT0gXCJcIiAmJiBsYXN0LnZhbHVlICE9PSBcIlwiKSB7XG4gICAgICAgIG9wdGlvbnMucHVzaChsYXN0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucXVlc3Rpb24uc2V0KFwib3B0aW9uc1wiLCBvcHRpb25zKTtcbiAgfTtcblxuICBRdWVzdGlvbkVkaXRWaWV3LnByb3RvdHlwZS5zaG93RGVsZXRlQ29uZmlybSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIuZGVsZXRlX2NvbmZpcm1fXCIgKyAodGhpcy4kZWwuZmluZChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtaW5kZXgnKSkpLmZhZGVJbigyNTApO1xuICB9O1xuXG4gIFF1ZXN0aW9uRWRpdFZpZXcucHJvdG90eXBlLmhpZGVEZWxldGVDb25maXJtID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5kZWxldGVfY29uZmlybV9cIiArICh0aGlzLiRlbC5maW5kKGV2ZW50LnRhcmdldCkuYXR0cignZGF0YS1pbmRleCcpKSkuZmFkZU91dCgyNTApO1xuICB9O1xuXG4gIFF1ZXN0aW9uRWRpdFZpZXcucHJvdG90eXBlLmRlbGV0ZU9wdGlvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIG9wdGlvbnM7XG4gICAgdGhpcy51cGRhdGVNb2RlbCgpO1xuICAgIG9wdGlvbnMgPSB0aGlzLnF1ZXN0aW9uLmdldChcIm9wdGlvbnNcIik7XG4gICAgb3B0aW9ucy5zcGxpY2UodGhpcy4kZWwuZmluZChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtaW5kZXgnKSwgMSk7XG4gICAgdGhpcy5xdWVzdGlvbi5zZXQoXCJvcHRpb25zXCIsIG9wdGlvbnMpO1xuICAgIHRoaXMucmVmcmVzaE9wdGlvbkxpc3QoKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgcmV0dXJuIFF1ZXN0aW9uRWRpdFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBRdWVzdGlvbnNFZGl0VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcInF1ZXN0aW9uc19lZGl0X3ZpZXdcIlxuICB0YWdOYW1lIDogXCJ1bFwiXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cbiAgICBAdmlld3MgPSBbXVxuICAgIEBxdWVzdGlvbnMgPSBvcHRpb25zLnF1ZXN0aW9uc1xuXG5cbiAgb25DbG9zZTogLT5cbiAgICBAY2xvc2VWaWV3cygpXG5cbiAgY2xvc2VWaWV3czogLT5cbiAgICBmb3IgdmlldyBpbiBAdmlld3NcbiAgICAgIHZpZXcuY2xvc2UoKVxuXG4gIHJlbmRlcjogPT5cblxuICAgIEBjbG9zZVZpZXdzKClcbiAgICBmb3IgcXVlc3Rpb24sIGkgaW4gQHF1ZXN0aW9ucy5tb2RlbHNcbiAgICAgIHZpZXcgPSBuZXcgUXVlc3Rpb25zRWRpdExpc3RFbGVtZW50Vmlld1xuICAgICAgICBcInF1ZXN0aW9uXCIgOiBxdWVzdGlvblxuICAgICAgQHZpZXdzLnB1c2ggdmlld1xuICAgICAgdmlldy5vbiBcImRlbGV0ZWRcIiwgQHJlbmRlclxuICAgICAgdmlldy5vbiBcImR1cGxpY2F0ZVwiLCA9PlxuICAgICAgICBAcmVmZXRjaEFuZFJlbmRlcigpXG4gICAgICB2aWV3Lm9uIFwicXVlc3Rpb24tZWRpdFwiLCAocXVlc3Rpb25JZCkgPT4gQHRyaWdnZXIgXCJxdWVzdGlvbi1lZGl0XCIsIHF1ZXN0aW9uSWRcbiAgICAgIHZpZXcucmVuZGVyKClcbiAgICAgIEAkZWwuYXBwZW5kIHZpZXcuZWxcblxuICAgICMgbWFrZSBpdCBzb3J0YWJsZVxuICAgIEAkZWwuc29ydGFibGVcbiAgICAgIGZvcmNlSGVscGVyU2l6ZTogdHJ1ZVxuICAgICAgZm9yY2VQbGFjZWhvbGRlclNpemU6IHRydWVcbiAgICAgIGhhbmRsZSA6ICcuc29ydGFibGVfaGFuZGxlJ1xuICAgICAgc3RhcnQ6IChldmVudCwgdWkpIC0+IHVpLml0ZW0uYWRkQ2xhc3MgXCJkcmFnX3NoYWRvd1wiXG4gICAgICBzdG9wOiAgKGV2ZW50LCB1aSkgLT4gdWkuaXRlbS5yZW1vdmVDbGFzcyBcImRyYWdfc2hhZG93XCJcblxuICAgICAgdXBkYXRlIDogKGV2ZW50LCB1aSkgPT5cbiAgICAgICAgaWRMaXN0ID0gKCQobGkpLmF0dHIoXCJkYXRhLWlkXCIpIGZvciBsaSBpbiBAJGVsLmZpbmQoXCJsaS5xdWVzdGlvbl9saXN0X2VsZW1lbnRcIikpXG4gICAgICAgIGluZGV4ID0gMFxuICAgICAgICBuZXdEb2NzID0gW11cbiAgICAgICAgZm9yIGlkLCBpbmRleCBpbiBpZExpc3RcbiAgICAgICAgICBuZXdEb2MgPSBAcXVlc3Rpb25zLmdldChpZCkuYXR0cmlidXRlc1xuICAgICAgICAgIG5ld0RvY1snb3JkZXInXSA9IGluZGV4XG4gICAgICAgICAgbmV3RG9jcy5wdXNoIG5ld0RvY1xuICAgICAgICByZXF1ZXN0RGF0YSA9IFwiZG9jc1wiIDogbmV3RG9jc1xuICAgICAgICAkLmFqYXhcbiAgICAgICAgICB0eXBlIDogXCJQT1NUXCJcbiAgICAgICAgICBjb250ZW50VHlwZSA6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOFwiXG4gICAgICAgICAgZGF0YVR5cGUgOiBcImpzb25cIlxuICAgICAgICAgIHVybCA6IFRhbmdlcmluZS5zZXR0aW5ncy51cmxCdWxrRG9jcygpXG4gICAgICAgICAgZGF0YSA6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3REYXRhKVxuICAgICAgICAgIHN1Y2Nlc3MgOiAocmVzcG9uc2VzKSA9PiBAcmVmZXRjaEFuZFJlbmRlcigpXG4gICAgICAgICAgZXJyb3IgOiAtPiBVdGlscy5taWRBbGVydCBcIkR1cGxpY2F0aW9uIGVycm9yXCJcblxuICByZWZldGNoQW5kUmVuZGVyOiAtPlxuICAgIGFueVF1ZXN0aW9uID0gQHF1ZXN0aW9ucy5tb2RlbHNbMF1cbiAgICBAcXVlc3Rpb25zLmZldGNoIFxuICAgICAga2V5OiBcInFcIiArIGFueVF1ZXN0aW9uLmdldChcImFzc2Vzc21lbnRJZFwiKVxuICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgQHF1ZXN0aW9ucyA9IG5ldyBRdWVzdGlvbnMoQHF1ZXN0aW9ucy53aGVyZSB7c3VidGVzdElkIDogYW55UXVlc3Rpb24uZ2V0KFwic3VidGVzdElkXCIpIH0pXG4gICAgICAgIEByZW5kZXIgdHJ1ZVxuXG4iLCJ2YXIgUXVlc3Rpb25zRWRpdFZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuUXVlc3Rpb25zRWRpdFZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoUXVlc3Rpb25zRWRpdFZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFF1ZXN0aW9uc0VkaXRWaWV3KCkge1xuICAgIHRoaXMucmVuZGVyID0gYmluZCh0aGlzLnJlbmRlciwgdGhpcyk7XG4gICAgcmV0dXJuIFF1ZXN0aW9uc0VkaXRWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgUXVlc3Rpb25zRWRpdFZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwicXVlc3Rpb25zX2VkaXRfdmlld1wiO1xuXG4gIFF1ZXN0aW9uc0VkaXRWaWV3LnByb3RvdHlwZS50YWdOYW1lID0gXCJ1bFwiO1xuXG4gIFF1ZXN0aW9uc0VkaXRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMudmlld3MgPSBbXTtcbiAgICByZXR1cm4gdGhpcy5xdWVzdGlvbnMgPSBvcHRpb25zLnF1ZXN0aW9ucztcbiAgfTtcblxuICBRdWVzdGlvbnNFZGl0Vmlldy5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNsb3NlVmlld3MoKTtcbiAgfTtcblxuICBRdWVzdGlvbnNFZGl0Vmlldy5wcm90b3R5cGUuY2xvc2VWaWV3cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBqLCBsZW4sIHJlZiwgcmVzdWx0cywgdmlldztcbiAgICByZWYgPSB0aGlzLnZpZXdzO1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHZpZXcgPSByZWZbal07XG4gICAgICByZXN1bHRzLnB1c2godmlldy5jbG9zZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgUXVlc3Rpb25zRWRpdFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBqLCBsZW4sIHF1ZXN0aW9uLCByZWYsIHZpZXc7XG4gICAgdGhpcy5jbG9zZVZpZXdzKCk7XG4gICAgcmVmID0gdGhpcy5xdWVzdGlvbnMubW9kZWxzO1xuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICBxdWVzdGlvbiA9IHJlZltpXTtcbiAgICAgIHZpZXcgPSBuZXcgUXVlc3Rpb25zRWRpdExpc3RFbGVtZW50Vmlldyh7XG4gICAgICAgIFwicXVlc3Rpb25cIjogcXVlc3Rpb25cbiAgICAgIH0pO1xuICAgICAgdGhpcy52aWV3cy5wdXNoKHZpZXcpO1xuICAgICAgdmlldy5vbihcImRlbGV0ZWRcIiwgdGhpcy5yZW5kZXIpO1xuICAgICAgdmlldy5vbihcImR1cGxpY2F0ZVwiLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZWZldGNoQW5kUmVuZGVyKCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICB2aWV3Lm9uKFwicXVlc3Rpb24tZWRpdFwiLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHF1ZXN0aW9uSWQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMudHJpZ2dlcihcInF1ZXN0aW9uLWVkaXRcIiwgcXVlc3Rpb25JZCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICB2aWV3LnJlbmRlcigpO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kKHZpZXcuZWwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kZWwuc29ydGFibGUoe1xuICAgICAgZm9yY2VIZWxwZXJTaXplOiB0cnVlLFxuICAgICAgZm9yY2VQbGFjZWhvbGRlclNpemU6IHRydWUsXG4gICAgICBoYW5kbGU6ICcuc29ydGFibGVfaGFuZGxlJyxcbiAgICAgIHN0YXJ0OiBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAgICAgcmV0dXJuIHVpLml0ZW0uYWRkQ2xhc3MoXCJkcmFnX3NoYWRvd1wiKTtcbiAgICAgIH0sXG4gICAgICBzdG9wOiBmdW5jdGlvbihldmVudCwgdWkpIHtcbiAgICAgICAgcmV0dXJuIHVpLml0ZW0ucmVtb3ZlQ2xhc3MoXCJkcmFnX3NoYWRvd1wiKTtcbiAgICAgIH0sXG4gICAgICB1cGRhdGU6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQsIHVpKSB7XG4gICAgICAgICAgdmFyIGlkLCBpZExpc3QsIGluZGV4LCBrLCBsZW4xLCBsaSwgbmV3RG9jLCBuZXdEb2NzLCByZXF1ZXN0RGF0YTtcbiAgICAgICAgICBpZExpc3QgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaywgbGVuMSwgcmVmMSwgcmVzdWx0cztcbiAgICAgICAgICAgIHJlZjEgPSB0aGlzLiRlbC5maW5kKFwibGkucXVlc3Rpb25fbGlzdF9lbGVtZW50XCIpO1xuICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChrID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgICAgICAgIGxpID0gcmVmMVtrXTtcbiAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKCQobGkpLmF0dHIoXCJkYXRhLWlkXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgIH0pLmNhbGwoX3RoaXMpO1xuICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICBuZXdEb2NzID0gW107XG4gICAgICAgICAgZm9yIChpbmRleCA9IGsgPSAwLCBsZW4xID0gaWRMaXN0Lmxlbmd0aDsgayA8IGxlbjE7IGluZGV4ID0gKytrKSB7XG4gICAgICAgICAgICBpZCA9IGlkTGlzdFtpbmRleF07XG4gICAgICAgICAgICBuZXdEb2MgPSBfdGhpcy5xdWVzdGlvbnMuZ2V0KGlkKS5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgbmV3RG9jWydvcmRlciddID0gaW5kZXg7XG4gICAgICAgICAgICBuZXdEb2NzLnB1c2gobmV3RG9jKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVxdWVzdERhdGEgPSB7XG4gICAgICAgICAgICBcImRvY3NcIjogbmV3RG9jc1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuICQuYWpheCh7XG4gICAgICAgICAgICB0eXBlOiBcIlBPU1RcIixcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLThcIixcbiAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICAgIHVybDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybEJ1bGtEb2NzKCksXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0RGF0YSksXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZXMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlZmV0Y2hBbmRSZW5kZXIoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIkR1cGxpY2F0aW9uIGVycm9yXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBRdWVzdGlvbnNFZGl0Vmlldy5wcm90b3R5cGUucmVmZXRjaEFuZFJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbnlRdWVzdGlvbjtcbiAgICBhbnlRdWVzdGlvbiA9IHRoaXMucXVlc3Rpb25zLm1vZGVsc1swXTtcbiAgICByZXR1cm4gdGhpcy5xdWVzdGlvbnMuZmV0Y2goe1xuICAgICAga2V5OiBcInFcIiArIGFueVF1ZXN0aW9uLmdldChcImFzc2Vzc21lbnRJZFwiKSxcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMucXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9ucyhfdGhpcy5xdWVzdGlvbnMud2hlcmUoe1xuICAgICAgICAgICAgc3VidGVzdElkOiBhbnlRdWVzdGlvbi5nZXQoXCJzdWJ0ZXN0SWRcIilcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlcih0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFF1ZXN0aW9uc0VkaXRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiIyBQcm92aWRlcyBhbiBcImxpXCIgdGFnIGZvciB0aGUgcXVlc3Rpb25zIGVkaXQgdmlld1xuY2xhc3MgUXVlc3Rpb25zRWRpdExpc3RFbGVtZW50VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcInF1ZXN0aW9uX2xpc3RfZWxlbWVudFwiXG4gIHRhZ05hbWUgOiBcImxpXCJcblxuICBldmVudHM6XG4gICAgJ2NsaWNrIC5lZGl0JyAgICAgICAgOiAnZWRpdCdcbiAgICAnY2xpY2sgLnNob3dfY29weScgICA6ICdzaG93Q29weSdcbiAgICAnY2hhbmdlIC5jb3B5X3NlbGVjdCcgOiAnY29weSdcblxuICAgICdjbGljayAuZGVsZXRlJyAgICAgICAgOiAndG9nZ2xlRGVsZXRlJ1xuICAgICdjbGljayAuZGVsZXRlX2NhbmNlbCcgOiAndG9nZ2xlRGVsZXRlJ1xuICAgICdjbGljayAuZGVsZXRlX2RlbGV0ZScgOiAnZGVsZXRlJ1xuXG5cbiAgc2hvd0NvcHk6IChldmVudCkgLT5cbiAgICAkY29weSA9IEAkZWwuZmluZChcIi5jb3B5X2NvbnRhaW5lclwiKVxuICAgICRjb3B5Lmh0bWwgXCJcbiAgICAgIENvcHkgdG8gPHNlbGVjdCBjbGFzcz0nY29weV9zZWxlY3QnPjxvcHRpb24gZGlzYWJsZWQ9J2Rpc2FibGVkJyBzZWxlY3RlZD0nc2VsZWN0ZWQnPkxvYWRpbmcuLi48L29wdGlvbj48L3NlbGVjdD5cbiAgICBcIlxuICAgIEBnZXRTdXJ2ZXlzKClcblxuICBnZXRTdXJ2ZXlzOiA9PlxuXG4gICAgdXJsID0gXG4gICAgICBUYW5nZXJpbmUuc2V0dGluZ3MudXJsVmlldyhcImdyb3VwXCIsIFwic3VidGVzdHNCeUFzc2Vzc21lbnRJZFwiKVxuXG4gICAgJC5hamF4XG4gICAgICBcInVybFwiICAgICAgICAgOiB1cmxcbiAgICAgIFwidHlwZVwiICAgICAgICA6IFwiUE9TVFwiXG4gICAgICBcImRhdGFUeXBlXCIgICAgOiBcImpzb25cIlxuICAgICAgXCJjb250ZW50VHlwZVwiIDogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgIFwiZGF0YVwiICAgICAgICA6IEpTT04uc3RyaW5naWZ5XG4gICAgICAgIGtleXMgOiBbQHF1ZXN0aW9uLmdldChcImFzc2Vzc21lbnRJZFwiKV1cbiAgICAgIFwic3VjY2Vzc1wiIDogKGRhdGEpID0+XG4gICAgICAgIHN1YnRlc3RzID0gXy5jb21wYWN0KChyb3cudmFsdWUgaWYgcm93LnZhbHVlLnByb3RvdHlwZSA9PSBcInN1cnZleVwiKSBmb3Igcm93IGluIGRhdGEucm93cylcbiAgICAgICAgY29uc29sZS5sb2cgc3VidGVzdHNcbiAgICAgICAgQHBvcHVsYXRlU3VydmV5U2VsZWN0IHN1YnRlc3RzXG5cbiAgcG9wdWxhdGVTdXJ2ZXlTZWxlY3QgOiAoc3VidGVzdHMpIC0+XG4gICAgXG4gICAgc3VidGVzdHMucHVzaCAgICBfaWQgOiAnY2FuY2VsJywgbmFtZSA6IEB0ZXh0LmNhbmNlbF9idXR0b25cbiAgICBzdWJ0ZXN0cy51bnNoaWZ0IF9pZCA6ICcnLCAgICAgICBuYW1lIDogQHRleHQuc2VsZWN0XG5cbiAgICBodG1sT3B0aW9ucyA9IChcIjxvcHRpb24gZGF0YS1zdWJ0ZXN0SWQ9JyN7c3VidGVzdC5faWR9JyAje3N1YnRlc3QuYXR0cnMgfHwgXCJcIn0+I3tzdWJ0ZXN0Lm5hbWV9PC9vcHRpb24+XCIgZm9yIHN1YnRlc3QgaW4gc3VidGVzdHMpLmpvaW4oXCJcIilcbiAgICBAJGVsLmZpbmQoXCIuY29weV9zZWxlY3RcIikuaHRtbCBodG1sT3B0aW9uc1xuXG4gIGNvcHk6IChldmVudCkgPT5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpLmZpbmQoXCJvcHRpb246c2VsZWN0ZWRcIilcbiAgICBzdWJ0ZXN0SWQgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLXN1YnRlc3RJZFwiKVxuICAgIGlmIHN1YnRlc3RJZCA9PSBcImNhbmNlbFwiXG4gICAgICBAJGVsLmZpbmQoXCIuY29weV9jb250YWluZXJcIikuZW1wdHkoKVxuICAgICAgcmV0dXJuXG4gICAgbmV3UXVlc3Rpb24gPSBAcXVlc3Rpb24uY2xvbmUoKVxuICAgIG5ld1F1ZXN0aW9uLnNhdmVcbiAgICAgIFwiX2lkXCIgICAgICAgOiBVdGlscy5ndWlkKClcbiAgICAgIFwic3VidGVzdElkXCIgOiBzdWJ0ZXN0SWRcbiAgICAsXG4gICAgICBzdWNjZXNzOiA9PlxuICAgICAgICBpZiBzdWJ0ZXN0SWQgPT0gQHF1ZXN0aW9uLmdldChcInN1YnRlc3RJZFwiKVxuICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiUXVlc3Rpb24gZHVwbGljYXRlZFwiKVxuICAgICAgICAgIEB0cmlnZ2VyIFwiZHVwbGljYXRlXCIgXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwic3VidGVzdC8je3N1YnRlc3RJZH1cIiwgdHJ1ZSAjIHRoaXMgd2lsbCBndWFyYW50ZWUgdGhhdCBpdCBhc3N1cmVzIHRoZSBvcmRlciBvZiB0aGUgdGFyZ2V0IHN1YnRlc3RcbiAgICAgICAgICBVdGlscy5taWRBbGVydChcIlF1ZXN0aW9uIGNvcGllZCB0byAjeyR0YXJnZXQuaHRtbCgpfVwiKVxuICAgICAgZXJyb3I6IC0+XG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiQ29weSBlcnJvclwiKVxuXG4gIGVkaXQ6IChldmVudCkgLT5cbiAgICBAdHJpZ2dlciBcInF1ZXN0aW9uLWVkaXRcIiwgQHF1ZXN0aW9uLmlkXG4gICAgcmV0dXJuIGZhbHNlXG5cbiAgdG9nZ2xlRGVsZXRlOiAtPlxuICAgIEAkZWwuZmluZChcIi5kZWxldGVfY29uZmlybVwiKS5mYWRlVG9nZ2xlKDI1MClcblxuICBkZWxldGU6IChldmVudCkgLT5cbiAgICBAcXVlc3Rpb24uY29sbGVjdGlvbi5yZW1vdmUoQHF1ZXN0aW9uLmlkKVxuICAgIEBxdWVzdGlvbi5kZXN0cm95KClcbiAgICBAdHJpZ2dlciBcImRlbGV0ZWRcIlxuICAgIHJldHVybiBmYWxzZVxuXG4gIGluaXRpYWxpemU6ICggb3B0aW9ucyApIC0+XG4gICAgQHRleHQgPSBcbiAgICAgIFwiZWRpdFwiICAgICAgICAgIDogdChcIlF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXcuaGVscC5lZGl0XCIpXG4gICAgICBcImRlbGV0ZVwiICAgICAgICA6IHQoXCJRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LmhlbHAuZGVsZXRlXCIpXG4gICAgICBcImNvcHlcIiAgICAgICAgICA6IHQoXCJRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LmhlbHAuY29weV90b1wiKVxuICAgICAgXCJjYW5jZWxfYnV0dG9uXCIgOiB0KFwiUXVlc3Rpb25zRWRpdExpc3RFbGVtZW50Vmlldy5idXR0b24uY2FuY2VsXCIpXG4gICAgICBcImRlbGV0ZV9idXR0b25cIiA6IHQoXCJRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LmJ1dHRvbi5kZWxldGVcIilcbiAgICAgIFwic2VsZWN0XCIgICAgICAgIDogdChcIlF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXcubGFiZWwuc2VsZWN0XCIpXG4gICAgICBcImxvYWRpbmdcIiAgICAgICA6IHQoXCJRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LmxhYmVsLmxvYWRpbmdcIilcbiAgICAgIFwiZGVsZXRlX2NvbmZpcm1cIiA6IHQoXCJRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LmxhYmVsLmRlbGV0ZV9jb25maXJtXCIpXG5cbiAgICBAcXVlc3Rpb24gPSBvcHRpb25zLnF1ZXN0aW9uXG4gICAgQCRlbC5hdHRyKFwiZGF0YS1pZFwiLCBAcXVlc3Rpb24uaWQpXG5cbiAgcmVuZGVyOiAtPlxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPHRhYmxlPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPGltZyBzcmM9J2ltYWdlcy9pY29uX2RyYWcucG5nJyB3aWR0aD0nMzYnIGhlaWdodD0nMzYnIGNsYXNzPSdzb3J0YWJsZV9oYW5kbGUnPlxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPHNwYW4+I3tAcXVlc3Rpb24uZ2V0ICdwcm9tcHQnfTwvc3Bhbj4gPHNwYW4+WzxzbWFsbD4je0BxdWVzdGlvbi5nZXQgJ25hbWUnfSwgI3tAcXVlc3Rpb24uZ2V0ICd0eXBlJ308L3NtYWxsPl08L3NwYW4+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxpbWcgc3JjPSdpbWFnZXMvaWNvbl9lZGl0LnBuZycgd2lkdGg9JzM2JyBoZWlnaHQ9JzM2JyBjbGFzcz0nbGlua19pY29uIGVkaXQnIHRpdGxlPScje0B0ZXh0LmVkaXR9Jz5cbiAgICAgICAgICAgIDxpbWcgc3JjPSdpbWFnZXMvaWNvbl9jb3B5X3RvLnBuZycgd2lkdGg9JzM2JyBoZWlnaHQ9JzM2JyBjbGFzcz0nbGlua19pY29uIHNob3dfY29weScgdGl0bGU9JyN7QHRleHQuY29weX0nPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2NvcHlfY29udGFpbmVyJz48L3NwYW4+XG4gICAgICAgICAgICA8aW1nIHNyYz0naW1hZ2VzL2ljb25fZGVsZXRlLnBuZycgd2lkdGg9JzM2JyBoZWlnaHQ9JzM2JyBjbGFzcz0nbGlua19pY29uIGRlbGV0ZScgdGl0bGU9JyN7QHRleHQuZGVsZXRlfSc+PGJyPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nY29uZmlybWF0aW9uIGRlbGV0ZV9jb25maXJtJz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPiN7QHRleHQuZGVsZXRlX2NvbmZpcm19PGJyPjxidXR0b24gY2xhc3M9J2RlbGV0ZV9kZWxldGUgY29tbWFuZF9yZWQnPkRlbGV0ZTwvYnV0dG9uPjxidXR0b24gY2xhc3M9J2RlbGV0ZV9jYW5jZWwgY29tbWFuZCc+I3tAdGV4dC5jYW5jZWxfYnV0dG9ufTwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGFibGU+XG4gICAgICBcIlxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuIiwidmFyIFF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuUXVlc3Rpb25zRWRpdExpc3RFbGVtZW50VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3KCkge1xuICAgIHRoaXMuY29weSA9IGJpbmQodGhpcy5jb3B5LCB0aGlzKTtcbiAgICB0aGlzLmdldFN1cnZleXMgPSBiaW5kKHRoaXMuZ2V0U3VydmV5cywgdGhpcyk7XG4gICAgcmV0dXJuIFF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcInF1ZXN0aW9uX2xpc3RfZWxlbWVudFwiO1xuXG4gIFF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnRhZ05hbWUgPSBcImxpXCI7XG5cbiAgUXVlc3Rpb25zRWRpdExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdjbGljayAuZWRpdCc6ICdlZGl0JyxcbiAgICAnY2xpY2sgLnNob3dfY29weSc6ICdzaG93Q29weScsXG4gICAgJ2NoYW5nZSAuY29weV9zZWxlY3QnOiAnY29weScsXG4gICAgJ2NsaWNrIC5kZWxldGUnOiAndG9nZ2xlRGVsZXRlJyxcbiAgICAnY2xpY2sgLmRlbGV0ZV9jYW5jZWwnOiAndG9nZ2xlRGVsZXRlJyxcbiAgICAnY2xpY2sgLmRlbGV0ZV9kZWxldGUnOiAnZGVsZXRlJ1xuICB9O1xuXG4gIFF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnNob3dDb3B5ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJGNvcHk7XG4gICAgJGNvcHkgPSB0aGlzLiRlbC5maW5kKFwiLmNvcHlfY29udGFpbmVyXCIpO1xuICAgICRjb3B5Lmh0bWwoXCJDb3B5IHRvIDxzZWxlY3QgY2xhc3M9J2NvcHlfc2VsZWN0Jz48b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz5Mb2FkaW5nLi4uPC9vcHRpb24+PC9zZWxlY3Q+XCIpO1xuICAgIHJldHVybiB0aGlzLmdldFN1cnZleXMoKTtcbiAgfTtcblxuICBRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5nZXRTdXJ2ZXlzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVybDtcbiAgICB1cmwgPSBUYW5nZXJpbmUuc2V0dGluZ3MudXJsVmlldyhcImdyb3VwXCIsIFwic3VidGVzdHNCeUFzc2Vzc21lbnRJZFwiKTtcbiAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgIFwidXJsXCI6IHVybCxcbiAgICAgIFwidHlwZVwiOiBcIlBPU1RcIixcbiAgICAgIFwiZGF0YVR5cGVcIjogXCJqc29uXCIsXG4gICAgICBcImNvbnRlbnRUeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgXCJkYXRhXCI6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAga2V5czogW3RoaXMucXVlc3Rpb24uZ2V0KFwiYXNzZXNzbWVudElkXCIpXVxuICAgICAgfSksXG4gICAgICBcInN1Y2Nlc3NcIjogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgdmFyIHJvdywgc3VidGVzdHM7XG4gICAgICAgICAgc3VidGVzdHMgPSBfLmNvbXBhY3QoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGksIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICAgICAgcmVmID0gZGF0YS5yb3dzO1xuICAgICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgIHJvdyA9IHJlZltpXTtcbiAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHJvdy52YWx1ZS5wcm90b3R5cGUgPT09IFwic3VydmV5XCIgPyByb3cudmFsdWUgOiB2b2lkIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgfSkoKSk7XG4gICAgICAgICAgY29uc29sZS5sb2coc3VidGVzdHMpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5wb3B1bGF0ZVN1cnZleVNlbGVjdChzdWJ0ZXN0cyk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnBvcHVsYXRlU3VydmV5U2VsZWN0ID0gZnVuY3Rpb24oc3VidGVzdHMpIHtcbiAgICB2YXIgaHRtbE9wdGlvbnMsIHN1YnRlc3Q7XG4gICAgc3VidGVzdHMucHVzaCh7XG4gICAgICBfaWQ6ICdjYW5jZWwnLFxuICAgICAgbmFtZTogdGhpcy50ZXh0LmNhbmNlbF9idXR0b25cbiAgICB9KTtcbiAgICBzdWJ0ZXN0cy51bnNoaWZ0KHtcbiAgICAgIF9pZDogJycsXG4gICAgICBuYW1lOiB0aGlzLnRleHQuc2VsZWN0XG4gICAgfSk7XG4gICAgaHRtbE9wdGlvbnMgPSAoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGksIGxlbiwgcmVzdWx0cztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHN1YnRlc3RzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHN1YnRlc3QgPSBzdWJ0ZXN0c1tpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKFwiPG9wdGlvbiBkYXRhLXN1YnRlc3RJZD0nXCIgKyBzdWJ0ZXN0Ll9pZCArIFwiJyBcIiArIChzdWJ0ZXN0LmF0dHJzIHx8IFwiXCIpICsgXCI+XCIgKyBzdWJ0ZXN0Lm5hbWUgKyBcIjwvb3B0aW9uPlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pKCkpLmpvaW4oXCJcIik7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIuY29weV9zZWxlY3RcIikuaHRtbChodG1sT3B0aW9ucyk7XG4gIH07XG5cbiAgUXVlc3Rpb25zRWRpdExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIG5ld1F1ZXN0aW9uLCBzdWJ0ZXN0SWQ7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KS5maW5kKFwib3B0aW9uOnNlbGVjdGVkXCIpO1xuICAgIHN1YnRlc3RJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtc3VidGVzdElkXCIpO1xuICAgIGlmIChzdWJ0ZXN0SWQgPT09IFwiY2FuY2VsXCIpIHtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIuY29weV9jb250YWluZXJcIikuZW1wdHkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbmV3UXVlc3Rpb24gPSB0aGlzLnF1ZXN0aW9uLmNsb25lKCk7XG4gICAgcmV0dXJuIG5ld1F1ZXN0aW9uLnNhdmUoe1xuICAgICAgXCJfaWRcIjogVXRpbHMuZ3VpZCgpLFxuICAgICAgXCJzdWJ0ZXN0SWRcIjogc3VidGVzdElkXG4gICAgfSwge1xuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoc3VidGVzdElkID09PSBfdGhpcy5xdWVzdGlvbi5nZXQoXCJzdWJ0ZXN0SWRcIikpIHtcbiAgICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiUXVlc3Rpb24gZHVwbGljYXRlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy50cmlnZ2VyKFwiZHVwbGljYXRlXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwic3VidGVzdC9cIiArIHN1YnRlc3RJZCwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQoXCJRdWVzdGlvbiBjb3BpZWQgdG8gXCIgKyAoJHRhcmdldC5odG1sKCkpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFV0aWxzLm1pZEFsZXJ0KFwiQ29weSBlcnJvclwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5lZGl0ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB0aGlzLnRyaWdnZXIoXCJxdWVzdGlvbi1lZGl0XCIsIHRoaXMucXVlc3Rpb24uaWQpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS50b2dnbGVEZWxldGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5kZWxldGVfY29uZmlybVwiKS5mYWRlVG9nZ2xlKDI1MCk7XG4gIH07XG5cbiAgUXVlc3Rpb25zRWRpdExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGVbXCJkZWxldGVcIl0gPSBmdW5jdGlvbihldmVudCkge1xuICAgIHRoaXMucXVlc3Rpb24uY29sbGVjdGlvbi5yZW1vdmUodGhpcy5xdWVzdGlvbi5pZCk7XG4gICAgdGhpcy5xdWVzdGlvbi5kZXN0cm95KCk7XG4gICAgdGhpcy50cmlnZ2VyKFwiZGVsZXRlZFwiKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgUXVlc3Rpb25zRWRpdExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLnRleHQgPSB7XG4gICAgICBcImVkaXRcIjogdChcIlF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXcuaGVscC5lZGl0XCIpLFxuICAgICAgXCJkZWxldGVcIjogdChcIlF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXcuaGVscC5kZWxldGVcIiksXG4gICAgICBcImNvcHlcIjogdChcIlF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXcuaGVscC5jb3B5X3RvXCIpLFxuICAgICAgXCJjYW5jZWxfYnV0dG9uXCI6IHQoXCJRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LmJ1dHRvbi5jYW5jZWxcIiksXG4gICAgICBcImRlbGV0ZV9idXR0b25cIjogdChcIlF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXcuYnV0dG9uLmRlbGV0ZVwiKSxcbiAgICAgIFwic2VsZWN0XCI6IHQoXCJRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3LmxhYmVsLnNlbGVjdFwiKSxcbiAgICAgIFwibG9hZGluZ1wiOiB0KFwiUXVlc3Rpb25zRWRpdExpc3RFbGVtZW50Vmlldy5sYWJlbC5sb2FkaW5nXCIpLFxuICAgICAgXCJkZWxldGVfY29uZmlybVwiOiB0KFwiUXVlc3Rpb25zRWRpdExpc3RFbGVtZW50Vmlldy5sYWJlbC5kZWxldGVfY29uZmlybVwiKVxuICAgIH07XG4gICAgdGhpcy5xdWVzdGlvbiA9IG9wdGlvbnMucXVlc3Rpb247XG4gICAgcmV0dXJuIHRoaXMuJGVsLmF0dHIoXCJkYXRhLWlkXCIsIHRoaXMucXVlc3Rpb24uaWQpO1xuICB9O1xuXG4gIFF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGVsLmh0bWwoXCI8dGFibGU+IDx0cj4gPHRkPiA8aW1nIHNyYz0naW1hZ2VzL2ljb25fZHJhZy5wbmcnIHdpZHRoPSczNicgaGVpZ2h0PSczNicgY2xhc3M9J3NvcnRhYmxlX2hhbmRsZSc+IDwvdGQ+IDx0ZD4gPHNwYW4+XCIgKyAodGhpcy5xdWVzdGlvbi5nZXQoJ3Byb21wdCcpKSArIFwiPC9zcGFuPiA8c3Bhbj5bPHNtYWxsPlwiICsgKHRoaXMucXVlc3Rpb24uZ2V0KCduYW1lJykpICsgXCIsIFwiICsgKHRoaXMucXVlc3Rpb24uZ2V0KCd0eXBlJykpICsgXCI8L3NtYWxsPl08L3NwYW4+IDxpbWcgc3JjPSdpbWFnZXMvaWNvbl9lZGl0LnBuZycgd2lkdGg9JzM2JyBoZWlnaHQ9JzM2JyBjbGFzcz0nbGlua19pY29uIGVkaXQnIHRpdGxlPSdcIiArIHRoaXMudGV4dC5lZGl0ICsgXCInPiA8aW1nIHNyYz0naW1hZ2VzL2ljb25fY29weV90by5wbmcnIHdpZHRoPSczNicgaGVpZ2h0PSczNicgY2xhc3M9J2xpbmtfaWNvbiBzaG93X2NvcHknIHRpdGxlPSdcIiArIHRoaXMudGV4dC5jb3B5ICsgXCInPiA8c3BhbiBjbGFzcz0nY29weV9jb250YWluZXInPjwvc3Bhbj4gPGltZyBzcmM9J2ltYWdlcy9pY29uX2RlbGV0ZS5wbmcnIHdpZHRoPSczNicgaGVpZ2h0PSczNicgY2xhc3M9J2xpbmtfaWNvbiBkZWxldGUnIHRpdGxlPSdcIiArIHRoaXMudGV4dFtcImRlbGV0ZVwiXSArIFwiJz48YnI+IDxkaXYgY2xhc3M9J2NvbmZpcm1hdGlvbiBkZWxldGVfY29uZmlybSc+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cIiArIHRoaXMudGV4dC5kZWxldGVfY29uZmlybSArIFwiPGJyPjxidXR0b24gY2xhc3M9J2RlbGV0ZV9kZWxldGUgY29tbWFuZF9yZWQnPkRlbGV0ZTwvYnV0dG9uPjxidXR0b24gY2xhc3M9J2RlbGV0ZV9jYW5jZWwgY29tbWFuZCc+XCIgKyB0aGlzLnRleHQuY2FuY2VsX2J1dHRvbiArIFwiPC9idXR0b24+IDwvZGl2PiA8L3RkPiA8L3RyPiA8L3RhYmxlPlwiKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgcmV0dXJuIFF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBXb3JrZmxvd1N0ZXAgZXh0ZW5kcyBCYWNrYm9uZS5DaGlsZE1vZGVsXG5cbiAgZ2V0TmFtZTogLT5cbiAgICBzd2l0Y2ggQGdldFR5cGUoKVxuICAgICAgd2hlbiBcImFzc2Vzc21lbnRcIiwgXCJjdXJyaWN1bHVtXCIsIFwibWVzc2FnZVwiXG4gICAgICAgIHJldHVybiBAZ2V0U3RyaW5nKFwibmFtZVwiKVxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gQGdldChcIl9pZFwiKVxuXG4gIGdldFR5cGU6IC0+IEBnZXRTdHJpbmcoXCJ0eXBlXCIpXG5cbiAgZ2V0VmlldzogKCBhcmdPcHRpb25zID0ge30gKSAtPlxuICAgIHZpZXdPcHRpb25zICAgID0gQGdldFZpZXdPcHRpb25zKClcbiAgICBkZWZhdWx0T3B0aW9ucyA9IFxuICAgICAgaW5Xb3JrZmxvdyA6IHRydWVcblxuICAgICQuZXh0ZW5kKHZpZXdPcHRpb25zLCBkZWZhdWx0T3B0aW9ucylcbiAgICAkLmV4dGVuZChhcmdPcHRpb25zLCB2aWV3T3B0aW9ucylcbiAgICByZXR1cm4gbmV3IHdpbmRvd1tcIk5ldyN7QGdldCgnY2xhc3NOYW1lJyl9Vmlld1wiXShhcmdPcHRpb25zKVxuXG4gIGdldENvZmZlZU1lc3NhZ2U6IC0+IEBnZXRTdHJpbmcoXCJtZXNzYWdlXCIpXG4gIFxuICBnZXRDb250ZW50OiAtPiBAZ2V0U3RyaW5nKFwiY29udGVudFwiKVxuXG4gIGdldFZpZXdPcHRpb25zOiAtPiBldmFsKEBnZXQoXCJjbGFzc09wdGlvbnMtY29va2VkXCIpKVxuXG4gIGdldFR5cGVNb2RlbDogLT4gQG1vZGVsIGlmIEBtb2RlbD9cblxuICBnZXRUeXBlc0lkOiAgLT4gQGdldFN0cmluZyhcInR5cGVzSWRcIilcbiAgZ2V0VXNlclR5cGU6IC0+IEBnZXRTdHJpbmcoXCJ1c2VyVHlwZVwiKVxuXG4gIGdldEN1cnJpY3VsdW1JdGVtVHlwZTogLT4gQGdldFN0cmluZyhcImN1cnJpY3VsdW1JdGVtVHlwZVwiKVxuICBnZXRDdXJyaWN1bHVtV2VlazogICAgIC0+IEBnZXRTdHJpbmcoXCJjdXJyaWN1bHVtV2Vla1wiKVxuICBnZXRDdXJyaWN1bHVtR3JhZGU6ICAgIC0+IEBnZXRTdHJpbmcoXCJjdXJyaWN1bHVtR3JhZGVcIilcblxuICBnZXRTaG93TGVzc29uOiAtPiBAZ2V0U3RyaW5nKFwic2hvd0xlc3Nvbi1jb29rZWRcIilcblxuICBmZXRjaDogKCBvcHRpb25zID0ge30gKSAtPlxuICAgIG9wdGlvbnMuZXJyb3IgICA9ICQubm9vcCB1bmxlc3Mgb3B0aW9ucy5lcnJvcj9cbiAgICBvcHRpb25zLnN1Y2Nlc3MgPSAkLm5vb3AgdW5sZXNzIG9wdGlvbnMuc3VjY2Vzcz9cbiAgICBpZiBAZ2V0KFwidHlwZVwiKSBpcyBcImFzc2Vzc21lbnRcIlxuICAgICAgQG1vZGVsID0gbmV3IEFzc2Vzc21lbnQgXCJfaWRcIiA6IEBnZXQoXCJ0eXBlc0lkXCIpXG4gICAgICBAbW9kZWwuZmV0Y2hcbiAgICAgICAgZXJyb3IgICA6IC0+IGNvbnNvbGUubG9nIFwiSGFkIHRyb3VibGUgZmV0Y2hpbmcgI3tAZ2V0KFwidHlwZXNJZFwiKX1cIjsgb3B0aW9ucy5lcnJvcigpXG4gICAgICAgIHN1Y2Nlc3MgOiAtPlxuICAgICAgICAgIG9wdGlvbnMuc3VjY2VzcygpXG4gICAgZWxzZSBpZiBAZ2V0KFwidHlwZVwiKSBpcyBcImN1cnJpY3VsdW1cIlxuICAgICAgQG1vZGVsID0gbmV3IEN1cnJpY3VsdW0gXCJfaWRcIiA6IEBnZXQoXCJ0eXBlc0lkXCIpXG4gICAgICBAbW9kZWwuZmV0Y2hcbiAgICAgICAgZXJyb3IgICA6IC0+IGNvbnNvbGUubG9nIFwiSGFkIHRyb3VibGUgZmV0Y2hpbmcgI3tAZ2V0KFwidHlwZXNJZFwiKX1cIjsgb3B0aW9ucy5lcnJvcigpXG4gICAgICAgIHN1Y2Nlc3MgOiAtPlxuICAgICAgICAgIG9wdGlvbnMuc3VjY2VzcygpXG4iLCJ2YXIgV29ya2Zsb3dTdGVwLFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuV29ya2Zsb3dTdGVwID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFdvcmtmbG93U3RlcCwgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gV29ya2Zsb3dTdGVwKCkge1xuICAgIHJldHVybiBXb3JrZmxvd1N0ZXAuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBXb3JrZmxvd1N0ZXAucHJvdG90eXBlLmdldE5hbWUgPSBmdW5jdGlvbigpIHtcbiAgICBzd2l0Y2ggKHRoaXMuZ2V0VHlwZSgpKSB7XG4gICAgICBjYXNlIFwiYXNzZXNzbWVudFwiOlxuICAgICAgY2FzZSBcImN1cnJpY3VsdW1cIjpcbiAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0cmluZyhcIm5hbWVcIik7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdGhpcy5nZXQoXCJfaWRcIik7XG4gICAgfVxuICB9O1xuXG4gIFdvcmtmbG93U3RlcC5wcm90b3R5cGUuZ2V0VHlwZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZyhcInR5cGVcIik7XG4gIH07XG5cbiAgV29ya2Zsb3dTdGVwLnByb3RvdHlwZS5nZXRWaWV3ID0gZnVuY3Rpb24oYXJnT3B0aW9ucykge1xuICAgIHZhciBkZWZhdWx0T3B0aW9ucywgdmlld09wdGlvbnM7XG4gICAgaWYgKGFyZ09wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgYXJnT3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB2aWV3T3B0aW9ucyA9IHRoaXMuZ2V0Vmlld09wdGlvbnMoKTtcbiAgICBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgIGluV29ya2Zsb3c6IHRydWVcbiAgICB9O1xuICAgICQuZXh0ZW5kKHZpZXdPcHRpb25zLCBkZWZhdWx0T3B0aW9ucyk7XG4gICAgJC5leHRlbmQoYXJnT3B0aW9ucywgdmlld09wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgd2luZG93W1wiTmV3XCIgKyAodGhpcy5nZXQoJ2NsYXNzTmFtZScpKSArIFwiVmlld1wiXShhcmdPcHRpb25zKTtcbiAgfTtcblxuICBXb3JrZmxvd1N0ZXAucHJvdG90eXBlLmdldENvZmZlZU1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoXCJtZXNzYWdlXCIpO1xuICB9O1xuXG4gIFdvcmtmbG93U3RlcC5wcm90b3R5cGUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZyhcImNvbnRlbnRcIik7XG4gIH07XG5cbiAgV29ya2Zsb3dTdGVwLnByb3RvdHlwZS5nZXRWaWV3T3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBldmFsKHRoaXMuZ2V0KFwiY2xhc3NPcHRpb25zLWNvb2tlZFwiKSk7XG4gIH07XG5cbiAgV29ya2Zsb3dTdGVwLnByb3RvdHlwZS5nZXRUeXBlTW9kZWwgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5tb2RlbCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2RlbDtcbiAgICB9XG4gIH07XG5cbiAgV29ya2Zsb3dTdGVwLnByb3RvdHlwZS5nZXRUeXBlc0lkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nKFwidHlwZXNJZFwiKTtcbiAgfTtcblxuICBXb3JrZmxvd1N0ZXAucHJvdG90eXBlLmdldFVzZXJUeXBlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nKFwidXNlclR5cGVcIik7XG4gIH07XG5cbiAgV29ya2Zsb3dTdGVwLnByb3RvdHlwZS5nZXRDdXJyaWN1bHVtSXRlbVR5cGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoXCJjdXJyaWN1bHVtSXRlbVR5cGVcIik7XG4gIH07XG5cbiAgV29ya2Zsb3dTdGVwLnByb3RvdHlwZS5nZXRDdXJyaWN1bHVtV2VlayA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZyhcImN1cnJpY3VsdW1XZWVrXCIpO1xuICB9O1xuXG4gIFdvcmtmbG93U3RlcC5wcm90b3R5cGUuZ2V0Q3VycmljdWx1bUdyYWRlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0U3RyaW5nKFwiY3VycmljdWx1bUdyYWRlXCIpO1xuICB9O1xuXG4gIFdvcmtmbG93U3RlcC5wcm90b3R5cGUuZ2V0U2hvd0xlc3NvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0cmluZyhcInNob3dMZXNzb24tY29va2VkXCIpO1xuICB9O1xuXG4gIFdvcmtmbG93U3RlcC5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5lcnJvciA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zLmVycm9yID0gJC5ub29wO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5zdWNjZXNzID09IG51bGwpIHtcbiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9ICQubm9vcDtcbiAgICB9XG4gICAgaWYgKHRoaXMuZ2V0KFwidHlwZVwiKSA9PT0gXCJhc3Nlc3NtZW50XCIpIHtcbiAgICAgIHRoaXMubW9kZWwgPSBuZXcgQXNzZXNzbWVudCh7XG4gICAgICAgIFwiX2lkXCI6IHRoaXMuZ2V0KFwidHlwZXNJZFwiKVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcy5tb2RlbC5mZXRjaCh7XG4gICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIkhhZCB0cm91YmxlIGZldGNoaW5nIFwiICsgKHRoaXMuZ2V0KFwidHlwZXNJZFwiKSkpO1xuICAgICAgICAgIHJldHVybiBvcHRpb25zLmVycm9yKCk7XG4gICAgICAgIH0sXG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBvcHRpb25zLnN1Y2Nlc3MoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmdldChcInR5cGVcIikgPT09IFwiY3VycmljdWx1bVwiKSB7XG4gICAgICB0aGlzLm1vZGVsID0gbmV3IEN1cnJpY3VsdW0oe1xuICAgICAgICBcIl9pZFwiOiB0aGlzLmdldChcInR5cGVzSWRcIilcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXMubW9kZWwuZmV0Y2goe1xuICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJIYWQgdHJvdWJsZSBmZXRjaGluZyBcIiArICh0aGlzLmdldChcInR5cGVzSWRcIikpKTtcbiAgICAgICAgICByZXR1cm4gb3B0aW9ucy5lcnJvcigpO1xuICAgICAgICB9LFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gb3B0aW9ucy5zdWNjZXNzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gV29ya2Zsb3dTdGVwO1xuXG59KShCYWNrYm9uZS5DaGlsZE1vZGVsKTtcblxuIiwiY2xhc3MgV29ya2Zsb3dTdGVwcyBleHRlbmRzIEJhY2tib25lLkNoaWxkQ29sbGVjdGlvblxuICBcbiAgbW9kZWw6IFdvcmtmbG93U3RlcFxuXG4gIGNvbXBhcmF0b3I6IChhLCBiKSAtPlxuICAgIHJldHVybiAxIHVubGVzcyBhLmhhcyhcIm9yZGVyXCIpXG4gICAgcGFyc2VJbnQoYS5nZXQoXCJvcmRlclwiKSkgLSBwYXJzZUludChiLmdldChcIm9yZGVyXCIpKSIsInZhciBXb3JrZmxvd1N0ZXBzLFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuV29ya2Zsb3dTdGVwcyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChXb3JrZmxvd1N0ZXBzLCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBXb3JrZmxvd1N0ZXBzKCkge1xuICAgIHJldHVybiBXb3JrZmxvd1N0ZXBzLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgV29ya2Zsb3dTdGVwcy5wcm90b3R5cGUubW9kZWwgPSBXb3JrZmxvd1N0ZXA7XG5cbiAgV29ya2Zsb3dTdGVwcy5wcm90b3R5cGUuY29tcGFyYXRvciA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICBpZiAoIWEuaGFzKFwib3JkZXJcIikpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VJbnQoYS5nZXQoXCJvcmRlclwiKSkgLSBwYXJzZUludChiLmdldChcIm9yZGVyXCIpKTtcbiAgfTtcblxuICByZXR1cm4gV29ya2Zsb3dTdGVwcztcblxufSkoQmFja2JvbmUuQ2hpbGRDb2xsZWN0aW9uKTtcblxuIiwiY2xhc3MgV29ya2Zsb3cgZXh0ZW5kcyBCYWNrYm9uZS5QYXJlbnRNb2RlbFxuXG4gIHVybCA6IFwid29ya2Zsb3dcIlxuXG4gIENoaWxkICAgICAgICAgICA6IFdvcmtmbG93U3RlcFxuICBDaGlsZENvbGxlY3Rpb24gOiBXb3JrZmxvd1N0ZXBzXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cblxuICBnZXRMZW5ndGg6IC0+IEBjb2xsZWN0aW9uLmxlbmd0aCB8fCBAYXR0cmlidXRlcy5jaGlsZHJlbi5sZW5ndGhcblxuICBzdGVwTW9kZWxCeUluZGV4OiAoIGluZGV4ICkgLT4gXG4gICAgcmV0dXJuIEBjb2xsZWN0aW9uLm1vZGVsc1tpbmRleF0gfHwgbnVsbFxuXG4gIHZhbGlkYXRlOiAoIGF0dHIsIG9wdGlvbnMgKSAtPlxuXG4gICAgcmV0dXJuXG5cbiAgICByZXR1cm4gXCJQbGVhc2Ugc3VwcGx5IGNoaWxkcmVuXCIgdW5sZXNzIGF0dHIuY2hpbGRyZW4/XG4gICAgZm9yIGNoaWxkIGluIGF0dHIuY2hpbGRyZW5cblxuICAgICAgaWYgY2hpbGQudHlwZSBpcyBcImxvZ2luXCJcbiAgICAgICAgcmV0dXJuIFwiUGxlYXNlIHNwZWNpZnkgYHVzZXJUeXBlYFwiIHVubGVzcyBjaGlsZC51c2VyVHlwZT9cblxuICAgICAgZWxzZSBpZiBjaGlsZC50eXBlIGlzIFwibmV3XCJcbiAgICAgICAgcmV0dXJuIFwiUGxlYXNlIHNwZWNpZnkgYHZpZXdDbGFzc2BcIiAgICAgdW5sZXNzIGNoaWxkLnZpZXdDbGFzcz9cbiAgICAgICAgcmV0dXJuIFwiYHZpZXdDbGFzc2AgbXVzdCBiZSBhIGtub3duIGZ1bmN0aW9uXCIgdW5sZXNzIGNoaWxkLnZpZXdDbGFzcz9cblxuIiwidmFyIFdvcmtmbG93LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuV29ya2Zsb3cgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoV29ya2Zsb3csIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFdvcmtmbG93KCkge1xuICAgIHJldHVybiBXb3JrZmxvdy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFdvcmtmbG93LnByb3RvdHlwZS51cmwgPSBcIndvcmtmbG93XCI7XG5cbiAgV29ya2Zsb3cucHJvdG90eXBlLkNoaWxkID0gV29ya2Zsb3dTdGVwO1xuXG4gIFdvcmtmbG93LnByb3RvdHlwZS5DaGlsZENvbGxlY3Rpb24gPSBXb3JrZmxvd1N0ZXBzO1xuXG4gIFdvcmtmbG93LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge307XG5cbiAgV29ya2Zsb3cucHJvdG90eXBlLmdldExlbmd0aCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24ubGVuZ3RoIHx8IHRoaXMuYXR0cmlidXRlcy5jaGlsZHJlbi5sZW5ndGg7XG4gIH07XG5cbiAgV29ya2Zsb3cucHJvdG90eXBlLnN0ZXBNb2RlbEJ5SW5kZXggPSBmdW5jdGlvbihpbmRleCkge1xuICAgIHJldHVybiB0aGlzLmNvbGxlY3Rpb24ubW9kZWxzW2luZGV4XSB8fCBudWxsO1xuICB9O1xuXG4gIFdvcmtmbG93LnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uKGF0dHIsIG9wdGlvbnMpIHtcbiAgICB2YXIgY2hpbGQsIGksIGxlbiwgcmVmO1xuICAgIHJldHVybjtcbiAgICBpZiAoYXR0ci5jaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gXCJQbGVhc2Ugc3VwcGx5IGNoaWxkcmVuXCI7XG4gICAgfVxuICAgIHJlZiA9IGF0dHIuY2hpbGRyZW47XG4gICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjaGlsZCA9IHJlZltpXTtcbiAgICAgIGlmIChjaGlsZC50eXBlID09PSBcImxvZ2luXCIpIHtcbiAgICAgICAgaWYgKGNoaWxkLnVzZXJUeXBlID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gXCJQbGVhc2Ugc3BlY2lmeSBgdXNlclR5cGVgXCI7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hpbGQudHlwZSA9PT0gXCJuZXdcIikge1xuICAgICAgICBpZiAoY2hpbGQudmlld0NsYXNzID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gXCJQbGVhc2Ugc3BlY2lmeSBgdmlld0NsYXNzYFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGlsZC52aWV3Q2xhc3MgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBcImB2aWV3Q2xhc3NgIG11c3QgYmUgYSBrbm93biBmdW5jdGlvblwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBXb3JrZmxvdztcblxufSkoQmFja2JvbmUuUGFyZW50TW9kZWwpO1xuXG4iLCJjbGFzcyBXb3JrZmxvd3MgZXh0ZW5kcyBCYWNrYm9uZS5Db2xsZWN0aW9uXG5cbiAgbW9kZWw6IFdvcmtmbG93XG4gIHVybCA6IFwid29ya2Zsb3dcIiIsInZhciBXb3JrZmxvd3MsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5Xb3JrZmxvd3MgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoV29ya2Zsb3dzLCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBXb3JrZmxvd3MoKSB7XG4gICAgcmV0dXJuIFdvcmtmbG93cy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFdvcmtmbG93cy5wcm90b3R5cGUubW9kZWwgPSBXb3JrZmxvdztcblxuICBXb3JrZmxvd3MucHJvdG90eXBlLnVybCA9IFwid29ya2Zsb3dcIjtcblxuICByZXR1cm4gV29ya2Zsb3dzO1xuXG59KShCYWNrYm9uZS5Db2xsZWN0aW9uKTtcblxuIiwiIyBiaXQgb2YgYSBjcmFwIHNob290IHRoaXMgb25lXG4jIGl0IHdpbGwgZmluZCBfYV8gc2Nob29sIGxpc3RcbmNsYXNzIFNjaG9vbExpc3RWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG5cbiAgV09SS0ZMT1dfTk9fQk9PS1MgICA6IFwiMDBiMGEwOWEtMmE5Zi1iYWNhLTJhY2ItYzYyNjRkNDI0N2NiXCJcbiAgV09SS0ZMT1dfV0lUSF9CT09LUyA6IFwiYzgzNWZjMzgtZGU5OS1kMDY0LTU5ZDMtZTc3MmNjZWZjZjdkXCJcblxuICBldmVudHM6XG4gICAgXCJjbGljayAuc2Nob29scy1sZWZ0XCIgICA6IFwidG9nZ2xlU2Nob29sTGlzdFwiXG5cbiAgdG9nZ2xlU2Nob29sTGlzdDogLT5cbiAgICBAJGVsLmZpbmQoXCIuc2Nob29sLWxpc3RcIikudG9nZ2xlKClcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBAbG9jTGV2ZWxzICAgICAgID0gW1wiY291bnR5XCIsIFwiem9uZVwiLCBcInNjaG9vbFwiXVxuICAgIEBnZW9ncmFwaHkgICAgICAgPSB7fVxuICAgIEB2aXNpdGVkICAgICAgICAgPSB7fVxuICAgIEBzY2hvb2xzICAgICAgICAgPSB7IGxlZnQgOiBbXSAsIGRvbmUgOiBbXSB9XG5cbiAgICBpZiBUYW5nZXJpbmUudXNlci5oYXMoXCJsb2NhdGlvblwiKVxuICAgICAgQGN1cnJlbnRMb2NhdGlvbiA9IFRhbmdlcmluZS51c2VyLmdldChcImxvY2F0aW9uXCIpXG4gICAgICBAaW52YWxpZCA9IGZhbHNlXG4gICAgZWxzZVxuICAgICAgQGludmFsaWQgPSB0cnVlXG5cbiAgICBAbG9jYXRpb25TdWJ0ZXN0ID0ge31cblxuICAgIEB2YWxpZE9ic2VydmF0aW9uVmlldyA9IG5ldyBWYWxpZE9ic2VydmF0aW9uVmlld1xuICAgIEBsaXN0ZW5UbyBAdmFsaWRPYnNlcnZhdGlvblZpZXcsIFwidmFsaWQtdXBkYXRlXCIsIC0+XG4gICAgICBVdGlscy5leGVjdXRlIFtcbiAgICAgICAgQGZldGNoTG9jYXRpb25zXG4gICAgICAgIEBmZXRjaFRyaXBzXG4gICAgICAgIEByZW5kZXJcbiAgICAgIF0sIEBcbiAgICAsIEBcblxuXG4gIGZldGNoTG9jYXRpb25zOiAoIGNhbGxiYWNrID0gJC5ub29wICkgLT5cblxuICAgIHJldHVybiBpZiBAaW52YWxpZFxuICAgICMgZ2V0IHNjaG9vbCBuYW1lcyBmb3Igc3BlY2lmaWVkIGNvdW50eSBhbmQgem9uZVxuICAgIGNvbnNvbGUubG9nIFwiQ3VycmVudCBMb2NhdGlvbjogXCIsIEBjdXJyZW50TG9jYXRpb24gXG4gICAgXG4gICAgTG9jLnF1ZXJ5IEBsb2NMZXZlbHMsIFxuICAgICAgY291bnR5IDogQGN1cnJlbnRMb2NhdGlvbi5jb3VudHlcbiAgICAgIHpvbmUgICA6IEBjdXJyZW50TG9jYXRpb24uem9uZVxuICAgICwgKHJlcykgPT5cbiAgICAgIEBhbGxTY2hvb2xzID0gcmVzLm1hcCAoZWwpIC0+IGVsLmlkXG5cbiAgICAgIGNvbnNvbGUubG9nIFwiQWxsIFNjaG9vbCBJRHM6IFwiLCBAYWxsU2Nob29sc1xuXG4gICAgICBAc2Nob29sTmFtZXMgPSByZXMucmVkdWNlICggKG9iaiwgY3VyKSAtPiBvYmpbY3VyLmlkXT1jdXIubGFiZWw7IHJldHVybiBvYmogKSwge31cbiAgICAgIFxuICAgICAgI2dldCBjb3VudHkgbmFtZXNcbiAgICAgIExvYy5xdWVyeSBAbG9jTGV2ZWxzLCB7fSwgKHJlcykgPT5cbiAgICAgICAgQGNvdW50eU5hbWVzID0gcmVzLnJlZHVjZSAoIChvYmosIGN1cikgLT4gb2JqW2N1ci5pZF09Y3VyLmxhYmVsOyByZXR1cm4gb2JqICksIHt9XG5cbiAgICAgICAgIyBnZXQgem9uZSBuYW1lcyBpbiBjb3VudHlcbiAgICAgICAgTG9jLnF1ZXJ5IEBsb2NMZXZlbHMsIGNvdW50eTogQGN1cnJlbnRMb2NhdGlvbi5jb3VudHlcbiAgICAgICAgLCAocmVzKSA9PlxuICAgICAgICAgIEB6b25lTmFtZXMgPSByZXMucmVkdWNlICggKG9iaiwgY3VyKSAtPiBvYmpbY3VyLmlkXT1jdXIubGFiZWw7IHJldHVybiBvYmogKSwge31cbiAgICAgICAgICBjYWxsYmFjaygpXG5cblxuICBmZXRjaFRyaXBzOiAoY2FsbGJhY2sgPSAkLm5vb3ApIC0+XG4gICAgcmV0dXJuIGNhbGxiYWNrKCkgaWYgQGludmFsaWRcblxuICAgIGQgPSBuZXcgRGF0ZSgpXG4gICAgeWVhciAgPSBkLmdldEZ1bGxZZWFyKClcbiAgICBtb250aCA9IGQuZ2V0TW9udGgoKSArIDFcblxuICAgIHRyaXBzID0gbmV3IFRyaXBSZXN1bHRDb2xsZWN0aW9uXG4gICAgdHJpcHMuZmV0Y2hcbiAgICAgIHJlc3VsdFZpZXcgOiBcInR1dG9yVHJpcHNcIlxuICAgICAgcXVlcnlLZXkgICA6IFwieWVhciN7eWVhcn1tb250aCN7bW9udGh9XCJcbiAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgIHJvd3MgPSBbXVxuICAgICAgICB6b25lcyA9IHt9XG5cbiAgICAgICAgaW5jb21wbGV0ZSA9IFRhbmdlcmluZS51c2VyLmdldFByZWZlcmVuY2VzKFwidHV0b3Itd29ya2Zsb3dzXCIsIFwiaW5jb21wbGV0ZVwiKSB8fCB7fVxuICAgICAgICBpbmNvbXBsZXRlVHJpcHMgPSBbXVxuICAgICAgICBmb3Igd29ya2Zsb3dJZCwgdHJpcElkcyBvZiBpbmNvbXBsZXRlXG4gICAgICAgICAgaW5jb21wbGV0ZVRyaXBzID0gaW5jb21wbGV0ZVRyaXBzLmNvbmNhdCh0cmlwSWRzKVxuXG4gICAgICAgIHNjaG9vbElkcyA9IFtdXG5cbiAgICAgICAgZm9yIHRyaXAgaW4gdHJpcHMubW9kZWxzXG5cbiAgICAgICAgICAjIHNraXAgdW5sZXNzIHRoZXkgYmVsb25nIGluIHRoaXMgbGlzdFxuICAgICAgICAgIGlzVGhpc1R1dG9yID0gdHJpcC5nZXQoXCJlbnVtZXJhdG9yXCIpIGluIFtUYW5nZXJpbmUudXNlci5nZXQoXCJuYW1lXCIpXS5jb25jYXQoVGFuZ2VyaW5lLnVzZXIuZ2V0QXJyYXkoXCJwcmV2aW91c1VzZXJzXCIpKVxuICAgICAgICAgIGlzUmlnaHRXb3JrZmxvdyA9IHRyaXAuZ2V0KFwid29ya2Zsb3dJZFwiKSBpbiBbQFdPUktGTE9XX05PX0JPT0tTLCBAV09SS0ZMT1dfV0lUSF9CT09LU11cbiAgICAgICAgICBpc1ZhbGlkID0gdHJpcC5nZXQoXCJ0cmlwSWRcIikgaW4gQHZhbGlkT2JzZXJ2YXRpb25WaWV3LnZhbGlkVHJpcHNcbiAgICAgICAgICBjb250aW51ZSB1bmxlc3MgaXNUaGlzVHV0b3JcbiAgICAgICAgICBjb250aW51ZSB1bmxlc3MgaXNSaWdodFdvcmtmbG93XG4gICAgICAgICAgY29udGludWUgaWYgdHJpcC5nZXQoJ3RyaXBJZCcpIGluIGluY29tcGxldGVUcmlwc1xuICAgICAgICAgIGNvbnRpbnVlIHVubGVzcyBpc1ZhbGlkXG5cbiAgICAgICAgICBzY2hvb2xJZHMucHVzaCB0cmlwLmdldChcInNjaG9vbFwiKVxuXG4gICAgICAgIEB2aXNpdGVkID0ge31cblxuXG4gICAgICAgIGRvT25lID0gPT5cbiAgICAgICAgICBpZiBzY2hvb2xJZHMubGVuZ3RoIGlzIDBcbiAgICAgICAgICAgIHJldHVybiBmaW5pc2goKVxuXG4gICAgICAgICAgc2Nob29sSWQgPSBzY2hvb2xJZHMucG9wKClcbiAgICAgICAgICBpZiBfLmNvbnRhaW5zIEBhbGxTY2hvb2xzLCBzY2hvb2xJZFxuICAgICAgICAgICAgQHZpc2l0ZWRbc2Nob29sSWRdID0gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgICAgZG9PbmUoKVxuXG4gICAgICAgIGZpbmlzaCA9ID0+XG4gICAgICAgICAgaWYgIV8uaXNFbXB0eSBAdmlzaXRlZFxuICAgICAgICAgICAgQHNjaG9vbHMuZG9uZSA9IE9iamVjdC5rZXlzKEB2aXNpdGVkKS5zb3J0KClcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBAc2Nob29scy5kb25lID0gW11cbiAgICAgICAgICAjIHVzZSBsaXN0IG9mIGFsbCBzY2hvb2xzIGluIGNvdW50eS96b25lXG4gICAgICAgICAgQHNjaG9vbHMuYWxsICA9IEBhbGxTY2hvb2xzXG4gICAgICAgICAgQHNjaG9vbHMubGVmdCA9IF8oQGFsbFNjaG9vbHMpLmRpZmZlcmVuY2UoQHNjaG9vbHMuZG9uZSlcblxuICAgICAgICAgIEByZWFkeSA9IHRydWVcbiAgICAgICAgICBjYWxsYmFjaz8oKVxuXG4gICAgICAgIGRvT25lKClcblxuICByZW5kZXI6IChzdGF0dXMpIC0+XG4gICAgaWYgQGludmFsaWRcbiAgICAgIHJldHVybiBAJGVsLmh0bWwgXCJcbiAgICAgICAgPHA+TG9jYXRpb24gaW5mb3JtYXRpb24gaW52YWxpZC48L3A+XG4gICAgICAgIDxwPllvdXIgdXNlciBoYXMgbm8gbG9jYXRpb24gb3IgYW4gaW52YWxpZCBsb2NhdGlvbiBzZXQuIFlvdSBjYW4gY3JlYXRlIGEgbmV3IHVzZXIsIG9yIGNsaWNrIHlvdXIgdXNlciBuYW1lIHRvIGNoYW5nZSB5b3VyIGxvY2F0aW9uLjwvcD5cbiAgICAgIFwiXG5cbiAgICBpZiBzdGF0dXMgaXMgXCJsb2FkaW5nXCIgb3Igbm90IEByZWFkeVxuICAgICAgcmV0dXJuIEAkZWwuaHRtbCBcIjxoMj5TY2hvb2wgTGlzdDwvaDI+PHA+TG9hZGluZy4uLjwvcD5cIlxuXG4gICAgQCRlbC5odG1sIFwiXG5cbiAgICAgIDxoMj5TY2hvb2wgTGlzdDwvaDI+XG4gICAgICA8dGFibGUgY2xhc3M9J2NsYXNzX3RhYmxlJz5cbiAgICAgICAgPHRyPjx0aD5Db3VudHk8L3RoPjx0ZD4je0Bjb3VudHlOYW1lc1tAY3VycmVudExvY2F0aW9uLmNvdW50eV19PC90ZD48L3RyPlxuICAgICAgICA8dHI+PHRoPlpvbmU8L3RoPjx0ZD4je0B6b25lTmFtZXNbQGN1cnJlbnRMb2NhdGlvbi56b25lXX08L3RkPjwvdHI+XG4gICAgICAgIDx0cj48dGg+U2Nob29scyByZW1haW5pbmc8L3RoPjx0ZD48YnV0dG9uIGNsYXNzPSdzY2hvb2xzLWxlZnQgY29tbWFuZCc+I3tAc2Nob29scy5sZWZ0Lmxlbmd0aH08L2J1dHRvbj48L3RkPjwvdHI+XG4gICAgICA8L3RhYmxlPlxuXG4gICAgICA8dGFibGUgY2xhc3M9J2NsYXNzX3RhYmxlIHNjaG9vbC1saXN0IHN0YXJ0LWhpZGRlbic+XG4gICAgICAgIDx0cj48dGQ+PGI+UmVtYWluaW5nPC9iPjwvdGQ+PC90cj5cbiAgICAgICAgI3soXCI8dHI+PHRkPiN7QHNjaG9vbE5hbWVzW3NjaG9vbF19PC90ZD48L3RyPlwiIGZvciBzY2hvb2wgaW4gQHNjaG9vbHMubGVmdCkuam9pbignJyl9XG4gICAgICA8L3RhYmxlPlxuXG4gICAgICA8dGFibGUgY2xhc3M9J2NsYXNzX3RhYmxlIHNjaG9vbC1saXN0IHN0YXJ0LWhpZGRlbic+XG4gICAgICAgIDx0cj48dGQ+PGI+RG9uZTwvYj48L3RkPjwvdHI+XG4gICAgICAgICN7KFwiPHRyPjx0ZD4je0BzY2hvb2xOYW1lc1tzY2hvb2xdfTwvdGQ+PC90cj5cIiBmb3Igc2Nob29sIGluIEBzY2hvb2xzLmRvbmUpLmpvaW4oJycpfVxuICAgICAgPC90YWJsZT5cblxuICAgIFwiXG5cbiIsInZhciBTY2hvb2xMaXN0VmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gIGluZGV4T2YgPSBbXS5pbmRleE9mIHx8IGZ1bmN0aW9uKGl0ZW0pIHsgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykgeyBpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHJldHVybiBpOyB9IHJldHVybiAtMTsgfTtcblxuU2Nob29sTGlzdFZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoU2Nob29sTGlzdFZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFNjaG9vbExpc3RWaWV3KCkge1xuICAgIHJldHVybiBTY2hvb2xMaXN0Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFNjaG9vbExpc3RWaWV3LnByb3RvdHlwZS5XT1JLRkxPV19OT19CT09LUyA9IFwiMDBiMGEwOWEtMmE5Zi1iYWNhLTJhY2ItYzYyNjRkNDI0N2NiXCI7XG5cbiAgU2Nob29sTGlzdFZpZXcucHJvdG90eXBlLldPUktGTE9XX1dJVEhfQk9PS1MgPSBcImM4MzVmYzM4LWRlOTktZDA2NC01OWQzLWU3NzJjY2VmY2Y3ZFwiO1xuXG4gIFNjaG9vbExpc3RWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgXCJjbGljayAuc2Nob29scy1sZWZ0XCI6IFwidG9nZ2xlU2Nob29sTGlzdFwiXG4gIH07XG5cbiAgU2Nob29sTGlzdFZpZXcucHJvdG90eXBlLnRvZ2dsZVNjaG9vbExpc3QgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5zY2hvb2wtbGlzdFwiKS50b2dnbGUoKTtcbiAgfTtcblxuICBTY2hvb2xMaXN0Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLmxvY0xldmVscyA9IFtcImNvdW50eVwiLCBcInpvbmVcIiwgXCJzY2hvb2xcIl07XG4gICAgdGhpcy5nZW9ncmFwaHkgPSB7fTtcbiAgICB0aGlzLnZpc2l0ZWQgPSB7fTtcbiAgICB0aGlzLnNjaG9vbHMgPSB7XG4gICAgICBsZWZ0OiBbXSxcbiAgICAgIGRvbmU6IFtdXG4gICAgfTtcbiAgICBpZiAoVGFuZ2VyaW5lLnVzZXIuaGFzKFwibG9jYXRpb25cIikpIHtcbiAgICAgIHRoaXMuY3VycmVudExvY2F0aW9uID0gVGFuZ2VyaW5lLnVzZXIuZ2V0KFwibG9jYXRpb25cIik7XG4gICAgICB0aGlzLmludmFsaWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbnZhbGlkID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5sb2NhdGlvblN1YnRlc3QgPSB7fTtcbiAgICB0aGlzLnZhbGlkT2JzZXJ2YXRpb25WaWV3ID0gbmV3IFZhbGlkT2JzZXJ2YXRpb25WaWV3O1xuICAgIHJldHVybiB0aGlzLmxpc3RlblRvKHRoaXMudmFsaWRPYnNlcnZhdGlvblZpZXcsIFwidmFsaWQtdXBkYXRlXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFV0aWxzLmV4ZWN1dGUoW3RoaXMuZmV0Y2hMb2NhdGlvbnMsIHRoaXMuZmV0Y2hUcmlwcywgdGhpcy5yZW5kZXJdLCB0aGlzKTtcbiAgICB9LCB0aGlzKTtcbiAgfTtcblxuICBTY2hvb2xMaXN0Vmlldy5wcm90b3R5cGUuZmV0Y2hMb2NhdGlvbnMgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSB7XG4gICAgICBjYWxsYmFjayA9ICQubm9vcDtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW52YWxpZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcIkN1cnJlbnQgTG9jYXRpb246IFwiLCB0aGlzLmN1cnJlbnRMb2NhdGlvbik7XG4gICAgcmV0dXJuIExvYy5xdWVyeSh0aGlzLmxvY0xldmVscywge1xuICAgICAgY291bnR5OiB0aGlzLmN1cnJlbnRMb2NhdGlvbi5jb3VudHksXG4gICAgICB6b25lOiB0aGlzLmN1cnJlbnRMb2NhdGlvbi56b25lXG4gICAgfSwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIF90aGlzLmFsbFNjaG9vbHMgPSByZXMubWFwKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgcmV0dXJuIGVsLmlkO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2coXCJBbGwgU2Nob29sIElEczogXCIsIF90aGlzLmFsbFNjaG9vbHMpO1xuICAgICAgICBfdGhpcy5zY2hvb2xOYW1lcyA9IHJlcy5yZWR1Y2UoKGZ1bmN0aW9uKG9iaiwgY3VyKSB7XG4gICAgICAgICAgb2JqW2N1ci5pZF0gPSBjdXIubGFiZWw7XG4gICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSksIHt9KTtcbiAgICAgICAgcmV0dXJuIExvYy5xdWVyeShfdGhpcy5sb2NMZXZlbHMsIHt9LCBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICBfdGhpcy5jb3VudHlOYW1lcyA9IHJlcy5yZWR1Y2UoKGZ1bmN0aW9uKG9iaiwgY3VyKSB7XG4gICAgICAgICAgICBvYmpbY3VyLmlkXSA9IGN1ci5sYWJlbDtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgfSksIHt9KTtcbiAgICAgICAgICByZXR1cm4gTG9jLnF1ZXJ5KF90aGlzLmxvY0xldmVscywge1xuICAgICAgICAgICAgY291bnR5OiBfdGhpcy5jdXJyZW50TG9jYXRpb24uY291bnR5XG4gICAgICAgICAgfSwgZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICBfdGhpcy56b25lTmFtZXMgPSByZXMucmVkdWNlKChmdW5jdGlvbihvYmosIGN1cikge1xuICAgICAgICAgICAgICBvYmpbY3VyLmlkXSA9IGN1ci5sYWJlbDtcbiAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgIH0pLCB7fSk7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuICBTY2hvb2xMaXN0Vmlldy5wcm90b3R5cGUuZmV0Y2hUcmlwcyA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIGQsIG1vbnRoLCB0cmlwcywgeWVhcjtcbiAgICBpZiAoY2FsbGJhY2sgPT0gbnVsbCkge1xuICAgICAgY2FsbGJhY2sgPSAkLm5vb3A7XG4gICAgfVxuICAgIGlmICh0aGlzLmludmFsaWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH1cbiAgICBkID0gbmV3IERhdGUoKTtcbiAgICB5ZWFyID0gZC5nZXRGdWxsWWVhcigpO1xuICAgIG1vbnRoID0gZC5nZXRNb250aCgpICsgMTtcbiAgICB0cmlwcyA9IG5ldyBUcmlwUmVzdWx0Q29sbGVjdGlvbjtcbiAgICByZXR1cm4gdHJpcHMuZmV0Y2goe1xuICAgICAgcmVzdWx0VmlldzogXCJ0dXRvclRyaXBzXCIsXG4gICAgICBxdWVyeUtleTogXCJ5ZWFyXCIgKyB5ZWFyICsgXCJtb250aFwiICsgbW9udGgsXG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBkb09uZSwgZmluaXNoLCBpLCBpbmNvbXBsZXRlLCBpbmNvbXBsZXRlVHJpcHMsIGlzUmlnaHRXb3JrZmxvdywgaXNUaGlzVHV0b3IsIGlzVmFsaWQsIGxlbiwgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCByb3dzLCBzY2hvb2xJZHMsIHRyaXAsIHRyaXBJZHMsIHdvcmtmbG93SWQsIHpvbmVzO1xuICAgICAgICAgIHJvd3MgPSBbXTtcbiAgICAgICAgICB6b25lcyA9IHt9O1xuICAgICAgICAgIGluY29tcGxldGUgPSBUYW5nZXJpbmUudXNlci5nZXRQcmVmZXJlbmNlcyhcInR1dG9yLXdvcmtmbG93c1wiLCBcImluY29tcGxldGVcIikgfHwge307XG4gICAgICAgICAgaW5jb21wbGV0ZVRyaXBzID0gW107XG4gICAgICAgICAgZm9yICh3b3JrZmxvd0lkIGluIGluY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRyaXBJZHMgPSBpbmNvbXBsZXRlW3dvcmtmbG93SWRdO1xuICAgICAgICAgICAgaW5jb21wbGV0ZVRyaXBzID0gaW5jb21wbGV0ZVRyaXBzLmNvbmNhdCh0cmlwSWRzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2Nob29sSWRzID0gW107XG4gICAgICAgICAgcmVmID0gdHJpcHMubW9kZWxzO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdHJpcCA9IHJlZltpXTtcbiAgICAgICAgICAgIGlzVGhpc1R1dG9yID0gKHJlZjEgPSB0cmlwLmdldChcImVudW1lcmF0b3JcIiksIGluZGV4T2YuY2FsbChbVGFuZ2VyaW5lLnVzZXIuZ2V0KFwibmFtZVwiKV0uY29uY2F0KFRhbmdlcmluZS51c2VyLmdldEFycmF5KFwicHJldmlvdXNVc2Vyc1wiKSksIHJlZjEpID49IDApO1xuICAgICAgICAgICAgaXNSaWdodFdvcmtmbG93ID0gKHJlZjIgPSB0cmlwLmdldChcIndvcmtmbG93SWRcIikpID09PSBfdGhpcy5XT1JLRkxPV19OT19CT09LUyB8fCByZWYyID09PSBfdGhpcy5XT1JLRkxPV19XSVRIX0JPT0tTO1xuICAgICAgICAgICAgaXNWYWxpZCA9IChyZWYzID0gdHJpcC5nZXQoXCJ0cmlwSWRcIiksIGluZGV4T2YuY2FsbChfdGhpcy52YWxpZE9ic2VydmF0aW9uVmlldy52YWxpZFRyaXBzLCByZWYzKSA+PSAwKTtcbiAgICAgICAgICAgIGlmICghaXNUaGlzVHV0b3IpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUmlnaHRXb3JrZmxvdykge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZWY0ID0gdHJpcC5nZXQoJ3RyaXBJZCcpLCBpbmRleE9mLmNhbGwoaW5jb21wbGV0ZVRyaXBzLCByZWY0KSA+PSAwKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2Nob29sSWRzLnB1c2godHJpcC5nZXQoXCJzY2hvb2xcIikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpcy52aXNpdGVkID0ge307XG4gICAgICAgICAgZG9PbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBzY2hvb2xJZDtcbiAgICAgICAgICAgIGlmIChzY2hvb2xJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmaW5pc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjaG9vbElkID0gc2Nob29sSWRzLnBvcCgpO1xuICAgICAgICAgICAgaWYgKF8uY29udGFpbnMoX3RoaXMuYWxsU2Nob29scywgc2Nob29sSWQpKSB7XG4gICAgICAgICAgICAgIF90aGlzLnZpc2l0ZWRbc2Nob29sSWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkb09uZSgpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZmluaXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoIV8uaXNFbXB0eShfdGhpcy52aXNpdGVkKSkge1xuICAgICAgICAgICAgICBfdGhpcy5zY2hvb2xzLmRvbmUgPSBPYmplY3Qua2V5cyhfdGhpcy52aXNpdGVkKS5zb3J0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpcy5zY2hvb2xzLmRvbmUgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnNjaG9vbHMuYWxsID0gX3RoaXMuYWxsU2Nob29scztcbiAgICAgICAgICAgIF90aGlzLnNjaG9vbHMubGVmdCA9IF8oX3RoaXMuYWxsU2Nob29scykuZGlmZmVyZW5jZShfdGhpcy5zY2hvb2xzLmRvbmUpO1xuICAgICAgICAgICAgX3RoaXMucmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gY2FsbGJhY2soKSA6IHZvaWQgMDtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiBkb09uZSgpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBTY2hvb2xMaXN0Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgdmFyIHNjaG9vbDtcbiAgICBpZiAodGhpcy5pbnZhbGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuaHRtbChcIjxwPkxvY2F0aW9uIGluZm9ybWF0aW9uIGludmFsaWQuPC9wPiA8cD5Zb3VyIHVzZXIgaGFzIG5vIGxvY2F0aW9uIG9yIGFuIGludmFsaWQgbG9jYXRpb24gc2V0LiBZb3UgY2FuIGNyZWF0ZSBhIG5ldyB1c2VyLCBvciBjbGljayB5b3VyIHVzZXIgbmFtZSB0byBjaGFuZ2UgeW91ciBsb2NhdGlvbi48L3A+XCIpO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBcImxvYWRpbmdcIiB8fCAhdGhpcy5yZWFkeSkge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwoXCI8aDI+U2Nob29sIExpc3Q8L2gyPjxwPkxvYWRpbmcuLi48L3A+XCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kZWwuaHRtbChcIjxoMj5TY2hvb2wgTGlzdDwvaDI+IDx0YWJsZSBjbGFzcz0nY2xhc3NfdGFibGUnPiA8dHI+PHRoPkNvdW50eTwvdGg+PHRkPlwiICsgdGhpcy5jb3VudHlOYW1lc1t0aGlzLmN1cnJlbnRMb2NhdGlvbi5jb3VudHldICsgXCI8L3RkPjwvdHI+IDx0cj48dGg+Wm9uZTwvdGg+PHRkPlwiICsgdGhpcy56b25lTmFtZXNbdGhpcy5jdXJyZW50TG9jYXRpb24uem9uZV0gKyBcIjwvdGQ+PC90cj4gPHRyPjx0aD5TY2hvb2xzIHJlbWFpbmluZzwvdGg+PHRkPjxidXR0b24gY2xhc3M9J3NjaG9vbHMtbGVmdCBjb21tYW5kJz5cIiArIHRoaXMuc2Nob29scy5sZWZ0Lmxlbmd0aCArIFwiPC9idXR0b24+PC90ZD48L3RyPiA8L3RhYmxlPiA8dGFibGUgY2xhc3M9J2NsYXNzX3RhYmxlIHNjaG9vbC1saXN0IHN0YXJ0LWhpZGRlbic+IDx0cj48dGQ+PGI+UmVtYWluaW5nPC9iPjwvdGQ+PC90cj4gXCIgKyAoKChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgIHJlZiA9IHRoaXMuc2Nob29scy5sZWZ0O1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHNjaG9vbCA9IHJlZltpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKFwiPHRyPjx0ZD5cIiArIHRoaXMuc2Nob29sTmFtZXNbc2Nob29sXSArIFwiPC90ZD48L3RyPlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pLmNhbGwodGhpcykpLmpvaW4oJycpKSArIFwiIDwvdGFibGU+IDx0YWJsZSBjbGFzcz0nY2xhc3NfdGFibGUgc2Nob29sLWxpc3Qgc3RhcnQtaGlkZGVuJz4gPHRyPjx0ZD48Yj5Eb25lPC9iPjwvdGQ+PC90cj4gXCIgKyAoKChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgIHJlZiA9IHRoaXMuc2Nob29scy5kb25lO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHNjaG9vbCA9IHJlZltpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKFwiPHRyPjx0ZD5cIiArIHRoaXMuc2Nob29sTmFtZXNbc2Nob29sXSArIFwiPC90ZD48L3RyPlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pLmNhbGwodGhpcykpLmpvaW4oJycpKSArIFwiIDwvdGFibGU+XCIpO1xuICB9O1xuXG4gIHJldHVybiBTY2hvb2xMaXN0VmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIFdvcmtmbG93TWVudVZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJXb3JrZmxvd01lbnVWaWV3XCJcblxuICBldmVudHM6XG4gICAgXCJjbGljayAud29ya2Zsb3ctbmV3XCIgICAgOiAnbmV3J1xuICAgIFwiY2xpY2sgLndvcmtmbG93LWRlbGV0ZVwiIDogXCJkZWxldGVcIlxuICAgIFwiY2xpY2sgLndvcmtmbG93LXJ1blwiICAgIDogXCJydW5cIlxuICAgIFwiY2xpY2sgLndvcmtmbG93LWVkaXRcIiAgIDogXCJlZGl0XCJcbiAgICBcImNsaWNrIC53b3JrZmxvdy1jc3ZcIiAgICA6IFwiY3N2UHJvbXB0TW9udGhcIlxuICAgICdjbGljayAucmVtb3ZlLXJlc3VtZScgICA6ICdyZW1vdmVSZXN1bWUnXG5cbiAgcmVtb3ZlUmVzdW1lOiAoZXZlbnQpIC0+XG5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG4gICAgd29ya2Zsb3dJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtd29ya2Zsb3dJZFwiKVxuICAgIHRyaXBJZCAgICAgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLXRyaXBJZFwiKVxuICAgIHJldHVybiB1bmxlc3MgY29uZmlybSBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZW1vdmUgdGhlIG9wdGlvbiB0byByZXN1bWUgdGhpcyB3b3JrZmxvdz9cIlxuXG4gICAgaW5jb21wbGV0ZSA9IFRhbmdlcmluZS51c2VyLmdldFByZWZlcmVuY2VzKFwidHV0b3Itd29ya2Zsb3dzXCIsIFwiaW5jb21wbGV0ZVwiKSB8fCB7fVxuXG4gICAgaW5jb21wbGV0ZVt3b3JrZmxvd0lkXSA9IF8oaW5jb21wbGV0ZVt3b3JrZmxvd0lkXSkud2l0aG91dCB0cmlwSWRcblxuICAgIFRhbmdlcmluZS51c2VyLnNldFByZWZlcmVuY2VzIFwidHV0b3Itd29ya2Zsb3dzXCIsIFwiaW5jb21wbGV0ZVwiLCBpbmNvbXBsZXRlLCA9PlxuICAgICAgQHVwZGF0ZVdvcmtmbG93cygpXG5cbiAgbmV3OiAtPlxuICAgIGd1aWQgPSBVdGlscy5ndWlkKClcbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwid29ya2Zsb3cvZWRpdC8je2d1aWR9XCIsIGZhbHNlXG4gICAgd29ya2Zsb3cgPSBuZXcgV29ya2Zsb3cgXCJfaWRcIiA6IGd1aWRcbiAgICB2aWV3ID0gbmV3IFdvcmtmbG93RWRpdFZpZXcgd29ya2Zsb3cgOiB3b3JrZmxvd1xuICAgIHZtLnNob3cgdmlld1xuXG4gIGRlbGV0ZTogKGV2ZW50KSAtPlxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICB3b3JrZmxvd0lkID0gJHRhcmdldC5wYXJlbnQoXCJsaVwiKS5hdHRyKCdpZCcpXG4gICAgbmFtZSA9IEB3b3JrZmxvd3MuZ2V0KHdvcmtmbG93SWQpLmdldCgnbmFtZScpXG4gICAgaWYgY29uZmlybSBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgd29ya2Zsb3cgI3tuYW1lfT9cIlxuICAgICAgQHdvcmtmbG93cy5nZXQod29ya2Zsb3dJZCkuZGVzdHJveVxuICAgICAgICBzdWNjZXNzOiA9PlxuICAgICAgICAgIEByZW5kZXIoKVxuXG4gIE1PTlRIUzogW251bGwsICdKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddXG4gIGNzdlByb21wdE1vbnRoOiAoZXZlbnQpIC0+XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuXG4gICAgd29ya2Zsb3dUaXRsZSA9ICR0YXJnZXQucGFyZW50KCkuZmluZChcIi53b3JrZmxvdy10aXRsZVwiKS5odG1sXG4gICAgcmVwb3J0VXJsID0gJHRhcmdldC5hdHRyKCdocmVmJylcblxuICAgIGQgPSBuZXcgRGF0ZVxuICAgIHRoaXNNb250aCA9IGQuZ2V0TW9udGgoKSArIDFcbiAgICB0aGlzWWVhciAgPSBkLmdldEZ1bGxZZWFyKClcblxuICAgIG1vZGFsQ29udGVudCA9IFwiXG4gICAgICA8ZGl2IGlkPSdjc3ZSZXBvcnRGb3JtJz5cbiAgICAgIDxoMT5DU1YgUmVwb3J0aW5nPC9oMT5cbiAgICAgIDxpbnB1dCBpZD0nY3N2VXJsJyBuYW1lPSdjc3ZVcmwnIHR5cGU9J2hpZGRlbicgdmFsdWU9JyN7cmVwb3J0VXJsfSc+XG4gICAgICA8cD5TZWxlY3QgdGhlIG1vbnRoIHRoYXQgeW91IHdvdWxkIGxpa2UgdG8gZ2VuZXJhdGU6PC9wPlxuICAgICAgPGxhYmVsIGZvcj0nY3N2WWVhcic+WWVhcjo8L2xhYmVsPlxuICAgICAgPHNlbGVjdCBpZD0nY3N2WWVhcicgbmFtZT0nY3N2WWVhcic+XG4gICAgICAgICN7KFwiPG9wdGlvbiAgdmFsdWU9JyN7eWVhcn0nICN7aWYgeWVhciBpcyB0aGlzWWVhciB0aGVuICdzZWxlY3RlZCcgZWxzZSAnJ30+I3t5ZWFyfTwvb3B0aW9uPlwiIGZvciB5ZWFyIGluIFt0aGlzWWVhci0xLi50aGlzWWVhcisxXSkuam9pbignJyl9XG4gICAgICA8L3NlbGVjdD5cbiAgICAgIDxici8+XG4gICAgICA8bGFiZWwgZm9yPSdjc3ZNb250aCc+TW9udGg6PC9sYWJlbD5cbiAgICAgIDxzZWxlY3QgaWQ9J2Nzdk1vbnRoJyBuYW1lPSdjc3ZOYW1lJz5cbiAgICAgICAgI3soXCI8b3B0aW9uICB2YWx1ZT0nI3tpbmRleH0nICN7aWYgaW5kZXggaXMgdGhpc01vbnRoIHRoZW4gJ3NlbGVjdGVkPVwidHJ1ZVwiJyBlbHNlICcnfT4je0BNT05USFNbaW5kZXhdfTwvb3B0aW9uPlwiICBmb3IgaW5kZXggaW4gWzEuLjEyXSkuam9pbignJyl9XG4gICAgICA8L3NlbGVjdD5cbiAgICAgIDxici8+XG4gICAgICA8YnV0dG9uIGNsYXNzPSdjb21tYW5kJyBkYXRhLWFjdGlvbj0nY2FuY2VsJz5DYW5jZWw8L2J1dHRvbj5cbiAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQnIGRhdGEtYWN0aW9uPSdnZW5lcmF0ZSc+R2VuZXJhdGUgUmVwb3J0PC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICBcIlxuICAgIFxuICAgIFV0aWxzLm1vZGFsIG1vZGFsQ29udGVudFxuXG4gICAgJGJ1dHRvbiA9ICQoXCIjY3N2UmVwb3J0Rm9ybSBidXR0b25cIilcblxuICAgICRidXR0b24ub24gXCJjbGlja1wiLCAoZXZlbnQpIC0+XG4gICAgICAkYnV0dG9uLm9mZiBcImNsaWNrXCJcblxuICAgICAgaWYgJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLWFjdGlvblwiKSA9PSBcImdlbmVyYXRlXCJcblxuICAgICAgICAkY3N2VXJsID0gJChcIiNjc3ZSZXBvcnRGb3JtICNjc3ZVcmxcIikudmFsKClcbiAgICAgICAgJGNzdlllYXIgPSAkKFwiI2NzdlJlcG9ydEZvcm0gI2NzdlllYXIgb3B0aW9uOnNlbGVjdGVkXCIpLnZhbCgpXG4gICAgICAgICRjc3ZNb250aCA9ICQoXCIjY3N2UmVwb3J0Rm9ybSAjY3N2TW9udGhcIikudmFsKClcblxuICAgICAgICB1cmwgPSBbXG4gICAgICAgICAgJGNzdlVybFxuICAgICAgICAgICRjc3ZZZWFyXG4gICAgICAgICAgJGNzdk1vbnRoXG4gICAgICAgIF0uam9pbignLycpXG4gICAgICAgIFxuICAgICAgICBkb2N1bWVudC5sb2NhdGlvbiA9IHVybFxuXG4gICAgICBVdGlscy5tb2RhbCBmYWxzZVxuXG4gICAgZmFsc2VcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBAW2tleV0gPSB2YWx1ZSBmb3Iga2V5LCB2YWx1ZSBvZiBvcHRpb25zXG4gICAgQHdvcmtmbG93cyA9IG5ldyBXb3JrZmxvd3NcbiAgICBAd29ya2Zsb3dzLmZldGNoXG4gICAgICBzdWNjZXNzOiA9PlxuICAgICAgICBAZmVlZGJhY2tzID0gbmV3IEZlZWRiYWNrcyBcbiAgICAgICAgQGZlZWRiYWNrcy5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgICAgICBAcmVhZHkgPSB0cnVlXG4gICAgICAgICAgICBAcmVuZGVyKClcblxuICByZW5kZXI6IC0+XG5cbiAgICByZXR1cm4gdW5sZXNzIEByZWFkeSBpcyB0cnVlXG5cbiAgICBodG1sV29ya2Zsb3dzID0gXCJcIlxuXG4gICAgZm9yIHdvcmtmbG93IGluIEB3b3JrZmxvd3MubW9kZWxzXG4gICAgICBcbiAgICAgIGNzdlVybCA9IFwiL2Jyb2NrbWFuL3dvcmtmbG93LyN7VGFuZ2VyaW5lLmRiX25hbWV9LyN7d29ya2Zsb3cuaWR9XCJcbiAgICAgIFxuICAgICAgZmVlZGJhY2sgPSBAZmVlZGJhY2tzLmdldCh3b3JrZmxvdy5pZCtcIi1mZWVkYmFja1wiKVxuXG4gICAgICBpZiBmZWVkYmFjaz8gYW5kIGZlZWRiYWNrLmdldChcImNoaWxkcmVuXCIpPy5sZW5ndGggPiAwXG4gICAgICAgIGZlZWRiYWNrSHRtbCA9IFwiPGEgaHJlZj0nI2ZlZWRiYWNrLyN7d29ya2Zsb3cuaWR9Jz5mZWVkYmFjazwvYT5cIlxuICAgICAgZWxzZVxuICAgICAgICBmZWVkYmFja0h0bWwgPSBcIlwiXG5cbiAgICAgIGh0bWxXb3JrZmxvd3MgKz0gXCJcbiAgICAgICAgPGxpIGlkPScje3dvcmtmbG93LmlkfScgc3R5bGU9J21hcmdpbi1ib3R0b206MTVweDsnPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPSd3b3JrZmxvdy10aXRsZSc+I3t3b3JrZmxvdy5nZXQoJ25hbWUnKX08L3NwYW4+XG4gICAgICAgICAgPGJyPlxuICAgICAgICAgIDxhIGhyZWY9JyN3b3JrZmxvdy9ydW4vI3t3b3JrZmxvdy5pZH0nPnJ1bjwvYT5cbiAgICAgICAgICAje2ZlZWRiYWNrSHRtbH1cbiAgICAgICAgICA8YSBocmVmPScjd29ya2Zsb3cvZWRpdC8je3dvcmtmbG93LmlkfSc+ZWRpdDwvYT5cbiAgICAgICAgICA8YSBjbGFzcz0nd29ya2Zsb3ctY3N2JyBocmVmPScje2NzdlVybH0nPmNzdjwvYT5cbiAgICAgICAgICA8c3BhbiBjbGFzcz0nd29ya2Zsb3ctZGVsZXRlIGxpbmsnPmRlbGV0ZTwvc3Bhbj5cbiAgICAgICAgPC9saT5cbiAgICAgICAgXCJcblxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGgxPldvcmtmbG93czwvaDE+XG4gICAgICA8YnV0dG9uIGNsYXNzPSd3b3JrZmxvdy1uZXcgY29tbWFuZCc+TmV3PC9idXR0b24+XG4gICAgICA8dWwgY2xhc3M9J3dvcmtmbG93LW1lbnUnPiN7aHRtbFdvcmtmbG93c308L3VsPlxuICAgIFwiXG5cblxuICByZW5kZXJNb2JpbGU6ID0+XG5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgIDx1bCBjbGFzcz0nd29ya2Zsb3ctbWVudSc+PC91bD5cbiAgICBcIlxuXG4gICAgQHVwZGF0ZVdvcmtmbG93cygpXG4gICAgXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgdXBkYXRlV29ya2Zsb3dzOiAtPlxuXG4gICAgaGlkZGVuV29ya2Zsb3dzID0gVGFuZ2VyaW5lLnVzZXIuZ2V0UHJlZmVyZW5jZXMoXCJ0dXRvci13b3JrZmxvd3NcIiwgXCJoaWRkZW5cIikgfHwgW11cblxuICAgIGh0bWxXb3JrZmxvd3MgPSBcIlwiXG5cbiAgICBAd29ya2Zsb3dzLm1vZGVscy5zb3J0KCAoYSxiKSAtPlxuICAgICAgaWYgYS5nZXQoJ25hbWUnKS50b0xvd2VyQ2FzZSgpIDwgYi5nZXQoJ25hbWUnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIHJldHVybiAtMVxuICAgICAgZWxzZSBpZiBhLmdldCgnbmFtZScpLnRvTG93ZXJDYXNlKCkgPiBiLmdldCgnbmFtZScpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgcmV0dXJuIDFcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIDBcbiAgICApXG5cbiAgICBmb3Igd29ya2Zsb3cgaW4gQHdvcmtmbG93cy5tb2RlbHNcbiAgICAgIGNvbnRpbnVlIGlmIHdvcmtmbG93LmlkIGluIGhpZGRlbldvcmtmbG93c1xuXG4gICAgICBmZWVkYmFjayA9IEBmZWVkYmFja3MuZ2V0KHdvcmtmbG93LmlkK1wiLWZlZWRiYWNrXCIpXG5cbiAgICAgIGlmIHdvcmtmbG93LmdldEJvb2xlYW4oXCJlbmFibGVGZWVkYmFja1wiKSBhbmQgZmVlZGJhY2s/IGFuZCBmZWVkYmFjay5nZXQoXCJjaGlsZHJlblwiKT8ubGVuZ3RoID4gMFxuICAgICAgICBmZWVkYmFja0h0bWwgPSBcIjxidXR0b24gY2xhc3M9J2NvbW1hbmQnPjxhIGhyZWY9JyNmZWVkYmFjay8je3dvcmtmbG93LmlkfSc+RmVlZGJhY2s8L2E+PC9idXR0b24+XCJcbiAgICAgIGVsc2VcbiAgICAgICAgZmVlZGJhY2tIdG1sID0gXCJcIlxuXG4gICAgICBodG1sV29ya2Zsb3dzICs9IFwiXG4gICAgICAgIDxsaSBpZD0nI3t3b3JrZmxvdy5pZH0nIHN0eWxlPSdtYXJnaW4tYm90dG9tOjEycHg7IHBhZGRpbmctYm90dG9tOiAxMnB4OyBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZTsnPlxuICAgICAgICAgICAgPGEgaHJlZj0nI3dvcmtmbG93L3J1bi8je3dvcmtmbG93LmlkfScgY2xhc3M9J3dvcmtmbG93LWJ1dHRvbi1saW5rJz4je3dvcmtmbG93LmdldCgnbmFtZScpfTwvYT5cbiAgICAgICAgICAgICN7ZmVlZGJhY2tIdG1sfVxuICAgICAgICAgICAgPGRpdiBpZD0ncmVzdW1lLXdvcmtmbG93LSN7d29ya2Zsb3cuaWR9Jz48L2Rpdj5cbiAgICAgICAgPC9saT5cbiAgICAgICAgXCJcbiAgICBAJGVsLmZpbmQoXCIud29ya2Zsb3ctbWVudVwiKS5odG1sIGh0bWxXb3JrZmxvd3NcblxuICAgIEByZW5kZXJSZXN1bWVJbmZvKClcblxuICByZW5kZXJSZXN1bWVJbmZvOiAtPlxuXG4gICAgICBpbmNvbXBsZXRlV29ya2Zsb3dzID0gVGFuZ2VyaW5lLnVzZXIuZ2V0UHJlZmVyZW5jZXMoJ3R1dG9yLXdvcmtmbG93cycsICdpbmNvbXBsZXRlJykgfHwge31cblxuICAgICAgZm9yIHdvcmtmbG93SWQsIHRyaXBJZHMgb2YgaW5jb21wbGV0ZVdvcmtmbG93c1xuICAgICAgICBpZiB0cmlwSWRzLmxlbmd0aCBpc250IDBcbiAgICAgICAgICBmb3IgdHJpcElkIGluIHRyaXBJZHNcbiAgICAgICAgICAgIFRhbmdlcmluZS4kZGIudmlldyBcIiN7VGFuZ2VyaW5lLmRlc2lnbl9kb2N9L3RyaXBzQW5kVXNlcnNcIixcbiAgICAgICAgICAgICAga2V5OiB0cmlwSWRcbiAgICAgICAgICAgICAgaW5jbHVkZV9kb2NzIDogdHJ1ZVxuICAgICAgICAgICAgICBzdWNjZXNzOiAoZGF0YSkgPT5cbiAgICAgICAgICAgICAgICBmaXJzdCA9IGRhdGEucm93c1swXS5kb2NcbiAgICAgICAgICAgICAgICB0aW1lQWdvID0gbW9tZW50KGZpcnN0LnVwZGF0ZWQpLmZyb21Ob3coKVxuICAgICAgICAgICAgICAgIEAkZWwuZmluZChcIiNyZXN1bWUtd29ya2Zsb3ctI3tmaXJzdC53b3JrZmxvd0lkfVwiKS5hcHBlbmQgXCJcbiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9JyN3b3JrZmxvdy9yZXN1bWUvI3tmaXJzdC53b3JrZmxvd0lkfS8je2ZpcnN0LnRyaXBJZH0nPjxidXR0b24gY2xhc3M9J2NvbW1hbmQnPlJlc3VtZTwvYnV0dG9uPjwvYT4gI3t0aW1lQWdvfSA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHJlbW92ZS1yZXN1bWUnIGRhdGEtd29ya2Zsb3dJZD0nI3tmaXJzdC53b3JrZmxvd0lkfScgZGF0YS10cmlwSWQ9JyN7Zmlyc3QudHJpcElkfSc+WDwvYnV0dG9uPjxicj5cbiAgICAgICAgICAgICAgICBcIlxuIiwidmFyIFdvcmtmbG93TWVudVZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgaW5kZXhPZiA9IFtdLmluZGV4T2YgfHwgZnVuY3Rpb24oaXRlbSkgeyBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7IGlmIChpIGluIHRoaXMgJiYgdGhpc1tpXSA9PT0gaXRlbSkgcmV0dXJuIGk7IH0gcmV0dXJuIC0xOyB9O1xuXG5Xb3JrZmxvd01lbnVWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFdvcmtmbG93TWVudVZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFdvcmtmbG93TWVudVZpZXcoKSB7XG4gICAgdGhpcy5yZW5kZXJNb2JpbGUgPSBiaW5kKHRoaXMucmVuZGVyTW9iaWxlLCB0aGlzKTtcbiAgICByZXR1cm4gV29ya2Zsb3dNZW51Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFdvcmtmbG93TWVudVZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiV29ya2Zsb3dNZW51Vmlld1wiO1xuXG4gIFdvcmtmbG93TWVudVZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICBcImNsaWNrIC53b3JrZmxvdy1uZXdcIjogJ25ldycsXG4gICAgXCJjbGljayAud29ya2Zsb3ctZGVsZXRlXCI6IFwiZGVsZXRlXCIsXG4gICAgXCJjbGljayAud29ya2Zsb3ctcnVuXCI6IFwicnVuXCIsXG4gICAgXCJjbGljayAud29ya2Zsb3ctZWRpdFwiOiBcImVkaXRcIixcbiAgICBcImNsaWNrIC53b3JrZmxvdy1jc3ZcIjogXCJjc3ZQcm9tcHRNb250aFwiLFxuICAgICdjbGljayAucmVtb3ZlLXJlc3VtZSc6ICdyZW1vdmVSZXN1bWUnXG4gIH07XG5cbiAgV29ya2Zsb3dNZW51Vmlldy5wcm90b3R5cGUucmVtb3ZlUmVzdW1lID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldCwgaW5jb21wbGV0ZSwgdHJpcElkLCB3b3JrZmxvd0lkO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgd29ya2Zsb3dJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtd29ya2Zsb3dJZFwiKTtcbiAgICB0cmlwSWQgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLXRyaXBJZFwiKTtcbiAgICBpZiAoIWNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHRoZSBvcHRpb24gdG8gcmVzdW1lIHRoaXMgd29ya2Zsb3c/XCIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGluY29tcGxldGUgPSBUYW5nZXJpbmUudXNlci5nZXRQcmVmZXJlbmNlcyhcInR1dG9yLXdvcmtmbG93c1wiLCBcImluY29tcGxldGVcIikgfHwge307XG4gICAgaW5jb21wbGV0ZVt3b3JrZmxvd0lkXSA9IF8oaW5jb21wbGV0ZVt3b3JrZmxvd0lkXSkud2l0aG91dCh0cmlwSWQpO1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci5zZXRQcmVmZXJlbmNlcyhcInR1dG9yLXdvcmtmbG93c1wiLCBcImluY29tcGxldGVcIiwgaW5jb21wbGV0ZSwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVXb3JrZmxvd3MoKTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9O1xuXG4gIFdvcmtmbG93TWVudVZpZXcucHJvdG90eXBlW1wibmV3XCJdID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGd1aWQsIHZpZXcsIHdvcmtmbG93O1xuICAgIGd1aWQgPSBVdGlscy5ndWlkKCk7XG4gICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcIndvcmtmbG93L2VkaXQvXCIgKyBndWlkLCBmYWxzZSk7XG4gICAgd29ya2Zsb3cgPSBuZXcgV29ya2Zsb3coe1xuICAgICAgXCJfaWRcIjogZ3VpZFxuICAgIH0pO1xuICAgIHZpZXcgPSBuZXcgV29ya2Zsb3dFZGl0Vmlldyh7XG4gICAgICB3b3JrZmxvdzogd29ya2Zsb3dcbiAgICB9KTtcbiAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgfTtcblxuICBXb3JrZmxvd01lbnVWaWV3LnByb3RvdHlwZVtcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIG5hbWUsIHdvcmtmbG93SWQ7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICB3b3JrZmxvd0lkID0gJHRhcmdldC5wYXJlbnQoXCJsaVwiKS5hdHRyKCdpZCcpO1xuICAgIG5hbWUgPSB0aGlzLndvcmtmbG93cy5nZXQod29ya2Zsb3dJZCkuZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHdvcmtmbG93IFwiICsgbmFtZSArIFwiP1wiKSkge1xuICAgICAgcmV0dXJuIHRoaXMud29ya2Zsb3dzLmdldCh3b3JrZmxvd0lkKS5kZXN0cm95KHtcbiAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlcigpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgV29ya2Zsb3dNZW51Vmlldy5wcm90b3R5cGUuTU9OVEhTID0gW251bGwsICdKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4gIFdvcmtmbG93TWVudVZpZXcucHJvdG90eXBlLmNzdlByb21wdE1vbnRoID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJGJ1dHRvbiwgJHRhcmdldCwgZCwgaW5kZXgsIG1vZGFsQ29udGVudCwgcmVwb3J0VXJsLCB0aGlzTW9udGgsIHRoaXNZZWFyLCB3b3JrZmxvd1RpdGxlLCB5ZWFyO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgd29ya2Zsb3dUaXRsZSA9ICR0YXJnZXQucGFyZW50KCkuZmluZChcIi53b3JrZmxvdy10aXRsZVwiKS5odG1sO1xuICAgIHJlcG9ydFVybCA9ICR0YXJnZXQuYXR0cignaHJlZicpO1xuICAgIGQgPSBuZXcgRGF0ZTtcbiAgICB0aGlzTW9udGggPSBkLmdldE1vbnRoKCkgKyAxO1xuICAgIHRoaXNZZWFyID0gZC5nZXRGdWxsWWVhcigpO1xuICAgIG1vZGFsQ29udGVudCA9IFwiPGRpdiBpZD0nY3N2UmVwb3J0Rm9ybSc+IDxoMT5DU1YgUmVwb3J0aW5nPC9oMT4gPGlucHV0IGlkPSdjc3ZVcmwnIG5hbWU9J2NzdlVybCcgdHlwZT0naGlkZGVuJyB2YWx1ZT0nXCIgKyByZXBvcnRVcmwgKyBcIic+IDxwPlNlbGVjdCB0aGUgbW9udGggdGhhdCB5b3Ugd291bGQgbGlrZSB0byBnZW5lcmF0ZTo8L3A+IDxsYWJlbCBmb3I9J2NzdlllYXInPlllYXI6PC9sYWJlbD4gPHNlbGVjdCBpZD0nY3N2WWVhcicgbmFtZT0nY3N2WWVhcic+IFwiICsgKCgoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgcmVmLCByZWYxLCByZXN1bHRzO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yICh5ZWFyID0gaSA9IHJlZiA9IHRoaXNZZWFyIC0gMSwgcmVmMSA9IHRoaXNZZWFyICsgMTsgcmVmIDw9IHJlZjEgPyBpIDw9IHJlZjEgOiBpID49IHJlZjE7IHllYXIgPSByZWYgPD0gcmVmMSA/ICsraSA6IC0taSkge1xuICAgICAgICByZXN1bHRzLnB1c2goXCI8b3B0aW9uICB2YWx1ZT0nXCIgKyB5ZWFyICsgXCInIFwiICsgKHllYXIgPT09IHRoaXNZZWFyID8gJ3NlbGVjdGVkJyA6ICcnKSArIFwiPlwiICsgeWVhciArIFwiPC9vcHRpb24+XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkoKSkuam9pbignJykpICsgXCIgPC9zZWxlY3Q+IDxici8+IDxsYWJlbCBmb3I9J2Nzdk1vbnRoJz5Nb250aDo8L2xhYmVsPiA8c2VsZWN0IGlkPSdjc3ZNb250aCcgbmFtZT0nY3N2TmFtZSc+IFwiICsgKCgoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgcmVzdWx0cztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaW5kZXggPSBpID0gMTsgaSA8PSAxMjsgaW5kZXggPSArK2kpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKFwiPG9wdGlvbiAgdmFsdWU9J1wiICsgaW5kZXggKyBcIicgXCIgKyAoaW5kZXggPT09IHRoaXNNb250aCA/ICdzZWxlY3RlZD1cInRydWVcIicgOiAnJykgKyBcIj5cIiArIHRoaXMuTU9OVEhTW2luZGV4XSArIFwiPC9vcHRpb24+XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkuY2FsbCh0aGlzKSkuam9pbignJykpICsgXCIgPC9zZWxlY3Q+IDxici8+IDxidXR0b24gY2xhc3M9J2NvbW1hbmQnIGRhdGEtYWN0aW9uPSdjYW5jZWwnPkNhbmNlbDwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdjb21tYW5kJyBkYXRhLWFjdGlvbj0nZ2VuZXJhdGUnPkdlbmVyYXRlIFJlcG9ydDwvYnV0dG9uPiA8L2Rpdj5cIjtcbiAgICBVdGlscy5tb2RhbChtb2RhbENvbnRlbnQpO1xuICAgICRidXR0b24gPSAkKFwiI2NzdlJlcG9ydEZvcm0gYnV0dG9uXCIpO1xuICAgICRidXR0b24ub24oXCJjbGlja1wiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyICRjc3ZNb250aCwgJGNzdlVybCwgJGNzdlllYXIsIHVybDtcbiAgICAgICRidXR0b24ub2ZmKFwiY2xpY2tcIik7XG4gICAgICBpZiAoJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLWFjdGlvblwiKSA9PT0gXCJnZW5lcmF0ZVwiKSB7XG4gICAgICAgICRjc3ZVcmwgPSAkKFwiI2NzdlJlcG9ydEZvcm0gI2NzdlVybFwiKS52YWwoKTtcbiAgICAgICAgJGNzdlllYXIgPSAkKFwiI2NzdlJlcG9ydEZvcm0gI2NzdlllYXIgb3B0aW9uOnNlbGVjdGVkXCIpLnZhbCgpO1xuICAgICAgICAkY3N2TW9udGggPSAkKFwiI2NzdlJlcG9ydEZvcm0gI2Nzdk1vbnRoXCIpLnZhbCgpO1xuICAgICAgICB1cmwgPSBbJGNzdlVybCwgJGNzdlllYXIsICRjc3ZNb250aF0uam9pbignLycpO1xuICAgICAgICBkb2N1bWVudC5sb2NhdGlvbiA9IHVybDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBVdGlscy5tb2RhbChmYWxzZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIFdvcmtmbG93TWVudVZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGtleSwgdmFsdWU7XG4gICAgZm9yIChrZXkgaW4gb3B0aW9ucykge1xuICAgICAgdmFsdWUgPSBvcHRpb25zW2tleV07XG4gICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy53b3JrZmxvd3MgPSBuZXcgV29ya2Zsb3dzO1xuICAgIHJldHVybiB0aGlzLndvcmtmbG93cy5mZXRjaCh7XG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLmZlZWRiYWNrcyA9IG5ldyBGZWVkYmFja3M7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmZlZWRiYWNrcy5mZXRjaCh7XG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgX3RoaXMucmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFdvcmtmbG93TWVudVZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjc3ZVcmwsIGZlZWRiYWNrLCBmZWVkYmFja0h0bWwsIGh0bWxXb3JrZmxvd3MsIGksIGxlbiwgcmVmLCByZWYxLCB3b3JrZmxvdztcbiAgICBpZiAodGhpcy5yZWFkeSAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBodG1sV29ya2Zsb3dzID0gXCJcIjtcbiAgICByZWYgPSB0aGlzLndvcmtmbG93cy5tb2RlbHM7XG4gICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB3b3JrZmxvdyA9IHJlZltpXTtcbiAgICAgIGNzdlVybCA9IFwiL2Jyb2NrbWFuL3dvcmtmbG93L1wiICsgVGFuZ2VyaW5lLmRiX25hbWUgKyBcIi9cIiArIHdvcmtmbG93LmlkO1xuICAgICAgZmVlZGJhY2sgPSB0aGlzLmZlZWRiYWNrcy5nZXQod29ya2Zsb3cuaWQgKyBcIi1mZWVkYmFja1wiKTtcbiAgICAgIGlmICgoZmVlZGJhY2sgIT0gbnVsbCkgJiYgKChyZWYxID0gZmVlZGJhY2suZ2V0KFwiY2hpbGRyZW5cIikpICE9IG51bGwgPyByZWYxLmxlbmd0aCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICAgIGZlZWRiYWNrSHRtbCA9IFwiPGEgaHJlZj0nI2ZlZWRiYWNrL1wiICsgd29ya2Zsb3cuaWQgKyBcIic+ZmVlZGJhY2s8L2E+XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmZWVkYmFja0h0bWwgPSBcIlwiO1xuICAgICAgfVxuICAgICAgaHRtbFdvcmtmbG93cyArPSBcIjxsaSBpZD0nXCIgKyB3b3JrZmxvdy5pZCArIFwiJyBzdHlsZT0nbWFyZ2luLWJvdHRvbToxNXB4Oyc+IDxzcGFuIGNsYXNzPSd3b3JrZmxvdy10aXRsZSc+XCIgKyAod29ya2Zsb3cuZ2V0KCduYW1lJykpICsgXCI8L3NwYW4+IDxicj4gPGEgaHJlZj0nI3dvcmtmbG93L3J1bi9cIiArIHdvcmtmbG93LmlkICsgXCInPnJ1bjwvYT4gXCIgKyBmZWVkYmFja0h0bWwgKyBcIiA8YSBocmVmPScjd29ya2Zsb3cvZWRpdC9cIiArIHdvcmtmbG93LmlkICsgXCInPmVkaXQ8L2E+IDxhIGNsYXNzPSd3b3JrZmxvdy1jc3YnIGhyZWY9J1wiICsgY3N2VXJsICsgXCInPmNzdjwvYT4gPHNwYW4gY2xhc3M9J3dvcmtmbG93LWRlbGV0ZSBsaW5rJz5kZWxldGU8L3NwYW4+IDwvbGk+XCI7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiRlbC5odG1sKFwiPGgxPldvcmtmbG93czwvaDE+IDxidXR0b24gY2xhc3M9J3dvcmtmbG93LW5ldyBjb21tYW5kJz5OZXc8L2J1dHRvbj4gPHVsIGNsYXNzPSd3b3JrZmxvdy1tZW51Jz5cIiArIGh0bWxXb3JrZmxvd3MgKyBcIjwvdWw+XCIpO1xuICB9O1xuXG4gIFdvcmtmbG93TWVudVZpZXcucHJvdG90eXBlLnJlbmRlck1vYmlsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGVsLmh0bWwoXCI8dWwgY2xhc3M9J3dvcmtmbG93LW1lbnUnPjwvdWw+XCIpO1xuICAgIHRoaXMudXBkYXRlV29ya2Zsb3dzKCk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIFdvcmtmbG93TWVudVZpZXcucHJvdG90eXBlLnVwZGF0ZVdvcmtmbG93cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmZWVkYmFjaywgZmVlZGJhY2tIdG1sLCBoaWRkZW5Xb3JrZmxvd3MsIGh0bWxXb3JrZmxvd3MsIGksIGxlbiwgcmVmLCByZWYxLCByZWYyLCB3b3JrZmxvdztcbiAgICBoaWRkZW5Xb3JrZmxvd3MgPSBUYW5nZXJpbmUudXNlci5nZXRQcmVmZXJlbmNlcyhcInR1dG9yLXdvcmtmbG93c1wiLCBcImhpZGRlblwiKSB8fCBbXTtcbiAgICBodG1sV29ya2Zsb3dzID0gXCJcIjtcbiAgICB0aGlzLndvcmtmbG93cy5tb2RlbHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICBpZiAoYS5nZXQoJ25hbWUnKS50b0xvd2VyQ2FzZSgpIDwgYi5nZXQoJ25hbWUnKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYS5nZXQoJ25hbWUnKS50b0xvd2VyQ2FzZSgpID4gYi5nZXQoJ25hbWUnKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVmID0gdGhpcy53b3JrZmxvd3MubW9kZWxzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgd29ya2Zsb3cgPSByZWZbaV07XG4gICAgICBpZiAocmVmMSA9IHdvcmtmbG93LmlkLCBpbmRleE9mLmNhbGwoaGlkZGVuV29ya2Zsb3dzLCByZWYxKSA+PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZmVlZGJhY2sgPSB0aGlzLmZlZWRiYWNrcy5nZXQod29ya2Zsb3cuaWQgKyBcIi1mZWVkYmFja1wiKTtcbiAgICAgIGlmICh3b3JrZmxvdy5nZXRCb29sZWFuKFwiZW5hYmxlRmVlZGJhY2tcIikgJiYgKGZlZWRiYWNrICE9IG51bGwpICYmICgocmVmMiA9IGZlZWRiYWNrLmdldChcImNoaWxkcmVuXCIpKSAhPSBudWxsID8gcmVmMi5sZW5ndGggOiB2b2lkIDApID4gMCkge1xuICAgICAgICBmZWVkYmFja0h0bWwgPSBcIjxidXR0b24gY2xhc3M9J2NvbW1hbmQnPjxhIGhyZWY9JyNmZWVkYmFjay9cIiArIHdvcmtmbG93LmlkICsgXCInPkZlZWRiYWNrPC9hPjwvYnV0dG9uPlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmVlZGJhY2tIdG1sID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIGh0bWxXb3JrZmxvd3MgKz0gXCI8bGkgaWQ9J1wiICsgd29ya2Zsb3cuaWQgKyBcIicgc3R5bGU9J21hcmdpbi1ib3R0b206MTJweDsgcGFkZGluZy1ib3R0b206IDEycHg7IGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlOyc+IDxhIGhyZWY9JyN3b3JrZmxvdy9ydW4vXCIgKyB3b3JrZmxvdy5pZCArIFwiJyBjbGFzcz0nd29ya2Zsb3ctYnV0dG9uLWxpbmsnPlwiICsgKHdvcmtmbG93LmdldCgnbmFtZScpKSArIFwiPC9hPiBcIiArIGZlZWRiYWNrSHRtbCArIFwiIDxkaXYgaWQ9J3Jlc3VtZS13b3JrZmxvdy1cIiArIHdvcmtmbG93LmlkICsgXCInPjwvZGl2PiA8L2xpPlwiO1xuICAgIH1cbiAgICB0aGlzLiRlbC5maW5kKFwiLndvcmtmbG93LW1lbnVcIikuaHRtbChodG1sV29ya2Zsb3dzKTtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJSZXN1bWVJbmZvKCk7XG4gIH07XG5cbiAgV29ya2Zsb3dNZW51Vmlldy5wcm90b3R5cGUucmVuZGVyUmVzdW1lSW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmNvbXBsZXRlV29ya2Zsb3dzLCByZXN1bHRzLCB0cmlwSWQsIHRyaXBJZHMsIHdvcmtmbG93SWQ7XG4gICAgaW5jb21wbGV0ZVdvcmtmbG93cyA9IFRhbmdlcmluZS51c2VyLmdldFByZWZlcmVuY2VzKCd0dXRvci13b3JrZmxvd3MnLCAnaW5jb21wbGV0ZScpIHx8IHt9O1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKHdvcmtmbG93SWQgaW4gaW5jb21wbGV0ZVdvcmtmbG93cykge1xuICAgICAgdHJpcElkcyA9IGluY29tcGxldGVXb3JrZmxvd3Nbd29ya2Zsb3dJZF07XG4gICAgICBpZiAodHJpcElkcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaSwgbGVuLCByZXN1bHRzMTtcbiAgICAgICAgICByZXN1bHRzMSA9IFtdO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHRyaXBJZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRyaXBJZCA9IHRyaXBJZHNbaV07XG4gICAgICAgICAgICByZXN1bHRzMS5wdXNoKFRhbmdlcmluZS4kZGIudmlldyhUYW5nZXJpbmUuZGVzaWduX2RvYyArIFwiL3RyaXBzQW5kVXNlcnNcIiwge1xuICAgICAgICAgICAgICBrZXk6IHRyaXBJZCxcbiAgICAgICAgICAgICAgaW5jbHVkZV9kb2NzOiB0cnVlLFxuICAgICAgICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0LCB0aW1lQWdvO1xuICAgICAgICAgICAgICAgICAgZmlyc3QgPSBkYXRhLnJvd3NbMF0uZG9jO1xuICAgICAgICAgICAgICAgICAgdGltZUFnbyA9IG1vbWVudChmaXJzdC51cGRhdGVkKS5mcm9tTm93KCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuJGVsLmZpbmQoXCIjcmVzdW1lLXdvcmtmbG93LVwiICsgZmlyc3Qud29ya2Zsb3dJZCkuYXBwZW5kKFwiPGEgaHJlZj0nI3dvcmtmbG93L3Jlc3VtZS9cIiArIGZpcnN0LndvcmtmbG93SWQgKyBcIi9cIiArIGZpcnN0LnRyaXBJZCArIFwiJz48YnV0dG9uIGNsYXNzPSdjb21tYW5kJz5SZXN1bWU8L2J1dHRvbj48L2E+IFwiICsgdGltZUFnbyArIFwiIDxidXR0b24gY2xhc3M9J2NvbW1hbmQgcmVtb3ZlLXJlc3VtZScgZGF0YS13b3JrZmxvd0lkPSdcIiArIGZpcnN0LndvcmtmbG93SWQgKyBcIicgZGF0YS10cmlwSWQ9J1wiICsgZmlyc3QudHJpcElkICsgXCInPlg8L2J1dHRvbj48YnI+XCIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pKHRoaXMpXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHRzMTtcbiAgICAgICAgfSkuY2FsbCh0aGlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRzLnB1c2godm9pZCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgcmV0dXJuIFdvcmtmbG93TWVudVZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBWYWxpZE9ic2VydmF0aW9uVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBpbml0aWFsaXplOiAtPlxuXG4gICAgQHZhbGlkQ291bnQgPSB7XG4gICAgICB0aGlzTW9udGggOiAwXG4gICAgICBsYXN0TW9udGggOiAwXG4gICAgfVxuXG4gICAgQHRyaXBJZHMgPSB7fVxuXG4gICAgQGZldGNoVHJpcElkcygpXG5cbiAgZmV0Y2hUcmlwSWRzOiAoY2FsbGJhY2sgPSAkLm5vb3ApIC0+XG4gICAgZCA9IG5ldyBEYXRlKClcbiAgICB5ZWFyICA9IGQuZ2V0RnVsbFllYXIoKVxuICAgIG1vbnRoID0gZC5nZXRNb250aCgpKzFcblxuICAgIFV0aWxzLmV4ZWN1dGUgW1xuICAgICAgKGNhbGxiYWNrID0gJC5ub29wKSAtPlxuICAgICAgICBUYW5nZXJpbmUuJGRiLnZpZXcgXCIje1RhbmdlcmluZS5kZXNpZ25fZG9jfS90dXRvclRyaXBzXCIsXG4gICAgICAgICAga2V5ICAgICA6IFwieWVhciN7eWVhcn1tb250aCN7bW9udGh9XCJcbiAgICAgICAgICByZWR1Y2UgIDogZmFsc2VcbiAgICAgICAgICBzdWNjZXNzIDogKHJlc3BvbnNlKSA9PlxuICAgICAgICAgICAgQHRyaXBJZHMudGhpc01vbnRoID0gXyhyZXNwb25zZS5yb3dzLm1hcCAoZWwpIC0+IGVsLnZhbHVlKS51bmlxKClcbiAgICAgICAgICAgIGNhbGxiYWNrPygpXG5cbiAgICAgICwgKGNhbGxiYWNrID0gJC5ub29wKSAtPlxuICAgICAgICBUYW5nZXJpbmUuJGRiLnZpZXcgXCIje1RhbmdlcmluZS5kZXNpZ25fZG9jfS90dXRvclRyaXBzXCIsXG4gICAgICAgICAga2V5ICAgICA6IFwieWVhciN7eWVhcn1tb250aCN7bW9udGgtMX1cIlxuICAgICAgICAgIHJlZHVjZSAgOiBmYWxzZVxuICAgICAgICAgIHN1Y2Nlc3MgOiAocmVzcG9uc2UpID0+XG4gICAgICAgICAgICBAdHJpcElkcy5sYXN0TW9udGggPSBfKHJlc3BvbnNlLnJvd3MubWFwIChlbCkgLT4gZWwudmFsdWUpLnVuaXEoKVxuICAgICAgICAgICAgY2FsbGJhY2s/KClcblxuICAgICAgLCAoY2FsbGJhY2sgPSAkLm5vb3ApIC0+XG4gICAgICAgIHVzZXJzID0gW1RhbmdlcmluZS51c2VyLmdldChcIm5hbWVcIildLmNvbmNhdChUYW5nZXJpbmUudXNlci5nZXRBcnJheShcInByZXZpb3VzVXNlcnNcIikpXG4gICAgICAgIFRhbmdlcmluZS4kZGIudmlldyBcIiN7VGFuZ2VyaW5lLmRlc2lnbl9kb2N9L3RyaXBzQW5kVXNlcnNcIixcbiAgICAgICAgICBrZXlzICAgIDogdXNlcnNcbiAgICAgICAgICByZWR1Y2UgIDogZmFsc2VcbiAgICAgICAgICBzdWNjZXNzIDogKHJlc3BvbnNlKSA9PlxuICAgICAgICAgICAgQHRyaXBJZHMudGhpc1VzZXIgPSBfKHJlc3BvbnNlLnJvd3MubWFwIChlbCkgLT4gZWwudmFsdWUpLnVuaXEoKVxuICAgICAgICAgICAgY2FsbGJhY2s/KClcblxuICAgICAgLCAoY2FsbGJhY2sgPSAkLm5vb3ApIC0+XG4gICAgICAgIGJlc3RQcmFjdGljZXMgPSBcIjAwYjBhMDlhLTJhOWYtYmFjYS0yYWNiLWM2MjY0ZDQyNDdjYlwiXG4gICAgICAgIGZ1bGxQcmltciAgICAgPSBcImM4MzVmYzM4LWRlOTktZDA2NC01OWQzLWU3NzJjY2VmY2Y3ZFwiXG4gICAgICAgIHdvcmtmbG93S2V5cyA9IFtiZXN0UHJhY3RpY2VzLCBmdWxsUHJpbXJdLm1hcCAoZWwpIC0+IFwid29ya2Zsb3ctI3tlbH1cIlxuICAgICAgICBUYW5nZXJpbmUuJGRiLnZpZXcgXCIje1RhbmdlcmluZS5kZXNpZ25fZG9jfS90dXRvclRyaXBzXCIsXG4gICAgICAgICAga2V5cyAgICA6IHdvcmtmbG93S2V5c1xuICAgICAgICAgIHJlZHVjZSAgOiBmYWxzZVxuICAgICAgICAgIHN1Y2Nlc3MgOiAocmVzcG9uc2UpID0+XG4gICAgICAgICAgICBAdHJpcElkcy50aGVzZVdvcmtmbG93cyA9IF8ocmVzcG9uc2Uucm93cy5tYXAgKGVsKSAtPiBlbC52YWx1ZSkudW5pcSgpXG4gICAgICAgICAgICBjYWxsYmFjaz8oKVxuXG4gICAgICAsIChjYWxsYmFjayA9ICQubm9vcCkgLT5cbiAgICAgICAgQHRyaXBJZHMuZmluYWwgPSB7XG4gICAgICAgICAgdGhpc01vbnRoIDogXy5pbnRlcnNlY3Rpb24oQHRyaXBJZHMudGhpc01vbnRoLCBAdHJpcElkcy50aGVzZVdvcmtmbG93cywgQHRyaXBJZHMudGhpc1VzZXIpXG4gICAgICAgICAgbGFzdE1vbnRoIDogXy5pbnRlcnNlY3Rpb24oQHRyaXBJZHMubGFzdE1vbnRoLCBAdHJpcElkcy50aGVzZVdvcmtmbG93cywgQHRyaXBJZHMudGhpc1VzZXIpXG4gICAgICAgIH1cblxuICAgICAgICBjYWxsYmFjaz8oKVxuXG4gICAgICAsIChjYWxsYmFjayA9ICQubm9vcCkgLT5cbiAgICAgICAgVGFuZ2VyaW5lLiRkYi52aWV3IFwiI3tUYW5nZXJpbmUuZGVzaWduX2RvY30vc3BpcnRSb3R1dFwiLFxuICAgICAgICAgIGdyb3VwICAgOiB0cnVlXG4gICAgICAgICAga2V5cyAgICA6IEB0cmlwSWRzLmZpbmFsLnRoaXNNb250aFxuICAgICAgICAgIHN1Y2Nlc3MgOiAocmVzcG9uc2UpID0+XG5cbiAgICAgICAgICAgIHZhbGlkVHJpcHMgPSByZXNwb25zZS5yb3dzLmZpbHRlciAocm93KSAtPlxuICAgICAgICAgICAgICBtaW51dGVzID0gKHBhcnNlSW50KHJvdy52YWx1ZS5tYXhUaW1lKSAtIHBhcnNlSW50KHJvd1sndmFsdWUnXVsnbWluVGltZSddKSkgLyAxMDAwIC8gNjBcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbWludXRlcyA+PSAyMFxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0XG5cbiAgICAgICAgICAgIEB2YWxpZFRyaXBzID0gdmFsaWRUcmlwcy5tYXAgKGVsKSAtPiBlbC5rZXlcbiAgICAgICAgICAgIEB0cmlnZ2VyIFwidmFsaWQtdXBkYXRlXCJcbiAgICAgICAgICAgIEB2YWxpZENvdW50LnRoaXNNb250aCA9IHZhbGlkVHJpcHMubGVuZ3RoXG4gICAgICAgICAgICBjYWxsYmFjaz8oKVxuXG4gICAgICAsIChjYWxsYmFjayA9ICQubm9vcCkgLT5cbiAgICAgICAgVGFuZ2VyaW5lLiRkYi52aWV3IFwiI3tUYW5nZXJpbmUuZGVzaWduX2RvY30vc3BpcnRSb3R1dFwiLFxuICAgICAgICAgIGdyb3VwICAgOiB0cnVlXG4gICAgICAgICAga2V5cyAgICA6IEB0cmlwSWRzLmZpbmFsLmxhc3RNb250aFxuICAgICAgICAgIHN1Y2Nlc3MgOiAocmVzcG9uc2UpID0+XG5cbiAgICAgICAgICAgIHZhbGlkVHJpcHMgPSByZXNwb25zZS5yb3dzLmZpbHRlciAocm93KSAtPlxuICAgICAgICAgICAgICBtaW51dGVzID0gKHBhcnNlSW50KHJvdy52YWx1ZS5tYXhUaW1lKSAtIHBhcnNlSW50KHJvd1sndmFsdWUnXVsnbWluVGltZSddKSkgLyAxMDAwIC8gNjBcbiAgICAgICAgICAgICAgcmVzdWx0ID0gbWludXRlcyA+PSAyMFxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgICAgICBAdmFsaWRDb3VudC5sYXN0TW9udGggPSB2YWxpZFRyaXBzLmxlbmd0aFxuICAgICAgICAgICAgY2FsbGJhY2s/KClcbiAgICAgICwgQHJlbmRlclxuICAgICAgXSwgQFxuXG4gIHJlbmRlcjogKHN0YXR1cykgLT5cbiAgICBpZiBzdGF0dXMgaXMgXCJsb2FkaW5nXCJcbiAgICAgIEAkZWwuaHRtbCBcIjxoMj5WYWxpZCBPYnNlcnZhdGlvbnM8L2gyPjxwPkxvYWRpbmcuLi48L3A+XCJcbiAgICAgIHJldHVyblxuXG4gICAgQCRlbC5odG1sIFwiXG4gICAgICA8aDI+VmFsaWQgT2JzZXJ2YXRpb25zPC9oMj5cbiAgICAgIDx0YWJsZSBjbGFzcz0nY2xhc3NfdGFibGUnPjx0cj48dGg+PC90aD48dGg+T2JzZXJ2YXRpb25zPC90aD48L3RyPlxuICAgICAgICA8dHI+PHRoPlRoaXMgbW9udGg8L3RoPjx0ZD4je0B2YWxpZENvdW50LnRoaXNNb250aH0gPC90ZD48L3RyPlxuICAgICAgICA8dHI+PHRoPlByZXZpb3VzIG1vbnRoPC90aD48dGQ+I3tAdmFsaWRDb3VudC5sYXN0TW9udGh9IDwvdGQ+PC90cj5cbiAgICAgIDwvdGFibGU+XG4gICAgXCJcblxuIiwidmFyIFZhbGlkT2JzZXJ2YXRpb25WaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuVmFsaWRPYnNlcnZhdGlvblZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoVmFsaWRPYnNlcnZhdGlvblZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFZhbGlkT2JzZXJ2YXRpb25WaWV3KCkge1xuICAgIHJldHVybiBWYWxpZE9ic2VydmF0aW9uVmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFZhbGlkT2JzZXJ2YXRpb25WaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy52YWxpZENvdW50ID0ge1xuICAgICAgdGhpc01vbnRoOiAwLFxuICAgICAgbGFzdE1vbnRoOiAwXG4gICAgfTtcbiAgICB0aGlzLnRyaXBJZHMgPSB7fTtcbiAgICByZXR1cm4gdGhpcy5mZXRjaFRyaXBJZHMoKTtcbiAgfTtcblxuICBWYWxpZE9ic2VydmF0aW9uVmlldy5wcm90b3R5cGUuZmV0Y2hUcmlwSWRzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB2YXIgZCwgbW9udGgsIHllYXI7XG4gICAgaWYgKGNhbGxiYWNrID09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrID0gJC5ub29wO1xuICAgIH1cbiAgICBkID0gbmV3IERhdGUoKTtcbiAgICB5ZWFyID0gZC5nZXRGdWxsWWVhcigpO1xuICAgIG1vbnRoID0gZC5nZXRNb250aCgpICsgMTtcbiAgICByZXR1cm4gVXRpbHMuZXhlY3V0ZShbXG4gICAgICBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2sgPT0gbnVsbCkge1xuICAgICAgICAgIGNhbGxiYWNrID0gJC5ub29wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBUYW5nZXJpbmUuJGRiLnZpZXcoVGFuZ2VyaW5lLmRlc2lnbl9kb2MgKyBcIi90dXRvclRyaXBzXCIsIHtcbiAgICAgICAgICBrZXk6IFwieWVhclwiICsgeWVhciArIFwibW9udGhcIiArIG1vbnRoLFxuICAgICAgICAgIHJlZHVjZTogZmFsc2UsXG4gICAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgX3RoaXMudHJpcElkcy50aGlzTW9udGggPSBfKHJlc3BvbnNlLnJvd3MubWFwKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsLnZhbHVlO1xuICAgICAgICAgICAgICB9KSkudW5pcSgpO1xuICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIgPyBjYWxsYmFjaygpIDogdm9pZCAwO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KSh0aGlzKVxuICAgICAgICB9KTtcbiAgICAgIH0sIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSB7XG4gICAgICAgICAgY2FsbGJhY2sgPSAkLm5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFRhbmdlcmluZS4kZGIudmlldyhUYW5nZXJpbmUuZGVzaWduX2RvYyArIFwiL3R1dG9yVHJpcHNcIiwge1xuICAgICAgICAgIGtleTogXCJ5ZWFyXCIgKyB5ZWFyICsgXCJtb250aFwiICsgKG1vbnRoIC0gMSksXG4gICAgICAgICAgcmVkdWNlOiBmYWxzZSxcbiAgICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICBfdGhpcy50cmlwSWRzLmxhc3RNb250aCA9IF8ocmVzcG9uc2Uucm93cy5tYXAoZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwudmFsdWU7XG4gICAgICAgICAgICAgIH0pKS51bmlxKCk7XG4gICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIiA/IGNhbGxiYWNrKCkgOiB2b2lkIDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pKHRoaXMpXG4gICAgICAgIH0pO1xuICAgICAgfSwgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHVzZXJzO1xuICAgICAgICBpZiAoY2FsbGJhY2sgPT0gbnVsbCkge1xuICAgICAgICAgIGNhbGxiYWNrID0gJC5ub29wO1xuICAgICAgICB9XG4gICAgICAgIHVzZXJzID0gW1RhbmdlcmluZS51c2VyLmdldChcIm5hbWVcIildLmNvbmNhdChUYW5nZXJpbmUudXNlci5nZXRBcnJheShcInByZXZpb3VzVXNlcnNcIikpO1xuICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLiRkYi52aWV3KFRhbmdlcmluZS5kZXNpZ25fZG9jICsgXCIvdHJpcHNBbmRVc2Vyc1wiLCB7XG4gICAgICAgICAga2V5czogdXNlcnMsXG4gICAgICAgICAgcmVkdWNlOiBmYWxzZSxcbiAgICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICBfdGhpcy50cmlwSWRzLnRoaXNVc2VyID0gXyhyZXNwb25zZS5yb3dzLm1hcChmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbC52YWx1ZTtcbiAgICAgICAgICAgICAgfSkpLnVuaXEoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gY2FsbGJhY2soKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcylcbiAgICAgICAgfSk7XG4gICAgICB9LCBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICB2YXIgYmVzdFByYWN0aWNlcywgZnVsbFByaW1yLCB3b3JrZmxvd0tleXM7XG4gICAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSB7XG4gICAgICAgICAgY2FsbGJhY2sgPSAkLm5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgYmVzdFByYWN0aWNlcyA9IFwiMDBiMGEwOWEtMmE5Zi1iYWNhLTJhY2ItYzYyNjRkNDI0N2NiXCI7XG4gICAgICAgIGZ1bGxQcmltciA9IFwiYzgzNWZjMzgtZGU5OS1kMDY0LTU5ZDMtZTc3MmNjZWZjZjdkXCI7XG4gICAgICAgIHdvcmtmbG93S2V5cyA9IFtiZXN0UHJhY3RpY2VzLCBmdWxsUHJpbXJdLm1hcChmdW5jdGlvbihlbCkge1xuICAgICAgICAgIHJldHVybiBcIndvcmtmbG93LVwiICsgZWw7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLiRkYi52aWV3KFRhbmdlcmluZS5kZXNpZ25fZG9jICsgXCIvdHV0b3JUcmlwc1wiLCB7XG4gICAgICAgICAga2V5czogd29ya2Zsb3dLZXlzLFxuICAgICAgICAgIHJlZHVjZTogZmFsc2UsXG4gICAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgX3RoaXMudHJpcElkcy50aGVzZVdvcmtmbG93cyA9IF8ocmVzcG9uc2Uucm93cy5tYXAoZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwudmFsdWU7XG4gICAgICAgICAgICAgIH0pKS51bmlxKCk7XG4gICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIiA/IGNhbGxiYWNrKCkgOiB2b2lkIDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pKHRoaXMpXG4gICAgICAgIH0pO1xuICAgICAgfSwgZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrID09IG51bGwpIHtcbiAgICAgICAgICBjYWxsYmFjayA9ICQubm9vcDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyaXBJZHMuZmluYWwgPSB7XG4gICAgICAgICAgdGhpc01vbnRoOiBfLmludGVyc2VjdGlvbih0aGlzLnRyaXBJZHMudGhpc01vbnRoLCB0aGlzLnRyaXBJZHMudGhlc2VXb3JrZmxvd3MsIHRoaXMudHJpcElkcy50aGlzVXNlciksXG4gICAgICAgICAgbGFzdE1vbnRoOiBfLmludGVyc2VjdGlvbih0aGlzLnRyaXBJZHMubGFzdE1vbnRoLCB0aGlzLnRyaXBJZHMudGhlc2VXb3JrZmxvd3MsIHRoaXMudHJpcElkcy50aGlzVXNlcilcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gY2FsbGJhY2soKSA6IHZvaWQgMDtcbiAgICAgIH0sIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChjYWxsYmFjayA9PSBudWxsKSB7XG4gICAgICAgICAgY2FsbGJhY2sgPSAkLm5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFRhbmdlcmluZS4kZGIudmlldyhUYW5nZXJpbmUuZGVzaWduX2RvYyArIFwiL3NwaXJ0Um90dXRcIiwge1xuICAgICAgICAgIGdyb3VwOiB0cnVlLFxuICAgICAgICAgIGtleXM6IHRoaXMudHJpcElkcy5maW5hbC50aGlzTW9udGgsXG4gICAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgdmFyIHZhbGlkVHJpcHM7XG4gICAgICAgICAgICAgIHZhbGlkVHJpcHMgPSByZXNwb25zZS5yb3dzLmZpbHRlcihmdW5jdGlvbihyb3cpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWludXRlcywgcmVzdWx0O1xuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSAocGFyc2VJbnQocm93LnZhbHVlLm1heFRpbWUpIC0gcGFyc2VJbnQocm93Wyd2YWx1ZSddWydtaW5UaW1lJ10pKSAvIDEwMDAgLyA2MDtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBtaW51dGVzID49IDIwO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBfdGhpcy52YWxpZFRyaXBzID0gdmFsaWRUcmlwcy5tYXAoZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwua2V5O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlcihcInZhbGlkLXVwZGF0ZVwiKTtcbiAgICAgICAgICAgICAgX3RoaXMudmFsaWRDb3VudC50aGlzTW9udGggPSB2YWxpZFRyaXBzLmxlbmd0aDtcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gY2FsbGJhY2soKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcylcbiAgICAgICAgfSk7XG4gICAgICB9LCBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICBpZiAoY2FsbGJhY2sgPT0gbnVsbCkge1xuICAgICAgICAgIGNhbGxiYWNrID0gJC5ub29wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBUYW5nZXJpbmUuJGRiLnZpZXcoVGFuZ2VyaW5lLmRlc2lnbl9kb2MgKyBcIi9zcGlydFJvdHV0XCIsIHtcbiAgICAgICAgICBncm91cDogdHJ1ZSxcbiAgICAgICAgICBrZXlzOiB0aGlzLnRyaXBJZHMuZmluYWwubGFzdE1vbnRoLFxuICAgICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgIHZhciB2YWxpZFRyaXBzO1xuICAgICAgICAgICAgICB2YWxpZFRyaXBzID0gcmVzcG9uc2Uucm93cy5maWx0ZXIoZnVuY3Rpb24ocm93KSB7XG4gICAgICAgICAgICAgICAgdmFyIG1pbnV0ZXMsIHJlc3VsdDtcbiAgICAgICAgICAgICAgICBtaW51dGVzID0gKHBhcnNlSW50KHJvdy52YWx1ZS5tYXhUaW1lKSAtIHBhcnNlSW50KHJvd1sndmFsdWUnXVsnbWluVGltZSddKSkgLyAxMDAwIC8gNjA7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbWludXRlcyA+PSAyMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgX3RoaXMudmFsaWRDb3VudC5sYXN0TW9udGggPSB2YWxpZFRyaXBzLmxlbmd0aDtcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBjYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gY2FsbGJhY2soKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcylcbiAgICAgICAgfSk7XG4gICAgICB9LCB0aGlzLnJlbmRlclxuICAgIF0sIHRoaXMpO1xuICB9O1xuXG4gIFZhbGlkT2JzZXJ2YXRpb25WaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbihzdGF0dXMpIHtcbiAgICBpZiAoc3RhdHVzID09PSBcImxvYWRpbmdcIikge1xuICAgICAgdGhpcy4kZWwuaHRtbChcIjxoMj5WYWxpZCBPYnNlcnZhdGlvbnM8L2gyPjxwPkxvYWRpbmcuLi48L3A+XCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kZWwuaHRtbChcIjxoMj5WYWxpZCBPYnNlcnZhdGlvbnM8L2gyPiA8dGFibGUgY2xhc3M9J2NsYXNzX3RhYmxlJz48dHI+PHRoPjwvdGg+PHRoPk9ic2VydmF0aW9uczwvdGg+PC90cj4gPHRyPjx0aD5UaGlzIG1vbnRoPC90aD48dGQ+XCIgKyB0aGlzLnZhbGlkQ291bnQudGhpc01vbnRoICsgXCIgPC90ZD48L3RyPiA8dHI+PHRoPlByZXZpb3VzIG1vbnRoPC90aD48dGQ+XCIgKyB0aGlzLnZhbGlkQ291bnQubGFzdE1vbnRoICsgXCIgPC90ZD48L3RyPiA8L3RhYmxlPlwiKTtcbiAgfTtcblxuICByZXR1cm4gVmFsaWRPYnNlcnZhdGlvblZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJcbmNsYXNzIFdvcmtmbG93RWRpdFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5FZGl0Vmlld1xuICBcbiAgY2xhc3NOYW1lOiBcIldvcmtmbG93RWRpdFZpZXdcIlxuXG4gIGV2ZW50cyA6ICQuZXh0ZW5kXG4gICAgJ2NsaWNrICAuYWRkJyAgICAgICAgICAgICAgOiBcInN0ZXBBZGRcIlxuICAgICdjaGFuZ2UgLnR5cGUtc2VsZWN0b3InICAgIDogJ29uVHlwZVNlbGVjdG9yQ2hhbmdlJ1xuICAgICdjaGFuZ2UgLnR5cGVzLWlkJyAgICAgICAgIDogJ29uVHlwZXNJZENoYW5nZSdcbiAgICAnY2hhbmdlIC51c2VyLXR5cGUnICAgICAgICA6ICdvblVzZXJUeXBlQ2hhbmdlJ1xuICAgICdjaGFuZ2UgaW5wdXRbdHlwZT1yYWRpb10nIDogJ29uUmFkaW9DaGFuZ2UnXG5cbiAgICAnY2xpY2sgLm9wZW4tc2VsZWN0b3InICA6ICdvcGVuU2VsZWN0b3InXG5cbiAgICAnY2xpY2sgLnJlbW92ZS1zdGVwJyAgICA6ICdyZW1vdmVTdGVwJ1xuXG4gICwgQmFja2JvbmUuRWRpdFZpZXcucHJvdG90eXBlLmV2ZW50c1xuXG5cbiAgcmVtb3ZlU3RlcDogKGV2ZW50KSAtPlxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICBtb2RlbElkID0gJHRhcmdldC5hdHRyKCdkYXRhLW1vZGVsLWlkJylcbiAgICBAd29ya2Zsb3cuY29sbGVjdGlvbi5yZW1vdmUobW9kZWxJZClcbiAgICBAd29ya2Zsb3cuc2F2ZSBudWxsLFxuICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgVXRpbHMudG9wQWxlcnQoXCJTdGVwIHJlbW92ZWRcIilcblxuICBvcGVuU2VsZWN0b3I6ICggZXZlbnQgKSAtPlxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICBtb2RlbElkID0gJHRhcmdldC5hdHRyKCdkYXRhLW1vZGVsLWlkJylcbiAgICBzdGVwVHlwZSA9ICR0YXJnZXQuYXR0cignZGF0YS1zdGVwLXR5cGUnKVxuICAgIEB1cGRhdGVTZWxlY3Rvcihtb2RlbElkLCBzdGVwVHlwZSlcblxuICBvblR5cGVzSWRDaGFuZ2U6IChldmVudCkgLT5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG4gICAgdHlwZUlkID0gJHRhcmdldC52YWwoKVxuICAgIHN0ZXBJZCA9ICR0YXJnZXQuYXR0cignZGF0YS1zdGVwLWlkJylcbiAgICBAbW9kZWxzLmdldChzdGVwSWQpLnNhdmUgXCJ0eXBlc0lkXCIgOiB0eXBlSWQsXG4gICAgICBzdWNjZXNzOiAtPlxuICAgICAgICBVdGlscy50b3BBbGVydCBcIlNhdmVkXCJcblxuICBvblVzZXJUeXBlQ2hhbmdlOiAoZXZlbnQpIC0+XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgIHVzZXJUeXBlID0gJHRhcmdldC52YWwoKVxuICAgIHN0ZXBJZCA9ICR0YXJnZXQuYXR0cignZGF0YS1zdGVwLWlkJylcbiAgICBAbW9kZWxzLmdldChzdGVwSWQpLnNhdmUgXCJ1c2VyVHlwZVwiIDogdXNlclR5cGUsXG4gICAgICBzdWNjZXNzOiAtPlxuICAgICAgICBVdGlscy50b3BBbGVydCBcIlNhdmVkXCJcblxuICBvblJhZGlvQ2hhbmdlOiAoZXZlbnQpIC0+XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgIHZhbHVlID0gJHRhcmdldC52YWwoKTtcbiAgICBkYXRhSWQgPSAkdGFyZ2V0LmF0dHIoJ2RhdGEtaWQnKVxuICAgIHN0ZXBJZCA9ICR0YXJnZXQuYXR0cignZGF0YS1zdGVwLWlkJylcblxuICAgIGlmIHN0ZXBJZD8gYW5kIGRhdGFJZD9cbiAgICAgIEBtb2RlbHMuZ2V0KHN0ZXBJZCkuc2F2ZSBkYXRhSWQgOiB2YWx1ZSxcbiAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICBVdGlscy50b3BBbGVydCBcIlNhdmVkXCJcbiAgICBlbHNlXG4gICAgICBAd29ya2Zsb3cuc2V0IGRhdGFJZCwgdmFsdWVcbiAgICAgIEB3b3JrZmxvdy5zYXZlIG51bGwsXG4gICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgVXRpbHMudG9wQWxlcnQoXCJTYXZlZFwiKVxuXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgQFtrZXldID0gdmFsdWUgZm9yIGtleSwgdmFsdWUgb2Ygb3B0aW9uc1xuICAgIEB1cGRhdGVFZGl0SW5QbGFjZU1vZGVscygpXG4gICAgQHdvcmtmbG93LmNvbGxlY3Rpb24ub24gXCJjaGFuZ2UgYWRkIHJlbW92ZVwiLCA9PlxuICAgICAgQHdvcmtmbG93LmNvbGxlY3Rpb24uc29ydCgpXG4gICAgICBAdXBkYXRlRWRpdEluUGxhY2VNb2RlbHMoKVxuICAgICAgQHJlbmRlcigpXG5cbiAgdXBkYXRlRWRpdEluUGxhY2VNb2RlbHM6ID0+XG4gICAgQG1vZGVscyA9IG5ldyBCYWNrYm9uZS5Db2xsZWN0aW9uIFtAd29ya2Zsb3ddLmNvbmNhdChAd29ya2Zsb3cuY29sbGVjdGlvbi5tb2RlbHMpXG5cbiAgcmVuZGVyOiA9PlxuXG4gICAgc3RlcExpc3QgICAgICA9IFwiXCJcbiAgICBAbmVlZE5hbWVzICAgID0gW11cbiAgICBAbmVlZFNlbGVjdG9yID0gW11cblxuICAgIEB3b3JrZmxvdy5jb2xsZWN0aW9uLmVhY2ggKHN0ZXBNb2RlbCkgPT5cblxuICAgICAgc3RlcFR5cGUgPSBzdGVwTW9kZWwuZ2V0VHlwZSgpXG5cbiAgICAgIHNlbGVjdGVkQXNzZXNzbWVudCA9IFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiIGlmIHN0ZXBUeXBlIGlzIFwiYXNzZXNzbWVudFwiXG4gICAgICBzZWxlY3RlZEN1cnJpY3VsdW0gPSBcInNlbGVjdGVkPSdzZWxlY3RlZCdcIiBpZiBzdGVwVHlwZSBpcyBcImN1cnJpY3VsdW1cIlxuICAgICAgc2VsZWN0ZWROZXdPYmplY3QgID0gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCIgaWYgc3RlcFR5cGUgaXMgXCJuZXdcIlxuICAgICAgc2VsZWN0ZWRNZXNzYWdlICAgID0gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCIgaWYgc3RlcFR5cGUgaXMgXCJtZXNzYWdlXCJcbiAgICAgIHNlbGVjdGVkTG9naW4gICAgICA9IFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiIGlmIHN0ZXBUeXBlIGlzIFwibG9naW5cIlxuICAgICAgc2VsZWN0ZWROb1R5cGUgICAgID0gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCIgaWYgc3RlcFR5cGUgaXMgXCJcIlxuXG4gICAgICBkaXNwbGF5QXNzZXNzbWVudCA9IFwiZGlzcGxheTpub25lO1wiIGlmIHN0ZXBUeXBlIGlzIFwiXCIgb3Igc3RlcFR5cGUgaXNudCBcImFzc2Vzc21lbnRcIlxuICAgICAgZGlzcGxheUN1cnJpY3VsdW0gPSBcImRpc3BsYXk6bm9uZTtcIiBpZiBzdGVwVHlwZSBpcyBcIlwiIG9yIHN0ZXBUeXBlIGlzbnQgXCJjdXJyaWN1bHVtXCJcbiAgICAgIGRpc3BsYXlOZXcgICAgICAgID0gXCJkaXNwbGF5Om5vbmU7XCIgaWYgc3RlcFR5cGUgaXMgXCJcIiBvciBzdGVwVHlwZSBpc250IFwibmV3XCJcbiAgICAgIGRpc3BsYXlNZXNzYWdlICAgID0gXCJkaXNwbGF5Om5vbmU7XCIgaWYgc3RlcFR5cGUgaXMgXCJcIiBvciBzdGVwVHlwZSBpc250IFwibWVzc2FnZVwiXG4gICAgICBkaXNwbGF5TG9naW4gICAgICA9IFwiZGlzcGxheTpub25lO1wiIGlmIHN0ZXBUeXBlIGlzIFwiXCIgb3Igc3RlcFR5cGUgaXNudCBcImxvZ2luXCJcblxuICAgICAgdHlwZVNlbGVjdG9yID0gXCJcbiAgICAgICAgPHNlbGVjdCBjbGFzcz0ndHlwZS1zZWxlY3RvcicgZGF0YS1pZD0nI3tzdGVwTW9kZWwuaWR9Jz5cbiAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgI3tzZWxlY3RlZE5vVHlwZSB8fCAnJ30gPlNlbGVjdCB0eXBlPC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiAje3NlbGVjdGVkQXNzZXNzbWVudCB8fCAnJ30gdmFsdWU9J2Fzc2Vzc21lbnQnPkFzc2Vzc21lbnQ8L29wdGlvbj5cbiAgICAgICAgICA8b3B0aW9uICN7c2VsZWN0ZWRDdXJyaWN1bHVtIHx8ICcnfSB2YWx1ZT0nY3VycmljdWx1bSc+Q3VycmljdWx1bTwvb3B0aW9uPlxuICAgICAgICAgIDxvcHRpb24gI3tzZWxlY3RlZE1lc3NhZ2UgICAgfHwgJyd9IHZhbHVlPSdtZXNzYWdlJz5NZXNzYWdlPC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiAje3NlbGVjdGVkTmV3T2JqZWN0ICB8fCAnJ30gdmFsdWU9J25ldyc+TmV3IE9iamVjdDwvb3B0aW9uPlxuICAgICAgICAgIDxvcHRpb24gI3tzZWxlY3RlZExvZ2luICAgICAgfHwgJyd9IHZhbHVlPSdsb2dpbic+TG9naW48L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XCJcblxuICAgICAgc3RlcExpc3QgKz0gXCJcbiAgICAgICAgPGxpPlxuICAgICAgICAgIDx0YWJsZT5cblxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGg+TmFtZTwvdGg+XG4gICAgICAgICAgICAgIDx0ZD4je0BnZXRFZGl0YWJsZVxuICAgICAgICAgICAgICAgICAgbW9kZWw6IHN0ZXBNb2RlbFxuICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiBcbiAgICAgICAgICAgICAgICAgICAga2V5IDogJ25hbWUnXG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZSA6IHRydWVcbiAgICAgICAgICAgICAgICAgIG5hbWU6ICdTdGVwIG5hbWUnXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ3VudGl0bGVkIHN0ZXAnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cblxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGg+T3JkZXI8L3RoPlxuICAgICAgICAgICAgICA8dGQ+I3tAZ2V0RWRpdGFibGVcbiAgICAgICAgICAgICAgICAgIG1vZGVsOiBzdGVwTW9kZWxcbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogXG4gICAgICAgICAgICAgICAgICAgIGtleSA6ICdvcmRlcidcbiAgICAgICAgICAgICAgICAgICAgaXNOdW1iZXIgOiB0cnVlXG4gICAgICAgICAgICAgICAgICBuYW1lOiAnT3JkZXInXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ09yZGVyJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRoPlJlc3VtYWJsZTwvdGg+XG4gICAgICAgICAgICAgIDx0ZD4je0BnZXRFZGl0YWJsZVxuICAgICAgICAgICAgICAgICAgbW9kZWw6IHN0ZXBNb2RlbFxuICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOlxuICAgICAgICAgICAgICAgICAgICBrZXkgOiAncmVzdW1hYmxlJ1xuICAgICAgICAgICAgICAgICAgICBlc2NhcGU6IHRydWVcbiAgICAgICAgICAgICAgICAgIG5hbWU6ICdSZXN1bWFibGUnXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ3RydWUgb3IgZmFsc2UnXG4gICAgICAgICAgICAgICAgICBwcmVwYXJlOiAodmFsdWUpLT5Db2ZmZWVTY3JpcHQuY29tcGlsZSBcInJldHVybiAje3ZhbHVlfVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cblxuXG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0aD5Ta2lwIGxvZ2ljPC90aD5cbiAgICAgICAgICAgICAgPHRkPiN7QGdldEVkaXRhYmxlXG4gICAgICAgICAgICAgICAgICBtb2RlbDogc3RlcE1vZGVsXG4gICAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6XG4gICAgICAgICAgICAgICAgICAgIGtleSA6ICdza2lwTG9naWMnXG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgbmFtZTogJ1NraXAgbG9naWMnXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NraXAgbG9naWMnXG4gICAgICAgICAgICAgICAgICBwcmVwYXJlOiAodmFsdWUpIC0+IENvZmZlZVNjcmlwdC5jb21waWxlIFwicmV0dXJuICN7dmFsdWV9XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuXG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0aD5UeXBlPC90aD5cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICN7dHlwZVNlbGVjdG9yfTxicj5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPSd0eXBlU2VsZWN0b3JDb250YWluZXItI3tzdGVwTW9kZWwuaWR9Jz48L2Rpdj5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG5cbiAgICAgICAgICAgIDx0ciBjbGFzcz0nbWVzc2FnZS1vbmx5IG5vdC1uZXcgbm90LWxvZ2luIG5vdC1hc3Nlc3NtZW50IG5vdC1jdXJyaWN1bHVtJyBzdHlsZT0nI3tkaXNwbGF5TWVzc2FnZXx8Jyd9Jz5cbiAgICAgICAgICAgICAgPHRoPk1lc3NhZ2U8L3RoPlxuICAgICAgICAgICAgICA8dGQ+I3tAZ2V0RWRpdGFibGVcbiAgICAgICAgICAgICAgICAgIG1vZGVsOiBzdGVwTW9kZWxcbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTpcbiAgICAgICAgICAgICAgICAgICAga2V5IDogJ21lc3NhZ2UnXG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgbmFtZTogJ01lc3NhZ2UnXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ01lc3NhZ2UnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cblxuICAgICAgICAgICAgPHRyIGNsYXNzPSduZXctb25seSBub3QtbG9naW4gbm90LWFzc2Vzc21lbnQgbm90LW5ldyBub3QtY3VycmljdWx1bScgc3R5bGU9JyN7ZGlzcGxheU5ld3x8Jyd9Jz5cbiAgICAgICAgICAgICAgPHRoPk9iamVjdCBUeXBlPC90aD5cbiAgICAgICAgICAgICAgPHRkPiN7QGdldEVkaXRhYmxlXG4gICAgICAgICAgICAgICAgICBtb2RlbDogc3RlcE1vZGVsXG4gICAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6IFxuICAgICAgICAgICAgICAgICAgICBrZXkgOiAnY2xhc3NOYW1lJ1xuICAgICAgICAgICAgICAgICAgbmFtZTogJ0NsYXNzIG5hbWUnXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0NsYXNzIG5hbWUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDx0ciBjbGFzcz0nbmV3LW9ubHkgbm90LWxvZ2luIG5vdC1hc3Nlc3NtZW50IG5vdC1uZXcgbm90LWN1cnJpY3VsdW0nIHN0eWxlPScje2Rpc3BsYXlOZXd8fCcnfSc+XG4gICAgICAgICAgICAgIDx0aD5PYmplY3Qgb3B0aW9uczwvdGg+XG4gICAgICAgICAgICAgIDx0ZD4je0BnZXRFZGl0YWJsZVxuICAgICAgICAgICAgICAgICAgbW9kZWw6IHN0ZXBNb2RlbFxuICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiBcbiAgICAgICAgICAgICAgICAgICAga2V5IDogJ2NsYXNzT3B0aW9ucydcbiAgICAgICAgICAgICAgICAgIG5hbWU6ICdDbGFzcyBPcHRpb25zJ1xuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdDbGFzcyBvcHRpb25zJ1xuICAgICAgICAgICAgICAgICAgcHJlcGFyZTogKCBwcm9wICkgLT4gQ29mZmVlU2NyaXB0LmNvbXBpbGUgXCJyZXR1cm4gI3twcm9wfVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cblxuICAgICAgICAgICAgPHRyIGNsYXNzPSdsb2dpbi1vbmx5IG5vdC1hc3Nlc3NtZW50IG5vdC1uZXcgbm90LWN1cnJpY3VsdW0nIHN0eWxlPScje2Rpc3BsYXlMb2dpbnx8Jyd9Jz5cbiAgICAgICAgICAgICAgPHRoPkxvZ2luIHR5cGU8L3RoPlxuICAgICAgICAgICAgICA8dGQgaWQ9J3VzZXItdHlwZS1zZWxlY3Rvci1jb250YWluZXItI3tzdGVwTW9kZWwuaWR9Jz5cbiAgICAgICAgICAgICAgICAje3N0ZXBNb2RlbC5nZXRVc2VyVHlwZSgpfVxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdsaW5rIG9wZW4tc2VsZWN0b3InIGRhdGEtbW9kZWwtaWQ9JyN7c3RlcE1vZGVsLmlkfScgZGF0YS1zdGVwLXR5cGU9J2xvZ2luJz5DaGFuZ2U8L3NwYW4+XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuXG4gICAgICAgICAgICA8dHIgY2xhc3M9J2N1cnJpY3VsdW0tb25seSBub3QtYXNzZXNzbWVudCBub3QtbmV3IG5vdC1sb2dpbicgc3R5bGU9JyN7ZGlzcGxheUN1cnJpY3VsdW18fCcnfSc+XG4gICAgICAgICAgICAgIDx0aD5JdGVtIHR5cGUgdmFyaWFibGU8L3RoPlxuICAgICAgICAgICAgICA8dGQ+I3tAZ2V0RWRpdGFibGVcbiAgICAgICAgICAgICAgICAgIG1vZGVsOiBzdGVwTW9kZWxcbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogXG4gICAgICAgICAgICAgICAgICAgIGtleSA6ICdjdXJyaWN1bHVtSXRlbVR5cGUnXG4gICAgICAgICAgICAgICAgICBuYW1lOiAnSXRlbSB0eXBlIHZhcmlhYmxlJ1xuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdJdGVtIHR5cGUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDx0ciBjbGFzcz0nY3VycmljdWx1bS1vbmx5IG5vdC1hc3Nlc3NtZW50IG5vdC1uZXcgbm90LWxvZ2luJyBzdHlsZT0nI3tkaXNwbGF5Q3VycmljdWx1bXx8Jyd9Jz5cbiAgICAgICAgICAgICAgPHRoPldlZWsgdmFyaWFibGU8L3RoPlxuICAgICAgICAgICAgICA8dGQ+I3tAZ2V0RWRpdGFibGVcbiAgICAgICAgICAgICAgICAgIG1vZGVsOiBzdGVwTW9kZWxcbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogXG4gICAgICAgICAgICAgICAgICAgIGtleSA6ICdjdXJyaWN1bHVtV2VlaydcbiAgICAgICAgICAgICAgICAgIG5hbWU6ICdXZWVrIHZhcmlhYmxlJ1xuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdXZWVrIHZhcmlhYmxlJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8dHIgY2xhc3M9J2N1cnJpY3VsdW0tb25seSBub3QtYXNzZXNzbWVudCBub3QtbmV3IG5vdC1sb2dpbicgc3R5bGU9JyN7ZGlzcGxheUN1cnJpY3VsdW18fCcnfSc+XG4gICAgICAgICAgICAgIDx0aD5HcmFkZSB2YXJpYWJsZTwvdGg+XG4gICAgICAgICAgICAgIDx0ZD4je0BnZXRFZGl0YWJsZVxuICAgICAgICAgICAgICAgICAgbW9kZWw6IHN0ZXBNb2RlbFxuICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOlxuICAgICAgICAgICAgICAgICAgICBrZXkgOiAnY3VycmljdWx1bUdyYWRlJ1xuICAgICAgICAgICAgICAgICAgbmFtZTogJ0dyYWRlIHZhcmlhYmxlJ1xuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdHcmFkZSB2YXJpYWJsZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuXG5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRkPjxidXR0b24gY2xhc3M9J2NvbW1hbmQgcmVtb3ZlLXN0ZXAnIGRhdGEtbW9kZWwtaWQ9JyN7c3RlcE1vZGVsLmlkfSc+UmVtb3ZlPC9idXR0b24+PC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPC9saT5cbiAgICAgIFwiXG5cbiAgICAgIEBuZWVkTmFtZXMucHVzaCBzdGVwTW9kZWwgICAgaWYgc3RlcFR5cGUgaXMgXCJhc3Nlc3NtZW50XCIgb3Igc3RlcFR5cGUgaXMgXCJjdXJyaWN1bHVtXCJcblxuICAgICAgQG5lZWRTZWxlY3Rvci5wdXNoIHN0ZXBNb2RlbCBpZiBzdGVwVHlwZSBpcyBcImFzc2Vzc21lbnRcIiBhbmQgc3RlcE1vZGVsLmdldFR5cGVzSWQoKSBpcyBcIlwiXG4gICAgICBAbmVlZFNlbGVjdG9yLnB1c2ggc3RlcE1vZGVsIGlmIHN0ZXBUeXBlIGlzIFwiY3VycmljdWx1bVwiIGFuZCBzdGVwTW9kZWwuZ2V0VHlwZXNJZCgpIGlzIFwiXCJcbiAgICAgIEBuZWVkU2VsZWN0b3IucHVzaCBzdGVwTW9kZWwgaWYgc3RlcFR5cGUgaXMgXCJsb2dpblwiIGFuZCBzdGVwTW9kZWwuZ2V0VXNlclR5cGUoKSBpcyBcIlwiXG5cblxuICAgIGh0bWwgPSBcIlxuICAgICAgXG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0ZD48aDE+TmFtZTogPC9oMT48L3RkPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8aDE+I3tAZ2V0RWRpdGFibGVcbiAgICAgICAgICAgICAgICBtb2RlbDogQHdvcmtmbG93XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlIDogXG4gICAgICAgICAgICAgICAgICBrZXkgOiAnbmFtZSdcbiAgICAgICAgICAgICAgICAgIGVzY2FwZSA6IHRydWVcbiAgICAgICAgICAgICAgICBuYW1lIDogXCJXb3JrZmxvdyBuYW1lXCJcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJVbnRpdGxlZCB3b3JrZmxvd1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L2gxPlxuICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIDx0aD5GZWVkYmFjayBFbmFibGVkOiA8L3RoPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8ZGl2IGlkPSdlbmFibGVfZmVlZGJhY2tfcmFkaW8nIGNsYXNzPSdidXR0b25zZXQnIHN0eWxlPSdmbG9hdDogbGVmdDsgcGFkZGluZy1yaWdodDogMTVweDsnPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9J2VuYWJsZV9mZWVkYmFja190cnVlJz5ZZXM8L2xhYmVsPjxpbnB1dCBuYW1lPSdlbmFibGVGZWVkYmFjaycgZGF0YS1pZD0nZW5hYmxlRmVlZGJhY2snIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZScgaWQ9J2VuYWJsZV9mZWVkYmFja190cnVlJyAjeydjaGVja2VkJyBpZiBAd29ya2Zsb3cuZ2V0KCdlbmFibGVGZWVkYmFjaycpIGlzICd0cnVlJ30+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0nZW5hYmxlX2ZlZWRiYWNrX2ZhbHNlJz5ObzwvbGFiZWw+PGlucHV0IG5hbWU9J2VuYWJsZUZlZWRiYWNrJyBkYXRhLWlkPSdlbmFibGVGZWVkYmFjaycgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZScgaWQ9J2VuYWJsZV9mZWVkYmFja19mYWxzZScgI3snY2hlY2tlZCcgaWYgbm90IChAd29ya2Zsb3cuZ2V0KCdlbmFibGVGZWVkYmFjaycpIGlzICd0cnVlJyl9PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBmZWVkYmFjayBuYXYtYnV0dG9uJz48YSBocmVmPScjZmVlZGJhY2svZWRpdC8je0B3b3JrZmxvdy5pZH0nPkVkaXQgRmVlZGJhY2s8L2E+PC9idXR0b24+XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRoPk1lZGlhIE92ZXJsYXkgRmlsZTogPC90aD5cbiAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgI3tAZ2V0RWRpdGFibGVcbiAgICAgICAgICAgICAgICBtb2RlbDogQHdvcmtmbG93XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlIDogXG4gICAgICAgICAgICAgICAgICBrZXkgOiAnbWVkaWFPdmVybGF5RmlsZSdcbiAgICAgICAgICAgICAgICAgIGVzY2FwZSA6IHRydWVcbiAgICAgICAgICAgICAgICBuYW1lIDogXCJNZWRpYSBPdmVybGF5IEZpbGUgTmFtZSBMb2dpY1wiXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiW0xvZ2ljIHJldHVybmluZyBtZWRpYSBvdmVybGF5IGZpbGUgbmFtZSAtIGxlYXZlIGVtcHR5IGlmIG5vIE1lZGlhIE92ZXJsYXkgaXMgZW5hYmxlZF1cIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgICA8ZGl2IGNsYXNzPSdtZW51Ym94Jz5cbiAgICAgICAgPGgyPlN0ZXBzPC9oMj5cbiAgICAgICAgPHVsIGlkPSdzdGVwLWxpc3QnPiN7c3RlcExpc3R9PC91bD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBpZD0nY29udHJvbHMnPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPSdhZGQgY29tbWFuZCc+QWRkIHN0ZXA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuXG4gICAgXCJcblxuICAgIEAkZWwuaHRtbCBodG1sXG5cbiAgICBmb3IgbW9kZWwgaW4gQG5lZWROYW1lc1xuICAgICAgaWYgbW9kZWwuZ2V0VHlwZXNJZCgpXG4gICAgICAgIGRvIChtb2RlbCkgPT5cbiAgICAgICAgICB0eXBlTW9kZWwgPSBuZXcgQmFja2JvbmUuTW9kZWwgXCJfaWRcIiA6IG1vZGVsLmdldFR5cGVzSWQoKVxuICAgICAgICAgIHR5cGVNb2RlbC5mZXRjaFxuICAgICAgICAgICAgZXJyb3I6ID0+IEAkZWwuZmluZChcIiN0eXBlU2VsZWN0b3JDb250YWluZXItI3ttb2RlbC5pZH1cIikuaHRtbCBcIk5vdCBmb3VuZCA8c3BhbiBjbGFzcz0nbGluayBvcGVuLXNlbGVjdG9yJyBkYXRhLW1vZGVsLWlkPScje21vZGVsLmlkfScgZGF0YS1zdGVwLXR5cGU9JyN7bW9kZWwuZ2V0VHlwZSgpfSc+Q2hhbmdlPC9zcGFuPlwiXG4gICAgICAgICAgICBzdWNjZXNzOiA9PlxuICAgICAgICAgICAgICBAJGVsLmZpbmQoXCIjdHlwZVNlbGVjdG9yQ29udGFpbmVyLSN7bW9kZWwuaWR9XCIpLmh0bWwgdHlwZU1vZGVsLmdldChcIm5hbWVcIikgKyBcIiA8c3BhbiBjbGFzcz0nbGluayBvcGVuLXNlbGVjdG9yJyBkYXRhLW1vZGVsLWlkPScje21vZGVsLmlkfScgZGF0YS1zdGVwLXR5cGU9JyN7bW9kZWwuZ2V0VHlwZSgpfSc+Q2hhbmdlPC9zcGFuPlwiXG5cbiAgICBmb3IgbW9kZWwgaW4gQG5lZWRTZWxlY3RvclxuICAgICAgQHVwZGF0ZVNlbGVjdG9yKG1vZGVsLmlkLCBtb2RlbC5nZXRUeXBlKCkpXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICBvblR5cGVTZWxlY3RvckNoYW5nZTogKGV2ZW50KSA9PlxuXG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuXG4gICAgbW9kZWwgICA9IEBtb2RlbHMuZ2V0KCR0YXJnZXQuYXR0cignZGF0YS1pZCcpKVxuICAgIHZhbHVlICAgPSAkdGFyZ2V0LnZhbCgpXG5cbiAgICBtb2RlbC5zYXZlIFwidHlwZVwiOnZhbHVlLFxuICAgICAgZXJyb3I6ID0+IFxuICAgICAgICBVdGlscy5taWRBbGVydCBcIkNvdWxkIG5vdCBzYXZlLiBQbGVhc2UgdHJ5IGFnYWluLlwiXG4gICAgICAgIEByZW5kZXIoKVxuICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgVXRpbHMudG9wQWxlcnQgXCJUeXBlIHNhdmVkXCJcbiAgICAgICAgJHBhcmVudCA9ICR0YXJnZXQucGFyZW50KFwibGlcIilcbiAgICAgICAgJHBhcmVudC5maW5kKFwiLiN7dmFsdWV9LW9ubHlcIikuc2hvdygpXG4gICAgICAgICRwYXJlbnQuZmluZChcIi5ub3QtI3t2YWx1ZX1cIikuaGlkZSgpXG4gICAgICAgIEB1cGRhdGVTZWxlY3Rvcihtb2RlbC5pZCwgdmFsdWUpXG5cbiAgdXBkYXRlU2VsZWN0b3I6IChtb2RlbElkLCB0eXBlKSA9PlxuICAgIGlmIHR5cGUgaXMgXCJhc3Nlc3NtZW50XCJcbiAgICAgIEAkZWwuZmluZChcIiN0eXBlU2VsZWN0b3JDb250YWluZXItI3ttb2RlbElkfVwiKS5odG1sKFwiPGltZyBzcmM9J2ltYWdlcy9sb2FkaW5nLmdpZicgY2xhc3M9J2xvYWRpbmcnPlwiKVxuICAgICAgXG4gICAgICBAYXNzZXNzbWVudHMgPSBuZXcgQXNzZXNzbWVudHMgdW5sZXNzIEBhc3Nlc3NtZW50cz9cbiAgICAgIEBhc3Nlc3NtZW50cy5mZXRjaFxuICAgICAgICBzdWNjZXNzOiA9PlxuICAgICAgICAgIG9uZVNlbGVjdGVkID0gZmFsc2VcblxuICAgICAgICAgIGh0bWxPcHRpb25zID0gXCJcIlxuICAgICAgICAgIGZvciBhc3Nlc3NtZW50IGluIEBhc3Nlc3NtZW50cy5tb2RlbHNcbiAgICAgICAgICAgIGlmIGFzc2Vzc21lbnQuaWQgaXMgQHdvcmtmbG93LmNvbGxlY3Rpb24uZ2V0KG1vZGVsSWQpLmdldFR5cGVzSWQoKVxuICAgICAgICAgICAgICBzZWxlY3RlZCAgICA9IFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiIFxuICAgICAgICAgICAgICBvbmVTZWxlY3RlZCA9IHRydWVcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgc2VsZWN0ZWQgPSAnJ1xuICAgICAgICAgICAgaHRtbE9wdGlvbnMgKz0gXCI8b3B0aW9uIHZhbHVlPScje2Fzc2Vzc21lbnQuaWR9JyAje3NlbGVjdGVkIHx8ICcnfT4je2Fzc2Vzc21lbnQuZ2V0KCduYW1lJyl9PC9vcHRpb24+XCIgXG5cbiAgICAgICAgICBwcm9tcHRTZWxlY3Rpb24gPSBcIjxvcHRpb24gc2VsZWN0ZWQ9J3NlbGVjdGVkJyBkaXNhYmxlZD0nZGlzYWJsZWQnPlBsZWFzZSBzZWxlY3QgYW4gYXNzZXNzbWVudDwvb3B0aW9uPlwiIHVubGVzcyBvbmVTZWxlY3RlZFxuXG4gICAgICAgICAgQCRlbC5maW5kKFwiI3R5cGVTZWxlY3RvckNvbnRhaW5lci0je21vZGVsSWR9XCIpLmh0bWwgXCJcbiAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9J3R5cGVzLWlkJyBkYXRhLXN0ZXAtaWQ9JyN7bW9kZWxJZH0nPlxuICAgICAgICAgICAgICAje3Byb21wdFNlbGVjdGlvbnx8Jyd9XG4gICAgICAgICAgICAgICN7aHRtbE9wdGlvbnN9XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICBcIlxuXG4gICAgZWxzZSBpZiB0eXBlIGlzIFwiY3VycmljdWx1bVwiXG5cbiAgICAgIEAkZWwuZmluZChcIiN0eXBlU2VsZWN0b3JDb250YWluZXItI3ttb2RlbElkfVwiKS5odG1sKFwiPGltZyBzcmM9J2ltYWdlcy9sb2FkaW5nLmdpZicgY2xhc3M9J2xvYWRpbmcnPlwiKVxuICAgICAgXG4gICAgICBjdXJyaWN1bGEgPSBuZXcgQ3VycmljdWxhXG4gICAgICBjdXJyaWN1bGEuZmV0Y2hcbiAgICAgICAgc3VjY2VzczogPT5cblxuICAgICAgICAgIG9uZVNlbGVjdGVkID0gZmFsc2VcblxuICAgICAgICAgIGh0bWxPcHRpb25zID0gJydcbiAgICAgICAgICBmb3IgbW9kZWwgaW4gY3VycmljdWxhLm1vZGVsc1xuICAgICAgICAgICAgaWYgbW9kZWwuaWQgaXMgQHdvcmtmbG93LmNvbGxlY3Rpb24uZ2V0KG1vZGVsSWQpLmdldFR5cGVzSWQoKVxuICAgICAgICAgICAgICBvbmVTZWxlY3RlZCA9IHRydWVcbiAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBcInNlbGVjdGVkPSdzZWxlY3RlZCdcIlxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICBzZWxlY3RlZCA9ICcnXG4gICAgICAgICAgICBodG1sT3B0aW9ucyArPSBcIjxvcHRpb24gdmFsdWU9JyN7bW9kZWwuaWR9JyAje3NlbGVjdGVkfT4je21vZGVsLmdldCgnbmFtZScpfTwvb3B0aW9uPlwiXG5cbiAgICAgICAgICBwcm9tcHRTZWxlY3Rpb24gPSBcIjxvcHRpb24gc2VsZWN0ZWQ9J3NlbGVjdGVkJyBkaXNhYmxlZD0nZGlzYWJsZWQnPlBsZWFzZSBzZWxlY3QgYW4gYXNzZXNzbWVudDwvb3B0aW9uPlwiIHVubGVzcyBvbmVTZWxlY3RlZFxuICBcbiAgICAgICAgICBAJGVsLmZpbmQoXCIjdHlwZVNlbGVjdG9yQ29udGFpbmVyLSN7bW9kZWxJZH1cIikuaHRtbCBcIlxuICAgICAgICAgICAgPHNlbGVjdCBjbGFzcz0ndHlwZXMtaWQnIGRhdGEtc3RlcC1pZD0nI3ttb2RlbElkfSc+XG4gICAgICAgICAgICAgICN7cHJvbXB0U2VsZWN0aW9ufHwnJ31cbiAgICAgICAgICAgICAgI3todG1sT3B0aW9uc31cbiAgICAgICAgICAgIDwvc2VsZWN0Pjxicj5cbiAgICAgICAgICBcIlxuXG4gICAgZWxzZSBpZiB0eXBlIGlzIFwibG9naW5cIlxuXG5cbiAgICAgIHBvc3NpYmxlVHlwZXMgPSBbJ3RhYycsICd0ZWFjaGVyJ11cblxuICAgICAgb25lU2VsZWN0ZWQgPSBmYWxzZVxuICAgICAgaHRtbE9wdGlvbnMgPSAnJ1xuXG4gICAgICBzdGVwTW9kZWwgPSBAd29ya2Zsb3cuY29sbGVjdGlvbi5nZXQobW9kZWxJZClcblxuICAgICAgZm9yIHVzZXJUeXBlIGluIHBvc3NpYmxlVHlwZXNcbiAgICAgICAgaWYgc3RlcE1vZGVsLmdldFVzZXJUeXBlKCkgaXMgdXNlclR5cGVcbiAgICAgICAgICBvbmVTZWxlY3RlZCA9IHRydWVcbiAgICAgICAgICBzZWxlY3RlZCA9IFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiXG4gICAgICAgIGVsc2VcbiAgICAgICAgICBzZWxlY3RlZCA9ICcnXG4gICAgICAgIGh0bWxPcHRpb25zICs9IFwiPG9wdGlvbiB2YWx1ZT0nI3t1c2VyVHlwZX0nICN7c2VsZWN0ZWR9PiN7dXNlclR5cGV9PC9vcHRpb24+XCJcblxuICAgICAgcHJvbXB0U2VsZWN0aW9uID0gXCI8b3B0aW9uIHNlbGVjdGVkPSdzZWxlY3RlZCcgZGlzYWJsZWQ9J2Rpc2FibGVkJz5QbGVhc2Ugc2VsZWN0IGEgdXNlciB0eXBlPC9vcHRpb24+XCIgdW5sZXNzIG9uZVNlbGVjdGVkXG5cbiAgICAgIEAkZWwuZmluZChcIiN1c2VyLXR5cGUtc2VsZWN0b3ItY29udGFpbmVyLSN7bW9kZWxJZH1cIikuaHRtbCBcIlxuICAgICAgICA8c2VsZWN0IGNsYXNzPSd1c2VyLXR5cGUnIGRhdGEtc3RlcC1pZD0nI3ttb2RlbElkfSc+XG4gICAgICAgICAgI3twcm9tcHRTZWxlY3Rpb258fCcnfVxuICAgICAgICAgICN7aHRtbE9wdGlvbnN9XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgXCJcblxuXG4gIHN0ZXBBZGQ6IC0+IEB3b3JrZmxvdy5uZXdDaGlsZCgpXG5cblxuIiwidmFyIFdvcmtmbG93RWRpdFZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuV29ya2Zsb3dFZGl0VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChXb3JrZmxvd0VkaXRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBXb3JrZmxvd0VkaXRWaWV3KCkge1xuICAgIHRoaXMudXBkYXRlU2VsZWN0b3IgPSBiaW5kKHRoaXMudXBkYXRlU2VsZWN0b3IsIHRoaXMpO1xuICAgIHRoaXMub25UeXBlU2VsZWN0b3JDaGFuZ2UgPSBiaW5kKHRoaXMub25UeXBlU2VsZWN0b3JDaGFuZ2UsIHRoaXMpO1xuICAgIHRoaXMucmVuZGVyID0gYmluZCh0aGlzLnJlbmRlciwgdGhpcyk7XG4gICAgdGhpcy51cGRhdGVFZGl0SW5QbGFjZU1vZGVscyA9IGJpbmQodGhpcy51cGRhdGVFZGl0SW5QbGFjZU1vZGVscywgdGhpcyk7XG4gICAgcmV0dXJuIFdvcmtmbG93RWRpdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBXb3JrZmxvd0VkaXRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIldvcmtmbG93RWRpdFZpZXdcIjtcblxuICBXb3JrZmxvd0VkaXRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSAkLmV4dGVuZCh7XG4gICAgJ2NsaWNrICAuYWRkJzogXCJzdGVwQWRkXCIsXG4gICAgJ2NoYW5nZSAudHlwZS1zZWxlY3Rvcic6ICdvblR5cGVTZWxlY3RvckNoYW5nZScsXG4gICAgJ2NoYW5nZSAudHlwZXMtaWQnOiAnb25UeXBlc0lkQ2hhbmdlJyxcbiAgICAnY2hhbmdlIC51c2VyLXR5cGUnOiAnb25Vc2VyVHlwZUNoYW5nZScsXG4gICAgJ2NoYW5nZSBpbnB1dFt0eXBlPXJhZGlvXSc6ICdvblJhZGlvQ2hhbmdlJyxcbiAgICAnY2xpY2sgLm9wZW4tc2VsZWN0b3InOiAnb3BlblNlbGVjdG9yJyxcbiAgICAnY2xpY2sgLnJlbW92ZS1zdGVwJzogJ3JlbW92ZVN0ZXAnXG4gIH0sIEJhY2tib25lLkVkaXRWaWV3LnByb3RvdHlwZS5ldmVudHMpO1xuXG4gIFdvcmtmbG93RWRpdFZpZXcucHJvdG90eXBlLnJlbW92ZVN0ZXAgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCBtb2RlbElkO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgbW9kZWxJZCA9ICR0YXJnZXQuYXR0cignZGF0YS1tb2RlbC1pZCcpO1xuICAgIHRoaXMud29ya2Zsb3cuY29sbGVjdGlvbi5yZW1vdmUobW9kZWxJZCk7XG4gICAgcmV0dXJuIHRoaXMud29ya2Zsb3cuc2F2ZShudWxsLCB7XG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFV0aWxzLnRvcEFsZXJ0KFwiU3RlcCByZW1vdmVkXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFdvcmtmbG93RWRpdFZpZXcucHJvdG90eXBlLm9wZW5TZWxlY3RvciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIG1vZGVsSWQsIHN0ZXBUeXBlO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgbW9kZWxJZCA9ICR0YXJnZXQuYXR0cignZGF0YS1tb2RlbC1pZCcpO1xuICAgIHN0ZXBUeXBlID0gJHRhcmdldC5hdHRyKCdkYXRhLXN0ZXAtdHlwZScpO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZVNlbGVjdG9yKG1vZGVsSWQsIHN0ZXBUeXBlKTtcbiAgfTtcblxuICBXb3JrZmxvd0VkaXRWaWV3LnByb3RvdHlwZS5vblR5cGVzSWRDaGFuZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCBzdGVwSWQsIHR5cGVJZDtcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgIHR5cGVJZCA9ICR0YXJnZXQudmFsKCk7XG4gICAgc3RlcElkID0gJHRhcmdldC5hdHRyKCdkYXRhLXN0ZXAtaWQnKTtcbiAgICByZXR1cm4gdGhpcy5tb2RlbHMuZ2V0KHN0ZXBJZCkuc2F2ZSh7XG4gICAgICBcInR5cGVzSWRcIjogdHlwZUlkXG4gICAgfSwge1xuICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBVdGlscy50b3BBbGVydChcIlNhdmVkXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFdvcmtmbG93RWRpdFZpZXcucHJvdG90eXBlLm9uVXNlclR5cGVDaGFuZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCBzdGVwSWQsIHVzZXJUeXBlO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgdXNlclR5cGUgPSAkdGFyZ2V0LnZhbCgpO1xuICAgIHN0ZXBJZCA9ICR0YXJnZXQuYXR0cignZGF0YS1zdGVwLWlkJyk7XG4gICAgcmV0dXJuIHRoaXMubW9kZWxzLmdldChzdGVwSWQpLnNhdmUoe1xuICAgICAgXCJ1c2VyVHlwZVwiOiB1c2VyVHlwZVxuICAgIH0sIHtcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVXRpbHMudG9wQWxlcnQoXCJTYXZlZFwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBXb3JrZmxvd0VkaXRWaWV3LnByb3RvdHlwZS5vblJhZGlvQ2hhbmdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldCwgZGF0YUlkLCBzdGVwSWQsIHZhbHVlO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgdmFsdWUgPSAkdGFyZ2V0LnZhbCgpO1xuICAgIGRhdGFJZCA9ICR0YXJnZXQuYXR0cignZGF0YS1pZCcpO1xuICAgIHN0ZXBJZCA9ICR0YXJnZXQuYXR0cignZGF0YS1zdGVwLWlkJyk7XG4gICAgaWYgKChzdGVwSWQgIT0gbnVsbCkgJiYgKGRhdGFJZCAhPSBudWxsKSkge1xuICAgICAgcmV0dXJuIHRoaXMubW9kZWxzLmdldChzdGVwSWQpLnNhdmUoe1xuICAgICAgICBkYXRhSWQ6IHZhbHVlXG4gICAgICB9LCB7XG4gICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBVdGlscy50b3BBbGVydChcIlNhdmVkXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3JrZmxvdy5zZXQoZGF0YUlkLCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcy53b3JrZmxvdy5zYXZlKG51bGwsIHtcbiAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFV0aWxzLnRvcEFsZXJ0KFwiU2F2ZWRcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBXb3JrZmxvd0VkaXRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBrZXksIHZhbHVlO1xuICAgIGZvciAoa2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIHZhbHVlID0gb3B0aW9uc1trZXldO1xuICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlRWRpdEluUGxhY2VNb2RlbHMoKTtcbiAgICByZXR1cm4gdGhpcy53b3JrZmxvdy5jb2xsZWN0aW9uLm9uKFwiY2hhbmdlIGFkZCByZW1vdmVcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLndvcmtmbG93LmNvbGxlY3Rpb24uc29ydCgpO1xuICAgICAgICBfdGhpcy51cGRhdGVFZGl0SW5QbGFjZU1vZGVscygpO1xuICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyKCk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuICBXb3JrZmxvd0VkaXRWaWV3LnByb3RvdHlwZS51cGRhdGVFZGl0SW5QbGFjZU1vZGVscyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1vZGVscyA9IG5ldyBCYWNrYm9uZS5Db2xsZWN0aW9uKFt0aGlzLndvcmtmbG93XS5jb25jYXQodGhpcy53b3JrZmxvdy5jb2xsZWN0aW9uLm1vZGVscykpO1xuICB9O1xuXG4gIFdvcmtmbG93RWRpdFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBodG1sLCBpLCBqLCBsZW4sIGxlbjEsIG1vZGVsLCByZWYsIHJlZjEsIHN0ZXBMaXN0O1xuICAgIHN0ZXBMaXN0ID0gXCJcIjtcbiAgICB0aGlzLm5lZWROYW1lcyA9IFtdO1xuICAgIHRoaXMubmVlZFNlbGVjdG9yID0gW107XG4gICAgdGhpcy53b3JrZmxvdy5jb2xsZWN0aW9uLmVhY2goKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RlcE1vZGVsKSB7XG4gICAgICAgIHZhciBkaXNwbGF5QXNzZXNzbWVudCwgZGlzcGxheUN1cnJpY3VsdW0sIGRpc3BsYXlMb2dpbiwgZGlzcGxheU1lc3NhZ2UsIGRpc3BsYXlOZXcsIHNlbGVjdGVkQXNzZXNzbWVudCwgc2VsZWN0ZWRDdXJyaWN1bHVtLCBzZWxlY3RlZExvZ2luLCBzZWxlY3RlZE1lc3NhZ2UsIHNlbGVjdGVkTmV3T2JqZWN0LCBzZWxlY3RlZE5vVHlwZSwgc3RlcFR5cGUsIHR5cGVTZWxlY3RvcjtcbiAgICAgICAgc3RlcFR5cGUgPSBzdGVwTW9kZWwuZ2V0VHlwZSgpO1xuICAgICAgICBpZiAoc3RlcFR5cGUgPT09IFwiYXNzZXNzbWVudFwiKSB7XG4gICAgICAgICAgc2VsZWN0ZWRBc3Nlc3NtZW50ID0gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ZXBUeXBlID09PSBcImN1cnJpY3VsdW1cIikge1xuICAgICAgICAgIHNlbGVjdGVkQ3VycmljdWx1bSA9IFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGVwVHlwZSA9PT0gXCJuZXdcIikge1xuICAgICAgICAgIHNlbGVjdGVkTmV3T2JqZWN0ID0gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ZXBUeXBlID09PSBcIm1lc3NhZ2VcIikge1xuICAgICAgICAgIHNlbGVjdGVkTWVzc2FnZSA9IFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGVwVHlwZSA9PT0gXCJsb2dpblwiKSB7XG4gICAgICAgICAgc2VsZWN0ZWRMb2dpbiA9IFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGVwVHlwZSA9PT0gXCJcIikge1xuICAgICAgICAgIHNlbGVjdGVkTm9UeXBlID0gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ZXBUeXBlID09PSBcIlwiIHx8IHN0ZXBUeXBlICE9PSBcImFzc2Vzc21lbnRcIikge1xuICAgICAgICAgIGRpc3BsYXlBc3Nlc3NtZW50ID0gXCJkaXNwbGF5Om5vbmU7XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ZXBUeXBlID09PSBcIlwiIHx8IHN0ZXBUeXBlICE9PSBcImN1cnJpY3VsdW1cIikge1xuICAgICAgICAgIGRpc3BsYXlDdXJyaWN1bHVtID0gXCJkaXNwbGF5Om5vbmU7XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ZXBUeXBlID09PSBcIlwiIHx8IHN0ZXBUeXBlICE9PSBcIm5ld1wiKSB7XG4gICAgICAgICAgZGlzcGxheU5ldyA9IFwiZGlzcGxheTpub25lO1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGVwVHlwZSA9PT0gXCJcIiB8fCBzdGVwVHlwZSAhPT0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgICBkaXNwbGF5TWVzc2FnZSA9IFwiZGlzcGxheTpub25lO1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGVwVHlwZSA9PT0gXCJcIiB8fCBzdGVwVHlwZSAhPT0gXCJsb2dpblwiKSB7XG4gICAgICAgICAgZGlzcGxheUxvZ2luID0gXCJkaXNwbGF5Om5vbmU7XCI7XG4gICAgICAgIH1cbiAgICAgICAgdHlwZVNlbGVjdG9yID0gXCI8c2VsZWN0IGNsYXNzPSd0eXBlLXNlbGVjdG9yJyBkYXRhLWlkPSdcIiArIHN0ZXBNb2RlbC5pZCArIFwiJz4gPG9wdGlvbiBkaXNhYmxlZD0nZGlzYWJsZWQnIFwiICsgKHNlbGVjdGVkTm9UeXBlIHx8ICcnKSArIFwiID5TZWxlY3QgdHlwZTwvb3B0aW9uPiA8b3B0aW9uIFwiICsgKHNlbGVjdGVkQXNzZXNzbWVudCB8fCAnJykgKyBcIiB2YWx1ZT0nYXNzZXNzbWVudCc+QXNzZXNzbWVudDwvb3B0aW9uPiA8b3B0aW9uIFwiICsgKHNlbGVjdGVkQ3VycmljdWx1bSB8fCAnJykgKyBcIiB2YWx1ZT0nY3VycmljdWx1bSc+Q3VycmljdWx1bTwvb3B0aW9uPiA8b3B0aW9uIFwiICsgKHNlbGVjdGVkTWVzc2FnZSB8fCAnJykgKyBcIiB2YWx1ZT0nbWVzc2FnZSc+TWVzc2FnZTwvb3B0aW9uPiA8b3B0aW9uIFwiICsgKHNlbGVjdGVkTmV3T2JqZWN0IHx8ICcnKSArIFwiIHZhbHVlPSduZXcnPk5ldyBPYmplY3Q8L29wdGlvbj4gPG9wdGlvbiBcIiArIChzZWxlY3RlZExvZ2luIHx8ICcnKSArIFwiIHZhbHVlPSdsb2dpbic+TG9naW48L29wdGlvbj4gPC9zZWxlY3Q+XCI7XG4gICAgICAgIHN0ZXBMaXN0ICs9IFwiPGxpPiA8dGFibGU+IDx0cj4gPHRoPk5hbWU8L3RoPiA8dGQ+XCIgKyAoX3RoaXMuZ2V0RWRpdGFibGUoe1xuICAgICAgICAgIG1vZGVsOiBzdGVwTW9kZWwsXG4gICAgICAgICAgYXR0cmlidXRlOiB7XG4gICAgICAgICAgICBrZXk6ICduYW1lJyxcbiAgICAgICAgICAgIGVzY2FwZTogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogJ1N0ZXAgbmFtZScsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6ICd1bnRpdGxlZCBzdGVwJ1xuICAgICAgICB9KSkgKyBcIiA8L3RkPiA8L3RyPiA8dHI+IDx0aD5PcmRlcjwvdGg+IDx0ZD5cIiArIChfdGhpcy5nZXRFZGl0YWJsZSh7XG4gICAgICAgICAgbW9kZWw6IHN0ZXBNb2RlbCxcbiAgICAgICAgICBhdHRyaWJ1dGU6IHtcbiAgICAgICAgICAgIGtleTogJ29yZGVyJyxcbiAgICAgICAgICAgIGlzTnVtYmVyOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBuYW1lOiAnT3JkZXInLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiAnT3JkZXInXG4gICAgICAgIH0pKSArIFwiIDwvdGQ+IDwvdHI+IDx0cj4gPHRoPlJlc3VtYWJsZTwvdGg+IDx0ZD5cIiArIChfdGhpcy5nZXRFZGl0YWJsZSh7XG4gICAgICAgICAgbW9kZWw6IHN0ZXBNb2RlbCxcbiAgICAgICAgICBhdHRyaWJ1dGU6IHtcbiAgICAgICAgICAgIGtleTogJ3Jlc3VtYWJsZScsXG4gICAgICAgICAgICBlc2NhcGU6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIG5hbWU6ICdSZXN1bWFibGUnLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiAndHJ1ZSBvciBmYWxzZScsXG4gICAgICAgICAgcHJlcGFyZTogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBDb2ZmZWVTY3JpcHQuY29tcGlsZShcInJldHVybiBcIiArIHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKSArIFwiIDwvdGQ+IDwvdHI+IDx0cj4gPHRoPlNraXAgbG9naWM8L3RoPiA8dGQ+XCIgKyAoX3RoaXMuZ2V0RWRpdGFibGUoe1xuICAgICAgICAgIG1vZGVsOiBzdGVwTW9kZWwsXG4gICAgICAgICAgYXR0cmlidXRlOiB7XG4gICAgICAgICAgICBrZXk6ICdza2lwTG9naWMnLFxuICAgICAgICAgICAgZXNjYXBlOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBuYW1lOiAnU2tpcCBsb2dpYycsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6ICdTa2lwIGxvZ2ljJyxcbiAgICAgICAgICBwcmVwYXJlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIENvZmZlZVNjcmlwdC5jb21waWxlKFwicmV0dXJuIFwiICsgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpICsgXCIgPC90ZD4gPC90cj4gPHRyPiA8dGg+VHlwZTwvdGg+IDx0ZD4gXCIgKyB0eXBlU2VsZWN0b3IgKyBcIjxicj4gPGRpdiBpZD0ndHlwZVNlbGVjdG9yQ29udGFpbmVyLVwiICsgc3RlcE1vZGVsLmlkICsgXCInPjwvZGl2PiA8L3RkPiA8L3RyPiA8dHIgY2xhc3M9J21lc3NhZ2Utb25seSBub3QtbmV3IG5vdC1sb2dpbiBub3QtYXNzZXNzbWVudCBub3QtY3VycmljdWx1bScgc3R5bGU9J1wiICsgKGRpc3BsYXlNZXNzYWdlIHx8ICcnKSArIFwiJz4gPHRoPk1lc3NhZ2U8L3RoPiA8dGQ+XCIgKyAoX3RoaXMuZ2V0RWRpdGFibGUoe1xuICAgICAgICAgIG1vZGVsOiBzdGVwTW9kZWwsXG4gICAgICAgICAgYXR0cmlidXRlOiB7XG4gICAgICAgICAgICBrZXk6ICdtZXNzYWdlJyxcbiAgICAgICAgICAgIGVzY2FwZTogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogJ01lc3NhZ2UnLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiAnTWVzc2FnZSdcbiAgICAgICAgfSkpICsgXCIgPC90ZD4gPC90cj4gPHRyIGNsYXNzPSduZXctb25seSBub3QtbG9naW4gbm90LWFzc2Vzc21lbnQgbm90LW5ldyBub3QtY3VycmljdWx1bScgc3R5bGU9J1wiICsgKGRpc3BsYXlOZXcgfHwgJycpICsgXCInPiA8dGg+T2JqZWN0IFR5cGU8L3RoPiA8dGQ+XCIgKyAoX3RoaXMuZ2V0RWRpdGFibGUoe1xuICAgICAgICAgIG1vZGVsOiBzdGVwTW9kZWwsXG4gICAgICAgICAgYXR0cmlidXRlOiB7XG4gICAgICAgICAgICBrZXk6ICdjbGFzc05hbWUnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBuYW1lOiAnQ2xhc3MgbmFtZScsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6ICdDbGFzcyBuYW1lJ1xuICAgICAgICB9KSkgKyBcIiA8L3RkPiA8L3RyPiA8dHIgY2xhc3M9J25ldy1vbmx5IG5vdC1sb2dpbiBub3QtYXNzZXNzbWVudCBub3QtbmV3IG5vdC1jdXJyaWN1bHVtJyBzdHlsZT0nXCIgKyAoZGlzcGxheU5ldyB8fCAnJykgKyBcIic+IDx0aD5PYmplY3Qgb3B0aW9uczwvdGg+IDx0ZD5cIiArIChfdGhpcy5nZXRFZGl0YWJsZSh7XG4gICAgICAgICAgbW9kZWw6IHN0ZXBNb2RlbCxcbiAgICAgICAgICBhdHRyaWJ1dGU6IHtcbiAgICAgICAgICAgIGtleTogJ2NsYXNzT3B0aW9ucydcbiAgICAgICAgICB9LFxuICAgICAgICAgIG5hbWU6ICdDbGFzcyBPcHRpb25zJyxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogJ0NsYXNzIG9wdGlvbnMnLFxuICAgICAgICAgIHByZXBhcmU6IGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBDb2ZmZWVTY3JpcHQuY29tcGlsZShcInJldHVybiBcIiArIHByb3ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpICsgXCIgPC90ZD4gPC90cj4gPHRyIGNsYXNzPSdsb2dpbi1vbmx5IG5vdC1hc3Nlc3NtZW50IG5vdC1uZXcgbm90LWN1cnJpY3VsdW0nIHN0eWxlPSdcIiArIChkaXNwbGF5TG9naW4gfHwgJycpICsgXCInPiA8dGg+TG9naW4gdHlwZTwvdGg+IDx0ZCBpZD0ndXNlci10eXBlLXNlbGVjdG9yLWNvbnRhaW5lci1cIiArIHN0ZXBNb2RlbC5pZCArIFwiJz4gXCIgKyAoc3RlcE1vZGVsLmdldFVzZXJUeXBlKCkpICsgXCIgPHNwYW4gY2xhc3M9J2xpbmsgb3Blbi1zZWxlY3RvcicgZGF0YS1tb2RlbC1pZD0nXCIgKyBzdGVwTW9kZWwuaWQgKyBcIicgZGF0YS1zdGVwLXR5cGU9J2xvZ2luJz5DaGFuZ2U8L3NwYW4+IDwvdGQ+IDwvdHI+IDx0ciBjbGFzcz0nY3VycmljdWx1bS1vbmx5IG5vdC1hc3Nlc3NtZW50IG5vdC1uZXcgbm90LWxvZ2luJyBzdHlsZT0nXCIgKyAoZGlzcGxheUN1cnJpY3VsdW0gfHwgJycpICsgXCInPiA8dGg+SXRlbSB0eXBlIHZhcmlhYmxlPC90aD4gPHRkPlwiICsgKF90aGlzLmdldEVkaXRhYmxlKHtcbiAgICAgICAgICBtb2RlbDogc3RlcE1vZGVsLFxuICAgICAgICAgIGF0dHJpYnV0ZToge1xuICAgICAgICAgICAga2V5OiAnY3VycmljdWx1bUl0ZW1UeXBlJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogJ0l0ZW0gdHlwZSB2YXJpYWJsZScsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6ICdJdGVtIHR5cGUnXG4gICAgICAgIH0pKSArIFwiIDwvdGQ+IDwvdHI+IDx0ciBjbGFzcz0nY3VycmljdWx1bS1vbmx5IG5vdC1hc3Nlc3NtZW50IG5vdC1uZXcgbm90LWxvZ2luJyBzdHlsZT0nXCIgKyAoZGlzcGxheUN1cnJpY3VsdW0gfHwgJycpICsgXCInPiA8dGg+V2VlayB2YXJpYWJsZTwvdGg+IDx0ZD5cIiArIChfdGhpcy5nZXRFZGl0YWJsZSh7XG4gICAgICAgICAgbW9kZWw6IHN0ZXBNb2RlbCxcbiAgICAgICAgICBhdHRyaWJ1dGU6IHtcbiAgICAgICAgICAgIGtleTogJ2N1cnJpY3VsdW1XZWVrJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogJ1dlZWsgdmFyaWFibGUnLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiAnV2VlayB2YXJpYWJsZSdcbiAgICAgICAgfSkpICsgXCIgPC90ZD4gPC90cj4gPHRyIGNsYXNzPSdjdXJyaWN1bHVtLW9ubHkgbm90LWFzc2Vzc21lbnQgbm90LW5ldyBub3QtbG9naW4nIHN0eWxlPSdcIiArIChkaXNwbGF5Q3VycmljdWx1bSB8fCAnJykgKyBcIic+IDx0aD5HcmFkZSB2YXJpYWJsZTwvdGg+IDx0ZD5cIiArIChfdGhpcy5nZXRFZGl0YWJsZSh7XG4gICAgICAgICAgbW9kZWw6IHN0ZXBNb2RlbCxcbiAgICAgICAgICBhdHRyaWJ1dGU6IHtcbiAgICAgICAgICAgIGtleTogJ2N1cnJpY3VsdW1HcmFkZSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIG5hbWU6ICdHcmFkZSB2YXJpYWJsZScsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6ICdHcmFkZSB2YXJpYWJsZSdcbiAgICAgICAgfSkpICsgXCIgPC90ZD4gPC90cj4gPHRyPiA8dGQ+PGJ1dHRvbiBjbGFzcz0nY29tbWFuZCByZW1vdmUtc3RlcCcgZGF0YS1tb2RlbC1pZD0nXCIgKyBzdGVwTW9kZWwuaWQgKyBcIic+UmVtb3ZlPC9idXR0b24+PC90ZD4gPC90cj4gPC90YWJsZT4gPC9saT5cIjtcbiAgICAgICAgaWYgKHN0ZXBUeXBlID09PSBcImFzc2Vzc21lbnRcIiB8fCBzdGVwVHlwZSA9PT0gXCJjdXJyaWN1bHVtXCIpIHtcbiAgICAgICAgICBfdGhpcy5uZWVkTmFtZXMucHVzaChzdGVwTW9kZWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGVwVHlwZSA9PT0gXCJhc3Nlc3NtZW50XCIgJiYgc3RlcE1vZGVsLmdldFR5cGVzSWQoKSA9PT0gXCJcIikge1xuICAgICAgICAgIF90aGlzLm5lZWRTZWxlY3Rvci5wdXNoKHN0ZXBNb2RlbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ZXBUeXBlID09PSBcImN1cnJpY3VsdW1cIiAmJiBzdGVwTW9kZWwuZ2V0VHlwZXNJZCgpID09PSBcIlwiKSB7XG4gICAgICAgICAgX3RoaXMubmVlZFNlbGVjdG9yLnB1c2goc3RlcE1vZGVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RlcFR5cGUgPT09IFwibG9naW5cIiAmJiBzdGVwTW9kZWwuZ2V0VXNlclR5cGUoKSA9PT0gXCJcIikge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5uZWVkU2VsZWN0b3IucHVzaChzdGVwTW9kZWwpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICBodG1sID0gXCI8c2VjdGlvbj4gPHRhYmxlPiA8dHI+IDx0ZD48aDE+TmFtZTogPC9oMT48L3RkPiA8dGQ+IDxoMT5cIiArICh0aGlzLmdldEVkaXRhYmxlKHtcbiAgICAgIG1vZGVsOiB0aGlzLndvcmtmbG93LFxuICAgICAgYXR0cmlidXRlOiB7XG4gICAgICAgIGtleTogJ25hbWUnLFxuICAgICAgICBlc2NhcGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBuYW1lOiBcIldvcmtmbG93IG5hbWVcIixcbiAgICAgIHBsYWNlaG9sZGVyOiBcIlVudGl0bGVkIHdvcmtmbG93XCJcbiAgICB9KSkgKyBcIiA8L2gxPiA8L3RkPiA8L3RyPiA8dHI+IDx0aD5GZWVkYmFjayBFbmFibGVkOiA8L3RoPiA8dGQ+IDxkaXYgaWQ9J2VuYWJsZV9mZWVkYmFja19yYWRpbycgY2xhc3M9J2J1dHRvbnNldCcgc3R5bGU9J2Zsb2F0OiBsZWZ0OyBwYWRkaW5nLXJpZ2h0OiAxNXB4Oyc+IDxsYWJlbCBmb3I9J2VuYWJsZV9mZWVkYmFja190cnVlJz5ZZXM8L2xhYmVsPjxpbnB1dCBuYW1lPSdlbmFibGVGZWVkYmFjaycgZGF0YS1pZD0nZW5hYmxlRmVlZGJhY2snIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZScgaWQ9J2VuYWJsZV9mZWVkYmFja190cnVlJyBcIiArICh0aGlzLndvcmtmbG93LmdldCgnZW5hYmxlRmVlZGJhY2snKSA9PT0gJ3RydWUnID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8bGFiZWwgZm9yPSdlbmFibGVfZmVlZGJhY2tfZmFsc2UnPk5vPC9sYWJlbD48aW5wdXQgbmFtZT0nZW5hYmxlRmVlZGJhY2snIGRhdGEtaWQ9J2VuYWJsZUZlZWRiYWNrJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0nZW5hYmxlX2ZlZWRiYWNrX2ZhbHNlJyBcIiArICghKHRoaXMud29ya2Zsb3cuZ2V0KCdlbmFibGVGZWVkYmFjaycpID09PSAndHJ1ZScpID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8L2Rpdj4gPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBmZWVkYmFjayBuYXYtYnV0dG9uJz48YSBocmVmPScjZmVlZGJhY2svZWRpdC9cIiArIHRoaXMud29ya2Zsb3cuaWQgKyBcIic+RWRpdCBGZWVkYmFjazwvYT48L2J1dHRvbj4gPC90ZD4gPC90cj4gPHRyPiA8dGg+TWVkaWEgT3ZlcmxheSBGaWxlOiA8L3RoPiA8dGQ+IFwiICsgKHRoaXMuZ2V0RWRpdGFibGUoe1xuICAgICAgbW9kZWw6IHRoaXMud29ya2Zsb3csXG4gICAgICBhdHRyaWJ1dGU6IHtcbiAgICAgICAga2V5OiAnbWVkaWFPdmVybGF5RmlsZScsXG4gICAgICAgIGVzY2FwZTogdHJ1ZVxuICAgICAgfSxcbiAgICAgIG5hbWU6IFwiTWVkaWEgT3ZlcmxheSBGaWxlIE5hbWUgTG9naWNcIixcbiAgICAgIHBsYWNlaG9sZGVyOiBcIltMb2dpYyByZXR1cm5pbmcgbWVkaWEgb3ZlcmxheSBmaWxlIG5hbWUgLSBsZWF2ZSBlbXB0eSBpZiBubyBNZWRpYSBPdmVybGF5IGlzIGVuYWJsZWRdXCJcbiAgICB9KSkgKyBcIiA8L3RkPiA8L3RyPiA8L3RhYmxlPiA8L3NlY3Rpb24+IDxkaXYgY2xhc3M9J21lbnVib3gnPiA8aDI+U3RlcHM8L2gyPiA8dWwgaWQ9J3N0ZXAtbGlzdCc+XCIgKyBzdGVwTGlzdCArIFwiPC91bD4gPC9kaXY+IDxkaXYgaWQ9J2NvbnRyb2xzJz4gPGJ1dHRvbiBjbGFzcz0nYWRkIGNvbW1hbmQnPkFkZCBzdGVwPC9idXR0b24+IDwvZGl2PlwiO1xuICAgIHRoaXMuJGVsLmh0bWwoaHRtbCk7XG4gICAgcmVmID0gdGhpcy5uZWVkTmFtZXM7XG4gICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBtb2RlbCA9IHJlZltpXTtcbiAgICAgIGlmIChtb2RlbC5nZXRUeXBlc0lkKCkpIHtcbiAgICAgICAgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIChmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgICAgdmFyIHR5cGVNb2RlbDtcbiAgICAgICAgICAgIHR5cGVNb2RlbCA9IG5ldyBCYWNrYm9uZS5Nb2RlbCh7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IG1vZGVsLmdldFR5cGVzSWQoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHlwZU1vZGVsLmZldGNoKHtcbiAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy4kZWwuZmluZChcIiN0eXBlU2VsZWN0b3JDb250YWluZXItXCIgKyBtb2RlbC5pZCkuaHRtbChcIk5vdCBmb3VuZCA8c3BhbiBjbGFzcz0nbGluayBvcGVuLXNlbGVjdG9yJyBkYXRhLW1vZGVsLWlkPSdcIiArIG1vZGVsLmlkICsgXCInIGRhdGEtc3RlcC10eXBlPSdcIiArIChtb2RlbC5nZXRUeXBlKCkpICsgXCInPkNoYW5nZTwvc3Bhbj5cIik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy4kZWwuZmluZChcIiN0eXBlU2VsZWN0b3JDb250YWluZXItXCIgKyBtb2RlbC5pZCkuaHRtbCh0eXBlTW9kZWwuZ2V0KFwibmFtZVwiKSArIChcIiA8c3BhbiBjbGFzcz0nbGluayBvcGVuLXNlbGVjdG9yJyBkYXRhLW1vZGVsLWlkPSdcIiArIG1vZGVsLmlkICsgXCInIGRhdGEtc3RlcC10eXBlPSdcIiArIChtb2RlbC5nZXRUeXBlKCkpICsgXCInPkNoYW5nZTwvc3Bhbj5cIikpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSkodGhpcykobW9kZWwpO1xuICAgICAgfVxuICAgIH1cbiAgICByZWYxID0gdGhpcy5uZWVkU2VsZWN0b3I7XG4gICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICBtb2RlbCA9IHJlZjFbal07XG4gICAgICB0aGlzLnVwZGF0ZVNlbGVjdG9yKG1vZGVsLmlkLCBtb2RlbC5nZXRUeXBlKCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgV29ya2Zsb3dFZGl0Vmlldy5wcm90b3R5cGUub25UeXBlU2VsZWN0b3JDaGFuZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCBtb2RlbCwgdmFsdWU7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICBtb2RlbCA9IHRoaXMubW9kZWxzLmdldCgkdGFyZ2V0LmF0dHIoJ2RhdGEtaWQnKSk7XG4gICAgdmFsdWUgPSAkdGFyZ2V0LnZhbCgpO1xuICAgIHJldHVybiBtb2RlbC5zYXZlKHtcbiAgICAgIFwidHlwZVwiOiB2YWx1ZVxuICAgIH0sIHtcbiAgICAgIGVycm9yOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiQ291bGQgbm90IHNhdmUuIFBsZWFzZSB0cnkgYWdhaW4uXCIpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgJHBhcmVudDtcbiAgICAgICAgICBVdGlscy50b3BBbGVydChcIlR5cGUgc2F2ZWRcIik7XG4gICAgICAgICAgJHBhcmVudCA9ICR0YXJnZXQucGFyZW50KFwibGlcIik7XG4gICAgICAgICAgJHBhcmVudC5maW5kKFwiLlwiICsgdmFsdWUgKyBcIi1vbmx5XCIpLnNob3coKTtcbiAgICAgICAgICAkcGFyZW50LmZpbmQoXCIubm90LVwiICsgdmFsdWUpLmhpZGUoKTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlU2VsZWN0b3IobW9kZWwuaWQsIHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgV29ya2Zsb3dFZGl0Vmlldy5wcm90b3R5cGUudXBkYXRlU2VsZWN0b3IgPSBmdW5jdGlvbihtb2RlbElkLCB0eXBlKSB7XG4gICAgdmFyIGN1cnJpY3VsYSwgaHRtbE9wdGlvbnMsIGksIGxlbiwgb25lU2VsZWN0ZWQsIHBvc3NpYmxlVHlwZXMsIHByb21wdFNlbGVjdGlvbiwgc2VsZWN0ZWQsIHN0ZXBNb2RlbCwgdXNlclR5cGU7XG4gICAgaWYgKHR5cGUgPT09IFwiYXNzZXNzbWVudFwiKSB7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiI3R5cGVTZWxlY3RvckNvbnRhaW5lci1cIiArIG1vZGVsSWQpLmh0bWwoXCI8aW1nIHNyYz0naW1hZ2VzL2xvYWRpbmcuZ2lmJyBjbGFzcz0nbG9hZGluZyc+XCIpO1xuICAgICAgaWYgKHRoaXMuYXNzZXNzbWVudHMgPT0gbnVsbCkge1xuICAgICAgICB0aGlzLmFzc2Vzc21lbnRzID0gbmV3IEFzc2Vzc21lbnRzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuYXNzZXNzbWVudHMuZmV0Y2goe1xuICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYXNzZXNzbWVudCwgaHRtbE9wdGlvbnMsIGksIGxlbiwgb25lU2VsZWN0ZWQsIHByb21wdFNlbGVjdGlvbiwgcmVmLCBzZWxlY3RlZDtcbiAgICAgICAgICAgIG9uZVNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICBodG1sT3B0aW9ucyA9IFwiXCI7XG4gICAgICAgICAgICByZWYgPSBfdGhpcy5hc3Nlc3NtZW50cy5tb2RlbHM7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgYXNzZXNzbWVudCA9IHJlZltpXTtcbiAgICAgICAgICAgICAgaWYgKGFzc2Vzc21lbnQuaWQgPT09IF90aGlzLndvcmtmbG93LmNvbGxlY3Rpb24uZ2V0KG1vZGVsSWQpLmdldFR5cGVzSWQoKSkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCI7XG4gICAgICAgICAgICAgICAgb25lU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaHRtbE9wdGlvbnMgKz0gXCI8b3B0aW9uIHZhbHVlPSdcIiArIGFzc2Vzc21lbnQuaWQgKyBcIicgXCIgKyAoc2VsZWN0ZWQgfHwgJycpICsgXCI+XCIgKyAoYXNzZXNzbWVudC5nZXQoJ25hbWUnKSkgKyBcIjwvb3B0aW9uPlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvbmVTZWxlY3RlZCkge1xuICAgICAgICAgICAgICBwcm9tcHRTZWxlY3Rpb24gPSBcIjxvcHRpb24gc2VsZWN0ZWQ9J3NlbGVjdGVkJyBkaXNhYmxlZD0nZGlzYWJsZWQnPlBsZWFzZSBzZWxlY3QgYW4gYXNzZXNzbWVudDwvb3B0aW9uPlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLiRlbC5maW5kKFwiI3R5cGVTZWxlY3RvckNvbnRhaW5lci1cIiArIG1vZGVsSWQpLmh0bWwoXCI8c2VsZWN0IGNsYXNzPSd0eXBlcy1pZCcgZGF0YS1zdGVwLWlkPSdcIiArIG1vZGVsSWQgKyBcIic+IFwiICsgKHByb21wdFNlbGVjdGlvbiB8fCAnJykgKyBcIiBcIiArIGh0bWxPcHRpb25zICsgXCIgPC9zZWxlY3Q+XCIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiY3VycmljdWx1bVwiKSB7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiI3R5cGVTZWxlY3RvckNvbnRhaW5lci1cIiArIG1vZGVsSWQpLmh0bWwoXCI8aW1nIHNyYz0naW1hZ2VzL2xvYWRpbmcuZ2lmJyBjbGFzcz0nbG9hZGluZyc+XCIpO1xuICAgICAgY3VycmljdWxhID0gbmV3IEN1cnJpY3VsYTtcbiAgICAgIHJldHVybiBjdXJyaWN1bGEuZmV0Y2goe1xuICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaHRtbE9wdGlvbnMsIGksIGxlbiwgbW9kZWwsIG9uZVNlbGVjdGVkLCBwcm9tcHRTZWxlY3Rpb24sIHJlZiwgc2VsZWN0ZWQ7XG4gICAgICAgICAgICBvbmVTZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaHRtbE9wdGlvbnMgPSAnJztcbiAgICAgICAgICAgIHJlZiA9IGN1cnJpY3VsYS5tb2RlbHM7XG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgbW9kZWwgPSByZWZbaV07XG4gICAgICAgICAgICAgIGlmIChtb2RlbC5pZCA9PT0gX3RoaXMud29ya2Zsb3cuY29sbGVjdGlvbi5nZXQobW9kZWxJZCkuZ2V0VHlwZXNJZCgpKSB7XG4gICAgICAgICAgICAgICAgb25lU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBodG1sT3B0aW9ucyArPSBcIjxvcHRpb24gdmFsdWU9J1wiICsgbW9kZWwuaWQgKyBcIicgXCIgKyBzZWxlY3RlZCArIFwiPlwiICsgKG1vZGVsLmdldCgnbmFtZScpKSArIFwiPC9vcHRpb24+XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW9uZVNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgIHByb21wdFNlbGVjdGlvbiA9IFwiPG9wdGlvbiBzZWxlY3RlZD0nc2VsZWN0ZWQnIGRpc2FibGVkPSdkaXNhYmxlZCc+UGxlYXNlIHNlbGVjdCBhbiBhc3Nlc3NtZW50PC9vcHRpb24+XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuJGVsLmZpbmQoXCIjdHlwZVNlbGVjdG9yQ29udGFpbmVyLVwiICsgbW9kZWxJZCkuaHRtbChcIjxzZWxlY3QgY2xhc3M9J3R5cGVzLWlkJyBkYXRhLXN0ZXAtaWQ9J1wiICsgbW9kZWxJZCArIFwiJz4gXCIgKyAocHJvbXB0U2VsZWN0aW9uIHx8ICcnKSArIFwiIFwiICsgaHRtbE9wdGlvbnMgKyBcIiA8L3NlbGVjdD48YnI+XCIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwibG9naW5cIikge1xuICAgICAgcG9zc2libGVUeXBlcyA9IFsndGFjJywgJ3RlYWNoZXInXTtcbiAgICAgIG9uZVNlbGVjdGVkID0gZmFsc2U7XG4gICAgICBodG1sT3B0aW9ucyA9ICcnO1xuICAgICAgc3RlcE1vZGVsID0gdGhpcy53b3JrZmxvdy5jb2xsZWN0aW9uLmdldChtb2RlbElkKTtcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHBvc3NpYmxlVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdXNlclR5cGUgPSBwb3NzaWJsZVR5cGVzW2ldO1xuICAgICAgICBpZiAoc3RlcE1vZGVsLmdldFVzZXJUeXBlKCkgPT09IHVzZXJUeXBlKSB7XG4gICAgICAgICAgb25lU2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNlbGVjdGVkID0gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZWN0ZWQgPSAnJztcbiAgICAgICAgfVxuICAgICAgICBodG1sT3B0aW9ucyArPSBcIjxvcHRpb24gdmFsdWU9J1wiICsgdXNlclR5cGUgKyBcIicgXCIgKyBzZWxlY3RlZCArIFwiPlwiICsgdXNlclR5cGUgKyBcIjwvb3B0aW9uPlwiO1xuICAgICAgfVxuICAgICAgaWYgKCFvbmVTZWxlY3RlZCkge1xuICAgICAgICBwcm9tcHRTZWxlY3Rpb24gPSBcIjxvcHRpb24gc2VsZWN0ZWQ9J3NlbGVjdGVkJyBkaXNhYmxlZD0nZGlzYWJsZWQnPlBsZWFzZSBzZWxlY3QgYSB1c2VyIHR5cGU8L29wdGlvbj5cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiI3VzZXItdHlwZS1zZWxlY3Rvci1jb250YWluZXItXCIgKyBtb2RlbElkKS5odG1sKFwiPHNlbGVjdCBjbGFzcz0ndXNlci10eXBlJyBkYXRhLXN0ZXAtaWQ9J1wiICsgbW9kZWxJZCArIFwiJz4gXCIgKyAocHJvbXB0U2VsZWN0aW9uIHx8ICcnKSArIFwiIFwiICsgaHRtbE9wdGlvbnMgKyBcIiA8L3NlbGVjdD5cIik7XG4gICAgfVxuICB9O1xuXG4gIFdvcmtmbG93RWRpdFZpZXcucHJvdG90eXBlLnN0ZXBBZGQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy53b3JrZmxvdy5uZXdDaGlsZCgpO1xuICB9O1xuXG4gIHJldHVybiBXb3JrZmxvd0VkaXRWaWV3O1xuXG59KShCYWNrYm9uZS5FZGl0Vmlldyk7XG5cbiIsImNsYXNzIFdvcmtmbG93UnVuVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcbiAgXG4gIGV2ZW50czpcbiAgICBcImNsaWNrIC5wcmV2aW91c1wiIDogXCJwcmV2aW91c1N0ZXBcIlxuICAgIFwiY2xpY2sgLm5leHRcIiAgICAgOiBcIm5leHRTdGVwXCJcblxuICBzd2l0Y2g6ID0+XG4gICAgQCRlbC50b2dnbGUoKVxuICAgIEAkbGVzc29uQ29udGFpbmVyLnRvZ2dsZSgpXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgQFtrZXldID0gdmFsdWUgZm9yIGtleSwgdmFsdWUgb2Ygb3B0aW9uc1xuICAgIEB0cmlwSWQgPSBVdGlscy5ndWlkKCkgdW5sZXNzIEB0cmlwSWQ/XG4gICAgQGluZGV4ID0gMCB1bmxlc3MgQGluZGV4P1xuICAgIEBzdGVwcyA9IFtdIHVubGVzcyBAc3RlcHM/XG4gICAgQGN1cnJlbnRTdGVwID0gQHdvcmtmbG93LnN0ZXBNb2RlbEJ5SW5kZXggQGluZGV4XG4gICAgQHN1YlZpZXdSZW5kZXJlZCA9IGZhbHNlXG5cbiAgc2hvdWxkU2tpcDogLT5cbiAgICBjdXJyZW50U3RlcCA9IEB3b3JrZmxvdy5zdGVwTW9kZWxCeUluZGV4IEBpbmRleFxuICAgIHJldHVybiBmYWxzZSB1bmxlc3MgY3VycmVudFN0ZXA/XG4gICAgc2tpcExvZ2ljQ29kZSA9IGN1cnJlbnRTdGVwLmdldFN0cmluZyhcInNraXBMb2dpYy1jb29rZWRcIilcbiAgICB1bmxlc3MgXyhza2lwTG9naWNDb2RlKS5pc0VtcHR5U3RyaW5nKClcblxuICAgICAgdHJ5XG4gICAgICAgIHNob3VsZFNraXAgPSBldmFsKHNraXBMb2dpY0NvZGUpXG4gICAgICBjYXRjaCBlXG4gICAgICAgIFV0aWxzLnN0aWNreSBcIldvcmtmbG93IHNraXAgbG9naWMgZXJyb3I8YnI+I3tlLm1lc3NhZ2V9XCJcblxuICAgICAgcmV0dXJuIHNob3VsZFNraXBcblxuICAgIHJldHVybiBmYWxzZVxuXG4gIHJlbmRlcjogLT5cbiAgICBpZiBAc2hvdWxkU2tpcCgpXG4gICAgICBAc3ViVmlld1JlbmRlcmVkID0gdHJ1ZVxuICAgICAgcmV0dXJuIEBuZXh0U3RlcCgpXG5cbiAgICBzdGVwSW5kaWNhdG9yID0gXCI8ZGl2IGlkPSd3b3JrZmxvdy1wcm9ncmVzcyc+PC9kaXY+XCJcblxuICAgIG5leHRCdXR0b24gPSBcIlxuICAgICAgPGRpdiBjbGFzcz0nY2xlYXJmaXgnPjxidXR0b24gY2xhc3M9J25hdi1idXR0b24gbmV4dCc+TmV4dDwvYnV0dG9uPjwvZGl2PlxuICAgIFwiIGlmIEBpbmRleCBpc250IEB3b3JrZmxvdy5nZXRDaGlsZHJlbigpLmxlbmd0aCAtIDFcblxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgI3tzdGVwSW5kaWNhdG9yfVxuICAgICAgPGRpdiBpZD0naGVhZGVyLWNvbnRhaW5lcic+PC9kaXY+XG4gICAgICA8c2VjdGlvbiBpZD0nI3tAY2lkfV9jdXJyZW50X3N0ZXAnPjwvc2VjdGlvbj5cbiAgICAgIDwhLS1idXR0b24gY2xhc3M9J25hdi1idXR0b24gcHJldmlvdXMnPlByZXZpb3VzPC9idXR0b24tLT5cbiAgICAgICN7bmV4dEJ1dHRvbiB8fCAnJ31cbiAgICBcIlxuXG4gICAgQHJlbmRlclN0ZXAoKVxuICAgIEBjaGVja0luY29tcGxldGVzKClcblxuICAgIEAkZWwuZmluZCgnI3dvcmtmbG93LXByb2dyZXNzJykucHJvZ3Jlc3NiYXIgdmFsdWUgOiAoIChAaW5kZXgrMSkgLyAoQHdvcmtmbG93LmdldExlbmd0aCgpKzEpICogMTAwIClcblxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuICAgIFxuXG4gIGFmdGVyUmVuZGVyOiA9PlxuICAgIHN1YlZpZXc/LmFmdGVyUmVuZGVyPygpXG5cbiAgb25TdWJWaWV3RG9uZTogPT5cbiAgICBAc3ViVmlld0RvbmUgPSB0cnVlXG4gICAgQG5leHRTdGVwKClcblxuICBuZXh0U3RlcDogPT5cbiAgICBpdEV4aXN0cyAgICAgICAgPSBAc3ViVmlldz9cbiAgICBpdElzUmVuZGVyZWQgICAgPSBAc3ViVmlld1JlbmRlcmVkXG4gICAgaXRJc250RG9uZSAgICAgID0gbm90IEBzdWJWaWV3RG9uZVxuICAgIGl0c0FuQXNzZXNzbWVudCA9IEBjdXJyZW50U3RlcC5nZXRUeXBlKCkgaXMgXCJhc3Nlc3NtZW50XCJcbiAgICBpdHNBQ3VycmljdWx1bSAgPSBAY3VycmVudFN0ZXAuZ2V0VHlwZSgpIGlzIFwiY3VycmljdWx1bVwiXG4gICAgaXRzQU5ld09iamVjdCAgID0gQGN1cnJlbnRTdGVwLmdldFR5cGUoKSBpcyBcIm5ld1wiXG5cbiAgICByZXR1cm4gZmFsc2UgaWYgIWl0SXNSZW5kZXJlZFxuICAgIHJldHVybiBAc3ViVmlldy5uZXh0KCkgaWYgaXRFeGlzdHMgYW5kIGl0SXNudERvbmUgYW5kIGl0c0FuQXNzZXNzbWVudFxuICAgIHJldHVybiBAc3ViVmlldy5zYXZlKCkgaWYgaXRFeGlzdHMgYW5kIGl0SXNudERvbmUgYW5kIGl0c0FOZXdPYmplY3RcblxuICAgIEBzdWJWaWV3UmVuZGVyZWQgPSBmYWxzZVxuICAgIEBzdWJWaWV3RG9uZSA9IGZhbHNlXG4gICAgQHN1YlZpZXc/LnJlbW92ZT8oKVxuICAgIEBzdWJWaWV3Py51bmJpbmQ/KClcblxuICAgIEBzdWJWaWV3ID0gbnVsbFxuXG4gICAgb2xkSW5kZXggPSBAaW5kZXhcblxuICAgICMgaW50ZW50aW9uYWxseSBsZXRzIHlvdSBnbyBvbmUgb3ZlclxuICAgICMgaGFuZGxlZCB3aXRoIFwiaWYgY3VycmVudFN0ZXAgaXMgbnVsbFwiXG4gICAgQGluZGV4ID0gTWF0aC5taW4gQGluZGV4ICsgMSwgQHdvcmtmbG93LmdldExlbmd0aCgpXG5cbiAgICBAcmVuZGVyKCkgaWYgb2xkSW5kZXggaXNudCBAaW5kZXhcblxuICAgIEBjaGVja0luY29tcGxldGVzKClcblxuXG4gIGNoZWNrSW5jb21wbGV0ZXM6IC0+XG4gICAgcmV0dXJuIGlmIEBjaGVja2luZ0luY29tcGxldGVzIGlzIHRydWVcblxuICAgICMgaWYgdGhlIHdvcmtmbG93IGlzIGNvbXBsZXRlLCB0aGVuIHJlbW92ZSBpdCwgaWYgcG9zc2libGUsIGZyb20gcmVzdW1hYmxlc1xuICAgIGlmIEB3b3JrZmxvdy5zdGVwTW9kZWxCeUluZGV4KEBpbmRleCkuZ2V0TmFtZSgpIGlzIFwiQ29tcGxldGVcIlxuICAgICAgQGNoZWNraW5nSW5jb21wbGV0ZXMgPSB0cnVlXG4gICAgICBpbmNvbXBsZXRlID0gVGFuZ2VyaW5lLnVzZXIuZ2V0UHJlZmVyZW5jZXMoXCJ0dXRvci13b3JrZmxvd3NcIiwgXCJpbmNvbXBsZXRlXCIpIHx8IHt9XG4gICAgICBpbmNvbXBsZXRlW0B3b3JrZmxvdy5pZF0gPSBfKGluY29tcGxldGVbQHdvcmtmbG93LmlkXSkud2l0aG91dCBAdHJpcElkXG4gICAgICBUYW5nZXJpbmUudXNlci5zZXRQcmVmZXJlbmNlcyBcInR1dG9yLXdvcmtmbG93c1wiLFxuICAgICAgICBcImluY29tcGxldGVcIixcbiAgICAgICAgaW5jb21wbGV0ZSwgPT5cbiAgICAgICAgICBAY2hlY2tpbmdJbmNvbXBsZXRlcyA9IGZhbHNlXG5cblxuICBwcmV2aW91c1N0ZXA6IC0+XG4gICAgb2xkSW5kZXggPSBAaW5kZXhcbiAgICBAaW5kZXggPSBNYXRoLm1heCggQGluZGV4IC0gMSwgMCApXG4gICAgQHJlbmRlcigpIGlmIG9sZEluZGV4IGlzbnQgQGluZGV4XG5cbiAgZ2V0TnVtYmVyOiAoIGtleSApIC0+IHBhcnNlSW50IEBnZXRWYXJpYWJsZSBrZXlcbiAgZ2V0U3RyaW5nOiAoIGtleSApIC0+IEBnZXRWYXJpYWJsZSBrZXlcblxuICBnZXRWYXJpYWJsZTogKCBrZXkgKSAtPlxuICAgIGZvciBzdGVwIGluIEBzdGVwc1xuICAgICAgaWYgc3RlcD8ucmVzdWx0P1xuICAgICAgICByZXN1bHQgPSBzdGVwLnJlc3VsdC5nZXRWYXJpYWJsZShrZXkpXG4gICAgICBpZiByZXN1bHQ/XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIFxuXG4gIHJlbmRlclN0ZXA6ID0+XG4gICAgQHN0ZXBzW0BpbmRleF0gPSB7fSB1bmxlc3MgQHN0ZXBzW0BpbmRleF0/XG4gICAgQGN1cnJlbnRTdGVwID0gQHdvcmtmbG93LnN0ZXBNb2RlbEJ5SW5kZXggQGluZGV4XG4gICAgQHN0ZXBzW0BpbmRleF0ubW9kZWwgPSBAY3VycmVudFN0ZXBcblxuICAgIGlmIEBpbmRleCA9PSBAd29ya2Zsb3cuZ2V0TGVuZ3RoKCktMVxuICAgICAgVGFuZ2VyaW5lLmFjdGl2aXR5ID0gXCJcIlxuICAgICAgQCRlbC5maW5kKFwiLm5leHRcIikuaGlkZSgpXG5cbiAgICByZXR1cm4gaWYgQGluZGV4ID09IEB3b3JrZmxvdy5nZXRMZW5ndGgoKVxuXG4gICAgc3dpdGNoIEBjdXJyZW50U3RlcC5nZXRUeXBlKClcbiAgICAgIHdoZW4gXCJuZXdcIiAgICAgICAgdGhlbiBAcmVuZGVyTmV3KClcbiAgICAgIHdoZW4gXCJhc3Nlc3NtZW50XCIgdGhlbiBAcmVuZGVyQXNzZXNzbWVudCgpXG4gICAgICB3aGVuIFwiY3VycmljdWx1bVwiIHRoZW4gQHJlbmRlckN1cnJpY3VsdW0oKVxuICAgICAgd2hlbiBcIm1lc3NhZ2VcIiAgICB0aGVuIEByZW5kZXJNZXNzYWdlKClcbiAgICAgIHdoZW4gXCJsb2dpblwiXG4gICAgICAgIEAkZWwuZmluZChcIiMje0BjaWR9X2N1cnJlbnRfc3RlcFwiKS5odG1sIFwiXG4gICAgICAgICAgPGgxPkxvZ2luIC0gI3tAY3VycmVudFN0ZXAuZ2V0KCd1c2VyVHlwZScpfTwvaDE+XG4gICAgICAgIFwiXG4gICAgICBlbHNlXG4gICAgICAgIEAkZWwuZmluZChcIiMje0BjaWR9X2N1cnJlbnRfc3RlcFwiKS5odG1sIFwiXG4gICAgICAgICAgPGgxPiN7QGN1cnJlbnRTdGVwLm5hbWUoKX0gLSAje0BjdXJyZW50U3RlcC5nZXRUeXBlKCl9PC9oMT5cbiAgICAgICAgXCJcblxuICAgIGlmIEBjdXJyZW50U3RlcC5nZXRTaG93TGVzc29uKClcbiAgICAgIFxuICAgICAgc3ViamVjdCAgICAgID0gQGdldFZhcmlhYmxlKFwic3ViamVjdFwiKVxuICAgICAgbW90aGVyVG9uZ3VlID0gQGdldFZhcmlhYmxlKFwic3ViamVjdF9tb3RoZXJfdG9uZ3VlXCIpXG5cbiAgICAgIHN1YmplY3QgPSAoe1wid29yZFwiOiBcImtpc3dhaGlsaVwiLCBcImVuZ2xpc2hfd29yZFwiIDogXCJlbmdsaXNoXCIsIFwib3BlcmF0aW9uXCIgOiBcIm1hdGhzXCIsXCIzXCI6XCIzXCJ9KVtzdWJqZWN0XVxuICAgICAgZ3JhZGUgICA9IEBnZXRWYXJpYWJsZShcImNsYXNzXCIpXG4gICAgICB3ZWVrICAgID0gQGdldFZhcmlhYmxlKFwibGVzc29uX3dlZWtcIilcbiAgICAgIGRheSAgICAgPSBAZ2V0VmFyaWFibGUoXCJsZXNzb25fZGF5XCIpXG5cbiAgICAgICRjb250ZW50ID0gJChcIiNjb250ZW50XCIpXG5cbiAgICAgIHVubGVzcyAkY29udGVudC5maW5kKFwiI2Rpc3BsYXktc3dpdGNoXCIpLmxlbmd0aCA+IDBcbiAgICAgICAgJGNvbnRlbnQuYXBwZW5kKFwiPGltZyBzcmM9J2ltYWdlcy9pY29uX3N3aXRjaC5wbmcnIGlkPSdkaXNwbGF5LXN3aXRjaCc+XCIpXG4gICAgICAgIEAkYnV0dG9uID0gJGNvbnRlbnQuZmluZChcIiNkaXNwbGF5LXN3aXRjaFwiKVxuICAgICAgICBAJGJ1dHRvbi5vbiBcImNsaWNrXCIsIEBzd2l0Y2hcblxuICAgICAgJGNvbnRlbnQuYXBwZW5kKFwiPGRpdiBpZD0nbGVzc29uLWNvbnRhaW5lcicgc3R5bGU9J2Rpc3BsYXk6bm9uZTsnPjwvZGl2PlwiKVxuXG4gICAgICBAJGxlc3NvbkNvbnRhaW5lciA9ICRjb250ZW50LmZpbmQoXCIjbGVzc29uLWNvbnRhaW5lclwiKVxuXG4gICAgICBsZXNzb25JbWFnZSA9IG5ldyBJbWFnZVxuICAgICAgJChsZXNzb25JbWFnZSkub24gXCJsb2FkXCIsXG4gICAgICAgIChldmVudCkgPT5cbiAgICAgICAgICBpZiBsZXNzb25JbWFnZS5oZWlnaHQgaXMgMFxuICAgICAgICAgICAgQCRsZXNzb25Db250YWluZXI/LnJlbW92ZT8oKVxuICAgICAgICAgICAgQCRidXR0b24/LnJlbW92ZT8oKVxuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIEAkbGVzc29uQ29udGFpbmVyLmFwcGVuZChsZXNzb25JbWFnZSlcblxuICAgICAgaWYgc3ViamVjdCBpcyBcIjNcIlxuICAgICAgICBsZXNzb25JbWFnZS5zcmMgPSBcIi8je1RhbmdlcmluZS5kYl9uYW1lfS9fZGVzaWduL2Fzc2V0cy9sZXNzb25zLyN7bW90aGVyVG9uZ3VlfV93I3t3ZWVrfV9kI3tkYXl9LnBuZ1wiXG4gICAgICBlbHNlXG4gICAgICAgIGxlc3NvbkltYWdlLnNyYyA9IFwiLyN7VGFuZ2VyaW5lLmRiX25hbWV9L19kZXNpZ24vYXNzZXRzL2xlc3NvbnMvI3tzdWJqZWN0fV9jI3tncmFkZX1fdyN7d2Vla31fZCN7ZGF5fS5wbmdcIlxuXG4gICAgZWxzZVxuICAgICAgQGxlc3NvbkNvbnRhaW5lcj8ucmVtb3ZlPygpXG4gICAgICBAJGJ1dHRvbj8ucmVtb3ZlKClcblxuICByZW5kZXJNZXNzYWdlOiAtPlxuICAgIEBuZXh0QnV0dG9uIHRydWVcblxuICAgIGNvZmZlZU1lc3NhZ2UgPSBAY3VycmVudFN0ZXAuZ2V0Q29mZmVlTWVzc2FnZSgpXG4gICAganNNZXNzYWdlID0gQ29mZmVlU2NyaXB0LmNvbXBpbGUuYXBwbHkoQCwgW1wicmV0dXJuIFxcXCIje2NvZmZlZU1lc3NhZ2V9XFxcIlwiXSlcblxuICAgIGh0bWxNZXNzYWdlID0gZXZhbChqc01lc3NhZ2UpXG5cbiAgICBAJGVsLmZpbmQoXCIjI3tAY2lkfV9jdXJyZW50X3N0ZXBcIikuaHRtbCBodG1sTWVzc2FnZVxuICAgIEBzdWJWaWV3UmVuZGVyZWQgPSB0cnVlXG5cbiAgcmVuZGVyTmV3OiAtPlxuICAgIEBuZXh0QnV0dG9uIHRydWVcblxuICAgIHZpZXcgPSBAY3VycmVudFN0ZXAuZ2V0Vmlld1xuICAgICAgd29ya2Zsb3dJZCA6IEB3b3JrZmxvdy5pZFxuICAgICAgdHJpcElkICAgICA6IEB0cmlwSWRcblxuICAgIEBzdGVwc1tAaW5kZXhdLnZpZXcgICA9IHZpZXdcbiAgICBAc3RlcHNbQGluZGV4XS5yZXN1bHQgPSB2aWV3LmdldFJlc3VsdCgpXG5cbiAgICBAc2hvd1ZpZXcgdmlld1xuXG5cbiAgcmVuZGVyQXNzZXNzbWVudDogLT5cbiAgICBAbmV4dEJ1dHRvbiB0cnVlXG5cbiAgICBAY3VycmVudFN0ZXAuZmV0Y2hcbiAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgIGFzc2Vzc21lbnQgPSBAY3VycmVudFN0ZXAuZ2V0VHlwZU1vZGVsKClcblxuICAgICAgICB2aWV3ID0gbmV3IEFzc2Vzc21lbnRSdW5WaWV3IFxuICAgICAgICAgIG1vZGVsICAgICAgOiBhc3Nlc3NtZW50XG4gICAgICAgICAgaW5Xb3JrZmxvdyA6IHRydWVcbiAgICAgICAgICB0cmlwSWQgICAgIDogQHRyaXBJZFxuICAgICAgICAgIHdvcmtmbG93SWQgOiBAd29ya2Zsb3cuaWRcblxuICAgICAgICBpZiBAYXNzZXNzbWVudFJlc3VtZUluZGV4P1xuICAgICAgICAgIHZpZXcuaW5kZXggPSBAYXNzZXNzbWVudFJlc3VtZUluZGV4XG4gICAgICAgICAgZGVsZXRlIEBhc3Nlc3NtZW50UmVzdW1lSW5kZXhcblxuXG4gICAgICAgIEBzdGVwc1tAaW5kZXhdLnZpZXcgICA9IHZpZXdcbiAgICAgICAgQHN0ZXBzW0BpbmRleF0ucmVzdWx0ID0gdmlldy5nZXRSZXN1bHQoKVxuICAgICAgICBAc2hvd1ZpZXcgdmlld1xuXG5cbiAgcmVuZGVyQ3VycmljdWx1bTogLT5cbiAgICBAbmV4dEJ1dHRvbiBmYWxzZVxuXG4gICAgY3VycmljdWx1bUlkID0gQGN1cnJlbnRTdGVwLmdldFR5cGVzSWQoKVxuICAgIHN1YnRlc3RzID0gbmV3IFN1YnRlc3RzXG4gICAgc3VidGVzdHMuZmV0Y2hcbiAgICAgIGtleSA6IGN1cnJpY3VsdW1JZFxuICAgICAgc3VjY2VzczogPT5cblxuICAgICAgICBpdGVtVHlwZSA9IEBnZXRTdHJpbmcgQGN1cnJlbnRTdGVwLmdldEN1cnJpY3VsdW1JdGVtVHlwZSgpXG4gICAgICAgIGdyYWRlICAgID0gQGdldE51bWJlciBAY3VycmVudFN0ZXAuZ2V0Q3VycmljdWx1bUdyYWRlKClcblxuICAgICAgICB0aGlzWWVhciA9IChuZXcgRGF0ZSgpKS5nZXRGdWxsWWVhcigpXG4gICAgICAgIHRlcm0xU3RhcnQgPSBtb21lbnQgXCIje3RoaXNZZWFyfSBKYW4gMVwiXG4gICAgICAgIHRlcm0xRW5kICAgPSBtb21lbnQgXCIje3RoaXNZZWFyfSBBcHJpbCAzMFwiXG5cbiAgICAgICAgdGVybTJTdGFydCA9IG1vbWVudCBcIiN7dGhpc1llYXJ9IE1heSAxXCJcbiAgICAgICAgdGVybTJFbmQgICA9IG1vbWVudCBcIiN7dGhpc1llYXJ9IEF1ZyAzMVwiXG5cbiAgICAgICAgdGVybTNTdGFydCA9IG1vbWVudCBcIiN7dGhpc1llYXJ9IFNlcHQgMVwiXG4gICAgICAgIHRlcm0zRW5kICAgPSBtb21lbnQgXCIje3RoaXNZZWFyfSBEZWMgMzFcIlxuXG4gICAgICAgIG5vdyA9IG1vbWVudCgpXG4gICAgICAgIHRlcm0gPVxuICAgICAgICAgIGlmICAgICAgdGVybTFTdGFydCA8PSBub3cgPD0gdGVybTFFbmRcbiAgICAgICAgICAgIDFcbiAgICAgICAgICBlbHNlIGlmIHRlcm0yU3RhcnQgPD0gbm93IDw9IHRlcm0yRW5kXG4gICAgICAgICAgICAyXG4gICAgICAgICAgZWxzZSBpZiB0ZXJtM1N0YXJ0IDw9IG5vdyA8PSB0ZXJtM0VuZFxuICAgICAgICAgICAgM1xuXG4gICAgICAgIGNyaXRlcmlhID1cbiAgICAgICAgICBpdGVtVHlwZSA6IGl0ZW1UeXBlXG4gICAgICAgICAgcGFydCAgICAgOiB0ZXJtXG4gICAgICAgICAgZ3JhZGUgICAgOiBncmFkZVxuXG4gICAgICAgIHN1YnRlc3QgPSBfKHN1YnRlc3RzLndoZXJlKFxuICAgICAgICAgIGl0ZW1UeXBlIDogaXRlbVR5cGVcbiAgICAgICAgICBwYXJ0ICAgICA6IHRlcm1cbiAgICAgICAgICBncmFkZSAgICA6IGdyYWRlXG4gICAgICAgICkpLmZpcnN0KClcblxuICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQgXCJcbiAgICAgICAgICBTdWJ0ZXN0IG5vdCBmb3VuZCBmb3IgPGJyPlxuICAgICAgICAgIGl0ZW1UeXBlOiAje2l0ZW1UeXBlfTxicj5cbiAgICAgICAgICB0ZXJtOiAje3Rlcm19PGJyPlxuICAgICAgICAgIGdyYWRlOiAje2dyYWRlfVxuICAgICAgICBcIiB1bmxlc3Mgc3VidGVzdD9cblxuICAgICAgICB2aWV3ID0gbmV3IEtsYXNzU3VidGVzdFJ1blZpZXdcbiAgICAgICAgICBzdHVkZW50ICAgICAgOiBuZXcgU3R1ZGVudFxuICAgICAgICAgIHN1YnRlc3QgICAgICA6IHN1YnRlc3RcbiAgICAgICAgICBxdWVzdGlvbnMgICAgOiBuZXcgUXVlc3Rpb25zXG4gICAgICAgICAgbGlua2VkUmVzdWx0IDogbmV3IEtsYXNzUmVzdWx0XG4gICAgICAgICAgaW5Xb3JrZmxvdyAgIDogdHJ1ZVxuICAgICAgICAgIHRyaXBJZCAgICAgICA6IEB0cmlwSWRcbiAgICAgICAgICB3b3JrZmxvd0lkICAgOiBAd29ya2Zsb3cuaWRcbiAgICAgICAgQHN0ZXBzW0BpbmRleF0udmlldyA9IHZpZXdcbiAgICAgICAgQHNob3dWaWV3IHZpZXcsIEBjdXJyZW50U3RlcC5nZXROYW1lKClcblxuICByZW5kZXJFbmQ6IC0+XG4gICAgVXRpbHMuZ3BzUGluZ1xuICAgIEAkZWwuZmluZChcIiMje0BjaWR9X2N1cnJlbnRfc3RlcFwiKS5odG1sIFwiXG4gICAgICA8cD5Zb3UgaGF2ZSBjb21wbGV0ZWQgdGhpcyBDbGFzc3Jvb20gT2JzZXJ2YXRpb24uPC9wPlxuICAgICAgPGJ1dHRvbiBjbGFzcz0nbmF2LWJ1dHRvbic+PGEgaHJlZj0nI2ZlZWRiYWNrLyN7QHdvcmtmbG93LmlkfSc+R28gdG8gZmVlZGJhY2s8L2E+PC9idXR0b24+XG4gICAgICA8cD5PbmNlIGluIGZlZWRiYWNrIHNlbGVjdCB0aGUgYXBwcm9wcmlhdGUgY291bnR5LCB6b25lLCBzY2hvb2wgYW5kIGRhdGUgb2YgdGhpcyBzY2hvb2wgdmlzaXQgdG8gcmV0cmlldmUgdGhlIGZlZWRiYWNrIGZvciB0aGlzIGxlc3NvbiBvYnNlcnZhdGlvbi4gVGhpcyBpbmZvcm1hdGlvbiBpcyB0byBiZSB1c2VkIGluIHlvdXIgcmVmbGVjdGlvbnMgYW5kIGRpc2N1c3Npb24gd2l0aCB0aGUgdGVhY2hlci48L3A+XG4gICAgICA8YnV0dG9uIGNsYXNzPSduYXYtYnV0dG9uJz48YSBocmVmPScjJz5NYWluPC9hPjwvYnV0dG9uPlxuICAgIFwiXG4gICAgcmV0dXJuXG5cbiAgbmV4dEJ1dHRvbjogKCBhcHByb3ByaWF0ZSApIC0+XG4gICAgaWYgYXBwcm9wcmlhdGVcbiAgICAgIEAkZWwuZmluZChcImJ1dHRvbi5uZXh0XCIpLnNob3coKVxuICAgIGVsc2VcbiAgICAgIEAkZWwuZmluZChcImJ1dHRvbi5uZXh0XCIpLmhpZGUoKVxuICAgICAgXG5cblxuICBvbkNsb3NlOiAtPlxuICAgIEBsZXNzb25Db250YWluZXI/LnJlbW92ZT8oKVxuICAgIEAkYnV0dG9uPy5yZW1vdmU/KClcblxuICBzaG93VmlldzogKHN1YlZpZXcsIGhlYWRlciA9ICcnKSAtPlxuICAgIGhlYWRlciA9IFwiPGgxPiN7aGVhZGVyfTwvaDE+XCIgaWYgaGVhZGVyIGlzbnQgJydcbiAgICBAc3ViVmlldyA9IHN1YlZpZXdcbiAgICBAJGVsLmZpbmQoXCIjaGVhZGVyLWNvbnRhaW5lclwiKS5odG1sIGhlYWRlclxuICAgIEBzdWJWaWV3LnNldEVsZW1lbnQgQCRlbC5maW5kKFwiIyN7QGNpZH1fY3VycmVudF9zdGVwXCIpXG4gICAgQGxpc3RlblRvIEBzdWJWaWV3LCBcInN1YlZpZXdEb25lIHNhdmVcIiwgQG9uU3ViVmlld0RvbmVcbiAgICBAbGlzdGVuVG8gQHN1YlZpZXcsIFwicmVuZGVyZWRcIiwgPT5cbiAgICAgIEBzdWJWaWV3UmVuZGVyZWQgPSB0cnVlXG4gICAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiAgICAgICNAYWZ0ZXJSZW5kZXIoKVxuICAgIEBzdWJWaWV3LnJlbmRlcigpXG4iLCJ2YXIgV29ya2Zsb3dSdW5WaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbldvcmtmbG93UnVuVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChXb3JrZmxvd1J1blZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFdvcmtmbG93UnVuVmlldygpIHtcbiAgICB0aGlzLnJlbmRlclN0ZXAgPSBiaW5kKHRoaXMucmVuZGVyU3RlcCwgdGhpcyk7XG4gICAgdGhpcy5uZXh0U3RlcCA9IGJpbmQodGhpcy5uZXh0U3RlcCwgdGhpcyk7XG4gICAgdGhpcy5vblN1YlZpZXdEb25lID0gYmluZCh0aGlzLm9uU3ViVmlld0RvbmUsIHRoaXMpO1xuICAgIHRoaXMuYWZ0ZXJSZW5kZXIgPSBiaW5kKHRoaXMuYWZ0ZXJSZW5kZXIsIHRoaXMpO1xuICAgIHRoaXNbXCJzd2l0Y2hcIl0gPSBiaW5kKHRoaXNbXCJzd2l0Y2hcIl0sIHRoaXMpO1xuICAgIHJldHVybiBXb3JrZmxvd1J1blZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBXb3JrZmxvd1J1blZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICBcImNsaWNrIC5wcmV2aW91c1wiOiBcInByZXZpb3VzU3RlcFwiLFxuICAgIFwiY2xpY2sgLm5leHRcIjogXCJuZXh0U3RlcFwiXG4gIH07XG5cbiAgV29ya2Zsb3dSdW5WaWV3LnByb3RvdHlwZVtcInN3aXRjaFwiXSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGVsLnRvZ2dsZSgpO1xuICAgIHJldHVybiB0aGlzLiRsZXNzb25Db250YWluZXIudG9nZ2xlKCk7XG4gIH07XG5cbiAgV29ya2Zsb3dSdW5WaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBrZXksIHZhbHVlO1xuICAgIGZvciAoa2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIHZhbHVlID0gb3B0aW9uc1trZXldO1xuICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgfVxuICAgIGlmICh0aGlzLnRyaXBJZCA9PSBudWxsKSB7XG4gICAgICB0aGlzLnRyaXBJZCA9IFV0aWxzLmd1aWQoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaW5kZXggPT0gbnVsbCkge1xuICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgfVxuICAgIGlmICh0aGlzLnN0ZXBzID09IG51bGwpIHtcbiAgICAgIHRoaXMuc3RlcHMgPSBbXTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50U3RlcCA9IHRoaXMud29ya2Zsb3cuc3RlcE1vZGVsQnlJbmRleCh0aGlzLmluZGV4KTtcbiAgICByZXR1cm4gdGhpcy5zdWJWaWV3UmVuZGVyZWQgPSBmYWxzZTtcbiAgfTtcblxuICBXb3JrZmxvd1J1blZpZXcucHJvdG90eXBlLnNob3VsZFNraXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VycmVudFN0ZXAsIGUsIHNob3VsZFNraXAsIHNraXBMb2dpY0NvZGU7XG4gICAgY3VycmVudFN0ZXAgPSB0aGlzLndvcmtmbG93LnN0ZXBNb2RlbEJ5SW5kZXgodGhpcy5pbmRleCk7XG4gICAgaWYgKGN1cnJlbnRTdGVwID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgc2tpcExvZ2ljQ29kZSA9IGN1cnJlbnRTdGVwLmdldFN0cmluZyhcInNraXBMb2dpYy1jb29rZWRcIik7XG4gICAgaWYgKCFfKHNraXBMb2dpY0NvZGUpLmlzRW1wdHlTdHJpbmcoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2hvdWxkU2tpcCA9IGV2YWwoc2tpcExvZ2ljQ29kZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgIFV0aWxzLnN0aWNreShcIldvcmtmbG93IHNraXAgbG9naWMgZXJyb3I8YnI+XCIgKyBlLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNob3VsZFNraXA7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBXb3JrZmxvd1J1blZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXh0QnV0dG9uLCBzdGVwSW5kaWNhdG9yO1xuICAgIGlmICh0aGlzLnNob3VsZFNraXAoKSkge1xuICAgICAgdGhpcy5zdWJWaWV3UmVuZGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXMubmV4dFN0ZXAoKTtcbiAgICB9XG4gICAgc3RlcEluZGljYXRvciA9IFwiPGRpdiBpZD0nd29ya2Zsb3ctcHJvZ3Jlc3MnPjwvZGl2PlwiO1xuICAgIGlmICh0aGlzLmluZGV4ICE9PSB0aGlzLndvcmtmbG93LmdldENoaWxkcmVuKCkubGVuZ3RoIC0gMSkge1xuICAgICAgbmV4dEJ1dHRvbiA9IFwiPGRpdiBjbGFzcz0nY2xlYXJmaXgnPjxidXR0b24gY2xhc3M9J25hdi1idXR0b24gbmV4dCc+TmV4dDwvYnV0dG9uPjwvZGl2PlwiO1xuICAgIH1cbiAgICB0aGlzLiRlbC5odG1sKHN0ZXBJbmRpY2F0b3IgKyBcIiA8ZGl2IGlkPSdoZWFkZXItY29udGFpbmVyJz48L2Rpdj4gPHNlY3Rpb24gaWQ9J1wiICsgdGhpcy5jaWQgKyBcIl9jdXJyZW50X3N0ZXAnPjwvc2VjdGlvbj4gPCEtLWJ1dHRvbiBjbGFzcz0nbmF2LWJ1dHRvbiBwcmV2aW91cyc+UHJldmlvdXM8L2J1dHRvbi0tPiBcIiArIChuZXh0QnV0dG9uIHx8ICcnKSk7XG4gICAgdGhpcy5yZW5kZXJTdGVwKCk7XG4gICAgdGhpcy5jaGVja0luY29tcGxldGVzKCk7XG4gICAgdGhpcy4kZWwuZmluZCgnI3dvcmtmbG93LXByb2dyZXNzJykucHJvZ3Jlc3NiYXIoe1xuICAgICAgdmFsdWU6ICh0aGlzLmluZGV4ICsgMSkgLyAodGhpcy53b3JrZmxvdy5nZXRMZW5ndGgoKSArIDEpICogMTAwXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIFdvcmtmbG93UnVuVmlldy5wcm90b3R5cGUuYWZ0ZXJSZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdHlwZW9mIHN1YlZpZXcgIT09IFwidW5kZWZpbmVkXCIgJiYgc3ViVmlldyAhPT0gbnVsbCA/IHR5cGVvZiBzdWJWaWV3LmFmdGVyUmVuZGVyID09PSBcImZ1bmN0aW9uXCIgPyBzdWJWaWV3LmFmdGVyUmVuZGVyKCkgOiB2b2lkIDAgOiB2b2lkIDA7XG4gIH07XG5cbiAgV29ya2Zsb3dSdW5WaWV3LnByb3RvdHlwZS5vblN1YlZpZXdEb25lID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdWJWaWV3RG9uZSA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXMubmV4dFN0ZXAoKTtcbiAgfTtcblxuICBXb3JrZmxvd1J1blZpZXcucHJvdG90eXBlLm5leHRTdGVwID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGl0RXhpc3RzLCBpdElzUmVuZGVyZWQsIGl0SXNudERvbmUsIGl0c0FDdXJyaWN1bHVtLCBpdHNBTmV3T2JqZWN0LCBpdHNBbkFzc2Vzc21lbnQsIG9sZEluZGV4LCByZWYsIHJlZjE7XG4gICAgaXRFeGlzdHMgPSB0aGlzLnN1YlZpZXcgIT0gbnVsbDtcbiAgICBpdElzUmVuZGVyZWQgPSB0aGlzLnN1YlZpZXdSZW5kZXJlZDtcbiAgICBpdElzbnREb25lID0gIXRoaXMuc3ViVmlld0RvbmU7XG4gICAgaXRzQW5Bc3Nlc3NtZW50ID0gdGhpcy5jdXJyZW50U3RlcC5nZXRUeXBlKCkgPT09IFwiYXNzZXNzbWVudFwiO1xuICAgIGl0c0FDdXJyaWN1bHVtID0gdGhpcy5jdXJyZW50U3RlcC5nZXRUeXBlKCkgPT09IFwiY3VycmljdWx1bVwiO1xuICAgIGl0c0FOZXdPYmplY3QgPSB0aGlzLmN1cnJlbnRTdGVwLmdldFR5cGUoKSA9PT0gXCJuZXdcIjtcbiAgICBpZiAoIWl0SXNSZW5kZXJlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXRFeGlzdHMgJiYgaXRJc250RG9uZSAmJiBpdHNBbkFzc2Vzc21lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnN1YlZpZXcubmV4dCgpO1xuICAgIH1cbiAgICBpZiAoaXRFeGlzdHMgJiYgaXRJc250RG9uZSAmJiBpdHNBTmV3T2JqZWN0KSB7XG4gICAgICByZXR1cm4gdGhpcy5zdWJWaWV3LnNhdmUoKTtcbiAgICB9XG4gICAgdGhpcy5zdWJWaWV3UmVuZGVyZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN1YlZpZXdEb25lID0gZmFsc2U7XG4gICAgaWYgKChyZWYgPSB0aGlzLnN1YlZpZXcpICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVmLnJlbW92ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJlZi5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKChyZWYxID0gdGhpcy5zdWJWaWV3KSAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIHJlZjEudW5iaW5kID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmVmMS51bmJpbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zdWJWaWV3ID0gbnVsbDtcbiAgICBvbGRJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgdGhpcy5pbmRleCA9IE1hdGgubWluKHRoaXMuaW5kZXggKyAxLCB0aGlzLndvcmtmbG93LmdldExlbmd0aCgpKTtcbiAgICBpZiAob2xkSW5kZXggIT09IHRoaXMuaW5kZXgpIHtcbiAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNoZWNrSW5jb21wbGV0ZXMoKTtcbiAgfTtcblxuICBXb3JrZmxvd1J1blZpZXcucHJvdG90eXBlLmNoZWNrSW5jb21wbGV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5jb21wbGV0ZTtcbiAgICBpZiAodGhpcy5jaGVja2luZ0luY29tcGxldGVzID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLndvcmtmbG93LnN0ZXBNb2RlbEJ5SW5kZXgodGhpcy5pbmRleCkuZ2V0TmFtZSgpID09PSBcIkNvbXBsZXRlXCIpIHtcbiAgICAgIHRoaXMuY2hlY2tpbmdJbmNvbXBsZXRlcyA9IHRydWU7XG4gICAgICBpbmNvbXBsZXRlID0gVGFuZ2VyaW5lLnVzZXIuZ2V0UHJlZmVyZW5jZXMoXCJ0dXRvci13b3JrZmxvd3NcIiwgXCJpbmNvbXBsZXRlXCIpIHx8IHt9O1xuICAgICAgaW5jb21wbGV0ZVt0aGlzLndvcmtmbG93LmlkXSA9IF8oaW5jb21wbGV0ZVt0aGlzLndvcmtmbG93LmlkXSkud2l0aG91dCh0aGlzLnRyaXBJZCk7XG4gICAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIuc2V0UHJlZmVyZW5jZXMoXCJ0dXRvci13b3JrZmxvd3NcIiwgXCJpbmNvbXBsZXRlXCIsIGluY29tcGxldGUsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmNoZWNraW5nSW5jb21wbGV0ZXMgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgV29ya2Zsb3dSdW5WaWV3LnByb3RvdHlwZS5wcmV2aW91c1N0ZXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgb2xkSW5kZXg7XG4gICAgb2xkSW5kZXggPSB0aGlzLmluZGV4O1xuICAgIHRoaXMuaW5kZXggPSBNYXRoLm1heCh0aGlzLmluZGV4IC0gMSwgMCk7XG4gICAgaWYgKG9sZEluZGV4ICE9PSB0aGlzLmluZGV4KSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXIoKTtcbiAgICB9XG4gIH07XG5cbiAgV29ya2Zsb3dSdW5WaWV3LnByb3RvdHlwZS5nZXROdW1iZXIgPSBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5nZXRWYXJpYWJsZShrZXkpKTtcbiAgfTtcblxuICBXb3JrZmxvd1J1blZpZXcucHJvdG90eXBlLmdldFN0cmluZyA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiB0aGlzLmdldFZhcmlhYmxlKGtleSk7XG4gIH07XG5cbiAgV29ya2Zsb3dSdW5WaWV3LnByb3RvdHlwZS5nZXRWYXJpYWJsZSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBpLCBsZW4sIHJlZiwgcmVzdWx0LCBzdGVwO1xuICAgIHJlZiA9IHRoaXMuc3RlcHM7XG4gICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBzdGVwID0gcmVmW2ldO1xuICAgICAgaWYgKChzdGVwICE9IG51bGwgPyBzdGVwLnJlc3VsdCA6IHZvaWQgMCkgIT0gbnVsbCkge1xuICAgICAgICByZXN1bHQgPSBzdGVwLnJlc3VsdC5nZXRWYXJpYWJsZShrZXkpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFdvcmtmbG93UnVuVmlldy5wcm90b3R5cGUucmVuZGVyU3RlcCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkY29udGVudCwgZGF5LCBncmFkZSwgbGVzc29uSW1hZ2UsIG1vdGhlclRvbmd1ZSwgcmVmLCByZWYxLCBzdWJqZWN0LCB3ZWVrO1xuICAgIGlmICh0aGlzLnN0ZXBzW3RoaXMuaW5kZXhdID09IG51bGwpIHtcbiAgICAgIHRoaXMuc3RlcHNbdGhpcy5pbmRleF0gPSB7fTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50U3RlcCA9IHRoaXMud29ya2Zsb3cuc3RlcE1vZGVsQnlJbmRleCh0aGlzLmluZGV4KTtcbiAgICB0aGlzLnN0ZXBzW3RoaXMuaW5kZXhdLm1vZGVsID0gdGhpcy5jdXJyZW50U3RlcDtcbiAgICBpZiAodGhpcy5pbmRleCA9PT0gdGhpcy53b3JrZmxvdy5nZXRMZW5ndGgoKSAtIDEpIHtcbiAgICAgIFRhbmdlcmluZS5hY3Rpdml0eSA9IFwiXCI7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiLm5leHRcIikuaGlkZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pbmRleCA9PT0gdGhpcy53b3JrZmxvdy5nZXRMZW5ndGgoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRoaXMuY3VycmVudFN0ZXAuZ2V0VHlwZSgpKSB7XG4gICAgICBjYXNlIFwibmV3XCI6XG4gICAgICAgIHRoaXMucmVuZGVyTmV3KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImFzc2Vzc21lbnRcIjpcbiAgICAgICAgdGhpcy5yZW5kZXJBc3Nlc3NtZW50KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImN1cnJpY3VsdW1cIjpcbiAgICAgICAgdGhpcy5yZW5kZXJDdXJyaWN1bHVtKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgdGhpcy5yZW5kZXJNZXNzYWdlKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImxvZ2luXCI6XG4gICAgICAgIHRoaXMuJGVsLmZpbmQoXCIjXCIgKyB0aGlzLmNpZCArIFwiX2N1cnJlbnRfc3RlcFwiKS5odG1sKFwiPGgxPkxvZ2luIC0gXCIgKyAodGhpcy5jdXJyZW50U3RlcC5nZXQoJ3VzZXJUeXBlJykpICsgXCI8L2gxPlwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aGlzLiRlbC5maW5kKFwiI1wiICsgdGhpcy5jaWQgKyBcIl9jdXJyZW50X3N0ZXBcIikuaHRtbChcIjxoMT5cIiArICh0aGlzLmN1cnJlbnRTdGVwLm5hbWUoKSkgKyBcIiAtIFwiICsgKHRoaXMuY3VycmVudFN0ZXAuZ2V0VHlwZSgpKSArIFwiPC9oMT5cIik7XG4gICAgfVxuICAgIGlmICh0aGlzLmN1cnJlbnRTdGVwLmdldFNob3dMZXNzb24oKSkge1xuICAgICAgc3ViamVjdCA9IHRoaXMuZ2V0VmFyaWFibGUoXCJzdWJqZWN0XCIpO1xuICAgICAgbW90aGVyVG9uZ3VlID0gdGhpcy5nZXRWYXJpYWJsZShcInN1YmplY3RfbW90aGVyX3Rvbmd1ZVwiKTtcbiAgICAgIHN1YmplY3QgPSB7XG4gICAgICAgIFwid29yZFwiOiBcImtpc3dhaGlsaVwiLFxuICAgICAgICBcImVuZ2xpc2hfd29yZFwiOiBcImVuZ2xpc2hcIixcbiAgICAgICAgXCJvcGVyYXRpb25cIjogXCJtYXRoc1wiLFxuICAgICAgICBcIjNcIjogXCIzXCJcbiAgICAgIH1bc3ViamVjdF07XG4gICAgICBncmFkZSA9IHRoaXMuZ2V0VmFyaWFibGUoXCJjbGFzc1wiKTtcbiAgICAgIHdlZWsgPSB0aGlzLmdldFZhcmlhYmxlKFwibGVzc29uX3dlZWtcIik7XG4gICAgICBkYXkgPSB0aGlzLmdldFZhcmlhYmxlKFwibGVzc29uX2RheVwiKTtcbiAgICAgICRjb250ZW50ID0gJChcIiNjb250ZW50XCIpO1xuICAgICAgaWYgKCEoJGNvbnRlbnQuZmluZChcIiNkaXNwbGF5LXN3aXRjaFwiKS5sZW5ndGggPiAwKSkge1xuICAgICAgICAkY29udGVudC5hcHBlbmQoXCI8aW1nIHNyYz0naW1hZ2VzL2ljb25fc3dpdGNoLnBuZycgaWQ9J2Rpc3BsYXktc3dpdGNoJz5cIik7XG4gICAgICAgIHRoaXMuJGJ1dHRvbiA9ICRjb250ZW50LmZpbmQoXCIjZGlzcGxheS1zd2l0Y2hcIik7XG4gICAgICAgIHRoaXMuJGJ1dHRvbi5vbihcImNsaWNrXCIsIHRoaXNbXCJzd2l0Y2hcIl0pO1xuICAgICAgfVxuICAgICAgJGNvbnRlbnQuYXBwZW5kKFwiPGRpdiBpZD0nbGVzc29uLWNvbnRhaW5lcicgc3R5bGU9J2Rpc3BsYXk6bm9uZTsnPjwvZGl2PlwiKTtcbiAgICAgIHRoaXMuJGxlc3NvbkNvbnRhaW5lciA9ICRjb250ZW50LmZpbmQoXCIjbGVzc29uLWNvbnRhaW5lclwiKTtcbiAgICAgIGxlc3NvbkltYWdlID0gbmV3IEltYWdlO1xuICAgICAgJChsZXNzb25JbWFnZSkub24oXCJsb2FkXCIsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICB2YXIgcmVmLCByZWYxO1xuICAgICAgICAgIGlmIChsZXNzb25JbWFnZS5oZWlnaHQgPT09IDApIHtcbiAgICAgICAgICAgIGlmICgocmVmID0gX3RoaXMuJGxlc3NvbkNvbnRhaW5lcikgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlZi5yZW1vdmUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIHJlZi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChyZWYxID0gX3RoaXMuJGJ1dHRvbikgIT0gbnVsbCA/IHR5cGVvZiByZWYxLnJlbW92ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVmMS5yZW1vdmUoKSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLiRsZXNzb25Db250YWluZXIuYXBwZW5kKGxlc3NvbkltYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICBpZiAoc3ViamVjdCA9PT0gXCIzXCIpIHtcbiAgICAgICAgcmV0dXJuIGxlc3NvbkltYWdlLnNyYyA9IFwiL1wiICsgVGFuZ2VyaW5lLmRiX25hbWUgKyBcIi9fZGVzaWduL2Fzc2V0cy9sZXNzb25zL1wiICsgbW90aGVyVG9uZ3VlICsgXCJfd1wiICsgd2VlayArIFwiX2RcIiArIGRheSArIFwiLnBuZ1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxlc3NvbkltYWdlLnNyYyA9IFwiL1wiICsgVGFuZ2VyaW5lLmRiX25hbWUgKyBcIi9fZGVzaWduL2Fzc2V0cy9sZXNzb25zL1wiICsgc3ViamVjdCArIFwiX2NcIiArIGdyYWRlICsgXCJfd1wiICsgd2VlayArIFwiX2RcIiArIGRheSArIFwiLnBuZ1wiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHJlZiA9IHRoaXMubGVzc29uQ29udGFpbmVyKSAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVmLnJlbW92ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgcmVmLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gKHJlZjEgPSB0aGlzLiRidXR0b24pICE9IG51bGwgPyByZWYxLnJlbW92ZSgpIDogdm9pZCAwO1xuICAgIH1cbiAgfTtcblxuICBXb3JrZmxvd1J1blZpZXcucHJvdG90eXBlLnJlbmRlck1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29mZmVlTWVzc2FnZSwgaHRtbE1lc3NhZ2UsIGpzTWVzc2FnZTtcbiAgICB0aGlzLm5leHRCdXR0b24odHJ1ZSk7XG4gICAgY29mZmVlTWVzc2FnZSA9IHRoaXMuY3VycmVudFN0ZXAuZ2V0Q29mZmVlTWVzc2FnZSgpO1xuICAgIGpzTWVzc2FnZSA9IENvZmZlZVNjcmlwdC5jb21waWxlLmFwcGx5KHRoaXMsIFtcInJldHVybiBcXFwiXCIgKyBjb2ZmZWVNZXNzYWdlICsgXCJcXFwiXCJdKTtcbiAgICBodG1sTWVzc2FnZSA9IGV2YWwoanNNZXNzYWdlKTtcbiAgICB0aGlzLiRlbC5maW5kKFwiI1wiICsgdGhpcy5jaWQgKyBcIl9jdXJyZW50X3N0ZXBcIikuaHRtbChodG1sTWVzc2FnZSk7XG4gICAgcmV0dXJuIHRoaXMuc3ViVmlld1JlbmRlcmVkID0gdHJ1ZTtcbiAgfTtcblxuICBXb3JrZmxvd1J1blZpZXcucHJvdG90eXBlLnJlbmRlck5ldyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3O1xuICAgIHRoaXMubmV4dEJ1dHRvbih0cnVlKTtcbiAgICB2aWV3ID0gdGhpcy5jdXJyZW50U3RlcC5nZXRWaWV3KHtcbiAgICAgIHdvcmtmbG93SWQ6IHRoaXMud29ya2Zsb3cuaWQsXG4gICAgICB0cmlwSWQ6IHRoaXMudHJpcElkXG4gICAgfSk7XG4gICAgdGhpcy5zdGVwc1t0aGlzLmluZGV4XS52aWV3ID0gdmlldztcbiAgICB0aGlzLnN0ZXBzW3RoaXMuaW5kZXhdLnJlc3VsdCA9IHZpZXcuZ2V0UmVzdWx0KCk7XG4gICAgcmV0dXJuIHRoaXMuc2hvd1ZpZXcodmlldyk7XG4gIH07XG5cbiAgV29ya2Zsb3dSdW5WaWV3LnByb3RvdHlwZS5yZW5kZXJBc3Nlc3NtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5uZXh0QnV0dG9uKHRydWUpO1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRTdGVwLmZldGNoKHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGFzc2Vzc21lbnQsIHZpZXc7XG4gICAgICAgICAgYXNzZXNzbWVudCA9IF90aGlzLmN1cnJlbnRTdGVwLmdldFR5cGVNb2RlbCgpO1xuICAgICAgICAgIHZpZXcgPSBuZXcgQXNzZXNzbWVudFJ1blZpZXcoe1xuICAgICAgICAgICAgbW9kZWw6IGFzc2Vzc21lbnQsXG4gICAgICAgICAgICBpbldvcmtmbG93OiB0cnVlLFxuICAgICAgICAgICAgdHJpcElkOiBfdGhpcy50cmlwSWQsXG4gICAgICAgICAgICB3b3JrZmxvd0lkOiBfdGhpcy53b3JrZmxvdy5pZFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChfdGhpcy5hc3Nlc3NtZW50UmVzdW1lSW5kZXggIT0gbnVsbCkge1xuICAgICAgICAgICAgdmlldy5pbmRleCA9IF90aGlzLmFzc2Vzc21lbnRSZXN1bWVJbmRleDtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5hc3Nlc3NtZW50UmVzdW1lSW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzLnN0ZXBzW190aGlzLmluZGV4XS52aWV3ID0gdmlldztcbiAgICAgICAgICBfdGhpcy5zdGVwc1tfdGhpcy5pbmRleF0ucmVzdWx0ID0gdmlldy5nZXRSZXN1bHQoKTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuc2hvd1ZpZXcodmlldyk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFdvcmtmbG93UnVuVmlldy5wcm90b3R5cGUucmVuZGVyQ3VycmljdWx1bSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXJyaWN1bHVtSWQsIHN1YnRlc3RzO1xuICAgIHRoaXMubmV4dEJ1dHRvbihmYWxzZSk7XG4gICAgY3VycmljdWx1bUlkID0gdGhpcy5jdXJyZW50U3RlcC5nZXRUeXBlc0lkKCk7XG4gICAgc3VidGVzdHMgPSBuZXcgU3VidGVzdHM7XG4gICAgcmV0dXJuIHN1YnRlc3RzLmZldGNoKHtcbiAgICAgIGtleTogY3VycmljdWx1bUlkLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgY3JpdGVyaWEsIGdyYWRlLCBpdGVtVHlwZSwgbm93LCBzdWJ0ZXN0LCB0ZXJtLCB0ZXJtMUVuZCwgdGVybTFTdGFydCwgdGVybTJFbmQsIHRlcm0yU3RhcnQsIHRlcm0zRW5kLCB0ZXJtM1N0YXJ0LCB0aGlzWWVhciwgdmlldztcbiAgICAgICAgICBpdGVtVHlwZSA9IF90aGlzLmdldFN0cmluZyhfdGhpcy5jdXJyZW50U3RlcC5nZXRDdXJyaWN1bHVtSXRlbVR5cGUoKSk7XG4gICAgICAgICAgZ3JhZGUgPSBfdGhpcy5nZXROdW1iZXIoX3RoaXMuY3VycmVudFN0ZXAuZ2V0Q3VycmljdWx1bUdyYWRlKCkpO1xuICAgICAgICAgIHRoaXNZZWFyID0gKG5ldyBEYXRlKCkpLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgdGVybTFTdGFydCA9IG1vbWVudCh0aGlzWWVhciArIFwiIEphbiAxXCIpO1xuICAgICAgICAgIHRlcm0xRW5kID0gbW9tZW50KHRoaXNZZWFyICsgXCIgQXByaWwgMzBcIik7XG4gICAgICAgICAgdGVybTJTdGFydCA9IG1vbWVudCh0aGlzWWVhciArIFwiIE1heSAxXCIpO1xuICAgICAgICAgIHRlcm0yRW5kID0gbW9tZW50KHRoaXNZZWFyICsgXCIgQXVnIDMxXCIpO1xuICAgICAgICAgIHRlcm0zU3RhcnQgPSBtb21lbnQodGhpc1llYXIgKyBcIiBTZXB0IDFcIik7XG4gICAgICAgICAgdGVybTNFbmQgPSBtb21lbnQodGhpc1llYXIgKyBcIiBEZWMgMzFcIik7XG4gICAgICAgICAgbm93ID0gbW9tZW50KCk7XG4gICAgICAgICAgdGVybSA9ICh0ZXJtMVN0YXJ0IDw9IG5vdyAmJiBub3cgPD0gdGVybTFFbmQpID8gMSA6ICh0ZXJtMlN0YXJ0IDw9IG5vdyAmJiBub3cgPD0gdGVybTJFbmQpID8gMiA6ICh0ZXJtM1N0YXJ0IDw9IG5vdyAmJiBub3cgPD0gdGVybTNFbmQpID8gMyA6IHZvaWQgMDtcbiAgICAgICAgICBjcml0ZXJpYSA9IHtcbiAgICAgICAgICAgIGl0ZW1UeXBlOiBpdGVtVHlwZSxcbiAgICAgICAgICAgIHBhcnQ6IHRlcm0sXG4gICAgICAgICAgICBncmFkZTogZ3JhZGVcbiAgICAgICAgICB9O1xuICAgICAgICAgIHN1YnRlc3QgPSBfKHN1YnRlc3RzLndoZXJlKHtcbiAgICAgICAgICAgIGl0ZW1UeXBlOiBpdGVtVHlwZSxcbiAgICAgICAgICAgIHBhcnQ6IHRlcm0sXG4gICAgICAgICAgICBncmFkZTogZ3JhZGVcbiAgICAgICAgICB9KSkuZmlyc3QoKTtcbiAgICAgICAgICBpZiAoc3VidGVzdCA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQoXCJTdWJ0ZXN0IG5vdCBmb3VuZCBmb3IgPGJyPiBpdGVtVHlwZTogXCIgKyBpdGVtVHlwZSArIFwiPGJyPiB0ZXJtOiBcIiArIHRlcm0gKyBcIjxicj4gZ3JhZGU6IFwiICsgZ3JhZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2aWV3ID0gbmV3IEtsYXNzU3VidGVzdFJ1blZpZXcoe1xuICAgICAgICAgICAgc3R1ZGVudDogbmV3IFN0dWRlbnQsXG4gICAgICAgICAgICBzdWJ0ZXN0OiBzdWJ0ZXN0LFxuICAgICAgICAgICAgcXVlc3Rpb25zOiBuZXcgUXVlc3Rpb25zLFxuICAgICAgICAgICAgbGlua2VkUmVzdWx0OiBuZXcgS2xhc3NSZXN1bHQsXG4gICAgICAgICAgICBpbldvcmtmbG93OiB0cnVlLFxuICAgICAgICAgICAgdHJpcElkOiBfdGhpcy50cmlwSWQsXG4gICAgICAgICAgICB3b3JrZmxvd0lkOiBfdGhpcy53b3JrZmxvdy5pZFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIF90aGlzLnN0ZXBzW190aGlzLmluZGV4XS52aWV3ID0gdmlldztcbiAgICAgICAgICByZXR1cm4gX3RoaXMuc2hvd1ZpZXcodmlldywgX3RoaXMuY3VycmVudFN0ZXAuZ2V0TmFtZSgpKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgV29ya2Zsb3dSdW5WaWV3LnByb3RvdHlwZS5yZW5kZXJFbmQgPSBmdW5jdGlvbigpIHtcbiAgICBVdGlscy5ncHNQaW5nO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIjXCIgKyB0aGlzLmNpZCArIFwiX2N1cnJlbnRfc3RlcFwiKS5odG1sKFwiPHA+WW91IGhhdmUgY29tcGxldGVkIHRoaXMgQ2xhc3Nyb29tIE9ic2VydmF0aW9uLjwvcD4gPGJ1dHRvbiBjbGFzcz0nbmF2LWJ1dHRvbic+PGEgaHJlZj0nI2ZlZWRiYWNrL1wiICsgdGhpcy53b3JrZmxvdy5pZCArIFwiJz5HbyB0byBmZWVkYmFjazwvYT48L2J1dHRvbj4gPHA+T25jZSBpbiBmZWVkYmFjayBzZWxlY3QgdGhlIGFwcHJvcHJpYXRlIGNvdW50eSwgem9uZSwgc2Nob29sIGFuZCBkYXRlIG9mIHRoaXMgc2Nob29sIHZpc2l0IHRvIHJldHJpZXZlIHRoZSBmZWVkYmFjayBmb3IgdGhpcyBsZXNzb24gb2JzZXJ2YXRpb24uIFRoaXMgaW5mb3JtYXRpb24gaXMgdG8gYmUgdXNlZCBpbiB5b3VyIHJlZmxlY3Rpb25zIGFuZCBkaXNjdXNzaW9uIHdpdGggdGhlIHRlYWNoZXIuPC9wPiA8YnV0dG9uIGNsYXNzPSduYXYtYnV0dG9uJz48YSBocmVmPScjJz5NYWluPC9hPjwvYnV0dG9uPlwiKTtcbiAgfTtcblxuICBXb3JrZmxvd1J1blZpZXcucHJvdG90eXBlLm5leHRCdXR0b24gPSBmdW5jdGlvbihhcHByb3ByaWF0ZSkge1xuICAgIGlmIChhcHByb3ByaWF0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCJidXR0b24ubmV4dFwiKS5zaG93KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiYnV0dG9uLm5leHRcIikuaGlkZSgpO1xuICAgIH1cbiAgfTtcblxuICBXb3JrZmxvd1J1blZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVmLCByZWYxO1xuICAgIGlmICgocmVmID0gdGhpcy5sZXNzb25Db250YWluZXIpICE9IG51bGwpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVmLnJlbW92ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJlZi5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChyZWYxID0gdGhpcy4kYnV0dG9uKSAhPSBudWxsID8gdHlwZW9mIHJlZjEucmVtb3ZlID09PSBcImZ1bmN0aW9uXCIgPyByZWYxLnJlbW92ZSgpIDogdm9pZCAwIDogdm9pZCAwO1xuICB9O1xuXG4gIFdvcmtmbG93UnVuVmlldy5wcm90b3R5cGUuc2hvd1ZpZXcgPSBmdW5jdGlvbihzdWJWaWV3LCBoZWFkZXIpIHtcbiAgICBpZiAoaGVhZGVyID09IG51bGwpIHtcbiAgICAgIGhlYWRlciA9ICcnO1xuICAgIH1cbiAgICBpZiAoaGVhZGVyICE9PSAnJykge1xuICAgICAgaGVhZGVyID0gXCI8aDE+XCIgKyBoZWFkZXIgKyBcIjwvaDE+XCI7XG4gICAgfVxuICAgIHRoaXMuc3ViVmlldyA9IHN1YlZpZXc7XG4gICAgdGhpcy4kZWwuZmluZChcIiNoZWFkZXItY29udGFpbmVyXCIpLmh0bWwoaGVhZGVyKTtcbiAgICB0aGlzLnN1YlZpZXcuc2V0RWxlbWVudCh0aGlzLiRlbC5maW5kKFwiI1wiICsgdGhpcy5jaWQgKyBcIl9jdXJyZW50X3N0ZXBcIikpO1xuICAgIHRoaXMubGlzdGVuVG8odGhpcy5zdWJWaWV3LCBcInN1YlZpZXdEb25lIHNhdmVcIiwgdGhpcy5vblN1YlZpZXdEb25lKTtcbiAgICB0aGlzLmxpc3RlblRvKHRoaXMuc3ViVmlldywgXCJyZW5kZXJlZFwiLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgX3RoaXMuc3ViVmlld1JlbmRlcmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICAgIHJldHVybiB0aGlzLnN1YlZpZXcucmVuZGVyKCk7XG4gIH07XG5cbiAgcmV0dXJuIFdvcmtmbG93UnVuVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIFdvcmtmbG93U2VsZWN0VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBldmVudHM6XG4gICAgJ2NoYW5nZSBpbnB1dFt0eXBlPWNoZWNrYm94XScgOiAnb25DaGVja2JveENoYW5nZSdcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBAW2tleV0gPSB2YWx1ZSBmb3Iga2V5LCB2YWx1ZSBvZiBvcHRpb25zXG4gICAgXG4gICAgQHJlYWR5ID0gZmFsc2VcbiAgICBAYnV0dG9ucyA9IFtdXG5cbiAgICBAaXNBZG1pbiA9IFRhbmdlcmluZS51c2VyLmlzQWRtaW4oKVxuICAgIFxuICAgIEB3b3JrZmxvd3MgPSBuZXcgV29ya2Zsb3dzXG4gICAgQHdvcmtmbG93cy5mZXRjaFxuICAgICAgZXJyb3I6ICQubm9vcFxuICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgQHJlYWR5ID0gdHJ1ZVxuICAgICAgICBAcmVuZGVyKClcblxuICByZW5kZXI6IC0+XG5cbiAgICByZXR1cm4gdW5sZXNzIEByZWFkeVxuXG4gICAgaGlkZGVuV29ya2Zsb3dzID0gVGFuZ2VyaW5lLnVzZXIuZ2V0UHJlZmVyZW5jZXMoXCJ0dXRvci13b3JrZmxvd3NcIiwgXCJoaWRkZW5cIikgfHwgW11cblxuICAgIGh0bWxXb3JrZmxvd3MgPSBcIjxoMT5TZWxlY3QgV29ya2Zsb3dzPC9oMT5cIlxuXG4gICAgZm9yIHdvcmtmbG93IGluIEB3b3JrZmxvd3MubW9kZWxzXG4gICAgICBjaGVja2VkSHRtbCA9IHVubGVzcyB3b3JrZmxvdy5pZCBpbiBoaWRkZW5Xb3JrZmxvd3NcbiAgICAgICAgXCJjaGVja2VkPSdjaGVja2VkJ1wiXG4gICAgICBlbHNlXG4gICAgICAgIFwiXCJcblxuICAgICAgaHRtbFdvcmtmbG93cyArPSBcIlxuICAgICAgICA8bGkgaWQ9JyN7d29ya2Zsb3cuaWR9JyBzdHlsZT0nbWFyZ2luLWJvdHRvbToyNXB4Oyc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nI3t3b3JrZmxvdy5pZH0tY2hlY2tib3gnIGRhdGEtaWQ9JyN7d29ya2Zsb3cuaWR9Jz48aW5wdXQgdHlwZT0nY2hlY2tib3gnICN7Y2hlY2tlZEh0bWx9IGNsYXNzPSdzZWxlY3RhYmxlJyBkYXRhLWlkPScje3dvcmtmbG93LmlkfScgaWQ9JyN7d29ya2Zsb3cuaWR9LWNoZWNrYm94JyAje2lmICFAaXNBZG1pbiB0aGVuIFwiZGlzYWJsZWQ9J2Rpc2FibGVkJ1wiIH0+I3t3b3JrZmxvdy5nZXQoJ25hbWUnKX08L2xhYmVsPlxuICAgICAgICA8L2xpPlxuICAgICAgXCJcblxuICAgIEAkZWwuaHRtbCBodG1sV29ya2Zsb3dzXG5cbiAgICByZXR1cm5cblxuICBvbkNsb3NlOiAtPlxuICAgIGZvciBidXR0b24gaW4gQGJ1dHRvbnNcbiAgICAgIGJ1dHRvbi5jbG9zZSgpXG5cbiAgb25DaGVja2JveENoYW5nZTogKGV2ZW50KSAtPlxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICB3b3JrZmxvd0lkID0gJHRhcmdldC5hdHRyKCdkYXRhLWlkJylcblxuICAgIHJldHVybiB1bmxlc3Mgd29ya2Zsb3dJZCAjIGRvbid0IHJlc3BvbmQgdG8gbGFiZWwgY2xpY2tzXG4gICAgQCRlbC5maW5kKFwiaW5wdXRcIikuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuXG4gICAgaGlkZGVuV29ya2Zsb3dzID0gVGFuZ2VyaW5lLnVzZXIuZ2V0UHJlZmVyZW5jZXMoXCJ0dXRvci13b3JrZmxvd3NcIiwgXCJoaWRkZW5cIikgfHwgW11cblxuICAgIGlzQ2hlY2tlZCA9ICR0YXJnZXQucHJvcCgnY2hlY2tlZCcpXG5cbiAgICBpZiBub3QgaXNDaGVja2VkIFxuICAgICAgaGlkZGVuV29ya2Zsb3dzLnB1c2ggd29ya2Zsb3dJZFxuICAgIGVsc2UgaWYgaXNDaGVja2VkXG4gICAgICBoaWRkZW5Xb3JrZmxvd3MgPSBoaWRkZW5Xb3JrZmxvd3MuZmlsdGVyIChlKSAtPiAoZSAhPSB3b3JrZmxvd0lkKVxuICAgIFxuICAgIFRhbmdlcmluZS51c2VyLnNldFByZWZlcmVuY2VzIFwidHV0b3Itd29ya2Zsb3dzXCIsIFwiaGlkZGVuXCIsIGhpZGRlbldvcmtmbG93cywgPT4gXG4gICAgICBAJGVsLmZpbmQoXCJpbnB1dFwiKS5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIilcbiAgICAgIFV0aWxzLnRvcEFsZXJ0IFwiU2F2ZWRcIlxuXG4iLCJ2YXIgV29ya2Zsb3dTZWxlY3RWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgaW5kZXhPZiA9IFtdLmluZGV4T2YgfHwgZnVuY3Rpb24oaXRlbSkgeyBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7IGlmIChpIGluIHRoaXMgJiYgdGhpc1tpXSA9PT0gaXRlbSkgcmV0dXJuIGk7IH0gcmV0dXJuIC0xOyB9O1xuXG5Xb3JrZmxvd1NlbGVjdFZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoV29ya2Zsb3dTZWxlY3RWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBXb3JrZmxvd1NlbGVjdFZpZXcoKSB7XG4gICAgcmV0dXJuIFdvcmtmbG93U2VsZWN0Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFdvcmtmbG93U2VsZWN0Vmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdjaGFuZ2UgaW5wdXRbdHlwZT1jaGVja2JveF0nOiAnb25DaGVja2JveENoYW5nZSdcbiAgfTtcblxuICBXb3JrZmxvd1NlbGVjdFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGtleSwgdmFsdWU7XG4gICAgZm9yIChrZXkgaW4gb3B0aW9ucykge1xuICAgICAgdmFsdWUgPSBvcHRpb25zW2tleV07XG4gICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICAgIHRoaXMuYnV0dG9ucyA9IFtdO1xuICAgIHRoaXMuaXNBZG1pbiA9IFRhbmdlcmluZS51c2VyLmlzQWRtaW4oKTtcbiAgICB0aGlzLndvcmtmbG93cyA9IG5ldyBXb3JrZmxvd3M7XG4gICAgcmV0dXJuIHRoaXMud29ya2Zsb3dzLmZldGNoKHtcbiAgICAgIGVycm9yOiAkLm5vb3AsXG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyKCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFdvcmtmbG93U2VsZWN0Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNoZWNrZWRIdG1sLCBoaWRkZW5Xb3JrZmxvd3MsIGh0bWxXb3JrZmxvd3MsIGksIGxlbiwgcmVmLCByZWYxLCB3b3JrZmxvdztcbiAgICBpZiAoIXRoaXMucmVhZHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaGlkZGVuV29ya2Zsb3dzID0gVGFuZ2VyaW5lLnVzZXIuZ2V0UHJlZmVyZW5jZXMoXCJ0dXRvci13b3JrZmxvd3NcIiwgXCJoaWRkZW5cIikgfHwgW107XG4gICAgaHRtbFdvcmtmbG93cyA9IFwiPGgxPlNlbGVjdCBXb3JrZmxvd3M8L2gxPlwiO1xuICAgIHJlZiA9IHRoaXMud29ya2Zsb3dzLm1vZGVscztcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHdvcmtmbG93ID0gcmVmW2ldO1xuICAgICAgY2hlY2tlZEh0bWwgPSAocmVmMSA9IHdvcmtmbG93LmlkLCBpbmRleE9mLmNhbGwoaGlkZGVuV29ya2Zsb3dzLCByZWYxKSA8IDApID8gXCJjaGVja2VkPSdjaGVja2VkJ1wiIDogXCJcIjtcbiAgICAgIGh0bWxXb3JrZmxvd3MgKz0gXCI8bGkgaWQ9J1wiICsgd29ya2Zsb3cuaWQgKyBcIicgc3R5bGU9J21hcmdpbi1ib3R0b206MjVweDsnPiA8bGFiZWwgZm9yPSdcIiArIHdvcmtmbG93LmlkICsgXCItY2hlY2tib3gnIGRhdGEtaWQ9J1wiICsgd29ya2Zsb3cuaWQgKyBcIic+PGlucHV0IHR5cGU9J2NoZWNrYm94JyBcIiArIGNoZWNrZWRIdG1sICsgXCIgY2xhc3M9J3NlbGVjdGFibGUnIGRhdGEtaWQ9J1wiICsgd29ya2Zsb3cuaWQgKyBcIicgaWQ9J1wiICsgd29ya2Zsb3cuaWQgKyBcIi1jaGVja2JveCcgXCIgKyAoIXRoaXMuaXNBZG1pbiA/IFwiZGlzYWJsZWQ9J2Rpc2FibGVkJ1wiIDogdm9pZCAwKSArIFwiPlwiICsgKHdvcmtmbG93LmdldCgnbmFtZScpKSArIFwiPC9sYWJlbD4gPC9saT5cIjtcbiAgICB9XG4gICAgdGhpcy4kZWwuaHRtbChodG1sV29ya2Zsb3dzKTtcbiAgfTtcblxuICBXb3JrZmxvd1NlbGVjdFZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYnV0dG9uLCBpLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICByZWYgPSB0aGlzLmJ1dHRvbnM7XG4gICAgcmVzdWx0cyA9IFtdO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgYnV0dG9uID0gcmVmW2ldO1xuICAgICAgcmVzdWx0cy5wdXNoKGJ1dHRvbi5jbG9zZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgV29ya2Zsb3dTZWxlY3RWaWV3LnByb3RvdHlwZS5vbkNoZWNrYm94Q2hhbmdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldCwgaGlkZGVuV29ya2Zsb3dzLCBpc0NoZWNrZWQsIHdvcmtmbG93SWQ7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICB3b3JrZmxvd0lkID0gJHRhcmdldC5hdHRyKCdkYXRhLWlkJyk7XG4gICAgaWYgKCF3b3JrZmxvd0lkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuJGVsLmZpbmQoXCJpbnB1dFwiKS5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgIGhpZGRlbldvcmtmbG93cyA9IFRhbmdlcmluZS51c2VyLmdldFByZWZlcmVuY2VzKFwidHV0b3Itd29ya2Zsb3dzXCIsIFwiaGlkZGVuXCIpIHx8IFtdO1xuICAgIGlzQ2hlY2tlZCA9ICR0YXJnZXQucHJvcCgnY2hlY2tlZCcpO1xuICAgIGlmICghaXNDaGVja2VkKSB7XG4gICAgICBoaWRkZW5Xb3JrZmxvd3MucHVzaCh3b3JrZmxvd0lkKTtcbiAgICB9IGVsc2UgaWYgKGlzQ2hlY2tlZCkge1xuICAgICAgaGlkZGVuV29ya2Zsb3dzID0gaGlkZGVuV29ya2Zsb3dzLmZpbHRlcihmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBlICE9PSB3b3JrZmxvd0lkO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci5zZXRQcmVmZXJlbmNlcyhcInR1dG9yLXdvcmtmbG93c1wiLCBcImhpZGRlblwiLCBoaWRkZW5Xb3JrZmxvd3MsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBfdGhpcy4kZWwuZmluZChcImlucHV0XCIpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgcmV0dXJuIFV0aWxzLnRvcEFsZXJ0KFwiU2F2ZWRcIik7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuICByZXR1cm4gV29ya2Zsb3dTZWxlY3RWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgV29ya2Zsb3dNZW51TWVtYmVyVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIldvcmtmbG93TWVudU1lbWJlclZpZXdcIlxuXG4gIGV2ZW50czpcbiAgICBcImNsaWNrIC53b3JrZmxvdy1uZXdcIiAgICA6ICduZXcnXG4gICAgXCJjbGljayAud29ya2Zsb3ctZGVsZXRlXCIgOiBcImRlbGV0ZVwiXG4gICAgXCJjbGljayAud29ya2Zsb3ctcnVuXCIgICAgOiBcInJ1blwiXG4gICAgXCJjbGljayAud29ya2Zsb3ctZWRpdFwiICAgOiBcImVkaXRcIlxuICAgIFwiY2xpY2sgLndvcmtmbG93LWNzdlwiICAgIDogXCJjc3ZQcm9tcHRNb250aFwiXG4gICAgJ2NsaWNrIC5yZW1vdmUtcmVzdW1lJyAgIDogJ3JlbW92ZVJlc3VtZSdcblxuICByZW1vdmVSZXN1bWU6IChldmVudCkgLT5cblxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICB3b3JrZmxvd0lkID0gJHRhcmdldC5hdHRyKFwiZGF0YS13b3JrZmxvd0lkXCIpXG4gICAgdHJpcElkICAgICA9ICR0YXJnZXQuYXR0cihcImRhdGEtdHJpcElkXCIpXG4gICAgcmV0dXJuIHVubGVzcyBjb25maXJtIFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSB0aGUgb3B0aW9uIHRvIHJlc3VtZSB0aGlzIHdvcmtmbG93P1wiXG5cbiAgICBpbmNvbXBsZXRlID0gVGFuZ2VyaW5lLnVzZXIuZ2V0UHJlZmVyZW5jZXMoXCJ0dXRvci13b3JrZmxvd3NcIiwgXCJpbmNvbXBsZXRlXCIpIHx8IHt9XG5cbiAgICBpbmNvbXBsZXRlW3dvcmtmbG93SWRdID0gXyhpbmNvbXBsZXRlW3dvcmtmbG93SWRdKS53aXRob3V0IHRyaXBJZFxuXG4gICAgVGFuZ2VyaW5lLnVzZXIuc2V0UHJlZmVyZW5jZXMgXCJ0dXRvci13b3JrZmxvd3NcIiwgXCJpbmNvbXBsZXRlXCIsIGluY29tcGxldGUsID0+XG4gICAgICBAdXBkYXRlV29ya2Zsb3dzKClcblxuICBuZXc6IC0+XG4gICAgZ3VpZCA9IFV0aWxzLmd1aWQoKVxuICAgIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJ3b3JrZmxvdy9lZGl0LyN7Z3VpZH1cIiwgZmFsc2VcbiAgICB3b3JrZmxvdyA9IG5ldyBXb3JrZmxvdyBcIl9pZFwiIDogZ3VpZFxuICAgIHZpZXcgPSBuZXcgV29ya2Zsb3dFZGl0VmlldyB3b3JrZmxvdyA6IHdvcmtmbG93XG4gICAgdm0uc2hvdyB2aWV3XG5cbiAgZGVsZXRlOiAoZXZlbnQpIC0+XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgIHdvcmtmbG93SWQgPSAkdGFyZ2V0LnBhcmVudChcImxpXCIpLmF0dHIoJ2lkJylcbiAgICBuYW1lID0gQHdvcmtmbG93cy5nZXQod29ya2Zsb3dJZCkuZ2V0KCduYW1lJylcbiAgICBpZiBjb25maXJtIFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB3b3JrZmxvdyAje25hbWV9P1wiXG4gICAgICBAd29ya2Zsb3dzLmdldCh3b3JrZmxvd0lkKS5kZXN0cm95XG4gICAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgICAgQHJlbmRlcigpXG5cbiAgTU9OVEhTOiBbbnVsbCwgJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ11cbiAgY3N2UHJvbXB0TW9udGg6IChldmVudCkgLT5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG5cbiAgICB3b3JrZmxvd1RpdGxlID0gJHRhcmdldC5wYXJlbnQoKS5maW5kKFwiLndvcmtmbG93LXRpdGxlXCIpLmh0bWxcbiAgICByZXBvcnRVcmwgPSAkdGFyZ2V0LmF0dHIoJ2hyZWYnKVxuXG4gICAgZCA9IG5ldyBEYXRlXG4gICAgdGhpc01vbnRoID0gZC5nZXRNb250aCgpICsgMVxuICAgIHRoaXNZZWFyICA9IGQuZ2V0RnVsbFllYXIoKVxuXG4gICAgbW9kYWxDb250ZW50ID0gXCJcbiAgICAgIDxkaXYgaWQ9J2NzdlJlcG9ydEZvcm0nPlxuICAgICAgPGgxPkNTViBSZXBvcnRpbmc8L2gxPlxuICAgICAgPGlucHV0IGlkPSdjc3ZVcmwnIG5hbWU9J2NzdlVybCcgdHlwZT0naGlkZGVuJyB2YWx1ZT0nI3tyZXBvcnRVcmx9Jz5cbiAgICAgIDxwPlNlbGVjdCB0aGUgbW9udGggdGhhdCB5b3Ugd291bGQgbGlrZSB0byBnZW5lcmF0ZTo8L3A+XG4gICAgICA8bGFiZWwgZm9yPSdjc3ZZZWFyJz5ZZWFyOjwvbGFiZWw+XG4gICAgICA8c2VsZWN0IGlkPSdjc3ZZZWFyJyBuYW1lPSdjc3ZZZWFyJz5cbiAgICAgICAgI3soXCI8b3B0aW9uICB2YWx1ZT0nI3t5ZWFyfScgI3tpZiB5ZWFyIGlzIHRoaXNZZWFyIHRoZW4gJ3NlbGVjdGVkJyBlbHNlICcnfT4je3llYXJ9PC9vcHRpb24+XCIgZm9yIHllYXIgaW4gW3RoaXNZZWFyLTEuLnRoaXNZZWFyKzFdKS5qb2luKCcnKX1cbiAgICAgIDwvc2VsZWN0PlxuICAgICAgPGJyLz5cbiAgICAgIDxsYWJlbCBmb3I9J2Nzdk1vbnRoJz5Nb250aDo8L2xhYmVsPlxuICAgICAgPHNlbGVjdCBpZD0nY3N2TW9udGgnIG5hbWU9J2Nzdk5hbWUnPlxuICAgICAgICAjeyhcIjxvcHRpb24gIHZhbHVlPScje2luZGV4fScgI3tpZiBpbmRleCBpcyB0aGlzTW9udGggdGhlbiAnc2VsZWN0ZWQ9XCJ0cnVlXCInIGVsc2UgJyd9PiN7QE1PTlRIU1tpbmRleF19PC9vcHRpb24+XCIgIGZvciBpbmRleCBpbiBbMS4uMTJdKS5qb2luKCcnKX1cbiAgICAgIDwvc2VsZWN0PlxuICAgICAgPGJyLz5cbiAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQnIGRhdGEtYWN0aW9uPSdjYW5jZWwnPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCcgZGF0YS1hY3Rpb249J2dlbmVyYXRlJz5HZW5lcmF0ZSBSZXBvcnQ8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIFwiXG4gICAgXG4gICAgVXRpbHMubW9kYWwgbW9kYWxDb250ZW50XG5cbiAgICAkYnV0dG9uID0gJChcIiNjc3ZSZXBvcnRGb3JtIGJ1dHRvblwiKVxuXG4gICAgJGJ1dHRvbi5vbiBcImNsaWNrXCIsIChldmVudCkgLT5cbiAgICAgICRidXR0b24ub2ZmIFwiY2xpY2tcIlxuXG4gICAgICBpZiAkKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtYWN0aW9uXCIpID09IFwiZ2VuZXJhdGVcIlxuXG4gICAgICAgICRjc3ZVcmwgPSAkKFwiI2NzdlJlcG9ydEZvcm0gI2NzdlVybFwiKS52YWwoKVxuICAgICAgICAkY3N2WWVhciA9ICQoXCIjY3N2UmVwb3J0Rm9ybSAjY3N2WWVhciBvcHRpb246c2VsZWN0ZWRcIikudmFsKClcbiAgICAgICAgJGNzdk1vbnRoID0gJChcIiNjc3ZSZXBvcnRGb3JtICNjc3ZNb250aFwiKS52YWwoKVxuXG4gICAgICAgIHVybCA9IFtcbiAgICAgICAgICAkY3N2VXJsXG4gICAgICAgICAgJGNzdlllYXJcbiAgICAgICAgICAkY3N2TW9udGhcbiAgICAgICAgXS5qb2luKCcvJylcbiAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LmxvY2F0aW9uID0gdXJsXG5cbiAgICAgIFV0aWxzLm1vZGFsIGZhbHNlXG5cbiAgICBmYWxzZVxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBba2V5XSA9IHZhbHVlIGZvciBrZXksIHZhbHVlIG9mIG9wdGlvbnNcbiAgICBAd29ya2Zsb3dzID0gbmV3IFdvcmtmbG93c1xuICAgIEB3b3JrZmxvd3MuZmV0Y2hcbiAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgIEBmZWVkYmFja3MgPSBuZXcgRmVlZGJhY2tzIFxuICAgICAgICBAZmVlZGJhY2tzLmZldGNoXG4gICAgICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgICAgIEByZWFkeSA9IHRydWVcbiAgICAgICAgICAgIEByZW5kZXIoKVxuXG4gIHJlbmRlcjogLT5cblxuICAgIHJldHVybiB1bmxlc3MgQHJlYWR5IGlzIHRydWVcblxuICAgIGh0bWxXb3JrZmxvd3MgPSBcIlwiXG5cbiAgICBmb3Igd29ya2Zsb3cgaW4gQHdvcmtmbG93cy5tb2RlbHNcbiAgICAgIFxuICAgICAgY3N2VXJsID0gXCIvYnJvY2ttYW4vd29ya2Zsb3cvI3tUYW5nZXJpbmUuZGJfbmFtZX0vI3t3b3JrZmxvdy5pZH1cIlxuICAgICAgXG4gICAgICBmZWVkYmFjayA9IEBmZWVkYmFja3MuZ2V0KHdvcmtmbG93LmlkK1wiLWZlZWRiYWNrXCIpXG5cbiAgICAgIGlmIGZlZWRiYWNrPyBhbmQgZmVlZGJhY2suZ2V0KFwiY2hpbGRyZW5cIik/Lmxlbmd0aCA+IDBcbiAgICAgICAgZmVlZGJhY2tIdG1sID0gXCI8YSBocmVmPScjZmVlZGJhY2svI3t3b3JrZmxvdy5pZH0nPmZlZWRiYWNrPC9hPlwiXG4gICAgICBlbHNlXG4gICAgICAgIGZlZWRiYWNrSHRtbCA9IFwiXCJcblxuICAgICAgaHRtbFdvcmtmbG93cyArPSBcIlxuICAgICAgICA8bGkgaWQ9JyN7d29ya2Zsb3cuaWR9JyBzdHlsZT0nbWFyZ2luLWJvdHRvbToxNXB4Oyc+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9J3dvcmtmbG93LXRpdGxlJz4je3dvcmtmbG93LmdldCgnbmFtZScpfTwvc3Bhbj5cbiAgICAgICAgICA8YnI+XG4gICAgICAgICAgPCEtLTxhIGhyZWY9JyN3b3JrZmxvdy9ydW4vI3t3b3JrZmxvdy5pZH0nPnJ1bjwvYT4tLT5cbiAgICAgICAgICA8YSBjbGFzcz0nd29ya2Zsb3ctY3N2JyBocmVmPScje2NzdlVybH0nPmNzdjwvYT5cbiAgICAgICAgPC9saT5cbiAgICAgICAgXCJcblxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGgxPldvcmtmbG93czwvaDE+XG4gICAgICA8dWwgY2xhc3M9J3dvcmtmbG93LW1lbnUnPiN7aHRtbFdvcmtmbG93c308L3VsPlxuICAgIFwiXG5cblxuICByZW5kZXJNb2JpbGU6ID0+XG5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgIDx1bCBjbGFzcz0nd29ya2Zsb3ctbWVudSc+PC91bD5cbiAgICBcIlxuXG4gICAgQHVwZGF0ZVdvcmtmbG93cygpXG4gICAgXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgdXBkYXRlV29ya2Zsb3dzOiAtPlxuXG4gICAgaGlkZGVuV29ya2Zsb3dzID0gVGFuZ2VyaW5lLnVzZXIuZ2V0UHJlZmVyZW5jZXMoXCJ0dXRvci13b3JrZmxvd3NcIiwgXCJoaWRkZW5cIikgfHwgW11cblxuICAgIGh0bWxXb3JrZmxvd3MgPSBcIlwiXG5cbiAgICBAd29ya2Zsb3dzLm1vZGVscy5zb3J0KCAoYSxiKSAtPlxuICAgICAgaWYgYS5nZXQoJ25hbWUnKS50b0xvd2VyQ2FzZSgpIDwgYi5nZXQoJ25hbWUnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIHJldHVybiAtMVxuICAgICAgZWxzZSBpZiBhLmdldCgnbmFtZScpLnRvTG93ZXJDYXNlKCkgPiBiLmdldCgnbmFtZScpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgcmV0dXJuIDFcbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIDBcbiAgICApXG5cbiAgICBmb3Igd29ya2Zsb3cgaW4gQHdvcmtmbG93cy5tb2RlbHNcbiAgICAgIGNvbnRpbnVlIGlmIHdvcmtmbG93LmlkIGluIGhpZGRlbldvcmtmbG93c1xuXG4gICAgICBmZWVkYmFjayA9IEBmZWVkYmFja3MuZ2V0KHdvcmtmbG93LmlkK1wiLWZlZWRiYWNrXCIpXG5cbiAgICAgIGlmIHdvcmtmbG93LmdldEJvb2xlYW4oXCJlbmFibGVGZWVkYmFja1wiKSBhbmQgZmVlZGJhY2s/IGFuZCBmZWVkYmFjay5nZXQoXCJjaGlsZHJlblwiKT8ubGVuZ3RoID4gMFxuICAgICAgICBmZWVkYmFja0h0bWwgPSBcIjxidXR0b24gY2xhc3M9J2NvbW1hbmQnPjxhIGhyZWY9JyNmZWVkYmFjay8je3dvcmtmbG93LmlkfSc+RmVlZGJhY2s8L2E+PC9idXR0b24+XCJcbiAgICAgIGVsc2VcbiAgICAgICAgZmVlZGJhY2tIdG1sID0gXCJcIlxuXG4gICAgICBodG1sV29ya2Zsb3dzICs9IFwiXG4gICAgICAgIDxsaSBpZD0nI3t3b3JrZmxvdy5pZH0nIHN0eWxlPSdtYXJnaW4tYm90dG9tOjEycHg7IHBhZGRpbmctYm90dG9tOiAxMnB4OyBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZTsnPlxuICAgICAgICAgICAgPGEgaHJlZj0nI3dvcmtmbG93L3J1bi8je3dvcmtmbG93LmlkfScgY2xhc3M9J3dvcmtmbG93LWJ1dHRvbi1saW5rJz4je3dvcmtmbG93LmdldCgnbmFtZScpfTwvYT5cbiAgICAgICAgICAgICN7ZmVlZGJhY2tIdG1sfVxuICAgICAgICAgICAgPGRpdiBpZD0ncmVzdW1lLXdvcmtmbG93LSN7d29ya2Zsb3cuaWR9Jz48L2Rpdj5cbiAgICAgICAgPC9saT5cbiAgICAgICAgXCJcbiAgICBAJGVsLmZpbmQoXCIud29ya2Zsb3ctbWVudVwiKS5odG1sIGh0bWxXb3JrZmxvd3NcblxuICAgIEByZW5kZXJSZXN1bWVJbmZvKClcblxuICByZW5kZXJSZXN1bWVJbmZvOiAtPlxuXG4gICAgICBpbmNvbXBsZXRlV29ya2Zsb3dzID0gVGFuZ2VyaW5lLnVzZXIuZ2V0UHJlZmVyZW5jZXMoJ3R1dG9yLXdvcmtmbG93cycsICdpbmNvbXBsZXRlJykgfHwge31cblxuICAgICAgZm9yIHdvcmtmbG93SWQsIHRyaXBJZHMgb2YgaW5jb21wbGV0ZVdvcmtmbG93c1xuICAgICAgICBpZiB0cmlwSWRzLmxlbmd0aCBpc250IDBcbiAgICAgICAgICBmb3IgdHJpcElkIGluIHRyaXBJZHNcbiAgICAgICAgICAgIFRhbmdlcmluZS4kZGIudmlldyBcIiN7VGFuZ2VyaW5lLmRlc2lnbl9kb2N9L3RyaXBzQW5kVXNlcnNcIixcbiAgICAgICAgICAgICAga2V5OiB0cmlwSWRcbiAgICAgICAgICAgICAgaW5jbHVkZV9kb2NzIDogdHJ1ZVxuICAgICAgICAgICAgICBzdWNjZXNzOiAoZGF0YSkgPT5cbiAgICAgICAgICAgICAgICBmaXJzdCA9IGRhdGEucm93c1swXS5kb2NcbiAgICAgICAgICAgICAgICB0aW1lQWdvID0gbW9tZW50KGZpcnN0LnVwZGF0ZWQpLmZyb21Ob3coKVxuICAgICAgICAgICAgICAgIEAkZWwuZmluZChcIiNyZXN1bWUtd29ya2Zsb3ctI3tmaXJzdC53b3JrZmxvd0lkfVwiKS5hcHBlbmQgXCJcbiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9JyN3b3JrZmxvdy9yZXN1bWUvI3tmaXJzdC53b3JrZmxvd0lkfS8je2ZpcnN0LnRyaXBJZH0nPjxidXR0b24gY2xhc3M9J2NvbW1hbmQnPlJlc3VtZTwvYnV0dG9uPjwvYT4gI3t0aW1lQWdvfSA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHJlbW92ZS1yZXN1bWUnIGRhdGEtd29ya2Zsb3dJZD0nI3tmaXJzdC53b3JrZmxvd0lkfScgZGF0YS10cmlwSWQ9JyN7Zmlyc3QudHJpcElkfSc+WDwvYnV0dG9uPjxicj5cbiAgICAgICAgICAgICAgICBcIlxuIiwidmFyIFdvcmtmbG93TWVudU1lbWJlclZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgaW5kZXhPZiA9IFtdLmluZGV4T2YgfHwgZnVuY3Rpb24oaXRlbSkgeyBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7IGlmIChpIGluIHRoaXMgJiYgdGhpc1tpXSA9PT0gaXRlbSkgcmV0dXJuIGk7IH0gcmV0dXJuIC0xOyB9O1xuXG5Xb3JrZmxvd01lbnVNZW1iZXJWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFdvcmtmbG93TWVudU1lbWJlclZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFdvcmtmbG93TWVudU1lbWJlclZpZXcoKSB7XG4gICAgdGhpcy5yZW5kZXJNb2JpbGUgPSBiaW5kKHRoaXMucmVuZGVyTW9iaWxlLCB0aGlzKTtcbiAgICByZXR1cm4gV29ya2Zsb3dNZW51TWVtYmVyVmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFdvcmtmbG93TWVudU1lbWJlclZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiV29ya2Zsb3dNZW51TWVtYmVyVmlld1wiO1xuXG4gIFdvcmtmbG93TWVudU1lbWJlclZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICBcImNsaWNrIC53b3JrZmxvdy1uZXdcIjogJ25ldycsXG4gICAgXCJjbGljayAud29ya2Zsb3ctZGVsZXRlXCI6IFwiZGVsZXRlXCIsXG4gICAgXCJjbGljayAud29ya2Zsb3ctcnVuXCI6IFwicnVuXCIsXG4gICAgXCJjbGljayAud29ya2Zsb3ctZWRpdFwiOiBcImVkaXRcIixcbiAgICBcImNsaWNrIC53b3JrZmxvdy1jc3ZcIjogXCJjc3ZQcm9tcHRNb250aFwiLFxuICAgICdjbGljayAucmVtb3ZlLXJlc3VtZSc6ICdyZW1vdmVSZXN1bWUnXG4gIH07XG5cbiAgV29ya2Zsb3dNZW51TWVtYmVyVmlldy5wcm90b3R5cGUucmVtb3ZlUmVzdW1lID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldCwgaW5jb21wbGV0ZSwgdHJpcElkLCB3b3JrZmxvd0lkO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgd29ya2Zsb3dJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtd29ya2Zsb3dJZFwiKTtcbiAgICB0cmlwSWQgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLXRyaXBJZFwiKTtcbiAgICBpZiAoIWNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHRoZSBvcHRpb24gdG8gcmVzdW1lIHRoaXMgd29ya2Zsb3c/XCIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGluY29tcGxldGUgPSBUYW5nZXJpbmUudXNlci5nZXRQcmVmZXJlbmNlcyhcInR1dG9yLXdvcmtmbG93c1wiLCBcImluY29tcGxldGVcIikgfHwge307XG4gICAgaW5jb21wbGV0ZVt3b3JrZmxvd0lkXSA9IF8oaW5jb21wbGV0ZVt3b3JrZmxvd0lkXSkud2l0aG91dCh0cmlwSWQpO1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci5zZXRQcmVmZXJlbmNlcyhcInR1dG9yLXdvcmtmbG93c1wiLCBcImluY29tcGxldGVcIiwgaW5jb21wbGV0ZSwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVXb3JrZmxvd3MoKTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9O1xuXG4gIFdvcmtmbG93TWVudU1lbWJlclZpZXcucHJvdG90eXBlW1wibmV3XCJdID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGd1aWQsIHZpZXcsIHdvcmtmbG93O1xuICAgIGd1aWQgPSBVdGlscy5ndWlkKCk7XG4gICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcIndvcmtmbG93L2VkaXQvXCIgKyBndWlkLCBmYWxzZSk7XG4gICAgd29ya2Zsb3cgPSBuZXcgV29ya2Zsb3coe1xuICAgICAgXCJfaWRcIjogZ3VpZFxuICAgIH0pO1xuICAgIHZpZXcgPSBuZXcgV29ya2Zsb3dFZGl0Vmlldyh7XG4gICAgICB3b3JrZmxvdzogd29ya2Zsb3dcbiAgICB9KTtcbiAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgfTtcblxuICBXb3JrZmxvd01lbnVNZW1iZXJWaWV3LnByb3RvdHlwZVtcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIG5hbWUsIHdvcmtmbG93SWQ7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICB3b3JrZmxvd0lkID0gJHRhcmdldC5wYXJlbnQoXCJsaVwiKS5hdHRyKCdpZCcpO1xuICAgIG5hbWUgPSB0aGlzLndvcmtmbG93cy5nZXQod29ya2Zsb3dJZCkuZ2V0KCduYW1lJyk7XG4gICAgaWYgKGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHdvcmtmbG93IFwiICsgbmFtZSArIFwiP1wiKSkge1xuICAgICAgcmV0dXJuIHRoaXMud29ya2Zsb3dzLmdldCh3b3JrZmxvd0lkKS5kZXN0cm95KHtcbiAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlcigpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgV29ya2Zsb3dNZW51TWVtYmVyVmlldy5wcm90b3R5cGUuTU9OVEhTID0gW251bGwsICdKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4gIFdvcmtmbG93TWVudU1lbWJlclZpZXcucHJvdG90eXBlLmNzdlByb21wdE1vbnRoID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJGJ1dHRvbiwgJHRhcmdldCwgZCwgaW5kZXgsIG1vZGFsQ29udGVudCwgcmVwb3J0VXJsLCB0aGlzTW9udGgsIHRoaXNZZWFyLCB3b3JrZmxvd1RpdGxlLCB5ZWFyO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgd29ya2Zsb3dUaXRsZSA9ICR0YXJnZXQucGFyZW50KCkuZmluZChcIi53b3JrZmxvdy10aXRsZVwiKS5odG1sO1xuICAgIHJlcG9ydFVybCA9ICR0YXJnZXQuYXR0cignaHJlZicpO1xuICAgIGQgPSBuZXcgRGF0ZTtcbiAgICB0aGlzTW9udGggPSBkLmdldE1vbnRoKCkgKyAxO1xuICAgIHRoaXNZZWFyID0gZC5nZXRGdWxsWWVhcigpO1xuICAgIG1vZGFsQ29udGVudCA9IFwiPGRpdiBpZD0nY3N2UmVwb3J0Rm9ybSc+IDxoMT5DU1YgUmVwb3J0aW5nPC9oMT4gPGlucHV0IGlkPSdjc3ZVcmwnIG5hbWU9J2NzdlVybCcgdHlwZT0naGlkZGVuJyB2YWx1ZT0nXCIgKyByZXBvcnRVcmwgKyBcIic+IDxwPlNlbGVjdCB0aGUgbW9udGggdGhhdCB5b3Ugd291bGQgbGlrZSB0byBnZW5lcmF0ZTo8L3A+IDxsYWJlbCBmb3I9J2NzdlllYXInPlllYXI6PC9sYWJlbD4gPHNlbGVjdCBpZD0nY3N2WWVhcicgbmFtZT0nY3N2WWVhcic+IFwiICsgKCgoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgcmVmLCByZWYxLCByZXN1bHRzO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yICh5ZWFyID0gaSA9IHJlZiA9IHRoaXNZZWFyIC0gMSwgcmVmMSA9IHRoaXNZZWFyICsgMTsgcmVmIDw9IHJlZjEgPyBpIDw9IHJlZjEgOiBpID49IHJlZjE7IHllYXIgPSByZWYgPD0gcmVmMSA/ICsraSA6IC0taSkge1xuICAgICAgICByZXN1bHRzLnB1c2goXCI8b3B0aW9uICB2YWx1ZT0nXCIgKyB5ZWFyICsgXCInIFwiICsgKHllYXIgPT09IHRoaXNZZWFyID8gJ3NlbGVjdGVkJyA6ICcnKSArIFwiPlwiICsgeWVhciArIFwiPC9vcHRpb24+XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkoKSkuam9pbignJykpICsgXCIgPC9zZWxlY3Q+IDxici8+IDxsYWJlbCBmb3I9J2Nzdk1vbnRoJz5Nb250aDo8L2xhYmVsPiA8c2VsZWN0IGlkPSdjc3ZNb250aCcgbmFtZT0nY3N2TmFtZSc+IFwiICsgKCgoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgcmVzdWx0cztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaW5kZXggPSBpID0gMTsgaSA8PSAxMjsgaW5kZXggPSArK2kpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKFwiPG9wdGlvbiAgdmFsdWU9J1wiICsgaW5kZXggKyBcIicgXCIgKyAoaW5kZXggPT09IHRoaXNNb250aCA/ICdzZWxlY3RlZD1cInRydWVcIicgOiAnJykgKyBcIj5cIiArIHRoaXMuTU9OVEhTW2luZGV4XSArIFwiPC9vcHRpb24+XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkuY2FsbCh0aGlzKSkuam9pbignJykpICsgXCIgPC9zZWxlY3Q+IDxici8+IDxidXR0b24gY2xhc3M9J2NvbW1hbmQnIGRhdGEtYWN0aW9uPSdjYW5jZWwnPkNhbmNlbDwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdjb21tYW5kJyBkYXRhLWFjdGlvbj0nZ2VuZXJhdGUnPkdlbmVyYXRlIFJlcG9ydDwvYnV0dG9uPiA8L2Rpdj5cIjtcbiAgICBVdGlscy5tb2RhbChtb2RhbENvbnRlbnQpO1xuICAgICRidXR0b24gPSAkKFwiI2NzdlJlcG9ydEZvcm0gYnV0dG9uXCIpO1xuICAgICRidXR0b24ub24oXCJjbGlja1wiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyICRjc3ZNb250aCwgJGNzdlVybCwgJGNzdlllYXIsIHVybDtcbiAgICAgICRidXR0b24ub2ZmKFwiY2xpY2tcIik7XG4gICAgICBpZiAoJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLWFjdGlvblwiKSA9PT0gXCJnZW5lcmF0ZVwiKSB7XG4gICAgICAgICRjc3ZVcmwgPSAkKFwiI2NzdlJlcG9ydEZvcm0gI2NzdlVybFwiKS52YWwoKTtcbiAgICAgICAgJGNzdlllYXIgPSAkKFwiI2NzdlJlcG9ydEZvcm0gI2NzdlllYXIgb3B0aW9uOnNlbGVjdGVkXCIpLnZhbCgpO1xuICAgICAgICAkY3N2TW9udGggPSAkKFwiI2NzdlJlcG9ydEZvcm0gI2Nzdk1vbnRoXCIpLnZhbCgpO1xuICAgICAgICB1cmwgPSBbJGNzdlVybCwgJGNzdlllYXIsICRjc3ZNb250aF0uam9pbignLycpO1xuICAgICAgICBkb2N1bWVudC5sb2NhdGlvbiA9IHVybDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBVdGlscy5tb2RhbChmYWxzZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIFdvcmtmbG93TWVudU1lbWJlclZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGtleSwgdmFsdWU7XG4gICAgZm9yIChrZXkgaW4gb3B0aW9ucykge1xuICAgICAgdmFsdWUgPSBvcHRpb25zW2tleV07XG4gICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy53b3JrZmxvd3MgPSBuZXcgV29ya2Zsb3dzO1xuICAgIHJldHVybiB0aGlzLndvcmtmbG93cy5mZXRjaCh7XG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLmZlZWRiYWNrcyA9IG5ldyBGZWVkYmFja3M7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmZlZWRiYWNrcy5mZXRjaCh7XG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgX3RoaXMucmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFdvcmtmbG93TWVudU1lbWJlclZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjc3ZVcmwsIGZlZWRiYWNrLCBmZWVkYmFja0h0bWwsIGh0bWxXb3JrZmxvd3MsIGksIGxlbiwgcmVmLCByZWYxLCB3b3JrZmxvdztcbiAgICBpZiAodGhpcy5yZWFkeSAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBodG1sV29ya2Zsb3dzID0gXCJcIjtcbiAgICByZWYgPSB0aGlzLndvcmtmbG93cy5tb2RlbHM7XG4gICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB3b3JrZmxvdyA9IHJlZltpXTtcbiAgICAgIGNzdlVybCA9IFwiL2Jyb2NrbWFuL3dvcmtmbG93L1wiICsgVGFuZ2VyaW5lLmRiX25hbWUgKyBcIi9cIiArIHdvcmtmbG93LmlkO1xuICAgICAgZmVlZGJhY2sgPSB0aGlzLmZlZWRiYWNrcy5nZXQod29ya2Zsb3cuaWQgKyBcIi1mZWVkYmFja1wiKTtcbiAgICAgIGlmICgoZmVlZGJhY2sgIT0gbnVsbCkgJiYgKChyZWYxID0gZmVlZGJhY2suZ2V0KFwiY2hpbGRyZW5cIikpICE9IG51bGwgPyByZWYxLmxlbmd0aCA6IHZvaWQgMCkgPiAwKSB7XG4gICAgICAgIGZlZWRiYWNrSHRtbCA9IFwiPGEgaHJlZj0nI2ZlZWRiYWNrL1wiICsgd29ya2Zsb3cuaWQgKyBcIic+ZmVlZGJhY2s8L2E+XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmZWVkYmFja0h0bWwgPSBcIlwiO1xuICAgICAgfVxuICAgICAgaHRtbFdvcmtmbG93cyArPSBcIjxsaSBpZD0nXCIgKyB3b3JrZmxvdy5pZCArIFwiJyBzdHlsZT0nbWFyZ2luLWJvdHRvbToxNXB4Oyc+IDxzcGFuIGNsYXNzPSd3b3JrZmxvdy10aXRsZSc+XCIgKyAod29ya2Zsb3cuZ2V0KCduYW1lJykpICsgXCI8L3NwYW4+IDxicj4gPCEtLTxhIGhyZWY9JyN3b3JrZmxvdy9ydW4vXCIgKyB3b3JrZmxvdy5pZCArIFwiJz5ydW48L2E+LS0+IDxhIGNsYXNzPSd3b3JrZmxvdy1jc3YnIGhyZWY9J1wiICsgY3N2VXJsICsgXCInPmNzdjwvYT4gPC9saT5cIjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwoXCI8aDE+V29ya2Zsb3dzPC9oMT4gPHVsIGNsYXNzPSd3b3JrZmxvdy1tZW51Jz5cIiArIGh0bWxXb3JrZmxvd3MgKyBcIjwvdWw+XCIpO1xuICB9O1xuXG4gIFdvcmtmbG93TWVudU1lbWJlclZpZXcucHJvdG90eXBlLnJlbmRlck1vYmlsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGVsLmh0bWwoXCI8dWwgY2xhc3M9J3dvcmtmbG93LW1lbnUnPjwvdWw+XCIpO1xuICAgIHRoaXMudXBkYXRlV29ya2Zsb3dzKCk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIFdvcmtmbG93TWVudU1lbWJlclZpZXcucHJvdG90eXBlLnVwZGF0ZVdvcmtmbG93cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmZWVkYmFjaywgZmVlZGJhY2tIdG1sLCBoaWRkZW5Xb3JrZmxvd3MsIGh0bWxXb3JrZmxvd3MsIGksIGxlbiwgcmVmLCByZWYxLCByZWYyLCB3b3JrZmxvdztcbiAgICBoaWRkZW5Xb3JrZmxvd3MgPSBUYW5nZXJpbmUudXNlci5nZXRQcmVmZXJlbmNlcyhcInR1dG9yLXdvcmtmbG93c1wiLCBcImhpZGRlblwiKSB8fCBbXTtcbiAgICBodG1sV29ya2Zsb3dzID0gXCJcIjtcbiAgICB0aGlzLndvcmtmbG93cy5tb2RlbHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICBpZiAoYS5nZXQoJ25hbWUnKS50b0xvd2VyQ2FzZSgpIDwgYi5nZXQoJ25hbWUnKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYS5nZXQoJ25hbWUnKS50b0xvd2VyQ2FzZSgpID4gYi5nZXQoJ25hbWUnKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVmID0gdGhpcy53b3JrZmxvd3MubW9kZWxzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgd29ya2Zsb3cgPSByZWZbaV07XG4gICAgICBpZiAocmVmMSA9IHdvcmtmbG93LmlkLCBpbmRleE9mLmNhbGwoaGlkZGVuV29ya2Zsb3dzLCByZWYxKSA+PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZmVlZGJhY2sgPSB0aGlzLmZlZWRiYWNrcy5nZXQod29ya2Zsb3cuaWQgKyBcIi1mZWVkYmFja1wiKTtcbiAgICAgIGlmICh3b3JrZmxvdy5nZXRCb29sZWFuKFwiZW5hYmxlRmVlZGJhY2tcIikgJiYgKGZlZWRiYWNrICE9IG51bGwpICYmICgocmVmMiA9IGZlZWRiYWNrLmdldChcImNoaWxkcmVuXCIpKSAhPSBudWxsID8gcmVmMi5sZW5ndGggOiB2b2lkIDApID4gMCkge1xuICAgICAgICBmZWVkYmFja0h0bWwgPSBcIjxidXR0b24gY2xhc3M9J2NvbW1hbmQnPjxhIGhyZWY9JyNmZWVkYmFjay9cIiArIHdvcmtmbG93LmlkICsgXCInPkZlZWRiYWNrPC9hPjwvYnV0dG9uPlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmVlZGJhY2tIdG1sID0gXCJcIjtcbiAgICAgIH1cbiAgICAgIGh0bWxXb3JrZmxvd3MgKz0gXCI8bGkgaWQ9J1wiICsgd29ya2Zsb3cuaWQgKyBcIicgc3R5bGU9J21hcmdpbi1ib3R0b206MTJweDsgcGFkZGluZy1ib3R0b206IDEycHg7IGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlOyc+IDxhIGhyZWY9JyN3b3JrZmxvdy9ydW4vXCIgKyB3b3JrZmxvdy5pZCArIFwiJyBjbGFzcz0nd29ya2Zsb3ctYnV0dG9uLWxpbmsnPlwiICsgKHdvcmtmbG93LmdldCgnbmFtZScpKSArIFwiPC9hPiBcIiArIGZlZWRiYWNrSHRtbCArIFwiIDxkaXYgaWQ9J3Jlc3VtZS13b3JrZmxvdy1cIiArIHdvcmtmbG93LmlkICsgXCInPjwvZGl2PiA8L2xpPlwiO1xuICAgIH1cbiAgICB0aGlzLiRlbC5maW5kKFwiLndvcmtmbG93LW1lbnVcIikuaHRtbChodG1sV29ya2Zsb3dzKTtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJSZXN1bWVJbmZvKCk7XG4gIH07XG5cbiAgV29ya2Zsb3dNZW51TWVtYmVyVmlldy5wcm90b3R5cGUucmVuZGVyUmVzdW1lSW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmNvbXBsZXRlV29ya2Zsb3dzLCByZXN1bHRzLCB0cmlwSWQsIHRyaXBJZHMsIHdvcmtmbG93SWQ7XG4gICAgaW5jb21wbGV0ZVdvcmtmbG93cyA9IFRhbmdlcmluZS51c2VyLmdldFByZWZlcmVuY2VzKCd0dXRvci13b3JrZmxvd3MnLCAnaW5jb21wbGV0ZScpIHx8IHt9O1xuICAgIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKHdvcmtmbG93SWQgaW4gaW5jb21wbGV0ZVdvcmtmbG93cykge1xuICAgICAgdHJpcElkcyA9IGluY29tcGxldGVXb3JrZmxvd3Nbd29ya2Zsb3dJZF07XG4gICAgICBpZiAodHJpcElkcy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaSwgbGVuLCByZXN1bHRzMTtcbiAgICAgICAgICByZXN1bHRzMSA9IFtdO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHRyaXBJZHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIHRyaXBJZCA9IHRyaXBJZHNbaV07XG4gICAgICAgICAgICByZXN1bHRzMS5wdXNoKFRhbmdlcmluZS4kZGIudmlldyhUYW5nZXJpbmUuZGVzaWduX2RvYyArIFwiL3RyaXBzQW5kVXNlcnNcIiwge1xuICAgICAgICAgICAgICBrZXk6IHRyaXBJZCxcbiAgICAgICAgICAgICAgaW5jbHVkZV9kb2NzOiB0cnVlLFxuICAgICAgICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0LCB0aW1lQWdvO1xuICAgICAgICAgICAgICAgICAgZmlyc3QgPSBkYXRhLnJvd3NbMF0uZG9jO1xuICAgICAgICAgICAgICAgICAgdGltZUFnbyA9IG1vbWVudChmaXJzdC51cGRhdGVkKS5mcm9tTm93KCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuJGVsLmZpbmQoXCIjcmVzdW1lLXdvcmtmbG93LVwiICsgZmlyc3Qud29ya2Zsb3dJZCkuYXBwZW5kKFwiPGEgaHJlZj0nI3dvcmtmbG93L3Jlc3VtZS9cIiArIGZpcnN0LndvcmtmbG93SWQgKyBcIi9cIiArIGZpcnN0LnRyaXBJZCArIFwiJz48YnV0dG9uIGNsYXNzPSdjb21tYW5kJz5SZXN1bWU8L2J1dHRvbj48L2E+IFwiICsgdGltZUFnbyArIFwiIDxidXR0b24gY2xhc3M9J2NvbW1hbmQgcmVtb3ZlLXJlc3VtZScgZGF0YS13b3JrZmxvd0lkPSdcIiArIGZpcnN0LndvcmtmbG93SWQgKyBcIicgZGF0YS10cmlwSWQ9J1wiICsgZmlyc3QudHJpcElkICsgXCInPlg8L2J1dHRvbj48YnI+XCIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH0pKHRoaXMpXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHRzMTtcbiAgICAgICAgfSkuY2FsbCh0aGlzKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRzLnB1c2godm9pZCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgcmV0dXJuIFdvcmtmbG93TWVudU1lbWJlclZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBLbGFzcyBleHRlbmRzIEJhY2tib25lLk1vZGVsXG4gIHVybCA6IFwia2xhc3NcIlxuICBcbiAgaW5pdGlhbGl6ZTogLT5cbiAgICAjIGdldCBzdHVkZW50c1xuICAgICMgZ2V0IGFzc2Vzc21lbnQgY29sbGVjdGlvblxuXG5cbiAgZGVzdHJveTogLT5cblxuICAgIGtsYXNzSWQgPSBAaWRcblxuICAgICMgdW5saW5rIGFsbCBzdHVkZW50c1xuICAgIGFsbFN0dWRlbnRzID0gbmV3IFN0dWRlbnRzXG4gICAgYWxsU3R1ZGVudHMuZmV0Y2hcbiAgICAgIHN1Y2Nlc3M6IChzdHVkZW50Q29sbGVjdGlvbikgLT5cbiAgICAgICAgc3R1ZGVudHMgPSBzdHVkZW50Q29sbGVjdGlvbi53aGVyZSBcImtsYXNzSWRcIiA6IGtsYXNzSWRcbiAgICAgICAgZm9yIHN0dWRlbnQgaW4gc3R1ZGVudHNcbiAgICAgICAgICBzdHVkZW50LnNhdmVcbiAgICAgICAgICAgIFwia2xhc3NJZFwiIDogXCJcIlxuXG4gICAgYWxsUmVzdWx0cyA9IG5ldyBSZXN1bHRzXG4gICAgYWxsUmVzdWx0cy5mZXRjaFxuICAgICAgc3VjY2VzczogKHJlc3VsdENvbGxlY3Rpb24pIC0+XG4gICAgICAgIHJlc3VsdHMgPSByZXN1bHRDb2xsZWN0aW9uLndoZXJlIFwia2xhc3NJZFwiIDoga2xhc3NJZFxuICAgICAgICBmb3IgcmVzdWx0IGluIHJlc3VsdHNcbiAgICAgICAgICByZXN1bHQuZGVzdHJveSgpXG5cbiAgICBzdXBlcigpXG5cbiAgY2FsY0N1cnJlbnRQYXJ0OiAtPlxuICAgIG1pbGxpc2Vjb25kcyAgICAgICAgICA9IDEwMDBcbiAgICBtaWxsaXNlY29uZHNQZXJNaW51dGUgPSA2MCAqIG1pbGxpc2Vjb25kc1xuICAgIG1pbGxpc2Vjb25kc1BlckhvdXIgICA9IDYwICogbWlsbGlzZWNvbmRzUGVyTWludXRlXG4gICAgbWlsbGlzZWNvbmRzUGVyRGF5ICAgID0gMjQgKiBtaWxsaXNlY29uZHNQZXJIb3VyXG4gICAgbWlsbGlzZWNvbmRzUGVyV2VlayAgID0gNyAgKiBtaWxsaXNlY29uZHNQZXJEYXlcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAtIEBnZXQoXCJzdGFydERhdGVcIikpIC8gbWlsbGlzZWNvbmRzUGVyV2VlaylcbiIsInZhciBLbGFzcyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbktsYXNzID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEtsYXNzLCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBLbGFzcygpIHtcbiAgICByZXR1cm4gS2xhc3MuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBLbGFzcy5wcm90b3R5cGUudXJsID0gXCJrbGFzc1wiO1xuXG4gIEtsYXNzLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24oKSB7fTtcblxuICBLbGFzcy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbGxSZXN1bHRzLCBhbGxTdHVkZW50cywga2xhc3NJZDtcbiAgICBrbGFzc0lkID0gdGhpcy5pZDtcbiAgICBhbGxTdHVkZW50cyA9IG5ldyBTdHVkZW50cztcbiAgICBhbGxTdHVkZW50cy5mZXRjaCh7XG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihzdHVkZW50Q29sbGVjdGlvbikge1xuICAgICAgICB2YXIgaSwgbGVuLCByZXN1bHRzMSwgc3R1ZGVudCwgc3R1ZGVudHM7XG4gICAgICAgIHN0dWRlbnRzID0gc3R1ZGVudENvbGxlY3Rpb24ud2hlcmUoe1xuICAgICAgICAgIFwia2xhc3NJZFwiOiBrbGFzc0lkXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHRzMSA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBzdHVkZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHN0dWRlbnQgPSBzdHVkZW50c1tpXTtcbiAgICAgICAgICByZXN1bHRzMS5wdXNoKHN0dWRlbnQuc2F2ZSh7XG4gICAgICAgICAgICBcImtsYXNzSWRcIjogXCJcIlxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0czE7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYWxsUmVzdWx0cyA9IG5ldyBSZXN1bHRzO1xuICAgIGFsbFJlc3VsdHMuZmV0Y2goe1xuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0Q29sbGVjdGlvbikge1xuICAgICAgICB2YXIgaSwgbGVuLCByZXN1bHQsIHJlc3VsdHMsIHJlc3VsdHMxO1xuICAgICAgICByZXN1bHRzID0gcmVzdWx0Q29sbGVjdGlvbi53aGVyZSh7XG4gICAgICAgICAgXCJrbGFzc0lkXCI6IGtsYXNzSWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3VsdHMxID0gW107XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlc3VsdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgICAgICAgIHJlc3VsdHMxLnB1c2gocmVzdWx0LmRlc3Ryb3koKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHMxO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBLbGFzcy5fX3N1cGVyX18uZGVzdHJveS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIEtsYXNzLnByb3RvdHlwZS5jYWxjQ3VycmVudFBhcnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbWlsbGlzZWNvbmRzLCBtaWxsaXNlY29uZHNQZXJEYXksIG1pbGxpc2Vjb25kc1BlckhvdXIsIG1pbGxpc2Vjb25kc1Blck1pbnV0ZSwgbWlsbGlzZWNvbmRzUGVyV2VlaztcbiAgICBtaWxsaXNlY29uZHMgPSAxMDAwO1xuICAgIG1pbGxpc2Vjb25kc1Blck1pbnV0ZSA9IDYwICogbWlsbGlzZWNvbmRzO1xuICAgIG1pbGxpc2Vjb25kc1BlckhvdXIgPSA2MCAqIG1pbGxpc2Vjb25kc1Blck1pbnV0ZTtcbiAgICBtaWxsaXNlY29uZHNQZXJEYXkgPSAyNCAqIG1pbGxpc2Vjb25kc1BlckhvdXI7XG4gICAgbWlsbGlzZWNvbmRzUGVyV2VlayA9IDcgKiBtaWxsaXNlY29uZHNQZXJEYXk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLSB0aGlzLmdldChcInN0YXJ0RGF0ZVwiKSkgLyBtaWxsaXNlY29uZHNQZXJXZWVrKTtcbiAgfTtcblxuICByZXR1cm4gS2xhc3M7XG5cbn0pKEJhY2tib25lLk1vZGVsKTtcblxuIiwiY2xhc3MgS2xhc3NWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZSA6IFwiS2xhc3NWaWV3XCJcblxuICBpbml0aWFsaXplOiAoIG9wdGlvbnMgKSAtPlxuICAgIEBrbGFzcyA9IG9wdGlvbnMua2xhc3NcbiAgICBAYXNzZXNzbWVudHMgPSBAa2xhc3MuYXNzZXNzbWVudHNcbiAgICBAcmVzdWx0cyAgICAgPSBbXVxuICAgIGFsbEFzc2Vzc21lbnRzID0gbmV3IEtsYXNzQXNzZXNzbWVudHNcbiAgICBhbGxBc3Nlc3NtZW50cy5mZXRjaFxuICAgICAgc3VjY2VzczogKGFzc2Vzc21lbnRDb2xsZWN0aW9uKSA9PlxuICAgICAgICBAYXNzZXNzbWVudHMgPSBhc3Nlc3NtZW50Q29sbGVjdGlvbi53aGVyZSB7IGtsYXNzSWQgOiBAa2xhc3MuaWQgfVxuICAgICAgICByZXN1bHRzID0gbmV3IFJlc3VsdHNcbiAgICAgICAgcmVzdWx0cy5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3M6IChyZXN1bHRDb2xsZWN0aW9uKSA9PlxuICAgICAgICAgICAgZm9yIGFzc2Vzc21lbnQgaW4gQGFzc2Vzc21lbnRzXG4gICAgICAgICAgICAgIGFzc2Vzc21lbnQucmVzdWx0cyA9IHJlc3VsdENvbGxlY3Rpb24ud2hlcmUgeyBhc3Nlc3NtZW50SWQgOiBhc3Nlc3NtZW50LmlkIH1cbiAgICAgICAgICAgIEByZW5kZXIoKVxuXG4gIHJlbmRlcjogLT5cbiAgICB5ZWFyICAgPSBAa2xhc3MuZ2V0KFwieWVhclwiKSAgIHx8IFwiXCJcbiAgICBncmFkZSAgPSBAa2xhc3MuZ2V0KFwiZ3JhZGVcIikgIHx8IFwiXCJcbiAgICBzdHJlYW0gPSBAa2xhc3MuZ2V0KFwic3RyZWFtXCIpIHx8IFwiXCJcbiAgICBodG1sID0gXCJcbiAgICA8aDE+I3t0KCdjbGFzcycpfSAje3N0cmVhbX08L2gxPlxuICAgIDx0YWJsZT5cbiAgICAgIDx0cj48dGQ+U2Nob29sIHllYXI8L3RkPjx0ZD4je3llYXJ9PC90ZD48L3RyPlxuICAgICAgPHRyPjx0ZD4je3QoJ2dyYWRlJyl9PC90ZD48dHI+I3tncmFkZX08L3RkPjwvdHI+XG4gICAgPC90YWJsZT5cbiAgICA8L2Rpdj5cbiAgICA8dWwgY2xhc3M9J2Fzc2Vzc21lbnRfbGlzdCc+XCJcbiAgICBmb3IgYXNzZXNzbWVudCBpbiBAYXNzZXNzbWVudHNcbiAgICAgIGh0bWwgKz0gXCI8bGkgZGF0YS1pZD0nI3thc3Nlc3NtZW50LmlkfSc+I3thc3Nlc3NtZW50LmdldCAnbmFtZSd9IC0gI3thc3Nlc3NtZW50LmdldCgncmVzdWx0cycpPy5sZW5ndGh9PC9saT5cIlxuICAgIGh0bWwgKz0gXCI8L3VsPlwiXG5cbiAgICBAJGVsLmh0bWwgaHRtbFxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuIiwidmFyIEtsYXNzVmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbktsYXNzVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChLbGFzc1ZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEtsYXNzVmlldygpIHtcbiAgICByZXR1cm4gS2xhc3NWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgS2xhc3NWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIktsYXNzVmlld1wiO1xuXG4gIEtsYXNzVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgYWxsQXNzZXNzbWVudHM7XG4gICAgdGhpcy5rbGFzcyA9IG9wdGlvbnMua2xhc3M7XG4gICAgdGhpcy5hc3Nlc3NtZW50cyA9IHRoaXMua2xhc3MuYXNzZXNzbWVudHM7XG4gICAgdGhpcy5yZXN1bHRzID0gW107XG4gICAgYWxsQXNzZXNzbWVudHMgPSBuZXcgS2xhc3NBc3Nlc3NtZW50cztcbiAgICByZXR1cm4gYWxsQXNzZXNzbWVudHMuZmV0Y2goe1xuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihhc3Nlc3NtZW50Q29sbGVjdGlvbikge1xuICAgICAgICAgIHZhciByZXN1bHRzO1xuICAgICAgICAgIF90aGlzLmFzc2Vzc21lbnRzID0gYXNzZXNzbWVudENvbGxlY3Rpb24ud2hlcmUoe1xuICAgICAgICAgICAga2xhc3NJZDogX3RoaXMua2xhc3MuaWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXN1bHRzID0gbmV3IFJlc3VsdHM7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHMuZmV0Y2goe1xuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0Q29sbGVjdGlvbikge1xuICAgICAgICAgICAgICB2YXIgYXNzZXNzbWVudCwgaSwgbGVuLCByZWY7XG4gICAgICAgICAgICAgIHJlZiA9IF90aGlzLmFzc2Vzc21lbnRzO1xuICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhc3Nlc3NtZW50ID0gcmVmW2ldO1xuICAgICAgICAgICAgICAgIGFzc2Vzc21lbnQucmVzdWx0cyA9IHJlc3VsdENvbGxlY3Rpb24ud2hlcmUoe1xuICAgICAgICAgICAgICAgICAgYXNzZXNzbWVudElkOiBhc3Nlc3NtZW50LmlkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBLbGFzc1ZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhc3Nlc3NtZW50LCBncmFkZSwgaHRtbCwgaSwgbGVuLCByZWYsIHJlZjEsIHN0cmVhbSwgeWVhcjtcbiAgICB5ZWFyID0gdGhpcy5rbGFzcy5nZXQoXCJ5ZWFyXCIpIHx8IFwiXCI7XG4gICAgZ3JhZGUgPSB0aGlzLmtsYXNzLmdldChcImdyYWRlXCIpIHx8IFwiXCI7XG4gICAgc3RyZWFtID0gdGhpcy5rbGFzcy5nZXQoXCJzdHJlYW1cIikgfHwgXCJcIjtcbiAgICBodG1sID0gXCI8aDE+XCIgKyAodCgnY2xhc3MnKSkgKyBcIiBcIiArIHN0cmVhbSArIFwiPC9oMT4gPHRhYmxlPiA8dHI+PHRkPlNjaG9vbCB5ZWFyPC90ZD48dGQ+XCIgKyB5ZWFyICsgXCI8L3RkPjwvdHI+IDx0cj48dGQ+XCIgKyAodCgnZ3JhZGUnKSkgKyBcIjwvdGQ+PHRyPlwiICsgZ3JhZGUgKyBcIjwvdGQ+PC90cj4gPC90YWJsZT4gPC9kaXY+IDx1bCBjbGFzcz0nYXNzZXNzbWVudF9saXN0Jz5cIjtcbiAgICByZWYgPSB0aGlzLmFzc2Vzc21lbnRzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXNzZXNzbWVudCA9IHJlZltpXTtcbiAgICAgIGh0bWwgKz0gXCI8bGkgZGF0YS1pZD0nXCIgKyBhc3Nlc3NtZW50LmlkICsgXCInPlwiICsgKGFzc2Vzc21lbnQuZ2V0KCduYW1lJykpICsgXCIgLSBcIiArICgocmVmMSA9IGFzc2Vzc21lbnQuZ2V0KCdyZXN1bHRzJykpICE9IG51bGwgPyByZWYxLmxlbmd0aCA6IHZvaWQgMCkgKyBcIjwvbGk+XCI7XG4gICAgfVxuICAgIGh0bWwgKz0gXCI8L3VsPlwiO1xuICAgIHRoaXMuJGVsLmh0bWwoaHRtbCk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIHJldHVybiBLbGFzc1ZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBLbGFzc0VkaXRWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZSA6IFwiS2xhc3NFZGl0Vmlld1wiXG5cbiAgZXZlbnRzOiBcbiAgICAnY2xpY2sgLmJhY2snICAgICAgICAgICAgICAgICAgICA6ICdiYWNrJ1xuICAgICdjbGljayAuc2F2ZScgICAgICAgICAgICAgICAgICAgIDogJ2Jhc2ljSW5mb1NhdmUnXG4gICAgJ2NsaWNrIC5iYXNpY19pbmZvX2VkaXQnICAgICAgICAgOiAnYmFzaWNJbmZvVG9nZ2xlJ1xuICAgICdjbGljayAuYmFzaWNfaW5mb19jYW5jZWwnICAgICAgIDogJ2Jhc2ljSW5mb1RvZ2dsZSdcblxuICAgICdjaGFuZ2UgI3RlYWNoZXJfc2VsZWN0JyAgICAgICAgIDogJ3RlYWNoZXJTZWxlY3QnXG4gICAgXG4gICAgJ2NsaWNrIC5hZGRfc3R1ZGVudCcgICAgICAgICAgICAgOiAnYWRkU3R1ZGVudFRvZ2dsZSdcbiAgICAnY2xpY2sgLmFkZF9zdHVkZW50X2NhbmNlbCcgICAgICA6ICdhZGRTdHVkZW50VG9nZ2xlJ1xuICAgICdjbGljayAuYWRkX3N0dWRlbnRfYWRkJyAgICAgICAgIDogJ2FkZFN0dWRlbnQnXG4gICAgJ2NsaWNrIC5yZWdpc3Rlcl9zdHVkZW50JyAgICAgICAgOiAncmVnaXN0ZXJTdHVkZW50VG9nZ2xlJ1xuICAgICdjbGljayAucmVnaXN0ZXJfc3R1ZGVudF9jYW5jZWwnIDogJ3JlZ2lzdGVyU3R1ZGVudFRvZ2dsZSdcbiAgICAnY2xpY2sgLnJlZ2lzdGVyX3N0dWRlbnRfc2F2ZScgICA6ICdyZWdpc3RlclN0dWRlbnQnXG5cblxuICB0ZWFjaGVyU2VsZWN0OiAoZXZlbnQpIC0+XG4gICAgdGVhY2hlcklkID0gQCRlbC5maW5kKFwiI3RlYWNoZXJfc2VsZWN0IG9wdGlvbjpzZWxlY3RlZFwiKS5hdHRyKFwiZGF0YS10ZWFjaGVySWRcIilcbiAgICBAa2xhc3Muc2V0IFwidGVhY2hlcklkXCIsIHRlYWNoZXJJZFxuXG4gIGFkZFN0dWRlbnRUb2dnbGU6IC0+IFxuICAgIEAkZWwuZmluZChcIi5yZWdpc3Rlcl9zdHVkZW50X2Zvcm0gaW5wdXRcIikudmFsKFwiXCIpXG4gICAgQCRlbC5maW5kKFwiLmFkZF9zdHVkZW50X2Zvcm0sIC5hZGRfc3R1ZGVudFwiKS50b2dnbGUoKVxuXG4gIHJlZ2lzdGVyU3R1ZGVudFRvZ2dsZTogLT4gXG4gICAgQCRlbC5maW5kKFwiLnJlZ2lzdGVyX3N0dWRlbnRfZm9ybSwgLnJlZ2lzdGVyX3N0dWRlbnRcIikudG9nZ2xlKClcbiAgICAjIHNjcm9sbCB0byBuZXcgZm9ybSBpZiBpdCdzIHZpc3NpYmxlXG4gICAgaWYgQCRlbC5maW5kKFwiLnJlZ2lzdGVyX3N0dWRlbnRfZm9ybVwiKS5pcyhcIjp2aXNpYmxlXCIpIHRoZW4gQCRlbC5maW5kKFwiLnJlZ2lzdGVyX3N0dWRlbnRfZm9ybVwiKS5zY3JvbGxUbygpXG4gICAgQCRlbC5maW5kKFwiI3JlZ2lzdGVyX3N0dWRlbnRfbmFtZSAsI3JlZ2lzdGVyX3N0dWRlbnRfZ2VuZGVyLCAjcmVnaXN0ZXJfc3R1ZGVudF9hZ2VcIikudmFsKFwiXCIpXG5cbiAgYWRkU3R1ZGVudDogLT5cbiAgICBpZiBAJGVsLmZpbmQoXCIjYWRkX3N0dWRlbnRfc2VsZWN0IG9wdGlvbjpzZWxlY3RlZFwiKS52YWwoKSA9PSBcIl9ub25lXCJcbiAgICAgIGFsZXJ0IChcIlBsZWFzZSBzZWxlY3QgYSBzdHVkZW50LCBvciBjYW5jZWwuXCIpXG4gICAgZWxzZVxuICAgICAgc3R1ZGVudElkID0gQCRlbC5maW5kKFwiI2FkZF9zdHVkZW50X3NlbGVjdCBvcHRpb246c2VsZWN0ZWRcIikuYXR0cihcImRhdGEtaWRcIilcbiAgICAgIG5ld1N0dWRlbnQgPSBAYWxsU3R1ZGVudHMuZ2V0IHN0dWRlbnRJZFxuICAgICAgbmV3U3R1ZGVudC5zYXZlXG4gICAgICAgIGtsYXNzSWQgOiBAa2xhc3MuaWRcbiAgICAgICxcbiAgICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgICBAc3R1ZGVudHMuYWRkIG5ld1N0dWRlbnRcbiAgICAgICAgICBAYWRkU3R1ZGVudFRvZ2dsZSgpXG5cbiAgcmVnaXN0ZXJTdHVkZW50OiA9PlxuICAgIHN0dWRlbnQgPSBuZXcgU3R1ZGVudFxuICAgIHN0dWRlbnQuc2F2ZVxuICAgICAgbmFtZSAgICA6IEAkZWwuZmluZChcIiNyZWdpc3Rlcl9zdHVkZW50X25hbWVcIikudmFsKClcbiAgICAgIGdlbmRlciAgOiBAJGVsLmZpbmQoXCIjcmVnaXN0ZXJfc3R1ZGVudF9nZW5kZXJcIikudmFsKClcbiAgICAgIGFnZSAgICAgOiBAJGVsLmZpbmQoXCIjcmVnaXN0ZXJfc3R1ZGVudF9hZ2VcIikudmFsKClcbiAgICAgIGtsYXNzSWQgOiBAa2xhc3MuaWRcbiAgICAsIFxuICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgQHN0dWRlbnRzLmFkZCBzdHVkZW50XG4gICAgICAgIEByZWdpc3RlclN0dWRlbnRUb2dnbGUoKVxuICAgICAgICBcbiAgICBcblxuICBiYXNpY0luZm9Ub2dnbGU6IC0+XG4gICAgQCRlbC5maW5kKFwiLmJhc2ljX2luZm9cIikudG9nZ2xlKClcbiAgICBcbiAgICAkYmFzaWNJbmZvID0gJChAJGVsLmZpbmQoXCIuYmFzaWNfaW5mb1wiKVsxXSlcbiAgICBcbiAgICBpZiAkYmFzaWNJbmZvLmlzKFwiOnZpc2libGVcIilcbiAgICAgICRiYXNpY0luZm8uc2Nyb2xsVG8oKVxuICAgICAgQCRlbC5maW5kKFwiI3llYXJcIikuZm9jdXMoKVxuXG4gICAgQCRlbC5maW5kKFwiI3NjaG9vbF9uYW1lXCIpLnZhbCBAa2xhc3MuZ2V0U3RyaW5nKFwic2Nob29sTmFtZVwiKVxuICAgIEAkZWwuZmluZChcIiN5ZWFyXCIpLnZhbCAgICAgICAgQGtsYXNzLmdldFN0cmluZyhcInllYXJcIilcbiAgICBAJGVsLmZpbmQoXCIjZ3JhZGVcIikudmFsICAgICAgIEBrbGFzcy5nZXRTdHJpbmcoXCJncmFkZVwiKVxuICAgIEAkZWwuZmluZChcIiNzdHJlYW1cIikudmFsICAgICAgQGtsYXNzLmdldFN0cmluZyhcInN0cmVhbVwiKVxuICBcbiAgYmFzaWNJbmZvU2F2ZTogLT5cbiAgICBpbnB1dHMgPSBAJGVsLmZpbmQoXCIjc3RhcnRfZGF0ZVwiKS52YWwoKS5zcGxpdChcIi9cIilcbiAgICBuZXdEYXRlID0gbmV3IERhdGUoKVxuICAgIG5ld0RhdGUuc2V0RnVsbFllYXIocGFyc2VJbnQoaW5wdXRzWzBdKSlcbiAgICBuZXdEYXRlLnNldE1vbnRoKHBhcnNlSW50KGlucHV0c1sxXSkgLSAxKVxuICAgIG5ld0RhdGUuc2V0RGF0ZShwYXJzZUludChpbnB1dHNbMl0pKVxuXG4gICAgXG4gICAgQGtsYXNzLnNhdmVcbiAgICAgIHNjaG9vbE5hbWUgOiBAJGVsLmZpbmQoXCIjc2Nob29sX25hbWVcIikudmFsKClcbiAgICAgIHllYXIgICAgICAgOiBAJGVsLmZpbmQoXCIjeWVhclwiKS52YWwoKVxuICAgICAgZ3JhZGUgICAgICA6IEAkZWwuZmluZChcIiNncmFkZVwiKS52YWwoKVxuICAgICAgc3RyZWFtICAgICA6IEAkZWwuZmluZChcIiNzdHJlYW1cIikudmFsKClcbiAgICAgIHN0YXJ0RGF0ZSAgOiBuZXdEYXRlLmdldFRpbWUoKVxuICAgICxcbiAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgIEByZW5kZXIoKVxuICAgICAgZXJyb3I6ID0+XG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiU2F2ZSBlcnJvcjxicj5QbGVhc2UgdHJ5IGFnYWluLlwiXG5cbiAgYmFjazogLT5cbiAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKClcbiAgICBcbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cbiAgICBAa2xhc3MgICAgICAgPSBvcHRpb25zLmtsYXNzXG4gICAgQHN0dWRlbnRzICAgID0gb3B0aW9ucy5zdHVkZW50c1xuICAgIEBhbGxTdHVkZW50cyA9IG9wdGlvbnMuYWxsU3R1ZGVudHNcbiAgICBAdGVhY2hlcnMgICAgPSBvcHRpb25zLnRlYWNoZXJzXG5cbiAgICBAc3R1ZGVudHMub24gXCJhZGQgcmVtb3ZlIGNoYW5nZVwiLCBAcmVuZGVyU3R1ZGVudHNcblxuICAgIEB2aWV3cyA9IFtdXG5cblxuICBjbG9zZVZpZXdzOiAtPlxuICAgIGZvciB2aWV3IGluIEB2aWV3c1xuICAgICAgdmlldy5jbG9zZSgpXG4gICAgQHZpZXdzID0gW11cblxuICBvblN1YnZpZXdSZW5kZXJlZDogPT5cbiAgICBAdHJpZ2dlciBcInN1YlJlbmRlcmVkXCJcblxuICByZW5kZXJTdHVkZW50czogPT5cbiAgICAkdWwgPSAkKFwiPHVsPlwiKS5hZGRDbGFzcyhcInN0dWRlbnRfbGlzdFwiKVxuXG4gICAgQGNsb3NlVmlld3MoKVxuICAgIGZvciBzdHVkZW50IGluIEBzdHVkZW50cy5tb2RlbHNcbiAgICAgIHZpZXcgPSBuZXcgU3R1ZGVudExpc3RFbGVtZW50Vmlld1xuICAgICAgICBzdHVkZW50IDogc3R1ZGVudFxuICAgICAgICBzdHVkZW50cyA6IEBzdHVkZW50c1xuICAgICAgQHZpZXdzLnB1c2ggdmlld1xuICAgICAgdmlldy5vbiBcInJlbmRlcmVkXCIsIEBvblN1YnZpZXdSZW5kZXJlZFxuICAgICAgdmlldy5yZW5kZXIoKVxuICAgICAgdmlldy5vbiBcImNoYW5nZVwiLCBAcmVuZGVyU3R1ZGVudHNcbiAgICAgICR1bC5hcHBlbmQgdmlldy5lbFxuXG4gICAgQCRlbC5maW5kKFwiI3N0dWRlbnRfbGlzdF93cmFwcGVyXCIpLmh0bWwgJHVsXG4gICAgXG4gICAgIyMjXG4gICAgIyBBZGQgc3R1ZGVudCBmZWF0dXJlXG4gICAgc3R1ZGVudE9wdGlvbkxpc3QgPSBcIjxvcHRpb24gdmFsdWU9J19ub25lJyBkaXNhYmxlZD0nZGlzYWJsZWQnIHNlbGVjdGVkPSdzZWxlY3RlZCc+KCN7JC50KCduYW1lJyl9KSAtICgjeyQudCgnYWdlJyl9KTwvb3B0aW9uPlwiXG4gICAgZm9yIHN0dWRlbnQgaW4gQGFsbFN0dWRlbnRzLm1vZGVsc1xuICAgICAgaXNJbkNsYXNzID0gZmFsc2VcbiAgICAgIGZvciBkb3VibGUgaW4gQHN0dWRlbnRzLm1vZGVsc1xuICAgICAgICBpZiBkb3VibGUuaWQgPT0gc3R1ZGVudC5pZCB0aGVuIGlzSW5DbGFzcyA9IHRydWVcbiAgICAgIGlmIG5vdCBpc0luQ2xhc3NcbiAgICAgICAgc3R1ZGVudE9wdGlvbkxpc3QgKz0gXCI8b3B0aW9uIGRhdGEtaWQ9JyN7c3R1ZGVudC5pZH0nPiN7c3R1ZGVudC5nZXQgJ25hbWUnfSAtICN7c3R1ZGVudC5nZXQgJ2FnZSd9PC9vcHRpb24+XCJcblxuICAgIEAkZWwuZmluZChcIiNhZGRfc3R1ZGVudF9zZWxlY3RcIikuaHRtbCBzdHVkZW50T3B0aW9uTGlzdFxuICAgICMjI1xuXG4gIHJlbmRlcjogLT5cblxuICAgIHNjaG9vbE5hbWUgPSBAa2xhc3MuZ2V0U3RyaW5nIFwic2Nob29sTmFtZVwiXG4gICAgeWVhciAgICAgICA9IEBrbGFzcy5nZXRTdHJpbmcgXCJ5ZWFyXCJcbiAgICBncmFkZSAgICAgID0gQGtsYXNzLmdldFN0cmluZyBcImdyYWRlXCJcbiAgICBzdHJlYW0gICAgID0gQGtsYXNzLmdldFN0cmluZyBcInN0cmVhbVwiXG5cbiAgICBzdGFydERhdGUgID0gbmV3IERhdGUgQGtsYXNzLmdldE51bWJlciBcInN0YXJ0RGF0ZVwiXG5cbiAgICBpZiBAa2xhc3MuZ2V0KFwidGVhY2hlcklkXCIpID09IFwiYWRtaW5cIlxuICAgICAgdGVhY2hlck5hbWUgPSBcImFkbWluXCJcbiAgICBlbHNlIFxuICAgICAgdGVhY2hlck5hbWUgPSBcbiAgICAgICAgaWYgQHRlYWNoZXJzLmdldChAa2xhc3MuZ2V0KCd0ZWFjaGVySWQnKSkgJiYgQHRlYWNoZXJzLmdldChAa2xhc3MuZ2V0KCd0ZWFjaGVySWQnKSkuaGFzKCduYW1lJylcbiAgICAgICAgICBAdGVhY2hlcnMuZ2V0KEBrbGFzcy5nZXQoJ3RlYWNoZXJJZCcpKS5nZXQoJ25hbWUnKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgXCJ1bmtub3duXCJcblxuICAgIGh0bWxJbmZvVGVhY2hlciA9IFwiXG4gICAgICA8dHI+PHRkPjxsYWJlbD5UZWFjaGVyPC9sYWJlbD48L3RkPjx0ZD4je3RlYWNoZXJOYW1lfTwvdGQ+PC90cj5cbiAgICBcIiBpZiBUYW5nZXJpbmUudXNlci5pc0FkbWluKClcblxuICAgIGh0bWxUZWFjaGVyU2VsZWN0ID0gXCJcbiAgICAgIDxsYWJlbD5UZWFjaGVyPC9sYWJlbD48YnI+XG4gICAgICA8c2VsZWN0IGlkPSd0ZWFjaGVyX3NlbGVjdCc+XG4gICAgICAjeyhcIjxvcHRpb24gI3tpZiB0ZWFjaGVyLmlkID09IEBrbGFzcy5nZXQoJ3RlYWNoZXJJZCcpIHRoZW4gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnIFwiIGVsc2UgXCJcIn0gZGF0YS10ZWFjaGVySWQ9JyN7dGVhY2hlci5pZH0nPiN7dGVhY2hlci5nZXQoJ25hbWUnKX08L29wdGlvbj5cIikgZm9yIHRlYWNoZXIgaW4gQHRlYWNoZXJzLm1vZGVsc31cbiAgICAgIDwvc2VsZWN0PlxuICAgIFwiIGlmIFRhbmdlcmluZS51c2VyLmlzQWRtaW4oKVxuXG4gICAgQCRlbC5odG1sIFwiXG4gICAgPGJ1dHRvbiBjbGFzcz0nYmFjayBuYXZpZ2F0aW9uJz4je3QoJ2JhY2snKX08L2J1dHRvbj5cbiAgICA8aDE+I3t0KCdjbGFzcyBlZGl0b3InKX08L2gxPlxuICAgIDxoMj4je3QoJ2Jhc2ljIGluZm8nKX08L2gyPlxuICAgIDx0YWJsZSBjbGFzcz0naW5mb19ib3ggYmFzaWNfaW5mbyc+XG4gICAgICA8dHI+PHRkPjxsYWJlbD5TY2hvb2wgbmFtZTwvbGFiZWw+PC90ZD48dGQ+I3tzY2hvb2xOYW1lfTwvdGQ+PC90cj5cbiAgICAgICN7aHRtbEluZm9UZWFjaGVyIHx8IFwiXCJ9XG4gICAgICA8dHI+PHRkPjxsYWJlbD5TY2hvb2wgeWVhcjwvbGFiZWw+PC90ZD48dGQ+I3t5ZWFyfTwvdGQ+PC90cj5cbiAgICAgIDx0cj48dGQ+PGxhYmVsPiN7dCgnZ3JhZGUnKX08L2xhYmVsPjwvdGQ+PHRkPiN7Z3JhZGV9PC90ZD48L3RyPlxuICAgICAgPHRyPjx0ZD48bGFiZWw+I3t0KCdzdHJlYW0nKX08L2xhYmVsPjwvdGQ+PHRkPiN7c3RyZWFtfTwvdGQ+PC90cj5cbiAgICAgIDx0cj48dGQ+PGxhYmVsPiN7dCgnc3RhcnRpbmcgZGF0ZScpfTwvbGFiZWw+PC90ZD48dGQ+I3tzdGFydERhdGUuZ2V0RnVsbFllYXIoKStcIi9cIisoc3RhcnREYXRlLmdldE1vbnRoKCkrMSkrXCIvXCIrc3RhcnREYXRlLmdldERhdGUoKX08L3RkPjwvdHI+XG4gICAgICA8dHI+PHRkIGNvbHNwYW49JzInPjxidXR0b24gY2xhc3M9J2Jhc2ljX2luZm9fZWRpdCBjb21tYW5kJz4je3QoJ2VkaXQnKX08L2J1dHRvbj48L3RkPjwvdHI+XG4gICAgPC90YWJsZT5cbiAgICA8ZGl2IGNsYXNzPSdiYXNpY19pbmZvIGNvbmZpcm1hdGlvbic+XG4gICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG5cbiAgICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICAgIDxsYWJlbCBmb3I9J3NjaG9vbF9uYW1lJz5TY2hvb2wgbmFtZTwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IGlkPSdzY2hvb2xfbmFtZScgdmFsdWU9JyN7c2Nob29sTmFtZX0nPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICAgICN7aHRtbFRlYWNoZXJTZWxlY3QgfHwgXCJcIn1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICA8bGFiZWwgZm9yPSd5ZWFyJz5TY2hvb2wgeWVhcjwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IGlkPSd5ZWFyJyB2YWx1ZT0nI3t5ZWFyfSc+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nZ3JhZGUnPiN7dCgnZ3JhZGUnKX08L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dCBpZD0nZ3JhZGUnIHZhbHVlPScje2dyYWRlfSc+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nc3RyZWFtJz4je3QoJ3N0cmVhbScpfTwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IGlkPSdzdHJlYW0nIHZhbHVlPScje3N0cmVhbX0nPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICAgIDxsYWJlbCBmb3I9J3N0YXJ0X2RhdGUnPiN7dCgnc3RhcnRpbmcgZGF0ZScpfTwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IGlkPSdzdGFydF9kYXRlJyB2YWx1ZT0nI3tzdGFydERhdGUuZ2V0RnVsbFllYXIoKStcIi9cIisoc3RhcnREYXRlLmdldE1vbnRoKCkrMSkrXCIvXCIrc3RhcnREYXRlLmdldERhdGUoKX0nPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIFxuICAgICAgICA8YnV0dG9uIGNsYXNzPSdzYXZlIGNvbW1hbmQnPiN7dCgnc2F2ZScpfTwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdiYXNpY19pbmZvX2NhbmNlbCBjb21tYW5kJz4je3QoJ2NhbmNlbCcpfTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgXG4gICAgPGgyPiN7dCgnc3R1ZGVudHMnKS5jYXBpdGFsaXplKCl9PC9oMj5cbiAgICA8ZGl2IGlkPSdzdHVkZW50X2xpc3Rfd3JhcHBlcic+PC9kaXY+XG4gICAgPCEtLSBhZGQgc3R1ZGVudCBmZWF0dXJlIC0tPlxuICAgIDwhLS1idXR0b24gY2xhc3M9J2FkZF9zdHVkZW50IGNvbW1hbmQnPkFkZCBzdHVkZW50PC9idXR0b24+XG4gICAgPGRpdiBjbGFzcz0nYWRkX3N0dWRlbnRfZm9ybSBtZW51X2JveCBjb25maXJtYXRpb24nPlxuICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICA8bGFiZWwgZm9yPSdhZGRfc3R1ZGVudF9zZWxlY3QnPiN7dCgnYWRkIHN0dWRlbnQnKX08L2xhYmVsPjxicj5cbiAgICAgICAgPHNlbGVjdCBpZD0nYWRkX3N0dWRlbnRfc2VsZWN0Jz5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2Rpdj4gICAgICBcbiAgICAgIDxidXR0b24gY2xhc3M9J2FkZF9zdHVkZW50X2FkZCBjb21tYW5kJz4je3QoJ2FkZCcpfTwvYnV0dG9uPjxidXR0b24gY2xhc3M9J2FkZF9zdHVkZW50X2NhbmNlbCBjb21tYW5kJz4je3QoJ2NhbmNlbCcpfTwvYnV0dG9uPlxuICAgIDwvZGl2LS0+XG5cblxuICAgIDxidXR0b24gY2xhc3M9J3JlZ2lzdGVyX3N0dWRlbnQgY29tbWFuZCc+I3skLnQoXCJyZWdpc3RlciBzdHVkZW50XCIpfTwvYnV0dG9uPlxuICAgIDxkaXYgY2xhc3M9J3JlZ2lzdGVyX3N0dWRlbnRfZm9ybSBtZW51X2JveCBjb25maXJtYXRpb24nPlxuICAgICAgPGgyPiN7dCgncmVnaXN0ZXIgc3R1ZGVudCcpfTwvaDI+XG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxsYWJlbCBmb3I9J3JlZ2lzdGVyX3N0dWRlbnRfbmFtZSc+RnVsbCBuYW1lPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IGlkPSdyZWdpc3Rlcl9zdHVkZW50X25hbWUnIHZhbHVlPScnPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxsYWJlbCBmb3I9J3JlZ2lzdGVyX3N0dWRlbnRfZ2VuZGVyJz4je3QoJ2dlbmRlcicpfTwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCBpZD0ncmVnaXN0ZXJfc3R1ZGVudF9nZW5kZXInIHZhbHVlPScnPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxsYWJlbCBmb3I9J3JlZ2lzdGVyX3N0dWRlbnRfYWdlJz4je3QoJ2FnZScpfTwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCBpZD0ncmVnaXN0ZXJfc3R1ZGVudF9hZ2UnIHZhbHVlPScnPlxuICAgICAgPC9kaXY+XG4gICAgICA8YnV0dG9uIGNsYXNzPSdyZWdpc3Rlcl9zdHVkZW50X3NhdmUgY29tbWFuZCc+I3t0KCdzYXZlJyl9PC9idXR0b24+XG4gICAgICA8YnV0dG9uIGNsYXNzPSdyZWdpc3Rlcl9zdHVkZW50X2NhbmNlbCBjb21tYW5kJz4je3QoJ2NhbmNlbCcpfTwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICAgIFwiXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICAgIEByZW5kZXJTdHVkZW50cygpXG4iLCJ2YXIgS2xhc3NFZGl0VmlldyxcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5LbGFzc0VkaXRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEtsYXNzRWRpdFZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEtsYXNzRWRpdFZpZXcoKSB7XG4gICAgdGhpcy5yZW5kZXJTdHVkZW50cyA9IGJpbmQodGhpcy5yZW5kZXJTdHVkZW50cywgdGhpcyk7XG4gICAgdGhpcy5vblN1YnZpZXdSZW5kZXJlZCA9IGJpbmQodGhpcy5vblN1YnZpZXdSZW5kZXJlZCwgdGhpcyk7XG4gICAgdGhpcy5yZWdpc3RlclN0dWRlbnQgPSBiaW5kKHRoaXMucmVnaXN0ZXJTdHVkZW50LCB0aGlzKTtcbiAgICByZXR1cm4gS2xhc3NFZGl0Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEtsYXNzRWRpdFZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiS2xhc3NFZGl0Vmlld1wiO1xuXG4gIEtsYXNzRWRpdFZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICAnY2xpY2sgLmJhY2snOiAnYmFjaycsXG4gICAgJ2NsaWNrIC5zYXZlJzogJ2Jhc2ljSW5mb1NhdmUnLFxuICAgICdjbGljayAuYmFzaWNfaW5mb19lZGl0JzogJ2Jhc2ljSW5mb1RvZ2dsZScsXG4gICAgJ2NsaWNrIC5iYXNpY19pbmZvX2NhbmNlbCc6ICdiYXNpY0luZm9Ub2dnbGUnLFxuICAgICdjaGFuZ2UgI3RlYWNoZXJfc2VsZWN0JzogJ3RlYWNoZXJTZWxlY3QnLFxuICAgICdjbGljayAuYWRkX3N0dWRlbnQnOiAnYWRkU3R1ZGVudFRvZ2dsZScsXG4gICAgJ2NsaWNrIC5hZGRfc3R1ZGVudF9jYW5jZWwnOiAnYWRkU3R1ZGVudFRvZ2dsZScsXG4gICAgJ2NsaWNrIC5hZGRfc3R1ZGVudF9hZGQnOiAnYWRkU3R1ZGVudCcsXG4gICAgJ2NsaWNrIC5yZWdpc3Rlcl9zdHVkZW50JzogJ3JlZ2lzdGVyU3R1ZGVudFRvZ2dsZScsXG4gICAgJ2NsaWNrIC5yZWdpc3Rlcl9zdHVkZW50X2NhbmNlbCc6ICdyZWdpc3RlclN0dWRlbnRUb2dnbGUnLFxuICAgICdjbGljayAucmVnaXN0ZXJfc3R1ZGVudF9zYXZlJzogJ3JlZ2lzdGVyU3R1ZGVudCdcbiAgfTtcblxuICBLbGFzc0VkaXRWaWV3LnByb3RvdHlwZS50ZWFjaGVyU2VsZWN0ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgdGVhY2hlcklkO1xuICAgIHRlYWNoZXJJZCA9IHRoaXMuJGVsLmZpbmQoXCIjdGVhY2hlcl9zZWxlY3Qgb3B0aW9uOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLXRlYWNoZXJJZFwiKTtcbiAgICByZXR1cm4gdGhpcy5rbGFzcy5zZXQoXCJ0ZWFjaGVySWRcIiwgdGVhY2hlcklkKTtcbiAgfTtcblxuICBLbGFzc0VkaXRWaWV3LnByb3RvdHlwZS5hZGRTdHVkZW50VG9nZ2xlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwuZmluZChcIi5yZWdpc3Rlcl9zdHVkZW50X2Zvcm0gaW5wdXRcIikudmFsKFwiXCIpO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLmFkZF9zdHVkZW50X2Zvcm0sIC5hZGRfc3R1ZGVudFwiKS50b2dnbGUoKTtcbiAgfTtcblxuICBLbGFzc0VkaXRWaWV3LnByb3RvdHlwZS5yZWdpc3RlclN0dWRlbnRUb2dnbGUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRlbC5maW5kKFwiLnJlZ2lzdGVyX3N0dWRlbnRfZm9ybSwgLnJlZ2lzdGVyX3N0dWRlbnRcIikudG9nZ2xlKCk7XG4gICAgaWYgKHRoaXMuJGVsLmZpbmQoXCIucmVnaXN0ZXJfc3R1ZGVudF9mb3JtXCIpLmlzKFwiOnZpc2libGVcIikpIHtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIucmVnaXN0ZXJfc3R1ZGVudF9mb3JtXCIpLnNjcm9sbFRvKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiI3JlZ2lzdGVyX3N0dWRlbnRfbmFtZSAsI3JlZ2lzdGVyX3N0dWRlbnRfZ2VuZGVyLCAjcmVnaXN0ZXJfc3R1ZGVudF9hZ2VcIikudmFsKFwiXCIpO1xuICB9O1xuXG4gIEtsYXNzRWRpdFZpZXcucHJvdG90eXBlLmFkZFN0dWRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmV3U3R1ZGVudCwgc3R1ZGVudElkO1xuICAgIGlmICh0aGlzLiRlbC5maW5kKFwiI2FkZF9zdHVkZW50X3NlbGVjdCBvcHRpb246c2VsZWN0ZWRcIikudmFsKCkgPT09IFwiX25vbmVcIikge1xuICAgICAgcmV0dXJuIGFsZXJ0KFwiUGxlYXNlIHNlbGVjdCBhIHN0dWRlbnQsIG9yIGNhbmNlbC5cIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0dWRlbnRJZCA9IHRoaXMuJGVsLmZpbmQoXCIjYWRkX3N0dWRlbnRfc2VsZWN0IG9wdGlvbjpzZWxlY3RlZFwiKS5hdHRyKFwiZGF0YS1pZFwiKTtcbiAgICAgIG5ld1N0dWRlbnQgPSB0aGlzLmFsbFN0dWRlbnRzLmdldChzdHVkZW50SWQpO1xuICAgICAgcmV0dXJuIG5ld1N0dWRlbnQuc2F2ZSh7XG4gICAgICAgIGtsYXNzSWQ6IHRoaXMua2xhc3MuaWRcbiAgICAgIH0sIHtcbiAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgX3RoaXMuc3R1ZGVudHMuYWRkKG5ld1N0dWRlbnQpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmFkZFN0dWRlbnRUb2dnbGUoKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIEtsYXNzRWRpdFZpZXcucHJvdG90eXBlLnJlZ2lzdGVyU3R1ZGVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHVkZW50O1xuICAgIHN0dWRlbnQgPSBuZXcgU3R1ZGVudDtcbiAgICByZXR1cm4gc3R1ZGVudC5zYXZlKHtcbiAgICAgIG5hbWU6IHRoaXMuJGVsLmZpbmQoXCIjcmVnaXN0ZXJfc3R1ZGVudF9uYW1lXCIpLnZhbCgpLFxuICAgICAgZ2VuZGVyOiB0aGlzLiRlbC5maW5kKFwiI3JlZ2lzdGVyX3N0dWRlbnRfZ2VuZGVyXCIpLnZhbCgpLFxuICAgICAgYWdlOiB0aGlzLiRlbC5maW5kKFwiI3JlZ2lzdGVyX3N0dWRlbnRfYWdlXCIpLnZhbCgpLFxuICAgICAga2xhc3NJZDogdGhpcy5rbGFzcy5pZFxuICAgIH0sIHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMuc3R1ZGVudHMuYWRkKHN0dWRlbnQpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZWdpc3RlclN0dWRlbnRUb2dnbGUoKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgS2xhc3NFZGl0Vmlldy5wcm90b3R5cGUuYmFzaWNJbmZvVG9nZ2xlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyICRiYXNpY0luZm87XG4gICAgdGhpcy4kZWwuZmluZChcIi5iYXNpY19pbmZvXCIpLnRvZ2dsZSgpO1xuICAgICRiYXNpY0luZm8gPSAkKHRoaXMuJGVsLmZpbmQoXCIuYmFzaWNfaW5mb1wiKVsxXSk7XG4gICAgaWYgKCRiYXNpY0luZm8uaXMoXCI6dmlzaWJsZVwiKSkge1xuICAgICAgJGJhc2ljSW5mby5zY3JvbGxUbygpO1xuICAgICAgdGhpcy4kZWwuZmluZChcIiN5ZWFyXCIpLmZvY3VzKCk7XG4gICAgfVxuICAgIHRoaXMuJGVsLmZpbmQoXCIjc2Nob29sX25hbWVcIikudmFsKHRoaXMua2xhc3MuZ2V0U3RyaW5nKFwic2Nob29sTmFtZVwiKSk7XG4gICAgdGhpcy4kZWwuZmluZChcIiN5ZWFyXCIpLnZhbCh0aGlzLmtsYXNzLmdldFN0cmluZyhcInllYXJcIikpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIjZ3JhZGVcIikudmFsKHRoaXMua2xhc3MuZ2V0U3RyaW5nKFwiZ3JhZGVcIikpO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiI3N0cmVhbVwiKS52YWwodGhpcy5rbGFzcy5nZXRTdHJpbmcoXCJzdHJlYW1cIikpO1xuICB9O1xuXG4gIEtsYXNzRWRpdFZpZXcucHJvdG90eXBlLmJhc2ljSW5mb1NhdmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5wdXRzLCBuZXdEYXRlO1xuICAgIGlucHV0cyA9IHRoaXMuJGVsLmZpbmQoXCIjc3RhcnRfZGF0ZVwiKS52YWwoKS5zcGxpdChcIi9cIik7XG4gICAgbmV3RGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgbmV3RGF0ZS5zZXRGdWxsWWVhcihwYXJzZUludChpbnB1dHNbMF0pKTtcbiAgICBuZXdEYXRlLnNldE1vbnRoKHBhcnNlSW50KGlucHV0c1sxXSkgLSAxKTtcbiAgICBuZXdEYXRlLnNldERhdGUocGFyc2VJbnQoaW5wdXRzWzJdKSk7XG4gICAgcmV0dXJuIHRoaXMua2xhc3Muc2F2ZSh7XG4gICAgICBzY2hvb2xOYW1lOiB0aGlzLiRlbC5maW5kKFwiI3NjaG9vbF9uYW1lXCIpLnZhbCgpLFxuICAgICAgeWVhcjogdGhpcy4kZWwuZmluZChcIiN5ZWFyXCIpLnZhbCgpLFxuICAgICAgZ3JhZGU6IHRoaXMuJGVsLmZpbmQoXCIjZ3JhZGVcIikudmFsKCksXG4gICAgICBzdHJlYW06IHRoaXMuJGVsLmZpbmQoXCIjc3RyZWFtXCIpLnZhbCgpLFxuICAgICAgc3RhcnREYXRlOiBuZXdEYXRlLmdldFRpbWUoKVxuICAgIH0sIHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlcigpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyksXG4gICAgICBlcnJvcjogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQoXCJTYXZlIGVycm9yPGJyPlBsZWFzZSB0cnkgYWdhaW4uXCIpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBLbGFzc0VkaXRWaWV3LnByb3RvdHlwZS5iYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgfTtcblxuICBLbGFzc0VkaXRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMua2xhc3MgPSBvcHRpb25zLmtsYXNzO1xuICAgIHRoaXMuc3R1ZGVudHMgPSBvcHRpb25zLnN0dWRlbnRzO1xuICAgIHRoaXMuYWxsU3R1ZGVudHMgPSBvcHRpb25zLmFsbFN0dWRlbnRzO1xuICAgIHRoaXMudGVhY2hlcnMgPSBvcHRpb25zLnRlYWNoZXJzO1xuICAgIHRoaXMuc3R1ZGVudHMub24oXCJhZGQgcmVtb3ZlIGNoYW5nZVwiLCB0aGlzLnJlbmRlclN0dWRlbnRzKTtcbiAgICByZXR1cm4gdGhpcy52aWV3cyA9IFtdO1xuICB9O1xuXG4gIEtsYXNzRWRpdFZpZXcucHJvdG90eXBlLmNsb3NlVmlld3MgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgbGVuLCByZWYsIHZpZXc7XG4gICAgcmVmID0gdGhpcy52aWV3cztcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZpZXcgPSByZWZbaV07XG4gICAgICB2aWV3LmNsb3NlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZpZXdzID0gW107XG4gIH07XG5cbiAgS2xhc3NFZGl0Vmlldy5wcm90b3R5cGUub25TdWJ2aWV3UmVuZGVyZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwic3ViUmVuZGVyZWRcIik7XG4gIH07XG5cbiAgS2xhc3NFZGl0Vmlldy5wcm90b3R5cGUucmVuZGVyU3R1ZGVudHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgJHVsLCBpLCBsZW4sIHJlZiwgc3R1ZGVudCwgdmlldztcbiAgICAkdWwgPSAkKFwiPHVsPlwiKS5hZGRDbGFzcyhcInN0dWRlbnRfbGlzdFwiKTtcbiAgICB0aGlzLmNsb3NlVmlld3MoKTtcbiAgICByZWYgPSB0aGlzLnN0dWRlbnRzLm1vZGVscztcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHN0dWRlbnQgPSByZWZbaV07XG4gICAgICB2aWV3ID0gbmV3IFN0dWRlbnRMaXN0RWxlbWVudFZpZXcoe1xuICAgICAgICBzdHVkZW50OiBzdHVkZW50LFxuICAgICAgICBzdHVkZW50czogdGhpcy5zdHVkZW50c1xuICAgICAgfSk7XG4gICAgICB0aGlzLnZpZXdzLnB1c2godmlldyk7XG4gICAgICB2aWV3Lm9uKFwicmVuZGVyZWRcIiwgdGhpcy5vblN1YnZpZXdSZW5kZXJlZCk7XG4gICAgICB2aWV3LnJlbmRlcigpO1xuICAgICAgdmlldy5vbihcImNoYW5nZVwiLCB0aGlzLnJlbmRlclN0dWRlbnRzKTtcbiAgICAgICR1bC5hcHBlbmQodmlldy5lbCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiI3N0dWRlbnRfbGlzdF93cmFwcGVyXCIpLmh0bWwoJHVsKTtcblxuICAgIC8qXG4gICAgICogQWRkIHN0dWRlbnQgZmVhdHVyZVxuICAgIHN0dWRlbnRPcHRpb25MaXN0ID0gXCI8b3B0aW9uIHZhbHVlPSdfbm9uZScgZGlzYWJsZWQ9J2Rpc2FibGVkJyBzZWxlY3RlZD0nc2VsZWN0ZWQnPigjeyQudCgnbmFtZScpfSkgLSAoI3skLnQoJ2FnZScpfSk8L29wdGlvbj5cIlxuICAgIGZvciBzdHVkZW50IGluIEBhbGxTdHVkZW50cy5tb2RlbHNcbiAgICAgIGlzSW5DbGFzcyA9IGZhbHNlXG4gICAgICBmb3IgZG91YmxlIGluIEBzdHVkZW50cy5tb2RlbHNcbiAgICAgICAgaWYgZG91YmxlLmlkID09IHN0dWRlbnQuaWQgdGhlbiBpc0luQ2xhc3MgPSB0cnVlXG4gICAgICBpZiBub3QgaXNJbkNsYXNzXG4gICAgICAgIHN0dWRlbnRPcHRpb25MaXN0ICs9IFwiPG9wdGlvbiBkYXRhLWlkPScje3N0dWRlbnQuaWR9Jz4je3N0dWRlbnQuZ2V0ICduYW1lJ30gLSAje3N0dWRlbnQuZ2V0ICdhZ2UnfTwvb3B0aW9uPlwiXG4gICAgXG4gICAgQCRlbC5maW5kKFwiI2FkZF9zdHVkZW50X3NlbGVjdFwiKS5odG1sIHN0dWRlbnRPcHRpb25MaXN0XG4gICAgICovXG4gIH07XG5cbiAgS2xhc3NFZGl0Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdyYWRlLCBodG1sSW5mb1RlYWNoZXIsIGh0bWxUZWFjaGVyU2VsZWN0LCBzY2hvb2xOYW1lLCBzdGFydERhdGUsIHN0cmVhbSwgdGVhY2hlciwgdGVhY2hlck5hbWUsIHllYXI7XG4gICAgc2Nob29sTmFtZSA9IHRoaXMua2xhc3MuZ2V0U3RyaW5nKFwic2Nob29sTmFtZVwiKTtcbiAgICB5ZWFyID0gdGhpcy5rbGFzcy5nZXRTdHJpbmcoXCJ5ZWFyXCIpO1xuICAgIGdyYWRlID0gdGhpcy5rbGFzcy5nZXRTdHJpbmcoXCJncmFkZVwiKTtcbiAgICBzdHJlYW0gPSB0aGlzLmtsYXNzLmdldFN0cmluZyhcInN0cmVhbVwiKTtcbiAgICBzdGFydERhdGUgPSBuZXcgRGF0ZSh0aGlzLmtsYXNzLmdldE51bWJlcihcInN0YXJ0RGF0ZVwiKSk7XG4gICAgaWYgKHRoaXMua2xhc3MuZ2V0KFwidGVhY2hlcklkXCIpID09PSBcImFkbWluXCIpIHtcbiAgICAgIHRlYWNoZXJOYW1lID0gXCJhZG1pblwiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZWFjaGVyTmFtZSA9IHRoaXMudGVhY2hlcnMuZ2V0KHRoaXMua2xhc3MuZ2V0KCd0ZWFjaGVySWQnKSkgJiYgdGhpcy50ZWFjaGVycy5nZXQodGhpcy5rbGFzcy5nZXQoJ3RlYWNoZXJJZCcpKS5oYXMoJ25hbWUnKSA/IHRoaXMudGVhY2hlcnMuZ2V0KHRoaXMua2xhc3MuZ2V0KCd0ZWFjaGVySWQnKSkuZ2V0KCduYW1lJykgOiBcInVua25vd25cIjtcbiAgICB9XG4gICAgaWYgKFRhbmdlcmluZS51c2VyLmlzQWRtaW4oKSkge1xuICAgICAgaHRtbEluZm9UZWFjaGVyID0gXCI8dHI+PHRkPjxsYWJlbD5UZWFjaGVyPC9sYWJlbD48L3RkPjx0ZD5cIiArIHRlYWNoZXJOYW1lICsgXCI8L3RkPjwvdHI+XCI7XG4gICAgfVxuICAgIGlmIChUYW5nZXJpbmUudXNlci5pc0FkbWluKCkpIHtcbiAgICAgIGh0bWxUZWFjaGVyU2VsZWN0ID0gXCI8bGFiZWw+VGVhY2hlcjwvbGFiZWw+PGJyPiA8c2VsZWN0IGlkPSd0ZWFjaGVyX3NlbGVjdCc+IFwiICsgKChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGksIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgICByZWYgPSB0aGlzLnRlYWNoZXJzLm1vZGVscztcbiAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICB0ZWFjaGVyID0gcmVmW2ldO1xuICAgICAgICAgIHJlc3VsdHMucHVzaChcIjxvcHRpb24gXCIgKyAodGVhY2hlci5pZCA9PT0gdGhpcy5rbGFzcy5nZXQoJ3RlYWNoZXJJZCcpID8gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnIFwiIDogXCJcIikgKyBcIiBkYXRhLXRlYWNoZXJJZD0nXCIgKyB0ZWFjaGVyLmlkICsgXCInPlwiICsgKHRlYWNoZXIuZ2V0KCduYW1lJykpICsgXCI8L29wdGlvbj5cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KS5jYWxsKHRoaXMpKSArIFwiIDwvc2VsZWN0PlwiO1xuICAgIH1cbiAgICB0aGlzLiRlbC5odG1sKFwiPGJ1dHRvbiBjbGFzcz0nYmFjayBuYXZpZ2F0aW9uJz5cIiArICh0KCdiYWNrJykpICsgXCI8L2J1dHRvbj4gPGgxPlwiICsgKHQoJ2NsYXNzIGVkaXRvcicpKSArIFwiPC9oMT4gPGgyPlwiICsgKHQoJ2Jhc2ljIGluZm8nKSkgKyBcIjwvaDI+IDx0YWJsZSBjbGFzcz0naW5mb19ib3ggYmFzaWNfaW5mbyc+IDx0cj48dGQ+PGxhYmVsPlNjaG9vbCBuYW1lPC9sYWJlbD48L3RkPjx0ZD5cIiArIHNjaG9vbE5hbWUgKyBcIjwvdGQ+PC90cj4gXCIgKyAoaHRtbEluZm9UZWFjaGVyIHx8IFwiXCIpICsgXCIgPHRyPjx0ZD48bGFiZWw+U2Nob29sIHllYXI8L2xhYmVsPjwvdGQ+PHRkPlwiICsgeWVhciArIFwiPC90ZD48L3RyPiA8dHI+PHRkPjxsYWJlbD5cIiArICh0KCdncmFkZScpKSArIFwiPC9sYWJlbD48L3RkPjx0ZD5cIiArIGdyYWRlICsgXCI8L3RkPjwvdHI+IDx0cj48dGQ+PGxhYmVsPlwiICsgKHQoJ3N0cmVhbScpKSArIFwiPC9sYWJlbD48L3RkPjx0ZD5cIiArIHN0cmVhbSArIFwiPC90ZD48L3RyPiA8dHI+PHRkPjxsYWJlbD5cIiArICh0KCdzdGFydGluZyBkYXRlJykpICsgXCI8L2xhYmVsPjwvdGQ+PHRkPlwiICsgKHN0YXJ0RGF0ZS5nZXRGdWxsWWVhcigpICsgXCIvXCIgKyAoc3RhcnREYXRlLmdldE1vbnRoKCkgKyAxKSArIFwiL1wiICsgc3RhcnREYXRlLmdldERhdGUoKSkgKyBcIjwvdGQ+PC90cj4gPHRyPjx0ZCBjb2xzcGFuPScyJz48YnV0dG9uIGNsYXNzPSdiYXNpY19pbmZvX2VkaXQgY29tbWFuZCc+XCIgKyAodCgnZWRpdCcpKSArIFwiPC9idXR0b24+PC90ZD48L3RyPiA8L3RhYmxlPiA8ZGl2IGNsYXNzPSdiYXNpY19pbmZvIGNvbmZpcm1hdGlvbic+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdzY2hvb2xfbmFtZSc+U2Nob29sIG5hbWU8L2xhYmVsPiA8aW5wdXQgaWQ9J3NjaG9vbF9uYW1lJyB2YWx1ZT0nXCIgKyBzY2hvb2xOYW1lICsgXCInPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiBcIiArIChodG1sVGVhY2hlclNlbGVjdCB8fCBcIlwiKSArIFwiIDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3llYXInPlNjaG9vbCB5ZWFyPC9sYWJlbD4gPGlucHV0IGlkPSd5ZWFyJyB2YWx1ZT0nXCIgKyB5ZWFyICsgXCInPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdncmFkZSc+XCIgKyAodCgnZ3JhZGUnKSkgKyBcIjwvbGFiZWw+IDxpbnB1dCBpZD0nZ3JhZGUnIHZhbHVlPSdcIiArIGdyYWRlICsgXCInPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdzdHJlYW0nPlwiICsgKHQoJ3N0cmVhbScpKSArIFwiPC9sYWJlbD4gPGlucHV0IGlkPSdzdHJlYW0nIHZhbHVlPSdcIiArIHN0cmVhbSArIFwiJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nc3RhcnRfZGF0ZSc+XCIgKyAodCgnc3RhcnRpbmcgZGF0ZScpKSArIFwiPC9sYWJlbD4gPGlucHV0IGlkPSdzdGFydF9kYXRlJyB2YWx1ZT0nXCIgKyAoc3RhcnREYXRlLmdldEZ1bGxZZWFyKCkgKyBcIi9cIiArIChzdGFydERhdGUuZ2V0TW9udGgoKSArIDEpICsgXCIvXCIgKyBzdGFydERhdGUuZ2V0RGF0ZSgpKSArIFwiJz4gPC9kaXY+IDxidXR0b24gY2xhc3M9J3NhdmUgY29tbWFuZCc+XCIgKyAodCgnc2F2ZScpKSArIFwiPC9idXR0b24+IDxidXR0b24gY2xhc3M9J2Jhc2ljX2luZm9fY2FuY2VsIGNvbW1hbmQnPlwiICsgKHQoJ2NhbmNlbCcpKSArIFwiPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPGgyPlwiICsgKHQoJ3N0dWRlbnRzJykuY2FwaXRhbGl6ZSgpKSArIFwiPC9oMj4gPGRpdiBpZD0nc3R1ZGVudF9saXN0X3dyYXBwZXInPjwvZGl2PiA8IS0tIGFkZCBzdHVkZW50IGZlYXR1cmUgLS0+IDwhLS1idXR0b24gY2xhc3M9J2FkZF9zdHVkZW50IGNvbW1hbmQnPkFkZCBzdHVkZW50PC9idXR0b24+IDxkaXYgY2xhc3M9J2FkZF9zdHVkZW50X2Zvcm0gbWVudV9ib3ggY29uZmlybWF0aW9uJz4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdhZGRfc3R1ZGVudF9zZWxlY3QnPlwiICsgKHQoJ2FkZCBzdHVkZW50JykpICsgXCI8L2xhYmVsPjxicj4gPHNlbGVjdCBpZD0nYWRkX3N0dWRlbnRfc2VsZWN0Jz4gPC9zZWxlY3Q+IDwvZGl2PiA8YnV0dG9uIGNsYXNzPSdhZGRfc3R1ZGVudF9hZGQgY29tbWFuZCc+XCIgKyAodCgnYWRkJykpICsgXCI8L2J1dHRvbj48YnV0dG9uIGNsYXNzPSdhZGRfc3R1ZGVudF9jYW5jZWwgY29tbWFuZCc+XCIgKyAodCgnY2FuY2VsJykpICsgXCI8L2J1dHRvbj4gPC9kaXYtLT4gPGJ1dHRvbiBjbGFzcz0ncmVnaXN0ZXJfc3R1ZGVudCBjb21tYW5kJz5cIiArICgkLnQoXCJyZWdpc3RlciBzdHVkZW50XCIpKSArIFwiPC9idXR0b24+IDxkaXYgY2xhc3M9J3JlZ2lzdGVyX3N0dWRlbnRfZm9ybSBtZW51X2JveCBjb25maXJtYXRpb24nPiA8aDI+XCIgKyAodCgncmVnaXN0ZXIgc3R1ZGVudCcpKSArIFwiPC9oMj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdyZWdpc3Rlcl9zdHVkZW50X25hbWUnPkZ1bGwgbmFtZTwvbGFiZWw+IDxpbnB1dCBpZD0ncmVnaXN0ZXJfc3R1ZGVudF9uYW1lJyB2YWx1ZT0nJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0ncmVnaXN0ZXJfc3R1ZGVudF9nZW5kZXInPlwiICsgKHQoJ2dlbmRlcicpKSArIFwiPC9sYWJlbD4gPGlucHV0IGlkPSdyZWdpc3Rlcl9zdHVkZW50X2dlbmRlcicgdmFsdWU9Jyc+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3JlZ2lzdGVyX3N0dWRlbnRfYWdlJz5cIiArICh0KCdhZ2UnKSkgKyBcIjwvbGFiZWw+IDxpbnB1dCBpZD0ncmVnaXN0ZXJfc3R1ZGVudF9hZ2UnIHZhbHVlPScnPiA8L2Rpdj4gPGJ1dHRvbiBjbGFzcz0ncmVnaXN0ZXJfc3R1ZGVudF9zYXZlIGNvbW1hbmQnPlwiICsgKHQoJ3NhdmUnKSkgKyBcIjwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdyZWdpc3Rlcl9zdHVkZW50X2NhbmNlbCBjb21tYW5kJz5cIiArICh0KCdjYW5jZWwnKSkgKyBcIjwvYnV0dG9uPiA8L2Rpdj5cIik7XG4gICAgdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyU3R1ZGVudHMoKTtcbiAgfTtcblxuICByZXR1cm4gS2xhc3NFZGl0VmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIEtsYXNzZXMgZXh0ZW5kcyBCYWNrYm9uZS5Db2xsZWN0aW9uXG4gIG1vZGVsIDogS2xhc3NcbiAgdXJsICAgOiAna2xhc3MnIiwidmFyIEtsYXNzZXMsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5LbGFzc2VzID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEtsYXNzZXMsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEtsYXNzZXMoKSB7XG4gICAgcmV0dXJuIEtsYXNzZXMuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBLbGFzc2VzLnByb3RvdHlwZS5tb2RlbCA9IEtsYXNzO1xuXG4gIEtsYXNzZXMucHJvdG90eXBlLnVybCA9ICdrbGFzcyc7XG5cbiAgcmV0dXJuIEtsYXNzZXM7XG5cbn0pKEJhY2tib25lLkNvbGxlY3Rpb24pO1xuXG4iLCJjbGFzcyBLbGFzc2VzVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIktsYXNzZXNWaWV3XCJcblxuICBldmVudHMgOlxuICAgICdjbGljayAua2xhc3NfYWRkJyAgICAgICAgIDogJ3RvZ2dsZUFkZEZvcm0nXG4gICAgJ2NsaWNrIC5rbGFzc19jYW5jZWwnICAgICAgOiAndG9nZ2xlQWRkRm9ybSdcbiAgICAnY2xpY2sgLmtsYXNzX3NhdmUnICAgICAgICA6ICdzYXZlTmV3S2xhc3MnXG4gICAgJ2NsaWNrIC5rbGFzc19jdXJyaWN1bGEnICAgOiAnZ290b0N1cnJpY3VsYSdcbiAgICAnY2xpY2sgLmdvdG9fY2xhc3MnICAgICAgICA6ICdnb3RvS2xhc3MnXG4gICAgJ2NsaWNrIC5wdWxsX2RhdGEnICAgOiAncHVsbERhdGEnXG4gICAgJ2NsaWNrIC52ZXJpZnknICAgICAgOiAnZ2hvc3RMb2dpbidcbiAgICAnY2xpY2sgLnVwbG9hZF9kYXRhJyA6ICd1cGxvYWREYXRhJ1xuXG4gIGluaXRpYWxpemU6ICggb3B0aW9ucyApIC0+XG4gICAgQGlwQmxvY2sgID0gMzJcbiAgICBAdG90YWxJcHMgPSAyNTZcbiAgICBAdGFibGV0T2Zmc2V0ID0gMFxuXG4gICAgQHZpZXdzID0gW11cbiAgICBAa2xhc3NlcyAgID0gb3B0aW9ucy5rbGFzc2VzXG4gICAgQGN1cnJpY3VsYSA9IG9wdGlvbnMuY3VycmljdWxhXG4gICAgQHRlYWNoZXJzICA9IG9wdGlvbnMudGVhY2hlcnNcblxuICAgIEBrbGFzc2VzLm9uIFwiYWRkIHJlbW92ZSBjaGFuZ2VcIiwgQHJlbmRlclxuXG4gICAgaWYgVGFuZ2VyaW5lLnVzZXIuaXNBZG1pbigpXG4gICAgICAjIHRpbWVvdXQgZm9yIHRoZSB2ZXJpZmljYXRpb24gYXR0ZW1wdFxuICAgICAgQHRpbWVyID0gc2V0VGltZW91dCA9PlxuICAgICAgICBAdXBkYXRlVXBsb2FkZXIoZmFsc2UpXG4gICAgICAsIDIwICogMTAwMFxuXG4gICAgICAjIHRyeSB0byB2ZXJpZnkgdGhlIGNvbm5lY3Rpb24gdG8gdGhlIHNlcnZlclxuICAgICAgdmVyUmVxID0gJC5hamF4XG4gICAgICAgIHVybDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybFZpZXcoXCJncm91cFwiLCBcImJ5REtleVwiKVxuICAgICAgICBkYXRhVHlwZTogXCJqc29ucFwiXG4gICAgICAgIGRhdGE6IGtleXM6IFtcInRlc3R0ZXN0XCJdXG4gICAgICAgIHRpbWVvdXQ6IDUwMDBcbiAgICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgICBjbGVhclRpbWVvdXQgQHRpbWVyXG4gICAgICAgICAgQHVwZGF0ZVVwbG9hZGVyIHRydWVcblxuICBnaG9zdExvZ2luOiAtPlxuICAgIFRhbmdlcmluZS51c2VyLmdob3N0TG9naW4gVGFuZ2VyaW5lLnNldHRpbmdzLnVwVXNlciwgVGFuZ2VyaW5lLnNldHRpbmdzLnVwUGFzc1xuXG4gIHVwbG9hZERhdGE6IC0+XG4gICAgJC5hamF4XG4gICAgICBcInVybFwiICAgICAgICAgOiBcIi9cIiArIFRhbmdlcmluZS5kYl9uYW1lICsgXCIvX2Rlc2lnbi90YW5nZXJpbmUvX3ZpZXcvYnlDb2xsZWN0aW9uP2luY2x1ZGVfZG9jcz1mYWxzZVwiXG4gICAgICBcInR5cGVcIiAgICAgICAgOiBcIlBPU1RcIlxuICAgICAgXCJkYXRhVHlwZVwiICAgIDogXCJqc29uXCJcbiAgICAgIFwiY29udGVudFR5cGVcIiA6IFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04XCIsXG4gICAgICBcImRhdGFcIiAgICAgICAgOiBKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICBpbmNsdWRlX2RvY3M6IGZhbHNlXG4gICAgICAgICAga2V5cyA6IFsncmVzdWx0JywgJ2tsYXNzJywgJ3N0dWRlbnQnLCAndGVhY2hlcicsICdsb2dzJywgJ3VzZXInXVxuICAgICAgICApXG4gICAgICBcInN1Y2Nlc3NcIiA6IChkYXRhKSA9PlxuICAgICAgICBkb2NMaXN0ID0gXy5wbHVjayhkYXRhLnJvd3MsXCJpZFwiKVxuICAgICAgICAkLmNvdWNoLnJlcGxpY2F0ZShcbiAgICAgICAgICBUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJsb2NhbFwiKSxcbiAgICAgICAgICBUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJncm91cFwiKSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6ICAgICAgPT5cbiAgICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJTeW5jIHN1Y2Nlc3NmdWxcIlxuICAgICAgICAgICAgZXJyb3I6IChhLCBiKSA9PlxuICAgICAgICAgICAgICBVdGlscy5taWRBbGVydCBcIlN5bmMgZXJyb3I8YnI+I3thfSAje2J9XCJcbiAgICAgICAgICAsXG4gICAgICAgICAgICBkb2NfaWRzOiBkb2NMaXN0XG4gICAgICAgIClcblxuXG4gIHVwZGF0ZVVwbG9hZGVyOiAoc3RhdHVzKSA9PlxuICAgIGh0bWwgPVxuICAgICAgaWYgc3RhdHVzID09IHRydWVcbiAgICAgICAgXCI8YnV0dG9uIGNsYXNzPSd1cGxvYWRfZGF0YSBjb21tYW5kJz5VcGxvYWQ8L2J1dHRvbj5cIlxuICAgICAgZWxzZSBpZiBzdGF0dXMgPT0gZmFsc2VcbiAgICAgICAgXCI8ZGl2IGNsYXNzPSdtZW51X2JveCc+PHNtYWxsPk5vIGNvbm5lY3Rpb248L3NtYWxsPjxicj48YnV0dG9uIGNsYXNzPSdjb21tYW5kIHZlcmlmeSc+VmVyaWZ5IGNvbm5lY3Rpb248L2J1dHRvbj48L2Rpdj5cIlxuICAgICAgZWxzZVxuICAgICAgICBcIjxidXR0b24gY2xhc3M9J2NvbW1hbmQnIGRpc2FibGVkPSdkaXNhYmxlZCc+VmVyaWZ5aW5nIGNvbm5lY3Rpb24uLi48L2J1dHRvbj5cIlxuXG4gICAgQCRlbC5maW5kKFwiLnVwbG9hZGVyXCIpLmh0bWwgaHRtbFxuXG5cbiAgcHVsbERhdGE6IC0+XG4gICAgaWYgQHRhYmxldE9mZnNldCA9PSAwXG4gICAgICBAdGFibGV0cyA9ICMgaWYgeW91IGNhbiB0aGluayBvZiBhIGJldHRlciBpZGVhIEknZCBsaWtlIHRvIHNlZSBpdFxuICAgICAgICBjaGVja2VkICAgIDogMFxuICAgICAgICBjb21wbGV0ZSAgIDogMFxuICAgICAgICBzdWNjZXNzZnVsIDogMFxuICAgICAgICBva0NvdW50ICAgIDogMFxuICAgICAgICBpcHMgICAgICAgIDogW11cbiAgICAgICAgcmVzdWx0ICAgICA6IDBcbiAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiUGxlYXNlIHdhaXQsIGRldGVjdGluZyB0YWJsZXRzLlwiXG5cbiAgICBVdGlscy53b3JraW5nIHRydWVcbiAgICBAcmFuZG9tSWREb2MgPSBoZXhfc2hhMShcIlwiK01hdGgucmFuZG9tKCkpXG4gICAgVGFuZ2VyaW5lLiRkYi5zYXZlRG9jXG4gICAgICBcIl9pZFwiIDogQHJhbmRvbUlkRG9jXG4gICAgLFxuICAgICAgc3VjY2VzczogKGRvYykgPT5cbiAgICAgICAgQHJhbmRvbURvYyA9IGRvY1xuICAgICAgICBmb3IgbG9jYWwgaW4gW0B0YWJsZXRPZmZzZXQuLihAaXBCbG9jay0xKStAdGFibGV0T2Zmc2V0XVxuICAgICAgICAgIGRvIChsb2NhbCkgPT5cbiAgICAgICAgICAgIGlwID0gVGFuZ2VyaW5lLnNldHRpbmdzLnN1Ym5ldElQKGxvY2FsKVxuICAgICAgICAgICAgcmVxID0gJC5hamF4XG4gICAgICAgICAgICAgIHVybDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybFN1Ym5ldChpcClcbiAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvbnBcIlxuICAgICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLThcIixcbiAgICAgICAgICAgICAgdGltZW91dDogMTAwMDBcbiAgICAgICAgICAgIHJlcS5jb21wbGV0ZSAoeGhyLCBlcnJvcikgPT5cbiAgICAgICAgICAgICAgQHRhYmxldHMuY2hlY2tlZCsrXG4gICAgICAgICAgICAgIGlmIHBhcnNlSW50KHhoci5zdGF0dXMpID09IDIwMFxuICAgICAgICAgICAgICAgIEB0YWJsZXRzLm9rQ291bnQrK1xuICAgICAgICAgICAgICAgIEB0YWJsZXRzLmlwcy5wdXNoIGlwXG4gICAgICAgICAgICAgIEB1cGRhdGVQdWxsKClcbiAgICAgIGVycm9yOiAtPlxuICAgICAgICBVdGlscy53b3JraW5nIGZhbHNlXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiSW50ZXJuYWwgZGF0YWJhc2UgZXJyb3JcIlxuXG4gIHVwZGF0ZVB1bGw6ID0+XG4gICAgIyBkbyBub3QgcHJvY2VzcyB1bmxlc3Mgd2UncmUgZG9uZSB3aXRoIGNoZWNraW5nIHRoaXMgYmxvY2tcbiAgICByZXR1cm4gaWYgQHRhYmxldHMuY2hlY2tlZCA8IEBpcEJsb2NrICsgQHRhYmxldE9mZnNldFxuXG4gICAgIyBnaXZlIHRoZSBjaG9pY2UgdG8ga2VlcCBsb29raW5nIGlmIG5vdCBhbGwgdGFibGV0cyBmb3VuZFxuICAgIGlmIEB0YWJsZXRPZmZzZXQgIT0gQHRvdGFsSXBzIC0gQGlwQmxvY2sgIyYmIGNvbmZpcm0oXCIje01hdGgubWF4KEB0YWJsZXRzLm9rQ291bnQtMSwgMCl9IHRhYmxldHMgZm91bmQuXFxuXFxuQ29udGludWUgc2VhcmNoaW5nP1wiKVxuICAgICAgQHRhYmxldE9mZnNldCArPSBAaXBCbG9ja1xuICAgICAgQHB1bGxEYXRhKClcbiAgICBlbHNlXG5cbiAgICAgICMgLTEgYmVjYXVzZSBvbmUgb2YgdGhlbSB3aWxsIGJlIHRoaXMgY29tcHV0ZXJcbiAgICAgIEB0YWJsZXRzLm9rQ291bnQgPSBNYXRoLm1heChAdGFibGV0cy5va0NvdW50LTEsIDApXG5cbiAgICAgIGlmIEB0YWJsZXRzLm9rQ291bnQgPT0gMFxuICAgICAgICBAdGFibGV0T2Zmc2V0ID0gMFxuICAgICAgICBVdGlscy53b3JraW5nIGZhbHNlXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiI3tAdGFibGV0cy5va0NvdW50fSB0YWJsZXRzIGZvdW5kLlwiXG4gICAgICAgIFRhbmdlcmluZS4kZGIucmVtb3ZlRG9jXG4gICAgICAgICAgXCJfaWRcIiAgOiBAcmFuZG9tRG9jLmlkXG4gICAgICAgICAgXCJfcmV2XCIgOiBAcmFuZG9tRG9jLnJldlxuICAgICAgICByZXR1cm5cblxuICAgICAgdW5sZXNzIGNvbmZpcm0oXCIje0B0YWJsZXRzLm9rQ291bnR9IHRhYmxldHMgZm91bmQuXFxuXFxuU3RhcnQgZGF0YSBwdWxsP1wiKVxuICAgICAgICBAdGFibGV0T2Zmc2V0ID0gMFxuICAgICAgICBVdGlscy53b3JraW5nIGZhbHNlXG4gICAgICAgIFRhbmdlcmluZS4kZGIucmVtb3ZlRG9jXG4gICAgICAgICAgXCJfaWRcIiAgOiBAcmFuZG9tRG9jLmlkXG4gICAgICAgICAgXCJfcmV2XCIgOiBAcmFuZG9tRG9jLnJldlxuICAgICAgICByZXR1cm5cblxuXG4gICAgICBVdGlscy5taWRBbGVydCBcIlB1bGxpbmcgZnJvbSAje0B0YWJsZXRzLm9rQ291bnR9IHRhYmxldHMuXCJcbiAgICAgIGZvciBpcCBpbiBAdGFibGV0cy5pcHNcblxuICAgICAgICBkbyAoaXApID0+XG4gICAgICAgICAgIyBzZWUgaWYgb3VyIHJhbmRvbSBkb2N1bWVudCBpcyBvbiB0aGUgc2VydmVyIHdlIGp1c3QgZm91bmRcbiAgICAgICAgICBzZWxmUmVxID0gJC5hamF4XG4gICAgICAgICAgICBcInVybFwiICAgICAgICAgOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsU3VibmV0KGlwKSArIFwiL1wiICsgQHJhbmRvbUlkRG9jXG4gICAgICAgICAgICBcImRhdGFUeXBlXCIgICAgOiBcImpzb25wXCJcbiAgICAgICAgICAgIFwidGltZW91dFwiICAgICA6IDEwMDAwXG4gICAgICAgICAgICBcImNvbnRlbnRUeXBlXCIgOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiXG5cbiAgICAgICAgICBzZWxmUmVxLnN1Y2Nlc3MgKGRhdGEsIHhociwgZXJyb3IpID0+XG4gICAgICAgICAgICAjIGlmIGZvdW5kIHNlbGYgdGhlbiBkbyBub3RoaW5nXG5cbiAgICAgICAgICBzZWxmUmVxLmNvbXBsZXRlICh4aHIsIGVycm9yKSA9PiBkbyAoeGhyKSA9PlxuICAgICAgICAgICAgcmV0dXJuIGlmIHBhcnNlSW50KHhoci5zdGF0dXMpID09IDIwMFxuICAgICAgICAgICAgIyBpZiBub3QsIHRoZW4gd2UgZm91bmQgYW5vdGhlciB0YWJsZXRcbiAgICAgICAgICAgIHZpZXdSZXEgPSAkLmFqYXhcbiAgICAgICAgICAgICAgXCJ1cmxcIiAgICAgICAgIDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybFN1Ym5ldChpcCkgKyBcIi9fZGVzaWduL3RhbmdlcmluZS9fdmlldy9ieUNvbGxlY3Rpb25cIlxuICAgICAgICAgICAgICBcImRhdGFUeXBlXCIgICAgOiBcImpzb25wXCJcbiAgICAgICAgICAgICAgXCJjb250ZW50VHlwZVwiIDogXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLThcIixcbiAgICAgICAgICAgICAgXCJkYXRhXCIgICAgICAgIDpcbiAgICAgICAgICAgICAgICBpbmNsdWRlX2RvY3MgOiBmYWxzZVxuICAgICAgICAgICAgICAgIGtleXMgOiBKU09OLnN0cmluZ2lmeShbJ3Jlc3VsdCcsICdrbGFzcycsICdzdHVkZW50JywnY3VycmljdWx1bScsICd0ZWFjaGVyJywgJ2xvZ3MnXSlcblxuICAgICAgICAgICAgdmlld1JlcS5zdWNjZXNzIChkYXRhKSA9PlxuICAgICAgICAgICAgICBkb2NMaXN0ID0gKGRhdHVtLmlkIGZvciBkYXR1bSBpbiBkYXRhLnJvd3MpXG4gICAgICAgICAgICAgICQuY291Y2gucmVwbGljYXRlKFxuICAgICAgICAgICAgICAgIFRhbmdlcmluZS5zZXR0aW5ncy51cmxTdWJuZXQoaXApLFxuICAgICAgICAgICAgICAgIFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImxvY2FsXCIpLFxuICAgICAgICAgICAgICAgICAgc3VjY2VzczogICAgICA9PlxuICAgICAgICAgICAgICAgICAgICBAdGFibGV0cy5jb21wbGV0ZSsrXG4gICAgICAgICAgICAgICAgICAgIEB0YWJsZXRzLnN1Y2Nlc3NmdWwrK1xuICAgICAgICAgICAgICAgICAgICBAdXBkYXRlUHVsbFJlc3VsdCgpXG4gICAgICAgICAgICAgICAgICBlcnJvcjogKGEsIGIpID0+XG4gICAgICAgICAgICAgICAgICAgIEB0YWJsZXRzLmNvbXBsZXRlKytcbiAgICAgICAgICAgICAgICAgICAgQHVwZGF0ZVB1bGxSZXN1bHQoKVxuICAgICAgICAgICAgICAgICxcbiAgICAgICAgICAgICAgICAgIGRvY19pZHM6IGRvY0xpc3RcbiAgICAgICAgICAgICAgKVxuXG4gIHVwZGF0ZVB1bGxSZXN1bHQ6ID0+XG4gICAgaWYgQHRhYmxldHMuY29tcGxldGUgPT0gQHRhYmxldHMub2tDb3VudFxuICAgICAgVXRpbHMud29ya2luZyBmYWxzZVxuICAgICAgVXRpbHMubWlkQWxlcnQgXCJQdWxsIGZpbmlzaGVkLjxicj4je0B0YWJsZXRzLnN1Y2Nlc3NmdWx9IG91dCBvZiAje0B0YWJsZXRzLm9rQ291bnR9IHN1Y2Nlc3NmdWwuXCIsIDUwMDBcbiAgICAgIFRhbmdlcmluZS4kZGIucmVtb3ZlRG9jXG4gICAgICAgIFwiX2lkXCIgIDogQHJhbmRvbURvYy5pZFxuICAgICAgICBcIl9yZXZcIiA6IEByYW5kb21Eb2MucmV2XG4gICAgICBAa2xhc3Nlcy5mZXRjaCBzdWNjZXNzOiA9PiBAcmVuZGVyS2xhc3NlcygpXG5cbiAgZ290b0N1cnJpY3VsYTogLT5cbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiY3VycmljdWxhXCIsIHRydWVcblxuICBzYXZlTmV3S2xhc3M6IC0+XG5cbiAgICBzY2hvb2xOYW1lID0gJC50cmltKEAkZWwuZmluZChcIiNzY2hvb2xfbmFtZVwiKS52YWwoKSlcbiAgICB5ZWFyICAgICAgID0gJC50cmltKEAkZWwuZmluZChcIiN5ZWFyXCIpLnZhbCgpKVxuICAgIGdyYWRlICAgICAgPSAkLnRyaW0oQCRlbC5maW5kKFwiI2dyYWRlXCIpLnZhbCgpKVxuICAgIHN0cmVhbSAgICAgPSAkLnRyaW0oQCRlbC5maW5kKFwiI3N0cmVhbVwiKS52YWwoKSlcbiAgICBjdXJyaWN1bHVtID0gQCRlbC5maW5kKFwiI2N1cnJpY3VsdW0gb3B0aW9uOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLWlkXCIpXG5cbiAgICBlcnJvcnMgPSBbXVxuICAgIGVycm9ycy5wdXNoIFwiIC0gTm8gc2Nob29sIG5hbWUuXCIgICAgICAgICBpZiBzY2hvb2xOYW1lID09IFwiXCJcbiAgICBlcnJvcnMucHVzaCBcIiAtIE5vIHllYXIuXCIgICAgICAgICAgICAgICAgaWYgeWVhciAgICAgICA9PSBcIlwiXG4gICAgZXJyb3JzLnB1c2ggXCIgLSBObyBncmFkZS5cIiAgICAgICAgICAgICAgIGlmIGdyYWRlICAgICAgPT0gXCJcIlxuICAgIGVycm9ycy5wdXNoIFwiIC0gTm8gc3RyZWFtLlwiICAgICAgICAgICAgICBpZiBzdHJlYW0gICAgID09IFwiXCJcbiAgICBlcnJvcnMucHVzaCBcIiAtIE5vIGN1cnJpY3VsdW0gc2VsZWN0ZWQuXCIgaWYgY3VycmljdWx1bSA9PSBcIl9ub25lXCJcblxuICAgIGZvciBrbGFzcyBpbiBAa2xhc3Nlcy5tb2RlbHNcbiAgICAgIGlmIGtsYXNzLmdldChcInllYXJcIikgICA9PSB5ZWFyICYmXG4gICAgICAgICBrbGFzcy5nZXQoXCJncmFkZVwiKSAgPT0gZ3JhZGUgJiZcbiAgICAgICAgIGtsYXNzLmdldChcInN0cmVhbVwiKSA9PSBzdHJlYW1cbiAgICAgICAgZXJyb3JzLnB1c2ggXCIgLSBEdXBsaWNhdGUgeWVhciwgZ3JhZGUsIHN0cmVhbS5cIlxuXG4gICAgaWYgZXJyb3JzLmxlbmd0aCA9PSAwXG4gICAgICB0ZWFjaGVySWQgPSBpZiBUYW5nZXJpbmUudXNlci5oYXMoXCJ0ZWFjaGVySWRcIilcbiAgICAgICAgVGFuZ2VyaW5lLnVzZXIuZ2V0KFwidGVhY2hlcklkXCIpXG4gICAgICBlbHNlXG4gICAgICAgIFwiYWRtaW5cIlxuICAgICAga2xhc3MgPSBuZXcgS2xhc3NcbiAgICAgIGtsYXNzLnNhdmVcbiAgICAgICAgdGVhY2hlcklkICAgIDogdGVhY2hlcklkXG4gICAgICAgIHNjaG9vbE5hbWUgICA6IHNjaG9vbE5hbWVcbiAgICAgICAgeWVhciAgICAgICAgIDogeWVhclxuICAgICAgICBncmFkZSAgICAgICAgOiBncmFkZVxuICAgICAgICBzdHJlYW0gICAgICAgOiBzdHJlYW1cbiAgICAgICAgY3VycmljdWx1bUlkIDogQCRlbC5maW5kKFwiI2N1cnJpY3VsdW0gb3B0aW9uOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLWlkXCIpXG4gICAgICAgIHN0YXJ0RGF0ZSAgICA6IChuZXcgRGF0ZSgpKS5nZXRUaW1lKClcbiAgICAgICxcbiAgICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgICBAa2xhc3Nlcy5hZGQga2xhc3NcbiAgICBlbHNlXG4gICAgICBhbGVydCAoXCJQbGVhc2UgY29ycmVjdCB0aGUgZm9sbG93aW5nIGVycm9yczpcXG5cXG4je2Vycm9ycy5qb2luKCdcXG4nKX1cIilcblxuICBnb3RvS2xhc3M6IChldmVudCkgLT5cbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiY2xhc3MvZWRpdC9cIiskKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtaWRcIilcblxuICB0b2dnbGVBZGRGb3JtOiAtPlxuICAgIEAkZWwuZmluZChcIiNhZGRfZm9ybSwgLmFkZFwiKS50b2dnbGUoKVxuICAgIGlmIG5vdCBUYW5nZXJpbmUudXNlci5pc0FkbWluKClcbiAgICAgIHNjaG9vbE5hbWUgPSBAdGVhY2hlcnMuZ2V0KFRhbmdlcmluZS51c2VyLmdldChcInRlYWNoZXJJZFwiKSkuZ2V0KFwic2Nob29sXCIpXG4gICAgICBAJGVsLmZpbmQoXCIjc2Nob29sX25hbWVcIikudmFsKHNjaG9vbE5hbWUpXG4gICAgICBAJGVsLmZpbmQoXCIjeWVhclwiKS5mb2N1cygpXG4gICAgZWxzZVxuICAgICAgQCRlbC5maW5kKFwiI3NjaG9vbF9uYW1lXCIpLmZvY3VzKClcbiAgICBpZiBAJGVsLmZpbmQoXCIjYWRkX2Zvcm1cIikuaXMoXCI6dmlzaWJsZVwiKSB0aGVuIEAkZWwuZmluZChcIiNhZGRfZm9ybVwiKS5zY3JvbGxUbygpXG5cbiAgcmVuZGVyS2xhc3NlczogLT5cbiAgICBAY2xvc2VWaWV3cygpXG5cbiAgICAkdWwgPSAkKFwiPHVsPlwiKS5hZGRDbGFzcyhcImtsYXNzX2xpc3RcIilcbiAgICBmb3Iga2xhc3MgaW4gQGtsYXNzZXMubW9kZWxzXG4gICAgICB2aWV3ID0gbmV3IEtsYXNzTGlzdEVsZW1lbnRWaWV3XG4gICAgICAgIGtsYXNzICAgICAgOiBrbGFzc1xuICAgICAgICBjdXJyaWN1bGEgIDogQGN1cnJpY3VsYVxuICAgICAgdmlldy5vbiBcInJlbmRlcmVkXCIsIEBvblN1YnZpZXdSZW5kZXJlZFxuICAgICAgdmlldy5yZW5kZXIoKVxuICAgICAgQHZpZXdzLnB1c2ggdmlld1xuICAgICAgJHVsLmFwcGVuZCB2aWV3LmVsXG4gICAgQCRlbC5maW5kKFwiI2tsYXNzX2xpc3Rfd3JhcHBlclwiKS5lbXB0eSgpXG4gICAgQCRlbC5maW5kKFwiI2tsYXNzX2xpc3Rfd3JhcHBlclwiKS5hcHBlbmQgJHVsXG5cbiAgb25TdWJ2aWV3UmVuZGVyZWQ6ID0+XG4gICAgQHRyaWdnZXIgXCJzdWJSZW5kZXJlZFwiXG5cbiAgcmVuZGVyOiA9PlxuXG4gICAgY3VycmljdWxhT3B0aW9uTGlzdCA9IFwiPG9wdGlvbiBkYXRhLWlkPSdfbm9uZScgZGlzYWJsZWQ9J2Rpc2FibGVkJyBzZWxlY3RlZD0nc2VsZWN0ZWQnPiN7dCgnc2VsZWN0IGEgY3VycmljdWx1bScpfTwvb3B0aW9uPlwiXG4gICAgZm9yIGN1cnJpY3VsYSBpbiBAY3VycmljdWxhLm1vZGVsc1xuICAgICAgY3VycmljdWxhT3B0aW9uTGlzdCArPSBcIjxvcHRpb24gZGF0YS1pZD0nI3tjdXJyaWN1bGEuaWR9Jz4je2N1cnJpY3VsYS5nZXQgJ25hbWUnfTwvb3B0aW9uPlwiXG5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgICN7YWRtaW5QYW5lbCB8fCBcIlwifVxuICAgICAgPGgxPiN7dCgnY2xhc3NlcycpfTwvaDE+XG4gICAgICA8ZGl2IGlkPSdrbGFzc19saXN0X3dyYXBwZXInPjwvZGl2PlxuXG4gICAgICA8YnV0dG9uIGNsYXNzPSdrbGFzc19hZGQgY29tbWFuZCc+I3t0KCdhZGQnKX08L2J1dHRvbj5cbiAgICAgIDxkaXYgaWQ9J2FkZF9mb3JtJyBjbGFzcz0nY29uZmlybWF0aW9uJz5cbiAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J3NjaG9vbF9uYW1lJz5TY2hvb2wgbmFtZTwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgaWQ9J3NjaG9vbF9uYW1lJz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSd5ZWFyJz5TY2hvb2wgeWVhcjwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgaWQ9J3llYXInPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J2dyYWRlJz4je3QoJ2dyYWRlJyl9PC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCBpZD0nZ3JhZGUnPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J3N0cmVhbSc+I3t0KCdzdHJlYW0nKX08L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IGlkPSdzdHJlYW0nPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J2N1cnJpY3VsdW0nPiN7dCgnY3VycmljdWx1bScpfTwvbGFiZWw+PGJyPlxuICAgICAgICAgICAgPHNlbGVjdCBpZD0nY3VycmljdWx1bSc+I3tjdXJyaWN1bGFPcHRpb25MaXN0fTwvc2VsZWN0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQga2xhc3Nfc2F2ZSc+I3t0KCdzYXZlJyl9PC9idXR0b24+PGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBrbGFzc19jYW5jZWwnPiN7dCgnY2FuY2VsJyl9PC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICAje2N1cnJpY3VsYUJ1dHRvbiB8fCAnJ31cbiAgICBcIlxuXG4gICAgQHVwZGF0ZVVwbG9hZGVyKCkgaWYgVGFuZ2VyaW5lLnVzZXIuaXNBZG1pbigpXG5cbiAgICBAcmVuZGVyS2xhc3NlcygpXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICBjbG9zZVZpZXdzOiAtPlxuICAgIGZvciB2aWV3IGluIEB2aWV3cz9cbiAgICAgIHZpZXcuY2xvc2UoKVxuICAgIEB2aWV3cyA9IFtdXG5cbiAgb25DbG9zZTogLT5cbiAgICBAY2xvc2VWaWV3cygpIiwidmFyIEtsYXNzZXNWaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbktsYXNzZXNWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEtsYXNzZXNWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBLbGFzc2VzVmlldygpIHtcbiAgICB0aGlzLnJlbmRlciA9IGJpbmQodGhpcy5yZW5kZXIsIHRoaXMpO1xuICAgIHRoaXMub25TdWJ2aWV3UmVuZGVyZWQgPSBiaW5kKHRoaXMub25TdWJ2aWV3UmVuZGVyZWQsIHRoaXMpO1xuICAgIHRoaXMudXBkYXRlUHVsbFJlc3VsdCA9IGJpbmQodGhpcy51cGRhdGVQdWxsUmVzdWx0LCB0aGlzKTtcbiAgICB0aGlzLnVwZGF0ZVB1bGwgPSBiaW5kKHRoaXMudXBkYXRlUHVsbCwgdGhpcyk7XG4gICAgdGhpcy51cGRhdGVVcGxvYWRlciA9IGJpbmQodGhpcy51cGRhdGVVcGxvYWRlciwgdGhpcyk7XG4gICAgcmV0dXJuIEtsYXNzZXNWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgS2xhc3Nlc1ZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiS2xhc3Nlc1ZpZXdcIjtcblxuICBLbGFzc2VzVmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdjbGljayAua2xhc3NfYWRkJzogJ3RvZ2dsZUFkZEZvcm0nLFxuICAgICdjbGljayAua2xhc3NfY2FuY2VsJzogJ3RvZ2dsZUFkZEZvcm0nLFxuICAgICdjbGljayAua2xhc3Nfc2F2ZSc6ICdzYXZlTmV3S2xhc3MnLFxuICAgICdjbGljayAua2xhc3NfY3VycmljdWxhJzogJ2dvdG9DdXJyaWN1bGEnLFxuICAgICdjbGljayAuZ290b19jbGFzcyc6ICdnb3RvS2xhc3MnLFxuICAgICdjbGljayAucHVsbF9kYXRhJzogJ3B1bGxEYXRhJyxcbiAgICAnY2xpY2sgLnZlcmlmeSc6ICdnaG9zdExvZ2luJyxcbiAgICAnY2xpY2sgLnVwbG9hZF9kYXRhJzogJ3VwbG9hZERhdGEnXG4gIH07XG5cbiAgS2xhc3Nlc1ZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIHZlclJlcTtcbiAgICB0aGlzLmlwQmxvY2sgPSAzMjtcbiAgICB0aGlzLnRvdGFsSXBzID0gMjU2O1xuICAgIHRoaXMudGFibGV0T2Zmc2V0ID0gMDtcbiAgICB0aGlzLnZpZXdzID0gW107XG4gICAgdGhpcy5rbGFzc2VzID0gb3B0aW9ucy5rbGFzc2VzO1xuICAgIHRoaXMuY3VycmljdWxhID0gb3B0aW9ucy5jdXJyaWN1bGE7XG4gICAgdGhpcy50ZWFjaGVycyA9IG9wdGlvbnMudGVhY2hlcnM7XG4gICAgdGhpcy5rbGFzc2VzLm9uKFwiYWRkIHJlbW92ZSBjaGFuZ2VcIiwgdGhpcy5yZW5kZXIpO1xuICAgIGlmIChUYW5nZXJpbmUudXNlci5pc0FkbWluKCkpIHtcbiAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZVVwbG9hZGVyKGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLCAyMCAqIDEwMDApO1xuICAgICAgcmV0dXJuIHZlclJlcSA9ICQuYWpheCh7XG4gICAgICAgIHVybDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybFZpZXcoXCJncm91cFwiLCBcImJ5REtleVwiKSxcbiAgICAgICAgZGF0YVR5cGU6IFwianNvbnBcIixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGtleXM6IFtcInRlc3R0ZXN0XCJdXG4gICAgICAgIH0sXG4gICAgICAgIHRpbWVvdXQ6IDUwMDAsXG4gICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy50aW1lcik7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlVXBsb2FkZXIodHJ1ZSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBLbGFzc2VzVmlldy5wcm90b3R5cGUuZ2hvc3RMb2dpbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci5naG9zdExvZ2luKFRhbmdlcmluZS5zZXR0aW5ncy51cFVzZXIsIFRhbmdlcmluZS5zZXR0aW5ncy51cFBhc3MpO1xuICB9O1xuXG4gIEtsYXNzZXNWaWV3LnByb3RvdHlwZS51cGxvYWREYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICQuYWpheCh7XG4gICAgICBcInVybFwiOiBcIi9cIiArIFRhbmdlcmluZS5kYl9uYW1lICsgXCIvX2Rlc2lnbi90YW5nZXJpbmUvX3ZpZXcvYnlDb2xsZWN0aW9uP2luY2x1ZGVfZG9jcz1mYWxzZVwiLFxuICAgICAgXCJ0eXBlXCI6IFwiUE9TVFwiLFxuICAgICAgXCJkYXRhVHlwZVwiOiBcImpzb25cIixcbiAgICAgIFwiY29udGVudFR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLThcIixcbiAgICAgIFwiZGF0YVwiOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGluY2x1ZGVfZG9jczogZmFsc2UsXG4gICAgICAgIGtleXM6IFsncmVzdWx0JywgJ2tsYXNzJywgJ3N0dWRlbnQnLCAndGVhY2hlcicsICdsb2dzJywgJ3VzZXInXVxuICAgICAgfSksXG4gICAgICBcInN1Y2Nlc3NcIjogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgdmFyIGRvY0xpc3Q7XG4gICAgICAgICAgZG9jTGlzdCA9IF8ucGx1Y2soZGF0YS5yb3dzLCBcImlkXCIpO1xuICAgICAgICAgIHJldHVybiAkLmNvdWNoLnJlcGxpY2F0ZShUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJsb2NhbFwiKSwgVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKFwiZ3JvdXBcIiksIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQoXCJTeW5jIHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFV0aWxzLm1pZEFsZXJ0KFwiU3luYyBlcnJvcjxicj5cIiArIGEgKyBcIiBcIiArIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRvY19pZHM6IGRvY0xpc3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgS2xhc3Nlc1ZpZXcucHJvdG90eXBlLnVwZGF0ZVVwbG9hZGVyID0gZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgdmFyIGh0bWw7XG4gICAgaHRtbCA9IHN0YXR1cyA9PT0gdHJ1ZSA/IFwiPGJ1dHRvbiBjbGFzcz0ndXBsb2FkX2RhdGEgY29tbWFuZCc+VXBsb2FkPC9idXR0b24+XCIgOiBzdGF0dXMgPT09IGZhbHNlID8gXCI8ZGl2IGNsYXNzPSdtZW51X2JveCc+PHNtYWxsPk5vIGNvbm5lY3Rpb248L3NtYWxsPjxicj48YnV0dG9uIGNsYXNzPSdjb21tYW5kIHZlcmlmeSc+VmVyaWZ5IGNvbm5lY3Rpb248L2J1dHRvbj48L2Rpdj5cIiA6IFwiPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCcgZGlzYWJsZWQ9J2Rpc2FibGVkJz5WZXJpZnlpbmcgY29ubmVjdGlvbi4uLjwvYnV0dG9uPlwiO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLnVwbG9hZGVyXCIpLmh0bWwoaHRtbCk7XG4gIH07XG5cbiAgS2xhc3Nlc1ZpZXcucHJvdG90eXBlLnB1bGxEYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudGFibGV0T2Zmc2V0ID09PSAwKSB7XG4gICAgICB0aGlzLnRhYmxldHMgPSB7XG4gICAgICAgIGNoZWNrZWQ6IDAsXG4gICAgICAgIGNvbXBsZXRlOiAwLFxuICAgICAgICBzdWNjZXNzZnVsOiAwLFxuICAgICAgICBva0NvdW50OiAwLFxuICAgICAgICBpcHM6IFtdLFxuICAgICAgICByZXN1bHQ6IDBcbiAgICAgIH07XG4gICAgICBVdGlscy5taWRBbGVydChcIlBsZWFzZSB3YWl0LCBkZXRlY3RpbmcgdGFibGV0cy5cIik7XG4gICAgfVxuICAgIFV0aWxzLndvcmtpbmcodHJ1ZSk7XG4gICAgdGhpcy5yYW5kb21JZERvYyA9IGhleF9zaGExKFwiXCIgKyBNYXRoLnJhbmRvbSgpKTtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLiRkYi5zYXZlRG9jKHtcbiAgICAgIFwiX2lkXCI6IHRoaXMucmFuZG9tSWREb2NcbiAgICB9LCB7XG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRvYykge1xuICAgICAgICAgIHZhciBpLCBsb2NhbCwgcmVmLCByZWYxLCByZXN1bHRzO1xuICAgICAgICAgIF90aGlzLnJhbmRvbURvYyA9IGRvYztcbiAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgZm9yIChsb2NhbCA9IGkgPSByZWYgPSBfdGhpcy50YWJsZXRPZmZzZXQsIHJlZjEgPSAoX3RoaXMuaXBCbG9jayAtIDEpICsgX3RoaXMudGFibGV0T2Zmc2V0OyByZWYgPD0gcmVmMSA/IGkgPD0gcmVmMSA6IGkgPj0gcmVmMTsgbG9jYWwgPSByZWYgPD0gcmVmMSA/ICsraSA6IC0taSkge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKChmdW5jdGlvbihsb2NhbCkge1xuICAgICAgICAgICAgICB2YXIgaXAsIHJlcTtcbiAgICAgICAgICAgICAgaXAgPSBUYW5nZXJpbmUuc2V0dGluZ3Muc3VibmV0SVAobG9jYWwpO1xuICAgICAgICAgICAgICByZXEgPSAkLmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogVGFuZ2VyaW5lLnNldHRpbmdzLnVybFN1Ym5ldChpcCksXG4gICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvbnBcIixcbiAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLThcIixcbiAgICAgICAgICAgICAgICB0aW1lb3V0OiAxMDAwMFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlcS5jb21wbGV0ZShmdW5jdGlvbih4aHIsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudGFibGV0cy5jaGVja2VkKys7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnNlSW50KHhoci5zdGF0dXMpID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzLnRhYmxldHMub2tDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgX3RoaXMudGFibGV0cy5pcHMucHVzaChpcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVQdWxsKCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkobG9jYWwpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSxcbiAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIkludGVybmFsIGRhdGFiYXNlIGVycm9yXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIEtsYXNzZXNWaWV3LnByb3RvdHlwZS51cGRhdGVQdWxsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGlwLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICBpZiAodGhpcy50YWJsZXRzLmNoZWNrZWQgPCB0aGlzLmlwQmxvY2sgKyB0aGlzLnRhYmxldE9mZnNldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy50YWJsZXRPZmZzZXQgIT09IHRoaXMudG90YWxJcHMgLSB0aGlzLmlwQmxvY2spIHtcbiAgICAgIHRoaXMudGFibGV0T2Zmc2V0ICs9IHRoaXMuaXBCbG9jaztcbiAgICAgIHJldHVybiB0aGlzLnB1bGxEYXRhKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGFibGV0cy5va0NvdW50ID0gTWF0aC5tYXgodGhpcy50YWJsZXRzLm9rQ291bnQgLSAxLCAwKTtcbiAgICAgIGlmICh0aGlzLnRhYmxldHMub2tDb3VudCA9PT0gMCkge1xuICAgICAgICB0aGlzLnRhYmxldE9mZnNldCA9IDA7XG4gICAgICAgIFV0aWxzLndvcmtpbmcoZmFsc2UpO1xuICAgICAgICBVdGlscy5taWRBbGVydCh0aGlzLnRhYmxldHMub2tDb3VudCArIFwiIHRhYmxldHMgZm91bmQuXCIpO1xuICAgICAgICBUYW5nZXJpbmUuJGRiLnJlbW92ZURvYyh7XG4gICAgICAgICAgXCJfaWRcIjogdGhpcy5yYW5kb21Eb2MuaWQsXG4gICAgICAgICAgXCJfcmV2XCI6IHRoaXMucmFuZG9tRG9jLnJldlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFjb25maXJtKHRoaXMudGFibGV0cy5va0NvdW50ICsgXCIgdGFibGV0cyBmb3VuZC5cXG5cXG5TdGFydCBkYXRhIHB1bGw/XCIpKSB7XG4gICAgICAgIHRoaXMudGFibGV0T2Zmc2V0ID0gMDtcbiAgICAgICAgVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICAgIFRhbmdlcmluZS4kZGIucmVtb3ZlRG9jKHtcbiAgICAgICAgICBcIl9pZFwiOiB0aGlzLnJhbmRvbURvYy5pZCxcbiAgICAgICAgICBcIl9yZXZcIjogdGhpcy5yYW5kb21Eb2MucmV2XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBVdGlscy5taWRBbGVydChcIlB1bGxpbmcgZnJvbSBcIiArIHRoaXMudGFibGV0cy5va0NvdW50ICsgXCIgdGFibGV0cy5cIik7XG4gICAgICByZWYgPSB0aGlzLnRhYmxldHMuaXBzO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlwID0gcmVmW2ldO1xuICAgICAgICByZXN1bHRzLnB1c2goKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGlwKSB7XG4gICAgICAgICAgICB2YXIgc2VsZlJlcTtcbiAgICAgICAgICAgIHNlbGZSZXEgPSAkLmFqYXgoe1xuICAgICAgICAgICAgICBcInVybFwiOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsU3VibmV0KGlwKSArIFwiL1wiICsgX3RoaXMucmFuZG9tSWREb2MsXG4gICAgICAgICAgICAgIFwiZGF0YVR5cGVcIjogXCJqc29ucFwiLFxuICAgICAgICAgICAgICBcInRpbWVvdXRcIjogMTAwMDAsXG4gICAgICAgICAgICAgIFwiY29udGVudFR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLThcIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWxmUmVxLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgeGhyLCBlcnJvcikge30pO1xuICAgICAgICAgICAgcmV0dXJuIHNlbGZSZXEuY29tcGxldGUoZnVuY3Rpb24oeGhyLCBlcnJvcikge1xuICAgICAgICAgICAgICByZXR1cm4gKGZ1bmN0aW9uKHhocikge1xuICAgICAgICAgICAgICAgIHZhciB2aWV3UmVxO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludCh4aHIuc3RhdHVzKSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZpZXdSZXEgPSAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgXCJ1cmxcIjogVGFuZ2VyaW5lLnNldHRpbmdzLnVybFN1Ym5ldChpcCkgKyBcIi9fZGVzaWduL3RhbmdlcmluZS9fdmlldy9ieUNvbGxlY3Rpb25cIixcbiAgICAgICAgICAgICAgICAgIFwiZGF0YVR5cGVcIjogXCJqc29ucFwiLFxuICAgICAgICAgICAgICAgICAgXCJjb250ZW50VHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiLFxuICAgICAgICAgICAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZV9kb2NzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAga2V5czogSlNPTi5zdHJpbmdpZnkoWydyZXN1bHQnLCAna2xhc3MnLCAnc3R1ZGVudCcsICdjdXJyaWN1bHVtJywgJ3RlYWNoZXInLCAnbG9ncyddKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB2aWV3UmVxLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGRhdHVtLCBkb2NMaXN0O1xuICAgICAgICAgICAgICAgICAgZG9jTGlzdCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGosIGxlbjEsIHJlZjEsIHJlc3VsdHMxO1xuICAgICAgICAgICAgICAgICAgICByZWYxID0gZGF0YS5yb3dzO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzMSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICBkYXR1bSA9IHJlZjFbal07XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0czEucHVzaChkYXR1bS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMxO1xuICAgICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAkLmNvdWNoLnJlcGxpY2F0ZShUYW5nZXJpbmUuc2V0dGluZ3MudXJsU3VibmV0KGlwKSwgVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKFwibG9jYWxcIiksIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgX3RoaXMudGFibGV0cy5jb21wbGV0ZSsrO1xuICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnRhYmxldHMuc3VjY2Vzc2Z1bCsrO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVQdWxsUmVzdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgX3RoaXMudGFibGV0cy5jb21wbGV0ZSsrO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVQdWxsUmVzdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jX2lkczogZG9jTGlzdFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pKHhocik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKShpcCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICB9O1xuXG4gIEtsYXNzZXNWaWV3LnByb3RvdHlwZS51cGRhdGVQdWxsUmVzdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudGFibGV0cy5jb21wbGV0ZSA9PT0gdGhpcy50YWJsZXRzLm9rQ291bnQpIHtcbiAgICAgIFV0aWxzLndvcmtpbmcoZmFsc2UpO1xuICAgICAgVXRpbHMubWlkQWxlcnQoXCJQdWxsIGZpbmlzaGVkLjxicj5cIiArIHRoaXMudGFibGV0cy5zdWNjZXNzZnVsICsgXCIgb3V0IG9mIFwiICsgdGhpcy50YWJsZXRzLm9rQ291bnQgKyBcIiBzdWNjZXNzZnVsLlwiLCA1MDAwKTtcbiAgICAgIFRhbmdlcmluZS4kZGIucmVtb3ZlRG9jKHtcbiAgICAgICAgXCJfaWRcIjogdGhpcy5yYW5kb21Eb2MuaWQsXG4gICAgICAgIFwiX3JldlwiOiB0aGlzLnJhbmRvbURvYy5yZXZcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXMua2xhc3Nlcy5mZXRjaCh7XG4gICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJLbGFzc2VzKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBLbGFzc2VzVmlldy5wcm90b3R5cGUuZ290b0N1cnJpY3VsYSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwiY3VycmljdWxhXCIsIHRydWUpO1xuICB9O1xuXG4gIEtsYXNzZXNWaWV3LnByb3RvdHlwZS5zYXZlTmV3S2xhc3MgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VycmljdWx1bSwgZXJyb3JzLCBncmFkZSwgaSwga2xhc3MsIGxlbiwgcmVmLCBzY2hvb2xOYW1lLCBzdHJlYW0sIHRlYWNoZXJJZCwgeWVhcjtcbiAgICBzY2hvb2xOYW1lID0gJC50cmltKHRoaXMuJGVsLmZpbmQoXCIjc2Nob29sX25hbWVcIikudmFsKCkpO1xuICAgIHllYXIgPSAkLnRyaW0odGhpcy4kZWwuZmluZChcIiN5ZWFyXCIpLnZhbCgpKTtcbiAgICBncmFkZSA9ICQudHJpbSh0aGlzLiRlbC5maW5kKFwiI2dyYWRlXCIpLnZhbCgpKTtcbiAgICBzdHJlYW0gPSAkLnRyaW0odGhpcy4kZWwuZmluZChcIiNzdHJlYW1cIikudmFsKCkpO1xuICAgIGN1cnJpY3VsdW0gPSB0aGlzLiRlbC5maW5kKFwiI2N1cnJpY3VsdW0gb3B0aW9uOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLWlkXCIpO1xuICAgIGVycm9ycyA9IFtdO1xuICAgIGlmIChzY2hvb2xOYW1lID09PSBcIlwiKSB7XG4gICAgICBlcnJvcnMucHVzaChcIiAtIE5vIHNjaG9vbCBuYW1lLlwiKTtcbiAgICB9XG4gICAgaWYgKHllYXIgPT09IFwiXCIpIHtcbiAgICAgIGVycm9ycy5wdXNoKFwiIC0gTm8geWVhci5cIik7XG4gICAgfVxuICAgIGlmIChncmFkZSA9PT0gXCJcIikge1xuICAgICAgZXJyb3JzLnB1c2goXCIgLSBObyBncmFkZS5cIik7XG4gICAgfVxuICAgIGlmIChzdHJlYW0gPT09IFwiXCIpIHtcbiAgICAgIGVycm9ycy5wdXNoKFwiIC0gTm8gc3RyZWFtLlwiKTtcbiAgICB9XG4gICAgaWYgKGN1cnJpY3VsdW0gPT09IFwiX25vbmVcIikge1xuICAgICAgZXJyb3JzLnB1c2goXCIgLSBObyBjdXJyaWN1bHVtIHNlbGVjdGVkLlwiKTtcbiAgICB9XG4gICAgcmVmID0gdGhpcy5rbGFzc2VzLm1vZGVscztcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGtsYXNzID0gcmVmW2ldO1xuICAgICAgaWYgKGtsYXNzLmdldChcInllYXJcIikgPT09IHllYXIgJiYga2xhc3MuZ2V0KFwiZ3JhZGVcIikgPT09IGdyYWRlICYmIGtsYXNzLmdldChcInN0cmVhbVwiKSA9PT0gc3RyZWFtKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKFwiIC0gRHVwbGljYXRlIHllYXIsIGdyYWRlLCBzdHJlYW0uXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGVhY2hlcklkID0gVGFuZ2VyaW5lLnVzZXIuaGFzKFwidGVhY2hlcklkXCIpID8gVGFuZ2VyaW5lLnVzZXIuZ2V0KFwidGVhY2hlcklkXCIpIDogXCJhZG1pblwiO1xuICAgICAga2xhc3MgPSBuZXcgS2xhc3M7XG4gICAgICByZXR1cm4ga2xhc3Muc2F2ZSh7XG4gICAgICAgIHRlYWNoZXJJZDogdGVhY2hlcklkLFxuICAgICAgICBzY2hvb2xOYW1lOiBzY2hvb2xOYW1lLFxuICAgICAgICB5ZWFyOiB5ZWFyLFxuICAgICAgICBncmFkZTogZ3JhZGUsXG4gICAgICAgIHN0cmVhbTogc3RyZWFtLFxuICAgICAgICBjdXJyaWN1bHVtSWQ6IHRoaXMuJGVsLmZpbmQoXCIjY3VycmljdWx1bSBvcHRpb246c2VsZWN0ZWRcIikuYXR0cihcImRhdGEtaWRcIiksXG4gICAgICAgIHN0YXJ0RGF0ZTogKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuICAgICAgfSwge1xuICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMua2xhc3Nlcy5hZGQoa2xhc3MpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFsZXJ0KFwiUGxlYXNlIGNvcnJlY3QgdGhlIGZvbGxvd2luZyBlcnJvcnM6XFxuXFxuXCIgKyAoZXJyb3JzLmpvaW4oJ1xcbicpKSk7XG4gICAgfVxuICB9O1xuXG4gIEtsYXNzZXNWaWV3LnByb3RvdHlwZS5nb3RvS2xhc3MgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwiY2xhc3MvZWRpdC9cIiArICQoZXZlbnQudGFyZ2V0KS5hdHRyKFwiZGF0YS1pZFwiKSk7XG4gIH07XG5cbiAgS2xhc3Nlc1ZpZXcucHJvdG90eXBlLnRvZ2dsZUFkZEZvcm0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2Nob29sTmFtZTtcbiAgICB0aGlzLiRlbC5maW5kKFwiI2FkZF9mb3JtLCAuYWRkXCIpLnRvZ2dsZSgpO1xuICAgIGlmICghVGFuZ2VyaW5lLnVzZXIuaXNBZG1pbigpKSB7XG4gICAgICBzY2hvb2xOYW1lID0gdGhpcy50ZWFjaGVycy5nZXQoVGFuZ2VyaW5lLnVzZXIuZ2V0KFwidGVhY2hlcklkXCIpKS5nZXQoXCJzY2hvb2xcIik7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiI3NjaG9vbF9uYW1lXCIpLnZhbChzY2hvb2xOYW1lKTtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIjeWVhclwiKS5mb2N1cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiI3NjaG9vbF9uYW1lXCIpLmZvY3VzKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLiRlbC5maW5kKFwiI2FkZF9mb3JtXCIpLmlzKFwiOnZpc2libGVcIikpIHtcbiAgICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiI2FkZF9mb3JtXCIpLnNjcm9sbFRvKCk7XG4gICAgfVxuICB9O1xuXG4gIEtsYXNzZXNWaWV3LnByb3RvdHlwZS5yZW5kZXJLbGFzc2VzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyICR1bCwgaSwga2xhc3MsIGxlbiwgcmVmLCB2aWV3O1xuICAgIHRoaXMuY2xvc2VWaWV3cygpO1xuICAgICR1bCA9ICQoXCI8dWw+XCIpLmFkZENsYXNzKFwia2xhc3NfbGlzdFwiKTtcbiAgICByZWYgPSB0aGlzLmtsYXNzZXMubW9kZWxzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAga2xhc3MgPSByZWZbaV07XG4gICAgICB2aWV3ID0gbmV3IEtsYXNzTGlzdEVsZW1lbnRWaWV3KHtcbiAgICAgICAga2xhc3M6IGtsYXNzLFxuICAgICAgICBjdXJyaWN1bGE6IHRoaXMuY3VycmljdWxhXG4gICAgICB9KTtcbiAgICAgIHZpZXcub24oXCJyZW5kZXJlZFwiLCB0aGlzLm9uU3Vidmlld1JlbmRlcmVkKTtcbiAgICAgIHZpZXcucmVuZGVyKCk7XG4gICAgICB0aGlzLnZpZXdzLnB1c2godmlldyk7XG4gICAgICAkdWwuYXBwZW5kKHZpZXcuZWwpO1xuICAgIH1cbiAgICB0aGlzLiRlbC5maW5kKFwiI2tsYXNzX2xpc3Rfd3JhcHBlclwiKS5lbXB0eSgpO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiI2tsYXNzX2xpc3Rfd3JhcHBlclwiKS5hcHBlbmQoJHVsKTtcbiAgfTtcblxuICBLbGFzc2VzVmlldy5wcm90b3R5cGUub25TdWJ2aWV3UmVuZGVyZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwic3ViUmVuZGVyZWRcIik7XG4gIH07XG5cbiAgS2xhc3Nlc1ZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjdXJyaWN1bGEsIGN1cnJpY3VsYU9wdGlvbkxpc3QsIGksIGxlbiwgcmVmO1xuICAgIGN1cnJpY3VsYU9wdGlvbkxpc3QgPSBcIjxvcHRpb24gZGF0YS1pZD0nX25vbmUnIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz5cIiArICh0KCdzZWxlY3QgYSBjdXJyaWN1bHVtJykpICsgXCI8L29wdGlvbj5cIjtcbiAgICByZWYgPSB0aGlzLmN1cnJpY3VsYS5tb2RlbHM7XG4gICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjdXJyaWN1bGEgPSByZWZbaV07XG4gICAgICBjdXJyaWN1bGFPcHRpb25MaXN0ICs9IFwiPG9wdGlvbiBkYXRhLWlkPSdcIiArIGN1cnJpY3VsYS5pZCArIFwiJz5cIiArIChjdXJyaWN1bGEuZ2V0KCduYW1lJykpICsgXCI8L29wdGlvbj5cIjtcbiAgICB9XG4gICAgdGhpcy4kZWwuaHRtbCgoYWRtaW5QYW5lbCB8fCBcIlwiKSArIFwiIDxoMT5cIiArICh0KCdjbGFzc2VzJykpICsgXCI8L2gxPiA8ZGl2IGlkPSdrbGFzc19saXN0X3dyYXBwZXInPjwvZGl2PiA8YnV0dG9uIGNsYXNzPSdrbGFzc19hZGQgY29tbWFuZCc+XCIgKyAodCgnYWRkJykpICsgXCI8L2J1dHRvbj4gPGRpdiBpZD0nYWRkX2Zvcm0nIGNsYXNzPSdjb25maXJtYXRpb24nPiA8ZGl2IGNsYXNzPSdtZW51X2JveCc+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nc2Nob29sX25hbWUnPlNjaG9vbCBuYW1lPC9sYWJlbD4gPGlucHV0IGlkPSdzY2hvb2xfbmFtZSc+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3llYXInPlNjaG9vbCB5ZWFyPC9sYWJlbD4gPGlucHV0IGlkPSd5ZWFyJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nZ3JhZGUnPlwiICsgKHQoJ2dyYWRlJykpICsgXCI8L2xhYmVsPiA8aW5wdXQgaWQ9J2dyYWRlJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nc3RyZWFtJz5cIiArICh0KCdzdHJlYW0nKSkgKyBcIjwvbGFiZWw+IDxpbnB1dCBpZD0nc3RyZWFtJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nY3VycmljdWx1bSc+XCIgKyAodCgnY3VycmljdWx1bScpKSArIFwiPC9sYWJlbD48YnI+IDxzZWxlY3QgaWQ9J2N1cnJpY3VsdW0nPlwiICsgY3VycmljdWxhT3B0aW9uTGlzdCArIFwiPC9zZWxlY3Q+IDwvZGl2PiA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIGtsYXNzX3NhdmUnPlwiICsgKHQoJ3NhdmUnKSkgKyBcIjwvYnV0dG9uPjxidXR0b24gY2xhc3M9J2NvbW1hbmQga2xhc3NfY2FuY2VsJz5cIiArICh0KCdjYW5jZWwnKSkgKyBcIjwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IFwiICsgKGN1cnJpY3VsYUJ1dHRvbiB8fCAnJykpO1xuICAgIGlmIChUYW5nZXJpbmUudXNlci5pc0FkbWluKCkpIHtcbiAgICAgIHRoaXMudXBkYXRlVXBsb2FkZXIoKTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXJLbGFzc2VzKCk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIEtsYXNzZXNWaWV3LnByb3RvdHlwZS5jbG9zZVZpZXdzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGxlbiwgcmVmLCB2aWV3O1xuICAgIHJlZiA9IHRoaXMudmlld3MgIT0gbnVsbDtcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZpZXcgPSByZWZbaV07XG4gICAgICB2aWV3LmNsb3NlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZpZXdzID0gW107XG4gIH07XG5cbiAgS2xhc3Nlc1ZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9zZVZpZXdzKCk7XG4gIH07XG5cbiAgcmV0dXJuIEtsYXNzZXNWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgS2xhc3NMaXN0RWxlbWVudFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJLbGFzc0xpc3RFbGVtZW50Vmlld1wiXG5cbiAgdGFnTmFtZTogXCJsaVwiXG5cbiAgZXZlbnRzOlxuICAgICdjbGljayAua2xhc3NfcnVuJyAgICAgICAgICAgOiAncnVuJ1xuICAgICdjbGljayAua2xhc3NfcmVzdWx0cycgICAgICAgOiAnc2hvd1JlcG9ydFNlbGVjdCdcbiAgICAnY2hhbmdlICNyZXBvcnQnICAgICAgIDogJ2dldFJlcG9ydE1lbnUnXG4gICAgJ2NsaWNrIC5jYW5jZWxfcmVwb3J0JyA6ICdjYW5jZWxSZXBvcnQnXG4gICAgJ2NsaWNrIC5rbGFzc19lZGl0JyAgICAgICAgICA6ICdlZGl0J1xuICAgICdjbGljayAua2xhc3NfZGVsZXRlJyAgICAgICAgOiAndG9nZ2xlRGVsZXRlJ1xuICAgICdjbGljayAua2xhc3NfZGVsZXRlX2NhbmNlbCcgOiAndG9nZ2xlRGVsZXRlJ1xuICAgICdjbGljayAua2xhc3NfZGVsZXRlX2RlbGV0ZScgOiAnZGVsZXRlJ1xuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuXG4gICAgQGtsYXNzID0gb3B0aW9ucy5rbGFzc1xuXG4gICAgQGF2YWlsYWJsZVJlcG9ydHMgPSBUYW5nZXJpbmUuY29uZmlnLmdldChcInJlcG9ydHNcIilcbiAgICBpZiBvcHRpb25zLmtsYXNzLmhhcyBcImN1cnJpY3VsdW1JZFwiXG4gICAgICBAY3VycmljdWx1bSA9IG5ldyBDdXJyaWN1bHVtXG4gICAgICAgIFwiX2lkXCIgOiBvcHRpb25zLmtsYXNzLmdldCBcImN1cnJpY3VsdW1JZFwiIHx8IFwiXCJcbiAgICAgIEBjdXJyaWN1bHVtLmZldGNoXG4gICAgICAgIHN1Y2Nlc3MgOiBAcmVuZGVyXG4gICAgZWxzZVxuICAgICAgQGN1cnJpY3VsdW0gPSBuZXcgQ3VycmljdWx1bVxuXG4gIGVkaXQ6IC0+XG4gICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZSBcImNsYXNzL2VkaXQvXCIgKyBAa2xhc3MuaWQsIHRydWVcblxuICBnZXRSZXBvcnRNZW51OiAoZXZlbnQpIC0+XG4gICAgQHN1Yk1lbnVWaWV3Py5jbG9zZSgpXG4gICAgQHN1Yk1lbnVWaWV3ID0gbmV3IHdpbmRvd1skKGV2ZW50LnRhcmdldCkuZmluZChcIjpzZWxlY3RlZFwiKS5hdHRyKFwiZGF0YS1tZW51X3ZpZXdcIildXG4gICAgICBwYXJlbnQgOiBAXG4gICAgQCRlbC5maW5kKFwiI3JlcG9ydF9tZW51X2NvbnRhaW5lclwiKS5hcHBlbmQoXCI8ZGl2IGNsYXNzPSdyZXBvcnRfbWVudSc+PC9kaXY+XCIpXG4gICAgQHN1Yk1lbnVWaWV3LnNldEVsZW1lbnQgQCRlbC5maW5kKFwiI3JlcG9ydF9tZW51X2NvbnRhaW5lciAucmVwb3J0X21lbnVcIilcbiAgICBAc3ViTWVudVZpZXcucmVuZGVyKClcblxuICBzaG93UmVwb3J0U2VsZWN0OiAtPiBAJGVsLmZpbmQoXCIucmVwb3J0X3NlbGVjdF9jb250YWluZXJcIikucmVtb3ZlQ2xhc3MgXCJjb25maXJtYXRpb25cIlxuXG4gIGNhbmNlbFJlcG9ydDogLT5cbiAgICBAJGVsLmZpbmQoJ2RpdiNyZXBvcnRfbWVudScpLmVtcHR5KClcbiAgICBAJGVsLmZpbmQoJyNyZXBvcnQgOm50aC1jaGlsZCgxKScpLmF0dHIoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJylcbiAgICBAJGVsLmZpbmQoXCIucmVwb3J0X3NlbGVjdF9jb250YWluZXJcIikuYWRkQ2xhc3MgXCJjb25maXJtYXRpb25cIlxuICAgIEBzdWJNZW51Vmlldz8uY2xvc2UoKVxuXG4gIG9uQ2xvc2U6IC0+XG4gICAgQHN1Yk1lbnVWaWV3Py5jbG9zZSgpXG5cbiAgcnVuOiAtPlxuICAgIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJjbGFzcy9cIiArIEBrbGFzcy5pZCwgdHJ1ZVxuXG4gIHRvZ2dsZURlbGV0ZTogLT4gQCRlbC5maW5kKFwiLmtsYXNzX2RlbGV0ZV9jb25maXJtXCIpLnRvZ2dsZSgpXG5cbiAgZGVsZXRlOiAtPlxuICAgIEBrbGFzcy5jb2xsZWN0aW9uLmdldChAa2xhc3MpLmRlc3Ryb3koKVxuXG4gIHJlbmRlcjogPT5cblxuICAgIGlmIGtsYXNzLmdldChcInRlYWNoZXJJZFwiKSA9PSBcImFkbWluXCJcbiAgICAgIHRlYWNoZXJOYW1lID0gXCJhZG1pblwiXG4gICAgZWxzZVxuICAgICAgdGVhY2hlciA9IHZtLmN1cnJlbnRWaWV3LnRlYWNoZXJzLmdldChrbGFzcy5nZXQoXCJ0ZWFjaGVySWRcIikpXG4gICAgICB0ZWFjaGVyTmFtZSA9IHRlYWNoZXI/LmdldEVzY2FwZWRTdHJpbmcoJ25hbWUnKSB8fCBcIlwiXG5cbiAgICBodG1sVGVhY2hlciA9IFwiXG4gICAgICA8dHI+PHRoPlRlYWNoZXI8L3RoPjx0ZD4je3RlYWNoZXJOYW1lfTwvdGQ+PC90cj5cbiAgICBcIiBpZiBUYW5nZXJpbmUudXNlci5pc0FkbWluKClcblxuICAgIG1lbnVPcHRpb25zID0gXCJcIlxuICAgIGZvciByZXBvcnQgaW4gQGF2YWlsYWJsZVJlcG9ydHNcbiAgICAgIGlmIG5vdCByZXBvcnQuY29udGV4dD8gb3IgcmVwb3J0LmNvbnRleHQgaXMgJ3NlcnZlcidcbiAgICAgICAgbWVudU9wdGlvbnMgKz0gXCI8b3B0aW9uIGRhdGEtbWVudV92aWV3PScje3JlcG9ydC5tZW51Vmlld30nPiN7dChyZXBvcnQubmFtZSl9PC9vcHRpb24+XCJcblxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPHRhYmxlPlxuICAgICAgICAje2h0bWxUZWFjaGVyIHx8IFwiXCJ9XG4gICAgICAgIDx0cj48dGg+U2Nob29sIG5hbWU8L3RoPjx0ZD4je0BrbGFzcy5nZXRFc2NhcGVkU3RyaW5nKCdzY2hvb2xOYW1lJyl9PC90ZD48L3RyPlxuICAgICAgICA8dHI+PHRoPlNjaG9vbCB5ZWFyPC90aD48dGQ+I3tAa2xhc3MuZ2V0U3RyaW5nKCd5ZWFyJyl9PC90ZD48L3RyPlxuICAgICAgICA8dHI+PHRoPiN7dCgnZ3JhZGUnKX08L3RoPjx0ZD4je0BrbGFzcy5nZXRTdHJpbmcoJ2dyYWRlJyl9PC90ZD48L3RyPlxuICAgICAgICA8dHI+PHRoPiN7dCgnc3RyZWFtJyl9PC90aD48dGQ+I3tAa2xhc3MuZ2V0U3RyaW5nKCdzdHJlYW0nKX08L3RkPjwvdHI+XG4gICAgICAgIDx0cj48dGg+I3t0KCdjdXJyaWN1bHVtJyl9PC90aD48dGQ+I3tAY3VycmljdWx1bS5nZXRFc2NhcGVkU3RyaW5nKCduYW1lJyl9PC90ZD48L3RyPlxuICAgICAgPC90YWJsZT5cbiAgICAgIDxpbWcgc3JjPSdpbWFnZXMvaWNvbl9ydW4ucG5nJyAgICAgY2xhc3M9J2ljb24ga2xhc3NfcnVuJz5cbiAgICAgIDxpbWcgc3JjPSdpbWFnZXMvaWNvbl9yZXN1bHRzLnBuZycgY2xhc3M9J2ljb24ga2xhc3NfcmVzdWx0cyc+XG4gICAgICA8aW1nIHNyYz0naW1hZ2VzL2ljb25fZWRpdC5wbmcnICAgIGNsYXNzPSdpY29uIGtsYXNzX2VkaXQnPlxuICAgICAgPGltZyBzcmM9J2ltYWdlcy9pY29uX2RlbGV0ZS5wbmcnICBjbGFzcz0naWNvbiBrbGFzc19kZWxldGUnPlxuICAgICAgPGRpdiBjbGFzcz0ncmVwb3J0X3NlbGVjdF9jb250YWluZXIgY29uZmlybWF0aW9uJz5cbiAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgIDxzZWxlY3QgaWQ9J3JlcG9ydCc+XG4gICAgICAgICAgICA8b3B0aW9uIHNlbGVjdGVkPSdzZWxlY3RlZCcgZGlzYWJsZWQ9J2Rpc2FibGVkJz4je3QoJ3NlbGVjdCByZXBvcnQgdHlwZScpfTwvb3B0aW9uPlxuICAgICAgICAgICAgI3ttZW51T3B0aW9uc31cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9J3JlcG9ydF9tZW51X2NvbnRhaW5lcic+PC9kaXY+XG4gICAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQgY2FuY2VsX3JlcG9ydCc+I3t0KCdjYW5jZWwnKX08L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz0na2xhc3NfZGVsZXRlX2NvbmZpcm0gY29uZmlybWF0aW9uJz5cbiAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgICN7dCgnY29uZmlybScpfTxicj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdrbGFzc19kZWxldGVfZGVsZXRlIGNvbW1hbmRfcmVkJz4je3QoJ2RlbGV0ZScpfTwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9J2tsYXNzX2RlbGV0ZV9jYW5jZWwgY29tbWFuZCc+I3t0KCdjYW5jZWwnKX08L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBcIlxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cblxuIiwidmFyIEtsYXNzTGlzdEVsZW1lbnRWaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbktsYXNzTGlzdEVsZW1lbnRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEtsYXNzTGlzdEVsZW1lbnRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBLbGFzc0xpc3RFbGVtZW50VmlldygpIHtcbiAgICB0aGlzLnJlbmRlciA9IGJpbmQodGhpcy5yZW5kZXIsIHRoaXMpO1xuICAgIHJldHVybiBLbGFzc0xpc3RFbGVtZW50Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEtsYXNzTGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIktsYXNzTGlzdEVsZW1lbnRWaWV3XCI7XG5cbiAgS2xhc3NMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnRhZ05hbWUgPSBcImxpXCI7XG5cbiAgS2xhc3NMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICAnY2xpY2sgLmtsYXNzX3J1bic6ICdydW4nLFxuICAgICdjbGljayAua2xhc3NfcmVzdWx0cyc6ICdzaG93UmVwb3J0U2VsZWN0JyxcbiAgICAnY2hhbmdlICNyZXBvcnQnOiAnZ2V0UmVwb3J0TWVudScsXG4gICAgJ2NsaWNrIC5jYW5jZWxfcmVwb3J0JzogJ2NhbmNlbFJlcG9ydCcsXG4gICAgJ2NsaWNrIC5rbGFzc19lZGl0JzogJ2VkaXQnLFxuICAgICdjbGljayAua2xhc3NfZGVsZXRlJzogJ3RvZ2dsZURlbGV0ZScsXG4gICAgJ2NsaWNrIC5rbGFzc19kZWxldGVfY2FuY2VsJzogJ3RvZ2dsZURlbGV0ZScsXG4gICAgJ2NsaWNrIC5rbGFzc19kZWxldGVfZGVsZXRlJzogJ2RlbGV0ZSdcbiAgfTtcblxuICBLbGFzc0xpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLmtsYXNzID0gb3B0aW9ucy5rbGFzcztcbiAgICB0aGlzLmF2YWlsYWJsZVJlcG9ydHMgPSBUYW5nZXJpbmUuY29uZmlnLmdldChcInJlcG9ydHNcIik7XG4gICAgaWYgKG9wdGlvbnMua2xhc3MuaGFzKFwiY3VycmljdWx1bUlkXCIpKSB7XG4gICAgICB0aGlzLmN1cnJpY3VsdW0gPSBuZXcgQ3VycmljdWx1bSh7XG4gICAgICAgIFwiX2lkXCI6IG9wdGlvbnMua2xhc3MuZ2V0KFwiY3VycmljdWx1bUlkXCIgfHwgXCJcIilcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmljdWx1bS5mZXRjaCh7XG4gICAgICAgIHN1Y2Nlc3M6IHRoaXMucmVuZGVyXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY3VycmljdWx1bSA9IG5ldyBDdXJyaWN1bHVtO1xuICAgIH1cbiAgfTtcblxuICBLbGFzc0xpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuZWRpdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwiY2xhc3MvZWRpdC9cIiArIHRoaXMua2xhc3MuaWQsIHRydWUpO1xuICB9O1xuXG4gIEtsYXNzTGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5nZXRSZXBvcnRNZW51ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgcmVmO1xuICAgIGlmICgocmVmID0gdGhpcy5zdWJNZW51VmlldykgIT0gbnVsbCkge1xuICAgICAgcmVmLmNsb3NlKCk7XG4gICAgfVxuICAgIHRoaXMuc3ViTWVudVZpZXcgPSBuZXcgd2luZG93WyQoZXZlbnQudGFyZ2V0KS5maW5kKFwiOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLW1lbnVfdmlld1wiKV0oe1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSk7XG4gICAgdGhpcy4kZWwuZmluZChcIiNyZXBvcnRfbWVudV9jb250YWluZXJcIikuYXBwZW5kKFwiPGRpdiBjbGFzcz0ncmVwb3J0X21lbnUnPjwvZGl2PlwiKTtcbiAgICB0aGlzLnN1Yk1lbnVWaWV3LnNldEVsZW1lbnQodGhpcy4kZWwuZmluZChcIiNyZXBvcnRfbWVudV9jb250YWluZXIgLnJlcG9ydF9tZW51XCIpKTtcbiAgICByZXR1cm4gdGhpcy5zdWJNZW51Vmlldy5yZW5kZXIoKTtcbiAgfTtcblxuICBLbGFzc0xpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuc2hvd1JlcG9ydFNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLnJlcG9ydF9zZWxlY3RfY29udGFpbmVyXCIpLnJlbW92ZUNsYXNzKFwiY29uZmlybWF0aW9uXCIpO1xuICB9O1xuXG4gIEtsYXNzTGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5jYW5jZWxSZXBvcnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVmO1xuICAgIHRoaXMuJGVsLmZpbmQoJ2RpdiNyZXBvcnRfbWVudScpLmVtcHR5KCk7XG4gICAgdGhpcy4kZWwuZmluZCgnI3JlcG9ydCA6bnRoLWNoaWxkKDEpJykuYXR0cignc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcbiAgICB0aGlzLiRlbC5maW5kKFwiLnJlcG9ydF9zZWxlY3RfY29udGFpbmVyXCIpLmFkZENsYXNzKFwiY29uZmlybWF0aW9uXCIpO1xuICAgIHJldHVybiAocmVmID0gdGhpcy5zdWJNZW51VmlldykgIT0gbnVsbCA/IHJlZi5jbG9zZSgpIDogdm9pZCAwO1xuICB9O1xuXG4gIEtsYXNzTGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlZjtcbiAgICByZXR1cm4gKHJlZiA9IHRoaXMuc3ViTWVudVZpZXcpICE9IG51bGwgPyByZWYuY2xvc2UoKSA6IHZvaWQgMDtcbiAgfTtcblxuICBLbGFzc0xpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJjbGFzcy9cIiArIHRoaXMua2xhc3MuaWQsIHRydWUpO1xuICB9O1xuXG4gIEtsYXNzTGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS50b2dnbGVEZWxldGUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5rbGFzc19kZWxldGVfY29uZmlybVwiKS50b2dnbGUoKTtcbiAgfTtcblxuICBLbGFzc0xpc3RFbGVtZW50Vmlldy5wcm90b3R5cGVbXCJkZWxldGVcIl0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5rbGFzcy5jb2xsZWN0aW9uLmdldCh0aGlzLmtsYXNzKS5kZXN0cm95KCk7XG4gIH07XG5cbiAgS2xhc3NMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBodG1sVGVhY2hlciwgaSwgbGVuLCBtZW51T3B0aW9ucywgcmVmLCByZXBvcnQsIHRlYWNoZXIsIHRlYWNoZXJOYW1lO1xuICAgIGlmIChrbGFzcy5nZXQoXCJ0ZWFjaGVySWRcIikgPT09IFwiYWRtaW5cIikge1xuICAgICAgdGVhY2hlck5hbWUgPSBcImFkbWluXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRlYWNoZXIgPSB2bS5jdXJyZW50Vmlldy50ZWFjaGVycy5nZXQoa2xhc3MuZ2V0KFwidGVhY2hlcklkXCIpKTtcbiAgICAgIHRlYWNoZXJOYW1lID0gKHRlYWNoZXIgIT0gbnVsbCA/IHRlYWNoZXIuZ2V0RXNjYXBlZFN0cmluZygnbmFtZScpIDogdm9pZCAwKSB8fCBcIlwiO1xuICAgIH1cbiAgICBpZiAoVGFuZ2VyaW5lLnVzZXIuaXNBZG1pbigpKSB7XG4gICAgICBodG1sVGVhY2hlciA9IFwiPHRyPjx0aD5UZWFjaGVyPC90aD48dGQ+XCIgKyB0ZWFjaGVyTmFtZSArIFwiPC90ZD48L3RyPlwiO1xuICAgIH1cbiAgICBtZW51T3B0aW9ucyA9IFwiXCI7XG4gICAgcmVmID0gdGhpcy5hdmFpbGFibGVSZXBvcnRzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgcmVwb3J0ID0gcmVmW2ldO1xuICAgICAgaWYgKChyZXBvcnQuY29udGV4dCA9PSBudWxsKSB8fCByZXBvcnQuY29udGV4dCA9PT0gJ3NlcnZlcicpIHtcbiAgICAgICAgbWVudU9wdGlvbnMgKz0gXCI8b3B0aW9uIGRhdGEtbWVudV92aWV3PSdcIiArIHJlcG9ydC5tZW51VmlldyArIFwiJz5cIiArICh0KHJlcG9ydC5uYW1lKSkgKyBcIjwvb3B0aW9uPlwiO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLiRlbC5odG1sKFwiPHRhYmxlPiBcIiArIChodG1sVGVhY2hlciB8fCBcIlwiKSArIFwiIDx0cj48dGg+U2Nob29sIG5hbWU8L3RoPjx0ZD5cIiArICh0aGlzLmtsYXNzLmdldEVzY2FwZWRTdHJpbmcoJ3NjaG9vbE5hbWUnKSkgKyBcIjwvdGQ+PC90cj4gPHRyPjx0aD5TY2hvb2wgeWVhcjwvdGg+PHRkPlwiICsgKHRoaXMua2xhc3MuZ2V0U3RyaW5nKCd5ZWFyJykpICsgXCI8L3RkPjwvdHI+IDx0cj48dGg+XCIgKyAodCgnZ3JhZGUnKSkgKyBcIjwvdGg+PHRkPlwiICsgKHRoaXMua2xhc3MuZ2V0U3RyaW5nKCdncmFkZScpKSArIFwiPC90ZD48L3RyPiA8dHI+PHRoPlwiICsgKHQoJ3N0cmVhbScpKSArIFwiPC90aD48dGQ+XCIgKyAodGhpcy5rbGFzcy5nZXRTdHJpbmcoJ3N0cmVhbScpKSArIFwiPC90ZD48L3RyPiA8dHI+PHRoPlwiICsgKHQoJ2N1cnJpY3VsdW0nKSkgKyBcIjwvdGg+PHRkPlwiICsgKHRoaXMuY3VycmljdWx1bS5nZXRFc2NhcGVkU3RyaW5nKCduYW1lJykpICsgXCI8L3RkPjwvdHI+IDwvdGFibGU+IDxpbWcgc3JjPSdpbWFnZXMvaWNvbl9ydW4ucG5nJyAgICAgY2xhc3M9J2ljb24ga2xhc3NfcnVuJz4gPGltZyBzcmM9J2ltYWdlcy9pY29uX3Jlc3VsdHMucG5nJyBjbGFzcz0naWNvbiBrbGFzc19yZXN1bHRzJz4gPGltZyBzcmM9J2ltYWdlcy9pY29uX2VkaXQucG5nJyAgICBjbGFzcz0naWNvbiBrbGFzc19lZGl0Jz4gPGltZyBzcmM9J2ltYWdlcy9pY29uX2RlbGV0ZS5wbmcnICBjbGFzcz0naWNvbiBrbGFzc19kZWxldGUnPiA8ZGl2IGNsYXNzPSdyZXBvcnRfc2VsZWN0X2NvbnRhaW5lciBjb25maXJtYXRpb24nPiA8ZGl2IGNsYXNzPSdtZW51X2JveCc+IDxzZWxlY3QgaWQ9J3JlcG9ydCc+IDxvcHRpb24gc2VsZWN0ZWQ9J3NlbGVjdGVkJyBkaXNhYmxlZD0nZGlzYWJsZWQnPlwiICsgKHQoJ3NlbGVjdCByZXBvcnQgdHlwZScpKSArIFwiPC9vcHRpb24+IFwiICsgbWVudU9wdGlvbnMgKyBcIiA8L3NlbGVjdD4gPC9kaXY+IDxkaXYgaWQ9J3JlcG9ydF9tZW51X2NvbnRhaW5lcic+PC9kaXY+IDxidXR0b24gY2xhc3M9J2NvbW1hbmQgY2FuY2VsX3JlcG9ydCc+XCIgKyAodCgnY2FuY2VsJykpICsgXCI8L2J1dHRvbj4gPC9kaXY+IDxkaXYgY2xhc3M9J2tsYXNzX2RlbGV0ZV9jb25maXJtIGNvbmZpcm1hdGlvbic+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gXCIgKyAodCgnY29uZmlybScpKSArIFwiPGJyPiA8YnV0dG9uIGNsYXNzPSdrbGFzc19kZWxldGVfZGVsZXRlIGNvbW1hbmRfcmVkJz5cIiArICh0KCdkZWxldGUnKSkgKyBcIjwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdrbGFzc19kZWxldGVfY2FuY2VsIGNvbW1hbmQnPlwiICsgKHQoJ2NhbmNlbCcpKSArIFwiPC9idXR0b24+IDwvZGl2PiA8L2Rpdj5cIik7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIHJldHVybiBLbGFzc0xpc3RFbGVtZW50VmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIEtsYXNzU3VidGVzdFJ1blZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJLbGFzc1N1YnRlc3RSdW5WaWV3XCJcblxuICBldmVudHM6XG4gICAgJ2NsaWNrIC5kb25lJyAgICAgICAgIDogJ2RvbmUnXG4gICAgJ2NsaWNrIC5jYW5jZWwnICAgICAgIDogJ2NhbmNlbCdcbiAgICAnY2xpY2sgLnN1YnRlc3RfaGVscCcgOiAndG9nZ2xlSGVscCdcblxuICB0b2dnbGVIZWxwOiAtPiBAJGVsLmZpbmQoXCIuZW51bWVyYXRvcl9oZWxwXCIpLmZhZGVUb2dnbGUoMjUwKVxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBsaW5rZWRSZXN1bHQgPSBvcHRpb25zLmxpbmtlZFJlc3VsdFxuICAgIEBzdHVkZW50ICAgICAgPSBvcHRpb25zLnN0dWRlbnRcbiAgICBAc3VidGVzdCAgICAgID0gb3B0aW9ucy5zdWJ0ZXN0XG4gICAgQHF1ZXN0aW9ucyAgICA9IG9wdGlvbnMucXVlc3Rpb25zXG5cbiAgICBAcHJvdG90eXBlID0gQHN1YnRlc3QuZ2V0KFwicHJvdG90eXBlXCIpXG5cbiAgICBAcHJvdG9WaWV3cyA9IFRhbmdlcmluZS5jb25maWcuZ2V0KFwicHJvdG90eXBlVmlld3NcIilcblxuICAgIEBwcm90b3R5cGVSZW5kZXJlZCA9IGZhbHNlXG5cblxuICAgIGlmIEBwcm90b3R5cGUgPT0gXCJncmlkXCJcbiAgICAgIEByZXN1bHQgPSBuZXcgS2xhc3NSZXN1bHRcbiAgICAgICAgcHJvdG90eXBlICAgIDogXCJncmlkXCJcbiAgICAgICAgc3RhcnRUaW1lICAgIDogKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuICAgICAgICBpdGVtVHlwZSAgICAgOiBAc3VidGVzdC5nZXQoXCJpdGVtVHlwZVwiKVxuICAgICAgICByZXBvcnRUeXBlICAgOiBAc3VidGVzdC5nZXQoXCJyZXBvcnRUeXBlXCIpXG4gICAgICAgIHN0dWRlbnRJZCAgICA6IEBzdHVkZW50LmlkXG4gICAgICAgIHN1YnRlc3RJZCAgICA6IEBzdWJ0ZXN0LmlkXG4gICAgICAgIHBhcnQgICAgICAgICA6IEBzdWJ0ZXN0LmdldChcInBhcnRcIilcbiAgICAgICAga2xhc3NJZCAgICAgIDogQHN0dWRlbnQuZ2V0KFwia2xhc3NJZFwiKVxuICAgICAgICB0aW1lQWxsb3dlZCAgOiBAc3VidGVzdC5nZXQoXCJ0aW1lclwiKVxuICAgIGVsc2UgaWYgQHByb3RvdHlwZSA9PSBcInN1cnZleVwiXG4gICAgICBAcmVzdWx0ID0gbmV3IEtsYXNzUmVzdWx0XG4gICAgICAgIHByb3RvdHlwZSAgICA6IFwic3VydmV5XCJcbiAgICAgICAgc3RhcnRUaW1lICAgIDogKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuICAgICAgICBzdHVkZW50SWQgICAgOiBAc3R1ZGVudC5pZFxuICAgICAgICBzdWJ0ZXN0SWQgICAgOiBAc3VidGVzdC5pZFxuICAgICAgICBwYXJ0ICAgICAgICAgOiBAc3VidGVzdC5nZXQoXCJwYXJ0XCIpXG4gICAgICAgIGtsYXNzSWQgICAgICA6IEBzdHVkZW50LmdldChcImtsYXNzSWRcIilcbiAgICAgICAgaXRlbVR5cGUgICAgIDogQHN1YnRlc3QuZ2V0KFwiaXRlbVR5cGVcIilcbiAgICAgICAgcmVwb3J0VHlwZSAgIDogQHN1YnRlc3QuZ2V0KFwicmVwb3J0VHlwZVwiKVxuICAgICAgQHF1ZXN0aW9ucy5zb3J0KClcbiAgICAgIEByZW5kZXIoKVxuXG5cbiAgcmVuZGVyOiAtPlxuICAgIGVudW1lcmF0b3JIZWxwID0gaWYgKEBzdWJ0ZXN0LmdldChcImVudW1lcmF0b3JIZWxwXCIpIHx8IFwiXCIpICE9IFwiXCIgdGhlbiBcIjxidXR0b24gY2xhc3M9J3N1YnRlc3RfaGVscCBjb21tYW5kJz5oZWxwPC9idXR0b24+PGRpdiBjbGFzcz0nZW51bWVyYXRvcl9oZWxwJz4je0BzdWJ0ZXN0LmdldCAnZW51bWVyYXRvckhlbHAnfTwvZGl2PlwiIGVsc2UgXCJcIlxuICAgIHN0dWRlbnREaWFsb2cgID0gaWYgKEBzdWJ0ZXN0LmdldChcInN0dWRlbnREaWFsb2dcIikgIHx8IFwiXCIpICE9IFwiXCIgdGhlbiBcIjxkaXYgY2xhc3M9J3N0dWRlbnRfZGlhbG9nJz4je0BzdWJ0ZXN0LmdldCAnc3R1ZGVudERpYWxvZyd9PC9kaXY+XCIgZWxzZSBcIlwiXG5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgIDxoMj4je0BzdWJ0ZXN0LmdldCAnbmFtZSd9PC9oMj5cbiAgICAgICN7ZW51bWVyYXRvckhlbHB9XG4gICAgICAje3N0dWRlbnREaWFsb2d9XG4gICAgXCJcblxuICAgICMgVXNlIHByb3RvdHlwZSBzcGVjaWZpYyB2aWV3cyBoZXJlXG4gICAgQHByb3RvdHlwZVZpZXcgPSBuZXcgd2luZG93W0Bwcm90b1ZpZXdzW0BzdWJ0ZXN0LmdldCAncHJvdG90eXBlJ11bJ3J1biddXVxuICAgICAgbW9kZWw6IEBzdWJ0ZXN0XG4gICAgICBwYXJlbnQ6IEBcbiAgICBAcHJvdG90eXBlVmlldy5vbiBcInJlbmRlcmVkXCIsIEBvblByb3RvdHlwZVJlbmRlcmVkXG4gICAgQHByb3RvdHlwZVZpZXcucmVuZGVyKClcbiAgICBAJGVsLmFwcGVuZCBAcHJvdG90eXBlVmlldy5lbFxuICAgIEBwcm90b3R5cGVSZW5kZXJlZCA9IHRydWVcblxuICAgIEAkZWwuYXBwZW5kIFwiPGJ1dHRvbiBjbGFzcz0nZG9uZSBuYXZpZ2F0aW9uJz5Eb25lPC9idXR0b24+IDxidXR0b24gY2xhc3M9J2NhbmNlbCBuYXZpZ2F0aW9uJz5DYW5jZWw8L2J1dHRvbj5cIlxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgb25Qcm90b3R5cGVSZW5kZXJlZDogPT5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICBnZXRHcmlkU2NvcmU6IC0+IFxuICAgIHJldHVybiBmYWxzZSBpZiBub3QgQGxpbmtlZFJlc3VsdC5nZXQoXCJzdWJ0ZXN0RGF0YVwiKT8gIyBubyByZXN1bHQgZm91bmRcbiAgICByZXN1bHQgPSBAbGlua2VkUmVzdWx0LmdldChcInN1YnRlc3REYXRhXCIpWydhdHRlbXB0ZWQnXSB8fCAwIFxuICAgIHJldHVybiByZXN1bHRcblxuICBncmlkV2FzQXV0b3N0b3BwZWQ6IC0+IEBsaW5rZWRSZXN1bHQuZ2V0KFwic3VidGVzdERhdGFcIik/WydhdXRvX3N0b3AnXSB8fCAwXG5cbiAgb25DbG9zZTogLT5cbiAgICBAcHJvdG90eXBlVmlldz8uY2xvc2U/KClcblxuICBpc1ZhbGlkOiAtPlxuICAgIGlmIG5vdCBAcHJvdG90eXBlUmVuZGVyZWQgdGhlbiByZXR1cm4gZmFsc2VcbiAgICBpZiBAcHJvdG90eXBlVmlldy5pc1ZhbGlkP1xuICAgICAgcmV0dXJuIEBwcm90b3R5cGVWaWV3LmlzVmFsaWQoKVxuICAgIGVsc2VcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIHRydWVcblxuICBnZXRTa2lwcGVkOiAtPlxuICAgIGlmIEBwcm90b3R5cGVWaWV3LmdldFNraXBwZWQ/XG4gICAgICByZXR1cm4gQHByb3RvdHlwZVZpZXcuZ2V0U2tpcHBlZCgpXG4gICAgZWxzZVxuICAgICAgdGhyb3cgXCJQcm90b3R5cGUgc2tpcHBpbmcgbm90IGltcGxlbWVudGVkXCJcblxuICBjYW5jZWw6IC0+XG4gICAgaWYgQHN0dWRlbnQuaWQgPT0gXCJ0ZXN0XCJcbiAgICAgIGhpc3RvcnkuYmFjaygpXG4gICAgICByZXR1cm5cblxuICAgIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJjbGFzcy8je0BzdHVkZW50LmdldCgna2xhc3NJZCcpfS8je0BzdWJ0ZXN0LmdldCgncGFydCcpfVwiLCB0cnVlXG5cbiAgZG9uZTogLT5cbiAgICBpZiBAc3R1ZGVudC5pZCA9PSBcInRlc3RcIlxuICAgICAgaGlzdG9yeS5iYWNrKClcbiAgICAgIHJldHVyblxuXG4gICAgaWYgQGlzVmFsaWQoKVxuICAgICAgIyBHYXVyYW50ZWUgc2luZ2xlIFwibmV3XCIgcmVzdWx0XG4gICAgICBUYW5nZXJpbmUuJGRiLnZpZXcgXCIje1RhbmdlcmluZS5kZXNpZ25fZG9jfS9yZXN1bHRzQnlTdHVkZW50U3VidGVzdFwiLFxuICAgICAgICBrZXkgOiBbQHN0dWRlbnQuaWQsQHN1YnRlc3QuaWRdXG4gICAgICAgIHN1Y2Nlc3M6IChkYXRhKSA9PlxuICAgICAgICAgIHJvd3MgPSBkYXRhLnJvd3NcbiAgICAgICAgICBmb3IgZGF0dW0gaW4gcm93c1xuICAgICAgICAgICAgVGFuZ2VyaW5lLiRkYi5zYXZlRG9jICQuZXh0ZW5kKGRhdHVtLnZhbHVlLCBcIm9sZFwiOnRydWUpXG4gICAgICAgICAgIyBzYXZlIHRoaXMgcmVzdWx0XG4gICAgICAgICAgQHJlc3VsdC5hZGQgQHByb3RvdHlwZVZpZXcuZ2V0UmVzdWx0KCksID0+XG4gICAgICAgICAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiY2xhc3MvI3tAc3R1ZGVudC5nZXQoJ2tsYXNzSWQnKX0vI3tAc3VidGVzdC5nZXQoJ3BhcnQnKX1cIiwgdHJ1ZVxuICAgIGVsc2VcbiAgICAgIEBwcm90b3R5cGVWaWV3LnNob3dFcnJvcnMoKSIsInZhciBLbGFzc1N1YnRlc3RSdW5WaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbktsYXNzU3VidGVzdFJ1blZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoS2xhc3NTdWJ0ZXN0UnVuVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gS2xhc3NTdWJ0ZXN0UnVuVmlldygpIHtcbiAgICB0aGlzLm9uUHJvdG90eXBlUmVuZGVyZWQgPSBiaW5kKHRoaXMub25Qcm90b3R5cGVSZW5kZXJlZCwgdGhpcyk7XG4gICAgcmV0dXJuIEtsYXNzU3VidGVzdFJ1blZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBLbGFzc1N1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIktsYXNzU3VidGVzdFJ1blZpZXdcIjtcblxuICBLbGFzc1N1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrIC5kb25lJzogJ2RvbmUnLFxuICAgICdjbGljayAuY2FuY2VsJzogJ2NhbmNlbCcsXG4gICAgJ2NsaWNrIC5zdWJ0ZXN0X2hlbHAnOiAndG9nZ2xlSGVscCdcbiAgfTtcblxuICBLbGFzc1N1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS50b2dnbGVIZWxwID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIuZW51bWVyYXRvcl9oZWxwXCIpLmZhZGVUb2dnbGUoMjUwKTtcbiAgfTtcblxuICBLbGFzc1N1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMubGlua2VkUmVzdWx0ID0gb3B0aW9ucy5saW5rZWRSZXN1bHQ7XG4gICAgdGhpcy5zdHVkZW50ID0gb3B0aW9ucy5zdHVkZW50O1xuICAgIHRoaXMuc3VidGVzdCA9IG9wdGlvbnMuc3VidGVzdDtcbiAgICB0aGlzLnF1ZXN0aW9ucyA9IG9wdGlvbnMucXVlc3Rpb25zO1xuICAgIHRoaXMucHJvdG90eXBlID0gdGhpcy5zdWJ0ZXN0LmdldChcInByb3RvdHlwZVwiKTtcbiAgICB0aGlzLnByb3RvVmlld3MgPSBUYW5nZXJpbmUuY29uZmlnLmdldChcInByb3RvdHlwZVZpZXdzXCIpO1xuICAgIHRoaXMucHJvdG90eXBlUmVuZGVyZWQgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5wcm90b3R5cGUgPT09IFwiZ3JpZFwiKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXN1bHQgPSBuZXcgS2xhc3NSZXN1bHQoe1xuICAgICAgICBwcm90b3R5cGU6IFwiZ3JpZFwiLFxuICAgICAgICBzdGFydFRpbWU6IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCksXG4gICAgICAgIGl0ZW1UeXBlOiB0aGlzLnN1YnRlc3QuZ2V0KFwiaXRlbVR5cGVcIiksXG4gICAgICAgIHJlcG9ydFR5cGU6IHRoaXMuc3VidGVzdC5nZXQoXCJyZXBvcnRUeXBlXCIpLFxuICAgICAgICBzdHVkZW50SWQ6IHRoaXMuc3R1ZGVudC5pZCxcbiAgICAgICAgc3VidGVzdElkOiB0aGlzLnN1YnRlc3QuaWQsXG4gICAgICAgIHBhcnQ6IHRoaXMuc3VidGVzdC5nZXQoXCJwYXJ0XCIpLFxuICAgICAgICBrbGFzc0lkOiB0aGlzLnN0dWRlbnQuZ2V0KFwia2xhc3NJZFwiKSxcbiAgICAgICAgdGltZUFsbG93ZWQ6IHRoaXMuc3VidGVzdC5nZXQoXCJ0aW1lclwiKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gXCJzdXJ2ZXlcIikge1xuICAgICAgdGhpcy5yZXN1bHQgPSBuZXcgS2xhc3NSZXN1bHQoe1xuICAgICAgICBwcm90b3R5cGU6IFwic3VydmV5XCIsXG4gICAgICAgIHN0YXJ0VGltZTogKG5ldyBEYXRlKCkpLmdldFRpbWUoKSxcbiAgICAgICAgc3R1ZGVudElkOiB0aGlzLnN0dWRlbnQuaWQsXG4gICAgICAgIHN1YnRlc3RJZDogdGhpcy5zdWJ0ZXN0LmlkLFxuICAgICAgICBwYXJ0OiB0aGlzLnN1YnRlc3QuZ2V0KFwicGFydFwiKSxcbiAgICAgICAga2xhc3NJZDogdGhpcy5zdHVkZW50LmdldChcImtsYXNzSWRcIiksXG4gICAgICAgIGl0ZW1UeXBlOiB0aGlzLnN1YnRlc3QuZ2V0KFwiaXRlbVR5cGVcIiksXG4gICAgICAgIHJlcG9ydFR5cGU6IHRoaXMuc3VidGVzdC5nZXQoXCJyZXBvcnRUeXBlXCIpXG4gICAgICB9KTtcbiAgICAgIHRoaXMucXVlc3Rpb25zLnNvcnQoKTtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiAgfTtcblxuICBLbGFzc1N1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZW51bWVyYXRvckhlbHAsIHN0dWRlbnREaWFsb2c7XG4gICAgZW51bWVyYXRvckhlbHAgPSAodGhpcy5zdWJ0ZXN0LmdldChcImVudW1lcmF0b3JIZWxwXCIpIHx8IFwiXCIpICE9PSBcIlwiID8gXCI8YnV0dG9uIGNsYXNzPSdzdWJ0ZXN0X2hlbHAgY29tbWFuZCc+aGVscDwvYnV0dG9uPjxkaXYgY2xhc3M9J2VudW1lcmF0b3JfaGVscCc+XCIgKyAodGhpcy5zdWJ0ZXN0LmdldCgnZW51bWVyYXRvckhlbHAnKSkgKyBcIjwvZGl2PlwiIDogXCJcIjtcbiAgICBzdHVkZW50RGlhbG9nID0gKHRoaXMuc3VidGVzdC5nZXQoXCJzdHVkZW50RGlhbG9nXCIpIHx8IFwiXCIpICE9PSBcIlwiID8gXCI8ZGl2IGNsYXNzPSdzdHVkZW50X2RpYWxvZyc+XCIgKyAodGhpcy5zdWJ0ZXN0LmdldCgnc3R1ZGVudERpYWxvZycpKSArIFwiPC9kaXY+XCIgOiBcIlwiO1xuICAgIHRoaXMuJGVsLmh0bWwoXCI8aDI+XCIgKyAodGhpcy5zdWJ0ZXN0LmdldCgnbmFtZScpKSArIFwiPC9oMj4gXCIgKyBlbnVtZXJhdG9ySGVscCArIFwiIFwiICsgc3R1ZGVudERpYWxvZyk7XG4gICAgdGhpcy5wcm90b3R5cGVWaWV3ID0gbmV3IHdpbmRvd1t0aGlzLnByb3RvVmlld3NbdGhpcy5zdWJ0ZXN0LmdldCgncHJvdG90eXBlJyldWydydW4nXV0oe1xuICAgICAgbW9kZWw6IHRoaXMuc3VidGVzdCxcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pO1xuICAgIHRoaXMucHJvdG90eXBlVmlldy5vbihcInJlbmRlcmVkXCIsIHRoaXMub25Qcm90b3R5cGVSZW5kZXJlZCk7XG4gICAgdGhpcy5wcm90b3R5cGVWaWV3LnJlbmRlcigpO1xuICAgIHRoaXMuJGVsLmFwcGVuZCh0aGlzLnByb3RvdHlwZVZpZXcuZWwpO1xuICAgIHRoaXMucHJvdG90eXBlUmVuZGVyZWQgPSB0cnVlO1xuICAgIHRoaXMuJGVsLmFwcGVuZChcIjxidXR0b24gY2xhc3M9J2RvbmUgbmF2aWdhdGlvbic+RG9uZTwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdjYW5jZWwgbmF2aWdhdGlvbic+Q2FuY2VsPC9idXR0b24+XCIpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICBLbGFzc1N1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5vblByb3RvdHlwZVJlbmRlcmVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIEtsYXNzU3VidGVzdFJ1blZpZXcucHJvdG90eXBlLmdldEdyaWRTY29yZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKHRoaXMubGlua2VkUmVzdWx0LmdldChcInN1YnRlc3REYXRhXCIpID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmVzdWx0ID0gdGhpcy5saW5rZWRSZXN1bHQuZ2V0KFwic3VidGVzdERhdGFcIilbJ2F0dGVtcHRlZCddIHx8IDA7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBLbGFzc1N1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5ncmlkV2FzQXV0b3N0b3BwZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVmO1xuICAgIHJldHVybiAoKHJlZiA9IHRoaXMubGlua2VkUmVzdWx0LmdldChcInN1YnRlc3REYXRhXCIpKSAhPSBudWxsID8gcmVmWydhdXRvX3N0b3AnXSA6IHZvaWQgMCkgfHwgMDtcbiAgfTtcblxuICBLbGFzc1N1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlZjtcbiAgICByZXR1cm4gKHJlZiA9IHRoaXMucHJvdG90eXBlVmlldykgIT0gbnVsbCA/IHR5cGVvZiByZWYuY2xvc2UgPT09IFwiZnVuY3Rpb25cIiA/IHJlZi5jbG9zZSgpIDogdm9pZCAwIDogdm9pZCAwO1xuICB9O1xuXG4gIEtsYXNzU3VidGVzdFJ1blZpZXcucHJvdG90eXBlLmlzVmFsaWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMucHJvdG90eXBlUmVuZGVyZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvdG90eXBlVmlldy5pc1ZhbGlkICE9IG51bGwpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3RvdHlwZVZpZXcuaXNWYWxpZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIEtsYXNzU3VidGVzdFJ1blZpZXcucHJvdG90eXBlLmdldFNraXBwZWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5wcm90b3R5cGVWaWV3LmdldFNraXBwZWQgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvdG90eXBlVmlldy5nZXRTa2lwcGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IFwiUHJvdG90eXBlIHNraXBwaW5nIG5vdCBpbXBsZW1lbnRlZFwiO1xuICAgIH1cbiAgfTtcblxuICBLbGFzc1N1YnRlc3RSdW5WaWV3LnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5zdHVkZW50LmlkID09PSBcInRlc3RcIikge1xuICAgICAgaGlzdG9yeS5iYWNrKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwiY2xhc3MvXCIgKyAodGhpcy5zdHVkZW50LmdldCgna2xhc3NJZCcpKSArIFwiL1wiICsgKHRoaXMuc3VidGVzdC5nZXQoJ3BhcnQnKSksIHRydWUpO1xuICB9O1xuXG4gIEtsYXNzU3VidGVzdFJ1blZpZXcucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5zdHVkZW50LmlkID09PSBcInRlc3RcIikge1xuICAgICAgaGlzdG9yeS5iYWNrKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgcmV0dXJuIFRhbmdlcmluZS4kZGIudmlldyhUYW5nZXJpbmUuZGVzaWduX2RvYyArIFwiL3Jlc3VsdHNCeVN0dWRlbnRTdWJ0ZXN0XCIsIHtcbiAgICAgICAga2V5OiBbdGhpcy5zdHVkZW50LmlkLCB0aGlzLnN1YnRlc3QuaWRdLFxuICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgdmFyIGRhdHVtLCBpLCBsZW4sIHJvd3M7XG4gICAgICAgICAgICByb3dzID0gZGF0YS5yb3dzO1xuICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcm93cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICBkYXR1bSA9IHJvd3NbaV07XG4gICAgICAgICAgICAgIFRhbmdlcmluZS4kZGIuc2F2ZURvYygkLmV4dGVuZChkYXR1bS52YWx1ZSwge1xuICAgICAgICAgICAgICAgIFwib2xkXCI6IHRydWVcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlc3VsdC5hZGQoX3RoaXMucHJvdG90eXBlVmlldy5nZXRSZXN1bHQoKSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwiY2xhc3MvXCIgKyAoX3RoaXMuc3R1ZGVudC5nZXQoJ2tsYXNzSWQnKSkgKyBcIi9cIiArIChfdGhpcy5zdWJ0ZXN0LmdldCgncGFydCcpKSwgdHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3RvdHlwZVZpZXcuc2hvd0Vycm9ycygpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gS2xhc3NTdWJ0ZXN0UnVuVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIEtsYXNzU3VidGVzdFJlc3VsdFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcIktsYXNzU3VidGVzdFJlc3VsdFZpZXdcIlxuXG4gIGV2ZW50czogXG4gICAgXCJjbGljayAucnVuXCIgICAgICAgICAgIDogXCJjaGVja1J1blwiXG4gICAgXCJjbGljayAuYmFja1wiICAgICAgICAgIDogXCJiYWNrXCJcbiAgICBcImNsaWNrIC5zaG93X2l0ZW1pemVkXCIgOiBcInNob3dJdGVtaXplZFwiXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgQGFsbFJlc3VsdHMgPSBvcHRpb25zLmFsbFJlc3VsdHNcbiAgICBAcmVzdWx0cyA9IG9wdGlvbnMucmVzdWx0c1xuICAgIEByZXN1bHQgPSBAcmVzdWx0c1swXVxuICAgIEBwcmV2aW91cyA9IG9wdGlvbnMucHJldmlvdXNcbiAgICBAc3VidGVzdCA9IG9wdGlvbnMuc3VidGVzdFxuICAgIEBzdHVkZW50ID0gb3B0aW9ucy5zdHVkZW50XG5cbiAgZ290b1J1bjogLT5cbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiY2xhc3MvcnVuLyN7QG9wdGlvbnMuc3R1ZGVudC5pZH0vI3tAb3B0aW9ucy5zdWJ0ZXN0LmlkfVwiLCB0cnVlXG5cbiAgY2hlY2tSdW46IC0+XG4gICAgaGFzR3JpZExpbmsgPSBAc3VidGVzdC5oYXMoXCJncmlkTGlua0lkXCIpICYmIEBzdWJ0ZXN0LmdldChcImdyaWRMaW5rSWRcIikgIT0gXCJcIlxuICAgIGlmIG5vdCBoYXNHcmlkTGlua1xuICAgICAgQGdvdG9SdW4oKVxuICAgICAgcmV0dXJuXG5cbiAgICBncmlkTGlua0lkID0gQHN1YnRlc3QuZ2V0KFwiZ3JpZExpbmtJZFwiKVxuXG4gICAgcmVzdWx0ID0gQGFsbFJlc3VsdHMud2hlcmUgXG4gICAgICBcInN1YnRlc3RJZFwiIDogZ3JpZExpbmtJZFxuICAgICAgXCJzdHVkZW50SWRcIiA6IEBzdHVkZW50LmlkXG5cbiAgICBpZiByZXN1bHQubGVuZ3RoID09IDBcbiAgICAgIHN1YnRlc3QgPSBuZXcgU3VidGVzdCBcIl9pZFwiIDogZ3JpZExpbmtJZFxuICAgICAgc3VidGVzdC5mZXRjaFxuICAgICAgICBzdWNjZXNzOiA9PlxuICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiUGxlYXNlIGNvbXBsZXRlPGJyPjxiPiN7c3VidGVzdC5lc2NhcGUoXCJuYW1lXCIpfTwvYj48YnI+Zm9yPGJyPjxiPiN7QHN0dWRlbnQuZXNjYXBlKCduYW1lJyl9PC9iPjxicj5iZWZvcmUgdGhpcyB0ZXN0LlwiLCA1MDAwXG4gICAgICByZXR1cm5cblxuICAgIEBnb3RvUnVuKClcblxuICBzaG93SXRlbWl6ZWQ6IC0+IEAkZWwuZmluZChcIi5pdGVtaXplZFwiKS5mYWRlVG9nZ2xlKClcblxuICBiYWNrOiAtPiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiY2xhc3MvI3tAb3B0aW9ucy5zdHVkZW50LmdldChcImtsYXNzSWRcIil9LyN7QG9wdGlvbnMuc3VidGVzdC5nZXQoXCJwYXJ0XCIpfVwiLCB0cnVlXG5cbiAgcmVuZGVyOiAtPlxuXG4gICAgaWYgQHJlc3VsdD9cbiAgICAgIEByZXN1bHRzID0gQHJlc3VsdHNbMF1cblxuICAgICAgcmVzdWx0SFRNTCA9IFwiPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBzaG93X2l0ZW1pemVkJz4je3QoJ2l0ZW1pemVkIHJlc3VsdHMnKX08L2J1dHRvbj48dGFibGUgY2xhc3M9J2l0ZW1pemVkIGNvbmZpcm1hdGlvbic+PHRib2R5Pjx0cj48dGg+SXRlbTwvdGg+PHRoPlJlc3VsdDwvdGg+PC90cj5cIlxuICAgICAgaWYgQHN1YnRlc3QuZ2V0KFwicHJvdG90eXBlXCIpID09IFwiZ3JpZFwiXG4gICAgICAgIGZvciBkYXR1bSwgaSBpbiBAcmVzdWx0LmdldChcInN1YnRlc3REYXRhXCIpLml0ZW1zXG4gICAgICAgICAgcmVzdWx0SFRNTCArPSBcIjx0cj48dGQ+I3tkYXR1bS5pdGVtTGFiZWx9PC90ZD48dGQ+I3t0KGRhdHVtLml0ZW1SZXN1bHQpfTwvdGQ+PC90cj5cIlxuICAgICAgZWxzZSBpZiBAc3VidGVzdC5nZXQoXCJwcm90b3R5cGVcIikgPT0gXCJzdXJ2ZXlcIlxuICAgICAgICBmb3Iga2V5LCB2YWx1ZSBvZiBAcmVzdWx0LmdldChcInN1YnRlc3REYXRhXCIpXG4gICAgICAgICAgcmVzdWx0SFRNTCArPSBcIjx0cj48dGQ+I3trZXl9PC90ZD48dGQ+I3t0KHZhbHVlKX08L3RkPjwvdHI+XCJcbiAgICAgIHJlc3VsdEhUTUwgKz0gXCI8L3Rib2R5PjwvdGFibGU+PGJyPlwiXG5cbiAgICAgIHRpbWVzdGFtcCA9IG5ldyBEYXRlKEByZXN1bHQuZ2V0KFwic3RhcnRUaW1lXCIpKVxuXG4gICAgICB0YWtlbiA9IFwiXG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGQ+PGxhYmVsPlRha2VuIGxhc3Q8L2xhYmVsPjwvdGQ+PHRkPiN7dGltZXN0YW1wLmdldEZ1bGxZZWFyKCl9LyN7dGltZXN0YW1wLmdldE1vbnRoKCkrMX0vI3t0aW1lc3RhbXAuZ2V0RGF0ZSgpfTwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGQ+PGxhYmVsPlByZXZpb3VzIGF0dGVtcHRzPC9sYWJlbD48L3RkPjx0ZD4je0BwcmV2aW91c308L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgXCIgaWYgQHByZXZpb3VzID4gMFxuXG4gICAgcnVuQnV0dG9uID0gXCJcbiAgICAgIDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cbiAgICAgICAgPGltZyBzcmM9J2ltYWdlcy9pY29uX3J1bi5wbmcnIGNsYXNzPSdydW4gY2xpY2thYmxlJz5cbiAgICAgIDwvZGl2Pjxicj5cbiAgICBcIiBpZiBub3QgQHJlc3VsdD8gfHwgQHJlc3VsdC5nZXQ/KFwicmVwb3J0VHlwZVwiKSAhPSBcInByb2dyZXNzXCJcblxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGgxPlJlc3VsdDwvaDE+XG4gICAgICA8dGFibGU+PHRib2R5PlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRkPjxsYWJlbD5Bc3Nlc3NtZW50PC9sYWJlbD48L3RkPlxuICAgICAgICAgIDx0ZD4je0BzdWJ0ZXN0LmdldChcInBhcnRcIil9PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0ZD48bGFiZWw+U3R1ZGVudDwvbGFiZWw+PC90ZD5cbiAgICAgICAgICA8dGQ+I3tAc3R1ZGVudC5lc2NhcGUoXCJuYW1lXCIpfTwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGQ+PGxhYmVsPlN1YnRlc3Q8L2xhYmVsPjwvdGQ+XG4gICAgICAgICAgPHRkPiN7QHN1YnRlc3QuZXNjYXBlKFwibmFtZVwiKX08L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgICAje3Rha2VuIHx8IFwiXCJ9XG4gICAgICA8L3Rib2R5PjwvdGFibGU+XG4gICAgICAje3Jlc3VsdEhUTUwgfHwgXCJcIn1cbiAgICAgICN7cnVuQnV0dG9uIHx8IFwiXCJ9XG4gICAgICA8YnV0dG9uIGNsYXNzPSduYXZpZ2F0aW9uIGJhY2snPkJhY2s8L2J1dHRvbj5cbiAgICBcIlxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiIiwidmFyIEtsYXNzU3VidGVzdFJlc3VsdFZpZXcsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5LbGFzc1N1YnRlc3RSZXN1bHRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEtsYXNzU3VidGVzdFJlc3VsdFZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEtsYXNzU3VidGVzdFJlc3VsdFZpZXcoKSB7XG4gICAgcmV0dXJuIEtsYXNzU3VidGVzdFJlc3VsdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBLbGFzc1N1YnRlc3RSZXN1bHRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIktsYXNzU3VidGVzdFJlc3VsdFZpZXdcIjtcblxuICBLbGFzc1N1YnRlc3RSZXN1bHRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgXCJjbGljayAucnVuXCI6IFwiY2hlY2tSdW5cIixcbiAgICBcImNsaWNrIC5iYWNrXCI6IFwiYmFja1wiLFxuICAgIFwiY2xpY2sgLnNob3dfaXRlbWl6ZWRcIjogXCJzaG93SXRlbWl6ZWRcIlxuICB9O1xuXG4gIEtsYXNzU3VidGVzdFJlc3VsdFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5hbGxSZXN1bHRzID0gb3B0aW9ucy5hbGxSZXN1bHRzO1xuICAgIHRoaXMucmVzdWx0cyA9IG9wdGlvbnMucmVzdWx0cztcbiAgICB0aGlzLnJlc3VsdCA9IHRoaXMucmVzdWx0c1swXTtcbiAgICB0aGlzLnByZXZpb3VzID0gb3B0aW9ucy5wcmV2aW91cztcbiAgICB0aGlzLnN1YnRlc3QgPSBvcHRpb25zLnN1YnRlc3Q7XG4gICAgcmV0dXJuIHRoaXMuc3R1ZGVudCA9IG9wdGlvbnMuc3R1ZGVudDtcbiAgfTtcblxuICBLbGFzc1N1YnRlc3RSZXN1bHRWaWV3LnByb3RvdHlwZS5nb3RvUnVuID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJjbGFzcy9ydW4vXCIgKyB0aGlzLm9wdGlvbnMuc3R1ZGVudC5pZCArIFwiL1wiICsgdGhpcy5vcHRpb25zLnN1YnRlc3QuaWQsIHRydWUpO1xuICB9O1xuXG4gIEtsYXNzU3VidGVzdFJlc3VsdFZpZXcucHJvdG90eXBlLmNoZWNrUnVuID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdyaWRMaW5rSWQsIGhhc0dyaWRMaW5rLCByZXN1bHQsIHN1YnRlc3Q7XG4gICAgaGFzR3JpZExpbmsgPSB0aGlzLnN1YnRlc3QuaGFzKFwiZ3JpZExpbmtJZFwiKSAmJiB0aGlzLnN1YnRlc3QuZ2V0KFwiZ3JpZExpbmtJZFwiKSAhPT0gXCJcIjtcbiAgICBpZiAoIWhhc0dyaWRMaW5rKSB7XG4gICAgICB0aGlzLmdvdG9SdW4oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZ3JpZExpbmtJZCA9IHRoaXMuc3VidGVzdC5nZXQoXCJncmlkTGlua0lkXCIpO1xuICAgIHJlc3VsdCA9IHRoaXMuYWxsUmVzdWx0cy53aGVyZSh7XG4gICAgICBcInN1YnRlc3RJZFwiOiBncmlkTGlua0lkLFxuICAgICAgXCJzdHVkZW50SWRcIjogdGhpcy5zdHVkZW50LmlkXG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHN1YnRlc3QgPSBuZXcgU3VidGVzdCh7XG4gICAgICAgIFwiX2lkXCI6IGdyaWRMaW5rSWRcbiAgICAgIH0pO1xuICAgICAgc3VidGVzdC5mZXRjaCh7XG4gICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIlBsZWFzZSBjb21wbGV0ZTxicj48Yj5cIiArIChzdWJ0ZXN0LmVzY2FwZShcIm5hbWVcIikpICsgXCI8L2I+PGJyPmZvcjxicj48Yj5cIiArIChfdGhpcy5zdHVkZW50LmVzY2FwZSgnbmFtZScpKSArIFwiPC9iPjxicj5iZWZvcmUgdGhpcyB0ZXN0LlwiLCA1MDAwKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdvdG9SdW4oKTtcbiAgfTtcblxuICBLbGFzc1N1YnRlc3RSZXN1bHRWaWV3LnByb3RvdHlwZS5zaG93SXRlbWl6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5pdGVtaXplZFwiKS5mYWRlVG9nZ2xlKCk7XG4gIH07XG5cbiAgS2xhc3NTdWJ0ZXN0UmVzdWx0Vmlldy5wcm90b3R5cGUuYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwiY2xhc3MvXCIgKyAodGhpcy5vcHRpb25zLnN0dWRlbnQuZ2V0KFwia2xhc3NJZFwiKSkgKyBcIi9cIiArICh0aGlzLm9wdGlvbnMuc3VidGVzdC5nZXQoXCJwYXJ0XCIpKSwgdHJ1ZSk7XG4gIH07XG5cbiAgS2xhc3NTdWJ0ZXN0UmVzdWx0Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJhc2UsIGRhdHVtLCBpLCBqLCBrZXksIGxlbiwgcmVmLCByZWYxLCByZXN1bHRIVE1MLCBydW5CdXR0b24sIHRha2VuLCB0aW1lc3RhbXAsIHZhbHVlO1xuICAgIGlmICh0aGlzLnJlc3VsdCAhPSBudWxsKSB7XG4gICAgICB0aGlzLnJlc3VsdHMgPSB0aGlzLnJlc3VsdHNbMF07XG4gICAgICByZXN1bHRIVE1MID0gXCI8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHNob3dfaXRlbWl6ZWQnPlwiICsgKHQoJ2l0ZW1pemVkIHJlc3VsdHMnKSkgKyBcIjwvYnV0dG9uPjx0YWJsZSBjbGFzcz0naXRlbWl6ZWQgY29uZmlybWF0aW9uJz48dGJvZHk+PHRyPjx0aD5JdGVtPC90aD48dGg+UmVzdWx0PC90aD48L3RyPlwiO1xuICAgICAgaWYgKHRoaXMuc3VidGVzdC5nZXQoXCJwcm90b3R5cGVcIikgPT09IFwiZ3JpZFwiKSB7XG4gICAgICAgIHJlZiA9IHRoaXMucmVzdWx0LmdldChcInN1YnRlc3REYXRhXCIpLml0ZW1zO1xuICAgICAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICAgIGRhdHVtID0gcmVmW2ldO1xuICAgICAgICAgIHJlc3VsdEhUTUwgKz0gXCI8dHI+PHRkPlwiICsgZGF0dW0uaXRlbUxhYmVsICsgXCI8L3RkPjx0ZD5cIiArICh0KGRhdHVtLml0ZW1SZXN1bHQpKSArIFwiPC90ZD48L3RyPlwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuc3VidGVzdC5nZXQoXCJwcm90b3R5cGVcIikgPT09IFwic3VydmV5XCIpIHtcbiAgICAgICAgcmVmMSA9IHRoaXMucmVzdWx0LmdldChcInN1YnRlc3REYXRhXCIpO1xuICAgICAgICBmb3IgKGtleSBpbiByZWYxKSB7XG4gICAgICAgICAgdmFsdWUgPSByZWYxW2tleV07XG4gICAgICAgICAgcmVzdWx0SFRNTCArPSBcIjx0cj48dGQ+XCIgKyBrZXkgKyBcIjwvdGQ+PHRkPlwiICsgKHQodmFsdWUpKSArIFwiPC90ZD48L3RyPlwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXN1bHRIVE1MICs9IFwiPC90Ym9keT48L3RhYmxlPjxicj5cIjtcbiAgICAgIHRpbWVzdGFtcCA9IG5ldyBEYXRlKHRoaXMucmVzdWx0LmdldChcInN0YXJ0VGltZVwiKSk7XG4gICAgICBpZiAodGhpcy5wcmV2aW91cyA+IDApIHtcbiAgICAgICAgdGFrZW4gPSBcIjx0cj4gPHRkPjxsYWJlbD5UYWtlbiBsYXN0PC9sYWJlbD48L3RkPjx0ZD5cIiArICh0aW1lc3RhbXAuZ2V0RnVsbFllYXIoKSkgKyBcIi9cIiArICh0aW1lc3RhbXAuZ2V0TW9udGgoKSArIDEpICsgXCIvXCIgKyAodGltZXN0YW1wLmdldERhdGUoKSkgKyBcIjwvdGQ+IDwvdHI+IDx0cj4gPHRkPjxsYWJlbD5QcmV2aW91cyBhdHRlbXB0czwvbGFiZWw+PC90ZD48dGQ+XCIgKyB0aGlzLnByZXZpb3VzICsgXCI8L3RkPiA8L3RyPlwiO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKHRoaXMucmVzdWx0ID09IG51bGwpIHx8ICh0eXBlb2YgKGJhc2UgPSB0aGlzLnJlc3VsdCkuZ2V0ID09PSBcImZ1bmN0aW9uXCIgPyBiYXNlLmdldChcInJlcG9ydFR5cGVcIikgOiB2b2lkIDApICE9PSBcInByb2dyZXNzXCIpIHtcbiAgICAgIHJ1bkJ1dHRvbiA9IFwiPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8aW1nIHNyYz0naW1hZ2VzL2ljb25fcnVuLnBuZycgY2xhc3M9J3J1biBjbGlja2FibGUnPiA8L2Rpdj48YnI+XCI7XG4gICAgfVxuICAgIHRoaXMuJGVsLmh0bWwoXCI8aDE+UmVzdWx0PC9oMT4gPHRhYmxlPjx0Ym9keT4gPHRyPiA8dGQ+PGxhYmVsPkFzc2Vzc21lbnQ8L2xhYmVsPjwvdGQ+IDx0ZD5cIiArICh0aGlzLnN1YnRlc3QuZ2V0KFwicGFydFwiKSkgKyBcIjwvdGQ+IDwvdHI+IDx0cj4gPHRkPjxsYWJlbD5TdHVkZW50PC9sYWJlbD48L3RkPiA8dGQ+XCIgKyAodGhpcy5zdHVkZW50LmVzY2FwZShcIm5hbWVcIikpICsgXCI8L3RkPiA8L3RyPiA8dHI+IDx0ZD48bGFiZWw+U3VidGVzdDwvbGFiZWw+PC90ZD4gPHRkPlwiICsgKHRoaXMuc3VidGVzdC5lc2NhcGUoXCJuYW1lXCIpKSArIFwiPC90ZD4gPC90cj4gXCIgKyAodGFrZW4gfHwgXCJcIikgKyBcIiA8L3Rib2R5PjwvdGFibGU+IFwiICsgKHJlc3VsdEhUTUwgfHwgXCJcIikgKyBcIiBcIiArIChydW5CdXR0b24gfHwgXCJcIikgKyBcIiA8YnV0dG9uIGNsYXNzPSduYXZpZ2F0aW9uIGJhY2snPkJhY2s8L2J1dHRvbj5cIik7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIHJldHVybiBLbGFzc1N1YnRlc3RSZXN1bHRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgS2xhc3NNZW51VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIktsYXNzTWVudVZpZXdcIlxuXG4gIGV2ZW50czpcbiAgICAnY2xpY2sgLnJlZ2lzdHJhdGlvbicgOiAnZ290b0tsYXNzZXMnXG5cbiAgZ290b0tsYXNzZXM6IC0+XG4gICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZSBcImNsYXNzXCIsIHRydWVcblxuICBpbml0aWFsaXplOiAoIG9wdGlvbnMgKSAtPlxuXG4gIHJlbmRlcjogLT5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICA8aDE+VGFuZ2VyaW5lIENsYXNzPC9oMT5cbiAgICA8YnV0dG9uIGNsYXNzPSdjb2xsZWN0IGNvbW1hbmQnPkNvbGxlY3Q8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGNsYXNzPSdtYW5hZ2UgY29tbWFuZCc+TWFuYWdlPC9idXR0b24+XG4gICAgPGJ1dHRvbiBjbGFzcz0ncmVwb3J0cyBjb21tYW5kJz5SZXBvcnRzPC9idXR0b24+XG4gICAgPGJ1dHRvbiBjbGFzcz0nYWR2aWNlIGNvbW1hbmQnPkFkdmljZTwvYnV0dG9uPlxuICAgIDxidXR0b24gY2xhc3M9J3JlZ2lzdHJhdGlvbiBjb21tYW5kJz5DbGFzcyBSZWdpc3RyYXRpb248L2J1dHRvbj5cbiAgICBcbiAgICBcIlxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuIiwidmFyIEtsYXNzTWVudVZpZXcsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5LbGFzc01lbnVWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEtsYXNzTWVudVZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEtsYXNzTWVudVZpZXcoKSB7XG4gICAgcmV0dXJuIEtsYXNzTWVudVZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBLbGFzc01lbnVWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIktsYXNzTWVudVZpZXdcIjtcblxuICBLbGFzc01lbnVWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrIC5yZWdpc3RyYXRpb24nOiAnZ290b0tsYXNzZXMnXG4gIH07XG5cbiAgS2xhc3NNZW51Vmlldy5wcm90b3R5cGUuZ290b0tsYXNzZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcImNsYXNzXCIsIHRydWUpO1xuICB9O1xuXG4gIEtsYXNzTWVudVZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7fTtcblxuICBLbGFzc01lbnVWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRlbC5odG1sKFwiPGgxPlRhbmdlcmluZSBDbGFzczwvaDE+IDxidXR0b24gY2xhc3M9J2NvbGxlY3QgY29tbWFuZCc+Q29sbGVjdDwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdtYW5hZ2UgY29tbWFuZCc+TWFuYWdlPC9idXR0b24+IDxidXR0b24gY2xhc3M9J3JlcG9ydHMgY29tbWFuZCc+UmVwb3J0czwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdhZHZpY2UgY29tbWFuZCc+QWR2aWNlPC9idXR0b24+IDxidXR0b24gY2xhc3M9J3JlZ2lzdHJhdGlvbiBjb21tYW5kJz5DbGFzcyBSZWdpc3RyYXRpb248L2J1dHRvbj5cIik7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIHJldHVybiBLbGFzc01lbnVWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgS2xhc3NQYXJ0bHlWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZSA6IFwiS2xhc3NQYXJ0bHlWaWV3XCJcblxuICBldmVudHM6XG4gICAgXCJjbGljayAubmV4dF9wYXJ0XCIgICAgICAgICAgICAgICAgOiBcIm5leHRQYXJ0XCJcbiAgICBcImNsaWNrIC5wcmV2X3BhcnRcIiAgICAgICAgICAgICAgICA6IFwicHJldlBhcnRcIlxuICAgIFwiY2xpY2sgLmJhY2tcIiAgICAgICAgICAgICAgICAgICAgIDogXCJiYWNrXCJcbiAgICBcImNsaWNrIC5zdHVkZW50X3N1YnRlc3RcIiAgICAgICAgICA6IFwiZ290b1N0dWRlbnRTdWJ0ZXN0XCJcbiAgICBcImtleXVwICNjdXJyZW50X3BhcnRcIiAgICAgICAgICAgICA6IFwiZ290b0Fzc2Vzc21lbnRcIlxuICAgIFwia2V5dXAgI3NlYXJjaF9zdHVkZW50X25hbWVcIiAgICAgIDogXCJmaWx0ZXJTdHVkZW50c1wiXG4gICAgXCJmb2N1cyAjc2VhcmNoX3N0dWRlbnRfbmFtZVwiICAgICAgOiBcInNjcm9sbFRvTmFtZVwiXG5cbiAgc2Nyb2xsVG9OYW1lOiAtPlxuICAgIEAkZWwuZmluZChcIiNzZWFyY2hfc3R1ZGVudF9uYW1lXCIpLnNjcm9sbFRvKClcblxuICBmaWx0ZXJTdHVkZW50czogLT5cbiAgICB2YWwgPSBAJGVsLmZpbmQoXCIjc2VhcmNoX3N0dWRlbnRfbmFtZVwiKS52YWwoKVxuICAgIEBzZWFyY2ggPSB2YWxcbiAgICBAdXBkYXRlR3JpZFBhZ2UoKVxuXG4gIGdvdG9Bc3Nlc3NtZW50OiAtPlxuICAgIHZhbCA9IEAkZWwuZmluZChcIiNjdXJyZW50X3BhcnRcIikudmFsKClcbiAgICBpZiB2YWwgPT0gXCJcIiB0aGVuIHJldHVyblxuICAgIEBjdXJyZW50UGFydCA9IHBhcnNlSW50KHZhbClcbiAgICBAdXBkYXRlR3JpZFBhZ2UoKVxuXG4gIHVwZGF0ZTogLT5cbiAgICBAcmVuZGVyKClcbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiY2xhc3MvI3tAa2xhc3MuaWR9LyN7QGN1cnJlbnRQYXJ0fVwiXG5cbiAgYmFjazogLT5cbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiY2xhc3NcIiwgdHJ1ZVxuXG4gIGdvdG9TdHVkZW50U3VidGVzdDogKGV2ZW50KSAtPlxuICAgIHN0dWRlbnRJZCA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKFwiZGF0YS1zdHVkZW50SWRcIilcbiAgICBzdWJ0ZXN0SWQgPSAkKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtc3VidGVzdElkXCIpXG4gICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZSBcImNsYXNzL3Jlc3VsdC9zdHVkZW50L3N1YnRlc3QvI3tzdHVkZW50SWR9LyN7c3VidGVzdElkfVwiLCB0cnVlXG5cbiAgbmV4dFBhcnQ6IC0+XG4gICAgaWYgQGN1cnJlbnRQYXJ0IDwgQGxhc3RQYXJ0XG4gICAgICBAY3VycmVudFBhcnQrK1xuICAgICAgQHVwZGF0ZSgpXG5cbiAgcHJldlBhcnQ6IC0+IFxuICAgIGlmIEBjdXJyZW50UGFydCA+IDFcbiAgICAgIEBjdXJyZW50UGFydC0tIFxuICAgICAgQHVwZGF0ZSgpXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgICBAa2xhc3MgPSBvcHRpb25zLmtsYXNzXG4gICAgQHN0dWRlbnRzID0gb3B0aW9ucy5zdHVkZW50c1xuICAgIEByZXN1bHRzID0gb3B0aW9ucy5yZXN1bHRzXG5cblxuICAgIEBzZWFyY2ggPSBcIlwiXG4gICAgQGN1cnJlbnRQYXJ0ID0gb3B0aW9ucy5wYXJ0IHx8IDFcbiAgICBAc3VidGVzdHNCeVBhcnQgPSBbXVxuXG4gICAgQHN1YnRlc3RzQnlQYXJ0ID0gb3B0aW9ucy5zdWJ0ZXN0cy5pbmRleEJ5IFwicGFydFwiXG5cbiAgICBAbGFzdFBhcnQgPSBNYXRoLm1heC5hcHBseShALCBfLmNvbXBhY3Qob3B0aW9ucy5zdWJ0ZXN0cy5wbHVjayhcInBhcnRcIikpKSB8fCAxXG5cbiAgdXBkYXRlR3JpZFBhZ2U6LT5cbiAgICBAJGVsLmZpbmQoXCIjZ3JpZF9jb250YWluZXJcIikuaHRtbCBAZ2V0R3JpZFBhZ2UoKVxuXG4gIGdldEdyaWRQYWdlOiAtPlxuICAgIHRhYmxlID0gW11cbiAgICBzdWJ0ZXN0c1RoaXNQYXJ0ID0gQHN1YnRlc3RzQnlQYXJ0W0BjdXJyZW50UGFydF1cbiAgICByZXR1cm4gXCJObyBzdWJ0ZXN0cyBmb3IgdGhpcyBhc3Nlc3NtZW50LlwiIGlmIG5vdCBzdWJ0ZXN0c1RoaXNQYXJ0P1xuXG4gICAgZm9yIHN0dWRlbnQsIGkgaW4gQHN0dWRlbnRzLm1vZGVsc1xuICAgICAgdGFibGVbaV0gPSBbXVxuXG4gICAgICByZXN1bHRzRm9yVGhpc1N0dWRlbnQgPSBuZXcgS2xhc3NSZXN1bHRzIEByZXN1bHRzLndoZXJlIFwic3R1ZGVudElkXCIgOiBzdHVkZW50LmlkXG5cbiAgICAgIGZvciBzdWJ0ZXN0LCBqIGluIHN1YnRlc3RzVGhpc1BhcnRcbiAgICAgICAgc3R1ZGVudFJlc3VsdCA9IHJlc3VsdHNGb3JUaGlzU3R1ZGVudC53aGVyZSBcInN1YnRlc3RJZFwiIDogc3VidGVzdC5pZFxuICAgICAgICB0YWtlbiA9IHN0dWRlbnRSZXN1bHQubGVuZ3RoICE9IDBcbiAgICAgICAgaWYgfnN0dWRlbnQuZ2V0KFwibmFtZVwiKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoQHNlYXJjaC50b0xvd2VyQ2FzZSgpKSB8fCBAc2VhcmNoID09IFwiXCJcblxuICAgICAgICAgICMgY291bnQgYmFjayB0byBmb3J3YXJkIHRvIGdldCByZWNlbmN5IG9mIGxhc3QgcmVzdWx0IGZvciBjb2xvciBjb2RpbmdcbiAgICAgICAgICBmb3IgayBpbiBbNi4uMF1cbiAgICAgICAgICAgIHBhcnRUZXN0ID0gQGN1cnJlbnRQYXJ0IC0ga1xuICAgICAgICAgICAgc2VhcmNoID0gcmVzdWx0c0ZvclRoaXNTdHVkZW50LndoZXJlKFwicGFydFwiIDogcGFydFRlc3QsIFwiaXRlbVR5cGVcIiA6IHN1YnRlc3QuZ2V0KFwiaXRlbVR5cGVcIikpXG4gICAgICAgICAgICByZWNlbmN5ID0gayBpZiBzZWFyY2gubGVuZ3RoXG5cbiAgICAgICAgICBiYWNrZ3JvdW5kID1cbiAgICAgICAgICAgIGlmIHJlY2VuY3kgPD0gMlxuICAgICAgICAgICAgICBcIlwiXG4gICAgICAgICAgICBlbHNlIGlmIHJlY2VuY3kgPD0gNFxuICAgICAgICAgICAgICBcInJnYigyMjksIDIwOCwgMTQ5KVwiXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIFwicmdiKDIyMiwgMTU2LCAxMTcpXCJcblxuICAgICAgICAgIHRhYmxlW2ldLnB1c2hcbiAgICAgICAgICAgIFwiY29udGVudFwiICAgOiBpZiB0YWtlbiB0aGVuIFwiJiN4MjcxNDtcIiBlbHNlIFwiP1wiXG4gICAgICAgICAgICBcInRha2VuXCIgICAgIDogdGFrZW5cbiAgICAgICAgICAgIFwic3R1ZGVudElkXCIgOiBzdHVkZW50LmlkXG4gICAgICAgICAgICBcInN0dWRlbnROYW1lXCIgOiBzdHVkZW50LmdldChcIm5hbWVcIilcbiAgICAgICAgICAgIFwic3VidGVzdElkXCIgOiBzdWJ0ZXN0LmlkXG4gICAgICAgICAgICBcImJhY2tncm91bmRcIiA6IGJhY2tncm91bmRcblxuXG4gICAgIyBtYWtlIGhlYWRlcnNcbiAgICBncmlkUGFnZSA9IFwiPHRhYmxlIGNsYXNzPSdpbmZvX2JveF93aWRlJz48dGJvZHk+PHRyPjx0aD48L3RoPlwiXG4gICAgZm9yIHN1YnRlc3QgaW4gc3VidGVzdHNUaGlzUGFydFxuICAgICAgZ3JpZFBhZ2UgKz0gXCI8dGg+PGRpdiBjbGFzcz0ncGFydF9zdWJ0ZXN0X3JlcG9ydCcgZGF0YS1pZD0nI3tzdWJ0ZXN0LmlkfSc+I3tzdWJ0ZXN0LmdldCgnbmFtZScpfTwvZGl2PjwvdGg+XCJcbiAgICBncmlkUGFnZSArPSBcIjwvdHI+XCJcbiAgICBmb3Igcm93IGluIHRhYmxlXG4gICAgICBpZiByb3c/ICYmIHJvdy5sZW5ndGhcbiAgICAgICAgZ3JpZFBhZ2UgKz0gXCI8dHI+PHRkPjxkaXYgY2xhc3M9J3N0dWRlbnQnIGRhdGEtc3R1ZGVudElkPScje3Jvd1swXS5zdHVkZW50SWR9Jz4je3Jvd1swXS5zdHVkZW50TmFtZX08L2Rpdj48L3RkPlwiXG4gICAgICAgIGZvciBjZWxsLCBjb2x1bW4gaW4gcm93XG4gICAgICAgICAgdGFrZW5DbGFzcyA9IGlmIGNlbGwudGFrZW4gdGhlbiBcIiBzdWJ0ZXN0X3Rha2VuXCIgZWxzZSBcIlwiXG4gICAgICAgICAgZ3JpZFBhZ2UgKz0gXCI8dGQ+PGRpdiBjbGFzcz0nc3R1ZGVudF9zdWJ0ZXN0IGNvbW1hbmQgI3t0YWtlbkNsYXNzfScgZGF0YS10YWtlbj0nI3tjZWxsLnRha2VufScgZGF0YS1zdHVkZW50SWQ9JyN7Y2VsbC5zdHVkZW50SWR9JyBkYXRhLXN1YnRlc3RJZD0nI3tjZWxsLnN1YnRlc3RJZH0nIHN0eWxlPSdiYWNrZ3JvdW5kLWNvbG9yOiN7Y2VsbC5iYWNrZ3JvdW5kfSAhaW1wb3J0YW50Oyc+I3tjZWxsLmNvbnRlbnR9PC9kaXY+PC90ZD5cIlxuICAgICAgICBncmlkUGFnZSArPSBcIjwvdHI+XCJcbiAgICBncmlkUGFnZSArPSBcIjwvdGJvZHk+PC90YWJsZT5cIlxuXG4gICAgaWYgXy5mbGF0dGVuKHRhYmxlKS5sZW5ndGggPT0gMFxuICAgICAgZ3JpZFBhZ2UgPSBcIjxwIGNsYXNzPSdncmV5Jz5ObyBzdHVkZW50cyBmb3VuZC48L3A+XCJcblxuICAgIHJldHVybiBncmlkUGFnZVxuXG5cbiAgcmVuZGVyOiAtPlxuICAgIFxuICAgIGdyaWRQYWdlID0gQGdldEdyaWRQYWdlKClcbiAgICBcbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgIDxoMT4je3QoJ2Fzc2Vzc21lbnQgc3RhdHVzJyl9PC9oMT5cbiAgICAgIDxpbnB1dCBpZD0nc2VhcmNoX3N0dWRlbnRfbmFtZScgc3R5bGU9J3dpZHRoOiA5MiUgIWltcG9ydGFudCcgcGxhY2Vob2xkZXI9JyN7dCgnc2VhcmNoIHN0dWRlbnQgbmFtZScpfScgdHlwZT0ndGV4dCc+XG5cbiAgICAgIDxkaXYgaWQ9J2dyaWRfY29udGFpbmVyJz4je2dyaWRQYWdlfTwvZGl2Pjxicj5cbiAgICAgIDxoMj4je3QoJ2N1cnJlbnQgYXNzZXNzbWVudCcpfSA8L2gyPlxuICAgICAgXG4gICAgICA8YnV0dG9uIGNsYXNzPSdwcmV2X3BhcnQgY29tbWFuZCc+Jmx0OzwvYnV0dG9uPiA8aW5wdXQgdHlwZT0nbnVtYmVyJyB2YWx1ZT0nI3tAY3VycmVudFBhcnR9JyBpZD0nY3VycmVudF9wYXJ0Jz4gPGJ1dHRvbiBjbGFzcz0nbmV4dF9wYXJ0IGNvbW1hbmQnPiZndDs8L2J1dHRvbj48YnI+PGJyPlxuICAgICAgPGJ1dHRvbiBjbGFzcz0nYmFjayBuYXZpZ2F0aW9uJz4je3QoJ2JhY2snKX08L2J1dHRvbj4gXG4gICAgICBcIlxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiIiwidmFyIEtsYXNzUGFydGx5VmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbktsYXNzUGFydGx5VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChLbGFzc1BhcnRseVZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEtsYXNzUGFydGx5VmlldygpIHtcbiAgICByZXR1cm4gS2xhc3NQYXJ0bHlWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgS2xhc3NQYXJ0bHlWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIktsYXNzUGFydGx5Vmlld1wiO1xuXG4gIEtsYXNzUGFydGx5Vmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgIFwiY2xpY2sgLm5leHRfcGFydFwiOiBcIm5leHRQYXJ0XCIsXG4gICAgXCJjbGljayAucHJldl9wYXJ0XCI6IFwicHJldlBhcnRcIixcbiAgICBcImNsaWNrIC5iYWNrXCI6IFwiYmFja1wiLFxuICAgIFwiY2xpY2sgLnN0dWRlbnRfc3VidGVzdFwiOiBcImdvdG9TdHVkZW50U3VidGVzdFwiLFxuICAgIFwia2V5dXAgI2N1cnJlbnRfcGFydFwiOiBcImdvdG9Bc3Nlc3NtZW50XCIsXG4gICAgXCJrZXl1cCAjc2VhcmNoX3N0dWRlbnRfbmFtZVwiOiBcImZpbHRlclN0dWRlbnRzXCIsXG4gICAgXCJmb2N1cyAjc2VhcmNoX3N0dWRlbnRfbmFtZVwiOiBcInNjcm9sbFRvTmFtZVwiXG4gIH07XG5cbiAgS2xhc3NQYXJ0bHlWaWV3LnByb3RvdHlwZS5zY3JvbGxUb05hbWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNzZWFyY2hfc3R1ZGVudF9uYW1lXCIpLnNjcm9sbFRvKCk7XG4gIH07XG5cbiAgS2xhc3NQYXJ0bHlWaWV3LnByb3RvdHlwZS5maWx0ZXJTdHVkZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWw7XG4gICAgdmFsID0gdGhpcy4kZWwuZmluZChcIiNzZWFyY2hfc3R1ZGVudF9uYW1lXCIpLnZhbCgpO1xuICAgIHRoaXMuc2VhcmNoID0gdmFsO1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZUdyaWRQYWdlKCk7XG4gIH07XG5cbiAgS2xhc3NQYXJ0bHlWaWV3LnByb3RvdHlwZS5nb3RvQXNzZXNzbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWw7XG4gICAgdmFsID0gdGhpcy4kZWwuZmluZChcIiNjdXJyZW50X3BhcnRcIikudmFsKCk7XG4gICAgaWYgKHZhbCA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRQYXJ0ID0gcGFyc2VJbnQodmFsKTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVHcmlkUGFnZSgpO1xuICB9O1xuXG4gIEtsYXNzUGFydGx5Vmlldy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZW5kZXIoKTtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcImNsYXNzL1wiICsgdGhpcy5rbGFzcy5pZCArIFwiL1wiICsgdGhpcy5jdXJyZW50UGFydCk7XG4gIH07XG5cbiAgS2xhc3NQYXJ0bHlWaWV3LnByb3RvdHlwZS5iYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJjbGFzc1wiLCB0cnVlKTtcbiAgfTtcblxuICBLbGFzc1BhcnRseVZpZXcucHJvdG90eXBlLmdvdG9TdHVkZW50U3VidGVzdCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHN0dWRlbnRJZCwgc3VidGVzdElkO1xuICAgIHN0dWRlbnRJZCA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKFwiZGF0YS1zdHVkZW50SWRcIik7XG4gICAgc3VidGVzdElkID0gJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLXN1YnRlc3RJZFwiKTtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcImNsYXNzL3Jlc3VsdC9zdHVkZW50L3N1YnRlc3QvXCIgKyBzdHVkZW50SWQgKyBcIi9cIiArIHN1YnRlc3RJZCwgdHJ1ZSk7XG4gIH07XG5cbiAgS2xhc3NQYXJ0bHlWaWV3LnByb3RvdHlwZS5uZXh0UGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRQYXJ0IDwgdGhpcy5sYXN0UGFydCkge1xuICAgICAgdGhpcy5jdXJyZW50UGFydCsrO1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIEtsYXNzUGFydGx5Vmlldy5wcm90b3R5cGUucHJldlBhcnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50UGFydCA+IDEpIHtcbiAgICAgIHRoaXMuY3VycmVudFBhcnQtLTtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBLbGFzc1BhcnRseVZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5rbGFzcyA9IG9wdGlvbnMua2xhc3M7XG4gICAgdGhpcy5zdHVkZW50cyA9IG9wdGlvbnMuc3R1ZGVudHM7XG4gICAgdGhpcy5yZXN1bHRzID0gb3B0aW9ucy5yZXN1bHRzO1xuICAgIHRoaXMuc2VhcmNoID0gXCJcIjtcbiAgICB0aGlzLmN1cnJlbnRQYXJ0ID0gb3B0aW9ucy5wYXJ0IHx8IDE7XG4gICAgdGhpcy5zdWJ0ZXN0c0J5UGFydCA9IFtdO1xuICAgIHRoaXMuc3VidGVzdHNCeVBhcnQgPSBvcHRpb25zLnN1YnRlc3RzLmluZGV4QnkoXCJwYXJ0XCIpO1xuICAgIHJldHVybiB0aGlzLmxhc3RQYXJ0ID0gTWF0aC5tYXguYXBwbHkodGhpcywgXy5jb21wYWN0KG9wdGlvbnMuc3VidGVzdHMucGx1Y2soXCJwYXJ0XCIpKSkgfHwgMTtcbiAgfTtcblxuICBLbGFzc1BhcnRseVZpZXcucHJvdG90eXBlLnVwZGF0ZUdyaWRQYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjZ3JpZF9jb250YWluZXJcIikuaHRtbCh0aGlzLmdldEdyaWRQYWdlKCkpO1xuICB9O1xuXG4gIEtsYXNzUGFydGx5Vmlldy5wcm90b3R5cGUuZ2V0R3JpZFBhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYmFja2dyb3VuZCwgY2VsbCwgY29sdW1uLCBncmlkUGFnZSwgaSwgaiwgaywgbCwgbGVuLCBsZW4xLCBsZW4yLCBsZW4zLCBsZW40LCBtLCBuLCBvLCBwLCBwYXJ0VGVzdCwgcSwgcmVjZW5jeSwgcmVmLCByZXN1bHRzRm9yVGhpc1N0dWRlbnQsIHJvdywgc2VhcmNoLCBzdHVkZW50LCBzdHVkZW50UmVzdWx0LCBzdWJ0ZXN0LCBzdWJ0ZXN0c1RoaXNQYXJ0LCB0YWJsZSwgdGFrZW4sIHRha2VuQ2xhc3M7XG4gICAgdGFibGUgPSBbXTtcbiAgICBzdWJ0ZXN0c1RoaXNQYXJ0ID0gdGhpcy5zdWJ0ZXN0c0J5UGFydFt0aGlzLmN1cnJlbnRQYXJ0XTtcbiAgICBpZiAoc3VidGVzdHNUaGlzUGFydCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gXCJObyBzdWJ0ZXN0cyBmb3IgdGhpcyBhc3Nlc3NtZW50LlwiO1xuICAgIH1cbiAgICByZWYgPSB0aGlzLnN0dWRlbnRzLm1vZGVscztcbiAgICBmb3IgKGkgPSBsID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgbCA8IGxlbjsgaSA9ICsrbCkge1xuICAgICAgc3R1ZGVudCA9IHJlZltpXTtcbiAgICAgIHRhYmxlW2ldID0gW107XG4gICAgICByZXN1bHRzRm9yVGhpc1N0dWRlbnQgPSBuZXcgS2xhc3NSZXN1bHRzKHRoaXMucmVzdWx0cy53aGVyZSh7XG4gICAgICAgIFwic3R1ZGVudElkXCI6IHN0dWRlbnQuaWRcbiAgICAgIH0pKTtcbiAgICAgIGZvciAoaiA9IG0gPSAwLCBsZW4xID0gc3VidGVzdHNUaGlzUGFydC5sZW5ndGg7IG0gPCBsZW4xOyBqID0gKyttKSB7XG4gICAgICAgIHN1YnRlc3QgPSBzdWJ0ZXN0c1RoaXNQYXJ0W2pdO1xuICAgICAgICBzdHVkZW50UmVzdWx0ID0gcmVzdWx0c0ZvclRoaXNTdHVkZW50LndoZXJlKHtcbiAgICAgICAgICBcInN1YnRlc3RJZFwiOiBzdWJ0ZXN0LmlkXG4gICAgICAgIH0pO1xuICAgICAgICB0YWtlbiA9IHN0dWRlbnRSZXN1bHQubGVuZ3RoICE9PSAwO1xuICAgICAgICBpZiAofnN0dWRlbnQuZ2V0KFwibmFtZVwiKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YodGhpcy5zZWFyY2gudG9Mb3dlckNhc2UoKSkgfHwgdGhpcy5zZWFyY2ggPT09IFwiXCIpIHtcbiAgICAgICAgICBmb3IgKGsgPSBuID0gNjsgbiA+PSAwOyBrID0gLS1uKSB7XG4gICAgICAgICAgICBwYXJ0VGVzdCA9IHRoaXMuY3VycmVudFBhcnQgLSBrO1xuICAgICAgICAgICAgc2VhcmNoID0gcmVzdWx0c0ZvclRoaXNTdHVkZW50LndoZXJlKHtcbiAgICAgICAgICAgICAgXCJwYXJ0XCI6IHBhcnRUZXN0LFxuICAgICAgICAgICAgICBcIml0ZW1UeXBlXCI6IHN1YnRlc3QuZ2V0KFwiaXRlbVR5cGVcIilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHNlYXJjaC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmVjZW5jeSA9IGs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJhY2tncm91bmQgPSByZWNlbmN5IDw9IDIgPyBcIlwiIDogcmVjZW5jeSA8PSA0ID8gXCJyZ2IoMjI5LCAyMDgsIDE0OSlcIiA6IFwicmdiKDIyMiwgMTU2LCAxMTcpXCI7XG4gICAgICAgICAgdGFibGVbaV0ucHVzaCh7XG4gICAgICAgICAgICBcImNvbnRlbnRcIjogdGFrZW4gPyBcIiYjeDI3MTQ7XCIgOiBcIj9cIixcbiAgICAgICAgICAgIFwidGFrZW5cIjogdGFrZW4sXG4gICAgICAgICAgICBcInN0dWRlbnRJZFwiOiBzdHVkZW50LmlkLFxuICAgICAgICAgICAgXCJzdHVkZW50TmFtZVwiOiBzdHVkZW50LmdldChcIm5hbWVcIiksXG4gICAgICAgICAgICBcInN1YnRlc3RJZFwiOiBzdWJ0ZXN0LmlkLFxuICAgICAgICAgICAgXCJiYWNrZ3JvdW5kXCI6IGJhY2tncm91bmRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBncmlkUGFnZSA9IFwiPHRhYmxlIGNsYXNzPSdpbmZvX2JveF93aWRlJz48dGJvZHk+PHRyPjx0aD48L3RoPlwiO1xuICAgIGZvciAobyA9IDAsIGxlbjIgPSBzdWJ0ZXN0c1RoaXNQYXJ0Lmxlbmd0aDsgbyA8IGxlbjI7IG8rKykge1xuICAgICAgc3VidGVzdCA9IHN1YnRlc3RzVGhpc1BhcnRbb107XG4gICAgICBncmlkUGFnZSArPSBcIjx0aD48ZGl2IGNsYXNzPSdwYXJ0X3N1YnRlc3RfcmVwb3J0JyBkYXRhLWlkPSdcIiArIHN1YnRlc3QuaWQgKyBcIic+XCIgKyAoc3VidGVzdC5nZXQoJ25hbWUnKSkgKyBcIjwvZGl2PjwvdGg+XCI7XG4gICAgfVxuICAgIGdyaWRQYWdlICs9IFwiPC90cj5cIjtcbiAgICBmb3IgKHAgPSAwLCBsZW4zID0gdGFibGUubGVuZ3RoOyBwIDwgbGVuMzsgcCsrKSB7XG4gICAgICByb3cgPSB0YWJsZVtwXTtcbiAgICAgIGlmICgocm93ICE9IG51bGwpICYmIHJvdy5sZW5ndGgpIHtcbiAgICAgICAgZ3JpZFBhZ2UgKz0gXCI8dHI+PHRkPjxkaXYgY2xhc3M9J3N0dWRlbnQnIGRhdGEtc3R1ZGVudElkPSdcIiArIHJvd1swXS5zdHVkZW50SWQgKyBcIic+XCIgKyByb3dbMF0uc3R1ZGVudE5hbWUgKyBcIjwvZGl2PjwvdGQ+XCI7XG4gICAgICAgIGZvciAoY29sdW1uID0gcSA9IDAsIGxlbjQgPSByb3cubGVuZ3RoOyBxIDwgbGVuNDsgY29sdW1uID0gKytxKSB7XG4gICAgICAgICAgY2VsbCA9IHJvd1tjb2x1bW5dO1xuICAgICAgICAgIHRha2VuQ2xhc3MgPSBjZWxsLnRha2VuID8gXCIgc3VidGVzdF90YWtlblwiIDogXCJcIjtcbiAgICAgICAgICBncmlkUGFnZSArPSBcIjx0ZD48ZGl2IGNsYXNzPSdzdHVkZW50X3N1YnRlc3QgY29tbWFuZCBcIiArIHRha2VuQ2xhc3MgKyBcIicgZGF0YS10YWtlbj0nXCIgKyBjZWxsLnRha2VuICsgXCInIGRhdGEtc3R1ZGVudElkPSdcIiArIGNlbGwuc3R1ZGVudElkICsgXCInIGRhdGEtc3VidGVzdElkPSdcIiArIGNlbGwuc3VidGVzdElkICsgXCInIHN0eWxlPSdiYWNrZ3JvdW5kLWNvbG9yOlwiICsgY2VsbC5iYWNrZ3JvdW5kICsgXCIgIWltcG9ydGFudDsnPlwiICsgY2VsbC5jb250ZW50ICsgXCI8L2Rpdj48L3RkPlwiO1xuICAgICAgICB9XG4gICAgICAgIGdyaWRQYWdlICs9IFwiPC90cj5cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ3JpZFBhZ2UgKz0gXCI8L3Rib2R5PjwvdGFibGU+XCI7XG4gICAgaWYgKF8uZmxhdHRlbih0YWJsZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBncmlkUGFnZSA9IFwiPHAgY2xhc3M9J2dyZXknPk5vIHN0dWRlbnRzIGZvdW5kLjwvcD5cIjtcbiAgICB9XG4gICAgcmV0dXJuIGdyaWRQYWdlO1xuICB9O1xuXG4gIEtsYXNzUGFydGx5Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdyaWRQYWdlO1xuICAgIGdyaWRQYWdlID0gdGhpcy5nZXRHcmlkUGFnZSgpO1xuICAgIHRoaXMuJGVsLmh0bWwoXCI8aDE+XCIgKyAodCgnYXNzZXNzbWVudCBzdGF0dXMnKSkgKyBcIjwvaDE+IDxpbnB1dCBpZD0nc2VhcmNoX3N0dWRlbnRfbmFtZScgc3R5bGU9J3dpZHRoOiA5MiUgIWltcG9ydGFudCcgcGxhY2Vob2xkZXI9J1wiICsgKHQoJ3NlYXJjaCBzdHVkZW50IG5hbWUnKSkgKyBcIicgdHlwZT0ndGV4dCc+IDxkaXYgaWQ9J2dyaWRfY29udGFpbmVyJz5cIiArIGdyaWRQYWdlICsgXCI8L2Rpdj48YnI+IDxoMj5cIiArICh0KCdjdXJyZW50IGFzc2Vzc21lbnQnKSkgKyBcIiA8L2gyPiA8YnV0dG9uIGNsYXNzPSdwcmV2X3BhcnQgY29tbWFuZCc+Jmx0OzwvYnV0dG9uPiA8aW5wdXQgdHlwZT0nbnVtYmVyJyB2YWx1ZT0nXCIgKyB0aGlzLmN1cnJlbnRQYXJ0ICsgXCInIGlkPSdjdXJyZW50X3BhcnQnPiA8YnV0dG9uIGNsYXNzPSduZXh0X3BhcnQgY29tbWFuZCc+Jmd0OzwvYnV0dG9uPjxicj48YnI+IDxidXR0b24gY2xhc3M9J2JhY2sgbmF2aWdhdGlvbic+XCIgKyAodCgnYmFjaycpKSArIFwiPC9idXR0b24+XCIpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICByZXR1cm4gS2xhc3NQYXJ0bHlWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgS2xhc3NSZXN1bHQgZXh0ZW5kcyBCYWNrYm9uZS5Nb2RlbFxuXG4gIHVybCA6IFwicmVzdWx0XCJcblxuICBhZGQ6ICggc3VidGVzdERhdGFFbGVtZW50LCBjYWxsYmFjayApIC0+XG4gICAgQHNhdmVcbiAgICAgICdzdWJ0ZXN0RGF0YScgOiBzdWJ0ZXN0RGF0YUVsZW1lbnRcbiAgICAsXG4gICAgICBzdWNjZXNzOiA9PiBjYWxsYmFjaygpXG5cbiAgZ2V0SXRlbWl6ZWQ6IChvcHRpb25zKSAtPlxuICBcbiAgICBpZiBAYXR0cmlidXRlcy5wcm90b3R5cGUgPT0gXCJncmlkXCJcbiAgICAgIGl0ZW1pemVkID0gQGF0dHJpYnV0ZXMuc3VidGVzdERhdGEuaXRlbXNcbiAgICBlbHNlIGlmIEBhdHRyaWJ1dGVzLnByb3RvdHlwZSA9PSBcInN1cnZleVwiXG4gICAgICBpdGVtaXplZCA9IFtdXG4gICAgICBmb3Iga2V5LCB2YWx1ZSBvZiBAYXR0cmlidXRlcy5zdWJ0ZXN0RGF0YVxuICAgICAgICBpdGVtaXplZC5wdXNoXG4gICAgICAgICAgaXRlbUxhYmVsOiBrZXlcbiAgICAgICAgICBpdGVtUmVzdWx0OiB2YWx1ZVxuXG4gICAgcmV0dXJuIGl0ZW1pemVkXG5cbiAgZ2V0OiAob3B0aW9ucykgLT5cbiAgICBpZiBvcHRpb25zID09IFwiY29ycmVjdFwiICAgICB0aGVuIHJldHVybiBAZ3JpZENvdW50IFtcImNvcnJlY3RcIiwgMV1cbiAgICBpZiBvcHRpb25zID09IFwiaW5jb3JyZWN0XCIgICB0aGVuIHJldHVybiBAZ3JpZENvdW50IFtcImluY29ycmVjdFwiLCAwXVxuICAgIGlmIG9wdGlvbnMgPT0gXCJtaXNzaW5nXCIgICAgIHRoZW4gcmV0dXJuIEBncmlkQ291bnQgW1wibWlzc2luZ1wiLCA5XVxuXG4gICAgaWYgb3B0aW9ucyA9PSBcInRvdGFsXCJcbiAgICAgIGlmIEBhdHRyaWJ1dGVzLnByb3RvdHlwZSA9PSBcImdyaWRcIlxuICAgICAgICByZXR1cm4gQGF0dHJpYnV0ZXMuc3VidGVzdERhdGEuaXRlbXMubGVuZ3RoXG4gICAgICBlbHNlIGlmIEBhdHRyaWJ1dGVzLnByb3RvdHlwZSA9PSBcInN1cnZleVwiXG4gICAgICAgIHJldHVybiBfLmtleXMoQGF0dHJpYnV0ZXMuc3VidGVzdERhdGEpLmxlbmd0aFxuICAgIFxuICAgIGlmIG9wdGlvbnMgPT0gXCJhdHRlbXB0ZWRcIiAgIHRoZW4gcmV0dXJuIEBnZXRBdHRlbXB0ZWQoKVxuICAgIGlmIG9wdGlvbnMgPT0gXCJ0aW1lX3JlbWFpblwiIHRoZW4gcmV0dXJuIEBnZXRUaW1lUmVtYWluKClcblxuICAgICMgaWYgbm8gc3BlY2lhbCBwcm9wZXJ0aWVzIGRldGVjdGVkIGxldCdzIGdvIHdpdGggc3VwZXJcbiAgICAjIHJlc3VsdCA9IEtsYXNzUmVzdWx0Ll9fc3VwZXJfXy5nZXQuYXBwbHkgQCwgYXJndW1lbnRzXG5cbiAgICBzdXBlcihvcHRpb25zKVxuXG4gIGdyaWRDb3VudDogKHZhbHVlKSAtPlxuICAgIGNvdW50ID0gMFxuICAgIGlmIEBhdHRyaWJ1dGVzLnByb3RvdHlwZSA9PSBcImdyaWRcIlxuICAgICAgaWYgXy5pc0FycmF5KHZhbHVlKVxuICAgICAgICAoY291bnQrKyBpZiB+dmFsdWUuaW5kZXhPZihpdGVtLml0ZW1SZXN1bHQpKSBmb3IgaXRlbSBpbiBAZ2V0KFwic3VidGVzdERhdGFcIikuaXRlbXMgICBcbiAgICAgIGVsc2VcbiAgICAgICAgKGNvdW50KysgaWYgaXRlbS5pdGVtUmVzdWx0ID09IHZhbHVlKSBmb3IgaXRlbSBpbiBAZ2V0KFwic3VidGVzdERhdGFcIikuaXRlbXMgXG4gICAgZWxzZSBpZiBAYXR0cmlidXRlcy5wcm90b3R5cGUgPT0gXCJzdXJ2ZXlcIlxuICAgICAgaWYgXy5pc0FycmF5KHZhbHVlKVxuICAgICAgICBmb3IgaywgdiBvZiBAYXR0cmlidXRlcy5zdWJ0ZXN0RGF0YVxuICAgICAgICAgIGNvdW50KysgaWYgKH52YWx1ZS5pbmRleE9mKHYpIHx8IH52YWx1ZS5pbmRleE9mKHBhcnNlSW50KHYpKSlcbiAgICAgIGVsc2VcbiAgICAgICAgZm9yIGssIHYgb2YgQGF0dHJpYnV0ZXMuc3VidGVzdERhdGFcbiAgICAgICAgICBjb3VudCsrIGlmICh2YWx1ZSA9PSB2IHx8IHZhbHVlID09IHBhcnNlSW50KHYpKVxuICAgICAgICAgICAgXG4gICAgcmV0dXJuIGNvdW50XG5cbiAgZ2V0QXR0ZW1wdGVkOiAtPlxuICAgIHJldHVybiBwYXJzZUludCggQGdldChcInN1YnRlc3REYXRhXCIpLmF0dGVtcHRlZCApXG5cbiAgZ2V0VGltZVJlbWFpbjogLT5cbiAgICByZXR1cm4gcGFyc2VJbnQoIEBnZXQoXCJzdWJ0ZXN0RGF0YVwiKS50aW1lX3JlbWFpbiApXG5cbiAgZ2V0Q29ycmVjdFBlclNlY29uZHM6ICggc2Vjb25kc0FsbG93ZWQgKSAtPlxuICAgIE1hdGgucm91bmQoICggQGdldChcImNvcnJlY3RcIikgLyAoIHNlY29uZHNBbGxvd2VkIC0gQGdldFRpbWVSZW1haW4oKSApICkgKiBzZWNvbmRzQWxsb3dlZCApXG4iLCJ2YXIgS2xhc3NSZXN1bHQsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5LbGFzc1Jlc3VsdCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChLbGFzc1Jlc3VsdCwgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gS2xhc3NSZXN1bHQoKSB7XG4gICAgcmV0dXJuIEtsYXNzUmVzdWx0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgS2xhc3NSZXN1bHQucHJvdG90eXBlLnVybCA9IFwicmVzdWx0XCI7XG5cbiAgS2xhc3NSZXN1bHQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKHN1YnRlc3REYXRhRWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5zYXZlKHtcbiAgICAgICdzdWJ0ZXN0RGF0YSc6IHN1YnRlc3REYXRhRWxlbWVudFxuICAgIH0sIHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIEtsYXNzUmVzdWx0LnByb3RvdHlwZS5nZXRJdGVtaXplZCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgaXRlbWl6ZWQsIGtleSwgcmVmLCB2YWx1ZTtcbiAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLnByb3RvdHlwZSA9PT0gXCJncmlkXCIpIHtcbiAgICAgIGl0ZW1pemVkID0gdGhpcy5hdHRyaWJ1dGVzLnN1YnRlc3REYXRhLml0ZW1zO1xuICAgIH0gZWxzZSBpZiAodGhpcy5hdHRyaWJ1dGVzLnByb3RvdHlwZSA9PT0gXCJzdXJ2ZXlcIikge1xuICAgICAgaXRlbWl6ZWQgPSBbXTtcbiAgICAgIHJlZiA9IHRoaXMuYXR0cmlidXRlcy5zdWJ0ZXN0RGF0YTtcbiAgICAgIGZvciAoa2V5IGluIHJlZikge1xuICAgICAgICB2YWx1ZSA9IHJlZltrZXldO1xuICAgICAgICBpdGVtaXplZC5wdXNoKHtcbiAgICAgICAgICBpdGVtTGFiZWw6IGtleSxcbiAgICAgICAgICBpdGVtUmVzdWx0OiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGl0ZW1pemVkO1xuICB9O1xuXG4gIEtsYXNzUmVzdWx0LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IFwiY29ycmVjdFwiKSB7XG4gICAgICByZXR1cm4gdGhpcy5ncmlkQ291bnQoW1wiY29ycmVjdFwiLCAxXSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09PSBcImluY29ycmVjdFwiKSB7XG4gICAgICByZXR1cm4gdGhpcy5ncmlkQ291bnQoW1wiaW5jb3JyZWN0XCIsIDBdKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMgPT09IFwibWlzc2luZ1wiKSB7XG4gICAgICByZXR1cm4gdGhpcy5ncmlkQ291bnQoW1wibWlzc2luZ1wiLCA5XSk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09PSBcInRvdGFsXCIpIHtcbiAgICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMucHJvdG90eXBlID09PSBcImdyaWRcIikge1xuICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLnN1YnRlc3REYXRhLml0ZW1zLmxlbmd0aDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hdHRyaWJ1dGVzLnByb3RvdHlwZSA9PT0gXCJzdXJ2ZXlcIikge1xuICAgICAgICByZXR1cm4gXy5rZXlzKHRoaXMuYXR0cmlidXRlcy5zdWJ0ZXN0RGF0YSkubGVuZ3RoO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucyA9PT0gXCJhdHRlbXB0ZWRcIikge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0ZW1wdGVkKCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09PSBcInRpbWVfcmVtYWluXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFRpbWVSZW1haW4oKTtcbiAgICB9XG4gICAgcmV0dXJuIEtsYXNzUmVzdWx0Ll9fc3VwZXJfXy5nZXQuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgfTtcblxuICBLbGFzc1Jlc3VsdC5wcm90b3R5cGUuZ3JpZENvdW50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgY291bnQsIGksIGl0ZW0sIGosIGssIGxlbiwgbGVuMSwgcmVmLCByZWYxLCByZWYyLCByZWYzLCB2O1xuICAgIGNvdW50ID0gMDtcbiAgICBpZiAodGhpcy5hdHRyaWJ1dGVzLnByb3RvdHlwZSA9PT0gXCJncmlkXCIpIHtcbiAgICAgIGlmIChfLmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJlZiA9IHRoaXMuZ2V0KFwic3VidGVzdERhdGFcIikuaXRlbXM7XG4gICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIGl0ZW0gPSByZWZbaV07XG4gICAgICAgICAgaWYgKH52YWx1ZS5pbmRleE9mKGl0ZW0uaXRlbVJlc3VsdCkpIHtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWYxID0gdGhpcy5nZXQoXCJzdWJ0ZXN0RGF0YVwiKS5pdGVtcztcbiAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgICAgaXRlbSA9IHJlZjFbal07XG4gICAgICAgICAgaWYgKGl0ZW0uaXRlbVJlc3VsdCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLmF0dHJpYnV0ZXMucHJvdG90eXBlID09PSBcInN1cnZleVwiKSB7XG4gICAgICBpZiAoXy5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZWYyID0gdGhpcy5hdHRyaWJ1dGVzLnN1YnRlc3REYXRhO1xuICAgICAgICBmb3IgKGsgaW4gcmVmMikge1xuICAgICAgICAgIHYgPSByZWYyW2tdO1xuICAgICAgICAgIGlmICh+dmFsdWUuaW5kZXhPZih2KSB8fCB+dmFsdWUuaW5kZXhPZihwYXJzZUludCh2KSkpIHtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWYzID0gdGhpcy5hdHRyaWJ1dGVzLnN1YnRlc3REYXRhO1xuICAgICAgICBmb3IgKGsgaW4gcmVmMykge1xuICAgICAgICAgIHYgPSByZWYzW2tdO1xuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdiB8fCB2YWx1ZSA9PT0gcGFyc2VJbnQodikpIHtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbiAgfTtcblxuICBLbGFzc1Jlc3VsdC5wcm90b3R5cGUuZ2V0QXR0ZW1wdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuZ2V0KFwic3VidGVzdERhdGFcIikuYXR0ZW1wdGVkKTtcbiAgfTtcblxuICBLbGFzc1Jlc3VsdC5wcm90b3R5cGUuZ2V0VGltZVJlbWFpbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwYXJzZUludCh0aGlzLmdldChcInN1YnRlc3REYXRhXCIpLnRpbWVfcmVtYWluKTtcbiAgfTtcblxuICBLbGFzc1Jlc3VsdC5wcm90b3R5cGUuZ2V0Q29ycmVjdFBlclNlY29uZHMgPSBmdW5jdGlvbihzZWNvbmRzQWxsb3dlZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKCh0aGlzLmdldChcImNvcnJlY3RcIikgLyAoc2Vjb25kc0FsbG93ZWQgLSB0aGlzLmdldFRpbWVSZW1haW4oKSkpICogc2Vjb25kc0FsbG93ZWQpO1xuICB9O1xuXG4gIHJldHVybiBLbGFzc1Jlc3VsdDtcblxufSkoQmFja2JvbmUuTW9kZWwpO1xuXG4iLCJjbGFzcyBLbGFzc1Jlc3VsdHMgZXh0ZW5kcyBCYWNrYm9uZS5Db2xsZWN0aW9uXG5cbiAgdXJsOiBcInJlc3VsdFwiXG4gIG1vZGVsOiBLbGFzc1Jlc3VsdFxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zID0ge30pIC0+XG4gICAgdW5sZXNzIG9wdGlvbnMuc2hvd09sZD8gJiYgb3B0aW9ucy5zaG93T2xkID09IHRydWVcbiAgICAgIEBvbiBcImFsbFwiLCAoZXZlbnQpID0+XG4gICAgICAgIHRvUmVtb3ZlID0gW11cbiAgICAgICAgZm9yIHJlc3VsdCBpbiBAbW9kZWxzXG4gICAgICAgICAgdG9SZW1vdmUucHVzaCByZXN1bHQuaWQgaWYgcmVzdWx0LmhhcyhcIm9sZFwiKVxuICAgICAgICBmb3IgcmVzdWx0SWQgaW4gdG9SZW1vdmVcbiAgICAgICAgICBAcmVtb3ZlKHJlc3VsdElkLCBzaWxlbnQ6IHRydWUpIFxuIiwidmFyIEtsYXNzUmVzdWx0cyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbktsYXNzUmVzdWx0cyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChLbGFzc1Jlc3VsdHMsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEtsYXNzUmVzdWx0cygpIHtcbiAgICByZXR1cm4gS2xhc3NSZXN1bHRzLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgS2xhc3NSZXN1bHRzLnByb3RvdHlwZS51cmwgPSBcInJlc3VsdFwiO1xuXG4gIEtsYXNzUmVzdWx0cy5wcm90b3R5cGUubW9kZWwgPSBLbGFzc1Jlc3VsdDtcblxuICBLbGFzc1Jlc3VsdHMucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBpZiAoISgob3B0aW9ucy5zaG93T2xkICE9IG51bGwpICYmIG9wdGlvbnMuc2hvd09sZCA9PT0gdHJ1ZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm9uKFwiYWxsXCIsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICB2YXIgaSwgaiwgbGVuLCBsZW4xLCByZWYsIHJlc3VsdCwgcmVzdWx0SWQsIHJlc3VsdHMsIHRvUmVtb3ZlO1xuICAgICAgICAgIHRvUmVtb3ZlID0gW107XG4gICAgICAgICAgcmVmID0gX3RoaXMubW9kZWxzO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVmW2ldO1xuICAgICAgICAgICAgaWYgKHJlc3VsdC5oYXMoXCJvbGRcIikpIHtcbiAgICAgICAgICAgICAgdG9SZW1vdmUucHVzaChyZXN1bHQuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHRvUmVtb3ZlLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICAgICAgcmVzdWx0SWQgPSB0b1JlbW92ZVtqXTtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChfdGhpcy5yZW1vdmUocmVzdWx0SWQsIHtcbiAgICAgICAgICAgICAgc2lsZW50OiB0cnVlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gS2xhc3NSZXN1bHRzO1xuXG59KShCYWNrYm9uZS5Db2xsZWN0aW9uKTtcblxuIiwiY2xhc3MgS2xhc3NTdWJ0ZXN0RWRpdFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcInN1YnRlc3RfZWRpdFwiXG5cbiAgZXZlbnRzIDpcbiAgICAnY2xpY2sgLmJhY2tfYnV0dG9uJyAgOiAnZ29CYWNrJ1xuICAgICdjbGljayAuc2F2ZV9zdWJ0ZXN0JyA6ICdzYXZlJ1xuICAgICdibHVyICNzdWJ0ZXN0X2l0ZW1zJyA6ICdjbGVhbldoaXRlc3BhY2UnXG4gICAgJ2NsaWNrIC5hZGRfcXVlc3Rpb24nICAgICAgICA6ICd0b2dnbGVBZGRRdWVzdGlvbidcbiAgICAnY2xpY2sgLmFkZF9xdWVzdGlvbl9jYW5jZWwnIDogJ3RvZ2dsZUFkZFF1ZXN0aW9uJ1xuICAgICdjbGljayAuYWRkX3F1ZXN0aW9uX2FkZCcgICAgOiAnYWRkUXVlc3Rpb24nXG4gICAgJ2tleXByZXNzICNxdWVzdGlvbl9uYW1lJyAgICA6ICdhZGRRdWVzdGlvbidcblxuXG4gIGNsZWFuV2hpdGVzcGFjZTogLT5cbiAgICBAJGVsLmZpbmQoXCIjc3VidGVzdF9pdGVtc1wiKS52YWwoIEAkZWwuZmluZChcIiNzdWJ0ZXN0X2l0ZW1zXCIpLnZhbCgpLnJlcGxhY2UoL1xccysvZywgJyAnKSApXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cbiAgICBAbW9kZWwgICAgICA9IG9wdGlvbnMubW9kZWxcbiAgICBAY3VycmljdWx1bSA9IG9wdGlvbnMuY3VycmljdWx1bVxuICAgIEBwcm90b3R5cGUgID0gQG1vZGVsLmdldChcInByb3RvdHlwZVwiKVxuXG4gICAgQHByb3RvdHlwZVZpZXdzICA9IFRhbmdlcmluZS5jb25maWcuZ2V0IFwicHJvdG90eXBlVmlld3NcIlxuXG4gICAgaWYgQHByb3RvdHlwZSA9PSBcInN1cnZleVwiXG4gICAgICBAcXVlc3Rpb25zID0gb3B0aW9ucy5xdWVzdGlvbnNcblxuICAgICAgQHN1cnZleUVkaXRvciA9IG5ldyB3aW5kb3dbQHByb3RvdHlwZVZpZXdzW0Bwcm90b3R5cGVdWydlZGl0J11dXG4gICAgICAgIG1vZGVsICA6IEBtb2RlbFxuICAgICAgICBwYXJlbnQgOiBAXG5cbiAgICAgIEBxdWVzdGlvbnMuZW5zdXJlT3JkZXIoKVxuXG4gICAgICBAcXVlc3Rpb25zRWRpdFZpZXcgPSBuZXcgUXVlc3Rpb25zRWRpdFZpZXdcbiAgICAgICAgcXVlc3Rpb25zIDogQHF1ZXN0aW9uc1xuICAgICAgXG4gICAgICBAcXVlc3Rpb25zRWRpdFZpZXcub24gXCJxdWVzdGlvbi1lZGl0XCIsIChxdWVzdGlvbklkKSA9PlxuICAgICAgICBAc2F2ZSBudWxsLFxuICAgICAgICAgIHF1ZXN0aW9uU2F2ZSAgOiBmYWxzZVxuICAgICAgICAgIHN1Y2Nlc3MgICAgICAgOiAtPiBcbiAgICAgICAgICAgIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJjbGFzcy9xdWVzdGlvbi8je3F1ZXN0aW9uSWR9XCIsIHRydWVcblxuICAgICAgQHF1ZXN0aW9ucy5vbiBcImNoYW5nZVwiLCA9PiBAcmVuZGVyUXVlc3Rpb25zKClcbiAgICAgIEByZW5kZXJRdWVzdGlvbnMoKVxuXG4gIGdvQmFjazogPT5cbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiY3VycmljdWx1bS8je0Btb2RlbC5nZXQoJ2N1cnJpY3VsdW1JZCcpfVwiLCB0cnVlXG5cbiAgc2F2ZTogKGV2ZW50LCBvcHRpb25zPXt9KSAtPlxuXG5cbiAgICAjXG4gICAgIyBHcmlkc1xuICAgICNcbiAgICBpZiBAcHJvdG90eXBlID09IFwiZ3JpZFwiXG4gICAgICBAbW9kZWwuc2F2ZVxuICAgICAgICBuYW1lICAgICAgICAgICA6IEAkZWwuZmluZChcIiNuYW1lXCIpLnZhbCgpXG4gICAgICAgIHBhcnQgICAgICAgICAgIDogTWF0aC5tYXgocGFyc2VJbnQoIEAkZWwuZmluZChcIiNwYXJ0XCIpLnZhbCgpICksIDEpXG4gICAgICAgIHJlcG9ydFR5cGUgICAgIDogQCRlbC5maW5kKFwiI3JlcG9ydF90eXBlXCIpLnZhbCgpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgaXRlbVR5cGUgICAgICAgOiBAJGVsLmZpbmQoXCIjaXRlbV90eXBlXCIpLnZhbCgpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgc2NvcmVUYXJnZXQgICAgOiBwYXJzZUludChAJGVsLmZpbmQoXCIjc2NvcmVfdGFyZ2V0XCIpLnZhbCgpKVxuICAgICAgICBzY29yZVNwcmVhZCAgICA6IHBhcnNlSW50KEAkZWwuZmluZChcIiNzY29yZV9zcHJlYWRcIikudmFsKCkpXG4gICAgICAgIG9yZGVyICAgICAgICAgIDogcGFyc2VJbnQoQCRlbC5maW5kKFwiI29yZGVyXCIpLnZhbCgpKVxuXG4gICAgICAgIGNhcHR1cmVMYXN0QXR0ZW1wdGVkOiBAJGVsLmZpbmQoXCIjY2FwdHVyZV9sYXN0X2F0dGVtcHRlZCBpbnB1dDpjaGVja2VkXCIpLnZhbCgpID09IFwidHJ1ZVwiXG4gICAgICAgIGVuZE9mTGluZSA6IEAkZWwuZmluZChcIiNlbmRfb2ZfbGluZSBpbnB1dDpjaGVja2VkXCIpLnZhbCgpID09IFwidHJ1ZVwiXG4gICAgICAgIHJhbmRvbWl6ZSA6IEAkZWwuZmluZChcIiNyYW5kb21pemUgaW5wdXQ6Y2hlY2tlZFwiKS52YWwoKSA9PSBcInRydWVcIlxuICAgICAgICB0aW1lciAgICAgOiBNYXRoLm1heChwYXJzZUludCggQCRlbC5maW5kKFwiI3N1YnRlc3RfdGltZXJcIikudmFsKCkgKSwgMClcbiAgICAgICAgaXRlbXMgICAgIDogXy5jb21wYWN0KCBAJGVsLmZpbmQoXCIjc3VidGVzdF9pdGVtc1wiKS52YWwoKS5zcGxpdChcIiBcIikgKSAjIG1pbGQgc2FuaXRpemF0aW9uLCBoYXBwZW5zIGF0IHJlYWQgdG9vXG4gICAgICAgIGNvbHVtbnMgICA6IE1hdGgubWF4KHBhcnNlSW50KCBAJGVsLmZpbmQoXCIjc3VidGVzdF9jb2x1bW5zXCIpLnZhbCgpICksIDApXG4gICAgICAsXG4gICAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJTdWJ0ZXN0IFNhdmVkXCJcbiAgICAgICAgZXJyb3I6ID0+XG4gICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJTYXZlIGVycm9yXCJcblxuXG4gICAgI1xuICAgICMgU3VydmV5c1xuICAgICNcblxuICAgIGVsc2UgaWYgQHByb3RvdHlwZSA9PSBcInN1cnZleVwiXG5cbiAgICAgIG9wdGlvbnMucXVlc3Rpb25TYXZlID0gaWYgb3B0aW9ucy5xdWVzdGlvblNhdmUgdGhlbiBvcHRpb25zLnF1ZXN0aW9uU2F2ZSBlbHNlIHRydWVcblxuICAgICAgIyBibGFuayBvdXQgb3VyIGVycm9yIHF1ZXVlc1xuICAgICAgbm90U2F2ZWQgPSBbXVxuICAgICAgZW1wdHlPcHRpb25zID0gW11cbiAgICAgIHJlcXVpcmVzR3JpZCA9IFtdXG5cbiAgICAgICMgY2hlY2sgZm9yIFwiZXJyb3JzXCJcbiAgICAgIGZvciBxdWVzdGlvbiwgaSBpbiBAcXVlc3Rpb25zLm1vZGVsc1xuICAgICAgICBpZiBxdWVzdGlvbi5nZXQoXCJ0eXBlXCIpICE9IFwib3BlblwiICYmIHF1ZXN0aW9uLmdldChcIm9wdGlvbnNcIik/Lmxlbmd0aCA9PSAwXG4gICAgICAgICAgZW1wdHlPcHRpb25zLnB1c2ggaSArIDFcbiAgICAgICAgXG4gICAgICAgICAgaWYgb3B0aW9ucy5xdWVzdGlvblNhdmVcbiAgICAgICAgICAgIGlmIG5vdCBxdWVzdGlvbi5zYXZlKClcbiAgICAgICAgICAgICAgbm90U2F2ZWQucHVzaCBpXG4gICAgICAgICAgICBpZiBxdWVzdGlvbi5oYXMoXCJsaW5rZWRHcmlkU2NvcmVcIikgJiYgcXVlc3Rpb24uZ2V0KFwibGlua2VkR3JpZFNjb3JlXCIpICE9IFwiXCIgJiYgcXVlc3Rpb24uZ2V0KFwibGlua2VkR3JpZFNjb3JlXCIpICE9IDAgJiYgQG1vZGVsLmhhcyhcImdyaWRMaW5rSWRcIikgPT0gXCJcIiAmJiBAbW9kZWwuZ2V0KFwiZ3JpZExpbmtJZFwiKSA9PSBcIlwiXG4gICAgICAgICAgICAgIHJlcXVpcmVzR3JpZC5wdXNoIGlcbiAgICAgICAgICBcbiAgICAgICMgZGlzcGxheSBlcnJvcnNcbiAgICAgIGlmIG5vdFNhdmVkLmxlbmd0aCAhPSAwXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiRXJyb3I8YnI+PGJyPlF1ZXN0aW9uczogPGJyPiN7bm90U2F2ZWQuam9pbignLCAnKX08YnI+bm90IHNhdmVkXCJcbiAgICAgIGlmIGVtcHR5T3B0aW9ucy5sZW5ndGggIT0gMFxuICAgICAgICBwbHVyYWwgPSBlbXB0eU9wdGlvbnMubGVuZ3RoID4gMVxuICAgICAgICBfcXVlc3Rpb24gPSBpZiBwbHVyYWwgdGhlbiBcIlF1ZXN0aW9uc1wiIGVsc2UgXCJRdWVzdGlvblwiXG4gICAgICAgIF9oYXMgICAgICA9IGlmIHBsdXJhbCB0aGVuIFwiaGF2ZVwiIGVsc2UgXCJoYXNcIlxuICAgICAgICBhbGVydCBcIldhcm5pbmdcXG5cXG4je19xdWVzdGlvbn0gI3tlbXB0eU9wdGlvbnMuam9pbignICwnKX0gI3sgX2hhcyB9IG5vIG9wdGlvbnMuXCJcbiAgICAgIGlmIHJlcXVpcmVzR3JpZC5sZW5ndGggIT0gMFxuICAgICAgICBwbHVyYWwgPSBlbXB0eU9wdGlvbnMubGVuZ3RoID4gMVxuICAgICAgICBfcXVlc3Rpb24gPSBpZiBwbHVyYWwgdGhlbiBcIlF1ZXN0aW9uc1wiIGVsc2UgXCJRdWVzdGlvblwiXG4gICAgICAgIF9yZXF1aXJlICA9IGlmIHBsdXJhbCB0aGVuIFwicmVxdWlyZVwiIGVsc2UgXCJyZXF1aXJlc1wiXG4gICAgICAgIGFsZXJ0IFwiV2FybmluZ1xcblxcbiN7IF9xdWVzdGlvbiB9ICN7cmVxdWlyZXNHcmlkLmpvaW4oJyAsJyl9ICN7IF9yZXF1aXJlIH0gYSBncmlkIHRvIGJlIGxpbmtlZCB0byB0aGlzIHRlc3QuXCJcblxuXG5cbiAgICAgIEBtb2RlbC5zYXZlXG4gICAgICAgIG5hbWUgICAgICAgICAgIDogQCRlbC5maW5kKFwiI25hbWVcIikudmFsKClcbiAgICAgICAgcGFydCAgICAgICAgICAgOiBNYXRoLm1heChwYXJzZUludCggQCRlbC5maW5kKFwiI3BhcnRcIikudmFsKCkgKSwgMSlcbiAgICAgICAgcmVwb3J0VHlwZSAgICAgOiBAJGVsLmZpbmQoXCIjcmVwb3J0X3R5cGVcIikudmFsKCkudG9Mb3dlckNhc2UoKVxuICAgICAgICBpdGVtVHlwZSAgICAgICA6IEAkZWwuZmluZChcIiNpdGVtX3R5cGVcIikudmFsKCkudG9Mb3dlckNhc2UoKVxuICAgICAgICBzY29yZVRhcmdldCAgICA6IHBhcnNlSW50KEAkZWwuZmluZChcIiNzY29yZV90YXJnZXRcIikudmFsKCkpXG4gICAgICAgIHNjb3JlU3ByZWFkICAgIDogcGFyc2VJbnQoQCRlbC5maW5kKFwiI3Njb3JlX3NwcmVhZFwiKS52YWwoKSlcbiAgICAgICAgb3JkZXIgICAgICAgICAgOiBNYXRoLm1heChwYXJzZUludChAJGVsLmZpbmQoXCIjb3JkZXJcIikudmFsKCkpLCAwKVxuXG4gICAgICAgIGdyaWRMaW5rSWQgICAgIDogQCRlbC5maW5kKFwiI2xpbmtfc2VsZWN0IG9wdGlvbjpzZWxlY3RlZFwiKS52YWwoKVxuICAgICAgICBhdXRvc3RvcExpbWl0ICA6IHBhcnNlSW50KEAkZWwuZmluZChcIiNhdXRvc3RvcF9saW1pdFwiKS52YWwoKSkgfHwgMFxuXG4gICAgICAsXG4gICAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgICAgIyBwcmVmZXIgdGhlIHN1Y2Nlc3MgY2FsbGJhY2tcbiAgICAgICAgICByZXR1cm4gb3B0aW9ucy5zdWNjZXNzKCkgaWYgb3B0aW9ucy5zdWNjZXNzXG4gICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJTdWJ0ZXN0IFNhdmVkXCJcbiAgICAgICAgICBzZXRUaW1lb3V0IEBnb0JhY2ssIDEwMDBcblxuICAgICAgICBlcnJvcjogLT5cbiAgICAgICAgICByZXR1cm4gb3B0aW9ucy5lcnJvcigpIGlmIG9wdGlvbnMuZXJyb3I/XG4gICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJTYXZlIGVycm9yXCJcblxuICByZW5kZXJRdWVzdGlvbnM6ID0+XG4gICAgQCRlbC5maW5kKFwiI3F1ZXN0aW9uX2xpc3Rfd3JhcHBlclwiKS5lbXB0eSgpXG4gICAgQHF1ZXN0aW9uc0VkaXRWaWV3Py5yZW5kZXIoKVxuICAgIEAkZWwuZmluZChcIiNxdWVzdGlvbl9saXN0X3dyYXBwZXJcIikuYXBwZW5kIEBxdWVzdGlvbnNFZGl0Vmlldz8uZWxcblxuICB0b2dnbGVBZGRRdWVzdGlvbjogPT5cbiAgICBAJGVsLmZpbmQoXCIjYWRkX3F1ZXN0aW9uX2Zvcm0sIC5hZGRfcXVlc3Rpb25cIikuZmFkZVRvZ2dsZSAyNTAsID0+XG4gICAgICBpZiBAJGVsLmZpbmQoXCIjYWRkX3F1ZXN0aW9uX2Zvcm1cIikuaXMoXCI6dmlzaWJsZVwiKVxuICAgICAgICBAJGVsLmZpbmQoXCIjcXVlc3Rpb25fcHJvbXB0XCIpLmZvY3VzKClcbiAgICByZXR1cm4gZmFsc2VcblxuICBhZGRRdWVzdGlvbjogKGV2ZW50KSAtPlxuICAgIFxuICAgIGlmIGV2ZW50LnR5cGUgIT0gXCJjbGlja1wiICYmIGV2ZW50LndoaWNoICE9IDEzXG4gICAgICByZXR1cm4gdHJ1ZVxuXG4gICAgbmV3QXR0cmlidXRlcyA9ICQuZXh0ZW5kIFRhbmdlcmluZS50ZW1wbGF0ZXMuZ2V0KFwicXVlc3Rpb25UZW1wbGF0ZVwiKSxcbiAgICAgIHN1YnRlc3RJZCAgICA6IEBtb2RlbC5pZFxuICAgICAgY3VycmljdWx1bUlkIDogQGN1cnJpY3VsdW0uaWRcbiAgICAgIGlkICAgICAgICAgICA6IFV0aWxzLmd1aWQoKVxuICAgICAgb3JkZXIgICAgICAgIDogQHF1ZXN0aW9ucy5sZW5ndGhcbiAgICAgIHByb21wdCAgICAgICA6IEAkZWwuZmluZCgnI3F1ZXN0aW9uX3Byb21wdCcpLnZhbCgpXG4gICAgICBuYW1lICAgICAgICAgOiBAJGVsLmZpbmQoJyNxdWVzdGlvbl9uYW1lJykudmFsKCkuc2FmZXR5RGFuY2UoKVxuXG4gICAgbnEgPSBAcXVlc3Rpb25zLmNyZWF0ZSBuZXdBdHRyaWJ1dGVzXG4gICAgQCRlbC5maW5kKFwiI2FkZF9xdWVzdGlvbl9mb3JtIGlucHV0XCIpLnZhbCAnJ1xuICAgIEAkZWwuZmluZChcIiNxdWVzdGlvbl9wcm9tcHRcIikuZm9jdXMoKVxuXG4gICAgcmV0dXJuIGZhbHNlXG5cblxuICByZW5kZXI6IC0+XG5cbiAgICBjdXJyaWN1bHVtTmFtZSA9IEBjdXJyaWN1bHVtLmVzY2FwZSBcIm5hbWVcIlxuICAgIG5hbWUgICAgICAgICAgID0gQG1vZGVsLmVzY2FwZSBcIm5hbWVcIlxuICAgIHBhcnQgICAgICAgICAgID0gQG1vZGVsLmdldE51bWJlciBcInBhcnRcIlxuICAgIHJlcG9ydFR5cGUgICAgID0gQG1vZGVsLmVzY2FwZSBcInJlcG9ydFR5cGVcIlxuICAgIGl0ZW1UeXBlICAgICAgID0gQG1vZGVsLmVzY2FwZSBcIml0ZW1UeXBlXCJcblxuICAgIHNjb3JlVGFyZ2V0ICAgID0gQG1vZGVsLmdldE51bWJlciBcInNjb3JlVGFyZ2V0XCJcbiAgICBzY29yZVNwcmVhZCAgICA9IEBtb2RlbC5nZXROdW1iZXIgXCJzY29yZVNwcmVhZFwiXG4gICAgb3JkZXIgICAgICAgICAgPSBAbW9kZWwuZ2V0TnVtYmVyIFwib3JkZXJcIlxuXG4gICAgI1xuICAgICMgR3JpZHNcbiAgICAjXG4gICAgaWYgQHByb3RvdHlwZSA9PSBcImdyaWRcIlxuICAgICAgZW5kT2ZMaW5lICAgID0gaWYgQG1vZGVsLmhhcyhcImVuZE9mTGluZVwiKSB0aGVuIEBtb2RlbC5nZXQoXCJlbmRPZkxpbmVcIikgZWxzZSB0cnVlXG4gICAgICByYW5kb21pemUgICAgPSBpZiBAbW9kZWwuaGFzKFwicmFuZG9taXplXCIpIHRoZW4gQG1vZGVsLmdldChcInJhbmRvbWl6ZVwiKSBlbHNlIGZhbHNlXG4gICAgICBjYXB0dXJlTGFzdEF0dGVtcHRlZCA9IGlmIEBtb2RlbC5oYXMoXCJjYXB0dXJlTGFzdEF0dGVtcHRlZFwiKSB0aGVuIEBtb2RlbC5nZXQoXCJjYXB0dXJlTGFzdEF0dGVtcHRlZFwiKSBlbHNlIHRydWVcblxuICAgICAgaXRlbXMgICAgICAgID0gQG1vZGVsLmdldChcIml0ZW1zXCIpLmpvaW4gXCIgXCJcbiAgICAgIHRpbWVyICAgICAgICA9IEBtb2RlbC5nZXQoXCJ0aW1lclwiKSAgICAgICAgfHwgMFxuICAgICAgY29sdW1ucyAgICAgID0gQG1vZGVsLmdldChcImNvbHVtbnNcIikgICAgICB8fCAwXG5cbiAgICAgIHByb3RvdHlwZU9wdGlvbnMgPSBcIlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nc3VidGVzdF9pdGVtcycgdGl0bGU9J1RoZXNlIGl0ZW1zIGFyZSBzcGFjZSBkZWxpbWl0ZWQuIFBhc3RpbmcgdGV4dCBmcm9tIG90aGVyIGFwcGxpY2F0aW9ucyBtYXkgaW5zZXJ0IHRhYnMgYW5kIG5ldyBsaW5lcy4gV2hpdGVzcGFjZSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY29ycmVjdGVkLic+R3JpZCBJdGVtczwvbGFiZWw+XG4gICAgICAgICAgPHRleHRhcmVhIGlkPSdzdWJ0ZXN0X2l0ZW1zJz4je2l0ZW1zfTwvdGV4dGFyZWE+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxsYWJlbD5SYW5kb21pemUgaXRlbXM8L2xhYmVsPjxicj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgIDxkaXYgaWQ9J3JhbmRvbWl6ZScgY2xhc3M9J2J1dHRvbnNldCc+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdyYW5kb21pemVfdHJ1ZSc+WWVzPC9sYWJlbD48aW5wdXQgbmFtZT0ncmFuZG9taXplJyB0eXBlPSdyYWRpbycgdmFsdWU9J3RydWUnIGlkPSdyYW5kb21pemVfdHJ1ZScgI3snY2hlY2tlZCcgaWYgcmFuZG9taXplfT5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J3JhbmRvbWl6ZV9mYWxzZSc+Tm88L2xhYmVsPjxpbnB1dCBuYW1lPSdyYW5kb21pemUnIHR5cGU9J3JhZGlvJyB2YWx1ZT0nZmFsc2UnIGlkPSdyYW5kb21pemVfZmFsc2UnICN7J2NoZWNrZWQnIGlmIG5vdCByYW5kb21pemV9PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj48YnI+XG5cbiAgICAgICAgPGxhYmVsPk1hcmsgZW50aXJlIGxpbmUgYnV0dG9uPC9sYWJlbD48YnI+XG4gICAgICAgIDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cbiAgICAgICAgICA8ZGl2IGlkPSdlbmRfb2ZfbGluZScgY2xhc3M9J2J1dHRvbnNldCc+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdlbmRfb2ZfbGluZV90cnVlJz5ZZXM8L2xhYmVsPjxpbnB1dCBuYW1lPSdlbmRfb2ZfbGluZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJyBpZD0nZW5kX29mX2xpbmVfdHJ1ZScgI3snY2hlY2tlZCcgaWYgZW5kT2ZMaW5lfT5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9J2VuZF9vZl9saW5lX2ZhbHNlJz5ObzwvbGFiZWw+PGlucHV0IG5hbWU9J2VuZF9vZl9saW5lJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0nZW5kX29mX2xpbmVfZmFsc2UnICN7J2NoZWNrZWQnIGlmIG5vdCBlbmRPZkxpbmV9PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj48YnI+XG5cbiAgICAgICAgPGxhYmVsPkNhcHR1cmUgbGFzdCBpdGVtIGF0dGVtcHRlZDwvbGFiZWw+PGJyPlxuICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgPGRpdiBpZD0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZCcgY2xhc3M9J2J1dHRvbnNldCc+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPSdjYXB0dXJlX2xhc3RfYXR0ZW1wdGVkX3RydWUnPlllczwvbGFiZWw+PGlucHV0IG5hbWU9J2NhcHR1cmVfbGFzdF9hdHRlbXB0ZWQnIHR5cGU9J3JhZGlvJyB2YWx1ZT0ndHJ1ZScgaWQ9J2NhcHR1cmVfbGFzdF9hdHRlbXB0ZWRfdHJ1ZScgI3snY2hlY2tlZCcgaWYgY2FwdHVyZUxhc3RBdHRlbXB0ZWR9PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZF9mYWxzZSc+Tm88L2xhYmVsPjxpbnB1dCBuYW1lPSdjYXB0dXJlX2xhc3RfYXR0ZW1wdGVkJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZF9mYWxzZScgI3snY2hlY2tlZCcgaWYgbm90IGNhcHR1cmVMYXN0QXR0ZW1wdGVkfT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+PGJyPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICA8bGFiZWwgZm9yPSdzdWJ0ZXN0X2NvbHVtbnMnIHRpdGxlPSdOdW1iZXIgb2YgY29sdW1ucyBpbiB3aGljaCB0byBkaXNwbGF5IHRoZSBncmlkIGl0ZW1zLic+Q29sdW1uczwvbGFiZWw+PGJyPlxuICAgICAgICAgIDxpbnB1dCBpZD0nc3VidGVzdF9jb2x1bW5zJyB2YWx1ZT0nI3tjb2x1bW5zfScgdHlwZT0nbnVtYmVyJz5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICAgIDxsYWJlbCBmb3I9J3N1YnRlc3RfdGltZXInIHRpdGxlPSdTZWNvbmRzIHRvIGdpdmUgdGhlIGNoaWxkIHRvIGNvbXBsZXRlIHRoZSB0ZXN0LiBTZXR0aW5nIHRoaXMgdmFsdWUgdG8gMCB3aWxsIG1ha2UgdGhlIHRlc3QgdW50aW1lZC4nPlRpbWVyPC9sYWJlbD48YnI+XG4gICAgICAgICAgPGlucHV0IGlkPSdzdWJ0ZXN0X3RpbWVyJyB2YWx1ZT0nI3t0aW1lcn0nIHR5cGU9J251bWJlcic+XG4gICAgICAgIDwvZGl2PlxuICAgICAgXCJcblxuICAgICNcbiAgICAjIFN1cnZleVxuICAgICNcblxuICAgIGVsc2UgaWYgQHByb3RvdHlwZSA9PSBcInN1cnZleVwiXG5cblxuICAgICAgZ3JpZExpbmtJZCA9IEBtb2RlbC5nZXQoXCJncmlkTGlua0lkXCIpIHx8IFwiXCJcbiAgICAgIGF1dG9zdG9wTGltaXQgPSBwYXJzZUludChAbW9kZWwuZ2V0KFwiYXV0b3N0b3BMaW1pdFwiKSkgfHwgMFxuXG4gICAgICBAb24gXCJyZW5kZXJlZFwiLCA9PlxuICAgICAgICBAcmVuZGVyUXVlc3Rpb25zKClcblxuICAgICAgICAjIGdldCBsaW5rZWQgZ3JpZCBvcHRpb25zXG4gICAgICAgIHN1YnRlc3RzID0gbmV3IFN1YnRlc3RzXG4gICAgICAgIHN1YnRlc3RzLmZldGNoXG4gICAgICAgICAga2V5OiBcInNcIiArIEBjdXJyaWN1bHVtLmlkXG4gICAgICAgICAgc3VjY2VzczogKGNvbGxlY3Rpb24pID0+XG4gICAgICAgICAgICBjb2xsZWN0aW9uID0gbmV3IFN1YnRlc3RzIGNvbGxlY3Rpb24ud2hlcmVcbiAgICAgICAgICAgICAgcHJvdG90eXBlIDogJ2dyaWQnICMgb25seSBncmlkcyBjYW4gcHJvdmlkZSBzY29yZXNcbiAgICAgICAgICAgIGNvbGxlY3Rpb24uc29ydCgpXG4gICAgICAgICAgICBsaW5rU2VsZWN0ID0gXCJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9J2xpbmtfc2VsZWN0Jz5MaW5rZWQgdG8gZ3JpZDwvbGFiZWw+PGJyPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cbiAgICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9J2xpbmtfc2VsZWN0Jz5cbiAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Jyc+Tm9uZTwvb3B0aW9uPlwiXG4gICAgICAgICAgICBmb3Igc3VidGVzdCBpbiBjb2xsZWN0aW9uLm1vZGVsc1xuICAgICAgICAgICAgICBsaW5rU2VsZWN0ICs9IFwiPG9wdGlvbiB2YWx1ZT0nI3tzdWJ0ZXN0LmlkfScgI3tpZiAoZ3JpZExpbmtJZCA9PSBzdWJ0ZXN0LmlkKSB0aGVuICdzZWxlY3RlZCcgZWxzZSAnJ30+I3tzdWJ0ZXN0LmdldCgncGFydCcpfSAje3N1YnRlc3QuZ2V0ICduYW1lJ308L29wdGlvbj5cIlxuICAgICAgICAgICAgbGlua1NlbGVjdCArPSBcIjwvc2VsZWN0PjwvZGl2PjwvZGl2PlwiXG4gICAgICAgICAgICBAJGVsLmZpbmQoJyNncmlkX2xpbmsnKS5odG1sIGxpbmtTZWxlY3RcblxuXG5cbiAgICAgIHByb3RvdHlwZU9wdGlvbnMgPSBcIlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nYXV0b3N0b3BfbGltaXQnIHRpdGxlPSdUaGUgc3VydmV5IHdpbGwgZGlzY29udGludWUgYWZ0ZXIgdGhlIGZpcnN0IE4gcXVlc3Rpb25zIGhhdmUgYmVlbiBhbnN3ZXJlZCB3aXRoIGEgJnF1b3Q7MCZxdW90OyB2YWx1ZSBvcHRpb24uJz5BdXRvc3RvcCBhZnRlciBOIGluY29ycmVjdDwvbGFiZWw+PGJyPlxuICAgICAgICAgIDxpbnB1dCBpZD0nYXV0b3N0b3BfbGltaXQnIHR5cGU9J251bWJlcicgdmFsdWU9JyN7YXV0b3N0b3BMaW1pdH0nPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBpZD0nZ3JpZF9saW5rJz48L2Rpdj5cbiAgICAgICAgPGRpdiBpZD0ncXVlc3Rpb25zJz5cbiAgICAgICAgICA8aDI+UXVlc3Rpb25zPC9oMj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgICA8ZGl2IGlkPSdxdWVzdGlvbl9saXN0X3dyYXBwZXInPjxpbWcgY2xhc3M9J2xvYWRpbmcnIHNyYz0naW1hZ2VzL2xvYWRpbmcuZ2lmJz48L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J2FkZF9xdWVzdGlvbiBjb21tYW5kJz5BZGQgUXVlc3Rpb248L2J1dHRvbj5cbiAgICAgICAgICAgIDxkaXYgaWQ9J2FkZF9xdWVzdGlvbl9mb3JtJyBjbGFzcz0nY29uZmlybWF0aW9uJz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICAgICAgICAgIDxoMj5OZXcgUXVlc3Rpb248L2gyPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9J3F1ZXN0aW9uX3Byb21wdCc+UHJvbXB0PC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9J3F1ZXN0aW9uX3Byb21wdCc+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0ncXVlc3Rpb25fbmFtZSc+VmFyaWFibGUgbmFtZTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGlucHV0IGlkPSdxdWVzdGlvbl9uYW1lJyB0aXRsZT0nQWxsb3dlZCBjaGFyYWN0ZXJzOiBBLVosIGEteiwgMC05LCBhbmQgdW5kZXJzY29yZXMuJz48YnI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0nYWRkX3F1ZXN0aW9uX2FkZCBjb21tYW5kJz5BZGQ8L2J1dHRvbj48YnV0dG9uIGNsYXNzPSdhZGRfcXVlc3Rpb25fY2FuY2VsIGNvbW1hbmQnPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PiBcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICBcIlxuXG4gICAgQCRlbC5odG1sIFwiXG4gICAgICA8YnV0dG9uIGNsYXNzPSdiYWNrX2J1dHRvbiBuYXZpZ2F0aW9uJz5CYWNrPC9idXR0b24+PGJyPlxuICAgICAgPGgxPlN1YnRlc3QgRWRpdG9yPC9oMT5cbiAgICAgIDx0YWJsZSBjbGFzcz0nYmFzaWNfaW5mbyc+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGg+Q3VycmljdWx1bTwvdGg+XG4gICAgICAgICAgPHRkPiN7Y3VycmljdWx1bU5hbWV9PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGFibGU+XG5cbiAgICAgIDxidXR0b24gY2xhc3M9J3NhdmVfc3VidGVzdCBjb21tYW5kJz5Eb25lPC9idXR0b24+XG5cbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsIGZvcj0nbmFtZSc+TmFtZTwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCBpZD0nbmFtZScgdmFsdWU9JyN7bmFtZX0nPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsIGZvcj0ncmVwb3J0X3R5cGUnPlJlcG9ydCBUeXBlPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IGlkPSdyZXBvcnRfdHlwZScgdmFsdWU9JyN7cmVwb3J0VHlwZX0nPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsIGZvcj0naXRlbV90eXBlJyB0aXRsZT0nVGhpcyB2YXJpYWJsZSBpcyB1c2VkIGZvciByZXBvcnRzLiBBbGwgcmVzdWx0cyBmcm9tIHN1YnRlc3RzIHdpdGggdGhlIHNhbWUgSXRlbSBUeXBlIHdpbGwgc2hvdyB1cCB0b2dldGhlci4gSW5jb25zaXN0ZW50IG5hbWluZyB3aWxsIGludmFsaWRhdGUgcmVzdWx0cy4gICc+SXRlbSBUeXBlPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IGlkPSdpdGVtX3R5cGUnIHZhbHVlPScje2l0ZW1UeXBlfSc+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICA8bGFiZWwgZm9yPSdwYXJ0Jz5Bc3Nlc3NtZW50IE51bWJlcjwvbGFiZWw+PGJyPlxuICAgICAgICA8aW5wdXQgdHlwZT0nbnVtYmVyJyBpZD0ncGFydCcgdmFsdWU9JyN7cGFydH0nPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsIGZvcj0nc2NvcmVfdGFyZ2V0Jz5UYXJnZXQgc2NvcmU8L2xhYmVsPjxicj5cbiAgICAgICAgPGlucHV0IHR5cGU9J251bWJlcicgaWQ9J3Njb3JlX3RhcmdldCcgdmFsdWU9JyN7c2NvcmVUYXJnZXR9Jz5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxsYWJlbCBmb3I9J3Njb3JlX3NwcmVhZCc+U2NvcmUgc3ByZWFkPC9sYWJlbD48YnI+XG4gICAgICAgIDxpbnB1dCB0eXBlPSdudW1iZXInIGlkPSdzY29yZV9zcHJlYWQnIHZhbHVlPScje3Njb3JlU3ByZWFkfSc+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICA8bGFiZWwgZm9yPSdvcmRlcic+T3JkZXI8L2xhYmVsPjxicj5cbiAgICAgICAgPGlucHV0IHR5cGU9J251bWJlcicgaWQ9J29yZGVyJyB2YWx1ZT0nI3tvcmRlcn0nPlxuICAgICAgPC9kaXY+XG5cbiAgICAgICN7cHJvdG90eXBlT3B0aW9uc31cblxuICAgICAgPGJ1dHRvbiBjbGFzcz0nc2F2ZV9zdWJ0ZXN0IGNvbW1hbmQnPkRvbmU8L2J1dHRvbj5cbiAgICAgIFwiXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuIiwidmFyIEtsYXNzU3VidGVzdEVkaXRWaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbktsYXNzU3VidGVzdEVkaXRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEtsYXNzU3VidGVzdEVkaXRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBLbGFzc1N1YnRlc3RFZGl0VmlldygpIHtcbiAgICB0aGlzLnRvZ2dsZUFkZFF1ZXN0aW9uID0gYmluZCh0aGlzLnRvZ2dsZUFkZFF1ZXN0aW9uLCB0aGlzKTtcbiAgICB0aGlzLnJlbmRlclF1ZXN0aW9ucyA9IGJpbmQodGhpcy5yZW5kZXJRdWVzdGlvbnMsIHRoaXMpO1xuICAgIHRoaXMuZ29CYWNrID0gYmluZCh0aGlzLmdvQmFjaywgdGhpcyk7XG4gICAgcmV0dXJuIEtsYXNzU3VidGVzdEVkaXRWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgS2xhc3NTdWJ0ZXN0RWRpdFZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwic3VidGVzdF9lZGl0XCI7XG5cbiAgS2xhc3NTdWJ0ZXN0RWRpdFZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICAnY2xpY2sgLmJhY2tfYnV0dG9uJzogJ2dvQmFjaycsXG4gICAgJ2NsaWNrIC5zYXZlX3N1YnRlc3QnOiAnc2F2ZScsXG4gICAgJ2JsdXIgI3N1YnRlc3RfaXRlbXMnOiAnY2xlYW5XaGl0ZXNwYWNlJyxcbiAgICAnY2xpY2sgLmFkZF9xdWVzdGlvbic6ICd0b2dnbGVBZGRRdWVzdGlvbicsXG4gICAgJ2NsaWNrIC5hZGRfcXVlc3Rpb25fY2FuY2VsJzogJ3RvZ2dsZUFkZFF1ZXN0aW9uJyxcbiAgICAnY2xpY2sgLmFkZF9xdWVzdGlvbl9hZGQnOiAnYWRkUXVlc3Rpb24nLFxuICAgICdrZXlwcmVzcyAjcXVlc3Rpb25fbmFtZSc6ICdhZGRRdWVzdGlvbidcbiAgfTtcblxuICBLbGFzc1N1YnRlc3RFZGl0Vmlldy5wcm90b3R5cGUuY2xlYW5XaGl0ZXNwYWNlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjc3VidGVzdF9pdGVtc1wiKS52YWwodGhpcy4kZWwuZmluZChcIiNzdWJ0ZXN0X2l0ZW1zXCIpLnZhbCgpLnJlcGxhY2UoL1xccysvZywgJyAnKSk7XG4gIH07XG5cbiAgS2xhc3NTdWJ0ZXN0RWRpdFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5tb2RlbCA9IG9wdGlvbnMubW9kZWw7XG4gICAgdGhpcy5jdXJyaWN1bHVtID0gb3B0aW9ucy5jdXJyaWN1bHVtO1xuICAgIHRoaXMucHJvdG90eXBlID0gdGhpcy5tb2RlbC5nZXQoXCJwcm90b3R5cGVcIik7XG4gICAgdGhpcy5wcm90b3R5cGVWaWV3cyA9IFRhbmdlcmluZS5jb25maWcuZ2V0KFwicHJvdG90eXBlVmlld3NcIik7XG4gICAgaWYgKHRoaXMucHJvdG90eXBlID09PSBcInN1cnZleVwiKSB7XG4gICAgICB0aGlzLnF1ZXN0aW9ucyA9IG9wdGlvbnMucXVlc3Rpb25zO1xuICAgICAgdGhpcy5zdXJ2ZXlFZGl0b3IgPSBuZXcgd2luZG93W3RoaXMucHJvdG90eXBlVmlld3NbdGhpcy5wcm90b3R5cGVdWydlZGl0J11dKHtcbiAgICAgICAgbW9kZWw6IHRoaXMubW9kZWwsXG4gICAgICAgIHBhcmVudDogdGhpc1xuICAgICAgfSk7XG4gICAgICB0aGlzLnF1ZXN0aW9ucy5lbnN1cmVPcmRlcigpO1xuICAgICAgdGhpcy5xdWVzdGlvbnNFZGl0VmlldyA9IG5ldyBRdWVzdGlvbnNFZGl0Vmlldyh7XG4gICAgICAgIHF1ZXN0aW9uczogdGhpcy5xdWVzdGlvbnNcbiAgICAgIH0pO1xuICAgICAgdGhpcy5xdWVzdGlvbnNFZGl0Vmlldy5vbihcInF1ZXN0aW9uLWVkaXRcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihxdWVzdGlvbklkKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnNhdmUobnVsbCwge1xuICAgICAgICAgICAgcXVlc3Rpb25TYXZlOiBmYWxzZSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcImNsYXNzL3F1ZXN0aW9uL1wiICsgcXVlc3Rpb25JZCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgICB0aGlzLnF1ZXN0aW9ucy5vbihcImNoYW5nZVwiLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJRdWVzdGlvbnMoKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlclF1ZXN0aW9ucygpO1xuICAgIH1cbiAgfTtcblxuICBLbGFzc1N1YnRlc3RFZGl0Vmlldy5wcm90b3R5cGUuZ29CYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJjdXJyaWN1bHVtL1wiICsgKHRoaXMubW9kZWwuZ2V0KCdjdXJyaWN1bHVtSWQnKSksIHRydWUpO1xuICB9O1xuXG4gIEtsYXNzU3VidGVzdEVkaXRWaWV3LnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24oZXZlbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2hhcywgX3F1ZXN0aW9uLCBfcmVxdWlyZSwgZW1wdHlPcHRpb25zLCBpLCBqLCBsZW4sIG5vdFNhdmVkLCBwbHVyYWwsIHF1ZXN0aW9uLCByZWYsIHJlZjEsIHJlcXVpcmVzR3JpZDtcbiAgICBpZiAob3B0aW9ucyA9PSBudWxsKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gXCJncmlkXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLm1vZGVsLnNhdmUoe1xuICAgICAgICBuYW1lOiB0aGlzLiRlbC5maW5kKFwiI25hbWVcIikudmFsKCksXG4gICAgICAgIHBhcnQ6IE1hdGgubWF4KHBhcnNlSW50KHRoaXMuJGVsLmZpbmQoXCIjcGFydFwiKS52YWwoKSksIDEpLFxuICAgICAgICByZXBvcnRUeXBlOiB0aGlzLiRlbC5maW5kKFwiI3JlcG9ydF90eXBlXCIpLnZhbCgpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIGl0ZW1UeXBlOiB0aGlzLiRlbC5maW5kKFwiI2l0ZW1fdHlwZVwiKS52YWwoKS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICBzY29yZVRhcmdldDogcGFyc2VJbnQodGhpcy4kZWwuZmluZChcIiNzY29yZV90YXJnZXRcIikudmFsKCkpLFxuICAgICAgICBzY29yZVNwcmVhZDogcGFyc2VJbnQodGhpcy4kZWwuZmluZChcIiNzY29yZV9zcHJlYWRcIikudmFsKCkpLFxuICAgICAgICBvcmRlcjogcGFyc2VJbnQodGhpcy4kZWwuZmluZChcIiNvcmRlclwiKS52YWwoKSksXG4gICAgICAgIGNhcHR1cmVMYXN0QXR0ZW1wdGVkOiB0aGlzLiRlbC5maW5kKFwiI2NhcHR1cmVfbGFzdF9hdHRlbXB0ZWQgaW5wdXQ6Y2hlY2tlZFwiKS52YWwoKSA9PT0gXCJ0cnVlXCIsXG4gICAgICAgIGVuZE9mTGluZTogdGhpcy4kZWwuZmluZChcIiNlbmRfb2ZfbGluZSBpbnB1dDpjaGVja2VkXCIpLnZhbCgpID09PSBcInRydWVcIixcbiAgICAgICAgcmFuZG9taXplOiB0aGlzLiRlbC5maW5kKFwiI3JhbmRvbWl6ZSBpbnB1dDpjaGVja2VkXCIpLnZhbCgpID09PSBcInRydWVcIixcbiAgICAgICAgdGltZXI6IE1hdGgubWF4KHBhcnNlSW50KHRoaXMuJGVsLmZpbmQoXCIjc3VidGVzdF90aW1lclwiKS52YWwoKSksIDApLFxuICAgICAgICBpdGVtczogXy5jb21wYWN0KHRoaXMuJGVsLmZpbmQoXCIjc3VidGVzdF9pdGVtc1wiKS52YWwoKS5zcGxpdChcIiBcIikpLFxuICAgICAgICBjb2x1bW5zOiBNYXRoLm1heChwYXJzZUludCh0aGlzLiRlbC5maW5kKFwiI3N1YnRlc3RfY29sdW1uc1wiKS52YWwoKSksIDApXG4gICAgICB9LCB7XG4gICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIlN1YnRlc3QgU2F2ZWRcIik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcyksXG4gICAgICAgIGVycm9yOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQoXCJTYXZlIGVycm9yXCIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvdG90eXBlID09PSBcInN1cnZleVwiKSB7XG4gICAgICBvcHRpb25zLnF1ZXN0aW9uU2F2ZSA9IG9wdGlvbnMucXVlc3Rpb25TYXZlID8gb3B0aW9ucy5xdWVzdGlvblNhdmUgOiB0cnVlO1xuICAgICAgbm90U2F2ZWQgPSBbXTtcbiAgICAgIGVtcHR5T3B0aW9ucyA9IFtdO1xuICAgICAgcmVxdWlyZXNHcmlkID0gW107XG4gICAgICByZWYgPSB0aGlzLnF1ZXN0aW9ucy5tb2RlbHM7XG4gICAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgICBxdWVzdGlvbiA9IHJlZltpXTtcbiAgICAgICAgaWYgKHF1ZXN0aW9uLmdldChcInR5cGVcIikgIT09IFwib3BlblwiICYmICgocmVmMSA9IHF1ZXN0aW9uLmdldChcIm9wdGlvbnNcIikpICE9IG51bGwgPyByZWYxLmxlbmd0aCA6IHZvaWQgMCkgPT09IDApIHtcbiAgICAgICAgICBlbXB0eU9wdGlvbnMucHVzaChpICsgMSk7XG4gICAgICAgICAgaWYgKG9wdGlvbnMucXVlc3Rpb25TYXZlKSB7XG4gICAgICAgICAgICBpZiAoIXF1ZXN0aW9uLnNhdmUoKSkge1xuICAgICAgICAgICAgICBub3RTYXZlZC5wdXNoKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHF1ZXN0aW9uLmhhcyhcImxpbmtlZEdyaWRTY29yZVwiKSAmJiBxdWVzdGlvbi5nZXQoXCJsaW5rZWRHcmlkU2NvcmVcIikgIT09IFwiXCIgJiYgcXVlc3Rpb24uZ2V0KFwibGlua2VkR3JpZFNjb3JlXCIpICE9PSAwICYmIHRoaXMubW9kZWwuaGFzKFwiZ3JpZExpbmtJZFwiKSA9PT0gXCJcIiAmJiB0aGlzLm1vZGVsLmdldChcImdyaWRMaW5rSWRcIikgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgcmVxdWlyZXNHcmlkLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobm90U2F2ZWQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiRXJyb3I8YnI+PGJyPlF1ZXN0aW9uczogPGJyPlwiICsgKG5vdFNhdmVkLmpvaW4oJywgJykpICsgXCI8YnI+bm90IHNhdmVkXCIpO1xuICAgICAgfVxuICAgICAgaWYgKGVtcHR5T3B0aW9ucy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcGx1cmFsID0gZW1wdHlPcHRpb25zLmxlbmd0aCA+IDE7XG4gICAgICAgIF9xdWVzdGlvbiA9IHBsdXJhbCA/IFwiUXVlc3Rpb25zXCIgOiBcIlF1ZXN0aW9uXCI7XG4gICAgICAgIF9oYXMgPSBwbHVyYWwgPyBcImhhdmVcIiA6IFwiaGFzXCI7XG4gICAgICAgIGFsZXJ0KFwiV2FybmluZ1xcblxcblwiICsgX3F1ZXN0aW9uICsgXCIgXCIgKyAoZW1wdHlPcHRpb25zLmpvaW4oJyAsJykpICsgXCIgXCIgKyBfaGFzICsgXCIgbm8gb3B0aW9ucy5cIik7XG4gICAgICB9XG4gICAgICBpZiAocmVxdWlyZXNHcmlkLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBwbHVyYWwgPSBlbXB0eU9wdGlvbnMubGVuZ3RoID4gMTtcbiAgICAgICAgX3F1ZXN0aW9uID0gcGx1cmFsID8gXCJRdWVzdGlvbnNcIiA6IFwiUXVlc3Rpb25cIjtcbiAgICAgICAgX3JlcXVpcmUgPSBwbHVyYWwgPyBcInJlcXVpcmVcIiA6IFwicmVxdWlyZXNcIjtcbiAgICAgICAgYWxlcnQoXCJXYXJuaW5nXFxuXFxuXCIgKyBfcXVlc3Rpb24gKyBcIiBcIiArIChyZXF1aXJlc0dyaWQuam9pbignICwnKSkgKyBcIiBcIiArIF9yZXF1aXJlICsgXCIgYSBncmlkIHRvIGJlIGxpbmtlZCB0byB0aGlzIHRlc3QuXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMubW9kZWwuc2F2ZSh7XG4gICAgICAgIG5hbWU6IHRoaXMuJGVsLmZpbmQoXCIjbmFtZVwiKS52YWwoKSxcbiAgICAgICAgcGFydDogTWF0aC5tYXgocGFyc2VJbnQodGhpcy4kZWwuZmluZChcIiNwYXJ0XCIpLnZhbCgpKSwgMSksXG4gICAgICAgIHJlcG9ydFR5cGU6IHRoaXMuJGVsLmZpbmQoXCIjcmVwb3J0X3R5cGVcIikudmFsKCkudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgaXRlbVR5cGU6IHRoaXMuJGVsLmZpbmQoXCIjaXRlbV90eXBlXCIpLnZhbCgpLnRvTG93ZXJDYXNlKCksXG4gICAgICAgIHNjb3JlVGFyZ2V0OiBwYXJzZUludCh0aGlzLiRlbC5maW5kKFwiI3Njb3JlX3RhcmdldFwiKS52YWwoKSksXG4gICAgICAgIHNjb3JlU3ByZWFkOiBwYXJzZUludCh0aGlzLiRlbC5maW5kKFwiI3Njb3JlX3NwcmVhZFwiKS52YWwoKSksXG4gICAgICAgIG9yZGVyOiBNYXRoLm1heChwYXJzZUludCh0aGlzLiRlbC5maW5kKFwiI29yZGVyXCIpLnZhbCgpKSwgMCksXG4gICAgICAgIGdyaWRMaW5rSWQ6IHRoaXMuJGVsLmZpbmQoXCIjbGlua19zZWxlY3Qgb3B0aW9uOnNlbGVjdGVkXCIpLnZhbCgpLFxuICAgICAgICBhdXRvc3RvcExpbWl0OiBwYXJzZUludCh0aGlzLiRlbC5maW5kKFwiI2F1dG9zdG9wX2xpbWl0XCIpLnZhbCgpKSB8fCAwXG4gICAgICB9LCB7XG4gICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuc3VjY2VzcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQoXCJTdWJ0ZXN0IFNhdmVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoX3RoaXMuZ29CYWNrLCAxMDAwKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSxcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChvcHRpb25zLmVycm9yICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmVycm9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIlNhdmUgZXJyb3JcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBLbGFzc1N1YnRlc3RFZGl0Vmlldy5wcm90b3R5cGUucmVuZGVyUXVlc3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlZiwgcmVmMTtcbiAgICB0aGlzLiRlbC5maW5kKFwiI3F1ZXN0aW9uX2xpc3Rfd3JhcHBlclwiKS5lbXB0eSgpO1xuICAgIGlmICgocmVmID0gdGhpcy5xdWVzdGlvbnNFZGl0VmlldykgIT0gbnVsbCkge1xuICAgICAgcmVmLnJlbmRlcigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNxdWVzdGlvbl9saXN0X3dyYXBwZXJcIikuYXBwZW5kKChyZWYxID0gdGhpcy5xdWVzdGlvbnNFZGl0VmlldykgIT0gbnVsbCA/IHJlZjEuZWwgOiB2b2lkIDApO1xuICB9O1xuXG4gIEtsYXNzU3VidGVzdEVkaXRWaWV3LnByb3RvdHlwZS50b2dnbGVBZGRRdWVzdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGVsLmZpbmQoXCIjYWRkX3F1ZXN0aW9uX2Zvcm0sIC5hZGRfcXVlc3Rpb25cIikuZmFkZVRvZ2dsZSgyNTAsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoX3RoaXMuJGVsLmZpbmQoXCIjYWRkX3F1ZXN0aW9uX2Zvcm1cIikuaXMoXCI6dmlzaWJsZVwiKSkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy4kZWwuZmluZChcIiNxdWVzdGlvbl9wcm9tcHRcIikuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEtsYXNzU3VidGVzdEVkaXRWaWV3LnByb3RvdHlwZS5hZGRRdWVzdGlvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIG5ld0F0dHJpYnV0ZXMsIG5xO1xuICAgIGlmIChldmVudC50eXBlICE9PSBcImNsaWNrXCIgJiYgZXZlbnQud2hpY2ggIT09IDEzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbmV3QXR0cmlidXRlcyA9ICQuZXh0ZW5kKFRhbmdlcmluZS50ZW1wbGF0ZXMuZ2V0KFwicXVlc3Rpb25UZW1wbGF0ZVwiKSwge1xuICAgICAgc3VidGVzdElkOiB0aGlzLm1vZGVsLmlkLFxuICAgICAgY3VycmljdWx1bUlkOiB0aGlzLmN1cnJpY3VsdW0uaWQsXG4gICAgICBpZDogVXRpbHMuZ3VpZCgpLFxuICAgICAgb3JkZXI6IHRoaXMucXVlc3Rpb25zLmxlbmd0aCxcbiAgICAgIHByb21wdDogdGhpcy4kZWwuZmluZCgnI3F1ZXN0aW9uX3Byb21wdCcpLnZhbCgpLFxuICAgICAgbmFtZTogdGhpcy4kZWwuZmluZCgnI3F1ZXN0aW9uX25hbWUnKS52YWwoKS5zYWZldHlEYW5jZSgpXG4gICAgfSk7XG4gICAgbnEgPSB0aGlzLnF1ZXN0aW9ucy5jcmVhdGUobmV3QXR0cmlidXRlcyk7XG4gICAgdGhpcy4kZWwuZmluZChcIiNhZGRfcXVlc3Rpb25fZm9ybSBpbnB1dFwiKS52YWwoJycpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIjcXVlc3Rpb25fcHJvbXB0XCIpLmZvY3VzKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEtsYXNzU3VidGVzdEVkaXRWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXV0b3N0b3BMaW1pdCwgY2FwdHVyZUxhc3RBdHRlbXB0ZWQsIGNvbHVtbnMsIGN1cnJpY3VsdW1OYW1lLCBlbmRPZkxpbmUsIGdyaWRMaW5rSWQsIGl0ZW1UeXBlLCBpdGVtcywgbmFtZSwgb3JkZXIsIHBhcnQsIHByb3RvdHlwZU9wdGlvbnMsIHJhbmRvbWl6ZSwgcmVwb3J0VHlwZSwgc2NvcmVTcHJlYWQsIHNjb3JlVGFyZ2V0LCB0aW1lcjtcbiAgICBjdXJyaWN1bHVtTmFtZSA9IHRoaXMuY3VycmljdWx1bS5lc2NhcGUoXCJuYW1lXCIpO1xuICAgIG5hbWUgPSB0aGlzLm1vZGVsLmVzY2FwZShcIm5hbWVcIik7XG4gICAgcGFydCA9IHRoaXMubW9kZWwuZ2V0TnVtYmVyKFwicGFydFwiKTtcbiAgICByZXBvcnRUeXBlID0gdGhpcy5tb2RlbC5lc2NhcGUoXCJyZXBvcnRUeXBlXCIpO1xuICAgIGl0ZW1UeXBlID0gdGhpcy5tb2RlbC5lc2NhcGUoXCJpdGVtVHlwZVwiKTtcbiAgICBzY29yZVRhcmdldCA9IHRoaXMubW9kZWwuZ2V0TnVtYmVyKFwic2NvcmVUYXJnZXRcIik7XG4gICAgc2NvcmVTcHJlYWQgPSB0aGlzLm1vZGVsLmdldE51bWJlcihcInNjb3JlU3ByZWFkXCIpO1xuICAgIG9yZGVyID0gdGhpcy5tb2RlbC5nZXROdW1iZXIoXCJvcmRlclwiKTtcbiAgICBpZiAodGhpcy5wcm90b3R5cGUgPT09IFwiZ3JpZFwiKSB7XG4gICAgICBlbmRPZkxpbmUgPSB0aGlzLm1vZGVsLmhhcyhcImVuZE9mTGluZVwiKSA/IHRoaXMubW9kZWwuZ2V0KFwiZW5kT2ZMaW5lXCIpIDogdHJ1ZTtcbiAgICAgIHJhbmRvbWl6ZSA9IHRoaXMubW9kZWwuaGFzKFwicmFuZG9taXplXCIpID8gdGhpcy5tb2RlbC5nZXQoXCJyYW5kb21pemVcIikgOiBmYWxzZTtcbiAgICAgIGNhcHR1cmVMYXN0QXR0ZW1wdGVkID0gdGhpcy5tb2RlbC5oYXMoXCJjYXB0dXJlTGFzdEF0dGVtcHRlZFwiKSA/IHRoaXMubW9kZWwuZ2V0KFwiY2FwdHVyZUxhc3RBdHRlbXB0ZWRcIikgOiB0cnVlO1xuICAgICAgaXRlbXMgPSB0aGlzLm1vZGVsLmdldChcIml0ZW1zXCIpLmpvaW4oXCIgXCIpO1xuICAgICAgdGltZXIgPSB0aGlzLm1vZGVsLmdldChcInRpbWVyXCIpIHx8IDA7XG4gICAgICBjb2x1bW5zID0gdGhpcy5tb2RlbC5nZXQoXCJjb2x1bW5zXCIpIHx8IDA7XG4gICAgICBwcm90b3R5cGVPcHRpb25zID0gXCI8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3N1YnRlc3RfaXRlbXMnIHRpdGxlPSdUaGVzZSBpdGVtcyBhcmUgc3BhY2UgZGVsaW1pdGVkLiBQYXN0aW5nIHRleHQgZnJvbSBvdGhlciBhcHBsaWNhdGlvbnMgbWF5IGluc2VydCB0YWJzIGFuZCBuZXcgbGluZXMuIFdoaXRlc3BhY2Ugd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGNvcnJlY3RlZC4nPkdyaWQgSXRlbXM8L2xhYmVsPiA8dGV4dGFyZWEgaWQ9J3N1YnRlc3RfaXRlbXMnPlwiICsgaXRlbXMgKyBcIjwvdGV4dGFyZWE+IDwvZGl2PiA8bGFiZWw+UmFuZG9taXplIGl0ZW1zPC9sYWJlbD48YnI+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gPGRpdiBpZD0ncmFuZG9taXplJyBjbGFzcz0nYnV0dG9uc2V0Jz4gPGxhYmVsIGZvcj0ncmFuZG9taXplX3RydWUnPlllczwvbGFiZWw+PGlucHV0IG5hbWU9J3JhbmRvbWl6ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJyBpZD0ncmFuZG9taXplX3RydWUnIFwiICsgKHJhbmRvbWl6ZSA/ICdjaGVja2VkJyA6IHZvaWQgMCkgKyBcIj4gPGxhYmVsIGZvcj0ncmFuZG9taXplX2ZhbHNlJz5ObzwvbGFiZWw+PGlucHV0IG5hbWU9J3JhbmRvbWl6ZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZScgaWQ9J3JhbmRvbWl6ZV9mYWxzZScgXCIgKyAoIXJhbmRvbWl6ZSA/ICdjaGVja2VkJyA6IHZvaWQgMCkgKyBcIj4gPC9kaXY+IDwvZGl2Pjxicj4gPGxhYmVsPk1hcmsgZW50aXJlIGxpbmUgYnV0dG9uPC9sYWJlbD48YnI+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gPGRpdiBpZD0nZW5kX29mX2xpbmUnIGNsYXNzPSdidXR0b25zZXQnPiA8bGFiZWwgZm9yPSdlbmRfb2ZfbGluZV90cnVlJz5ZZXM8L2xhYmVsPjxpbnB1dCBuYW1lPSdlbmRfb2ZfbGluZScgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJyBpZD0nZW5kX29mX2xpbmVfdHJ1ZScgXCIgKyAoZW5kT2ZMaW5lID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8bGFiZWwgZm9yPSdlbmRfb2ZfbGluZV9mYWxzZSc+Tm88L2xhYmVsPjxpbnB1dCBuYW1lPSdlbmRfb2ZfbGluZScgdHlwZT0ncmFkaW8nIHZhbHVlPSdmYWxzZScgaWQ9J2VuZF9vZl9saW5lX2ZhbHNlJyBcIiArICghZW5kT2ZMaW5lID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8L2Rpdj4gPC9kaXY+PGJyPiA8bGFiZWw+Q2FwdHVyZSBsYXN0IGl0ZW0gYXR0ZW1wdGVkPC9sYWJlbD48YnI+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gPGRpdiBpZD0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZCcgY2xhc3M9J2J1dHRvbnNldCc+IDxsYWJlbCBmb3I9J2NhcHR1cmVfbGFzdF9hdHRlbXB0ZWRfdHJ1ZSc+WWVzPC9sYWJlbD48aW5wdXQgbmFtZT0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZCcgdHlwZT0ncmFkaW8nIHZhbHVlPSd0cnVlJyBpZD0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZF90cnVlJyBcIiArIChjYXB0dXJlTGFzdEF0dGVtcHRlZCA/ICdjaGVja2VkJyA6IHZvaWQgMCkgKyBcIj4gPGxhYmVsIGZvcj0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZF9mYWxzZSc+Tm88L2xhYmVsPjxpbnB1dCBuYW1lPSdjYXB0dXJlX2xhc3RfYXR0ZW1wdGVkJyB0eXBlPSdyYWRpbycgdmFsdWU9J2ZhbHNlJyBpZD0nY2FwdHVyZV9sYXN0X2F0dGVtcHRlZF9mYWxzZScgXCIgKyAoIWNhcHR1cmVMYXN0QXR0ZW1wdGVkID8gJ2NoZWNrZWQnIDogdm9pZCAwKSArIFwiPiA8L2Rpdj4gPC9kaXY+PGJyPiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3N1YnRlc3RfY29sdW1ucycgdGl0bGU9J051bWJlciBvZiBjb2x1bW5zIGluIHdoaWNoIHRvIGRpc3BsYXkgdGhlIGdyaWQgaXRlbXMuJz5Db2x1bW5zPC9sYWJlbD48YnI+IDxpbnB1dCBpZD0nc3VidGVzdF9jb2x1bW5zJyB2YWx1ZT0nXCIgKyBjb2x1bW5zICsgXCInIHR5cGU9J251bWJlcic+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3N1YnRlc3RfdGltZXInIHRpdGxlPSdTZWNvbmRzIHRvIGdpdmUgdGhlIGNoaWxkIHRvIGNvbXBsZXRlIHRoZSB0ZXN0LiBTZXR0aW5nIHRoaXMgdmFsdWUgdG8gMCB3aWxsIG1ha2UgdGhlIHRlc3QgdW50aW1lZC4nPlRpbWVyPC9sYWJlbD48YnI+IDxpbnB1dCBpZD0nc3VidGVzdF90aW1lcicgdmFsdWU9J1wiICsgdGltZXIgKyBcIicgdHlwZT0nbnVtYmVyJz4gPC9kaXY+XCI7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3RvdHlwZSA9PT0gXCJzdXJ2ZXlcIikge1xuICAgICAgZ3JpZExpbmtJZCA9IHRoaXMubW9kZWwuZ2V0KFwiZ3JpZExpbmtJZFwiKSB8fCBcIlwiO1xuICAgICAgYXV0b3N0b3BMaW1pdCA9IHBhcnNlSW50KHRoaXMubW9kZWwuZ2V0KFwiYXV0b3N0b3BMaW1pdFwiKSkgfHwgMDtcbiAgICAgIHRoaXMub24oXCJyZW5kZXJlZFwiLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBzdWJ0ZXN0cztcbiAgICAgICAgICBfdGhpcy5yZW5kZXJRdWVzdGlvbnMoKTtcbiAgICAgICAgICBzdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0cztcbiAgICAgICAgICByZXR1cm4gc3VidGVzdHMuZmV0Y2goe1xuICAgICAgICAgICAga2V5OiBcInNcIiArIF90aGlzLmN1cnJpY3VsdW0uaWQsXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgIHZhciBqLCBsZW4sIGxpbmtTZWxlY3QsIHJlZiwgc3VidGVzdDtcbiAgICAgICAgICAgICAgY29sbGVjdGlvbiA9IG5ldyBTdWJ0ZXN0cyhjb2xsZWN0aW9uLndoZXJlKHtcbiAgICAgICAgICAgICAgICBwcm90b3R5cGU6ICdncmlkJ1xuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIGNvbGxlY3Rpb24uc29ydCgpO1xuICAgICAgICAgICAgICBsaW5rU2VsZWN0ID0gXCI8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J2xpbmtfc2VsZWN0Jz5MaW5rZWQgdG8gZ3JpZDwvbGFiZWw+PGJyPiA8ZGl2IGNsYXNzPSdtZW51X2JveCc+IDxzZWxlY3QgaWQ9J2xpbmtfc2VsZWN0Jz4gPG9wdGlvbiB2YWx1ZT0nJz5Ob25lPC9vcHRpb24+XCI7XG4gICAgICAgICAgICAgIHJlZiA9IGNvbGxlY3Rpb24ubW9kZWxzO1xuICAgICAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICBzdWJ0ZXN0ID0gcmVmW2pdO1xuICAgICAgICAgICAgICAgIGxpbmtTZWxlY3QgKz0gXCI8b3B0aW9uIHZhbHVlPSdcIiArIHN1YnRlc3QuaWQgKyBcIicgXCIgKyAoKGdyaWRMaW5rSWQgPT09IHN1YnRlc3QuaWQpID8gJ3NlbGVjdGVkJyA6ICcnKSArIFwiPlwiICsgKHN1YnRlc3QuZ2V0KCdwYXJ0JykpICsgXCIgXCIgKyAoc3VidGVzdC5nZXQoJ25hbWUnKSkgKyBcIjwvb3B0aW9uPlwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxpbmtTZWxlY3QgKz0gXCI8L3NlbGVjdD48L2Rpdj48L2Rpdj5cIjtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLiRlbC5maW5kKCcjZ3JpZF9saW5rJykuaHRtbChsaW5rU2VsZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICAgIHByb3RvdHlwZU9wdGlvbnMgPSBcIjxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nYXV0b3N0b3BfbGltaXQnIHRpdGxlPSdUaGUgc3VydmV5IHdpbGwgZGlzY29udGludWUgYWZ0ZXIgdGhlIGZpcnN0IE4gcXVlc3Rpb25zIGhhdmUgYmVlbiBhbnN3ZXJlZCB3aXRoIGEgJnF1b3Q7MCZxdW90OyB2YWx1ZSBvcHRpb24uJz5BdXRvc3RvcCBhZnRlciBOIGluY29ycmVjdDwvbGFiZWw+PGJyPiA8aW5wdXQgaWQ9J2F1dG9zdG9wX2xpbWl0JyB0eXBlPSdudW1iZXInIHZhbHVlPSdcIiArIGF1dG9zdG9wTGltaXQgKyBcIic+IDwvZGl2PiA8ZGl2IGlkPSdncmlkX2xpbmsnPjwvZGl2PiA8ZGl2IGlkPSdxdWVzdGlvbnMnPiA8aDI+UXVlc3Rpb25zPC9oMj4gPGRpdiBjbGFzcz0nbWVudV9ib3gnPiA8ZGl2IGlkPSdxdWVzdGlvbl9saXN0X3dyYXBwZXInPjxpbWcgY2xhc3M9J2xvYWRpbmcnIHNyYz0naW1hZ2VzL2xvYWRpbmcuZ2lmJz48L2Rpdj4gPGJ1dHRvbiBjbGFzcz0nYWRkX3F1ZXN0aW9uIGNvbW1hbmQnPkFkZCBRdWVzdGlvbjwvYnV0dG9uPiA8ZGl2IGlkPSdhZGRfcXVlc3Rpb25fZm9ybScgY2xhc3M9J2NvbmZpcm1hdGlvbic+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gPGgyPk5ldyBRdWVzdGlvbjwvaDI+IDxsYWJlbCBmb3I9J3F1ZXN0aW9uX3Byb21wdCc+UHJvbXB0PC9sYWJlbD4gPGlucHV0IGlkPSdxdWVzdGlvbl9wcm9tcHQnPiA8bGFiZWwgZm9yPSdxdWVzdGlvbl9uYW1lJz5WYXJpYWJsZSBuYW1lPC9sYWJlbD4gPGlucHV0IGlkPSdxdWVzdGlvbl9uYW1lJyB0aXRsZT0nQWxsb3dlZCBjaGFyYWN0ZXJzOiBBLVosIGEteiwgMC05LCBhbmQgdW5kZXJzY29yZXMuJz48YnI+IDxidXR0b24gY2xhc3M9J2FkZF9xdWVzdGlvbl9hZGQgY29tbWFuZCc+QWRkPC9idXR0b24+PGJ1dHRvbiBjbGFzcz0nYWRkX3F1ZXN0aW9uX2NhbmNlbCBjb21tYW5kJz5DYW5jZWw8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+XCI7XG4gICAgfVxuICAgIHRoaXMuJGVsLmh0bWwoXCI8YnV0dG9uIGNsYXNzPSdiYWNrX2J1dHRvbiBuYXZpZ2F0aW9uJz5CYWNrPC9idXR0b24+PGJyPiA8aDE+U3VidGVzdCBFZGl0b3I8L2gxPiA8dGFibGUgY2xhc3M9J2Jhc2ljX2luZm8nPiA8dHI+IDx0aD5DdXJyaWN1bHVtPC90aD4gPHRkPlwiICsgY3VycmljdWx1bU5hbWUgKyBcIjwvdGQ+IDwvdHI+IDwvdGFibGU+IDxidXR0b24gY2xhc3M9J3NhdmVfc3VidGVzdCBjb21tYW5kJz5Eb25lPC9idXR0b24+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nbmFtZSc+TmFtZTwvbGFiZWw+IDxpbnB1dCBpZD0nbmFtZScgdmFsdWU9J1wiICsgbmFtZSArIFwiJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0ncmVwb3J0X3R5cGUnPlJlcG9ydCBUeXBlPC9sYWJlbD4gPGlucHV0IGlkPSdyZXBvcnRfdHlwZScgdmFsdWU9J1wiICsgcmVwb3J0VHlwZSArIFwiJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0naXRlbV90eXBlJyB0aXRsZT0nVGhpcyB2YXJpYWJsZSBpcyB1c2VkIGZvciByZXBvcnRzLiBBbGwgcmVzdWx0cyBmcm9tIHN1YnRlc3RzIHdpdGggdGhlIHNhbWUgSXRlbSBUeXBlIHdpbGwgc2hvdyB1cCB0b2dldGhlci4gSW5jb25zaXN0ZW50IG5hbWluZyB3aWxsIGludmFsaWRhdGUgcmVzdWx0cy4gICc+SXRlbSBUeXBlPC9sYWJlbD4gPGlucHV0IGlkPSdpdGVtX3R5cGUnIHZhbHVlPSdcIiArIGl0ZW1UeXBlICsgXCInPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdwYXJ0Jz5Bc3Nlc3NtZW50IE51bWJlcjwvbGFiZWw+PGJyPiA8aW5wdXQgdHlwZT0nbnVtYmVyJyBpZD0ncGFydCcgdmFsdWU9J1wiICsgcGFydCArIFwiJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nc2NvcmVfdGFyZ2V0Jz5UYXJnZXQgc2NvcmU8L2xhYmVsPjxicj4gPGlucHV0IHR5cGU9J251bWJlcicgaWQ9J3Njb3JlX3RhcmdldCcgdmFsdWU9J1wiICsgc2NvcmVUYXJnZXQgKyBcIic+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3Njb3JlX3NwcmVhZCc+U2NvcmUgc3ByZWFkPC9sYWJlbD48YnI+IDxpbnB1dCB0eXBlPSdudW1iZXInIGlkPSdzY29yZV9zcHJlYWQnIHZhbHVlPSdcIiArIHNjb3JlU3ByZWFkICsgXCInPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdvcmRlcic+T3JkZXI8L2xhYmVsPjxicj4gPGlucHV0IHR5cGU9J251bWJlcicgaWQ9J29yZGVyJyB2YWx1ZT0nXCIgKyBvcmRlciArIFwiJz4gPC9kaXY+IFwiICsgcHJvdG90eXBlT3B0aW9ucyArIFwiIDxidXR0b24gY2xhc3M9J3NhdmVfc3VidGVzdCBjb21tYW5kJz5Eb25lPC9idXR0b24+XCIpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICByZXR1cm4gS2xhc3NTdWJ0ZXN0RWRpdFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBLbGFzc0dyb3VwaW5nVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIktsYXNzR3JvdXBpbmdWaWV3XCJcblxuICAjIFVzZWQgdG8gY2FsY3VsYXRlIHBlcmNlbnRpbGVzXG4gICMgVXNlIGluZGljZXMgd2hlcmUgSW5kZXggPSBTdGFuZGFyZCBEZXZpYXRpb24gKiAxMDAgZm9yIG5lZ2F0aXZlIGRldmlhdGlvbnNcbiAgbm9ybWFsQ3VydmUgOiBbMC4wMDAwMCwgMC4wMDM5OSwgMC4wMDc5OCwgMC4wMTE5NywgMC4wMTU5NSwgMC4wMTk5NCwgMC4wMjM5MiwgMC4wMjc5MCwgMC4wMzE4OCwgMC4wMzU4NiwwLjAzOTgzLCAwLjA0MzgwLCAwLjA0Nzc2LCAwLjA1MTcyLCAwLjA1NTY3LCAwLjA1OTYyLCAwLjA2MzU2LCAwLjA2NzQ5LCAwLjA3MTQyLCAwLjA3NTM1LDAuMDc5MjYsIDAuMDgzMTcsIDAuMDg3MDYsIDAuMDkwOTUsIDAuMDk0ODMsIDAuMDk4NzEsIDAuMTAyNTcsIDAuMTA2NDIsIDAuMTEwMjYsIDAuMTE0MDksMC4xMTc5MSwgMC4xMjE3MiwgMC4xMjU1MiwgMC4xMjkzMCwgMC4xMzMwNywgMC4xMzY4MywgMC4xNDA1OCwgMC4xNDQzMSwgMC4xNDgwMywgMC4xNTE3MywwLjE1NTQyLCAwLjE1OTEwLCAwLjE2Mjc2LCAwLjE2NjQwLCAwLjE3MDAzLCAwLjE3MzY0LCAwLjE3NzI0LCAwLjE4MDgyLCAwLjE4NDM5LCAwLjE4NzkzLDAuMTkxNDYsIDAuMTk0OTcsIDAuMTk4NDcsIDAuMjAxOTQsIDAuMjA1NDAsIDAuMjA4ODQsIDAuMjEyMjYsIDAuMjE1NjYsIDAuMjE5MDQsIDAuMjIyNDAsMC4yMjU3NSwgMC4yMjkwNywgMC4yMzIzNywgMC4yMzU2NSwgMC4yMzg5MSwgMC4yNDIxNSwgMC4yNDUzNywgMC4yNDg1NywgMC4yNTE3NSwgMC4yNTQ5MCwwLjI1ODA0LCAwLjI2MTE1LCAwLjI2NDI0LCAwLjI2NzMwLCAwLjI3MDM1LCAwLjI3MzM3LCAwLjI3NjM3LCAwLjI3OTM1LCAwLjI4MjMwLCAwLjI4NTI0LDAuMjg4MTQsIDAuMjkxMDMsIDAuMjkzODksIDAuMjk2NzMsIDAuMjk5NTUsIDAuMzAyMzQsIDAuMzA1MTEsIDAuMzA3ODUsIDAuMzEwNTcsIDAuMzEzMjcsMC4zMTU5NCwgMC4zMTg1OSwgMC4zMjEyMSwgMC4zMjM4MSwgMC4zMjYzOSwgMC4zMjg5NCwgMC4zMzE0NywgMC4zMzM5OCwgMC4zMzY0NiwgMC4zMzg5MSwwLjM0MTM0LCAwLjM0Mzc1LCAwLjM0NjE0LCAwLjM0ODQ5LCAwLjM1MDgzLCAwLjM1MzE0LCAwLjM1NTQzLCAwLjM1NzY5LCAwLjM1OTkzLCAwLjM2MjE0LDAuMzY0MzMsIDAuMzY2NTAsIDAuMzY4NjQsIDAuMzcwNzYsIDAuMzcyODYsIDAuMzc0OTMsIDAuMzc2OTgsIDAuMzc5MDAsIDAuMzgxMDAsIDAuMzgyOTgsMC4zODQ5MywgMC4zODY4NiwgMC4zODg3NywgMC4zOTA2NSwgMC4zOTI1MSwgMC4zOTQzNSwgMC4zOTYxNywgMC4zOTc5NiwgMC4zOTk3MywgMC40MDE0NywwLjQwMzIwLCAwLjQwNDkwLCAwLjQwNjU4LCAwLjQwODI0LCAwLjQwOTg4LCAwLjQxMTQ5LCAwLjQxMzA4LCAwLjQxNDY2LCAwLjQxNjIxLCAwLjQxNzc0LDAuNDE5MjQsIDAuNDIwNzMsIDAuNDIyMjAsIDAuNDIzNjQsIDAuNDI1MDcsIDAuNDI2NDcsIDAuNDI3ODUsIDAuNDI5MjIsIDAuNDMwNTYsIDAuNDMxODksMC40MzMxOSwgMC40MzQ0OCwgMC40MzU3NCwgMC40MzY5OSwgMC40MzgyMiwgMC40Mzk0MywgMC40NDA2MiwgMC40NDE3OSwgMC40NDI5NSwgMC40NDQwOCwwLjQ0NTIwLCAwLjQ0NjMwLCAwLjQ0NzM4LCAwLjQ0ODQ1LCAwLjQ0OTUwLCAwLjQ1MDUzLCAwLjQ1MTU0LCAwLjQ1MjU0LCAwLjQ1MzUyLCAwLjQ1NDQ5LDAuNDU1NDMsIDAuNDU2MzcsIDAuNDU3MjgsIDAuNDU4MTgsIDAuNDU5MDcsIDAuNDU5OTQsIDAuNDYwODAsIDAuNDYxNjQsIDAuNDYyNDYsIDAuNDYzMjcsMC40NjQwNywgMC40NjQ4NSwgMC40NjU2MiwgMC40NjYzOCwgMC40NjcxMiwgMC40Njc4NCwgMC40Njg1NiwgMC40NjkyNiwgMC40Njk5NSwgMC40NzA2MiwwLjQ3MTI4LCAwLjQ3MTkzLCAwLjQ3MjU3LCAwLjQ3MzIwLCAwLjQ3MzgxLCAwLjQ3NDQxLCAwLjQ3NTAwLCAwLjQ3NTU4LCAwLjQ3NjE1LCAwLjQ3NjcwLDAuNDc3MjUsIDAuNDc3NzgsIDAuNDc4MzEsIDAuNDc4ODIsIDAuNDc5MzIsIDAuNDc5ODIsIDAuNDgwMzAsIDAuNDgwNzcsIDAuNDgxMjQsIDAuNDgxNjksMC40ODIxNCwgMC40ODI1NywgMC40ODMwMCwgMC40ODM0MSwgMC40ODM4MiwgMC40ODQyMiwgMC40ODQ2MSwgMC40ODUwMCwgMC40ODUzNywgMC40ODU3NCwwLjQ4NjEwLCAwLjQ4NjQ1LCAwLjQ4Njc5LCAwLjQ4NzEzLCAwLjQ4NzQ1LCAwLjQ4Nzc4LCAwLjQ4ODA5LCAwLjQ4ODQwLCAwLjQ4ODcwLCAwLjQ4ODk5LDAuNDg5MjgsIDAuNDg5NTYsIDAuNDg5ODMsIDAuNDkwMTAsIDAuNDkwMzYsIDAuNDkwNjEsIDAuNDkwODYsIDAuNDkxMTEsIDAuNDkxMzQsIDAuNDkxNTgsMC40OTE4MCwgMC40OTIwMiwgMC40OTIyNCwgMC40OTI0NSwgMC40OTI2NiwgMC40OTI4NiwgMC40OTMwNSwgMC40OTMyNCwgMC40OTM0MywgMC40OTM2MSwwLjQ5Mzc5LCAwLjQ5Mzk2LCAwLjQ5NDEzLCAwLjQ5NDMwLCAwLjQ5NDQ2LCAwLjQ5NDYxLCAwLjQ5NDc3LCAwLjQ5NDkyLCAwLjQ5NTA2LCAwLjQ5NTIwLDAuNDk1MzQsIDAuNDk1NDcsIDAuNDk1NjAsIDAuNDk1NzMsIDAuNDk1ODUsIDAuNDk1OTgsIDAuNDk2MDksIDAuNDk2MjEsIDAuNDk2MzIsIDAuNDk2NDMsMC40OTY1MywgMC40OTY2NCwgMC40OTY3NCwgMC40OTY4MywgMC40OTY5MywgMC40OTcwMiwgMC40OTcxMSwgMC40OTcyMCwgMC40OTcyOCwgMC40OTczNiwwLjQ5NzQ0LCAwLjQ5NzUyLCAwLjQ5NzYwLCAwLjQ5NzY3LCAwLjQ5Nzc0LCAwLjQ5NzgxLCAwLjQ5Nzg4LCAwLjQ5Nzk1LCAwLjQ5ODAxLCAwLjQ5ODA3LDAuNDk4MTMsIDAuNDk4MTksIDAuNDk4MjUsIDAuNDk4MzEsIDAuNDk4MzYsIDAuNDk4NDEsIDAuNDk4NDYsIDAuNDk4NTEsIDAuNDk4NTYsIDAuNDk4NjEsMC40OTg2NSwgMC40OTg2OSwgMC40OTg3NCwgMC40OTg3OCwgMC40OTg4MiwgMC40OTg4NiwgMC40OTg4OSwgMC40OTg5MywgMC40OTg5NiwgMC40OTkwMCwwLjQ5OTAzLCAwLjQ5OTA2LCAwLjQ5OTEwLCAwLjQ5OTEzLCAwLjQ5OTE2LCAwLjQ5OTE4LCAwLjQ5OTIxLCAwLjQ5OTI0LCAwLjQ5OTI2LCAwLjQ5OTI5LDAuNDk5MzEsIDAuNDk5MzQsIDAuNDk5MzYsIDAuNDk5MzgsIDAuNDk5NDAsIDAuNDk5NDIsIDAuNDk5NDQsIDAuNDk5NDYsIDAuNDk5NDgsIDAuNDk5NTAsIDAuNDk5NTIsIDAuNDk5NTMsIDAuNDk5NTUsIDAuNDk5NTcsIDAuNDk5NTgsIDAuNDk5NjAsIDAuNDk5NjEsIDAuNDk5NjIsIDAuNDk5NjQsIDAuNDk5NjUsMC40OTk2NiwgMC40OTk2OCwgMC40OTk2OSwgMC40OTk3MCwgMC40OTk3MSwgMC40OTk3MiwgMC40OTk3MywgMC40OTk3NCwgMC40OTk3NSwgMC40OTk3NiwwLjQ5OTc3LCAwLjQ5OTc4LCAwLjQ5OTc4LCAwLjQ5OTc5LCAwLjQ5OTgwLCAwLjQ5OTgxLCAwLjQ5OTgxLCAwLjQ5OTgyLCAwLjQ5OTgzLCAwLjQ5OTgzLDAuNDk5ODQsIDAuNDk5ODUsIDAuNDk5ODUsIDAuNDk5ODYsIDAuNDk5ODYsIDAuNDk5ODcsIDAuNDk5ODcsIDAuNDk5ODgsIDAuNDk5ODgsIDAuNDk5ODksMC40OTk4OSwgMC40OTk5MCwgMC40OTk5MCwgMC40OTk5MCwgMC40OTk5MSwgMC40OTk5MSwgMC40OTk5MiwgMC40OTk5MiwgMC40OTk5MiwgMC40OTk5MiwwLjQ5OTkzLCAwLjQ5OTkzLCAwLjQ5OTkzLCAwLjQ5OTk0LCAwLjQ5OTk0LCAwLjQ5OTk0LCAwLjQ5OTk0LCAwLjQ5OTk1LCAwLjQ5OTk1LCAwLjQ5OTk1LDAuNDk5OTUsIDAuNDk5OTUsIDAuNDk5OTYsIDAuNDk5OTYsIDAuNDk5OTYsIDAuNDk5OTYsIDAuNDk5OTYsIDAuNDk5OTYsIDAuNDk5OTcsIDAuNDk5OTcsMC40OTk5NywgMC40OTk5NywgMC40OTk5NywgMC40OTk5NywgMC40OTk5NywgMC40OTk5NywgMC40OTk5OCwgMC40OTk5OCwgMC40OTk5OCwgMC40OTk5OF1cbiAgY29sb3JDbGFzcyAgOiBbXCJjb25jZXJuaW5nXCIsIFwicG9vclwiLCBcImdvb2RcIiwgXCJncmVhdFwiXVxuICBzdGF0dXMgICAgICA6IFtcIkNvbmNlcm5pbmdcIiwgXCJQb29yXCIsIFwiR29vZFwiLCBcIkdyZWF0XCJdXG5cbiAgZXZlbnRzOlxuICAgIFwiY2xpY2sgLmJhY2tcIiAgICAgICAgICAgICAgICAgICAgICA6IFwiZ29CYWNrXCJcbiAgICBcImNoYW5nZSAjc2VsZWN0b3JfY29udGFpbmVyIGlucHV0XCIgOiBcInNlbGVjdG9yXCJcbiAgICAnY2xpY2sgLnN0dWRlbnRfbmFtZScgOiAnc2hvd0l0ZW1pemVkJyBcblxuICBzaG93SXRlbWl6ZWQ6IChldmVudCkgLT5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG4gICAgc3R1ZGVudElkID0gJChldmVudC50YXJnZXQpLmF0dHIgXCJkYXRhLXN0dWRlbnRJZFwiXG4gICAgJHN0dWRlbnRSZXN1bHRzID0gQCRlbC5maW5kIFwiLnN0dWRlbnRfI3tzdHVkZW50SWR9XCJcblxuICAgIGlmICRzdHVkZW50UmVzdWx0cy5pcyBcIjp2aXNpYmxlXCJcbiAgICAgICRzdHVkZW50UmVzdWx0cy5hZGRDbGFzcyBcImNvbmZpcm1hdGlvblwiXG4gICAgICAkdGFyZ2V0LmNzcyBcImNvbG9yXCIgOiBcImJsYWNrXCJcbiAgICBlbHNlXG4gICAgICBAJGVsLmZpbmQoXCIuc3R1ZGVudF9uYW1lXCIpLmNzcyBcImNvbG9yXCIgOiBcImJsYWNrXCJcbiAgICAgICR0YXJnZXQuY3NzIFwiY29sb3JcIiA6IFwid2hpdGVcIlxuICAgICAgQCRlbC5maW5kKFwiLml0ZW1pemVkX3Jlc3VsdHNcIikuYWRkQ2xhc3MgXCJjb25maXJtYXRpb25cIlxuICAgICAgQCRlbC5maW5kKFwiLnN0dWRlbnRfI3tzdHVkZW50SWR9XCIpLnJlbW92ZUNsYXNzIFwiY29uZmlybWF0aW9uXCJcblxuICBzZWxlY3RvcjogLT5cbiAgICBzdWJ0ZXN0SWQgPSBAJGVsLmZpbmQoXCIjc2VsZWN0b3JfY29udGFpbmVyIGlucHV0OmNoZWNrZWRcIikuYXR0cihcImRhdGEtc3VidGVzdElkXCIpXG4gICAgQHNlbGVjdGVkLnN1YnRlc3RJZCA9IHN1YnRlc3RJZFxuICAgIEBzZWxlY3RlZC5yZXN1bHRzICAgPSBAcmVzdWx0cy53aGVyZShcInN1YnRlc3RJZFwiIDogc3VidGVzdElkKVxuXG4gICAgQHVwZGF0ZVRhYmxlKClcbiAgICBAcmVuZGVyKClcblxuICBnb0JhY2s6IC0+IGhpc3RvcnkuYmFjaygpXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT4gXG5cbiAgICBAcmVzdWx0cyA9IG9wdGlvbnMucmVzdWx0c1xuICAgIEBzdWJ0ZXN0cyA9IG9wdGlvbnMuc3VidGVzdHNcbiAgICBAc3R1ZGVudHMgPSBvcHRpb25zLnN0dWRlbnRzXG5cbiAgICBAc2VsZWN0ZWQgPSB7fVxuICAgIFxuICAgIGZvciBzdWJ0ZXN0LCBpIGluIEBzdWJ0ZXN0cy5tb2RlbHNcbiAgICAgIEBzZWxlY3RlZC5zdWJ0ZXN0SWQgPSBAc3VidGVzdHMubW9kZWxzW2ldLmlkXG4gICAgICBicmVhayBpZiAoQHNlbGVjdGVkLnJlc3VsdHMgPSBAcmVzdWx0cy53aGVyZShcInN1YnRlc3RJZFwiIDogc3VidGVzdC5pZCkpLmxlbmd0aCAhPSAwXG5cbiAgICBAdXBkYXRlVGFibGUoKVxuXG4gIHVwZGF0ZVRhYmxlOiAtPlxuXG4gICAgQHRhYmxlICAgPSBbXVxuICAgIGFDb3JyZWN0ID0gMFxuXG4gICAgQHN1YnRlc3QgPSBAc3VidGVzdHMuZ2V0IEBzZWxlY3RlZC5zdWJ0ZXN0SWRcbiAgICBAc3VtbWFyeSA9XG4gICAgICBcIm5hbWVcIiAgICAgICAgOiBAc3VidGVzdC5nZXQoXCJuYW1lXCIpXG4gICAgICBcImNsYXNzU2l6ZVwiICAgOiBAc3R1ZGVudHMubGVuZ3RoXG4gICAgICBcInJlc3VsdENvdW50XCIgOiBAc2VsZWN0ZWQucmVzdWx0cy5sZW5ndGhcbiAgICAgIFwiYUNvcnJlY3RcIiAgICA6IDBcbiAgICAgIFwiYW5Db3JyZWN0XCIgICA6IDBcbiAgICAgIFwic3RkRGV2XCIgICAgICA6IDBcbiAgICAgIFwiYXR0ZW1wdGVkXCIgICA6IDBcbiAgICAgIFwidG90YWxJdGVtc1wiICA6IEBzZWxlY3RlZC5yZXN1bHRzWzBdPy5nZXQoXCJ0b3RhbFwiKVxuICAgICAgXCJ3YXRjaExpc3RcIiAgIDogW11cblxuICAgIGZvciByZXN1bHQgaW4gQHNlbGVjdGVkLnJlc3VsdHNcbiAgICAgIHBlcnNvbiA9XG4gICAgICAgICdzdHVkZW50SWQnICA6IHJlc3VsdC5nZXQoXCJzdHVkZW50SWRcIilcbiAgICAgICAgJ2l0ZW1zJyAgICAgIDogcmVzdWx0LmdldEl0ZW1pemVkKClcbiAgICAgICAgJ25hbWUnICAgICAgIDogQHN0dWRlbnRzLmdldCggcmVzdWx0LmdldChcInN0dWRlbnRJZFwiKSApLmdldChcIm5hbWVcIilcbiAgICAgICAgJ3BDb3JyZWN0JyAgIDogMFxuICAgICAgICAnbkNvcnJlY3QnICAgOiByZXN1bHQuZ2V0KFwiY29ycmVjdFwiKVxuICAgICAgICAnYXR0ZW1wdGVkJyAgOiByZXN1bHQuZ2V0KFwidG90YWxcIikgLSByZXN1bHQuZ2V0KFwibWlzc2luZ1wiKVxuICAgICAgICAndG90YWwnICAgICAgOiByZXN1bHQuZ2V0KFwidG90YWxcIilcbiAgICAgICAgJ2RldmlhdGlvbicgIDogMFxuICAgICAgICAncGVyY2VudGlsZScgOiAwXG4gICAgICAgICdzdGF0dXMnICAgICA6IFwiXCJcblxuICAgICAgcGVyc29uLnBDb3JyZWN0ID0gTWF0aC5yb3VuZChwZXJzb24ubkNvcnJlY3QgLyBwZXJzb24uYXR0ZW1wdGVkICogMTAwKVxuXG4gICAgICBAc3VtbWFyeS5hQ29ycmVjdCArPSBwZXJzb24ucENvcnJlY3RcbiAgICAgIEBzdW1tYXJ5LmFuQ29ycmVjdCArPSBwZXJzb24ubkNvcnJlY3RcbiAgICAgIEBzdW1tYXJ5LmF0dGVtcHRlZCArPSBwZXJzb24uYXR0ZW1wdGVkXG5cbiAgICAgIEB0YWJsZS5wdXNoIHBlcnNvblxuXG4gICAgQHN1bW1hcnkuYUNvcnJlY3QgID0gTWF0aC5kZWNpbWFscyggQHN1bW1hcnkuYUNvcnJlY3QgLyBAdGFibGUubGVuZ3RoLCAwIClcbiAgICBAc3VtbWFyeS5hbkNvcnJlY3QgPSBNYXRoLmRlY2ltYWxzKCBAc3VtbWFyeS5hbkNvcnJlY3QgLyBAdGFibGUubGVuZ3RoLCAyIClcbiAgICBAc3VtbWFyeS5hdHRlbXB0ZWQgPSBNYXRoLmRlY2ltYWxzKCBAc3VtbWFyeS5hdHRlbXB0ZWQgLyBAdGFibGUubGVuZ3RoLCAyIClcblxuICAgIGZvciBwZXJzb24gaW4gQHRhYmxlXG4gICAgICBAc3VtbWFyeS5zdGREZXYgKz0gTWF0aC5wb3cocGVyc29uLnBDb3JyZWN0IC0gQHN1bW1hcnkuYUNvcnJlY3QsIDIpXG5cbiAgICBAc3VtbWFyeS5zdGREZXYgPSBNYXRoLmRlY2ltYWxzKE1hdGgucG93KCBAc3VtbWFyeS5zdGREZXYgLyBAdGFibGUubGVuZ3RoLCAwLjUpLCAyKVxuXG4gICAgZm9yIHBlcnNvbiwgaSBpbiBAdGFibGVcblxuICAgICAgZGV2ID0gKHBlcnNvbi5wQ29ycmVjdCAtIEBzdW1tYXJ5LmFDb3JyZWN0KSAvIEBzdW1tYXJ5LnN0ZERldlxuXG4gICAgICBkZXZJbmRleCA9IE1hdGgucm91bmQoZGV2ICogMTAwKVxuICAgICAgXG4gICAgICBwZXJjZW50aWxlID0gaWYgZGV2SW5kZXggPiA0MDkgb3IgZGV2SW5kZXggPCAtNDA5XG4gICAgICAgICAgMFxuICAgICAgICBlbHNlIGlmIGRldkluZGV4ID4gMFxuICAgICAgICAgIDEwMCAqIE1hdGgucm91bmQoNTAgKyAxMDAgKiBAbm9ybWFsQ3VydmVbZGV2SW5kZXhdICkgLyAxMDAgXG4gICAgICAgIGVsc2UgaWYgZGV2SW5kZXggPCAwXG4gICAgICAgICAgMTAwICogTWF0aC5yb3VuZCg1MCAtIDEwMCAqIEBub3JtYWxDdXJ2ZVtkZXZJbmRleCAqIC0xXSApIC8gMTAwXG4gICAgICAgIGVsc2VcbiAgICAgICAgICA1MFxuXG4gICAgICBwYyA9IHBlcnNvbi5wQ29ycmVjdFxuXG4gICAgICBpbmRleCA9IFxuICAgICAgICBpZiBwYyA+PSA4MFxuICAgICAgICAgIGluZGV4ID0gM1xuICAgICAgICBlbHNlIGlmIHBjID49IDYwICYmIHBjIDw9IDc5XG4gICAgICAgICAgaW5kZXggPSAyXG4gICAgICAgIGVsc2UgaWYgcGMgPj0gMzAgJiYgcGMgPD0gNTlcbiAgICAgICAgICBpbmRleCA9IDFcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGluZGV4ID0gMFxuXG5cbiAgICAgICMgb2xkIHdheVxuICAgICAgIyBpbmRleCA9IEBnZXRRdWFydGlsZShwZXJjZW50aWxlKVxuICAgICAgXG4gICAgICAjIyMgc2VtaS1vbGQgd2F5XG4gICAgICBNYXRoLmZsb29yKHBlcnNvbi5wQ29ycmVjdCAvIDEwMCAqIDQpXG4gICAgICBpbmRleCA9IDMgaWYgaW5kZXggPT0gNFxuICAgICAgIyMjXG5cbiAgICAgIEB0YWJsZVtpXS5kZXZpYXRpb24gID0gZGV2SW5kZXggLyAxMDBcbiAgICAgIEB0YWJsZVtpXS5wZXJjZW50aWxlID0gcGVyY2VudGlsZVxuICAgICAgQHRhYmxlW2ldLmluZGV4ICAgICAgPSBpbmRleFxuICAgICAgQHRhYmxlW2ldLnN0YXR1cyAgICAgPSBAc3RhdHVzW2luZGV4XVxuXG4gICAgICBAc3VtbWFyeS53YXRjaExpc3QucHVzaCBwZXJzb24ubmFtZSBpZiBpbmRleCA9PSAwICYmICF+QHN1bW1hcnkud2F0Y2hMaXN0LmluZGV4T2YocGVyc29uLm5hbWUgKVxuXG4gICAgIyBTb3J0IGRlc2NlbmRpbmcgYnkgJS1jb3JyZWN0XG4gICAgQHRhYmxlLnNvcnQgKGEsIGIpIC0+IGIucENvcnJlY3QgLSBhLnBDb3JyZWN0XG5cbiAgICBcbiAgICAjIHdhcm5pbmcgZmxhZ3NcbiAgICBuU3R1ZGVudHNOb3RSZWFkeSA9IDBcbiAgICAoblN0dWRlbnRzTm90UmVhZHkrKyBpZiBwZXJzb24ucENvcnJlY3QgPCA3NSkgZm9yIHBlcnNvbiBpbiBAdGFibGVcbiAgICBwTm90UmVhZHkgPSAoblN0dWRlbnRzTm90UmVhZHkvQHRhYmxlLmxlbmd0aCkgKiAxMDBcbiAgICBpc0NsYXNzUmVhZHkgPSBwTm90UmVhZHkgPCAyMFxuXG4gICAgd2FybmluZ0ljb24gPSBcIjxpbWcgc3JjPSdpbWFnZXMvaWNvbl93YXJuLnBuZyc+XCJcbiAgICBAcmVhZHlQZXJjZW50YWdlID0gXCI8cD4je01hdGgucm91bmQocE5vdFJlYWR5KX0lIG9mIHlvdXIgc3R1ZGVudHMgYXJlIG5vdCByZWFkeSB0byBtb3ZlIG9uIHRvIHRoZSBuZXh0IGxlc3NvbnMuPC9wPlwiXG5cbiAgICBjbGFzc1JlYWR5ID0gXCJJdCBpcyBvayB0byBtb3ZlIG9uIGluIHRoZSBsZXNzb24gc2VxdWVuY2UuIE1ha2Ugc3VyZSB0aGF0IHRob3NlIGNoaWxkcmVuIHBlcmZvcm1pbmcgaW4gdGhlIOKAnHBvb3LigJ0gb3Ig4oCcY29uY2VybmluZ+KAnSBjYXRlZ29yeSBnZXQgZXh0cmEgYXR0ZW50aW9uIGFuZCBwcmFjdGljZSBhbmQgZG9u4oCZdCBmYWxsIGJlaGluZC4gVGhpcyBjYW4gYmUgZG9uZSBkdXJpbmcgcHJhY3RpY2UgbGVzc29ucyBvbiBUdWVzZGF5IGFuZCBUaHVyc2RheXMsIG9yIGR1cmluZyBhbm90aGVyIHN1YmplY3Qgb24gdGhlIHRpbWV0YWJsZS5cIlxuICAgIGNsYXNzTm90UmVhZHkgPSBcIllvdXIgY2xhc3MgbmVlZHMgZXh0cmEgcHJhY3RpY2UuIENvbnNpZGVyIHJlLXRlYWNoaW5nIE1vbmRheSBhbmQgV2VkbmVzZGF5IGxlc3NvbnMgaW50cm9kdWNpbmcgdGhlIG5ldyBjdXJyaWN1bHVtIGl0ZW1zIG9yIG9yZ2FuaXplIGludGVuc2UgcHJhY3RpY2UgYWN0aXZpdGllcyBmb3IgdGhlIGVudGlyZSBjbGFzcy4gVG8gZmluZCBvdXQgd2hpY2ggaXRlbXMgc3R1ZGVudHMgYXJlIHBhcnRpY3VsYXJseSBzdHJ1Z2dsaW5nIHdpdGgsIHNlbGVjdCB0aGUgbmFtZSBvZiBhIGZldyBzdHVkZW50cyBpbiB0aGUg4oCccG9vcuKAnSBvciDigJxjb25jZXJuaW5n4oCdIGNhdGVnb3J5IGFuZCByZXZpZXcgdGhlaXIgcGVyZm9ybWFuY2UgaXRlbSBieSBpdGVtLiBUYWtlIG5vdGUgb2YgaXRlbXMgdGhhdCBzZWVtIHBhcnRpY3VsYXJseSB0cm91Ymxlc29tZS5cIlxuXG4gICAgQHJlYWRpbmVzc1dhcm5pbmcgPSBpZiBpc0NsYXNzUmVhZHkgdGhlbiBjbGFzc1JlYWR5IGVsc2UgY2xhc3NOb3RSZWFkeVxuXG4gIHJlbmRlcjogLT5cblxuICAgICNcbiAgICAjIFdhcm5pbmdzXG4gICAgI1xuXG4gICAgaWYgIX5Ac3VidGVzdHMucGx1Y2soXCJyZXBvcnRUeXBlXCIpLmluZGV4T2YoXCJwcm9ncmVzc1wiKSAjZG9udCBkYXRhIGd1aWRhbmNlIGZvciBwcm9ncmVzc1xuXG4gICAgICAjIGR5bmFtaWNcbiAgICAgIHdhcm5pbmdzSFRNTCA9IFwiXG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgI3tAcmVhZHlQZXJjZW50YWdlfVxuICAgICAgICAje0ByZWFkaW5lc3NXYXJuaW5nfVxuICAgICAgPC9zZWN0aW9uPlxuICAgICAgXCJcbiAgICAgICMgc3RhdGljXG4gICAgICB3YXJuaW5nc0hUTUwgKz0gJ1xuICAgICAgPHNlY3Rpb24+XG4gICAgICAgIDxwPlJlZmVyIHRvIHRoZSBmaWxlIOKAnEtpc3dhaGlsaSBXb3JkbGlzdHPigJ0gb24geW91ciB0YWJsZXQgZm9yIGEgbGlzdCBvZiBhZGRpdGlvbmFsIHdvcmRzIHRoYXQgbWF5IGJlIHVzZWZ1bCBmb3Igc3VjaCBncm91cC1iYXNlZCBhY3Rpdml0aWVzIG9yIHByYWN0aWNlIGZvciBzdHVkZW50cyBwZXJmb3JtaW5nIGluIHRoZSDigJxwb29y4oCdIG9yIOKAnGNvbmNlcm5pbmfigJ0gY2F0ZWdvcnkuPC9wPlxuICAgICAgICA8cD5Gb3IgdGhlIHN0dWRlbnRzIHRvIHdhdGNoIOKAkyBjb25zaWRlciBhbHNvIGNvbW11bmljYXRpbmcgd2l0aCBwYXJlbnRzIGZvciBleHRyYSBwcmFjdGljZSBhdCBob21lLjwvcD5cbiAgICAgICAgPHA+SWRlbnRpZnkgaXRlbXMgdGhlc2Ugc3R1ZGVudHMgbmVlZCBmdXJ0aGVyIHByYWN0aWNlIG9uIGJ5IHNlbGVjdGluZyB0aGVpciBuYW1lIGluIHRoZSBncm91cGluZyByZXBvcnQgdG8gc2VlIHRoZWlyIHBlcmZvcm1hbmNlIG9uIGVhY2ggaXRlbS48L3A+XG4gICAgICAgIDxwPkdpdmUgcGFyZW50cyBzb21lIGhlbHA6IFdyaXRlIG91dCBvbiBhIHBpZWNlIG9mIHBhcGVyIHRoZSBsZXR0ZXJzIGZvciB0aGVtIHRvIHByYWN0aWNlIHdpdGggdGhlaXIgY2hpbGQ7IG9yIGNvcHkgYXBwbGljYWJsZSB3b3JkcyBmcm9tIHRoZSDigJxLaXN3YWhpbGkgV29yZGxpc3Rz4oCdIHRoYXQgY29udGFpbiB0aGUgbGV0dGVycyBmb3IgdGhlIGNoaWxkIHRvIHByYWN0aWNlLjwvcD5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICAgICdcblxuXG5cbiAgICAjXG4gICAgIyBFbXB0eSB3YXJuaW5nXG4gICAgI1xuICAgIGVtcHR5SFRNTCA9IFwiXG4gICAgICA8aDE+I3t0KCdzdHVkZW50IGdyb3VwaW5nIHJlcG9ydCcpfTwvaDE+XG4gICAgICA8cD5ObyBzdHVkZW50cyB0ZXN0ZWQgZm9yICN7QHN1YnRlc3RzLmdldChAc2VsZWN0ZWQuc3VidGVzdElkKS5nZXQoXCJuYW1lXCIpfSBvbiBhc3Nlc3NtZW50ICMje0BzdWJ0ZXN0cy5tb2RlbHNbMF0uZ2V0KFwicGFydFwiKX0geWV0LiBSZXR1cm4gdG8gdGhlIDxhIGhyZWY9JyNjbGFzcyc+Y2xhc3MgbWVudTwvYT4gYW5kIGNsaWNrIHRoZSA8aW1nIHNyYz0naW1hZ2VzL2ljb25fcnVuLnBuZyc+IGljb24gdG8gY29sbGVjdCBkYXRhLjwvcD5cbiAgICBcIlxuXG4gICAgI1xuICAgICMgTWVudVxuICAgICNcbiAgICBtZW51SFRNTCA9IFwiPGRpdiBpZD0nc2VsZWN0b3JfY29udGFpbmVyJyBjbGFzcz0nYnV0dG9uc2V0Jz5cIlxuICAgIGZvciBzdWJ0ZXN0IGluIEBzdWJ0ZXN0cy5tb2RlbHNcbiAgICAgIGNoZWNrZWRBdHRyaWJ1dGUgPSBpZiBzdWJ0ZXN0LmlkID09IEBzZWxlY3RlZC5zdWJ0ZXN0SWQgdGhlbiBcImNoZWNrZWQ9J2NoZWNrZWQnXCIgZWxzZSBcIlwiXG4gICAgICBtZW51SFRNTCArPSBcIlxuICAgICAgICA8bGFiZWwgZm9yPScje3N1YnRlc3QuaWR9Jz4je3N1YnRlc3QuZ2V0KFwibmFtZVwiKX08L2xhYmVsPlxuICAgICAgICA8aW5wdXQgdHlwZT0ncmFkaW8nIGNsYXNzPSdzZWxlY3RvcicgbmFtZT0nc2VsZWN0b3InIGlkPScje3N1YnRlc3QuaWR9JyBkYXRhLXN1YnRlc3RJZD0nI3tzdWJ0ZXN0LmlkfScgI3tjaGVja2VkQXR0cmlidXRlfT5cbiAgICAgIFwiXG4gICAgbWVudUhUTUwgKz0gXCI8L2Rpdj5cIlxuXG4gICAgI1xuICAgICMgc3VtbWFyeVxuICAgICNcbiAgICBzdW1tYXJ5SFRNTCA9IFwiPGgxPlN1bW1hcnk8L2gxPlxuICAgIDx0YWJsZSBjbGFzcz0nc3VtbWFyeSc+XG4gICAgICA8dHI+PHRoPlN1YnRlc3QgTmFtZTwvdGg+ICAgICAgICAgIDx0ZD4je0BzdW1tYXJ5Lm5hbWV9PC90ZD48L3RyPlxuICAgICAgPHRyPjx0aD5DbGFzcyBTaXplPC90aD4gICAgICAgICAgICA8dGQ+I3tAc3VtbWFyeS5jbGFzc1NpemV9PC90ZD48L3RyPlxuICAgICAgPHRyPjx0aD5TdHVkZW50cyBBc3Nlc3NlZDwvdGg+ICAgICA8dGQ+I3tAc3VtbWFyeS5yZXN1bHRDb3VudH08L3RkPjwvdHI+XG4gICAgICA8dHI+PHRoPkF2ZXJhZ2UgQ29ycmVjdCAoJSk8L3RoPiAgIDx0ZD4je0BzdW1tYXJ5LmFDb3JyZWN0fSU8L3RkPjwvdHI+XG4gICAgICA8dHI+PHRoPkF2ZXJhZ2UgQ29ycmVjdDwvdGg+ICAgICAgIDx0ZD4je0BzdW1tYXJ5LmFuQ29ycmVjdH0gLyAje0BzdW1tYXJ5LmF0dGVtcHRlZH08L3RkPjwvdHI+XG4gICAgICA8dHI+PHRoPlN0dWRlbnRzIHRvIHdhdGNoPC90aD4gICAgIDx0ZD4je0BzdW1tYXJ5LndhdGNoTGlzdC5qb2luKCcsICcpfTwvdGQ+PC90cj5cbiAgICA8L3RhYmxlPlwiXG5cbiAgICAjXG4gICAgIyBkZXRhaWxzXG4gICAgI1xuICAgIGRldGFpbHNIVE1MID0gXCJcbiAgICAgIDxoMT5TdHVkZW50IGdyb3VwaW5nPC9oMT5cbiAgICAgIDx0YWJsZSBjbGFzcz0nZGV0YWlscyc+XG4gICAgICA8dHI+XG4gICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgPHRoPiUgY29ycmVjdDwvdGg+XG4gICAgICAgIDx0aD5TdGF0dXM8L3RoPlxuICAgICAgPC90cj5cbiAgICBcIlxuXG4gICAgaXRlbWl6ZWRSZXN1bHRzID0gXCJcIlxuXG4gICAgZm9yIHBlcnNvbiBpbiBAdGFibGVcbiAgICAgIGRldGFpbHNIVE1MICs9IFwiXG4gICAgICAgIDx0ciBjbGFzcz0nI3tAY29sb3JDbGFzc1twZXJzb24uaW5kZXhdfSc+XG4gICAgICAgICAgPHRkIGNsYXNzPSdzdHVkZW50X25hbWUgaWNvbicgZGF0YS1zdHVkZW50SWQ9JyN7cGVyc29uLnN0dWRlbnRJZH0nPiN7cGVyc29uLm5hbWV9PC90ZD5cbiAgICAgICAgICA8dGQ+I3twZXJzb24ucENvcnJlY3R9PC90ZD5cbiAgICAgICAgICA8dGQ+I3twZXJzb24uc3RhdHVzfTwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIFwiXG5cbiAgICAgIGl0ZW1pemVkUmVzdWx0cyArPSBcIlxuICAgICAgICA8dGFibGUgY2xhc3M9J2l0ZW1pemVkX3Jlc3VsdHMgY29uZmlybWF0aW9uIHN0dWRlbnRfI3twZXJzb24uc3R1ZGVudElkfSc+XG4gICAgICAgICAgPHRib2R5Pjx0cj48dGg+SXRlbTwvdGg+PHRoPlJlc3VsdDwvdGg+PC90cj5cbiAgICAgIFwiXG5cbiAgICAgIGZvciBkYXR1bSwgaSBpbiBwZXJzb24uaXRlbXNcbiAgICAgICAgaXRlbWl6ZWRSZXN1bHRzICs9IFwiPHRyPjx0ZD4je2RhdHVtLml0ZW1MYWJlbH08L3RkPjx0ZD4je3QoZGF0dW0uaXRlbVJlc3VsdCl9PC90ZD48L3RyPlwiXG4gICAgICBpdGVtaXplZFJlc3VsdHMgKz0gXCI8L3Rib2R5PjwvdGFibGU+XCJcblxuXG4gICAgZGV0YWlsc0hUTUwgKz0gXCI8L3RhYmxlPlwiXG5cblxuXG4gICAgaWYgQHNlbGVjdGVkLnJlc3VsdHMubGVuZ3RoICE9IDBcbiAgICAgIGh0bWwgPSBcIlxuICAgICAgICAje21lbnVIVE1MfVxuICAgICAgICAje3N1bW1hcnlIVE1MfVxuICAgICAgICAje2RldGFpbHNIVE1MfVxuICAgICAgICAje2l0ZW1pemVkUmVzdWx0c31cbiAgICAgICAgI3t3YXJuaW5nc0hUTUwgfHwgXCJcIn1cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz0nbmF2aWdhdGlvbiBiYWNrJz5CYWNrPC9idXR0b24+XG4gICAgICBcIlxuICAgIGVsc2VcbiAgICAgIGh0bWwgPSBcIlxuICAgICAgICAje21lbnVIVE1MfVxuICAgICAgICAje2VtcHR5SFRNTH1cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz0nbmF2aWdhdGlvbiBiYWNrJz5CYWNrPC9idXR0b24+XG4gICAgICBcIlxuXG4gICAgQCRlbC5odG1sIGh0bWxcbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiAgXG4gICMgMC1pbmRleGVkIHF1YXJ0aWxlXG4gIGdldFF1YXJ0aWxlOiAocGVyY2VudGlsZSkgLT4gTWF0aC5yb3VuZCAoKHBlcmNlbnRpbGUgLyAxMDApICogMylcbiIsInZhciBLbGFzc0dyb3VwaW5nVmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbktsYXNzR3JvdXBpbmdWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEtsYXNzR3JvdXBpbmdWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBLbGFzc0dyb3VwaW5nVmlldygpIHtcbiAgICByZXR1cm4gS2xhc3NHcm91cGluZ1ZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBLbGFzc0dyb3VwaW5nVmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJLbGFzc0dyb3VwaW5nVmlld1wiO1xuXG4gIEtsYXNzR3JvdXBpbmdWaWV3LnByb3RvdHlwZS5ub3JtYWxDdXJ2ZSA9IFswLjAwMDAwLCAwLjAwMzk5LCAwLjAwNzk4LCAwLjAxMTk3LCAwLjAxNTk1LCAwLjAxOTk0LCAwLjAyMzkyLCAwLjAyNzkwLCAwLjAzMTg4LCAwLjAzNTg2LCAwLjAzOTgzLCAwLjA0MzgwLCAwLjA0Nzc2LCAwLjA1MTcyLCAwLjA1NTY3LCAwLjA1OTYyLCAwLjA2MzU2LCAwLjA2NzQ5LCAwLjA3MTQyLCAwLjA3NTM1LCAwLjA3OTI2LCAwLjA4MzE3LCAwLjA4NzA2LCAwLjA5MDk1LCAwLjA5NDgzLCAwLjA5ODcxLCAwLjEwMjU3LCAwLjEwNjQyLCAwLjExMDI2LCAwLjExNDA5LCAwLjExNzkxLCAwLjEyMTcyLCAwLjEyNTUyLCAwLjEyOTMwLCAwLjEzMzA3LCAwLjEzNjgzLCAwLjE0MDU4LCAwLjE0NDMxLCAwLjE0ODAzLCAwLjE1MTczLCAwLjE1NTQyLCAwLjE1OTEwLCAwLjE2Mjc2LCAwLjE2NjQwLCAwLjE3MDAzLCAwLjE3MzY0LCAwLjE3NzI0LCAwLjE4MDgyLCAwLjE4NDM5LCAwLjE4NzkzLCAwLjE5MTQ2LCAwLjE5NDk3LCAwLjE5ODQ3LCAwLjIwMTk0LCAwLjIwNTQwLCAwLjIwODg0LCAwLjIxMjI2LCAwLjIxNTY2LCAwLjIxOTA0LCAwLjIyMjQwLCAwLjIyNTc1LCAwLjIyOTA3LCAwLjIzMjM3LCAwLjIzNTY1LCAwLjIzODkxLCAwLjI0MjE1LCAwLjI0NTM3LCAwLjI0ODU3LCAwLjI1MTc1LCAwLjI1NDkwLCAwLjI1ODA0LCAwLjI2MTE1LCAwLjI2NDI0LCAwLjI2NzMwLCAwLjI3MDM1LCAwLjI3MzM3LCAwLjI3NjM3LCAwLjI3OTM1LCAwLjI4MjMwLCAwLjI4NTI0LCAwLjI4ODE0LCAwLjI5MTAzLCAwLjI5Mzg5LCAwLjI5NjczLCAwLjI5OTU1LCAwLjMwMjM0LCAwLjMwNTExLCAwLjMwNzg1LCAwLjMxMDU3LCAwLjMxMzI3LCAwLjMxNTk0LCAwLjMxODU5LCAwLjMyMTIxLCAwLjMyMzgxLCAwLjMyNjM5LCAwLjMyODk0LCAwLjMzMTQ3LCAwLjMzMzk4LCAwLjMzNjQ2LCAwLjMzODkxLCAwLjM0MTM0LCAwLjM0Mzc1LCAwLjM0NjE0LCAwLjM0ODQ5LCAwLjM1MDgzLCAwLjM1MzE0LCAwLjM1NTQzLCAwLjM1NzY5LCAwLjM1OTkzLCAwLjM2MjE0LCAwLjM2NDMzLCAwLjM2NjUwLCAwLjM2ODY0LCAwLjM3MDc2LCAwLjM3Mjg2LCAwLjM3NDkzLCAwLjM3Njk4LCAwLjM3OTAwLCAwLjM4MTAwLCAwLjM4Mjk4LCAwLjM4NDkzLCAwLjM4Njg2LCAwLjM4ODc3LCAwLjM5MDY1LCAwLjM5MjUxLCAwLjM5NDM1LCAwLjM5NjE3LCAwLjM5Nzk2LCAwLjM5OTczLCAwLjQwMTQ3LCAwLjQwMzIwLCAwLjQwNDkwLCAwLjQwNjU4LCAwLjQwODI0LCAwLjQwOTg4LCAwLjQxMTQ5LCAwLjQxMzA4LCAwLjQxNDY2LCAwLjQxNjIxLCAwLjQxNzc0LCAwLjQxOTI0LCAwLjQyMDczLCAwLjQyMjIwLCAwLjQyMzY0LCAwLjQyNTA3LCAwLjQyNjQ3LCAwLjQyNzg1LCAwLjQyOTIyLCAwLjQzMDU2LCAwLjQzMTg5LCAwLjQzMzE5LCAwLjQzNDQ4LCAwLjQzNTc0LCAwLjQzNjk5LCAwLjQzODIyLCAwLjQzOTQzLCAwLjQ0MDYyLCAwLjQ0MTc5LCAwLjQ0Mjk1LCAwLjQ0NDA4LCAwLjQ0NTIwLCAwLjQ0NjMwLCAwLjQ0NzM4LCAwLjQ0ODQ1LCAwLjQ0OTUwLCAwLjQ1MDUzLCAwLjQ1MTU0LCAwLjQ1MjU0LCAwLjQ1MzUyLCAwLjQ1NDQ5LCAwLjQ1NTQzLCAwLjQ1NjM3LCAwLjQ1NzI4LCAwLjQ1ODE4LCAwLjQ1OTA3LCAwLjQ1OTk0LCAwLjQ2MDgwLCAwLjQ2MTY0LCAwLjQ2MjQ2LCAwLjQ2MzI3LCAwLjQ2NDA3LCAwLjQ2NDg1LCAwLjQ2NTYyLCAwLjQ2NjM4LCAwLjQ2NzEyLCAwLjQ2Nzg0LCAwLjQ2ODU2LCAwLjQ2OTI2LCAwLjQ2OTk1LCAwLjQ3MDYyLCAwLjQ3MTI4LCAwLjQ3MTkzLCAwLjQ3MjU3LCAwLjQ3MzIwLCAwLjQ3MzgxLCAwLjQ3NDQxLCAwLjQ3NTAwLCAwLjQ3NTU4LCAwLjQ3NjE1LCAwLjQ3NjcwLCAwLjQ3NzI1LCAwLjQ3Nzc4LCAwLjQ3ODMxLCAwLjQ3ODgyLCAwLjQ3OTMyLCAwLjQ3OTgyLCAwLjQ4MDMwLCAwLjQ4MDc3LCAwLjQ4MTI0LCAwLjQ4MTY5LCAwLjQ4MjE0LCAwLjQ4MjU3LCAwLjQ4MzAwLCAwLjQ4MzQxLCAwLjQ4MzgyLCAwLjQ4NDIyLCAwLjQ4NDYxLCAwLjQ4NTAwLCAwLjQ4NTM3LCAwLjQ4NTc0LCAwLjQ4NjEwLCAwLjQ4NjQ1LCAwLjQ4Njc5LCAwLjQ4NzEzLCAwLjQ4NzQ1LCAwLjQ4Nzc4LCAwLjQ4ODA5LCAwLjQ4ODQwLCAwLjQ4ODcwLCAwLjQ4ODk5LCAwLjQ4OTI4LCAwLjQ4OTU2LCAwLjQ4OTgzLCAwLjQ5MDEwLCAwLjQ5MDM2LCAwLjQ5MDYxLCAwLjQ5MDg2LCAwLjQ5MTExLCAwLjQ5MTM0LCAwLjQ5MTU4LCAwLjQ5MTgwLCAwLjQ5MjAyLCAwLjQ5MjI0LCAwLjQ5MjQ1LCAwLjQ5MjY2LCAwLjQ5Mjg2LCAwLjQ5MzA1LCAwLjQ5MzI0LCAwLjQ5MzQzLCAwLjQ5MzYxLCAwLjQ5Mzc5LCAwLjQ5Mzk2LCAwLjQ5NDEzLCAwLjQ5NDMwLCAwLjQ5NDQ2LCAwLjQ5NDYxLCAwLjQ5NDc3LCAwLjQ5NDkyLCAwLjQ5NTA2LCAwLjQ5NTIwLCAwLjQ5NTM0LCAwLjQ5NTQ3LCAwLjQ5NTYwLCAwLjQ5NTczLCAwLjQ5NTg1LCAwLjQ5NTk4LCAwLjQ5NjA5LCAwLjQ5NjIxLCAwLjQ5NjMyLCAwLjQ5NjQzLCAwLjQ5NjUzLCAwLjQ5NjY0LCAwLjQ5Njc0LCAwLjQ5NjgzLCAwLjQ5NjkzLCAwLjQ5NzAyLCAwLjQ5NzExLCAwLjQ5NzIwLCAwLjQ5NzI4LCAwLjQ5NzM2LCAwLjQ5NzQ0LCAwLjQ5NzUyLCAwLjQ5NzYwLCAwLjQ5NzY3LCAwLjQ5Nzc0LCAwLjQ5NzgxLCAwLjQ5Nzg4LCAwLjQ5Nzk1LCAwLjQ5ODAxLCAwLjQ5ODA3LCAwLjQ5ODEzLCAwLjQ5ODE5LCAwLjQ5ODI1LCAwLjQ5ODMxLCAwLjQ5ODM2LCAwLjQ5ODQxLCAwLjQ5ODQ2LCAwLjQ5ODUxLCAwLjQ5ODU2LCAwLjQ5ODYxLCAwLjQ5ODY1LCAwLjQ5ODY5LCAwLjQ5ODc0LCAwLjQ5ODc4LCAwLjQ5ODgyLCAwLjQ5ODg2LCAwLjQ5ODg5LCAwLjQ5ODkzLCAwLjQ5ODk2LCAwLjQ5OTAwLCAwLjQ5OTAzLCAwLjQ5OTA2LCAwLjQ5OTEwLCAwLjQ5OTEzLCAwLjQ5OTE2LCAwLjQ5OTE4LCAwLjQ5OTIxLCAwLjQ5OTI0LCAwLjQ5OTI2LCAwLjQ5OTI5LCAwLjQ5OTMxLCAwLjQ5OTM0LCAwLjQ5OTM2LCAwLjQ5OTM4LCAwLjQ5OTQwLCAwLjQ5OTQyLCAwLjQ5OTQ0LCAwLjQ5OTQ2LCAwLjQ5OTQ4LCAwLjQ5OTUwLCAwLjQ5OTUyLCAwLjQ5OTUzLCAwLjQ5OTU1LCAwLjQ5OTU3LCAwLjQ5OTU4LCAwLjQ5OTYwLCAwLjQ5OTYxLCAwLjQ5OTYyLCAwLjQ5OTY0LCAwLjQ5OTY1LCAwLjQ5OTY2LCAwLjQ5OTY4LCAwLjQ5OTY5LCAwLjQ5OTcwLCAwLjQ5OTcxLCAwLjQ5OTcyLCAwLjQ5OTczLCAwLjQ5OTc0LCAwLjQ5OTc1LCAwLjQ5OTc2LCAwLjQ5OTc3LCAwLjQ5OTc4LCAwLjQ5OTc4LCAwLjQ5OTc5LCAwLjQ5OTgwLCAwLjQ5OTgxLCAwLjQ5OTgxLCAwLjQ5OTgyLCAwLjQ5OTgzLCAwLjQ5OTgzLCAwLjQ5OTg0LCAwLjQ5OTg1LCAwLjQ5OTg1LCAwLjQ5OTg2LCAwLjQ5OTg2LCAwLjQ5OTg3LCAwLjQ5OTg3LCAwLjQ5OTg4LCAwLjQ5OTg4LCAwLjQ5OTg5LCAwLjQ5OTg5LCAwLjQ5OTkwLCAwLjQ5OTkwLCAwLjQ5OTkwLCAwLjQ5OTkxLCAwLjQ5OTkxLCAwLjQ5OTkyLCAwLjQ5OTkyLCAwLjQ5OTkyLCAwLjQ5OTkyLCAwLjQ5OTkzLCAwLjQ5OTkzLCAwLjQ5OTkzLCAwLjQ5OTk0LCAwLjQ5OTk0LCAwLjQ5OTk0LCAwLjQ5OTk0LCAwLjQ5OTk1LCAwLjQ5OTk1LCAwLjQ5OTk1LCAwLjQ5OTk1LCAwLjQ5OTk1LCAwLjQ5OTk2LCAwLjQ5OTk2LCAwLjQ5OTk2LCAwLjQ5OTk2LCAwLjQ5OTk2LCAwLjQ5OTk2LCAwLjQ5OTk3LCAwLjQ5OTk3LCAwLjQ5OTk3LCAwLjQ5OTk3LCAwLjQ5OTk3LCAwLjQ5OTk3LCAwLjQ5OTk3LCAwLjQ5OTk3LCAwLjQ5OTk4LCAwLjQ5OTk4LCAwLjQ5OTk4LCAwLjQ5OTk4XTtcblxuICBLbGFzc0dyb3VwaW5nVmlldy5wcm90b3R5cGUuY29sb3JDbGFzcyA9IFtcImNvbmNlcm5pbmdcIiwgXCJwb29yXCIsIFwiZ29vZFwiLCBcImdyZWF0XCJdO1xuXG4gIEtsYXNzR3JvdXBpbmdWaWV3LnByb3RvdHlwZS5zdGF0dXMgPSBbXCJDb25jZXJuaW5nXCIsIFwiUG9vclwiLCBcIkdvb2RcIiwgXCJHcmVhdFwiXTtcblxuICBLbGFzc0dyb3VwaW5nVmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgIFwiY2xpY2sgLmJhY2tcIjogXCJnb0JhY2tcIixcbiAgICBcImNoYW5nZSAjc2VsZWN0b3JfY29udGFpbmVyIGlucHV0XCI6IFwic2VsZWN0b3JcIixcbiAgICAnY2xpY2sgLnN0dWRlbnRfbmFtZSc6ICdzaG93SXRlbWl6ZWQnXG4gIH07XG5cbiAgS2xhc3NHcm91cGluZ1ZpZXcucHJvdG90eXBlLnNob3dJdGVtaXplZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICRzdHVkZW50UmVzdWx0cywgJHRhcmdldCwgc3R1ZGVudElkO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgc3R1ZGVudElkID0gJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLXN0dWRlbnRJZFwiKTtcbiAgICAkc3R1ZGVudFJlc3VsdHMgPSB0aGlzLiRlbC5maW5kKFwiLnN0dWRlbnRfXCIgKyBzdHVkZW50SWQpO1xuICAgIGlmICgkc3R1ZGVudFJlc3VsdHMuaXMoXCI6dmlzaWJsZVwiKSkge1xuICAgICAgJHN0dWRlbnRSZXN1bHRzLmFkZENsYXNzKFwiY29uZmlybWF0aW9uXCIpO1xuICAgICAgcmV0dXJuICR0YXJnZXQuY3NzKHtcbiAgICAgICAgXCJjb2xvclwiOiBcImJsYWNrXCJcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiLnN0dWRlbnRfbmFtZVwiKS5jc3Moe1xuICAgICAgICBcImNvbG9yXCI6IFwiYmxhY2tcIlxuICAgICAgfSk7XG4gICAgICAkdGFyZ2V0LmNzcyh7XG4gICAgICAgIFwiY29sb3JcIjogXCJ3aGl0ZVwiXG4gICAgICB9KTtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIuaXRlbWl6ZWRfcmVzdWx0c1wiKS5hZGRDbGFzcyhcImNvbmZpcm1hdGlvblwiKTtcbiAgICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLnN0dWRlbnRfXCIgKyBzdHVkZW50SWQpLnJlbW92ZUNsYXNzKFwiY29uZmlybWF0aW9uXCIpO1xuICAgIH1cbiAgfTtcblxuICBLbGFzc0dyb3VwaW5nVmlldy5wcm90b3R5cGUuc2VsZWN0b3IgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3VidGVzdElkO1xuICAgIHN1YnRlc3RJZCA9IHRoaXMuJGVsLmZpbmQoXCIjc2VsZWN0b3JfY29udGFpbmVyIGlucHV0OmNoZWNrZWRcIikuYXR0cihcImRhdGEtc3VidGVzdElkXCIpO1xuICAgIHRoaXMuc2VsZWN0ZWQuc3VidGVzdElkID0gc3VidGVzdElkO1xuICAgIHRoaXMuc2VsZWN0ZWQucmVzdWx0cyA9IHRoaXMucmVzdWx0cy53aGVyZSh7XG4gICAgICBcInN1YnRlc3RJZFwiOiBzdWJ0ZXN0SWRcbiAgICB9KTtcbiAgICB0aGlzLnVwZGF0ZVRhYmxlKCk7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKCk7XG4gIH07XG5cbiAgS2xhc3NHcm91cGluZ1ZpZXcucHJvdG90eXBlLmdvQmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoaXN0b3J5LmJhY2soKTtcbiAgfTtcblxuICBLbGFzc0dyb3VwaW5nVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgaSwgaiwgbGVuLCByZWYsIHN1YnRlc3Q7XG4gICAgdGhpcy5yZXN1bHRzID0gb3B0aW9ucy5yZXN1bHRzO1xuICAgIHRoaXMuc3VidGVzdHMgPSBvcHRpb25zLnN1YnRlc3RzO1xuICAgIHRoaXMuc3R1ZGVudHMgPSBvcHRpb25zLnN0dWRlbnRzO1xuICAgIHRoaXMuc2VsZWN0ZWQgPSB7fTtcbiAgICByZWYgPSB0aGlzLnN1YnRlc3RzLm1vZGVscztcbiAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgc3VidGVzdCA9IHJlZltpXTtcbiAgICAgIHRoaXMuc2VsZWN0ZWQuc3VidGVzdElkID0gdGhpcy5zdWJ0ZXN0cy5tb2RlbHNbaV0uaWQ7XG4gICAgICBpZiAoKHRoaXMuc2VsZWN0ZWQucmVzdWx0cyA9IHRoaXMucmVzdWx0cy53aGVyZSh7XG4gICAgICAgIFwic3VidGVzdElkXCI6IHN1YnRlc3QuaWRcbiAgICAgIH0pKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVwZGF0ZVRhYmxlKCk7XG4gIH07XG5cbiAgS2xhc3NHcm91cGluZ1ZpZXcucHJvdG90eXBlLnVwZGF0ZVRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFDb3JyZWN0LCBjbGFzc05vdFJlYWR5LCBjbGFzc1JlYWR5LCBkZXYsIGRldkluZGV4LCBpLCBpbmRleCwgaXNDbGFzc1JlYWR5LCBqLCBrLCBsLCBsZW4sIGxlbjEsIGxlbjIsIGxlbjMsIG0sIG5TdHVkZW50c05vdFJlYWR5LCBwTm90UmVhZHksIHBjLCBwZXJjZW50aWxlLCBwZXJzb24sIHJlZiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgcmVzdWx0LCB3YXJuaW5nSWNvbjtcbiAgICB0aGlzLnRhYmxlID0gW107XG4gICAgYUNvcnJlY3QgPSAwO1xuICAgIHRoaXMuc3VidGVzdCA9IHRoaXMuc3VidGVzdHMuZ2V0KHRoaXMuc2VsZWN0ZWQuc3VidGVzdElkKTtcbiAgICB0aGlzLnN1bW1hcnkgPSB7XG4gICAgICBcIm5hbWVcIjogdGhpcy5zdWJ0ZXN0LmdldChcIm5hbWVcIiksXG4gICAgICBcImNsYXNzU2l6ZVwiOiB0aGlzLnN0dWRlbnRzLmxlbmd0aCxcbiAgICAgIFwicmVzdWx0Q291bnRcIjogdGhpcy5zZWxlY3RlZC5yZXN1bHRzLmxlbmd0aCxcbiAgICAgIFwiYUNvcnJlY3RcIjogMCxcbiAgICAgIFwiYW5Db3JyZWN0XCI6IDAsXG4gICAgICBcInN0ZERldlwiOiAwLFxuICAgICAgXCJhdHRlbXB0ZWRcIjogMCxcbiAgICAgIFwidG90YWxJdGVtc1wiOiAocmVmID0gdGhpcy5zZWxlY3RlZC5yZXN1bHRzWzBdKSAhPSBudWxsID8gcmVmLmdldChcInRvdGFsXCIpIDogdm9pZCAwLFxuICAgICAgXCJ3YXRjaExpc3RcIjogW11cbiAgICB9O1xuICAgIHJlZjEgPSB0aGlzLnNlbGVjdGVkLnJlc3VsdHM7XG4gICAgZm9yIChqID0gMCwgbGVuID0gcmVmMS5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgcmVzdWx0ID0gcmVmMVtqXTtcbiAgICAgIHBlcnNvbiA9IHtcbiAgICAgICAgJ3N0dWRlbnRJZCc6IHJlc3VsdC5nZXQoXCJzdHVkZW50SWRcIiksXG4gICAgICAgICdpdGVtcyc6IHJlc3VsdC5nZXRJdGVtaXplZCgpLFxuICAgICAgICAnbmFtZSc6IHRoaXMuc3R1ZGVudHMuZ2V0KHJlc3VsdC5nZXQoXCJzdHVkZW50SWRcIikpLmdldChcIm5hbWVcIiksXG4gICAgICAgICdwQ29ycmVjdCc6IDAsXG4gICAgICAgICduQ29ycmVjdCc6IHJlc3VsdC5nZXQoXCJjb3JyZWN0XCIpLFxuICAgICAgICAnYXR0ZW1wdGVkJzogcmVzdWx0LmdldChcInRvdGFsXCIpIC0gcmVzdWx0LmdldChcIm1pc3NpbmdcIiksXG4gICAgICAgICd0b3RhbCc6IHJlc3VsdC5nZXQoXCJ0b3RhbFwiKSxcbiAgICAgICAgJ2RldmlhdGlvbic6IDAsXG4gICAgICAgICdwZXJjZW50aWxlJzogMCxcbiAgICAgICAgJ3N0YXR1cyc6IFwiXCJcbiAgICAgIH07XG4gICAgICBwZXJzb24ucENvcnJlY3QgPSBNYXRoLnJvdW5kKHBlcnNvbi5uQ29ycmVjdCAvIHBlcnNvbi5hdHRlbXB0ZWQgKiAxMDApO1xuICAgICAgdGhpcy5zdW1tYXJ5LmFDb3JyZWN0ICs9IHBlcnNvbi5wQ29ycmVjdDtcbiAgICAgIHRoaXMuc3VtbWFyeS5hbkNvcnJlY3QgKz0gcGVyc29uLm5Db3JyZWN0O1xuICAgICAgdGhpcy5zdW1tYXJ5LmF0dGVtcHRlZCArPSBwZXJzb24uYXR0ZW1wdGVkO1xuICAgICAgdGhpcy50YWJsZS5wdXNoKHBlcnNvbik7XG4gICAgfVxuICAgIHRoaXMuc3VtbWFyeS5hQ29ycmVjdCA9IE1hdGguZGVjaW1hbHModGhpcy5zdW1tYXJ5LmFDb3JyZWN0IC8gdGhpcy50YWJsZS5sZW5ndGgsIDApO1xuICAgIHRoaXMuc3VtbWFyeS5hbkNvcnJlY3QgPSBNYXRoLmRlY2ltYWxzKHRoaXMuc3VtbWFyeS5hbkNvcnJlY3QgLyB0aGlzLnRhYmxlLmxlbmd0aCwgMik7XG4gICAgdGhpcy5zdW1tYXJ5LmF0dGVtcHRlZCA9IE1hdGguZGVjaW1hbHModGhpcy5zdW1tYXJ5LmF0dGVtcHRlZCAvIHRoaXMudGFibGUubGVuZ3RoLCAyKTtcbiAgICByZWYyID0gdGhpcy50YWJsZTtcbiAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmMi5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgIHBlcnNvbiA9IHJlZjJba107XG4gICAgICB0aGlzLnN1bW1hcnkuc3RkRGV2ICs9IE1hdGgucG93KHBlcnNvbi5wQ29ycmVjdCAtIHRoaXMuc3VtbWFyeS5hQ29ycmVjdCwgMik7XG4gICAgfVxuICAgIHRoaXMuc3VtbWFyeS5zdGREZXYgPSBNYXRoLmRlY2ltYWxzKE1hdGgucG93KHRoaXMuc3VtbWFyeS5zdGREZXYgLyB0aGlzLnRhYmxlLmxlbmd0aCwgMC41KSwgMik7XG4gICAgcmVmMyA9IHRoaXMudGFibGU7XG4gICAgZm9yIChpID0gbCA9IDAsIGxlbjIgPSByZWYzLmxlbmd0aDsgbCA8IGxlbjI7IGkgPSArK2wpIHtcbiAgICAgIHBlcnNvbiA9IHJlZjNbaV07XG4gICAgICBkZXYgPSAocGVyc29uLnBDb3JyZWN0IC0gdGhpcy5zdW1tYXJ5LmFDb3JyZWN0KSAvIHRoaXMuc3VtbWFyeS5zdGREZXY7XG4gICAgICBkZXZJbmRleCA9IE1hdGgucm91bmQoZGV2ICogMTAwKTtcbiAgICAgIHBlcmNlbnRpbGUgPSBkZXZJbmRleCA+IDQwOSB8fCBkZXZJbmRleCA8IC00MDkgPyAwIDogZGV2SW5kZXggPiAwID8gMTAwICogTWF0aC5yb3VuZCg1MCArIDEwMCAqIHRoaXMubm9ybWFsQ3VydmVbZGV2SW5kZXhdKSAvIDEwMCA6IGRldkluZGV4IDwgMCA/IDEwMCAqIE1hdGgucm91bmQoNTAgLSAxMDAgKiB0aGlzLm5vcm1hbEN1cnZlW2RldkluZGV4ICogLTFdKSAvIDEwMCA6IDUwO1xuICAgICAgcGMgPSBwZXJzb24ucENvcnJlY3Q7XG4gICAgICBpbmRleCA9IHBjID49IDgwID8gaW5kZXggPSAzIDogcGMgPj0gNjAgJiYgcGMgPD0gNzkgPyBpbmRleCA9IDIgOiBwYyA+PSAzMCAmJiBwYyA8PSA1OSA/IGluZGV4ID0gMSA6IGluZGV4ID0gMDtcblxuICAgICAgLyogc2VtaS1vbGQgd2F5XG4gICAgICBNYXRoLmZsb29yKHBlcnNvbi5wQ29ycmVjdCAvIDEwMCAqIDQpXG4gICAgICBpbmRleCA9IDMgaWYgaW5kZXggPT0gNFxuICAgICAgICovXG4gICAgICB0aGlzLnRhYmxlW2ldLmRldmlhdGlvbiA9IGRldkluZGV4IC8gMTAwO1xuICAgICAgdGhpcy50YWJsZVtpXS5wZXJjZW50aWxlID0gcGVyY2VudGlsZTtcbiAgICAgIHRoaXMudGFibGVbaV0uaW5kZXggPSBpbmRleDtcbiAgICAgIHRoaXMudGFibGVbaV0uc3RhdHVzID0gdGhpcy5zdGF0dXNbaW5kZXhdO1xuICAgICAgaWYgKGluZGV4ID09PSAwICYmICF+dGhpcy5zdW1tYXJ5LndhdGNoTGlzdC5pbmRleE9mKHBlcnNvbi5uYW1lKSkge1xuICAgICAgICB0aGlzLnN1bW1hcnkud2F0Y2hMaXN0LnB1c2gocGVyc29uLm5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnRhYmxlLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIGIucENvcnJlY3QgLSBhLnBDb3JyZWN0O1xuICAgIH0pO1xuICAgIG5TdHVkZW50c05vdFJlYWR5ID0gMDtcbiAgICByZWY0ID0gdGhpcy50YWJsZTtcbiAgICBmb3IgKG0gPSAwLCBsZW4zID0gcmVmNC5sZW5ndGg7IG0gPCBsZW4zOyBtKyspIHtcbiAgICAgIHBlcnNvbiA9IHJlZjRbbV07XG4gICAgICBpZiAocGVyc29uLnBDb3JyZWN0IDwgNzUpIHtcbiAgICAgICAgblN0dWRlbnRzTm90UmVhZHkrKztcbiAgICAgIH1cbiAgICB9XG4gICAgcE5vdFJlYWR5ID0gKG5TdHVkZW50c05vdFJlYWR5IC8gdGhpcy50YWJsZS5sZW5ndGgpICogMTAwO1xuICAgIGlzQ2xhc3NSZWFkeSA9IHBOb3RSZWFkeSA8IDIwO1xuICAgIHdhcm5pbmdJY29uID0gXCI8aW1nIHNyYz0naW1hZ2VzL2ljb25fd2Fybi5wbmcnPlwiO1xuICAgIHRoaXMucmVhZHlQZXJjZW50YWdlID0gXCI8cD5cIiArIChNYXRoLnJvdW5kKHBOb3RSZWFkeSkpICsgXCIlIG9mIHlvdXIgc3R1ZGVudHMgYXJlIG5vdCByZWFkeSB0byBtb3ZlIG9uIHRvIHRoZSBuZXh0IGxlc3NvbnMuPC9wPlwiO1xuICAgIGNsYXNzUmVhZHkgPSBcIkl0IGlzIG9rIHRvIG1vdmUgb24gaW4gdGhlIGxlc3NvbiBzZXF1ZW5jZS4gTWFrZSBzdXJlIHRoYXQgdGhvc2UgY2hpbGRyZW4gcGVyZm9ybWluZyBpbiB0aGUg4oCccG9vcuKAnSBvciDigJxjb25jZXJuaW5n4oCdIGNhdGVnb3J5IGdldCBleHRyYSBhdHRlbnRpb24gYW5kIHByYWN0aWNlIGFuZCBkb27igJl0IGZhbGwgYmVoaW5kLiBUaGlzIGNhbiBiZSBkb25lIGR1cmluZyBwcmFjdGljZSBsZXNzb25zIG9uIFR1ZXNkYXkgYW5kIFRodXJzZGF5cywgb3IgZHVyaW5nIGFub3RoZXIgc3ViamVjdCBvbiB0aGUgdGltZXRhYmxlLlwiO1xuICAgIGNsYXNzTm90UmVhZHkgPSBcIllvdXIgY2xhc3MgbmVlZHMgZXh0cmEgcHJhY3RpY2UuIENvbnNpZGVyIHJlLXRlYWNoaW5nIE1vbmRheSBhbmQgV2VkbmVzZGF5IGxlc3NvbnMgaW50cm9kdWNpbmcgdGhlIG5ldyBjdXJyaWN1bHVtIGl0ZW1zIG9yIG9yZ2FuaXplIGludGVuc2UgcHJhY3RpY2UgYWN0aXZpdGllcyBmb3IgdGhlIGVudGlyZSBjbGFzcy4gVG8gZmluZCBvdXQgd2hpY2ggaXRlbXMgc3R1ZGVudHMgYXJlIHBhcnRpY3VsYXJseSBzdHJ1Z2dsaW5nIHdpdGgsIHNlbGVjdCB0aGUgbmFtZSBvZiBhIGZldyBzdHVkZW50cyBpbiB0aGUg4oCccG9vcuKAnSBvciDigJxjb25jZXJuaW5n4oCdIGNhdGVnb3J5IGFuZCByZXZpZXcgdGhlaXIgcGVyZm9ybWFuY2UgaXRlbSBieSBpdGVtLiBUYWtlIG5vdGUgb2YgaXRlbXMgdGhhdCBzZWVtIHBhcnRpY3VsYXJseSB0cm91Ymxlc29tZS5cIjtcbiAgICByZXR1cm4gdGhpcy5yZWFkaW5lc3NXYXJuaW5nID0gaXNDbGFzc1JlYWR5ID8gY2xhc3NSZWFkeSA6IGNsYXNzTm90UmVhZHk7XG4gIH07XG5cbiAgS2xhc3NHcm91cGluZ1ZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjaGVja2VkQXR0cmlidXRlLCBkYXR1bSwgZGV0YWlsc0hUTUwsIGVtcHR5SFRNTCwgaHRtbCwgaSwgaXRlbWl6ZWRSZXN1bHRzLCBqLCBrLCBsLCBsZW4sIGxlbjEsIGxlbjIsIG1lbnVIVE1MLCBwZXJzb24sIHJlZiwgcmVmMSwgcmVmMiwgc3VidGVzdCwgc3VtbWFyeUhUTUwsIHdhcm5pbmdzSFRNTDtcbiAgICBpZiAoIX50aGlzLnN1YnRlc3RzLnBsdWNrKFwicmVwb3J0VHlwZVwiKS5pbmRleE9mKFwicHJvZ3Jlc3NcIikpIHtcbiAgICAgIHdhcm5pbmdzSFRNTCA9IFwiPHNlY3Rpb24+IFwiICsgdGhpcy5yZWFkeVBlcmNlbnRhZ2UgKyBcIiBcIiArIHRoaXMucmVhZGluZXNzV2FybmluZyArIFwiIDwvc2VjdGlvbj5cIjtcbiAgICAgIHdhcm5pbmdzSFRNTCArPSAnPHNlY3Rpb24+IDxwPlJlZmVyIHRvIHRoZSBmaWxlIOKAnEtpc3dhaGlsaSBXb3JkbGlzdHPigJ0gb24geW91ciB0YWJsZXQgZm9yIGEgbGlzdCBvZiBhZGRpdGlvbmFsIHdvcmRzIHRoYXQgbWF5IGJlIHVzZWZ1bCBmb3Igc3VjaCBncm91cC1iYXNlZCBhY3Rpdml0aWVzIG9yIHByYWN0aWNlIGZvciBzdHVkZW50cyBwZXJmb3JtaW5nIGluIHRoZSDigJxwb29y4oCdIG9yIOKAnGNvbmNlcm5pbmfigJ0gY2F0ZWdvcnkuPC9wPiA8cD5Gb3IgdGhlIHN0dWRlbnRzIHRvIHdhdGNoIOKAkyBjb25zaWRlciBhbHNvIGNvbW11bmljYXRpbmcgd2l0aCBwYXJlbnRzIGZvciBleHRyYSBwcmFjdGljZSBhdCBob21lLjwvcD4gPHA+SWRlbnRpZnkgaXRlbXMgdGhlc2Ugc3R1ZGVudHMgbmVlZCBmdXJ0aGVyIHByYWN0aWNlIG9uIGJ5IHNlbGVjdGluZyB0aGVpciBuYW1lIGluIHRoZSBncm91cGluZyByZXBvcnQgdG8gc2VlIHRoZWlyIHBlcmZvcm1hbmNlIG9uIGVhY2ggaXRlbS48L3A+IDxwPkdpdmUgcGFyZW50cyBzb21lIGhlbHA6IFdyaXRlIG91dCBvbiBhIHBpZWNlIG9mIHBhcGVyIHRoZSBsZXR0ZXJzIGZvciB0aGVtIHRvIHByYWN0aWNlIHdpdGggdGhlaXIgY2hpbGQ7IG9yIGNvcHkgYXBwbGljYWJsZSB3b3JkcyBmcm9tIHRoZSDigJxLaXN3YWhpbGkgV29yZGxpc3Rz4oCdIHRoYXQgY29udGFpbiB0aGUgbGV0dGVycyBmb3IgdGhlIGNoaWxkIHRvIHByYWN0aWNlLjwvcD4gPC9zZWN0aW9uPic7XG4gICAgfVxuICAgIGVtcHR5SFRNTCA9IFwiPGgxPlwiICsgKHQoJ3N0dWRlbnQgZ3JvdXBpbmcgcmVwb3J0JykpICsgXCI8L2gxPiA8cD5ObyBzdHVkZW50cyB0ZXN0ZWQgZm9yIFwiICsgKHRoaXMuc3VidGVzdHMuZ2V0KHRoaXMuc2VsZWN0ZWQuc3VidGVzdElkKS5nZXQoXCJuYW1lXCIpKSArIFwiIG9uIGFzc2Vzc21lbnQgI1wiICsgKHRoaXMuc3VidGVzdHMubW9kZWxzWzBdLmdldChcInBhcnRcIikpICsgXCIgeWV0LiBSZXR1cm4gdG8gdGhlIDxhIGhyZWY9JyNjbGFzcyc+Y2xhc3MgbWVudTwvYT4gYW5kIGNsaWNrIHRoZSA8aW1nIHNyYz0naW1hZ2VzL2ljb25fcnVuLnBuZyc+IGljb24gdG8gY29sbGVjdCBkYXRhLjwvcD5cIjtcbiAgICBtZW51SFRNTCA9IFwiPGRpdiBpZD0nc2VsZWN0b3JfY29udGFpbmVyJyBjbGFzcz0nYnV0dG9uc2V0Jz5cIjtcbiAgICByZWYgPSB0aGlzLnN1YnRlc3RzLm1vZGVscztcbiAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHN1YnRlc3QgPSByZWZbal07XG4gICAgICBjaGVja2VkQXR0cmlidXRlID0gc3VidGVzdC5pZCA9PT0gdGhpcy5zZWxlY3RlZC5zdWJ0ZXN0SWQgPyBcImNoZWNrZWQ9J2NoZWNrZWQnXCIgOiBcIlwiO1xuICAgICAgbWVudUhUTUwgKz0gXCI8bGFiZWwgZm9yPSdcIiArIHN1YnRlc3QuaWQgKyBcIic+XCIgKyAoc3VidGVzdC5nZXQoXCJuYW1lXCIpKSArIFwiPC9sYWJlbD4gPGlucHV0IHR5cGU9J3JhZGlvJyBjbGFzcz0nc2VsZWN0b3InIG5hbWU9J3NlbGVjdG9yJyBpZD0nXCIgKyBzdWJ0ZXN0LmlkICsgXCInIGRhdGEtc3VidGVzdElkPSdcIiArIHN1YnRlc3QuaWQgKyBcIicgXCIgKyBjaGVja2VkQXR0cmlidXRlICsgXCI+XCI7XG4gICAgfVxuICAgIG1lbnVIVE1MICs9IFwiPC9kaXY+XCI7XG4gICAgc3VtbWFyeUhUTUwgPSBcIjxoMT5TdW1tYXJ5PC9oMT4gPHRhYmxlIGNsYXNzPSdzdW1tYXJ5Jz4gPHRyPjx0aD5TdWJ0ZXN0IE5hbWU8L3RoPiAgICAgICAgICA8dGQ+XCIgKyB0aGlzLnN1bW1hcnkubmFtZSArIFwiPC90ZD48L3RyPiA8dHI+PHRoPkNsYXNzIFNpemU8L3RoPiAgICAgICAgICAgIDx0ZD5cIiArIHRoaXMuc3VtbWFyeS5jbGFzc1NpemUgKyBcIjwvdGQ+PC90cj4gPHRyPjx0aD5TdHVkZW50cyBBc3Nlc3NlZDwvdGg+ICAgICA8dGQ+XCIgKyB0aGlzLnN1bW1hcnkucmVzdWx0Q291bnQgKyBcIjwvdGQ+PC90cj4gPHRyPjx0aD5BdmVyYWdlIENvcnJlY3QgKCUpPC90aD4gICA8dGQ+XCIgKyB0aGlzLnN1bW1hcnkuYUNvcnJlY3QgKyBcIiU8L3RkPjwvdHI+IDx0cj48dGg+QXZlcmFnZSBDb3JyZWN0PC90aD4gICAgICAgPHRkPlwiICsgdGhpcy5zdW1tYXJ5LmFuQ29ycmVjdCArIFwiIC8gXCIgKyB0aGlzLnN1bW1hcnkuYXR0ZW1wdGVkICsgXCI8L3RkPjwvdHI+IDx0cj48dGg+U3R1ZGVudHMgdG8gd2F0Y2g8L3RoPiAgICAgPHRkPlwiICsgKHRoaXMuc3VtbWFyeS53YXRjaExpc3Quam9pbignLCAnKSkgKyBcIjwvdGQ+PC90cj4gPC90YWJsZT5cIjtcbiAgICBkZXRhaWxzSFRNTCA9IFwiPGgxPlN0dWRlbnQgZ3JvdXBpbmc8L2gxPiA8dGFibGUgY2xhc3M9J2RldGFpbHMnPiA8dHI+IDx0aD5OYW1lPC90aD4gPHRoPiUgY29ycmVjdDwvdGg+IDx0aD5TdGF0dXM8L3RoPiA8L3RyPlwiO1xuICAgIGl0ZW1pemVkUmVzdWx0cyA9IFwiXCI7XG4gICAgcmVmMSA9IHRoaXMudGFibGU7XG4gICAgZm9yIChrID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICBwZXJzb24gPSByZWYxW2tdO1xuICAgICAgZGV0YWlsc0hUTUwgKz0gXCI8dHIgY2xhc3M9J1wiICsgdGhpcy5jb2xvckNsYXNzW3BlcnNvbi5pbmRleF0gKyBcIic+IDx0ZCBjbGFzcz0nc3R1ZGVudF9uYW1lIGljb24nIGRhdGEtc3R1ZGVudElkPSdcIiArIHBlcnNvbi5zdHVkZW50SWQgKyBcIic+XCIgKyBwZXJzb24ubmFtZSArIFwiPC90ZD4gPHRkPlwiICsgcGVyc29uLnBDb3JyZWN0ICsgXCI8L3RkPiA8dGQ+XCIgKyBwZXJzb24uc3RhdHVzICsgXCI8L3RkPiA8L3RyPlwiO1xuICAgICAgaXRlbWl6ZWRSZXN1bHRzICs9IFwiPHRhYmxlIGNsYXNzPSdpdGVtaXplZF9yZXN1bHRzIGNvbmZpcm1hdGlvbiBzdHVkZW50X1wiICsgcGVyc29uLnN0dWRlbnRJZCArIFwiJz4gPHRib2R5Pjx0cj48dGg+SXRlbTwvdGg+PHRoPlJlc3VsdDwvdGg+PC90cj5cIjtcbiAgICAgIHJlZjIgPSBwZXJzb24uaXRlbXM7XG4gICAgICBmb3IgKGkgPSBsID0gMCwgbGVuMiA9IHJlZjIubGVuZ3RoOyBsIDwgbGVuMjsgaSA9ICsrbCkge1xuICAgICAgICBkYXR1bSA9IHJlZjJbaV07XG4gICAgICAgIGl0ZW1pemVkUmVzdWx0cyArPSBcIjx0cj48dGQ+XCIgKyBkYXR1bS5pdGVtTGFiZWwgKyBcIjwvdGQ+PHRkPlwiICsgKHQoZGF0dW0uaXRlbVJlc3VsdCkpICsgXCI8L3RkPjwvdHI+XCI7XG4gICAgICB9XG4gICAgICBpdGVtaXplZFJlc3VsdHMgKz0gXCI8L3Rib2R5PjwvdGFibGU+XCI7XG4gICAgfVxuICAgIGRldGFpbHNIVE1MICs9IFwiPC90YWJsZT5cIjtcbiAgICBpZiAodGhpcy5zZWxlY3RlZC5yZXN1bHRzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgaHRtbCA9IG1lbnVIVE1MICsgXCIgXCIgKyBzdW1tYXJ5SFRNTCArIFwiIFwiICsgZGV0YWlsc0hUTUwgKyBcIiBcIiArIGl0ZW1pemVkUmVzdWx0cyArIFwiIFwiICsgKHdhcm5pbmdzSFRNTCB8fCBcIlwiKSArIFwiIDxidXR0b24gY2xhc3M9J25hdmlnYXRpb24gYmFjayc+QmFjazwvYnV0dG9uPlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBodG1sID0gbWVudUhUTUwgKyBcIiBcIiArIGVtcHR5SFRNTCArIFwiIDxidXR0b24gY2xhc3M9J25hdmlnYXRpb24gYmFjayc+QmFjazwvYnV0dG9uPlwiO1xuICAgIH1cbiAgICB0aGlzLiRlbC5odG1sKGh0bWwpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICBLbGFzc0dyb3VwaW5nVmlldy5wcm90b3R5cGUuZ2V0UXVhcnRpbGUgPSBmdW5jdGlvbihwZXJjZW50aWxlKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoKHBlcmNlbnRpbGUgLyAxMDApICogMyk7XG4gIH07XG5cbiAgcmV0dXJuIEtsYXNzR3JvdXBpbmdWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgS2xhc3NHcm91cGluZ01lbnVWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZTogXCJLbGFzc0dyb3VwaW5nTWVudVZpZXdcIlxuXG4gIGV2ZW50czpcbiAgICAnY2hhbmdlIC5wYXJ0X3NlbGVjdG9yJyA6ICdnb3RvS2xhc3NHcm91cGluZ1JlcG9ydCdcblxuICBnb3RvS2xhc3NHcm91cGluZ1JlcG9ydDogKGV2ZW50KSAtPlxuICAgIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJyZXBvcnQva2xhc3NHcm91cGluZy8je0BrbGFzcy5pZH0vXCIgKyBAJGVsLmZpbmQoZXZlbnQudGFyZ2V0KS5maW5kKFwiOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLXBhcnRcIiksIHRydWVcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBAcGFyZW50ICAgID0gb3B0aW9ucy5wYXJlbnRcbiAgICBAa2xhc3MgICAgID0gQHBhcmVudC5vcHRpb25zLmtsYXNzXG4gICAgQGN1cnJpY3VsYSA9IEBwYXJlbnQub3B0aW9ucy5jdXJyaWN1bGFcbiAgICBAY3VycmVudFBhcnQgPSBAa2xhc3MuY2FsY0N1cnJlbnRQYXJ0KClcblxuICAgIEBzdHVkZW50cyA9IG5ldyBTdHVkZW50c1xuICAgIEBzdHVkZW50cy5mZXRjaFxuICAgICAga2xhc3NJZCA6IEBrbGFzcy5pZFxuICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgYWxsU3VidGVzdHMgPSBuZXcgU3VidGVzdHNcbiAgICAgICAgYWxsU3VidGVzdHMuZmV0Y2hcbiAgICAgICAgICBzdWNjZXNzOiAoY29sbGVjdGlvbikgPT5cbiAgICAgICAgICAgIHN1YnRlc3RzID0gY29sbGVjdGlvbi53aGVyZSBcbiAgICAgICAgICAgICAgY3VycmljdWxhSWQgOiBAY3VycmljdWxhLmlkXG4gICAgICAgICAgICBAcGFydHMgPSBbXVxuICAgICAgICAgICAgZm9yIHN1YnRlc3QgaW4gc3VidGVzdHNcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHBhcnQgPSBzdWJ0ZXN0LmdldCgncGFydCcpXG5cbiAgICAgICAgICAgICAgQHBhcnRzW3BhcnRdICAgICAgICAgPSB7fSBpZiBub3QgQHBhcnRzW3BhcnRdP1xuICAgICAgICAgICAgICBAcGFydHNbcGFydF1bXCJpZFwiXSAgID0gc3VidGVzdC5pZFxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgaWYgQHBhcnRzW3BhcnRdW1wibmFtZVwiXT8gXG4gICAgICAgICAgICAgICAgQHBhcnRzW3BhcnRdW1wibmFtZVwiXSArPSBcIiBcIiArIHN1YnRlc3QuZ2V0KFwibmFtZVwiKVxuICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgQHBhcnRzW3BhcnRdW1wibmFtZVwiXSA9IHN1YnRlc3QuZ2V0KFwibmFtZVwiKVxuICAgICAgICAgICAgICBAcGFydHNbcGFydF1bXCJyZXBvcnRUeXBlXCJdID0gc3VidGVzdC5nZXQoXCJyZXBvcnRUeXBlXCIpXG5cbiAgICAgICAgICAgIEByZWFkeSA9IHRydWVcbiAgICAgICAgICAgIEByZW5kZXIoKVxuXG4gIHJlbmRlcjogLT5cblxuICAgIGlmIEByZWFkeVxuXG4gICAgICAjIHF1aWNrIGRhdGEgY2hlY2tcbiAgICAgIGlmIG5vdCBAc3R1ZGVudHM/IG9yIEBzdHVkZW50cy5sZW5ndGggPT0gMFxuICAgICAgICBAJGVsLmh0bWwgXCJQbGVhc2UgYWRkIHN0dWRlbnRzIHRvIHRoaXMgY2xhc3MuXCJcbiAgICAgICAgcmV0dXJuXG5cbiAgICAgIGh0bWwgPSBcIlxuICAgICAgICA8c2VsZWN0IGNsYXNzPSdwYXJ0X3NlbGVjdG9yJz5cbiAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz5TZWxlY3QgYW4gYXNzZXNzbWVudDwvb3B0aW9uPlxuICAgICAgICAgIFwiXG4gICAgICBmb3Igc3VidGVzdCwgcGFydCBpbiBAcGFydHNcbiAgICAgICAgaWYgc3VidGVzdD8uaWQ/XG4gICAgICAgICAgZmxhZ0ZvckN1cnJlbnQgPSBpZiBAY3VycmVudFBhcnQgPT0gcGFydCB0aGVuIFwiKipcIiBlbHNlICcnXG4gICAgICAgICAgaHRtbCArPSBcIjxvcHRpb24gZGF0YS1wYXJ0PScje3BhcnR9JyBkYXRhLXN1YnRlc3RJZD0nI3tzdWJ0ZXN0LmlkfSc+I3tmbGFnRm9yQ3VycmVudH0gI3twYXJ0fSAje3N1YnRlc3QubmFtZX08L29wdGlvbj5cIlxuICAgICAgaHRtbCArPSBcIjwvc2VsZWN0PlwiXG4gICAgICAgICAgXG4gICAgICBAJGVsLmh0bWwgaHRtbFxuICAgIGVsc2VcbiAgICAgIEAkZWwuaHRtbCBcIjxpbWcgc3JjPSdpbWFnZXMvbG9hZGluZy5naWYnIGNsYXNzPSdsb2FkaW5nJz5cIiIsInZhciBLbGFzc0dyb3VwaW5nTWVudVZpZXcsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5LbGFzc0dyb3VwaW5nTWVudVZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoS2xhc3NHcm91cGluZ01lbnVWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBLbGFzc0dyb3VwaW5nTWVudVZpZXcoKSB7XG4gICAgcmV0dXJuIEtsYXNzR3JvdXBpbmdNZW51Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEtsYXNzR3JvdXBpbmdNZW51Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJLbGFzc0dyb3VwaW5nTWVudVZpZXdcIjtcblxuICBLbGFzc0dyb3VwaW5nTWVudVZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICAnY2hhbmdlIC5wYXJ0X3NlbGVjdG9yJzogJ2dvdG9LbGFzc0dyb3VwaW5nUmVwb3J0J1xuICB9O1xuXG4gIEtsYXNzR3JvdXBpbmdNZW51Vmlldy5wcm90b3R5cGUuZ290b0tsYXNzR3JvdXBpbmdSZXBvcnQgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKChcInJlcG9ydC9rbGFzc0dyb3VwaW5nL1wiICsgdGhpcy5rbGFzcy5pZCArIFwiL1wiKSArIHRoaXMuJGVsLmZpbmQoZXZlbnQudGFyZ2V0KS5maW5kKFwiOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLXBhcnRcIiksIHRydWUpO1xuICB9O1xuXG4gIEtsYXNzR3JvdXBpbmdNZW51Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICAgIHRoaXMua2xhc3MgPSB0aGlzLnBhcmVudC5vcHRpb25zLmtsYXNzO1xuICAgIHRoaXMuY3VycmljdWxhID0gdGhpcy5wYXJlbnQub3B0aW9ucy5jdXJyaWN1bGE7XG4gICAgdGhpcy5jdXJyZW50UGFydCA9IHRoaXMua2xhc3MuY2FsY0N1cnJlbnRQYXJ0KCk7XG4gICAgdGhpcy5zdHVkZW50cyA9IG5ldyBTdHVkZW50cztcbiAgICByZXR1cm4gdGhpcy5zdHVkZW50cy5mZXRjaCh7XG4gICAgICBrbGFzc0lkOiB0aGlzLmtsYXNzLmlkLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYWxsU3VidGVzdHM7XG4gICAgICAgICAgYWxsU3VidGVzdHMgPSBuZXcgU3VidGVzdHM7XG4gICAgICAgICAgcmV0dXJuIGFsbFN1YnRlc3RzLmZldGNoKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgdmFyIGksIGxlbiwgcGFydCwgc3VidGVzdCwgc3VidGVzdHM7XG4gICAgICAgICAgICAgIHN1YnRlc3RzID0gY29sbGVjdGlvbi53aGVyZSh7XG4gICAgICAgICAgICAgICAgY3VycmljdWxhSWQ6IF90aGlzLmN1cnJpY3VsYS5pZFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgX3RoaXMucGFydHMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gc3VidGVzdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzdWJ0ZXN0ID0gc3VidGVzdHNbaV07XG4gICAgICAgICAgICAgICAgcGFydCA9IHN1YnRlc3QuZ2V0KCdwYXJ0Jyk7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnBhcnRzW3BhcnRdID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzLnBhcnRzW3BhcnRdID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLnBhcnRzW3BhcnRdW1wiaWRcIl0gPSBzdWJ0ZXN0LmlkO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wYXJ0c1twYXJ0XVtcIm5hbWVcIl0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgX3RoaXMucGFydHNbcGFydF1bXCJuYW1lXCJdICs9IFwiIFwiICsgc3VidGVzdC5nZXQoXCJuYW1lXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBfdGhpcy5wYXJ0c1twYXJ0XVtcIm5hbWVcIl0gPSBzdWJ0ZXN0LmdldChcIm5hbWVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLnBhcnRzW3BhcnRdW1wicmVwb3J0VHlwZVwiXSA9IHN1YnRlc3QuZ2V0KFwicmVwb3J0VHlwZVwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBfdGhpcy5yZWFkeSA9IHRydWU7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgS2xhc3NHcm91cGluZ01lbnVWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZmxhZ0ZvckN1cnJlbnQsIGh0bWwsIGksIGxlbiwgcGFydCwgcmVmLCBzdWJ0ZXN0O1xuICAgIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgICBpZiAoKHRoaXMuc3R1ZGVudHMgPT0gbnVsbCkgfHwgdGhpcy5zdHVkZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy4kZWwuaHRtbChcIlBsZWFzZSBhZGQgc3R1ZGVudHMgdG8gdGhpcyBjbGFzcy5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGh0bWwgPSBcIjxzZWxlY3QgY2xhc3M9J3BhcnRfc2VsZWN0b3InPiA8b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz5TZWxlY3QgYW4gYXNzZXNzbWVudDwvb3B0aW9uPlwiO1xuICAgICAgcmVmID0gdGhpcy5wYXJ0cztcbiAgICAgIGZvciAocGFydCA9IGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBwYXJ0ID0gKytpKSB7XG4gICAgICAgIHN1YnRlc3QgPSByZWZbcGFydF07XG4gICAgICAgIGlmICgoc3VidGVzdCAhPSBudWxsID8gc3VidGVzdC5pZCA6IHZvaWQgMCkgIT0gbnVsbCkge1xuICAgICAgICAgIGZsYWdGb3JDdXJyZW50ID0gdGhpcy5jdXJyZW50UGFydCA9PT0gcGFydCA/IFwiKipcIiA6ICcnO1xuICAgICAgICAgIGh0bWwgKz0gXCI8b3B0aW9uIGRhdGEtcGFydD0nXCIgKyBwYXJ0ICsgXCInIGRhdGEtc3VidGVzdElkPSdcIiArIHN1YnRlc3QuaWQgKyBcIic+XCIgKyBmbGFnRm9yQ3VycmVudCArIFwiIFwiICsgcGFydCArIFwiIFwiICsgc3VidGVzdC5uYW1lICsgXCI8L29wdGlvbj5cIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaHRtbCArPSBcIjwvc2VsZWN0PlwiO1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwoaHRtbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLiRlbC5odG1sKFwiPGltZyBzcmM9J2ltYWdlcy9sb2FkaW5nLmdpZicgY2xhc3M9J2xvYWRpbmcnPlwiKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEtsYXNzR3JvdXBpbmdNZW51VmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIE1hc3RlcnlDaGVja1ZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJNYXN0ZXJ5Q2hlY2tWaWV3XCJcblxuICBldmVudHMgOlxuICAgIFwiY2xpY2sgLmJhY2tcIiA6IFwiZ29CYWNrXCJcbiAgICBcbiAgZ29CYWNrOiAtPiBoaXN0b3J5LmJhY2soKVxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuXG4gICAgQHN1YnRlc3RzID0gb3B0aW9ucy5zdWJ0ZXN0c1xuICAgIEByZXN1bHRzICA9IG9wdGlvbnMucmVzdWx0c1xuICAgIEBzdHVkZW50ICA9IG9wdGlvbnMuc3R1ZGVudFxuICAgIEBrbGFzcyAgICA9IG9wdGlvbnMua2xhc3NcblxuICAgIEByZXN1bHRzQnlQYXJ0ID0gQHJlc3VsdHMuaW5kZXhCeSBcInBhcnRcIlxuXG4gICAgQGxhc3RQYXJ0ID0gTWF0aC5tYXguYXBwbHkoQCwgQHJlc3VsdHMucGx1Y2soXCJwYXJ0XCIpKVxuICAgIEBsYXN0UGFydCA9IDAgaWYgbm90IGlzRmluaXRlKEBsYXN0UGFydClcblxuICByZW5kZXI6IC0+XG5cbiAgICBodG1sID0gXCJcbiAgICAgIDxoMT5NYXN0ZXJ5IGNoZWNrIHJlcG9ydDwvaDE+XG4gICAgICA8aDI+U3R1ZGVudCAje0BzdHVkZW50LmdldChcIm5hbWVcIil9PC9oMj5cbiAgICBcIlxuXG4gICAgI1xuICAgICMgRW1wdHkgd2FybmluZ1xuICAgICNcbiAgICBodG1sV2FybmluZyA9IFwiPHA+Tm8gdGVzdCBkYXRhIGZvciB0aGlzIHR5cGUgb2YgcmVwb3J0LiBSZXR1cm4gdG8gdGhlIDxhIGhyZWY9JyNjbGFzcyc+Y2xhc3MgbWVudTwvYT4gYW5kIGNsaWNrIHRoZSA8aW1nIHNyYz0naW1hZ2VzL2ljb25fcnVuLnBuZyc+IGljb24gdG8gY29sbGVjdCBkYXRhLjwvcD5cIlxuXG4gICAgaWYgQHJlc3VsdHMubGVuZ3RoID09IDBcbiAgICAgIEAkZWwuaHRtbCBcIlxuICAgICAgICAje2h0bWx9XG4gICAgICAgICN7aHRtbFdhcm5pbmd9XG4gICAgICBcIlxuICAgICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG4gICAgICByZXR1cm5cblxuXG5cbiAgICBodG1sICs9IFwiPHRhYmxlPlwiXG4gICAgZm9yIHBhcnQgaW4gWzEuLkBsYXN0UGFydF1cblxuICAgICAgaWYgbm90IEByZXN1bHRzQnlQYXJ0W3BhcnRdPyB0aGVuIGNvbnRpbnVlXG4gICAgICBodG1sICs9IFwiXG4gICAgICAgIDx0cj48dGg+QXNzZXNzbWVudCAje3BhcnR9PC90aD48L3RyPlxuICAgICAgICA8dHI+XCJcblxuICAgICAgZm9yIHJlc3VsdCBpbiBAcmVzdWx0c0J5UGFydFtwYXJ0XVxuICAgICAgICBzdWJ0ZXN0TmFtZSA9IEBzdWJ0ZXN0cy5nZXQocmVzdWx0LmdldCgnc3VidGVzdElkJykpLmdldCgnbmFtZScpXG4gICAgICAgIGh0bWwgKz0gXCJcbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAje3Jlc3VsdC5nZXQoXCJpdGVtVHlwZVwiKS50aXRsZWl6ZSgpfSBjb3JyZWN0PGJyPlxuICAgICAgICAgICAgI3tzdWJ0ZXN0TmFtZX1cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZD4je3Jlc3VsdC5nZXQoXCJjb3JyZWN0XCIpfS8je3Jlc3VsdC5nZXQoXCJ0b3RhbFwiKX08L3RkPlwiXG4gICAgICBcbiAgICBodG1sICs9IFwiXG4gICAgPC90YWJsZT5cbiAgICA8YnV0dG9uIGNsYXNzPSduYXZpZ2F0aW9uIGJhY2snPiN7dCgnYmFjaycpfTwvYnV0dG9uPlxuICAgIFwiXG4gICAgQCRlbC5odG1sIGh0bWxcblxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuIiwidmFyIE1hc3RlcnlDaGVja1ZpZXcsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5NYXN0ZXJ5Q2hlY2tWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKE1hc3RlcnlDaGVja1ZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIE1hc3RlcnlDaGVja1ZpZXcoKSB7XG4gICAgcmV0dXJuIE1hc3RlcnlDaGVja1ZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBNYXN0ZXJ5Q2hlY2tWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIk1hc3RlcnlDaGVja1ZpZXdcIjtcblxuICBNYXN0ZXJ5Q2hlY2tWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgXCJjbGljayAuYmFja1wiOiBcImdvQmFja1wiXG4gIH07XG5cbiAgTWFzdGVyeUNoZWNrVmlldy5wcm90b3R5cGUuZ29CYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGhpc3RvcnkuYmFjaygpO1xuICB9O1xuXG4gIE1hc3RlcnlDaGVja1ZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5zdWJ0ZXN0cyA9IG9wdGlvbnMuc3VidGVzdHM7XG4gICAgdGhpcy5yZXN1bHRzID0gb3B0aW9ucy5yZXN1bHRzO1xuICAgIHRoaXMuc3R1ZGVudCA9IG9wdGlvbnMuc3R1ZGVudDtcbiAgICB0aGlzLmtsYXNzID0gb3B0aW9ucy5rbGFzcztcbiAgICB0aGlzLnJlc3VsdHNCeVBhcnQgPSB0aGlzLnJlc3VsdHMuaW5kZXhCeShcInBhcnRcIik7XG4gICAgdGhpcy5sYXN0UGFydCA9IE1hdGgubWF4LmFwcGx5KHRoaXMsIHRoaXMucmVzdWx0cy5wbHVjayhcInBhcnRcIikpO1xuICAgIGlmICghaXNGaW5pdGUodGhpcy5sYXN0UGFydCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhc3RQYXJ0ID0gMDtcbiAgICB9XG4gIH07XG5cbiAgTWFzdGVyeUNoZWNrVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGh0bWwsIGh0bWxXYXJuaW5nLCBpLCBqLCBsZW4sIHBhcnQsIHJlZiwgcmVmMSwgcmVzdWx0LCBzdWJ0ZXN0TmFtZTtcbiAgICBodG1sID0gXCI8aDE+TWFzdGVyeSBjaGVjayByZXBvcnQ8L2gxPiA8aDI+U3R1ZGVudCBcIiArICh0aGlzLnN0dWRlbnQuZ2V0KFwibmFtZVwiKSkgKyBcIjwvaDI+XCI7XG4gICAgaHRtbFdhcm5pbmcgPSBcIjxwPk5vIHRlc3QgZGF0YSBmb3IgdGhpcyB0eXBlIG9mIHJlcG9ydC4gUmV0dXJuIHRvIHRoZSA8YSBocmVmPScjY2xhc3MnPmNsYXNzIG1lbnU8L2E+IGFuZCBjbGljayB0aGUgPGltZyBzcmM9J2ltYWdlcy9pY29uX3J1bi5wbmcnPiBpY29uIHRvIGNvbGxlY3QgZGF0YS48L3A+XCI7XG4gICAgaWYgKHRoaXMucmVzdWx0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuJGVsLmh0bWwoaHRtbCArIFwiIFwiICsgaHRtbFdhcm5pbmcpO1xuICAgICAgdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGh0bWwgKz0gXCI8dGFibGU+XCI7XG4gICAgZm9yIChwYXJ0ID0gaSA9IDEsIHJlZiA9IHRoaXMubGFzdFBhcnQ7IDEgPD0gcmVmID8gaSA8PSByZWYgOiBpID49IHJlZjsgcGFydCA9IDEgPD0gcmVmID8gKytpIDogLS1pKSB7XG4gICAgICBpZiAodGhpcy5yZXN1bHRzQnlQYXJ0W3BhcnRdID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBodG1sICs9IFwiPHRyPjx0aD5Bc3Nlc3NtZW50IFwiICsgcGFydCArIFwiPC90aD48L3RyPiA8dHI+XCI7XG4gICAgICByZWYxID0gdGhpcy5yZXN1bHRzQnlQYXJ0W3BhcnRdO1xuICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmMS5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICByZXN1bHQgPSByZWYxW2pdO1xuICAgICAgICBzdWJ0ZXN0TmFtZSA9IHRoaXMuc3VidGVzdHMuZ2V0KHJlc3VsdC5nZXQoJ3N1YnRlc3RJZCcpKS5nZXQoJ25hbWUnKTtcbiAgICAgICAgaHRtbCArPSBcIjx0ZD4gXCIgKyAocmVzdWx0LmdldChcIml0ZW1UeXBlXCIpLnRpdGxlaXplKCkpICsgXCIgY29ycmVjdDxicj4gXCIgKyBzdWJ0ZXN0TmFtZSArIFwiIDwvdGQ+IDx0ZD5cIiArIChyZXN1bHQuZ2V0KFwiY29ycmVjdFwiKSkgKyBcIi9cIiArIChyZXN1bHQuZ2V0KFwidG90YWxcIikpICsgXCI8L3RkPlwiO1xuICAgICAgfVxuICAgIH1cbiAgICBodG1sICs9IFwiPC90YWJsZT4gPGJ1dHRvbiBjbGFzcz0nbmF2aWdhdGlvbiBiYWNrJz5cIiArICh0KCdiYWNrJykpICsgXCI8L2J1dHRvbj5cIjtcbiAgICB0aGlzLiRlbC5odG1sKGh0bWwpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICByZXR1cm4gTWFzdGVyeUNoZWNrVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIE1hc3RlcnlDaGVja01lbnVWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZSA6IFwiTWFzdGVyeUNoZWNrTWVudVZpZXdcIlxuXG4gIGV2ZW50czpcbiAgICAnY2hhbmdlIC5zdHVkZW50X3NlbGVjdG9yJyA6ICdnb3RvTWFzdGVyeUNoZWNrUmVwb3J0J1xuXG4gIGdvdG9NYXN0ZXJ5Q2hlY2tSZXBvcnQ6IChldmVudCkgLT5cbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwicmVwb3J0L21hc3RlcnlDaGVjay9cIiArIEAkZWwuZmluZChldmVudC50YXJnZXQpLmZpbmQoXCI6c2VsZWN0ZWRcIikuYXR0cihcImRhdGEtc3R1ZGVudElkXCIpLCB0cnVlXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgQHBhcmVudCAgICA9IG9wdGlvbnMucGFyZW50XG4gICAgQGtsYXNzICAgICA9IEBwYXJlbnQub3B0aW9ucy5rbGFzc1xuICAgIEBjdXJyaWN1bGEgPSBAcGFyZW50Lm9wdGlvbnMuY3VycmljdWxhXG4gICAgYWxsU3R1ZGVudHMgPSBuZXcgU3R1ZGVudHNcbiAgICBhbGxTdHVkZW50cy5mZXRjaFxuICAgICAgc3VjY2VzczogKGNvbGxlY3Rpb24pID0+XG4gICAgICAgIEBzdHVkZW50cyA9IGNvbGxlY3Rpb24ud2hlcmUgXG4gICAgICAgICAga2xhc3NJZCA6IEBrbGFzcy5pZFxuICAgICAgICBAcmVhZHkgPSB0cnVlXG4gICAgICAgIEByZW5kZXIoKVxuXG4gIHJlbmRlcjogLT5cblxuICAgIGlmIEByZWFkeVxuXG4gICAgICAjIHF1aWNrIGRhdGEgY2hlY2tcbiAgICAgIGlmIEBzdHVkZW50cy5sZW5ndGggPT0gMFxuICAgICAgICBAJGVsLmh0bWwgXCJQbGVhc2UgYWRkIHN0dWRlbnRzIHRvIHRoaXMgY2xhc3MuXCJcbiAgICAgICAgcmV0dXJuXG5cbiAgICAgIGh0bWwgPSBcIlxuICAgICAgICA8c2VsZWN0IGNsYXNzPSdzdHVkZW50X3NlbGVjdG9yJz5cbiAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz4je3QoJ3NlbGVjdCBhIHN0dWRlbnQnKX08L29wdGlvbj5cbiAgICAgICAgICBcIlxuICAgICAgZm9yIHN0dWRlbnQgaW4gQHN0dWRlbnRzXG4gICAgICAgIGh0bWwgKz0gXCI8b3B0aW9uIGRhdGEtc3R1ZGVudElkPScje3N0dWRlbnQuaWR9Jz4je3N0dWRlbnQuZ2V0KCduYW1lJyl9PC9vcHRpb24+XCJcbiAgICAgIGh0bWwgKz0gXCI8L3NlbGVjdD5cIlxuICAgICAgICAgIFxuICAgICAgQCRlbC5odG1sIGh0bWxcbiAgICBlbHNlXG4gICAgICBAJGVsLmh0bWwgXCI8aW1nIHNyYz0naW1hZ2VzL2xvYWRpbmcuZ2lmJyBjbGFzcz0nbG9hZGluZyc+XCIiLCJ2YXIgTWFzdGVyeUNoZWNrTWVudVZpZXcsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5NYXN0ZXJ5Q2hlY2tNZW51VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChNYXN0ZXJ5Q2hlY2tNZW51Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gTWFzdGVyeUNoZWNrTWVudVZpZXcoKSB7XG4gICAgcmV0dXJuIE1hc3RlcnlDaGVja01lbnVWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgTWFzdGVyeUNoZWNrTWVudVZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiTWFzdGVyeUNoZWNrTWVudVZpZXdcIjtcblxuICBNYXN0ZXJ5Q2hlY2tNZW51Vmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdjaGFuZ2UgLnN0dWRlbnRfc2VsZWN0b3InOiAnZ290b01hc3RlcnlDaGVja1JlcG9ydCdcbiAgfTtcblxuICBNYXN0ZXJ5Q2hlY2tNZW51Vmlldy5wcm90b3R5cGUuZ290b01hc3RlcnlDaGVja1JlcG9ydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJyZXBvcnQvbWFzdGVyeUNoZWNrL1wiICsgdGhpcy4kZWwuZmluZChldmVudC50YXJnZXQpLmZpbmQoXCI6c2VsZWN0ZWRcIikuYXR0cihcImRhdGEtc3R1ZGVudElkXCIpLCB0cnVlKTtcbiAgfTtcblxuICBNYXN0ZXJ5Q2hlY2tNZW51Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIgYWxsU3R1ZGVudHM7XG4gICAgdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgICB0aGlzLmtsYXNzID0gdGhpcy5wYXJlbnQub3B0aW9ucy5rbGFzcztcbiAgICB0aGlzLmN1cnJpY3VsYSA9IHRoaXMucGFyZW50Lm9wdGlvbnMuY3VycmljdWxhO1xuICAgIGFsbFN0dWRlbnRzID0gbmV3IFN0dWRlbnRzO1xuICAgIHJldHVybiBhbGxTdHVkZW50cy5mZXRjaCh7XG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICBfdGhpcy5zdHVkZW50cyA9IGNvbGxlY3Rpb24ud2hlcmUoe1xuICAgICAgICAgICAga2xhc3NJZDogX3RoaXMua2xhc3MuaWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBfdGhpcy5yZWFkeSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlcigpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBNYXN0ZXJ5Q2hlY2tNZW51Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGh0bWwsIGksIGxlbiwgcmVmLCBzdHVkZW50O1xuICAgIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgICBpZiAodGhpcy5zdHVkZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy4kZWwuaHRtbChcIlBsZWFzZSBhZGQgc3R1ZGVudHMgdG8gdGhpcyBjbGFzcy5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGh0bWwgPSBcIjxzZWxlY3QgY2xhc3M9J3N0dWRlbnRfc2VsZWN0b3InPiA8b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz5cIiArICh0KCdzZWxlY3QgYSBzdHVkZW50JykpICsgXCI8L29wdGlvbj5cIjtcbiAgICAgIHJlZiA9IHRoaXMuc3R1ZGVudHM7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgc3R1ZGVudCA9IHJlZltpXTtcbiAgICAgICAgaHRtbCArPSBcIjxvcHRpb24gZGF0YS1zdHVkZW50SWQ9J1wiICsgc3R1ZGVudC5pZCArIFwiJz5cIiArIChzdHVkZW50LmdldCgnbmFtZScpKSArIFwiPC9vcHRpb24+XCI7XG4gICAgICB9XG4gICAgICBodG1sICs9IFwiPC9zZWxlY3Q+XCI7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuaHRtbChodG1sKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwoXCI8aW1nIHNyYz0naW1hZ2VzL2xvYWRpbmcuZ2lmJyBjbGFzcz0nbG9hZGluZyc+XCIpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gTWFzdGVyeUNoZWNrTWVudVZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBQcm9ncmVzc1ZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJQcm9ncmVzc1ZpZXdcIlxuXG4gIElORElWSURVQUwgOiAxXG4gIEFHR1JFR0FURSAgOiAyXG5cbiAgZXZlbnRzOlxuICAgICdjbGljayAuYmFjaycgICAgICAgICAgICA6ICdnb0JhY2snXG4gICAgJ2NsaWNrIC5zZWxlY3RfaXRlbVR5cGUnIDogJ3NlbGVjdEl0ZW1UeXBlJ1xuICAgICdjbGljayAueHRpY2snICAgICAgICAgICA6ICdzZWxlY3RBc3Nlc3NtZW50J1xuXG4gICMgISEhIC0gdmFyaWFibGUgbmFtZSBGVUJBUlxuICAjIGFzc2Vzc21lbnQgPSBwYXJ0ID0gd2Vla1xuICBzZWxlY3RBc3Nlc3NtZW50OiAoZXZlbnQpIC0+XG4gICAgQHNlbGVjdGVkLndlZWsgPSBwYXJzZUludCgkKGV2ZW50LnRhcmdldCkuYXR0cignZGF0YS1pbmRleCcpKVxuICAgIEB1cGRhdGVUYWJsZSgpXG4gICAgQHVwZGF0ZUZsb3QoKVxuXG4gIHNlbGVjdEl0ZW1UeXBlOiAoZXZlbnQpIC0+XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgIEBzZWxlY3RlZC5pdGVtVHlwZSA9ICR0YXJnZXQuYXR0cignZGF0YS1pdGVtVHlwZScpXG4gICAgQCRlbC5maW5kKFwiLnNlbGVjdF9pdGVtVHlwZVwiKS5yZW1vdmVDbGFzcyhcInNlbGVjdGVkXCIpXG4gICAgJHRhcmdldC5hZGRDbGFzcyhcInNlbGVjdGVkXCIpXG4gICAgQHVwZGF0ZVRhYmxlKClcbiAgICBAdXBkYXRlRmxvdCgpXG5cbiAgZ29CYWNrOiAtPiBoaXN0b3J5LmdvIC0xXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgICAjXG4gICAgIyBBcmd1bWVudHMgYW5kIG1lbWJlciB2YXJzXG4gICAgI1xuICAgIEByZXN1bHRzICAgICAgPSBvcHRpb25zLnJlc3VsdHNcbiAgICBAc3R1ZGVudCAgICAgID0gb3B0aW9ucy5zdHVkZW50XG4gICAgQHN1YnRlc3RzICAgICA9IG9wdGlvbnMuc3VidGVzdHNcbiAgICBAa2xhc3MgICAgICAgID0gb3B0aW9ucy5rbGFzc1xuXG4gICAgIyBDYXRjaCB0aGluZ3MgdGhhdCBcImxvb2tcIiBcIm9kZFwiXG4gICAgaWYgbm90IEBrbGFzcz8gICAgICAgICAgdGhlbiBVdGlscy5sb2cgQCwgXCJObyBrbGFzcy5cIlxuICAgIGlmIG5vdCBAc3VidGVzdHM/ICAgICAgIHRoZW4gVXRpbHMubG9nIEAsIFwiTm8gcHJvZ3Jlc3MgdHlwZSBzdWJ0ZXN0cy5cIlxuICAgIGlmIEByZXN1bHRzLmxlbmd0aCA9PSAwXG4gICAgICBAcmVuZGVyUmVhZHkgPSB0cnVlXG4gICAgICBAcmVuZGVyKClcbiAgICAgIHJldHVyblxuXG5cbiAgICBAbW9kZSA9IGlmIEBzdHVkZW50PyB0aGVuIEBJTkRJVklEVUFMIGVsc2UgQEFHR1JFR0FURVxuXG4gICAgQHN1YnRlc3ROYW1lcyAgID0ge31cbiAgICBAYmVuY2htYXJrU2NvcmUgPSB7fVxuICAgIEByb3dzICAgICAgICAgICA9IFtdXG4gICAgQHBhcnRDb3VudCAgICAgID0gMFxuICAgIEBmbG90ICAgICAgICAgICA9IG51bGwgIyBmb3IgZmxvdFxuICAgIEBsYXN0UGFydCAgICAgICA9IE1hdGgubWF4LmFwcGx5IEAsIF8uY29tcGFjdChAc3VidGVzdHMucGx1Y2soXCJwYXJ0XCIpKVxuICAgIEByZXN1bHRzQnlQYXJ0ID0gW11cbiAgICBAaXRlbVR5cGVMaXN0ICA9IHt9XG4gICAgQHNlbGVjdGVkID1cbiAgICAgIFwiaXRlbVR5cGVcIiA6IG51bGxcbiAgICAgIFwid2Vla1wiICAgICA6IDBcblxuICAgICNcbiAgICAjIEZpbmQgb3V0IGhvdyBtYW55IHBhcnRzIGJlbG9uZyB0byB0aGUgcHJvZ3Jlc3MgcmVwb3J0XG4gICAgIyBNYWtlIGEgbmFtZXMgYnkgcGVydGluZW50SW5kZXggYW5kIGl0ZW1UeXBlXG4gICAgI1xuICAgIHBhcnRzID0gW11cbiAgICBmb3Igc3VidGVzdCBpbiBAc3VidGVzdHMubW9kZWxzXG4gICAgICBwYXJ0cy5wdXNoIHN1YnRlc3QuZ2V0KFwicGFydFwiKSBpZiAhfnBhcnRzLmluZGV4T2Yoc3VidGVzdC5nZXQoXCJwYXJ0XCIpKVxuXG4gICAgICAjIGdldCBuYW1lc1xuICAgICAgaSA9IHBhcnRzLmluZGV4T2Yoc3VidGVzdC5nZXQoXCJwYXJ0XCIpKVxuICAgICAgQHN1YnRlc3ROYW1lc1tpXSA9IHt9IGlmIG5vdCBAc3VidGVzdE5hbWVzW2ldP1xuICAgICAgQHN1YnRlc3ROYW1lc1tpXVtzdWJ0ZXN0LmdldChcIml0ZW1UeXBlXCIpXSA9IHN1YnRlc3QuZ2V0KFwibmFtZVwiKVxuXG4gICAgQHBhcnRDb3VudCA9IHBhcnRzLmxlbmd0aFxuXG4gICAgI1xuICAgICMgTWFrZSBhIG1hcCBpbiBjYXNlIHdlIG5lZWQgaXQgb2Ygd2hpY2ggd2VlayBiZWxvbmdzIHRvIHdoaWNoIGluZGV4XG4gICAgI1xuICAgIHN1YnRlc3RzQnlQYXJ0ID0gQHN1YnRlc3RzLmluZGV4QnkoXCJwYXJ0XCIpXG4gICAgcGFydEJ5SW5kZXggPSBfLmtleXMoc3VidGVzdHNCeVBhcnQpXG4gICAgQGluZGV4QnlQYXJ0ID0gW11cbiAgICBmb3IgcGFydCwgaSBpbiBwYXJ0QnlJbmRleFxuICAgICAgQGluZGV4QnlQYXJ0W3BhcnRdID0gaVxuXG5cbiAgICAjXG4gICAgIyBtYWtlIHRoZSByZXN1bHRzQnlQYXJ0IGFuZCB0aGUgaXRlbVR5cGVMaXN0XG4gICAgI1xuICAgIEByZXN1bHRzQnlQYXJ0ID0gQHJlc3VsdHMuaW5kZXhCeSBcInBhcnRcIlxuICAgIEBpdGVtVHlwZUxpc3RbcmVzdWx0LmdldChcIml0ZW1UeXBlXCIpLnRvTG93ZXJDYXNlKCldID0gdHJ1ZSBmb3IgcmVzdWx0IGluIEByZXN1bHRzLm1vZGVsc1xuICAgIEBpdGVtVHlwZUxpc3QgPSBfLmtleXMoQGl0ZW1UeXBlTGlzdClcblxuICAgICNcbiAgICAjIENvbXBpbGUgZGF0YSBhbmQgc2F2ZSB0byBAcm93c1xuICAgICMgdGhpcyBpcyBmb3IgdGhlIHRhYmxlXG4gICAgI1xuXG4gICAgIyBpdGVyYXRlIHRocm91Z2ggYWxsIHdlZWtzXG4gICAgZm9yIHBhcnQgaW4gWzEuLkBsYXN0UGFydF1cblxuICAgICAgaWYgQHJlc3VsdHNCeVBhcnRbcGFydF0gPT0gdW5kZWZpbmVkIHRoZW4gY29udGludWUgIyBpZiB0aGVyZSdzIG5vIHJlc3VsdHMgZm9yIHRoYXQgd2Vlaywgc2tpcCBpdFxuXG4gICAgICAjIGl0ZXJhdGUgdGhyb3VnaCBhbGwgaXRlbVR5cGVzIGZvciB0aGlzIHdlZWtcbiAgICAgIGl0ZW1UeXBlcyA9IHt9XG4gICAgICBmb3IgcmVzdWx0LCBpIGluIEByZXN1bHRzQnlQYXJ0W3BhcnRdXG5cbiAgICAgICAgaWYgQG1vZGUgPT0gQElORElWSURVQUwgJiYgcmVzdWx0LmdldChcInN0dWRlbnRJZFwiKSAhPSBAc3R1ZGVudC5pZCB0aGVuIGNvbnRpbnVlXG5cbiAgICAgICAgaXRlbVR5cGUgPSByZXN1bHQuZ2V0KFwiaXRlbVR5cGVcIilcblxuICAgICAgICAjIHNlbGVjdCBmaXJzdCBpdGVtVHlwZVxuICAgICAgICBAc2VsZWN0ZWQuaXRlbVR5cGUgPSBpdGVtVHlwZSBpZiBub3QgQHNlbGVjdGVkLml0ZW1UeXBlP1xuXG4gICAgICAgICMgcHVzaCBhbiBvYmplY3RcbiAgICAgICAgaXRlbVR5cGVzW2l0ZW1UeXBlXSA9IFtdIGlmIG5vdCBpdGVtVHlwZXNbaXRlbVR5cGVdP1xuICAgICAgICBpdGVtVHlwZXNbaXRlbVR5cGVdLnB1c2hcbiAgICAgICAgICBcIm5hbWVcIiAgICAgICAgICAgOiBpdGVtVHlwZS50aXRsZWl6ZSgpXG4gICAgICAgICAgXCJrZXlcIiAgICAgICAgICAgIDogaXRlbVR5cGVcbiAgICAgICAgICBcInBhcnRcIiAgICAgICAgICAgOiByZXN1bHQuZ2V0KFwicGFydFwiKVxuICAgICAgICAgIFwiY29ycmVjdFwiICAgICAgICA6IHJlc3VsdC5nZXQgXCJjb3JyZWN0XCJcbiAgICAgICAgICBcImF0dGVtcHRlZFwiICAgICAgOiByZXN1bHQuZ2V0IFwiYXR0ZW1wdGVkXCJcbiAgICAgICAgICBcIml0ZW1zUGVyTWludXRlXCIgOiByZXN1bHQuZ2V0Q29ycmVjdFBlclNlY29uZHMoNjApXG5cbiAgICAgICAgQGJlbmNobWFya1Njb3JlW2l0ZW1UeXBlXSA9IEBzdWJ0ZXN0cy5nZXQocmVzdWx0LmdldChcInN1YnRlc3RJZFwiKSkuZ2V0TnVtYmVyKFwic2NvcmVUYXJnZXRcIilcblxuICAgICAgIyBlYWNoIHJvdyBpcyBvbmUgd2Vlay9wYXJ0XG4gICAgICBAcm93cy5wdXNoXG4gICAgICAgIFwicGFydFwiICAgICAgOiBwYXJ0XG4gICAgICAgIFwiaXRlbVR5cGVzXCIgOiAoXy52YWx1ZXMoaXRlbVR5cGVzKSkgIyBvYmplY3QgLT4gYXJyYXlcblxuICAgICNcbiAgICAjIEFnZ3JlZ2F0ZSBtb2RlIGF2ZXJhZ2VzIGRhdGEgYWNyb3NzIHN0dWRlbnRzXG4gICAgI1xuICAgIEByb3dzID0gQGFnZ3JlZ2F0ZSBAcm93c1xuXG4gICAgI1xuICAgICMgU2VsZWN0IHRoZSBtb3N0IHJlY2VudCB0aGluZyB3aXRoIGRhdGFcbiAgICAjXG5cbiAgICBpZiBAcm93cy5sZW5ndGggIT0gMFxuICAgICAgQHNlbGVjdGVkID1cbiAgICAgICAgd2VlayAgICAgOiBAaW5kZXhCeVBhcnRbXy5sYXN0KEByb3dzKVsncGFydCddXVxuICAgICAgICBpdGVtVHlwZSA6IF8ubGFzdChAcm93cylbJ2l0ZW1UeXBlcyddWzBdLmtleVxuXG4gICAgI1xuICAgICMgTWFrZSBmbG90IGRhdGFcbiAgICAjXG4gICAgcG9pbnRzQnlJdGVtVHlwZSA9IHt9XG4gICAgZm9yIHJvdywgaSBpbiBAcm93c1xuICAgICAgZm9yIGl0ZW1UeXBlIGluIHJvdy5pdGVtVHlwZXNcbiAgICAgICAgZ3JhcGhJbmRleCA9IEBpbmRleEJ5UGFydFtyb3cucGFydF0gKyAxXG4gICAgICAgIHBvaW50c0J5SXRlbVR5cGVbaXRlbVR5cGUua2V5XSA9IFtdIGlmIG5vdCBwb2ludHNCeUl0ZW1UeXBlW2l0ZW1UeXBlLmtleV0/IFxuICAgICAgICBwb2ludHNCeUl0ZW1UeXBlW2l0ZW1UeXBlLmtleV0ucHVzaCBbZ3JhcGhJbmRleCwgaXRlbVR5cGUuaXRlbXNQZXJNaW51dGVdXG4gICAgQGZsb3REYXRhICAgICAgPSBbXVxuICAgIEBiZW5jaG1hcmtEYXRhID0gW11cbiAgICBpID0gMFxuXG4gICAgZm9yIG5hbWUsIGRhdGEgb2YgcG9pbnRzQnlJdGVtVHlwZVxuICAgICAga2V5ID0gbmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICBAZmxvdERhdGFba2V5XSA9IHtcbiAgICAgICAgXCJkYXRhXCIgIDogZGF0YVxuICAgICAgICBcImxhYmVsXCIgOiBuYW1lLnRpdGxlaXplKClcbiAgICAgICAgXCJrZXlcIiAgIDoga2V5XG4gICAgICAgIFwibGluZXNcIiA6XG4gICAgICAgICAgXCJzaG93XCIgOiB0cnVlXG4gICAgICAgIFwicG9pbnRzXCIgOlxuICAgICAgICAgIFwic2hvd1wiIDogdHJ1ZVxuICAgICAgfVxuXG5cbiAgICAjXG4gICAgIyBDcmVhdGUgYmVuY2htYXJrIGZsb3QgZ3JhcGhzXG4gICAgI1xuICAgIEBmbG90QmVuY2htYXJrID0gW11cbiAgICBmb3IgaXRlbVR5cGUsIHN1YnRlc3RzIG9mIEBzdWJ0ZXN0cy5pbmRleEJ5KFwiaXRlbVR5cGVcIilcbiAgICAgIGRhdGFGb3JCZW5jaG1hcmsgPSBbXVxuICAgICAgZm9yIHN1YnRlc3QsIGkgaW4gc3VidGVzdHNcbiAgICAgICAgZ3JhcGhJbmRleCA9IEBpbmRleEJ5UGFydFtzdWJ0ZXN0LmdldChcInBhcnRcIildICsgMVxuICAgICAgICBkYXRhRm9yQmVuY2htYXJrLnB1c2ggW2dyYXBoSW5kZXgsIHN1YnRlc3QuZ2V0TnVtYmVyKFwic2NvcmVUYXJnZXRcIildXG5cbiAgICAgIEBmbG90QmVuY2htYXJrW2l0ZW1UeXBlLnRvTG93ZXJDYXNlKCldID0ge1xuICAgICAgICBcImxhYmVsXCIgOiBcIlByb2dyZXNzIGJlbmNobWFya1wiXG4gICAgICAgIFwiZGF0YVwiIDogZGF0YUZvckJlbmNobWFya1xuICAgICAgICBcImNvbG9yXCIgOiBcIiNhYWFcIlxuICAgICAgICBcImxpbmVzXCIgOlxuICAgICAgICAgIFwic2hvd1wiICA6IHRydWVcbiAgICAgIH1cblxuICAgICNcbiAgICAjIGNyZWF0ZSB3YXJuaW5nIHRocmVzaG9sZHNcbiAgICAjXG4gICAgQHdhcm5pbmdUaHJlc2hvbGRzID0ge31cbiAgICBmb3IgaXRlbVR5cGUsIHN1YnRlc3RzIG9mIEBzdWJ0ZXN0cy5pbmRleEJ5KFwiaXRlbVR5cGVcIilcbiAgICAgIEB3YXJuaW5nVGhyZXNob2xkc1tpdGVtVHlwZV0gPSBbXVxuICAgICAgZm9yIHN1YnRlc3QsIGkgaW4gc3VidGVzdHNcbiAgICAgICAgQHdhcm5pbmdUaHJlc2hvbGRzW2l0ZW1UeXBlLnRvTG93ZXJDYXNlKCldW0BpbmRleEJ5UGFydFtzdWJ0ZXN0LmdldChcInBhcnRcIildXSA9XG4gICAgICAgICAgdGFyZ2V0OiBzdWJ0ZXN0LmdldE51bWJlcihcInNjb3JlVGFyZ2V0XCIpXG4gICAgICAgICAgc3ByZWFkOiBzdWJ0ZXN0LmdldE51bWJlcihcInNjb3JlU3ByZWFkXCIpXG4gICAgICAgICAgc2Vjb25kczogc3VidGVzdC5nZXROdW1iZXIoXCJ0aW1lclwiKVxuXG5cbiAgICBAcmVuZGVyUmVhZHkgPSB0cnVlXG4gICAgQHJlbmRlcigpXG5cbiAgcmVuZGVyOiAtPlxuXG4gICAgcmV0dXJuIGlmIG5vdCBAcmVuZGVyUmVhZHlcbiAgICAkd2luZG93ID0gJCh3aW5kb3cpXG4gICAgd2luID0gXG4gICAgICBoIDogJHdpbmRvdy5oZWlnaHQoKVxuICAgICAgdyA6ICR3aW5kb3cud2lkdGgoKVxuICAgIFxuICAgIHN0dWRlbnROYW1lID0gXCJcbiAgICAgIDxoMj4je0BzdHVkZW50LmdldCgnbmFtZScpfTwvaDI+XG4gICAgXCIgaWYgQG1vZGUgPT0gQElORElWSURVQUxcblxuICAgIGh0bWwgPSBcIlxuICAgICAgPGgxPlByb2dyZXNzIHRhYmxlPC9oMT5cbiAgICAgICN7c3R1ZGVudE5hbWUgfHwgXCJcIn1cbiAgICBcIlxuXG4gICAgI1xuICAgICMgRW1wdHkgd2FybmluZ1xuICAgICNcbiAgICBodG1sV2FybmluZyA9IFwiPHA+Tm8gdGVzdCBkYXRhIGZvciB0aGlzIHR5cGUgb2YgcmVwb3J0LiBSZXR1cm4gdG8gdGhlIDxhIGhyZWY9JyNjbGFzcyc+Y2xhc3MgbWVudTwvYT4gYW5kIGNsaWNrIHRoZSA8aW1nIHNyYz0naW1hZ2VzL2ljb25fcnVuLnBuZyc+IGljb24gdG8gY29sbGVjdCBkYXRhLjwvcD5cIlxuXG4gICAgaWYgQHJlc3VsdHMubGVuZ3RoID09IDBcbiAgICAgIEAkZWwuaHRtbCBcIlxuICAgICAgICAje2h0bWx9XG4gICAgICAgICN7aHRtbFdhcm5pbmd9XG4gICAgICBcIlxuICAgICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG4gICAgICByZXR1cm5cblxuXG4gICAgI1xuICAgICMgRmxvdCBjb250YWluZXJzXG4gICAgI1xuICAgIGh0bWwgKz0gXCJcbiAgICAgIDxkaXYgaWQ9J2Zsb3QtbWVudSc+XG4gICAgICBcIlxuXG4gICAgZm9yIGtleSBpbiBfLnVuaXEoQHN1YnRlc3RzLnBsdWNrKFwiaXRlbVR5cGVcIikpXG4gICAgICBsYWJlbCA9IGtleS5yZXBsYWNlKC9bXy1dL2csIFwiIFwiKS5jYXBpdGFsaXplKClcbiAgICAgIHNlbGVjdGVkQ2xhc3MgPSBpZiBrZXkgPT0gQHNlbGVjdGVkLml0ZW1UeXBlIHRoZW4gXCJzZWxlY3RlZFwiIGVsc2UgXCJcIlxuICAgICAgaHRtbCArPSBcIjxidXR0b24gY2xhc3M9J2NvbW1hbmQgc2VsZWN0X2l0ZW1UeXBlICN7c2VsZWN0ZWRDbGFzc30nIGRhdGEtaXRlbVR5cGU9JyN7a2V5fSc+I3tsYWJlbH08L2J1dHRvbj5cIlxuXG4gICAgaHRtbCArPSBcIlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGlkPSdmbG90LWNvbnRhaW5lcicgc3R5bGU9J3dpZHRoOiAje3dpbmRvdy53KjAuOH1weDsgaGVpZ2h0OjMwMHB4Oyc+PC9kaXY+XG4gICAgXCJcblxuICAgICNcbiAgICAjIFNldCB0aGUgdGFibGVcbiAgICAjXG4gICAgaHRtbCArPSBcIlxuICAgIDxkaXYgaWQ9J3RhYmxlX2NvbnRhaW5lcic+PC9kaXY+XG4gICAgPGJ1dHRvbiBjbGFzcz0nbmF2aWdhdGlvbiBiYWNrJz4je3QoJ2JhY2snKX08L2J1dHRvbj5cbiAgICBcIlxuXG4gICAgQCRlbC5odG1sIGh0bWxcbiAgICBAdXBkYXRlVGFibGUoKVxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuXG4gIGFmdGVyUmVuZGVyOiA9PlxuICAgIEB1cGRhdGVGbG90KClcblxuICB1cGRhdGVUYWJsZTogLT5cblxuICAgIHR5cGUgPSBAc2VsZWN0ZWQuaXRlbVR5cGVcbiAgICB3ZWVrID0gQHNlbGVjdGVkLndlZWtcblxuICAgIGh0bWwgPSBcIjx0YWJsZSBjbGFzcz0ndGFidWxhcic+XCJcbiAgICBmb3Igcm93LCBpIGluIEByb3dzXG4gICAgICAjIHNraXAgaWYgc2VsZWN0ZWQgcm93IGRvZXNuJ3QgaGF2ZSBhbnkgb2YgdGhlIHNlbGVjdGVkIGl0ZW0gdHlwZVxuICAgICAgY29udGludWUgaWYgIX5fLnBsdWNrKHJvdy5pdGVtVHlwZXMsIFwia2V5XCIpLmluZGV4T2YodHlwZSlcbiAgICAgIGh0bWwgKz0gXCI8dHI+PHRoPiN7QHN1YnRlc3ROYW1lc1tpXVt0eXBlXX08L3RoPjwvdHI+PHRyPlwiXG4gICAgICBmb3IgaXRlbVR5cGUgaW4gcm93Lml0ZW1UeXBlc1xuICAgICAgICBpZiBpdGVtVHlwZS5rZXkgIT0gdHlwZSB0aGVuIGNvbnRpbnVlXG4gICAgICAgIGh0bWwgKz0gXCJcbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQ+I3tpdGVtVHlwZS5uYW1lfSBjb3JyZWN0PC90ZD48dGQ+I3tpdGVtVHlwZS5jb3JyZWN0fS8je2l0ZW1UeXBlLmF0dGVtcHRlZH08L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRkPiN7aXRlbVR5cGUubmFtZX0gY29ycmVjdCBwZXIgbWludXRlPC90ZD48dGQ+I3tpdGVtVHlwZS5pdGVtc1Blck1pbnV0ZX08L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICBcIlxuICAgIGh0bWwgKz0gXCI8L3RhYmxlPlwiXG5cbiAgICAjXG4gICAgIyBBZGQgd2FybmluZyBpZiBhbGwgc3R1ZGVudHMgbW9kZVxuICAgICNcblxuICAgIGF2YWlsYWJsZUl0ZW1UeXBlc1RoaXNXZWVrID0gXy5wbHVjayhAcm93c1t3ZWVrXT8uaXRlbVR5cGVzLCBcImtleVwiKVxuXG4gICAgaWYgd2VlayA+PSBAcm93cy5sZW5ndGggfHwgIX5hdmFpbGFibGVJdGVtVHlwZXNUaGlzV2Vlay5pbmRleE9mKHR5cGUpXG4gICAgICBodG1sICs9IFwiPHNlY3Rpb24+Tm8gZGF0YSBmb3IgdGhpcyBhc3Nlc3NtZW50Ljwvc2VjdGlvbj5cIlxuICAgIGVsc2UgaWYgQG1vZGUgPT0gQEFHR1JFR0FURVxuXG4gICAgICBzY29yZSA9IDBcblxuICAgICAgZGF0YSA9IGlmIEBmbG90RGF0YVt0eXBlXT9cbiAgICAgICAgQGZsb3REYXRhW3R5cGVdLmRhdGFcbiAgICAgIGVsc2VcbiAgICAgICAgW11cblxuICAgICAgZm9yIGRhdHVtIGluIGRhdGFcbiAgICAgICAgaWYgZGF0dW1bMF0gPT0gd2VlaysxXG4gICAgICAgICAgc2NvcmUgPSBkYXR1bVsxXVxuXG4gICAgICB0aHJlc2hvbGQgPSBAd2FybmluZ1RocmVzaG9sZHNbdHlwZV1bd2Vla11cblxuICAgICAgaGlnaCA9IHRocmVzaG9sZC50YXJnZXQgKyB0aHJlc2hvbGQuc3ByZWFkXG4gICAgICBsb3cgID0gdGhyZXNob2xkLnRhcmdldCAtIHRocmVzaG9sZC5zcHJlYWRcbiAgICAgIGRpZmZlcmVuY2UgPSBzY29yZSAtIHRocmVzaG9sZC50YXJnZXRcblxuICAgICAgaWYgc2NvcmUgPiBoaWdoXG4gICAgICAgIHJlc3VsdCA9IFwiKCN7c2NvcmV9KSwgI3tkaWZmZXJlbmNlfSBjb3JyZWN0IGl0ZW1zIHBlciBtaW51dGUgYWJvdmUgdGhlIGJlbmNobWFya1wiXG4gICAgICAgIHdhcm5pbmdzID0gXCJZb3VyIGNsYXNzIGlzIGRvaW5nIHdlbGwsICN7cmVzdWx0fSwgY29udGludWUgd2l0aCB0aGUgcmVhZGluZyBwcm9ncmFtLiBTaGFyZSB5b3VyIGFuZCB5b3VyIGNsYXNz4oCZIGdyZWF0IHdvcmsgd2l0aCBwYXJlbnRzLiBSZXdhcmQgeW91ciBjbGFzcyB3aXRoIHNvbWUgZnVuIHJlYWRpbmcgYWN0aXZpdGllcyBzdWNoIGFzIHJlYWRpbmcgbWFyYXRob25zIG9yIGNvbXBldGl0aW9ucy4gSG93ZXZlciwgbG9vayBhdCBhIHN0dWRlbnQgZ3JvdXBpbmcgcmVwb3J0IGZvciB0aGlzIGFzc2Vzc21lbnQgYW5kIG1ha2Ugc3VyZSB0aGF0IHRob3NlIGNoaWxkcmVuIHBlcmZvcm1pbmcgYmVsb3cgYXZlcmFnZSBnZXQgZXh0cmEgYXR0ZW50aW9uIGFuZCBwcmFjdGljZSBhbmQgZG9u4oCZdCBmYWxsIGJlaGluZC5cIlxuICAgICAgZWxzZSBpZiBzY29yZSA8IGxvd1xuICAgICAgICByZXN1bHQgPSBcIigje3Njb3JlfSksICN7TWF0aC5hYnMoZGlmZmVyZW5jZSl9IGNvcnJlY3QgaXRlbXMgcGVyIG1pbnV0ZSBiZWxvdyB0aGUgYmVuY2htYXJrXCJcbiAgICAgICAgd2FybmluZ3MgPSBcIllvdXIgY2xhc3MgaXMgcGVyZm9ybWluZyBiZWxvdyB0aGUgZ3JhZGUtbGV2ZWwgdGFyZ2V0LCAje3Jlc3VsdH0uIFBsYW4gZm9yIGFkZGl0aW9uYWwgbGVzc29uIHRpbWUgZm9jdXNpbmcgb24gcmVhZGluZyBpbiBjb25zdWx0YXRpb24gd2l0aCB5b3VyIHByaW5jaXBhbC4gRW5jb3VyYWdlIHBhcmVudHMgdG8gc3BlbmQgbW9yZSB0aW1lIHdpdGggcmVhZGluZyBtYXRlcmlhbHMgYXQgaG9tZSDigJMgcmVtaW5kIHRoZW0gdGhhdCB5b3UgYXJlIGEgdGVhbSB3b3JraW5nIHRvZ2V0aGVyIHRvIGhlbHAgdGhlaXIgY2hpbGRyZW4gbGVhcm5pbmcgdG8gcmVhZC4gVGhpbmsgYWJvdXQgb3JnYW5pemluZyBvdGhlciBldmVudHMgYW5kIG9wcG9ydHVuaXRpZXMgZm9yIHByYWN0aWNlLCBlLmcuLCByZWFkaW5nIG1hcmF0aG9ucyBvciBjb21wZXRpdGlvbnMgdG8gbW90aXZhdGUgc3R1ZGVudHMgdG8gcmVhZCBtb3JlLlwiXG4gICAgICBlbHNlXG4gICAgICAgIGlmIGRpZmZlcmVuY2UgIT0gMCAmJiBkaWZmZXJlbmNlICogLTEgPT0gTWF0aC5hYnMoZGlmZmVyZW5jZSlcbiAgICAgICAgICByZXN1bHQgPSAoc2NvcmUgLSB0aHJlc2hvbGQudGFyZ2V0KSArIFwiIGNvcnJlY3QgaXRlbXMgcGVyIG1pbnV0ZSBhYm92ZSB0aGUgYmVuY2ggbWFya1wiXG4gICAgICAgIGVsc2UgaWYgZGlmZmVyZW5jZSA9PSAwXG4gICAgICAgICAgcmVzdWx0ID0gXCIje3Njb3JlfSBjb3JyZWN0IGl0ZW1zIHBlciBtaW51dGVcIlxuICAgICAgICBlbHNlXG4gICAgICAgICAgcmVzdWx0ID0gXCIoI3tzY29yZX0pLCBcIiArIE1hdGguYWJzKHNjb3JlIC0gdGhyZXNob2xkLnRhcmdldCkgKyBcIiBjb3JyZWN0IGl0ZW1zIHBlciBtaW51dGUgYmVsb3cgdGhlIGJlbmNoIG1hcmtcIlxuICAgICAgICBcbiAgICAgICAgIyBAVE9ETyBtYWtlIHRoYXQgXCJtaW51dGVcIiB1bml0IGR5bmFtaWNcbiAgICAgICAgd2FybmluZ3MgPSBcIllvdXIgY2xhc3MgaXMgaW4gbGluZSB3aXRoIGV4cGVjdGF0aW9ucywgI3tyZXN1bHR9LiBDb250aW51ZSB3aXRoIHRoZSByZWFkaW5nIHByb2dyYW0gYW5kIGtlZXAgdXAgdGhlIGdvb2Qgd29yayEgTG9vayBhdCBhIHN0dWRlbnQgZ3JvdXBpbmcgcmVwb3J0IGZvciB0aGlzIGFzc2Vzc21lbnQgYW5kIG1ha2Ugc3VyZSB0aGF0IHRob3NlIGNoaWxkcmVuIHBlcmZvcm1pbmcgYmVsb3cgYXZlcmFnZSBnZXQgZXh0cmEgYXR0ZW50aW9uIGFuZCBwcmFjdGljZSBhbmQgZG9u4oCZdCBmYWxsIGJlaGluZC5cIlxuXG4gICAgICBodG1sICs9IFwiXG4gICAgICAgIDxzZWN0aW9uPlxuICAgICAgICAgICN7d2FybmluZ3N9XG4gICAgICAgIDwvc2VjdGlvbj5cbiAgICAgIFwiXG5cbiAgICBAJGVsLmZpbmQoXCIjdGFibGVfY29udGFpbmVyXCIpLmh0bWwgaHRtbFxuXG5cbiAgdXBkYXRlRmxvdDogPT5cbiAgICAjXG4gICAgIyBGbG90IG9wdGlvbnNcbiAgICAjXG5cbiAgICBAZmxvdE9wdGlvbnMgPVxuICAgICAgXCJ4YXhpc1wiIDpcbiAgICAgICAgXCJtaW5cIiAgICAgICAgICAgOiAwLjVcbiAgICAgICAgXCJtYXhcIiAgICAgICAgICAgOiBAcGFydENvdW50ICsgMC41XG4gICAgICAgIFwidGlja3NcIiAgICAgICAgIDogKCBTdHJpbmcoIGkgKSBmb3IgaSBpbiBbMS4uQHBhcnRDb3VudF0gKVxuICAgICAgICBcInRpY2tEZWNpbWFsc1wiICA6IDBcbiAgICAgICAgXCJ0aWNrRm9ybWF0dGVyXCIgOiAoIG51bSApID0+IFxuICAgICAgICAgIGlmIEBzdWJ0ZXN0TmFtZXNbbnVtLTFdW0BzZWxlY3RlZC5pdGVtVHlwZV0/XG4gICAgICAgICAgICByZXR1cm4gXCI8YnV0dG9uIGNsYXNzPSd4dGljayAje2lmIG51bS0xPT1Ac2VsZWN0ZWQud2VlayB0aGVuICdzZWxlY3RlZCcgZWxzZSAnJ30nIGRhdGEtaW5kZXg9JyN7bnVtLTF9Jz4je0BzdWJ0ZXN0TmFtZXNbbnVtLTFdW0BzZWxlY3RlZC5pdGVtVHlwZV19PC9idXR0b24+XCJcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBcIlwiXG4gICAgICBcImdyaWRcIiA6XG4gICAgICAgIFwibWFya2luZ3NcIiA6XG4gICAgICAgICAgXCJjb2xvclwiICA6IFwiI2ZmY1wiXG4gICAgICAgICAgXCJ4YXhpc1wiICA6IFxuICAgICAgICAgICAgXCJ0b1wiICAgOiBAc2VsZWN0ZWQud2VlayArIDAuNVxuICAgICAgICAgICAgXCJmcm9tXCIgOiBAc2VsZWN0ZWQud2VlayAtIDAuNVxuXG5cbiAgICBkaXNwbGF5RGF0YSA9IFtdXG4gICAgZGlzcGxheURhdGEucHVzaCBAZmxvdERhdGFbQHNlbGVjdGVkLml0ZW1UeXBlXSAgICAgIGlmIEBmbG90RGF0YVtAc2VsZWN0ZWQuaXRlbVR5cGVdXG4gICAgZGlzcGxheURhdGEucHVzaCBAZmxvdEJlbmNobWFya1tAc2VsZWN0ZWQuaXRlbVR5cGVdIGlmIEBmbG90QmVuY2htYXJrW0BzZWxlY3RlZC5pdGVtVHlwZV1cbiAgICBcbiAgICBAZmxvdCA9ICQucGxvdCBAJGVsLmZpbmQoXCIjZmxvdC1jb250YWluZXJcIiksIGRpc3BsYXlEYXRhLCBAZmxvdE9wdGlvbnNcblxuICAjIFRha2VzIHRoZSByZXN1bHRzIGZvciBlYWNoIGl0ZW1UeXBlIGFuZCByZXBsYWNlcyB0aGVtIHdpdGggYW4gYXZlcmFnZVxuICBhZ2dyZWdhdGU6IChvbGRSb3dzKSAtPlxuXG4gICAgbmV3Um93cyA9IFtdXG4gICAgZm9yIHJvdywgaSBpbiBvbGRSb3dzXG4gICAgICBuZXdSb3dzW2ldID1cbiAgICAgICAgXCJwYXJ0XCIgICAgICA6IHJvdy5wYXJ0XG4gICAgICAgIFwiaXRlbVR5cGVzXCIgOiBbXVxuXG4gICAgICBmb3IgcmVzdWx0cyBpbiByb3cuaXRlbVR5cGVzXG5cbiAgICAgICAgIyBibGFua1xuICAgICAgICBtZWFuID1cbiAgICAgICAgICBcIm5hbWVcIiAgICAgICAgICAgOiBcIlwiXG4gICAgICAgICAgXCJrZXlcIiAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgIFwiY29ycmVjdFwiICAgICAgICA6IDBcbiAgICAgICAgICBcImF0dGVtcHRlZFwiICAgICAgOiAwXG4gICAgICAgICAgXCJpdGVtc1Blck1pbnV0ZVwiIDogMFxuXG4gICAgICAgICMgYWRkXG4gICAgICAgIGZvciByZXN1bHQgaW4gcmVzdWx0c1xuICAgICAgICAgIG1lYW4ubmFtZSAgICAgICAgICAgPSByZXN1bHQubmFtZVxuICAgICAgICAgIG1lYW4ua2V5ICAgICAgICAgICAgPSByZXN1bHQua2V5XG4gICAgICAgICAgbWVhbi5jb3JyZWN0ICAgICAgICArPSByZXN1bHQuY29ycmVjdFxuICAgICAgICAgIG1lYW4uYXR0ZW1wdGVkICAgICAgKz0gcmVzdWx0LmF0dGVtcHRlZFxuICAgICAgICAgIG1lYW4uaXRlbXNQZXJNaW51dGUgKz0gcmVzdWx0Lml0ZW1zUGVyTWludXRlXG5cbiAgICAgICAgIyBkaXZpZGVcbiAgICAgICAgbWVhbi5jb3JyZWN0ICAgICAgICAvPSByZXN1bHRzLmxlbmd0aFxuICAgICAgICBtZWFuLmF0dGVtcHRlZCAgICAgIC89IHJlc3VsdHMubGVuZ3RoXG4gICAgICAgIG1lYW4uaXRlbXNQZXJNaW51dGUgLz0gcmVzdWx0cy5sZW5ndGhcblxuICAgICAgICAjIFJvdW5kXG4gICAgICAgIG1lYW4uY29ycmVjdCA9IE1hdGgucm91bmQobWVhbi5jb3JyZWN0KVxuICAgICAgICBtZWFuLmF0dGVtcHRlZCA9IE1hdGgucm91bmQobWVhbi5hdHRlbXB0ZWQpXG4gICAgICAgIG1lYW4uaXRlbXNQZXJNaW51dGUgPSBNYXRoLnJvdW5kKG1lYW4uaXRlbXNQZXJNaW51dGUpXG5cbiAgICAgICAgIyByZXBsYWNlIHZhbHVlcyBpbiBAcm93c1xuICAgICAgICBuZXdSb3dzW2ldLml0ZW1UeXBlcy5wdXNoIG1lYW5cblxuICAgIHJldHVybiBuZXdSb3dzXG5cbmNsYXNzIFNvcnRlZENvbGxlY3Rpb25cbiAgY29uc3RydWN0b3I6IChvcHRpb25zKSAtPlxuICAgIEBzb3J0ZWQgICAgPSBbXVxuICAgIEBtb2RlbHMgICAgPSBvcHRpb25zLm1vZGVsc1xuICAgIEBhdHRyaWJ1dGUgPSBvcHRpb25zLmF0dHJpYnV0ZVxuICAgICIsInZhciBQcm9ncmVzc1ZpZXcsIFNvcnRlZENvbGxlY3Rpb24sXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuUHJvZ3Jlc3NWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFByb2dyZXNzVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gUHJvZ3Jlc3NWaWV3KCkge1xuICAgIHRoaXMudXBkYXRlRmxvdCA9IGJpbmQodGhpcy51cGRhdGVGbG90LCB0aGlzKTtcbiAgICB0aGlzLmFmdGVyUmVuZGVyID0gYmluZCh0aGlzLmFmdGVyUmVuZGVyLCB0aGlzKTtcbiAgICByZXR1cm4gUHJvZ3Jlc3NWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgUHJvZ3Jlc3NWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIlByb2dyZXNzVmlld1wiO1xuXG4gIFByb2dyZXNzVmlldy5wcm90b3R5cGUuSU5ESVZJRFVBTCA9IDE7XG5cbiAgUHJvZ3Jlc3NWaWV3LnByb3RvdHlwZS5BR0dSRUdBVEUgPSAyO1xuXG4gIFByb2dyZXNzVmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdjbGljayAuYmFjayc6ICdnb0JhY2snLFxuICAgICdjbGljayAuc2VsZWN0X2l0ZW1UeXBlJzogJ3NlbGVjdEl0ZW1UeXBlJyxcbiAgICAnY2xpY2sgLnh0aWNrJzogJ3NlbGVjdEFzc2Vzc21lbnQnXG4gIH07XG5cbiAgUHJvZ3Jlc3NWaWV3LnByb3RvdHlwZS5zZWxlY3RBc3Nlc3NtZW50ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB0aGlzLnNlbGVjdGVkLndlZWsgPSBwYXJzZUludCgkKGV2ZW50LnRhcmdldCkuYXR0cignZGF0YS1pbmRleCcpKTtcbiAgICB0aGlzLnVwZGF0ZVRhYmxlKCk7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlRmxvdCgpO1xuICB9O1xuXG4gIFByb2dyZXNzVmlldy5wcm90b3R5cGUuc2VsZWN0SXRlbVR5cGUgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0O1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgdGhpcy5zZWxlY3RlZC5pdGVtVHlwZSA9ICR0YXJnZXQuYXR0cignZGF0YS1pdGVtVHlwZScpO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIuc2VsZWN0X2l0ZW1UeXBlXCIpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRcIik7XG4gICAgJHRhcmdldC5hZGRDbGFzcyhcInNlbGVjdGVkXCIpO1xuICAgIHRoaXMudXBkYXRlVGFibGUoKTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVGbG90KCk7XG4gIH07XG5cbiAgUHJvZ3Jlc3NWaWV3LnByb3RvdHlwZS5nb0JhY2sgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaGlzdG9yeS5nbygtMSk7XG4gIH07XG5cbiAgUHJvZ3Jlc3NWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBkYXRhLCBkYXRhRm9yQmVuY2htYXJrLCBncmFwaEluZGV4LCBpLCBpdGVtVHlwZSwgaXRlbVR5cGVzLCBqLCBrLCBrZXksIGwsIGxlbiwgbGVuMSwgbGVuMiwgbGVuMywgbGVuNCwgbGVuNSwgbGVuNiwgbGVuNywgbSwgbiwgbmFtZSwgbywgcCwgcGFydCwgcGFydEJ5SW5kZXgsIHBhcnRzLCBwb2ludHNCeUl0ZW1UeXBlLCBxLCByLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHJlZjQsIHJlZjUsIHJlZjYsIHJlZjcsIHJlc3VsdCwgcm93LCBzdWJ0ZXN0LCBzdWJ0ZXN0cywgc3VidGVzdHNCeVBhcnQ7XG4gICAgdGhpcy5yZXN1bHRzID0gb3B0aW9ucy5yZXN1bHRzO1xuICAgIHRoaXMuc3R1ZGVudCA9IG9wdGlvbnMuc3R1ZGVudDtcbiAgICB0aGlzLnN1YnRlc3RzID0gb3B0aW9ucy5zdWJ0ZXN0cztcbiAgICB0aGlzLmtsYXNzID0gb3B0aW9ucy5rbGFzcztcbiAgICBpZiAodGhpcy5rbGFzcyA9PSBudWxsKSB7XG4gICAgICBVdGlscy5sb2codGhpcywgXCJObyBrbGFzcy5cIik7XG4gICAgfVxuICAgIGlmICh0aGlzLnN1YnRlc3RzID09IG51bGwpIHtcbiAgICAgIFV0aWxzLmxvZyh0aGlzLCBcIk5vIHByb2dyZXNzIHR5cGUgc3VidGVzdHMuXCIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5yZXN1bHRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5yZW5kZXJSZWFkeSA9IHRydWU7XG4gICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm1vZGUgPSB0aGlzLnN0dWRlbnQgIT0gbnVsbCA/IHRoaXMuSU5ESVZJRFVBTCA6IHRoaXMuQUdHUkVHQVRFO1xuICAgIHRoaXMuc3VidGVzdE5hbWVzID0ge307XG4gICAgdGhpcy5iZW5jaG1hcmtTY29yZSA9IHt9O1xuICAgIHRoaXMucm93cyA9IFtdO1xuICAgIHRoaXMucGFydENvdW50ID0gMDtcbiAgICB0aGlzLmZsb3QgPSBudWxsO1xuICAgIHRoaXMubGFzdFBhcnQgPSBNYXRoLm1heC5hcHBseSh0aGlzLCBfLmNvbXBhY3QodGhpcy5zdWJ0ZXN0cy5wbHVjayhcInBhcnRcIikpKTtcbiAgICB0aGlzLnJlc3VsdHNCeVBhcnQgPSBbXTtcbiAgICB0aGlzLml0ZW1UeXBlTGlzdCA9IHt9O1xuICAgIHRoaXMuc2VsZWN0ZWQgPSB7XG4gICAgICBcIml0ZW1UeXBlXCI6IG51bGwsXG4gICAgICBcIndlZWtcIjogMFxuICAgIH07XG4gICAgcGFydHMgPSBbXTtcbiAgICByZWYgPSB0aGlzLnN1YnRlc3RzLm1vZGVscztcbiAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIHN1YnRlc3QgPSByZWZbal07XG4gICAgICBpZiAoIX5wYXJ0cy5pbmRleE9mKHN1YnRlc3QuZ2V0KFwicGFydFwiKSkpIHtcbiAgICAgICAgcGFydHMucHVzaChzdWJ0ZXN0LmdldChcInBhcnRcIikpO1xuICAgICAgfVxuICAgICAgaSA9IHBhcnRzLmluZGV4T2Yoc3VidGVzdC5nZXQoXCJwYXJ0XCIpKTtcbiAgICAgIGlmICh0aGlzLnN1YnRlc3ROYW1lc1tpXSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3VidGVzdE5hbWVzW2ldID0ge307XG4gICAgICB9XG4gICAgICB0aGlzLnN1YnRlc3ROYW1lc1tpXVtzdWJ0ZXN0LmdldChcIml0ZW1UeXBlXCIpXSA9IHN1YnRlc3QuZ2V0KFwibmFtZVwiKTtcbiAgICB9XG4gICAgdGhpcy5wYXJ0Q291bnQgPSBwYXJ0cy5sZW5ndGg7XG4gICAgc3VidGVzdHNCeVBhcnQgPSB0aGlzLnN1YnRlc3RzLmluZGV4QnkoXCJwYXJ0XCIpO1xuICAgIHBhcnRCeUluZGV4ID0gXy5rZXlzKHN1YnRlc3RzQnlQYXJ0KTtcbiAgICB0aGlzLmluZGV4QnlQYXJ0ID0gW107XG4gICAgZm9yIChpID0gayA9IDAsIGxlbjEgPSBwYXJ0QnlJbmRleC5sZW5ndGg7IGsgPCBsZW4xOyBpID0gKytrKSB7XG4gICAgICBwYXJ0ID0gcGFydEJ5SW5kZXhbaV07XG4gICAgICB0aGlzLmluZGV4QnlQYXJ0W3BhcnRdID0gaTtcbiAgICB9XG4gICAgdGhpcy5yZXN1bHRzQnlQYXJ0ID0gdGhpcy5yZXN1bHRzLmluZGV4QnkoXCJwYXJ0XCIpO1xuICAgIHJlZjEgPSB0aGlzLnJlc3VsdHMubW9kZWxzO1xuICAgIGZvciAobCA9IDAsIGxlbjIgPSByZWYxLmxlbmd0aDsgbCA8IGxlbjI7IGwrKykge1xuICAgICAgcmVzdWx0ID0gcmVmMVtsXTtcbiAgICAgIHRoaXMuaXRlbVR5cGVMaXN0W3Jlc3VsdC5nZXQoXCJpdGVtVHlwZVwiKS50b0xvd2VyQ2FzZSgpXSA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuaXRlbVR5cGVMaXN0ID0gXy5rZXlzKHRoaXMuaXRlbVR5cGVMaXN0KTtcbiAgICBmb3IgKHBhcnQgPSBtID0gMSwgcmVmMiA9IHRoaXMubGFzdFBhcnQ7IDEgPD0gcmVmMiA/IG0gPD0gcmVmMiA6IG0gPj0gcmVmMjsgcGFydCA9IDEgPD0gcmVmMiA/ICsrbSA6IC0tbSkge1xuICAgICAgaWYgKHRoaXMucmVzdWx0c0J5UGFydFtwYXJ0XSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaXRlbVR5cGVzID0ge307XG4gICAgICByZWYzID0gdGhpcy5yZXN1bHRzQnlQYXJ0W3BhcnRdO1xuICAgICAgZm9yIChpID0gbiA9IDAsIGxlbjMgPSByZWYzLmxlbmd0aDsgbiA8IGxlbjM7IGkgPSArK24pIHtcbiAgICAgICAgcmVzdWx0ID0gcmVmM1tpXTtcbiAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gdGhpcy5JTkRJVklEVUFMICYmIHJlc3VsdC5nZXQoXCJzdHVkZW50SWRcIikgIT09IHRoaXMuc3R1ZGVudC5pZCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW1UeXBlID0gcmVzdWx0LmdldChcIml0ZW1UeXBlXCIpO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZC5pdGVtVHlwZSA9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RlZC5pdGVtVHlwZSA9IGl0ZW1UeXBlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtVHlwZXNbaXRlbVR5cGVdID09IG51bGwpIHtcbiAgICAgICAgICBpdGVtVHlwZXNbaXRlbVR5cGVdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaXRlbVR5cGVzW2l0ZW1UeXBlXS5wdXNoKHtcbiAgICAgICAgICBcIm5hbWVcIjogaXRlbVR5cGUudGl0bGVpemUoKSxcbiAgICAgICAgICBcImtleVwiOiBpdGVtVHlwZSxcbiAgICAgICAgICBcInBhcnRcIjogcmVzdWx0LmdldChcInBhcnRcIiksXG4gICAgICAgICAgXCJjb3JyZWN0XCI6IHJlc3VsdC5nZXQoXCJjb3JyZWN0XCIpLFxuICAgICAgICAgIFwiYXR0ZW1wdGVkXCI6IHJlc3VsdC5nZXQoXCJhdHRlbXB0ZWRcIiksXG4gICAgICAgICAgXCJpdGVtc1Blck1pbnV0ZVwiOiByZXN1bHQuZ2V0Q29ycmVjdFBlclNlY29uZHMoNjApXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJlbmNobWFya1Njb3JlW2l0ZW1UeXBlXSA9IHRoaXMuc3VidGVzdHMuZ2V0KHJlc3VsdC5nZXQoXCJzdWJ0ZXN0SWRcIikpLmdldE51bWJlcihcInNjb3JlVGFyZ2V0XCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5yb3dzLnB1c2goe1xuICAgICAgICBcInBhcnRcIjogcGFydCxcbiAgICAgICAgXCJpdGVtVHlwZXNcIjogXy52YWx1ZXMoaXRlbVR5cGVzKVxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMucm93cyA9IHRoaXMuYWdncmVnYXRlKHRoaXMucm93cyk7XG4gICAgaWYgKHRoaXMucm93cy5sZW5ndGggIT09IDApIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSB7XG4gICAgICAgIHdlZWs6IHRoaXMuaW5kZXhCeVBhcnRbXy5sYXN0KHRoaXMucm93cylbJ3BhcnQnXV0sXG4gICAgICAgIGl0ZW1UeXBlOiBfLmxhc3QodGhpcy5yb3dzKVsnaXRlbVR5cGVzJ11bMF0ua2V5XG4gICAgICB9O1xuICAgIH1cbiAgICBwb2ludHNCeUl0ZW1UeXBlID0ge307XG4gICAgcmVmNCA9IHRoaXMucm93cztcbiAgICBmb3IgKGkgPSBvID0gMCwgbGVuNCA9IHJlZjQubGVuZ3RoOyBvIDwgbGVuNDsgaSA9ICsrbykge1xuICAgICAgcm93ID0gcmVmNFtpXTtcbiAgICAgIHJlZjUgPSByb3cuaXRlbVR5cGVzO1xuICAgICAgZm9yIChwID0gMCwgbGVuNSA9IHJlZjUubGVuZ3RoOyBwIDwgbGVuNTsgcCsrKSB7XG4gICAgICAgIGl0ZW1UeXBlID0gcmVmNVtwXTtcbiAgICAgICAgZ3JhcGhJbmRleCA9IHRoaXMuaW5kZXhCeVBhcnRbcm93LnBhcnRdICsgMTtcbiAgICAgICAgaWYgKHBvaW50c0J5SXRlbVR5cGVbaXRlbVR5cGUua2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgcG9pbnRzQnlJdGVtVHlwZVtpdGVtVHlwZS5rZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcG9pbnRzQnlJdGVtVHlwZVtpdGVtVHlwZS5rZXldLnB1c2goW2dyYXBoSW5kZXgsIGl0ZW1UeXBlLml0ZW1zUGVyTWludXRlXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZmxvdERhdGEgPSBbXTtcbiAgICB0aGlzLmJlbmNobWFya0RhdGEgPSBbXTtcbiAgICBpID0gMDtcbiAgICBmb3IgKG5hbWUgaW4gcG9pbnRzQnlJdGVtVHlwZSkge1xuICAgICAgZGF0YSA9IHBvaW50c0J5SXRlbVR5cGVbbmFtZV07XG4gICAgICBrZXkgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICB0aGlzLmZsb3REYXRhW2tleV0gPSB7XG4gICAgICAgIFwiZGF0YVwiOiBkYXRhLFxuICAgICAgICBcImxhYmVsXCI6IG5hbWUudGl0bGVpemUoKSxcbiAgICAgICAgXCJrZXlcIjoga2V5LFxuICAgICAgICBcImxpbmVzXCI6IHtcbiAgICAgICAgICBcInNob3dcIjogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBcInBvaW50c1wiOiB7XG4gICAgICAgICAgXCJzaG93XCI6IHRydWVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5mbG90QmVuY2htYXJrID0gW107XG4gICAgcmVmNiA9IHRoaXMuc3VidGVzdHMuaW5kZXhCeShcIml0ZW1UeXBlXCIpO1xuICAgIGZvciAoaXRlbVR5cGUgaW4gcmVmNikge1xuICAgICAgc3VidGVzdHMgPSByZWY2W2l0ZW1UeXBlXTtcbiAgICAgIGRhdGFGb3JCZW5jaG1hcmsgPSBbXTtcbiAgICAgIGZvciAoaSA9IHEgPSAwLCBsZW42ID0gc3VidGVzdHMubGVuZ3RoOyBxIDwgbGVuNjsgaSA9ICsrcSkge1xuICAgICAgICBzdWJ0ZXN0ID0gc3VidGVzdHNbaV07XG4gICAgICAgIGdyYXBoSW5kZXggPSB0aGlzLmluZGV4QnlQYXJ0W3N1YnRlc3QuZ2V0KFwicGFydFwiKV0gKyAxO1xuICAgICAgICBkYXRhRm9yQmVuY2htYXJrLnB1c2goW2dyYXBoSW5kZXgsIHN1YnRlc3QuZ2V0TnVtYmVyKFwic2NvcmVUYXJnZXRcIildKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZmxvdEJlbmNobWFya1tpdGVtVHlwZS50b0xvd2VyQ2FzZSgpXSA9IHtcbiAgICAgICAgXCJsYWJlbFwiOiBcIlByb2dyZXNzIGJlbmNobWFya1wiLFxuICAgICAgICBcImRhdGFcIjogZGF0YUZvckJlbmNobWFyayxcbiAgICAgICAgXCJjb2xvclwiOiBcIiNhYWFcIixcbiAgICAgICAgXCJsaW5lc1wiOiB7XG4gICAgICAgICAgXCJzaG93XCI6IHRydWVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy53YXJuaW5nVGhyZXNob2xkcyA9IHt9O1xuICAgIHJlZjcgPSB0aGlzLnN1YnRlc3RzLmluZGV4QnkoXCJpdGVtVHlwZVwiKTtcbiAgICBmb3IgKGl0ZW1UeXBlIGluIHJlZjcpIHtcbiAgICAgIHN1YnRlc3RzID0gcmVmN1tpdGVtVHlwZV07XG4gICAgICB0aGlzLndhcm5pbmdUaHJlc2hvbGRzW2l0ZW1UeXBlXSA9IFtdO1xuICAgICAgZm9yIChpID0gciA9IDAsIGxlbjcgPSBzdWJ0ZXN0cy5sZW5ndGg7IHIgPCBsZW43OyBpID0gKytyKSB7XG4gICAgICAgIHN1YnRlc3QgPSBzdWJ0ZXN0c1tpXTtcbiAgICAgICAgdGhpcy53YXJuaW5nVGhyZXNob2xkc1tpdGVtVHlwZS50b0xvd2VyQ2FzZSgpXVt0aGlzLmluZGV4QnlQYXJ0W3N1YnRlc3QuZ2V0KFwicGFydFwiKV1dID0ge1xuICAgICAgICAgIHRhcmdldDogc3VidGVzdC5nZXROdW1iZXIoXCJzY29yZVRhcmdldFwiKSxcbiAgICAgICAgICBzcHJlYWQ6IHN1YnRlc3QuZ2V0TnVtYmVyKFwic2NvcmVTcHJlYWRcIiksXG4gICAgICAgICAgc2Vjb25kczogc3VidGVzdC5nZXROdW1iZXIoXCJ0aW1lclwiKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlbmRlclJlYWR5ID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXIoKTtcbiAgfTtcblxuICBQcm9ncmVzc1ZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkd2luZG93LCBodG1sLCBodG1sV2FybmluZywgaiwga2V5LCBsYWJlbCwgbGVuLCByZWYsIHNlbGVjdGVkQ2xhc3MsIHN0dWRlbnROYW1lLCB3aW47XG4gICAgaWYgKCF0aGlzLnJlbmRlclJlYWR5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICR3aW5kb3cgPSAkKHdpbmRvdyk7XG4gICAgd2luID0ge1xuICAgICAgaDogJHdpbmRvdy5oZWlnaHQoKSxcbiAgICAgIHc6ICR3aW5kb3cud2lkdGgoKVxuICAgIH07XG4gICAgaWYgKHRoaXMubW9kZSA9PT0gdGhpcy5JTkRJVklEVUFMKSB7XG4gICAgICBzdHVkZW50TmFtZSA9IFwiPGgyPlwiICsgKHRoaXMuc3R1ZGVudC5nZXQoJ25hbWUnKSkgKyBcIjwvaDI+XCI7XG4gICAgfVxuICAgIGh0bWwgPSBcIjxoMT5Qcm9ncmVzcyB0YWJsZTwvaDE+IFwiICsgKHN0dWRlbnROYW1lIHx8IFwiXCIpO1xuICAgIGh0bWxXYXJuaW5nID0gXCI8cD5ObyB0ZXN0IGRhdGEgZm9yIHRoaXMgdHlwZSBvZiByZXBvcnQuIFJldHVybiB0byB0aGUgPGEgaHJlZj0nI2NsYXNzJz5jbGFzcyBtZW51PC9hPiBhbmQgY2xpY2sgdGhlIDxpbWcgc3JjPSdpbWFnZXMvaWNvbl9ydW4ucG5nJz4gaWNvbiB0byBjb2xsZWN0IGRhdGEuPC9wPlwiO1xuICAgIGlmICh0aGlzLnJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLiRlbC5odG1sKGh0bWwgKyBcIiBcIiArIGh0bWxXYXJuaW5nKTtcbiAgICAgIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBodG1sICs9IFwiPGRpdiBpZD0nZmxvdC1tZW51Jz5cIjtcbiAgICByZWYgPSBfLnVuaXEodGhpcy5zdWJ0ZXN0cy5wbHVjayhcIml0ZW1UeXBlXCIpKTtcbiAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgIGtleSA9IHJlZltqXTtcbiAgICAgIGxhYmVsID0ga2V5LnJlcGxhY2UoL1tfLV0vZywgXCIgXCIpLmNhcGl0YWxpemUoKTtcbiAgICAgIHNlbGVjdGVkQ2xhc3MgPSBrZXkgPT09IHRoaXMuc2VsZWN0ZWQuaXRlbVR5cGUgPyBcInNlbGVjdGVkXCIgOiBcIlwiO1xuICAgICAgaHRtbCArPSBcIjxidXR0b24gY2xhc3M9J2NvbW1hbmQgc2VsZWN0X2l0ZW1UeXBlIFwiICsgc2VsZWN0ZWRDbGFzcyArIFwiJyBkYXRhLWl0ZW1UeXBlPSdcIiArIGtleSArIFwiJz5cIiArIGxhYmVsICsgXCI8L2J1dHRvbj5cIjtcbiAgICB9XG4gICAgaHRtbCArPSBcIjwvZGl2PiA8ZGl2IGlkPSdmbG90LWNvbnRhaW5lcicgc3R5bGU9J3dpZHRoOiBcIiArICh3aW5kb3cudyAqIDAuOCkgKyBcInB4OyBoZWlnaHQ6MzAwcHg7Jz48L2Rpdj5cIjtcbiAgICBodG1sICs9IFwiPGRpdiBpZD0ndGFibGVfY29udGFpbmVyJz48L2Rpdj4gPGJ1dHRvbiBjbGFzcz0nbmF2aWdhdGlvbiBiYWNrJz5cIiArICh0KCdiYWNrJykpICsgXCI8L2J1dHRvbj5cIjtcbiAgICB0aGlzLiRlbC5odG1sKGh0bWwpO1xuICAgIHRoaXMudXBkYXRlVGFibGUoKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgUHJvZ3Jlc3NWaWV3LnByb3RvdHlwZS5hZnRlclJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZUZsb3QoKTtcbiAgfTtcblxuICBQcm9ncmVzc1ZpZXcucHJvdG90eXBlLnVwZGF0ZVRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGF2YWlsYWJsZUl0ZW1UeXBlc1RoaXNXZWVrLCBkYXRhLCBkYXR1bSwgZGlmZmVyZW5jZSwgaGlnaCwgaHRtbCwgaSwgaXRlbVR5cGUsIGosIGssIGwsIGxlbiwgbGVuMSwgbGVuMiwgbG93LCByZWYsIHJlZjEsIHJlZjIsIHJlc3VsdCwgcm93LCBzY29yZSwgdGhyZXNob2xkLCB0eXBlLCB3YXJuaW5ncywgd2VlaztcbiAgICB0eXBlID0gdGhpcy5zZWxlY3RlZC5pdGVtVHlwZTtcbiAgICB3ZWVrID0gdGhpcy5zZWxlY3RlZC53ZWVrO1xuICAgIGh0bWwgPSBcIjx0YWJsZSBjbGFzcz0ndGFidWxhcic+XCI7XG4gICAgcmVmID0gdGhpcy5yb3dzO1xuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICByb3cgPSByZWZbaV07XG4gICAgICBpZiAoIX5fLnBsdWNrKHJvdy5pdGVtVHlwZXMsIFwia2V5XCIpLmluZGV4T2YodHlwZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBodG1sICs9IFwiPHRyPjx0aD5cIiArIHRoaXMuc3VidGVzdE5hbWVzW2ldW3R5cGVdICsgXCI8L3RoPjwvdHI+PHRyPlwiO1xuICAgICAgcmVmMSA9IHJvdy5pdGVtVHlwZXM7XG4gICAgICBmb3IgKGsgPSAwLCBsZW4xID0gcmVmMS5sZW5ndGg7IGsgPCBsZW4xOyBrKyspIHtcbiAgICAgICAgaXRlbVR5cGUgPSByZWYxW2tdO1xuICAgICAgICBpZiAoaXRlbVR5cGUua2V5ICE9PSB0eXBlKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaHRtbCArPSBcIjx0cj4gPHRkPlwiICsgaXRlbVR5cGUubmFtZSArIFwiIGNvcnJlY3Q8L3RkPjx0ZD5cIiArIGl0ZW1UeXBlLmNvcnJlY3QgKyBcIi9cIiArIGl0ZW1UeXBlLmF0dGVtcHRlZCArIFwiPC90ZD4gPC90cj4gPHRyPiA8dGQ+XCIgKyBpdGVtVHlwZS5uYW1lICsgXCIgY29ycmVjdCBwZXIgbWludXRlPC90ZD48dGQ+XCIgKyBpdGVtVHlwZS5pdGVtc1Blck1pbnV0ZSArIFwiPC90ZD4gPC90cj5cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgaHRtbCArPSBcIjwvdGFibGU+XCI7XG4gICAgYXZhaWxhYmxlSXRlbVR5cGVzVGhpc1dlZWsgPSBfLnBsdWNrKChyZWYyID0gdGhpcy5yb3dzW3dlZWtdKSAhPSBudWxsID8gcmVmMi5pdGVtVHlwZXMgOiB2b2lkIDAsIFwia2V5XCIpO1xuICAgIGlmICh3ZWVrID49IHRoaXMucm93cy5sZW5ndGggfHwgIX5hdmFpbGFibGVJdGVtVHlwZXNUaGlzV2Vlay5pbmRleE9mKHR5cGUpKSB7XG4gICAgICBodG1sICs9IFwiPHNlY3Rpb24+Tm8gZGF0YSBmb3IgdGhpcyBhc3Nlc3NtZW50Ljwvc2VjdGlvbj5cIjtcbiAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gdGhpcy5BR0dSRUdBVEUpIHtcbiAgICAgIHNjb3JlID0gMDtcbiAgICAgIGRhdGEgPSB0aGlzLmZsb3REYXRhW3R5cGVdICE9IG51bGwgPyB0aGlzLmZsb3REYXRhW3R5cGVdLmRhdGEgOiBbXTtcbiAgICAgIGZvciAobCA9IDAsIGxlbjIgPSBkYXRhLmxlbmd0aDsgbCA8IGxlbjI7IGwrKykge1xuICAgICAgICBkYXR1bSA9IGRhdGFbbF07XG4gICAgICAgIGlmIChkYXR1bVswXSA9PT0gd2VlayArIDEpIHtcbiAgICAgICAgICBzY29yZSA9IGRhdHVtWzFdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aHJlc2hvbGQgPSB0aGlzLndhcm5pbmdUaHJlc2hvbGRzW3R5cGVdW3dlZWtdO1xuICAgICAgaGlnaCA9IHRocmVzaG9sZC50YXJnZXQgKyB0aHJlc2hvbGQuc3ByZWFkO1xuICAgICAgbG93ID0gdGhyZXNob2xkLnRhcmdldCAtIHRocmVzaG9sZC5zcHJlYWQ7XG4gICAgICBkaWZmZXJlbmNlID0gc2NvcmUgLSB0aHJlc2hvbGQudGFyZ2V0O1xuICAgICAgaWYgKHNjb3JlID4gaGlnaCkge1xuICAgICAgICByZXN1bHQgPSBcIihcIiArIHNjb3JlICsgXCIpLCBcIiArIGRpZmZlcmVuY2UgKyBcIiBjb3JyZWN0IGl0ZW1zIHBlciBtaW51dGUgYWJvdmUgdGhlIGJlbmNobWFya1wiO1xuICAgICAgICB3YXJuaW5ncyA9IFwiWW91ciBjbGFzcyBpcyBkb2luZyB3ZWxsLCBcIiArIHJlc3VsdCArIFwiLCBjb250aW51ZSB3aXRoIHRoZSByZWFkaW5nIHByb2dyYW0uIFNoYXJlIHlvdXIgYW5kIHlvdXIgY2xhc3PigJkgZ3JlYXQgd29yayB3aXRoIHBhcmVudHMuIFJld2FyZCB5b3VyIGNsYXNzIHdpdGggc29tZSBmdW4gcmVhZGluZyBhY3Rpdml0aWVzIHN1Y2ggYXMgcmVhZGluZyBtYXJhdGhvbnMgb3IgY29tcGV0aXRpb25zLiBIb3dldmVyLCBsb29rIGF0IGEgc3R1ZGVudCBncm91cGluZyByZXBvcnQgZm9yIHRoaXMgYXNzZXNzbWVudCBhbmQgbWFrZSBzdXJlIHRoYXQgdGhvc2UgY2hpbGRyZW4gcGVyZm9ybWluZyBiZWxvdyBhdmVyYWdlIGdldCBleHRyYSBhdHRlbnRpb24gYW5kIHByYWN0aWNlIGFuZCBkb27igJl0IGZhbGwgYmVoaW5kLlwiO1xuICAgICAgfSBlbHNlIGlmIChzY29yZSA8IGxvdykge1xuICAgICAgICByZXN1bHQgPSBcIihcIiArIHNjb3JlICsgXCIpLCBcIiArIChNYXRoLmFicyhkaWZmZXJlbmNlKSkgKyBcIiBjb3JyZWN0IGl0ZW1zIHBlciBtaW51dGUgYmVsb3cgdGhlIGJlbmNobWFya1wiO1xuICAgICAgICB3YXJuaW5ncyA9IFwiWW91ciBjbGFzcyBpcyBwZXJmb3JtaW5nIGJlbG93IHRoZSBncmFkZS1sZXZlbCB0YXJnZXQsIFwiICsgcmVzdWx0ICsgXCIuIFBsYW4gZm9yIGFkZGl0aW9uYWwgbGVzc29uIHRpbWUgZm9jdXNpbmcgb24gcmVhZGluZyBpbiBjb25zdWx0YXRpb24gd2l0aCB5b3VyIHByaW5jaXBhbC4gRW5jb3VyYWdlIHBhcmVudHMgdG8gc3BlbmQgbW9yZSB0aW1lIHdpdGggcmVhZGluZyBtYXRlcmlhbHMgYXQgaG9tZSDigJMgcmVtaW5kIHRoZW0gdGhhdCB5b3UgYXJlIGEgdGVhbSB3b3JraW5nIHRvZ2V0aGVyIHRvIGhlbHAgdGhlaXIgY2hpbGRyZW4gbGVhcm5pbmcgdG8gcmVhZC4gVGhpbmsgYWJvdXQgb3JnYW5pemluZyBvdGhlciBldmVudHMgYW5kIG9wcG9ydHVuaXRpZXMgZm9yIHByYWN0aWNlLCBlLmcuLCByZWFkaW5nIG1hcmF0aG9ucyBvciBjb21wZXRpdGlvbnMgdG8gbW90aXZhdGUgc3R1ZGVudHMgdG8gcmVhZCBtb3JlLlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGRpZmZlcmVuY2UgIT09IDAgJiYgZGlmZmVyZW5jZSAqIC0xID09PSBNYXRoLmFicyhkaWZmZXJlbmNlKSkge1xuICAgICAgICAgIHJlc3VsdCA9IChzY29yZSAtIHRocmVzaG9sZC50YXJnZXQpICsgXCIgY29ycmVjdCBpdGVtcyBwZXIgbWludXRlIGFib3ZlIHRoZSBiZW5jaCBtYXJrXCI7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlmZmVyZW5jZSA9PT0gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IHNjb3JlICsgXCIgY29ycmVjdCBpdGVtcyBwZXIgbWludXRlXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gKFwiKFwiICsgc2NvcmUgKyBcIiksIFwiKSArIE1hdGguYWJzKHNjb3JlIC0gdGhyZXNob2xkLnRhcmdldCkgKyBcIiBjb3JyZWN0IGl0ZW1zIHBlciBtaW51dGUgYmVsb3cgdGhlIGJlbmNoIG1hcmtcIjtcbiAgICAgICAgfVxuICAgICAgICB3YXJuaW5ncyA9IFwiWW91ciBjbGFzcyBpcyBpbiBsaW5lIHdpdGggZXhwZWN0YXRpb25zLCBcIiArIHJlc3VsdCArIFwiLiBDb250aW51ZSB3aXRoIHRoZSByZWFkaW5nIHByb2dyYW0gYW5kIGtlZXAgdXAgdGhlIGdvb2Qgd29yayEgTG9vayBhdCBhIHN0dWRlbnQgZ3JvdXBpbmcgcmVwb3J0IGZvciB0aGlzIGFzc2Vzc21lbnQgYW5kIG1ha2Ugc3VyZSB0aGF0IHRob3NlIGNoaWxkcmVuIHBlcmZvcm1pbmcgYmVsb3cgYXZlcmFnZSBnZXQgZXh0cmEgYXR0ZW50aW9uIGFuZCBwcmFjdGljZSBhbmQgZG9u4oCZdCBmYWxsIGJlaGluZC5cIjtcbiAgICAgIH1cbiAgICAgIGh0bWwgKz0gXCI8c2VjdGlvbj4gXCIgKyB3YXJuaW5ncyArIFwiIDwvc2VjdGlvbj5cIjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjdGFibGVfY29udGFpbmVyXCIpLmh0bWwoaHRtbCk7XG4gIH07XG5cbiAgUHJvZ3Jlc3NWaWV3LnByb3RvdHlwZS51cGRhdGVGbG90ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRpc3BsYXlEYXRhLCBpO1xuICAgIHRoaXMuZmxvdE9wdGlvbnMgPSB7XG4gICAgICBcInhheGlzXCI6IHtcbiAgICAgICAgXCJtaW5cIjogMC41LFxuICAgICAgICBcIm1heFwiOiB0aGlzLnBhcnRDb3VudCArIDAuNSxcbiAgICAgICAgXCJ0aWNrc1wiOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGosIHJlZiwgcmVzdWx0czE7XG4gICAgICAgICAgcmVzdWx0czEgPSBbXTtcbiAgICAgICAgICBmb3IgKGkgPSBqID0gMSwgcmVmID0gdGhpcy5wYXJ0Q291bnQ7IDEgPD0gcmVmID8gaiA8PSByZWYgOiBqID49IHJlZjsgaSA9IDEgPD0gcmVmID8gKytqIDogLS1qKSB7XG4gICAgICAgICAgICByZXN1bHRzMS5wdXNoKFN0cmluZyhpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHRzMTtcbiAgICAgICAgfSkuY2FsbCh0aGlzKSxcbiAgICAgICAgXCJ0aWNrRGVjaW1hbHNcIjogMCxcbiAgICAgICAgXCJ0aWNrRm9ybWF0dGVyXCI6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihudW0pIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5zdWJ0ZXN0TmFtZXNbbnVtIC0gMV1bX3RoaXMuc2VsZWN0ZWQuaXRlbVR5cGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFwiPGJ1dHRvbiBjbGFzcz0neHRpY2sgXCIgKyAobnVtIC0gMSA9PT0gX3RoaXMuc2VsZWN0ZWQud2VlayA/ICdzZWxlY3RlZCcgOiAnJykgKyBcIicgZGF0YS1pbmRleD0nXCIgKyAobnVtIC0gMSkgKyBcIic+XCIgKyBfdGhpcy5zdWJ0ZXN0TmFtZXNbbnVtIC0gMV1bX3RoaXMuc2VsZWN0ZWQuaXRlbVR5cGVdICsgXCI8L2J1dHRvbj5cIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICB9LFxuICAgICAgXCJncmlkXCI6IHtcbiAgICAgICAgXCJtYXJraW5nc1wiOiB7XG4gICAgICAgICAgXCJjb2xvclwiOiBcIiNmZmNcIixcbiAgICAgICAgICBcInhheGlzXCI6IHtcbiAgICAgICAgICAgIFwidG9cIjogdGhpcy5zZWxlY3RlZC53ZWVrICsgMC41LFxuICAgICAgICAgICAgXCJmcm9tXCI6IHRoaXMuc2VsZWN0ZWQud2VlayAtIDAuNVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgZGlzcGxheURhdGEgPSBbXTtcbiAgICBpZiAodGhpcy5mbG90RGF0YVt0aGlzLnNlbGVjdGVkLml0ZW1UeXBlXSkge1xuICAgICAgZGlzcGxheURhdGEucHVzaCh0aGlzLmZsb3REYXRhW3RoaXMuc2VsZWN0ZWQuaXRlbVR5cGVdKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZmxvdEJlbmNobWFya1t0aGlzLnNlbGVjdGVkLml0ZW1UeXBlXSkge1xuICAgICAgZGlzcGxheURhdGEucHVzaCh0aGlzLmZsb3RCZW5jaG1hcmtbdGhpcy5zZWxlY3RlZC5pdGVtVHlwZV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mbG90ID0gJC5wbG90KHRoaXMuJGVsLmZpbmQoXCIjZmxvdC1jb250YWluZXJcIiksIGRpc3BsYXlEYXRhLCB0aGlzLmZsb3RPcHRpb25zKTtcbiAgfTtcblxuICBQcm9ncmVzc1ZpZXcucHJvdG90eXBlLmFnZ3JlZ2F0ZSA9IGZ1bmN0aW9uKG9sZFJvd3MpIHtcbiAgICB2YXIgaSwgaiwgaywgbCwgbGVuLCBsZW4xLCBsZW4yLCBtZWFuLCBuZXdSb3dzLCByZWYsIHJlc3VsdCwgcmVzdWx0cywgcm93O1xuICAgIG5ld1Jvd3MgPSBbXTtcbiAgICBmb3IgKGkgPSBqID0gMCwgbGVuID0gb2xkUm93cy5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgIHJvdyA9IG9sZFJvd3NbaV07XG4gICAgICBuZXdSb3dzW2ldID0ge1xuICAgICAgICBcInBhcnRcIjogcm93LnBhcnQsXG4gICAgICAgIFwiaXRlbVR5cGVzXCI6IFtdXG4gICAgICB9O1xuICAgICAgcmVmID0gcm93Lml0ZW1UeXBlcztcbiAgICAgIGZvciAoayA9IDAsIGxlbjEgPSByZWYubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgIHJlc3VsdHMgPSByZWZba107XG4gICAgICAgIG1lYW4gPSB7XG4gICAgICAgICAgXCJuYW1lXCI6IFwiXCIsXG4gICAgICAgICAgXCJrZXlcIjogXCJcIixcbiAgICAgICAgICBcImNvcnJlY3RcIjogMCxcbiAgICAgICAgICBcImF0dGVtcHRlZFwiOiAwLFxuICAgICAgICAgIFwiaXRlbXNQZXJNaW51dGVcIjogMFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGwgPSAwLCBsZW4yID0gcmVzdWx0cy5sZW5ndGg7IGwgPCBsZW4yOyBsKyspIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHRzW2xdO1xuICAgICAgICAgIG1lYW4ubmFtZSA9IHJlc3VsdC5uYW1lO1xuICAgICAgICAgIG1lYW4ua2V5ID0gcmVzdWx0LmtleTtcbiAgICAgICAgICBtZWFuLmNvcnJlY3QgKz0gcmVzdWx0LmNvcnJlY3Q7XG4gICAgICAgICAgbWVhbi5hdHRlbXB0ZWQgKz0gcmVzdWx0LmF0dGVtcHRlZDtcbiAgICAgICAgICBtZWFuLml0ZW1zUGVyTWludXRlICs9IHJlc3VsdC5pdGVtc1Blck1pbnV0ZTtcbiAgICAgICAgfVxuICAgICAgICBtZWFuLmNvcnJlY3QgLz0gcmVzdWx0cy5sZW5ndGg7XG4gICAgICAgIG1lYW4uYXR0ZW1wdGVkIC89IHJlc3VsdHMubGVuZ3RoO1xuICAgICAgICBtZWFuLml0ZW1zUGVyTWludXRlIC89IHJlc3VsdHMubGVuZ3RoO1xuICAgICAgICBtZWFuLmNvcnJlY3QgPSBNYXRoLnJvdW5kKG1lYW4uY29ycmVjdCk7XG4gICAgICAgIG1lYW4uYXR0ZW1wdGVkID0gTWF0aC5yb3VuZChtZWFuLmF0dGVtcHRlZCk7XG4gICAgICAgIG1lYW4uaXRlbXNQZXJNaW51dGUgPSBNYXRoLnJvdW5kKG1lYW4uaXRlbXNQZXJNaW51dGUpO1xuICAgICAgICBuZXdSb3dzW2ldLml0ZW1UeXBlcy5wdXNoKG1lYW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3Um93cztcbiAgfTtcblxuICByZXR1cm4gUHJvZ3Jlc3NWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuU29ydGVkQ29sbGVjdGlvbiA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gU29ydGVkQ29sbGVjdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5zb3J0ZWQgPSBbXTtcbiAgICB0aGlzLm1vZGVscyA9IG9wdGlvbnMubW9kZWxzO1xuICAgIHRoaXMuYXR0cmlidXRlID0gb3B0aW9ucy5hdHRyaWJ1dGU7XG4gIH1cblxuICByZXR1cm4gU29ydGVkQ29sbGVjdGlvbjtcblxufSkoKTtcblxuIiwiY2xhc3MgUHJvZ3Jlc3NNZW51VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIlByb2dyZXNzTWVudVZpZXdcIlxuXG4gIGV2ZW50czpcbiAgICAnY2hhbmdlIC5zdHVkZW50X3NlbGVjdG9yJyA6ICdnb3RvUHJvZ3Jlc3NUYWJsZSdcblxuICBnb3RvUHJvZ3Jlc3NUYWJsZTogKGV2ZW50KSAtPlxuICAgIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJyZXBvcnQvcHJvZ3Jlc3MvXCIgKyBAJGVsLmZpbmQoZXZlbnQudGFyZ2V0KS5maW5kKFwiOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLXN0dWRlbnRJZFwiKSArIFwiLyN7QGtsYXNzLmlkfVwiLCB0cnVlXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgICBAcGFyZW50ICAgID0gb3B0aW9ucy5wYXJlbnRcblxuICAgIEBrbGFzcyAgICAgPSBAcGFyZW50Lm9wdGlvbnMua2xhc3NcbiAgICBAY3VycmljdWxhID0gQHBhcmVudC5vcHRpb25zLmN1cnJpY3VsYVxuXG4gICAgYWxsU3R1ZGVudHMgPSBuZXcgU3R1ZGVudHNcbiAgICBhbGxTdHVkZW50cy5mZXRjaFxuICAgICAgc3VjY2VzczogKGNvbGxlY3Rpb24pID0+XG4gICAgICAgIEBzdHVkZW50cyA9IGNvbGxlY3Rpb24ud2hlcmUgXG4gICAgICAgICAga2xhc3NJZCA6IEBrbGFzcy5pZFxuICAgICAgICBAcmVhZHkgPSB0cnVlXG4gICAgICAgIEByZW5kZXIoKVxuXG4gIHJlbmRlcjogLT5cblxuICAgIGlmIEByZWFkeVxuXG4gICAgICAjIHF1aWNrIGRhdGEgY2hlY2tcbiAgICAgIGlmIEBzdHVkZW50cy5sZW5ndGggPT0gMFxuICAgICAgICBAJGVsLmh0bWwgXCJQbGVhc2UgYWRkIHN0dWRlbnRzIHRvIHRoaXMgY2xhc3MuXCJcbiAgICAgICAgcmV0dXJuXG5cbiAgICAgIGh0bWwgPSBcIlxuICAgICAgICA8c2VsZWN0IGNsYXNzPSdzdHVkZW50X3NlbGVjdG9yJz5cbiAgICAgICAgICA8b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz4je3QoJ3NlbGVjdCBhIHN0dWRlbnQnKX08L29wdGlvbj5cbiAgICAgICAgICA8b3B0aW9uIGRhdGEtc3R1ZGVudElkPSdhbGwnPiN7dChcImFsbCBzdHVkZW50c1wiKX08L29wdGlvbj5cbiAgICAgIFwiXG5cbiAgICAgIGZvciBzdHVkZW50IGluIEBzdHVkZW50c1xuICAgICAgICBodG1sICs9IFwiPG9wdGlvbiBkYXRhLXN0dWRlbnRJZD0nI3tzdHVkZW50LmlkfSc+I3tzdHVkZW50LmdldCgnbmFtZScpfTwvb3B0aW9uPlwiXG4gICAgICBodG1sICs9IFwiPC9zZWxlY3Q+XCJcbiAgICAgICAgICBcbiAgICAgIEAkZWwuaHRtbCBodG1sXG4gICAgZWxzZVxuICAgICAgQCRlbC5odG1sIFwiPGltZyBzcmM9J2ltYWdlcy9sb2FkaW5nLmdpZicgY2xhc3M9J2xvYWRpbmcnPlwiXG4iLCJ2YXIgUHJvZ3Jlc3NNZW51VmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblByb2dyZXNzTWVudVZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoUHJvZ3Jlc3NNZW51Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gUHJvZ3Jlc3NNZW51VmlldygpIHtcbiAgICByZXR1cm4gUHJvZ3Jlc3NNZW51Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFByb2dyZXNzTWVudVZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiUHJvZ3Jlc3NNZW51Vmlld1wiO1xuXG4gIFByb2dyZXNzTWVudVZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICAnY2hhbmdlIC5zdHVkZW50X3NlbGVjdG9yJzogJ2dvdG9Qcm9ncmVzc1RhYmxlJ1xuICB9O1xuXG4gIFByb2dyZXNzTWVudVZpZXcucHJvdG90eXBlLmdvdG9Qcm9ncmVzc1RhYmxlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcInJlcG9ydC9wcm9ncmVzcy9cIiArIHRoaXMuJGVsLmZpbmQoZXZlbnQudGFyZ2V0KS5maW5kKFwiOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLXN0dWRlbnRJZFwiKSArIChcIi9cIiArIHRoaXMua2xhc3MuaWQpLCB0cnVlKTtcbiAgfTtcblxuICBQcm9ncmVzc01lbnVWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBhbGxTdHVkZW50cztcbiAgICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICAgIHRoaXMua2xhc3MgPSB0aGlzLnBhcmVudC5vcHRpb25zLmtsYXNzO1xuICAgIHRoaXMuY3VycmljdWxhID0gdGhpcy5wYXJlbnQub3B0aW9ucy5jdXJyaWN1bGE7XG4gICAgYWxsU3R1ZGVudHMgPSBuZXcgU3R1ZGVudHM7XG4gICAgcmV0dXJuIGFsbFN0dWRlbnRzLmZldGNoKHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oY29sbGVjdGlvbikge1xuICAgICAgICAgIF90aGlzLnN0dWRlbnRzID0gY29sbGVjdGlvbi53aGVyZSh7XG4gICAgICAgICAgICBrbGFzc0lkOiBfdGhpcy5rbGFzcy5pZFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIF90aGlzLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyKCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFByb2dyZXNzTWVudVZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBodG1sLCBpLCBsZW4sIHJlZiwgc3R1ZGVudDtcbiAgICBpZiAodGhpcy5yZWFkeSkge1xuICAgICAgaWYgKHRoaXMuc3R1ZGVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuJGVsLmh0bWwoXCJQbGVhc2UgYWRkIHN0dWRlbnRzIHRvIHRoaXMgY2xhc3MuXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBodG1sID0gXCI8c2VsZWN0IGNsYXNzPSdzdHVkZW50X3NlbGVjdG9yJz4gPG9wdGlvbiBkaXNhYmxlZD0nZGlzYWJsZWQnIHNlbGVjdGVkPSdzZWxlY3RlZCc+XCIgKyAodCgnc2VsZWN0IGEgc3R1ZGVudCcpKSArIFwiPC9vcHRpb24+IDxvcHRpb24gZGF0YS1zdHVkZW50SWQ9J2FsbCc+XCIgKyAodChcImFsbCBzdHVkZW50c1wiKSkgKyBcIjwvb3B0aW9uPlwiO1xuICAgICAgcmVmID0gdGhpcy5zdHVkZW50cztcbiAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzdHVkZW50ID0gcmVmW2ldO1xuICAgICAgICBodG1sICs9IFwiPG9wdGlvbiBkYXRhLXN0dWRlbnRJZD0nXCIgKyBzdHVkZW50LmlkICsgXCInPlwiICsgKHN0dWRlbnQuZ2V0KCduYW1lJykpICsgXCI8L29wdGlvbj5cIjtcbiAgICAgIH1cbiAgICAgIGh0bWwgKz0gXCI8L3NlbGVjdD5cIjtcbiAgICAgIHJldHVybiB0aGlzLiRlbC5odG1sKGh0bWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuaHRtbChcIjxpbWcgc3JjPSdpbWFnZXMvbG9hZGluZy5naWYnIGNsYXNzPSdsb2FkaW5nJz5cIik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBQcm9ncmVzc01lbnVWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgQ3N2TWVudVZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJDc3ZNZW51Vmlld1wiXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAga2xhc3NJZCAgID0gb3B0aW9ucy5wYXJlbnQub3B0aW9ucy5rbGFzcy5pZFxuICAgIGdyb3VwTmFtZSA9IFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJncm91cE5hbWVcIilcbiAgICBkb2N1bWVudC5sb2NhdGlvbiA9IFwiaHR0cDovL2RhdGFiYXNlcy50YW5nZXJpbmVjZW50cmFsLm9yZy9fY3N2L2NsYXNzLyN7Z3JvdXBOYW1lfS8je2tsYXNzSWR9XCJcbiIsInZhciBDc3ZNZW51VmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkNzdk1lbnVWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKENzdk1lbnVWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBDc3ZNZW51VmlldygpIHtcbiAgICByZXR1cm4gQ3N2TWVudVZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBDc3ZNZW51Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJDc3ZNZW51Vmlld1wiO1xuXG4gIENzdk1lbnVWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBncm91cE5hbWUsIGtsYXNzSWQ7XG4gICAga2xhc3NJZCA9IG9wdGlvbnMucGFyZW50Lm9wdGlvbnMua2xhc3MuaWQ7XG4gICAgZ3JvdXBOYW1lID0gVGFuZ2VyaW5lLnNldHRpbmdzLmdldChcImdyb3VwTmFtZVwiKTtcbiAgICByZXR1cm4gZG9jdW1lbnQubG9jYXRpb24gPSBcImh0dHA6Ly9kYXRhYmFzZXMudGFuZ2VyaW5lY2VudHJhbC5vcmcvX2Nzdi9jbGFzcy9cIiArIGdyb3VwTmFtZSArIFwiL1wiICsga2xhc3NJZDtcbiAgfTtcblxuICByZXR1cm4gQ3N2TWVudVZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBDdXJyaWN1bHVtIGV4dGVuZHMgQmFja2JvbmUuTW9kZWxcblxuICB1cmwgOiBcImN1cnJpY3VsdW1cIlxuXG4gIGlzQXJjaGl2ZWQ6IC0+IGZhbHNlXG5cbiAgdXBkYXRlRnJvbVNlcnZlcjogKCBkS2V5ID0gQGlkLnN1YnN0cigtNSw1KSkgPT5cblxuICAgICMgc3BsaXQgdG8gaGFuZGxlIG11bHRpcGxlIGRrZXlzXG4gICAgZEtleXMgPSBKU09OLnN0cmluZ2lmeShkS2V5LnJlcGxhY2UoL1teYS1mMC05XS9nLFwiIFwiKS5zcGxpdCgvXFxzKy8pKVxuXG4gICAgQHRyaWdnZXIgXCJzdGF0dXNcIiwgXCJpbXBvcnQgbG9va3VwXCJcblxuICAgICQuYWpheCBUYW5nZXJpbmUuc2V0dGluZ3MudXJsVmlldyhcImdyb3VwXCIsIFwiYnlES2V5XCIpLFxuICAgICAgdHlwZTogXCJQT1NUXCJcbiAgICAgIGRhdGFUeXBlOiBcImpzb25wXCJcbiAgICAgIGRhdGE6IGtleXM6IGRLZXlzXG4gICAgICBzdWNjZXNzOiAoZGF0YSkgPT5cbiAgICAgICAgZG9jTGlzdCA9IFtdXG4gICAgICAgIGZvciBkYXR1bSBpbiBkYXRhLnJvd3NcbiAgICAgICAgICBkb2NMaXN0LnB1c2ggZGF0dW0uaWRcbiAgICAgICAgJC5jb3VjaC5yZXBsaWNhdGUoXG4gICAgICAgICAgVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKFwiZ3JvdXBcIiksXG4gICAgICAgICAgVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKFwibG9jYWxcIiksXG4gICAgICAgICAgICBzdWNjZXNzOiAgICAgID0+IEB0cmlnZ2VyIFwic3RhdHVzXCIsIFwiaW1wb3J0IHN1Y2Nlc3NcIlxuICAgICAgICAgICAgZXJyb3I6IChhLCBiKSA9PiBAdHJpZ2dlciBcInN0YXR1c1wiLCBcImltcG9ydCBlcnJvclwiLCBcIiN7YX0gI3tifVwiXG4gICAgICAgICAgLFxuICAgICAgICAgICAgZG9jX2lkczogZG9jTGlzdFxuICAgICAgICApXG5cbiAgICBmYWxzZVxuXG5cbiAgZHVwbGljYXRlOiAoYXNzZXNzbWVudEF0dHJpYnV0ZXMsIHN1YnRlc3RBdHRyaWJ1dGVzLCBxdWVzdGlvbkF0dHJpYnV0ZXMsIGNhbGxiYWNrKSAtPlxuXG4gICAgb3JpZ2luYWxJZCA9IEBpZFxuXG4gICAgbmV3TW9kZWwgPSBAY2xvbmUoKVxuICAgIG5ld01vZGVsLnNldCBhc3Nlc3NtZW50QXR0cmlidXRlc1xuICAgIG5ld0lkID0gVXRpbHMuZ3VpZCgpXG5cbiAgICBuZXdNb2RlbC5zYXZlXG4gICAgICBcIl9pZFwiICAgICAgICAgIDogbmV3SWRcbiAgICAgIFwiY3VycmljdWx1bUlkXCIgOiBuZXdJZFxuICAgICxcbiAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgIHF1ZXN0aW9ucyA9IG5ldyBRdWVzdGlvbnNcbiAgICAgICAgcXVlc3Rpb25zLmZldGNoXG4gICAgICAgICAga2V5OiBvcmlnaW5hbElkXG4gICAgICAgICAgc3VjY2VzczogKCBxdWVzdGlvbnMgKSA9PlxuICAgICAgICAgICAgc3VidGVzdHMgPSBuZXcgU3VidGVzdHNcbiAgICAgICAgICAgIHN1YnRlc3RzLmZldGNoXG4gICAgICAgICAgICAgIGtleTogb3JpZ2luYWxJZFxuICAgICAgICAgICAgICBzdWNjZXNzOiAoIHN1YnRlc3RzICkgPT5cbiAgICAgICAgICAgICAgICBmaWx0ZXJlZFN1YnRlc3RzID0gc3VidGVzdHMubW9kZWxzXG4gICAgICAgICAgICAgICAgc3VidGVzdElkTWFwID0ge31cbiAgICAgICAgICAgICAgICBuZXdTdWJ0ZXN0cyA9IFtdXG4gICAgICAgICAgICAgICAgIyBsaW5rIG5ldyBzdWJ0ZXN0cyB0byBuZXcgYXNzZXNzbWVudFxuICAgICAgICAgICAgICAgIGZvciBtb2RlbCwgaSBpbiBmaWx0ZXJlZFN1YnRlc3RzXG4gICAgICAgICAgICAgICAgICBuZXdTdWJ0ZXN0ID0gbW9kZWwuY2xvbmUoKVxuICAgICAgICAgICAgICAgICAgbmV3U3VidGVzdC5zZXQgXCJjdXJyaWN1bHVtSWRcIiwgbmV3TW9kZWwuaWRcbiAgICAgICAgICAgICAgICAgIG5ld1N1YnRlc3RJZCA9IFV0aWxzLmd1aWQoKVxuICAgICAgICAgICAgICAgICAgc3VidGVzdElkTWFwW25ld1N1YnRlc3QuaWRdID0gbmV3U3VidGVzdElkXG4gICAgICAgICAgICAgICAgICBuZXdTdWJ0ZXN0LnNldCBcIl9pZFwiLCBuZXdTdWJ0ZXN0SWRcbiAgICAgICAgICAgICAgICAgIG5ld1N1YnRlc3RzLnB1c2ggbmV3U3VidGVzdFxuXG5cbiAgICAgICAgICAgICAgICAjIHVwZGF0ZSB0aGUgbGlua3MgdG8gb3RoZXIgc3VidGVzdHNcbiAgICAgICAgICAgICAgICBmb3IgbW9kZWwsIGkgaW4gbmV3U3VidGVzdHNcbiAgICAgICAgICAgICAgICAgIGdyaWRJZCA9IG1vZGVsLmdldCggXCJncmlkTGlua0lkXCIgKVxuICAgICAgICAgICAgICAgICAgaWYgKCBncmlkSWQgfHwgXCJcIiApICE9IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2V0IFwiZ3JpZExpbmtJZFwiLCBzdWJ0ZXN0SWRNYXBbZ3JpZElkXVxuICAgICAgICAgICAgICAgICAgbW9kZWwuc2F2ZSgpXG5cbiAgICAgICAgICAgICAgICBuZXdRdWVzdGlvbnMgPSBbXVxuICAgICAgICAgICAgICAgICMgbGluayBxdWVzdGlvbnMgdG8gbmV3IHN1YnRlc3RcbiAgICAgICAgICAgICAgICBmb3IgcXVlc3Rpb24gaW4gcXVlc3Rpb25zLm1vZGVsc1xuICAgICAgICAgICAgICAgICAgbmV3UXVlc3Rpb24gPSBxdWVzdGlvbi5jbG9uZSgpXG4gICAgICAgICAgICAgICAgICBvbGRJZCA9IG5ld1F1ZXN0aW9uLmdldCBcInN1YnRlc3RJZFwiXG4gICAgICAgICAgICAgICAgICBuZXdRdWVzdGlvbi5zZXQgXCJjdXJyaWN1bHVtSWRcIiwgbmV3TW9kZWwuaWRcbiAgICAgICAgICAgICAgICAgIG5ld1F1ZXN0aW9uLnNldCBcIl9pZFwiLCBVdGlscy5ndWlkKCkgXG4gICAgICAgICAgICAgICAgICBuZXdRdWVzdGlvbi5zZXQgXCJzdWJ0ZXN0SWRcIiwgc3VidGVzdElkTWFwW29sZElkXVxuICAgICAgICAgICAgICAgICAgbmV3UXVlc3Rpb25zLnB1c2ggbmV3UXVlc3Rpb25cbiAgICAgICAgICAgICAgICAgIG5ld1F1ZXN0aW9uLnNhdmUoKVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrIG5ld01vZGVsXG5cblxuICBkZXN0cm95OiAoY2FsbGJhY2spIC0+XG5cbiAgICAjIHJlbW92ZSBjaGlsZHJlblxuICAgIGN1cnJpY3VsdW1JZCA9IEBpZFxuICAgIHN1YnRlc3RzID0gbmV3IFN1YnRlc3RzXG4gICAgc3VidGVzdHMuZmV0Y2hcbiAgICAgIGtleTogY3VycmljdWx1bUlkXG4gICAgICBzdWNjZXNzOiAoY29sbGVjdGlvbikgLT4gY29sbGVjdGlvbi5wb3AoKS5kZXN0cm95KCkgd2hpbGUgY29sbGVjdGlvbi5sZW5ndGggIT0gMFxuXG4gICAgIyByZW1vdmUgbW9kZWxcbiAgICBzdXBlclxuICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgY2FsbGJhY2soKVxuXG5cbiAgZGVzdHJveTogPT5cblxuICAgICMgZ2V0IGFsbCBkb2NzIHRoYXQgYmVsb25nIHRvIHRoaXMgYXNzZXNzc21lbnQgZXhjZXB0IHJlc3VsdHNcbiAgICBUYW5nZXJpbmUuJGRiLnZpZXcgVGFuZ2VyaW5lLmRlc2lnbl9kb2MgKyBcIi9yZXZCeUFzc2Vzc21lbnRJZFwiLFxuICAgICAga2V5czpbIEBpZCBdXG4gICAgICBlcnJvcjogLT5cbiAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJEZWxldGUgZXJyb3IuXCJcbiAgICAgIHN1Y2Nlc3M6IChyZXNwb25zZSkgPT5cbiAgICAgICAgZG9jcyA9IFtdXG4gICAgICAgIGZvciByb3cgaW4gcmVzcG9uc2Uucm93c1xuICAgICAgICAgICMgb25seSBhYnNvbHV0ZWx5IG5lY2Vzc2FyeSBwcm9wZXJ0aWVzIGFyZSBzZW50IGJhY2ssIF9pZCwgX3JldiwgX2RlbGV0ZWRcbiAgICAgICAgICByb3cudmFsdWVbXCJfZGVsZXRlZFwiXSA9IHRydWVcbiAgICAgICAgICByb3cudmFsdWVbXCJkZWxldGVkQXRcIl0gPSBUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0KFwiY29udGV4dFwiKVxuICAgICAgICAgIGRvY3MucHVzaCByb3cudmFsdWVcblxuICAgICAgICByZXF1ZXN0RGF0YSA9IFxuICAgICAgICAgIFwiZG9jc1wiIDogZG9jc1xuXG4gICAgICAgICQuYWpheFxuICAgICAgICAgIHR5cGU6IFwiUE9TVFwiXG4gICAgICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOFwiXG4gICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiXG4gICAgICAgICAgdXJsOiBUYW5nZXJpbmUuc2V0dGluZ3MudXJsQnVsa0RvY3MoKVxuICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3REYXRhKVxuICAgICAgICAgIGVycm9yOiAtPlxuICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJEZWxldGUgZXJyb3IuXCJcbiAgICAgICAgICBzdWNjZXNzOiAocmVzcG9uc2VzKSA9PlxuICAgICAgICAgICAgb2tDb3VudCA9IDBcbiAgICAgICAgICAgIChva0NvdW50KysgaWYgcmVzcC5vaz8pIGZvciByZXNwIGluIHJlc3BvbnNlc1xuICAgICAgICAgICAgaWYgb2tDb3VudCA9PSByZXNwb25zZXMubGVuZ3RoXG4gICAgICAgICAgICAgIEBjb2xsZWN0aW9uLnJlbW92ZSBAaWRcbiAgICAgICAgICAgICAgQGNsZWFyKClcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJEZWxldGUgZXJyb3IuXCJcblxuIiwidmFyIEN1cnJpY3VsdW0sXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuQ3VycmljdWx1bSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChDdXJyaWN1bHVtLCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBDdXJyaWN1bHVtKCkge1xuICAgIHRoaXMuZGVzdHJveSA9IGJpbmQodGhpcy5kZXN0cm95LCB0aGlzKTtcbiAgICB0aGlzLnVwZGF0ZUZyb21TZXJ2ZXIgPSBiaW5kKHRoaXMudXBkYXRlRnJvbVNlcnZlciwgdGhpcyk7XG4gICAgcmV0dXJuIEN1cnJpY3VsdW0uX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBDdXJyaWN1bHVtLnByb3RvdHlwZS51cmwgPSBcImN1cnJpY3VsdW1cIjtcblxuICBDdXJyaWN1bHVtLnByb3RvdHlwZS5pc0FyY2hpdmVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEN1cnJpY3VsdW0ucHJvdG90eXBlLnVwZGF0ZUZyb21TZXJ2ZXIgPSBmdW5jdGlvbihkS2V5KSB7XG4gICAgdmFyIGRLZXlzO1xuICAgIGlmIChkS2V5ID09IG51bGwpIHtcbiAgICAgIGRLZXkgPSB0aGlzLmlkLnN1YnN0cigtNSwgNSk7XG4gICAgfVxuICAgIGRLZXlzID0gSlNPTi5zdHJpbmdpZnkoZEtleS5yZXBsYWNlKC9bXmEtZjAtOV0vZywgXCIgXCIpLnNwbGl0KC9cXHMrLykpO1xuICAgIHRoaXMudHJpZ2dlcihcInN0YXR1c1wiLCBcImltcG9ydCBsb29rdXBcIik7XG4gICAgJC5hamF4KFRhbmdlcmluZS5zZXR0aW5ncy51cmxWaWV3KFwiZ3JvdXBcIiwgXCJieURLZXlcIiksIHtcbiAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgZGF0YVR5cGU6IFwianNvbnBcIixcbiAgICAgIGRhdGE6IHtcbiAgICAgICAga2V5czogZEtleXNcbiAgICAgIH0sXG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICB2YXIgZGF0dW0sIGRvY0xpc3QsIGosIGxlbiwgcmVmO1xuICAgICAgICAgIGRvY0xpc3QgPSBbXTtcbiAgICAgICAgICByZWYgPSBkYXRhLnJvd3M7XG4gICAgICAgICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICBkYXR1bSA9IHJlZltqXTtcbiAgICAgICAgICAgIGRvY0xpc3QucHVzaChkYXR1bS5pZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAkLmNvdWNoLnJlcGxpY2F0ZShUYW5nZXJpbmUuc2V0dGluZ3MudXJsREIoXCJncm91cFwiKSwgVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKFwibG9jYWxcIiksIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudHJpZ2dlcihcInN0YXR1c1wiLCBcImltcG9ydCBzdWNjZXNzXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy50cmlnZ2VyKFwic3RhdHVzXCIsIFwiaW1wb3J0IGVycm9yXCIsIGEgKyBcIiBcIiArIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRvY19pZHM6IGRvY0xpc3RcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEN1cnJpY3VsdW0ucHJvdG90eXBlLmR1cGxpY2F0ZSA9IGZ1bmN0aW9uKGFzc2Vzc21lbnRBdHRyaWJ1dGVzLCBzdWJ0ZXN0QXR0cmlidXRlcywgcXVlc3Rpb25BdHRyaWJ1dGVzLCBjYWxsYmFjaykge1xuICAgIHZhciBuZXdJZCwgbmV3TW9kZWwsIG9yaWdpbmFsSWQ7XG4gICAgb3JpZ2luYWxJZCA9IHRoaXMuaWQ7XG4gICAgbmV3TW9kZWwgPSB0aGlzLmNsb25lKCk7XG4gICAgbmV3TW9kZWwuc2V0KGFzc2Vzc21lbnRBdHRyaWJ1dGVzKTtcbiAgICBuZXdJZCA9IFV0aWxzLmd1aWQoKTtcbiAgICByZXR1cm4gbmV3TW9kZWwuc2F2ZSh7XG4gICAgICBcIl9pZFwiOiBuZXdJZCxcbiAgICAgIFwiY3VycmljdWx1bUlkXCI6IG5ld0lkXG4gICAgfSwge1xuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgcXVlc3Rpb25zO1xuICAgICAgICAgIHF1ZXN0aW9ucyA9IG5ldyBRdWVzdGlvbnM7XG4gICAgICAgICAgcmV0dXJuIHF1ZXN0aW9ucy5mZXRjaCh7XG4gICAgICAgICAgICBrZXk6IG9yaWdpbmFsSWQsXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihxdWVzdGlvbnMpIHtcbiAgICAgICAgICAgICAgdmFyIHN1YnRlc3RzO1xuICAgICAgICAgICAgICBzdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0cztcbiAgICAgICAgICAgICAgcmV0dXJuIHN1YnRlc3RzLmZldGNoKHtcbiAgICAgICAgICAgICAgICBrZXk6IG9yaWdpbmFsSWQsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oc3VidGVzdHMpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZFN1YnRlc3RzLCBncmlkSWQsIGksIGosIGssIGwsIGxlbiwgbGVuMSwgbGVuMiwgbW9kZWwsIG5ld1F1ZXN0aW9uLCBuZXdRdWVzdGlvbnMsIG5ld1N1YnRlc3QsIG5ld1N1YnRlc3RJZCwgbmV3U3VidGVzdHMsIG9sZElkLCBxdWVzdGlvbiwgcmVmLCBzdWJ0ZXN0SWRNYXA7XG4gICAgICAgICAgICAgICAgICBmaWx0ZXJlZFN1YnRlc3RzID0gc3VidGVzdHMubW9kZWxzO1xuICAgICAgICAgICAgICAgICAgc3VidGVzdElkTWFwID0ge307XG4gICAgICAgICAgICAgICAgICBuZXdTdWJ0ZXN0cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IGZpbHRlcmVkU3VidGVzdHMubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsID0gZmlsdGVyZWRTdWJ0ZXN0c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgbmV3U3VidGVzdCA9IG1vZGVsLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgICAgIG5ld1N1YnRlc3Quc2V0KFwiY3VycmljdWx1bUlkXCIsIG5ld01vZGVsLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3U3VidGVzdElkID0gVXRpbHMuZ3VpZCgpO1xuICAgICAgICAgICAgICAgICAgICBzdWJ0ZXN0SWRNYXBbbmV3U3VidGVzdC5pZF0gPSBuZXdTdWJ0ZXN0SWQ7XG4gICAgICAgICAgICAgICAgICAgIG5ld1N1YnRlc3Quc2V0KFwiX2lkXCIsIG5ld1N1YnRlc3RJZCk7XG4gICAgICAgICAgICAgICAgICAgIG5ld1N1YnRlc3RzLnB1c2gobmV3U3VidGVzdCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBmb3IgKGkgPSBrID0gMCwgbGVuMSA9IG5ld1N1YnRlc3RzLmxlbmd0aDsgayA8IGxlbjE7IGkgPSArK2spIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwgPSBuZXdTdWJ0ZXN0c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgZ3JpZElkID0gbW9kZWwuZ2V0KFwiZ3JpZExpbmtJZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChncmlkSWQgfHwgXCJcIikgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBtb2RlbC5zZXQoXCJncmlkTGlua0lkXCIsIHN1YnRlc3RJZE1hcFtncmlkSWRdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBuZXdRdWVzdGlvbnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIHJlZiA9IHF1ZXN0aW9ucy5tb2RlbHM7XG4gICAgICAgICAgICAgICAgICBmb3IgKGwgPSAwLCBsZW4yID0gcmVmLmxlbmd0aDsgbCA8IGxlbjI7IGwrKykge1xuICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbiA9IHJlZltsXTtcbiAgICAgICAgICAgICAgICAgICAgbmV3UXVlc3Rpb24gPSBxdWVzdGlvbi5jbG9uZSgpO1xuICAgICAgICAgICAgICAgICAgICBvbGRJZCA9IG5ld1F1ZXN0aW9uLmdldChcInN1YnRlc3RJZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3UXVlc3Rpb24uc2V0KFwiY3VycmljdWx1bUlkXCIsIG5ld01vZGVsLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3UXVlc3Rpb24uc2V0KFwiX2lkXCIsIFV0aWxzLmd1aWQoKSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld1F1ZXN0aW9uLnNldChcInN1YnRlc3RJZFwiLCBzdWJ0ZXN0SWRNYXBbb2xkSWRdKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3UXVlc3Rpb25zLnB1c2gobmV3UXVlc3Rpb24pO1xuICAgICAgICAgICAgICAgICAgICBuZXdRdWVzdGlvbi5zYXZlKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3TW9kZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIEN1cnJpY3VsdW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBjdXJyaWN1bHVtSWQsIHN1YnRlc3RzO1xuICAgIGN1cnJpY3VsdW1JZCA9IHRoaXMuaWQ7XG4gICAgc3VidGVzdHMgPSBuZXcgU3VidGVzdHM7XG4gICAgc3VidGVzdHMuZmV0Y2goe1xuICAgICAga2V5OiBjdXJyaWN1bHVtSWQsXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgIHZhciByZXN1bHRzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIHdoaWxlIChjb2xsZWN0aW9uLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChjb2xsZWN0aW9uLnBvcCgpLmRlc3Ryb3koKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEN1cnJpY3VsdW0uX19zdXBlcl9fLmRlc3Ryb3kuY2FsbCh0aGlzLCB7XG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgQ3VycmljdWx1bS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUuJGRiLnZpZXcoVGFuZ2VyaW5lLmRlc2lnbl9kb2MgKyBcIi9yZXZCeUFzc2Vzc21lbnRJZFwiLCB7XG4gICAgICBrZXlzOiBbdGhpcy5pZF0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIkRlbGV0ZSBlcnJvci5cIik7XG4gICAgICB9LFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIHZhciBkb2NzLCBqLCBsZW4sIHJlZiwgcmVxdWVzdERhdGEsIHJvdztcbiAgICAgICAgICBkb2NzID0gW107XG4gICAgICAgICAgcmVmID0gcmVzcG9uc2Uucm93cztcbiAgICAgICAgICBmb3IgKGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgIHJvdyA9IHJlZltqXTtcbiAgICAgICAgICAgIHJvdy52YWx1ZVtcIl9kZWxldGVkXCJdID0gdHJ1ZTtcbiAgICAgICAgICAgIHJvdy52YWx1ZVtcImRlbGV0ZWRBdFwiXSA9IFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJjb250ZXh0XCIpO1xuICAgICAgICAgICAgZG9jcy5wdXNoKHJvdy52YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlcXVlc3REYXRhID0ge1xuICAgICAgICAgICAgXCJkb2NzXCI6IGRvY3NcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04XCIsXG4gICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICAgICAgICB1cmw6IFRhbmdlcmluZS5zZXR0aW5ncy51cmxCdWxrRG9jcygpLFxuICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdERhdGEpLFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQoXCJEZWxldGUgZXJyb3IuXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlcykge1xuICAgICAgICAgICAgICB2YXIgaywgbGVuMSwgb2tDb3VudCwgcmVzcDtcbiAgICAgICAgICAgICAgb2tDb3VudCA9IDA7XG4gICAgICAgICAgICAgIGZvciAoayA9IDAsIGxlbjEgPSByZXNwb25zZXMubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgICAgICAgICAgcmVzcCA9IHJlc3BvbnNlc1trXTtcbiAgICAgICAgICAgICAgICBpZiAocmVzcC5vayAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBva0NvdW50Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChva0NvdW50ID09PSByZXNwb25zZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY29sbGVjdGlvbi5yZW1vdmUoX3RoaXMuaWQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jbGVhcigpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIkRlbGV0ZSBlcnJvci5cIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEN1cnJpY3VsdW07XG5cbn0pKEJhY2tib25lLk1vZGVsKTtcblxuIiwiIyBIYXJyeSBQb3R0ZXJcbmNsYXNzIEN1cnJpY3VsdW1WaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZTogXCJDdXJyaWN1bHVtVmlld1wiXG5cbiAgZXZlbnRzOlxuICAgIFwiY2xpY2sgLmJhY2tcIiAgICAgICAgICAgOiBcImdvQmFja1wiXG4gICAgXCJjbGljayAuZGVsZXRlXCIgICAgICAgICA6IFwiZGVsZXRlQ3VycmljdWx1bVwiXG4gICAgXCJjbGljayAuZGVsZXRlX3N1YnRlc3RcIiA6IFwiZGVsZXRlU3VidGVzdFwiXG4gICAgXCJjbGljayAuZWRpdF9pbl9wbGFjZVwiICA6IFwiZWRpdEluUGxhY2VcIlxuICAgICdjbGljayAubmV3X3N1YnRlc3QnICAgIDogXCJuZXdTdWJ0ZXN0XCJcblxuICAgICdjaGFuZ2UgI2ZpbGUnIDogJ3VwbG9hZEZpbGUnXG5cbiAgICBcImZvY3Vzb3V0IC5lZGl0aW5nXCIgOiBcImVkaXRpbmdcIlxuICAgIFwia2V5dXAgICAgLmVkaXRpbmdcIiA6IFwiZWRpdGluZ1wiXG4gICAgXCJrZXlkb3duICAuZWRpdGluZ1wiIDogXCJlZGl0aW5nXCJcblxuICAgIFwiY2xpY2sgLm5hbWUtY29udHJvbHMgLmVkaXRcIiAgIDogXCJlZGl0TmFtZVwiXG4gICAgXCJjbGljayAubmFtZS1jb250cm9scyAuc2F2ZVwiICAgOiBcInNhdmVOYW1lXCJcbiAgICBcImNsaWNrIC5uYW1lLWNvbnRyb2xzIC5jYW5jZWxcIiA6IFwiY2FuY2VsRWRpdE5hbWVcIlxuXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgICAjIGFyZ3VtZW50c1xuICAgIEBjdXJyaWN1bHVtID0gb3B0aW9ucy5jdXJyaWN1bHVtXG4gICAgQHN1YnRlc3RzICAgPSBvcHRpb25zLnN1YnRlc3RzXG4gICAgQHF1ZXN0aW9ucyAgPSBvcHRpb25zLnF1ZXN0aW9uc1xuICAgIEBxdWVzdGlvbnNCeVBhcmVudElkID0gQHF1ZXN0aW9ucy5pbmRleEJ5IFwic3VidGVzdElkXCJcblxuICAgICMgcHJpbWFyaWVzXG4gICAgQHRvdGFsQXNzZXNzbWVudHMgID0gTWF0aC5tYXguYXBwbHkgTWF0aCwgQHN1YnRlc3RzLnBsdWNrKFwicGFydFwiKVxuICAgIEBzdWJ0ZXN0c0J5UGFydCAgICA9IEBzdWJ0ZXN0cy5pbmRleEFycmF5QnkgXCJwYXJ0XCJcbiAgICBAc3VidGVzdFByb3BlcnRpZXMgPSBcbiAgICAgIFwiZ3JpZFwiIDogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJrZXlcIiAgICAgIDogXCJpdGVtVHlwZVwiXG4gICAgICAgICAgXCJsYWJlbFwiICAgIDogXCJJdGVtIHR5cGVcIlxuICAgICAgICAgIFwiZWRpdGFibGVcIiA6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwia2V5XCIgICAgICA6IFwicGFydFwiXG4gICAgICAgICAgXCJsYWJlbFwiICAgIDogXCJUZXJtXCJcbiAgICAgICAgICBcImVkaXRhYmxlXCIgOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImtleVwiICAgICAgOiBcImdyYWRlXCJcbiAgICAgICAgICBcImxhYmVsXCIgICAgOiBcIkdyYWRlXCJcbiAgICAgICAgICBcImVkaXRhYmxlXCIgOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImtleVwiICAgICAgOiBcIm5hbWVcIlxuICAgICAgICAgIFwibGFiZWxcIiAgICA6IFwiTmFtZVwiXG4gICAgICAgICAgXCJlZGl0YWJsZVwiIDogdHJ1ZVxuICAgICAgICAgIFwiZXNjYXBlZFwiICA6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwia2V5XCIgICAgICA6IFwidGltZXJcIlxuICAgICAgICAgIFwibGFiZWxcIiAgICA6IFwiVGltZTxicj5hbGxvd2VkXCJcbiAgICAgICAgICBcImVkaXRhYmxlXCIgOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImtleVwiICAgICAgOiBcIml0ZW1zXCJcbiAgICAgICAgICBcImxhYmVsXCIgICAgOiBcIkl0ZW1zXCJcbiAgICAgICAgICBcImNvdW50XCIgICAgOiB0cnVlXG4gICAgICAgICAgXCJlZGl0YWJsZVwiIDogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJzdXJ2ZXlcIiA6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwia2V5XCIgOiBcInBhcnRcIlxuICAgICAgICAgIFwibGFiZWxcIiA6IFwiQXNzZXNzbWVudFwiXG4gICAgICAgICAgXCJlZGl0YWJsZVwiIDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJrZXlcIiA6IFwibmFtZVwiXG4gICAgICAgICAgXCJsYWJlbFwiIDogXCJOYW1lXCJcbiAgICAgICAgICBcImVkaXRhYmxlXCIgOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImtleVwiICAgICAgOiBcInJlcG9ydFR5cGVcIlxuICAgICAgICAgIFwibGFiZWxcIiAgICA6IFwiUmVwb3J0XCJcbiAgICAgICAgICBcImVkaXRhYmxlXCIgOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIF1cblxuICBodG1sRmlsZVRhYmxlOiAtPlxuXG4gICAgcmV0dXJuIFwiXCIgaWYgXyhAY3VycmljdWx1bS5nZXRBdHRhY2htZW50cygpKS5pc0VtcHR5KClcblxuICAgIHByZWZpeGVzID0gW1wiXCIsIFwiS0JcIiwgXCJNQlwiLCBcIkdCXCJdXG4gICAgaHRtbCA9IFwiXG4gICAgICA8aDI+QXR0YWNobWVudHM8L2gyPlxuICAgICAgPHRhYmxlPlxuICAgIFwiXG4gICAgZm9yIGF0dGFjaG1lbnQgaW4gQGN1cnJpY3VsdW0uZ2V0QXR0YWNobWVudHMoKVxuICAgICAgYnl0ZXMgPSBhdHRhY2htZW50LnNpemVcbiAgICAgIGluZGV4ICA9IHBhcnNlSW50KE1hdGguZmxvb3IoTWF0aC5sb2coYnl0ZXMpIC8gTWF0aC5sb2coMTAyNCkpKVxuICAgICAgc2l6ZSAgID0gTWF0aC5kZWNpbWFscyhieXRlcyAvIE1hdGgucG93KDEwMjQsIGluZGV4KSwgMSkgKyBcIiBcIiArIHByZWZpeGVzW2luZGV4XVxuICAgICAgaHRtbCArPSBcIjx0cj48dGQ+I3thdHRhY2htZW50LmZpbGVuYW1lfSAoI3tzaXplfSk8L3RkPjwvdHI+XCJcblxuICAgIGh0bWwgKz0gXCI8L3RhYmxlPlwiXG5cbiAgICByZXR1cm4gaHRtbFxuXG4gIHVwbG9hZEZpbGU6IChldmVudCkgLT5cblxuICAgIGZpbGUgPSBldmVudC50YXJnZXQuZmlsZXNbMF1cblxuICAgIEBjdXJyaWN1bHVtLmFkZEF0dGFjaG1lbnRcbiAgICAgIGZpbGU6IGZpbGVcbiAgICAgIGVycm9yOiA9PlxuICAgICAgICBVdGlscy5taWRBbGVydCBcIkVycm9yIHVwbG9hZGluZy5cIlxuICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJGaWxlIHVwbG9hZGVkXCJcbiAgICAgIGNvbXBsZXRlOiA9PlxuICAgICAgICBAY3VycmljdWx1bS5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3M6ID0+IEByZW5kZXIoKVxuXG5cbiAgcmVuZGVyOiAtPlxuXG4gICAgc3VidGVzdFRhYmxlID0gQGdldFN1YnRlc3RUYWJsZSgpXG5cbiAgICBkZWxldGVCdXR0b24gPSBcIjxidXR0b24gY2xhc3M9J2NvbW1hbmRfcmVkIGRlbGV0ZSc+RGVsZXRlPC9idXR0b24+XCJcblxuICAgIG5ld0J1dHRvbnMgPSBcIlxuICAgICAgICA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIG5ld19zdWJ0ZXN0JyBkYXRhLXByb3RvdHlwZT0nZ3JpZCc+TmV3IEdyaWQgU3VidGVzdDwvYnV0dG9uPjxicj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBuZXdfc3VidGVzdCcgZGF0YS1wcm90b3R5cGU9J3N1cnZleSc+TmV3IFN1cnZleSBTdWJ0ZXN0PC9idXR0b24+XG5cbiAgICBcIlxuXG4gICAgaHRtbCA9IFwiXG5cbiAgICAgIDxidXR0b24gY2xhc3M9J25hdi1idXR0b24gYmFjayc+I3t0KCdiYWNrJyl9PC9idXR0b24+XG4gICAgICA8aDEgY2xhc3M9J2N1cnJpY3VsdW0tbmFtZSc+PC9oMT5cbiAgICAgIDxzbWFsbCBjbGFzcz0nbmFtZS1jb250cm9scyc+PC9zbWFsbD48YnI+XG5cbiAgICAgIDxkaXYgY2xhc3M9J3NtYWxsX2dyZXknPkRvd25sb2FkIGtleSA8Yj4je0BjdXJyaWN1bHVtLmlkLnN1YnN0cigtNSw1KX08L2I+PC9kaXY+XG5cbiAgICAgIDxkaXYgaWQ9J3N1YnRlc3RfdGFibGVfY29udGFpbmVyJz5cbiAgICAgICAgI3tzdWJ0ZXN0VGFibGV9XG4gICAgICA8L2Rpdj5cblxuICAgICAgI3tuZXdCdXR0b25zIHx8IFwiXCJ9XG4gICAgICA8YnI+PGJyPlxuXG4gICAgICAje2RlbGV0ZUJ1dHRvbn1cblxuICAgIFwiXG5cbiAgICBAJGVsLmh0bWwgaHRtbFxuXG4gICAgQHJlbmRlck5hbWUoKVxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgcmVuZGVyTmFtZTogLT5cbiAgICBAJGVsLmZpbmQoXCIuY3VycmljdWx1bS1uYW1lXCIpLmh0bWwgQGN1cnJpY3VsdW0uZ2V0RXNjYXBlZFN0cmluZygnbmFtZScpXG4gICAgQCRlbC5maW5kKFwiLm5hbWUtY29udHJvbHNcIikuaHRtbCBcIlxuICAgICAgPHNwYW4gY2xhc3M9J2VkaXQnPkVkaXQ8L3NwYW4+XG4gICAgXCJcblxuICBlZGl0TmFtZTogLT5cbiAgICAkaDEgPSBAJGVsLmZpbmQoXCIuY3VycmljdWx1bS1uYW1lXCIpLmh0bWwgXCI8aW5wdXQgY2xhc3M9J25ldy1uYW1lJyB2YWx1ZT0nI3tAY3VycmljdWx1bS5nZXRFc2NhcGVkU3RyaW5nKCduYW1lJyl9Jz5cIlxuICAgICRoMS5maW5kKFwiaW5wdXRcIikuc2VsZWN0KClcbiAgICBAJGVsLmZpbmQoXCIubmFtZS1jb250cm9sc1wiKS5odG1sIFwiXG4gICAgICA8c3BhbiBjbGFzcz0nc2F2ZSc+U2F2ZTwvc3Bhbj4gXG4gICAgICA8c3BhbiBjbGFzcz0nY2FuY2VsJz5DYW5jZWw8L3NwYW4+XG4gICAgXCJcbiAgXG4gIHNhdmVOYW1lOiAtPlxuICAgIG5ld05hbWUgPSBAJGVsLmZpbmQoXCIubmV3LW5hbWVcIikudmFsKClcbiAgICBAY3VycmljdWx1bS5zYXZlIFxuICAgICAgbmFtZSA6IG5ld05hbWVcbiAgICAsXG4gICAgICBzdWNjZXNzOiA9PlxuICAgICAgICBVdGlscy50b3BBbGVydCBcIk5hbWUgc2F2ZWRcIlxuICAgICAgICBAcmVuZGVyTmFtZSgpXG4gICAgICBlcnJvcjogPT5cbiAgICAgICAgVXRpbHMudG9wQWxlcnQgXCJOZXcgbmFtZSBkaWQgbm90IHNhdmUuIFBsZWFzZSB0cnkgYWdhaW4uXCJcbiAgICAgICAgQHJlbmRlck5hbWUoKVxuXG4gIGNhbmNlbEVkaXROYW1lOiAtPiBAcmVuZGVyTmFtZSgpXG5cbiAgdXBkYXRlVGFibGU6IC0+IEAkZWwuZmluZChcIiNzdWJ0ZXN0X3RhYmxlX2NvbnRhaW5lclwiKS5odG1sIEBnZXRTdWJ0ZXN0VGFibGUoKVxuXG4gIGdldFN1YnRlc3RUYWJsZTogKGdyYWRlKSAtPlxuXG4gICAgaHRtbCA9IFwiPHRhYmxlIGNsYXNzPSdzdWJ0ZXN0cyc+XCJcblxuICAgIGh0bWwgKz0gXCJcbiAgICAgIDx0Ym9keT5cbiAgICBcIlxuXG4gICAgI2lmIGdyYWRlP1xuICAgICMgIHN1YnRlc3RzID0gbmV3IEJhY2tib25lLkNvbGxlY3Rpb24gQHN1YnRlc3RzLndoZXJlIGdyYWRlIDogZ3JhZGVcbiAgICAjZWxzZVxuICAgICMgIHN1YnRlc3RzID0gQHN1YnRlc3RzXG5cbiAgICBAc3VidGVzdEJ5SXRlbVR5cGUgPSBuZXcgQmFja2JvbmUuQ29sbGVjdGlvbihAc3VidGVzdHMubW9kZWxzLnNvcnQoIChhLGIpIC0+IFxuICAgICAgYSA9IFwiI3thLmdldChcIml0ZW1UeXBlXCIpfSN7YS5nZXQoXCJwYXJ0XCIpfSN7YS5nZXQoXCJncmFkZVwiKX1cIlxuICAgICAgYiA9IFwiI3tiLmdldChcIml0ZW1UeXBlXCIpfSN7Yi5nZXQoXCJwYXJ0XCIpfSN7Yi5nZXQoXCJncmFkZVwiKX1cIlxuICAgICAgaWYgKCBhIDwgYiApXG4gICAgICAgIHJldHVybiAtMVxuICAgICAgaWYgKCBhID4gYiApXG4gICAgICAgIHJldHVybiAxXG4gICAgICByZXR1cm4gMFxuICAgICkpLmluZGV4QXJyYXlCeShcIml0ZW1UeXBlXCIpXG5cbiAgICBmb3IgcGFydCwgc3VidGVzdHMgb2YgQHN1YnRlc3RCeUl0ZW1UeXBlXG4gICAgICBodG1sICs9IFwiPHRyPjx0ZD4mbmJzcDs8L3RkPjwvdHI+XCJcbiAgICAgIGZvciBzdWJ0ZXN0IGluIHN1YnRlc3RzXG4gICAgICAgIGl0ZW1zID0gbnVsbFxuICAgICAgICBwcm9tcHRzID0gbnVsbFxuICAgICAgICBoZWFkZXJIdG1sID0gYm9keUh0bWwgPSBcIlwiXG5cbiAgICAgICAgZm9yIHByb3AgaW4gQHN1YnRlc3RQcm9wZXJ0aWVzW3N1YnRlc3QuZ2V0KFwicHJvdG90eXBlXCIpXVxuICAgICAgICAgIGhlYWRlckh0bWwgKz0gXCI8dGg+I3twcm9wLmxhYmVsfTwvdGg+XCJcbiAgICAgICAgICBib2R5SHRtbCArPSBAcHJvcENvb2socHJvcCwgc3VidGVzdClcblxuICAgICAgICBodG1sICs9IFwiPHRyPiN7aGVhZGVySHRtbH08L3RyPlwiXG4gICAgICAgIGh0bWwgKz0gXCI8dHI+I3tib2R5SHRtbH1cIlxuXG5cbiAgICAgICAgIyBhZGQgYnV0dG9ucyBmb3Igc2VydmVyc2lkZSBlZGl0aW5nXG4gICAgICAgIGh0bWwgKz0gXCJcbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8YSBocmVmPScjY2xhc3Mvc3VidGVzdC8je3N1YnRlc3QuaWR9Jz48aW1nIGNsYXNzPSdsaW5rX2ljb24gZWRpdCcgdGl0bGU9J0VkaXQnIHNyYz0naW1hZ2VzL2ljb25fZWRpdC5wbmcnPjwvYT5cbiAgICAgICAgICAgIDxpbWcgY2xhc3M9J2xpbmtfaWNvbiBkZWxldGVfc3VidGVzdCcgdGl0bGU9J0RlbGV0ZScgZGF0YS1zdWJ0ZXN0SWQ9JyN7c3VidGVzdC5pZH0nIHNyYz0naW1hZ2VzL2ljb25fZGVsZXRlLnBuZyc+XG4gICAgICAgICAgICA8YSBocmVmPScjY2xhc3MvcnVuL3Rlc3QvI3tzdWJ0ZXN0LmlkfSc+PGltZyBjbGFzcz0nbGlua19pY29uIHRlc3RSdW4nIHRpdGxlPSdUZXN0IHJ1bicgc3JjPSdpbWFnZXMvaWNvbl9ydW4ucG5nJz48L2E+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgXCJcblxuICAgICAgICAjIHF1aWNrIHByZXZpZXdzIG9mIHN1YnRlc3QgY29udGVudHNcbiAgICAgICAgaWYgc3VidGVzdC5nZXQoXCJwcm90b3R5cGVcIikgPT0gXCJncmlkXCJcbiAgICAgICAgICBpdGVtcyA9IHN1YnRlc3QuZ2V0KFwiaXRlbXNcIikuam9pbiBcIiBcIlxuICAgICAgICAgIGh0bWwgKz0gXCI8dHI+PHRkIGNvbHNwYW49JyN7QHN1YnRlc3RQcm9wZXJ0aWVzWydncmlkJ10ubGVuZ3RofSc+I3tpdGVtc308L3RkPjwvdHI+XCJcbiAgICAgICAgXG4gICAgICAgIGlmIHN1YnRlc3QuZ2V0KFwicHJvdG90eXBlXCIpID09IFwic3VydmV5XCIgJiYgQHF1ZXN0aW9uc0J5UGFyZW50SWRbc3VidGVzdC5pZF0/XG4gICAgICAgICAgcHJvbXB0cyA9IChxdWVzdGlvbi5nZXQoXCJwcm9tcHRcIikgZm9yIHF1ZXN0aW9uIGluIEBxdWVzdGlvbnNCeVBhcmVudElkW3N1YnRlc3QuaWRdKS5qb2luKFwiLCBcIilcbiAgICAgICAgICBodG1sICs9IFwiPHRyPjx0ZCBjb2xzcGFuPScje0BzdWJ0ZXN0UHJvcGVydGllc1snc3VydmV5J10ubGVuZ3RofSc+I3twcm9tcHRzfTwvdGQ+PC90cj5cIlxuXG5cbiAgICBodG1sICs9IFwiXG4gICAgICA8L3Rib2R5PlxuICAgIDwvdGFibGU+XG4gICAgXCJcblxuICAgIHJldHVybiBodG1sXG5cbiAgcHJvcENvb2s6IChwcm9wLCBzdWJ0ZXN0KS0+XG5cbiAgICAjIGNvb2sgdGhlIHZhbHVlXG4gICAgdmFsdWUgPSBpZiBwcm9wLmtleT8gICB0aGVuIHN1YnRlc3QuZ2V0KHByb3Aua2V5KSAgICBlbHNlIFwiJm5ic3A7XCJcbiAgICB2YWx1ZSA9IGlmIHByb3AuZXNjYXBlIHRoZW4gc3VidGVzdC5lc2NhcGUocHJvcC5rZXkpIGVsc2UgdmFsdWVcbiAgICB2YWx1ZSA9IHZhbHVlLmxlbmd0aCBpZiBwcm9wLmNvdW50P1xuICAgIHZhbHVlID0gXCJcIiBpZiBub3QgdmFsdWU/XG5cbiAgICAjIHdoYXQgaXMgaXRcbiAgICBlZGl0T3JOb3QgICA9IGlmIHByb3AuZWRpdGFibGUgdGhlbiBcImNsYXNzPSdlZGl0X2luX3BsYWNlJ1wiIGVsc2UgXCJcIlxuXG4gICAgbnVtYmVyT3JOb3QgPSBpZiBfLmlzTnVtYmVyKHZhbHVlKSB0aGVuIFwiZGF0YS1pc051bWJlcj0ndHJ1ZSdcIiBlbHNlIFwiZGF0YS1pc051bWJlcj0nZmFsc2UnXCIgXG5cbiAgICByZXR1cm4gXCI8dGQgY2xhc3M9J2VkaXRfaW5fcGxhY2UnPjxzcGFuIGRhdGEtc3VidGVzdElkPScje3N1YnRlc3QuaWR9JyBkYXRhLWtleT0nI3twcm9wLmtleX0nIGRhdGEtdmFsdWU9JyN7dmFsdWV9JyAje2VkaXRPck5vdH0gI3tudW1iZXJPck5vdH0+I3t2YWx1ZX08L2Rpdj48L3RkPlwiXG5cblxuICBlZGl0SW5QbGFjZTogKGV2ZW50KSAtPlxuXG4gICAgcmV0dXJuIGlmIEBhbHJlYWR5RWRpdGluZ1xuICAgIEBhbHJlYWR5RWRpdGluZyA9IHRydWVcblxuICAgICMgc2F2ZSBzdGF0ZVxuICAgICMgcmVwbGFjZSB3aXRoIHRleHQgYXJlYVxuICAgICMgb24gc2F2ZSwgc2F2ZSBhbmQgcmUtcmVwbGFjZVxuICAgICRzcGFuID0gJChldmVudC50YXJnZXQpXG5cbiAgICBpZiAkc3Bhbi5wcm9wKFwidGFnTmFtZVwiKSA9PSBcIlREXCJcbiAgICAgICRzcGFuID0gJHNwYW4uZmluZChcInNwYW5cIilcbiAgICAgIHJldHVybiBpZiAkc3Bhbi5sZW5ndGggPT0gMFxuICAgICR0ZCAgPSAkc3Bhbi5wYXJlbnQoKVxuXG4gICAgQCRvbGRTcGFuID0gJHNwYW4uY2xvbmUoKVxuXG4gICAgcmV0dXJuIGlmICRzcGFuLnByb3AoXCJ0YWdOYW1lXCIpID09IFwiVEVYVEFSRUFcIlxuXG4gICAgZ3VpZCAgICAgICAgID0gVXRpbHMuZ3VpZCgpXG5cbiAgICBrZXkgICAgICAgICAgPSAkc3Bhbi5hdHRyKFwiZGF0YS1rZXlcIilcbiAgICBpc051bWJlciAgICAgPSAkc3Bhbi5hdHRyKFwiZGF0YS1pc051bWJlclwiKSA9PSBcInRydWVcIlxuXG4gICAgc3VidGVzdElkICAgID0gJHNwYW4uYXR0cihcImRhdGEtc3VidGVzdElkXCIpXG4gICAgc3VidGVzdCAgICAgID0gQHN1YnRlc3RzLmdldChzdWJ0ZXN0SWQpXG4gICAgb2xkVmFsdWUgICAgID0gc3VidGVzdC5nZXQoa2V5KVxuXG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgIGNsYXNzZXMgPSAoJHRhcmdldC5hdHRyKFwiY2xhc3NcIikgfHwgXCJcIikucmVwbGFjZShcInNldHRpbmdzXCIsXCJcIilcbiAgICBtYXJnaW5zID0gJHRhcmdldC5jc3MoXCJtYXJnaW5cIilcblxuICAgICNzcGVjaWFsIGNhc2VcbiAgICBvbGRWYWx1ZSA9IG9sZFZhbHVlLmpvaW4gXCIgXCIgaWYga2V5ID09ICdpdGVtcydcblxuICAgIHRyYW5zZmVyVmFyaWFibGVzID0gXCJkYXRhLWlzTnVtYmVyPScje2lzTnVtYmVyfScgZGF0YS1rZXk9JyN7a2V5fScgZGF0YS1zdWJ0ZXN0SWQ9JyN7c3VidGVzdElkfScgXCJcblxuICAgICMgc2V0cyB3aWR0aC9oZWlnaHQgd2l0aCBzdHlsZSBhdHRyaWJ1dGVcbiAgICAkdGQuaHRtbChcIjx0ZXh0YXJlYSBpZD0nI3tndWlkfScgI3t0cmFuc2ZlclZhcmlhYmxlc30gY2xhc3M9J2VkaXRpbmcgI3tjbGFzc2VzfScgc3R5bGU9J21hcmdpbjoje21hcmdpbnN9Jz4je29sZFZhbHVlfTwvdGV4dGFyZWE+XCIpXG4gICAgIyBzdHlsZT0nd2lkdGg6I3tvbGRXaWR0aH1weDsgaGVpZ2h0OiAje29sZEhlaWdodH1weDsnXG4gICAgJHRleHRhcmVhID0gJChcIiMje2d1aWR9XCIpXG4gICAgJHRleHRhcmVhLmZvY3VzKClcblxuICBlZGl0aW5nOiAoZXZlbnQpIC0+XG5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG4gICAgJHRkID0gJHRhcmdldC5wYXJlbnQoKVxuXG4gICAgaWYgZXZlbnQud2hpY2ggPT0gMjcgb3IgZXZlbnQudHlwZSA9PSBcImZvY3Vzb3V0XCJcbiAgICAgICR0YXJnZXQucmVtb3ZlKClcbiAgICAgICR0ZC5odG1sKEAkb2xkU3BhbilcbiAgICAgIEBhbHJlYWR5RWRpdGluZyA9IGZhbHNlXG4gICAgICByZXR1cm5cblxuICAgICMgYWN0IG5vcm1hbCwgdW5sZXNzIGl0J3MgYW4gZW50ZXIga2V5IG9uIGtleWRvd25cbiAgICByZXR1cm4gdHJ1ZSB1bmxlc3MgZXZlbnQud2hpY2ggPT0gMTMgYW5kIGV2ZW50LnR5cGUgPT0gXCJrZXlkb3duXCJcblxuICAgIEBhbHJlYWR5RWRpdGluZyA9IGZhbHNlXG5cbiAgICBrZXkgICAgICAgICAgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLWtleVwiKVxuICAgIGlzTnVtYmVyICAgICA9ICR0YXJnZXQuYXR0cihcImRhdGEtaXNOdW1iZXJcIikgPT0gXCJ0cnVlXCJcblxuICAgIHN1YnRlc3RJZCAgICA9ICR0YXJnZXQuYXR0cihcImRhdGEtc3VidGVzdElkXCIpXG4gICAgc3VidGVzdCAgICAgID0gQHN1YnRlc3RzLmdldChzdWJ0ZXN0SWQpXG4gICAgb2xkVmFsdWUgICAgID0gc3VidGVzdC5nZXQoa2V5KVxuXG4gICAgbmV3VmFsdWUgPSAkdGFyZ2V0LnZhbCgpXG4gICAgbmV3VmFsdWUgPSBpZiBpc051bWJlciB0aGVuIHBhcnNlSW50KG5ld1ZhbHVlKSBlbHNlIG5ld1ZhbHVlXG5cbiAgICAjc3BlY2lhbCBjYXNlXG5cbiAgICAjIHRoaXMgaXMgbm90IERSWS4gcmVwZWF0ZWQgaW4gZ3JpZCBwcm90b3R5cGUuXG4gICAgaWYga2V5ID09IFwiaXRlbXNcIlxuICAgICAgIyBjbGVhbiB3aGl0ZXNwYWNlLCBnaXZlIHJlbWluZGVyIGlmIHRhYnMgb3IgY29tbWFzIGZvdW5kLCBjb252ZXJ0IGJhY2sgdG8gYXJyYXlcbiAgICAgIG5ld1ZhbHVlID0gbmV3VmFsdWUucmVwbGFjZSgvXFxzKy9nLCAnICcpXG4gICAgICBpZiAvXFx0fCwvLnRlc3QobmV3VmFsdWUpIHRoZW4gYWxlcnQgXCJQbGVhc2UgcmVtZW1iZXJcXG5cXG5HcmlkIGl0ZW1zIGFyZSBzcGFjZSBcXFwiIFxcXCIgZGVsaW1pdGVkXCJcbiAgICAgIG5ld1ZhbHVlID0gXy5jb21wYWN0IG5ld1ZhbHVlLnNwbGl0KFwiIFwiKVxuXG4gICAgIyBJZiB0aGVyZSB3YXMgYSBjaGFuZ2UsIHNhdmUgaXRcbiAgICBpZiBTdHJpbmcobmV3VmFsdWUpICE9IFN0cmluZyhvbGRWYWx1ZSlcbiAgICAgIGF0dHJpYnV0ZXMgPSB7fVxuICAgICAgYXR0cmlidXRlc1trZXldID0gbmV3VmFsdWVcbiAgICAgIHN1YnRlc3Quc2F2ZSBhdHRyaWJ1dGVzLFxuICAgICAgICBzdWNjZXNzOiA9PlxuICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiU3VidGVzdCBzYXZlZFwiXG4gICAgICAgICAgc3VidGVzdC5mZXRjaCBcbiAgICAgICAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgICAgICAgIEB1cGRhdGVUYWJsZSgpXG4gICAgICAgIGVycm9yOiA9PlxuICAgICAgICAgIHN1YnRlc3QuZmV0Y2ggXG4gICAgICAgICAgICBzdWNjZXNzOiA9PlxuICAgICAgICAgICAgICBAdXBkYXRlVGFibGUoKVxuICAgICAgICAgICAgICAjIGlkZWFsbHkgd2Ugd291bGRuJ3QgaGF2ZSB0byBzYXZlIHRoaXMgYnV0IGNvbmZsaWN0cyBoYXBwZW4gc29tZXRpbWVzXG4gICAgICAgICAgICAgICMgQFRPRE8gbWFrZSB0aGUgbW9kZWwgdHJ5IGFnYWluIHdoZW4gdW5zdWNjZXNzZnVsLlxuICAgICAgICAgICAgICBhbGVydCBcIlBsZWFzZSB0cnkgdG8gc2F2ZSBhZ2FpbiwgaXQgZGlkbid0IHdvcmsgdGhhdCB0aW1lLlwiXG4gICAgXG4gICAgIyB0aGlzIGVuc3VyZXMgd2UgZG8gbm90IGluc2VydCBhIG5ld2xpbmUgY2hhcmFjdGVyIHdoZW4gd2UgcHJlc3MgZW50ZXJcbiAgICByZXR1cm4gZmFsc2VcblxuICBnb0JhY2s6IC0+IFxuICAgIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJhc3Nlc3NtZW50c1wiLCB0cnVlXG5cbiAgZGVsZXRlQ3VycmljdWx1bTogLT5cbiAgICBpZiBjb25maXJtKFwiRGVsZXRlIGN1cnJpY3VsdW1cXG4je0BjdXJyaWN1bHVtLmdldCgnbmFtZScpfT9cIilcbiAgICAgIEBjdXJyaWN1bHVtLmRlc3Ryb3kgPT4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZSBcImFzc2Vzc21lbnRzXCIsIHRydWVcblxuICAjXG4gICMgU3VidGVzdCBuZXcgYW5kIGRlc3Ryb3lcbiAgI1xuICBuZXdTdWJ0ZXN0OiAoZXZlbnQpIC0+XG4gICAgcHJvdG90eXBlID0gJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLXByb3RvdHlwZVwiKVxuICAgIGd1aWQgPSBVdGlscy5ndWlkKClcblxuICAgIHN1YnRlc3RBdHRyaWJ1dGVzID0gXG4gICAgICBcIl9pZFwiICAgICAgICAgIDogZ3VpZFxuICAgICAgXCJjdXJyaWN1bHVtSWRcIiA6IEBjdXJyaWN1bHVtLmlkXG4gICAgICBcInByb3RvdHlwZVwiICAgIDogcHJvdG90eXBlXG4gICAgICBcImNhcHR1cmVMYXN0QXR0ZW1wdGVkXCIgOiBmYWxzZVxuICAgICAgXCJlbmRPZkxpbmVcIiA6IGZhbHNlXG5cbiAgICBwcm90b1RlbXBzID0gVGFuZ2VyaW5lLnRlbXBsYXRlcy5nZXQgXCJwcm90b3R5cGVzXCJcbiAgICBzdWJ0ZXN0QXR0cmlidXRlcyA9ICQuZXh0ZW5kKHByb3RvVGVtcHNbcHJvdG90eXBlXSwgc3VidGVzdEF0dHJpYnV0ZXMpXG5cbiAgICBzdWJ0ZXN0ID0gbmV3IFN1YnRlc3Qgc3VidGVzdEF0dHJpYnV0ZXNcbiAgICBzdWJ0ZXN0LnNhdmUgbnVsbCxcbiAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJjbGFzcy9zdWJ0ZXN0LyN7Z3VpZH1cIiwgdHJ1ZVxuICAgICAgZXJyb3I6IC0+XG4gICAgICAgIGFsZXJ0IFwiUGxlYXNlIHRyeSBhZ2Fpbi4gVGhlcmUgd2FzIGEgcHJvYmxlbSBjcmVhdGluZyB0aGUgbmV3IHN1YnRlc3QuXCJcblxuICBkZWxldGVTdWJ0ZXN0OiAoZXZlbnQpIC0+XG4gICAgc3VidGVzdElkID0gJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLXN1YnRlc3RJZFwiKVxuICAgIHN1YnRlc3QgPSBAc3VidGVzdHMuZ2V0KHN1YnRlc3RJZClcbiAgICBpZiBjb25maXJtKFwiRGVsZXRlIHN1YnRlc3RcXG4je3N1YnRlc3QuZ2V0KCduYW1lJyl9P1wiKVxuICAgICAgc3VidGVzdC5kZXN0cm95XG4gICAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgICAgQHN1YnRlc3RzLnJlbW92ZShzdWJ0ZXN0SWQpXG4gICAgICAgICAgQHVwZGF0ZVRhYmxlKClcbiAgICAgICAgZXJyb3I6ID0+XG4gICAgICAgICAgYWxlcnQgXCJQbGVhc2UgdHJ5IGFnYWluLCBjb3VsZCBub3QgZGVsZXRlIHN1YnRlc3QuXCJcbiIsInZhciBDdXJyaWN1bHVtVmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkN1cnJpY3VsdW1WaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEN1cnJpY3VsdW1WaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBDdXJyaWN1bHVtVmlldygpIHtcbiAgICByZXR1cm4gQ3VycmljdWx1bVZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBDdXJyaWN1bHVtVmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJDdXJyaWN1bHVtVmlld1wiO1xuXG4gIEN1cnJpY3VsdW1WaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgXCJjbGljayAuYmFja1wiOiBcImdvQmFja1wiLFxuICAgIFwiY2xpY2sgLmRlbGV0ZVwiOiBcImRlbGV0ZUN1cnJpY3VsdW1cIixcbiAgICBcImNsaWNrIC5kZWxldGVfc3VidGVzdFwiOiBcImRlbGV0ZVN1YnRlc3RcIixcbiAgICBcImNsaWNrIC5lZGl0X2luX3BsYWNlXCI6IFwiZWRpdEluUGxhY2VcIixcbiAgICAnY2xpY2sgLm5ld19zdWJ0ZXN0JzogXCJuZXdTdWJ0ZXN0XCIsXG4gICAgJ2NoYW5nZSAjZmlsZSc6ICd1cGxvYWRGaWxlJyxcbiAgICBcImZvY3Vzb3V0IC5lZGl0aW5nXCI6IFwiZWRpdGluZ1wiLFxuICAgIFwia2V5dXAgICAgLmVkaXRpbmdcIjogXCJlZGl0aW5nXCIsXG4gICAgXCJrZXlkb3duICAuZWRpdGluZ1wiOiBcImVkaXRpbmdcIixcbiAgICBcImNsaWNrIC5uYW1lLWNvbnRyb2xzIC5lZGl0XCI6IFwiZWRpdE5hbWVcIixcbiAgICBcImNsaWNrIC5uYW1lLWNvbnRyb2xzIC5zYXZlXCI6IFwic2F2ZU5hbWVcIixcbiAgICBcImNsaWNrIC5uYW1lLWNvbnRyb2xzIC5jYW5jZWxcIjogXCJjYW5jZWxFZGl0TmFtZVwiXG4gIH07XG5cbiAgQ3VycmljdWx1bVZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5jdXJyaWN1bHVtID0gb3B0aW9ucy5jdXJyaWN1bHVtO1xuICAgIHRoaXMuc3VidGVzdHMgPSBvcHRpb25zLnN1YnRlc3RzO1xuICAgIHRoaXMucXVlc3Rpb25zID0gb3B0aW9ucy5xdWVzdGlvbnM7XG4gICAgdGhpcy5xdWVzdGlvbnNCeVBhcmVudElkID0gdGhpcy5xdWVzdGlvbnMuaW5kZXhCeShcInN1YnRlc3RJZFwiKTtcbiAgICB0aGlzLnRvdGFsQXNzZXNzbWVudHMgPSBNYXRoLm1heC5hcHBseShNYXRoLCB0aGlzLnN1YnRlc3RzLnBsdWNrKFwicGFydFwiKSk7XG4gICAgdGhpcy5zdWJ0ZXN0c0J5UGFydCA9IHRoaXMuc3VidGVzdHMuaW5kZXhBcnJheUJ5KFwicGFydFwiKTtcbiAgICByZXR1cm4gdGhpcy5zdWJ0ZXN0UHJvcGVydGllcyA9IHtcbiAgICAgIFwiZ3JpZFwiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImtleVwiOiBcIml0ZW1UeXBlXCIsXG4gICAgICAgICAgXCJsYWJlbFwiOiBcIkl0ZW0gdHlwZVwiLFxuICAgICAgICAgIFwiZWRpdGFibGVcIjogdHJ1ZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJwYXJ0XCIsXG4gICAgICAgICAgXCJsYWJlbFwiOiBcIlRlcm1cIixcbiAgICAgICAgICBcImVkaXRhYmxlXCI6IHRydWVcbiAgICAgICAgfSwge1xuICAgICAgICAgIFwia2V5XCI6IFwiZ3JhZGVcIixcbiAgICAgICAgICBcImxhYmVsXCI6IFwiR3JhZGVcIixcbiAgICAgICAgICBcImVkaXRhYmxlXCI6IHRydWVcbiAgICAgICAgfSwge1xuICAgICAgICAgIFwia2V5XCI6IFwibmFtZVwiLFxuICAgICAgICAgIFwibGFiZWxcIjogXCJOYW1lXCIsXG4gICAgICAgICAgXCJlZGl0YWJsZVwiOiB0cnVlLFxuICAgICAgICAgIFwiZXNjYXBlZFwiOiB0cnVlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBcImtleVwiOiBcInRpbWVyXCIsXG4gICAgICAgICAgXCJsYWJlbFwiOiBcIlRpbWU8YnI+YWxsb3dlZFwiLFxuICAgICAgICAgIFwiZWRpdGFibGVcIjogdHJ1ZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJpdGVtc1wiLFxuICAgICAgICAgIFwibGFiZWxcIjogXCJJdGVtc1wiLFxuICAgICAgICAgIFwiY291bnRcIjogdHJ1ZSxcbiAgICAgICAgICBcImVkaXRhYmxlXCI6IHRydWVcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwic3VydmV5XCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwia2V5XCI6IFwicGFydFwiLFxuICAgICAgICAgIFwibGFiZWxcIjogXCJBc3Nlc3NtZW50XCIsXG4gICAgICAgICAgXCJlZGl0YWJsZVwiOiB0cnVlXG4gICAgICAgIH0sIHtcbiAgICAgICAgICBcImtleVwiOiBcIm5hbWVcIixcbiAgICAgICAgICBcImxhYmVsXCI6IFwiTmFtZVwiLFxuICAgICAgICAgIFwiZWRpdGFibGVcIjogdHJ1ZVxuICAgICAgICB9LCB7XG4gICAgICAgICAgXCJrZXlcIjogXCJyZXBvcnRUeXBlXCIsXG4gICAgICAgICAgXCJsYWJlbFwiOiBcIlJlcG9ydFwiLFxuICAgICAgICAgIFwiZWRpdGFibGVcIjogdHJ1ZVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfTtcbiAgfTtcblxuICBDdXJyaWN1bHVtVmlldy5wcm90b3R5cGUuaHRtbEZpbGVUYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhdHRhY2htZW50LCBieXRlcywgaHRtbCwgaSwgaW5kZXgsIGxlbiwgcHJlZml4ZXMsIHJlZiwgc2l6ZTtcbiAgICBpZiAoXyh0aGlzLmN1cnJpY3VsdW0uZ2V0QXR0YWNobWVudHMoKSkuaXNFbXB0eSgpKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgcHJlZml4ZXMgPSBbXCJcIiwgXCJLQlwiLCBcIk1CXCIsIFwiR0JcIl07XG4gICAgaHRtbCA9IFwiPGgyPkF0dGFjaG1lbnRzPC9oMj4gPHRhYmxlPlwiO1xuICAgIHJlZiA9IHRoaXMuY3VycmljdWx1bS5nZXRBdHRhY2htZW50cygpO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXR0YWNobWVudCA9IHJlZltpXTtcbiAgICAgIGJ5dGVzID0gYXR0YWNobWVudC5zaXplO1xuICAgICAgaW5kZXggPSBwYXJzZUludChNYXRoLmZsb29yKE1hdGgubG9nKGJ5dGVzKSAvIE1hdGgubG9nKDEwMjQpKSk7XG4gICAgICBzaXplID0gTWF0aC5kZWNpbWFscyhieXRlcyAvIE1hdGgucG93KDEwMjQsIGluZGV4KSwgMSkgKyBcIiBcIiArIHByZWZpeGVzW2luZGV4XTtcbiAgICAgIGh0bWwgKz0gXCI8dHI+PHRkPlwiICsgYXR0YWNobWVudC5maWxlbmFtZSArIFwiIChcIiArIHNpemUgKyBcIik8L3RkPjwvdHI+XCI7XG4gICAgfVxuICAgIGh0bWwgKz0gXCI8L3RhYmxlPlwiO1xuICAgIHJldHVybiBodG1sO1xuICB9O1xuXG4gIEN1cnJpY3VsdW1WaWV3LnByb3RvdHlwZS51cGxvYWRGaWxlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgZmlsZTtcbiAgICBmaWxlID0gZXZlbnQudGFyZ2V0LmZpbGVzWzBdO1xuICAgIHJldHVybiB0aGlzLmN1cnJpY3VsdW0uYWRkQXR0YWNobWVudCh7XG4gICAgICBmaWxlOiBmaWxlLFxuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIFV0aWxzLm1pZEFsZXJ0KFwiRXJyb3IgdXBsb2FkaW5nLlwiKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQoXCJGaWxlIHVwbG9hZGVkXCIpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyksXG4gICAgICBjb21wbGV0ZTogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuY3VycmljdWx1bS5mZXRjaCh7XG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBDdXJyaWN1bHVtVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlbGV0ZUJ1dHRvbiwgaHRtbCwgbmV3QnV0dG9ucywgc3VidGVzdFRhYmxlO1xuICAgIHN1YnRlc3RUYWJsZSA9IHRoaXMuZ2V0U3VidGVzdFRhYmxlKCk7XG4gICAgZGVsZXRlQnV0dG9uID0gXCI8YnV0dG9uIGNsYXNzPSdjb21tYW5kX3JlZCBkZWxldGUnPkRlbGV0ZTwvYnV0dG9uPlwiO1xuICAgIG5ld0J1dHRvbnMgPSBcIjxidXR0b24gY2xhc3M9J2NvbW1hbmQgbmV3X3N1YnRlc3QnIGRhdGEtcHJvdG90eXBlPSdncmlkJz5OZXcgR3JpZCBTdWJ0ZXN0PC9idXR0b24+PGJyPiA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIG5ld19zdWJ0ZXN0JyBkYXRhLXByb3RvdHlwZT0nc3VydmV5Jz5OZXcgU3VydmV5IFN1YnRlc3Q8L2J1dHRvbj5cIjtcbiAgICBodG1sID0gXCI8YnV0dG9uIGNsYXNzPSduYXYtYnV0dG9uIGJhY2snPlwiICsgKHQoJ2JhY2snKSkgKyBcIjwvYnV0dG9uPiA8aDEgY2xhc3M9J2N1cnJpY3VsdW0tbmFtZSc+PC9oMT4gPHNtYWxsIGNsYXNzPSduYW1lLWNvbnRyb2xzJz48L3NtYWxsPjxicj4gPGRpdiBjbGFzcz0nc21hbGxfZ3JleSc+RG93bmxvYWQga2V5IDxiPlwiICsgKHRoaXMuY3VycmljdWx1bS5pZC5zdWJzdHIoLTUsIDUpKSArIFwiPC9iPjwvZGl2PiA8ZGl2IGlkPSdzdWJ0ZXN0X3RhYmxlX2NvbnRhaW5lcic+IFwiICsgc3VidGVzdFRhYmxlICsgXCIgPC9kaXY+IFwiICsgKG5ld0J1dHRvbnMgfHwgXCJcIikgKyBcIiA8YnI+PGJyPiBcIiArIGRlbGV0ZUJ1dHRvbjtcbiAgICB0aGlzLiRlbC5odG1sKGh0bWwpO1xuICAgIHRoaXMucmVuZGVyTmFtZSgpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICBDdXJyaWN1bHVtVmlldy5wcm90b3R5cGUucmVuZGVyTmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGVsLmZpbmQoXCIuY3VycmljdWx1bS1uYW1lXCIpLmh0bWwodGhpcy5jdXJyaWN1bHVtLmdldEVzY2FwZWRTdHJpbmcoJ25hbWUnKSk7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIubmFtZS1jb250cm9sc1wiKS5odG1sKFwiPHNwYW4gY2xhc3M9J2VkaXQnPkVkaXQ8L3NwYW4+XCIpO1xuICB9O1xuXG4gIEN1cnJpY3VsdW1WaWV3LnByb3RvdHlwZS5lZGl0TmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkaDE7XG4gICAgJGgxID0gdGhpcy4kZWwuZmluZChcIi5jdXJyaWN1bHVtLW5hbWVcIikuaHRtbChcIjxpbnB1dCBjbGFzcz0nbmV3LW5hbWUnIHZhbHVlPSdcIiArICh0aGlzLmN1cnJpY3VsdW0uZ2V0RXNjYXBlZFN0cmluZygnbmFtZScpKSArIFwiJz5cIik7XG4gICAgJGgxLmZpbmQoXCJpbnB1dFwiKS5zZWxlY3QoKTtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5uYW1lLWNvbnRyb2xzXCIpLmh0bWwoXCI8c3BhbiBjbGFzcz0nc2F2ZSc+U2F2ZTwvc3Bhbj4gPHNwYW4gY2xhc3M9J2NhbmNlbCc+Q2FuY2VsPC9zcGFuPlwiKTtcbiAgfTtcblxuICBDdXJyaWN1bHVtVmlldy5wcm90b3R5cGUuc2F2ZU5hbWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmV3TmFtZTtcbiAgICBuZXdOYW1lID0gdGhpcy4kZWwuZmluZChcIi5uZXctbmFtZVwiKS52YWwoKTtcbiAgICByZXR1cm4gdGhpcy5jdXJyaWN1bHVtLnNhdmUoe1xuICAgICAgbmFtZTogbmV3TmFtZVxuICAgIH0sIHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgVXRpbHMudG9wQWxlcnQoXCJOYW1lIHNhdmVkXCIpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJOYW1lKCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSxcbiAgICAgIGVycm9yOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIFV0aWxzLnRvcEFsZXJ0KFwiTmV3IG5hbWUgZGlkIG5vdCBzYXZlLiBQbGVhc2UgdHJ5IGFnYWluLlwiKTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyTmFtZSgpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBDdXJyaWN1bHVtVmlldy5wcm90b3R5cGUuY2FuY2VsRWRpdE5hbWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJOYW1lKCk7XG4gIH07XG5cbiAgQ3VycmljdWx1bVZpZXcucHJvdG90eXBlLnVwZGF0ZVRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjc3VidGVzdF90YWJsZV9jb250YWluZXJcIikuaHRtbCh0aGlzLmdldFN1YnRlc3RUYWJsZSgpKTtcbiAgfTtcblxuICBDdXJyaWN1bHVtVmlldy5wcm90b3R5cGUuZ2V0U3VidGVzdFRhYmxlID0gZnVuY3Rpb24oZ3JhZGUpIHtcbiAgICB2YXIgYm9keUh0bWwsIGhlYWRlckh0bWwsIGh0bWwsIGksIGl0ZW1zLCBqLCBsZW4sIGxlbjEsIHBhcnQsIHByb21wdHMsIHByb3AsIHF1ZXN0aW9uLCByZWYsIHJlZjEsIHN1YnRlc3QsIHN1YnRlc3RzO1xuICAgIGh0bWwgPSBcIjx0YWJsZSBjbGFzcz0nc3VidGVzdHMnPlwiO1xuICAgIGh0bWwgKz0gXCI8dGJvZHk+XCI7XG4gICAgdGhpcy5zdWJ0ZXN0QnlJdGVtVHlwZSA9IG5ldyBCYWNrYm9uZS5Db2xsZWN0aW9uKHRoaXMuc3VidGVzdHMubW9kZWxzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgYSA9IFwiXCIgKyAoYS5nZXQoXCJpdGVtVHlwZVwiKSkgKyAoYS5nZXQoXCJwYXJ0XCIpKSArIChhLmdldChcImdyYWRlXCIpKTtcbiAgICAgIGIgPSBcIlwiICsgKGIuZ2V0KFwiaXRlbVR5cGVcIikpICsgKGIuZ2V0KFwicGFydFwiKSkgKyAoYi5nZXQoXCJncmFkZVwiKSk7XG4gICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKGEgPiBiKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfSkpLmluZGV4QXJyYXlCeShcIml0ZW1UeXBlXCIpO1xuICAgIHJlZiA9IHRoaXMuc3VidGVzdEJ5SXRlbVR5cGU7XG4gICAgZm9yIChwYXJ0IGluIHJlZikge1xuICAgICAgc3VidGVzdHMgPSByZWZbcGFydF07XG4gICAgICBodG1sICs9IFwiPHRyPjx0ZD4mbmJzcDs8L3RkPjwvdHI+XCI7XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSBzdWJ0ZXN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBzdWJ0ZXN0ID0gc3VidGVzdHNbaV07XG4gICAgICAgIGl0ZW1zID0gbnVsbDtcbiAgICAgICAgcHJvbXB0cyA9IG51bGw7XG4gICAgICAgIGhlYWRlckh0bWwgPSBib2R5SHRtbCA9IFwiXCI7XG4gICAgICAgIHJlZjEgPSB0aGlzLnN1YnRlc3RQcm9wZXJ0aWVzW3N1YnRlc3QuZ2V0KFwicHJvdG90eXBlXCIpXTtcbiAgICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgICAgcHJvcCA9IHJlZjFbal07XG4gICAgICAgICAgaGVhZGVySHRtbCArPSBcIjx0aD5cIiArIHByb3AubGFiZWwgKyBcIjwvdGg+XCI7XG4gICAgICAgICAgYm9keUh0bWwgKz0gdGhpcy5wcm9wQ29vayhwcm9wLCBzdWJ0ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICBodG1sICs9IFwiPHRyPlwiICsgaGVhZGVySHRtbCArIFwiPC90cj5cIjtcbiAgICAgICAgaHRtbCArPSBcIjx0cj5cIiArIGJvZHlIdG1sO1xuICAgICAgICBodG1sICs9IFwiPHRkPiA8YSBocmVmPScjY2xhc3Mvc3VidGVzdC9cIiArIHN1YnRlc3QuaWQgKyBcIic+PGltZyBjbGFzcz0nbGlua19pY29uIGVkaXQnIHRpdGxlPSdFZGl0JyBzcmM9J2ltYWdlcy9pY29uX2VkaXQucG5nJz48L2E+IDxpbWcgY2xhc3M9J2xpbmtfaWNvbiBkZWxldGVfc3VidGVzdCcgdGl0bGU9J0RlbGV0ZScgZGF0YS1zdWJ0ZXN0SWQ9J1wiICsgc3VidGVzdC5pZCArIFwiJyBzcmM9J2ltYWdlcy9pY29uX2RlbGV0ZS5wbmcnPiA8YSBocmVmPScjY2xhc3MvcnVuL3Rlc3QvXCIgKyBzdWJ0ZXN0LmlkICsgXCInPjxpbWcgY2xhc3M9J2xpbmtfaWNvbiB0ZXN0UnVuJyB0aXRsZT0nVGVzdCBydW4nIHNyYz0naW1hZ2VzL2ljb25fcnVuLnBuZyc+PC9hPiA8L3RkPiA8L3RyPlwiO1xuICAgICAgICBpZiAoc3VidGVzdC5nZXQoXCJwcm90b3R5cGVcIikgPT09IFwiZ3JpZFwiKSB7XG4gICAgICAgICAgaXRlbXMgPSBzdWJ0ZXN0LmdldChcIml0ZW1zXCIpLmpvaW4oXCIgXCIpO1xuICAgICAgICAgIGh0bWwgKz0gXCI8dHI+PHRkIGNvbHNwYW49J1wiICsgdGhpcy5zdWJ0ZXN0UHJvcGVydGllc1snZ3JpZCddLmxlbmd0aCArIFwiJz5cIiArIGl0ZW1zICsgXCI8L3RkPjwvdHI+XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1YnRlc3QuZ2V0KFwicHJvdG90eXBlXCIpID09PSBcInN1cnZleVwiICYmICh0aGlzLnF1ZXN0aW9uc0J5UGFyZW50SWRbc3VidGVzdC5pZF0gIT0gbnVsbCkpIHtcbiAgICAgICAgICBwcm9tcHRzID0gKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBrLCBsZW4yLCByZWYyLCByZXN1bHRzO1xuICAgICAgICAgICAgcmVmMiA9IHRoaXMucXVlc3Rpb25zQnlQYXJlbnRJZFtzdWJ0ZXN0LmlkXTtcbiAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoayA9IDAsIGxlbjIgPSByZWYyLmxlbmd0aDsgayA8IGxlbjI7IGsrKykge1xuICAgICAgICAgICAgICBxdWVzdGlvbiA9IHJlZjJba107XG4gICAgICAgICAgICAgIHJlc3VsdHMucHVzaChxdWVzdGlvbi5nZXQoXCJwcm9tcHRcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgICAgfSkuY2FsbCh0aGlzKSkuam9pbihcIiwgXCIpO1xuICAgICAgICAgIGh0bWwgKz0gXCI8dHI+PHRkIGNvbHNwYW49J1wiICsgdGhpcy5zdWJ0ZXN0UHJvcGVydGllc1snc3VydmV5J10ubGVuZ3RoICsgXCInPlwiICsgcHJvbXB0cyArIFwiPC90ZD48L3RyPlwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGh0bWwgKz0gXCI8L3Rib2R5PiA8L3RhYmxlPlwiO1xuICAgIHJldHVybiBodG1sO1xuICB9O1xuXG4gIEN1cnJpY3VsdW1WaWV3LnByb3RvdHlwZS5wcm9wQ29vayA9IGZ1bmN0aW9uKHByb3AsIHN1YnRlc3QpIHtcbiAgICB2YXIgZWRpdE9yTm90LCBudW1iZXJPck5vdCwgdmFsdWU7XG4gICAgdmFsdWUgPSBwcm9wLmtleSAhPSBudWxsID8gc3VidGVzdC5nZXQocHJvcC5rZXkpIDogXCImbmJzcDtcIjtcbiAgICB2YWx1ZSA9IHByb3AuZXNjYXBlID8gc3VidGVzdC5lc2NhcGUocHJvcC5rZXkpIDogdmFsdWU7XG4gICAgaWYgKHByb3AuY291bnQgIT0gbnVsbCkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgfVxuICAgIGVkaXRPck5vdCA9IHByb3AuZWRpdGFibGUgPyBcImNsYXNzPSdlZGl0X2luX3BsYWNlJ1wiIDogXCJcIjtcbiAgICBudW1iZXJPck5vdCA9IF8uaXNOdW1iZXIodmFsdWUpID8gXCJkYXRhLWlzTnVtYmVyPSd0cnVlJ1wiIDogXCJkYXRhLWlzTnVtYmVyPSdmYWxzZSdcIjtcbiAgICByZXR1cm4gXCI8dGQgY2xhc3M9J2VkaXRfaW5fcGxhY2UnPjxzcGFuIGRhdGEtc3VidGVzdElkPSdcIiArIHN1YnRlc3QuaWQgKyBcIicgZGF0YS1rZXk9J1wiICsgcHJvcC5rZXkgKyBcIicgZGF0YS12YWx1ZT0nXCIgKyB2YWx1ZSArIFwiJyBcIiArIGVkaXRPck5vdCArIFwiIFwiICsgbnVtYmVyT3JOb3QgKyBcIj5cIiArIHZhbHVlICsgXCI8L2Rpdj48L3RkPlwiO1xuICB9O1xuXG4gIEN1cnJpY3VsdW1WaWV3LnByb3RvdHlwZS5lZGl0SW5QbGFjZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICRzcGFuLCAkdGFyZ2V0LCAkdGQsICR0ZXh0YXJlYSwgY2xhc3NlcywgZ3VpZCwgaXNOdW1iZXIsIGtleSwgbWFyZ2lucywgb2xkVmFsdWUsIHN1YnRlc3QsIHN1YnRlc3RJZCwgdHJhbnNmZXJWYXJpYWJsZXM7XG4gICAgaWYgKHRoaXMuYWxyZWFkeUVkaXRpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5hbHJlYWR5RWRpdGluZyA9IHRydWU7XG4gICAgJHNwYW4gPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgaWYgKCRzcGFuLnByb3AoXCJ0YWdOYW1lXCIpID09PSBcIlREXCIpIHtcbiAgICAgICRzcGFuID0gJHNwYW4uZmluZChcInNwYW5cIik7XG4gICAgICBpZiAoJHNwYW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgJHRkID0gJHNwYW4ucGFyZW50KCk7XG4gICAgdGhpcy4kb2xkU3BhbiA9ICRzcGFuLmNsb25lKCk7XG4gICAgaWYgKCRzcGFuLnByb3AoXCJ0YWdOYW1lXCIpID09PSBcIlRFWFRBUkVBXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZ3VpZCA9IFV0aWxzLmd1aWQoKTtcbiAgICBrZXkgPSAkc3Bhbi5hdHRyKFwiZGF0YS1rZXlcIik7XG4gICAgaXNOdW1iZXIgPSAkc3Bhbi5hdHRyKFwiZGF0YS1pc051bWJlclwiKSA9PT0gXCJ0cnVlXCI7XG4gICAgc3VidGVzdElkID0gJHNwYW4uYXR0cihcImRhdGEtc3VidGVzdElkXCIpO1xuICAgIHN1YnRlc3QgPSB0aGlzLnN1YnRlc3RzLmdldChzdWJ0ZXN0SWQpO1xuICAgIG9sZFZhbHVlID0gc3VidGVzdC5nZXQoa2V5KTtcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgIGNsYXNzZXMgPSAoJHRhcmdldC5hdHRyKFwiY2xhc3NcIikgfHwgXCJcIikucmVwbGFjZShcInNldHRpbmdzXCIsIFwiXCIpO1xuICAgIG1hcmdpbnMgPSAkdGFyZ2V0LmNzcyhcIm1hcmdpblwiKTtcbiAgICBpZiAoa2V5ID09PSAnaXRlbXMnKSB7XG4gICAgICBvbGRWYWx1ZSA9IG9sZFZhbHVlLmpvaW4oXCIgXCIpO1xuICAgIH1cbiAgICB0cmFuc2ZlclZhcmlhYmxlcyA9IFwiZGF0YS1pc051bWJlcj0nXCIgKyBpc051bWJlciArIFwiJyBkYXRhLWtleT0nXCIgKyBrZXkgKyBcIicgZGF0YS1zdWJ0ZXN0SWQ9J1wiICsgc3VidGVzdElkICsgXCInIFwiO1xuICAgICR0ZC5odG1sKFwiPHRleHRhcmVhIGlkPSdcIiArIGd1aWQgKyBcIicgXCIgKyB0cmFuc2ZlclZhcmlhYmxlcyArIFwiIGNsYXNzPSdlZGl0aW5nIFwiICsgY2xhc3NlcyArIFwiJyBzdHlsZT0nbWFyZ2luOlwiICsgbWFyZ2lucyArIFwiJz5cIiArIG9sZFZhbHVlICsgXCI8L3RleHRhcmVhPlwiKTtcbiAgICAkdGV4dGFyZWEgPSAkKFwiI1wiICsgZ3VpZCk7XG4gICAgcmV0dXJuICR0ZXh0YXJlYS5mb2N1cygpO1xuICB9O1xuXG4gIEN1cnJpY3VsdW1WaWV3LnByb3RvdHlwZS5lZGl0aW5nID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldCwgJHRkLCBhdHRyaWJ1dGVzLCBpc051bWJlciwga2V5LCBuZXdWYWx1ZSwgb2xkVmFsdWUsIHN1YnRlc3QsIHN1YnRlc3RJZDtcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgICR0ZCA9ICR0YXJnZXQucGFyZW50KCk7XG4gICAgaWYgKGV2ZW50LndoaWNoID09PSAyNyB8fCBldmVudC50eXBlID09PSBcImZvY3Vzb3V0XCIpIHtcbiAgICAgICR0YXJnZXQucmVtb3ZlKCk7XG4gICAgICAkdGQuaHRtbCh0aGlzLiRvbGRTcGFuKTtcbiAgICAgIHRoaXMuYWxyZWFkeUVkaXRpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCEoZXZlbnQud2hpY2ggPT09IDEzICYmIGV2ZW50LnR5cGUgPT09IFwia2V5ZG93blwiKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHRoaXMuYWxyZWFkeUVkaXRpbmcgPSBmYWxzZTtcbiAgICBrZXkgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLWtleVwiKTtcbiAgICBpc051bWJlciA9ICR0YXJnZXQuYXR0cihcImRhdGEtaXNOdW1iZXJcIikgPT09IFwidHJ1ZVwiO1xuICAgIHN1YnRlc3RJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtc3VidGVzdElkXCIpO1xuICAgIHN1YnRlc3QgPSB0aGlzLnN1YnRlc3RzLmdldChzdWJ0ZXN0SWQpO1xuICAgIG9sZFZhbHVlID0gc3VidGVzdC5nZXQoa2V5KTtcbiAgICBuZXdWYWx1ZSA9ICR0YXJnZXQudmFsKCk7XG4gICAgbmV3VmFsdWUgPSBpc051bWJlciA/IHBhcnNlSW50KG5ld1ZhbHVlKSA6IG5ld1ZhbHVlO1xuICAgIGlmIChrZXkgPT09IFwiaXRlbXNcIikge1xuICAgICAgbmV3VmFsdWUgPSBuZXdWYWx1ZS5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICBpZiAoL1xcdHwsLy50ZXN0KG5ld1ZhbHVlKSkge1xuICAgICAgICBhbGVydChcIlBsZWFzZSByZW1lbWJlclxcblxcbkdyaWQgaXRlbXMgYXJlIHNwYWNlIFxcXCIgXFxcIiBkZWxpbWl0ZWRcIik7XG4gICAgICB9XG4gICAgICBuZXdWYWx1ZSA9IF8uY29tcGFjdChuZXdWYWx1ZS5zcGxpdChcIiBcIikpO1xuICAgIH1cbiAgICBpZiAoU3RyaW5nKG5ld1ZhbHVlKSAhPT0gU3RyaW5nKG9sZFZhbHVlKSkge1xuICAgICAgYXR0cmlidXRlcyA9IHt9O1xuICAgICAgYXR0cmlidXRlc1trZXldID0gbmV3VmFsdWU7XG4gICAgICBzdWJ0ZXN0LnNhdmUoYXR0cmlidXRlcywge1xuICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBVdGlscy5taWRBbGVydChcIlN1YnRlc3Qgc2F2ZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gc3VidGVzdC5mZXRjaCh7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVUYWJsZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSxcbiAgICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBzdWJ0ZXN0LmZldGNoKHtcbiAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudXBkYXRlVGFibGUoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxlcnQoXCJQbGVhc2UgdHJ5IHRvIHNhdmUgYWdhaW4sIGl0IGRpZG4ndCB3b3JrIHRoYXQgdGltZS5cIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEN1cnJpY3VsdW1WaWV3LnByb3RvdHlwZS5nb0JhY2sgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcImFzc2Vzc21lbnRzXCIsIHRydWUpO1xuICB9O1xuXG4gIEN1cnJpY3VsdW1WaWV3LnByb3RvdHlwZS5kZWxldGVDdXJyaWN1bHVtID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKGNvbmZpcm0oXCJEZWxldGUgY3VycmljdWx1bVxcblwiICsgKHRoaXMuY3VycmljdWx1bS5nZXQoJ25hbWUnKSkgKyBcIj9cIikpIHtcbiAgICAgIHJldHVybiB0aGlzLmN1cnJpY3VsdW0uZGVzdHJveSgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwiYXNzZXNzbWVudHNcIiwgdHJ1ZSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIEN1cnJpY3VsdW1WaWV3LnByb3RvdHlwZS5uZXdTdWJ0ZXN0ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgZ3VpZCwgcHJvdG9UZW1wcywgcHJvdG90eXBlLCBzdWJ0ZXN0LCBzdWJ0ZXN0QXR0cmlidXRlcztcbiAgICBwcm90b3R5cGUgPSAkKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtcHJvdG90eXBlXCIpO1xuICAgIGd1aWQgPSBVdGlscy5ndWlkKCk7XG4gICAgc3VidGVzdEF0dHJpYnV0ZXMgPSB7XG4gICAgICBcIl9pZFwiOiBndWlkLFxuICAgICAgXCJjdXJyaWN1bHVtSWRcIjogdGhpcy5jdXJyaWN1bHVtLmlkLFxuICAgICAgXCJwcm90b3R5cGVcIjogcHJvdG90eXBlLFxuICAgICAgXCJjYXB0dXJlTGFzdEF0dGVtcHRlZFwiOiBmYWxzZSxcbiAgICAgIFwiZW5kT2ZMaW5lXCI6IGZhbHNlXG4gICAgfTtcbiAgICBwcm90b1RlbXBzID0gVGFuZ2VyaW5lLnRlbXBsYXRlcy5nZXQoXCJwcm90b3R5cGVzXCIpO1xuICAgIHN1YnRlc3RBdHRyaWJ1dGVzID0gJC5leHRlbmQocHJvdG9UZW1wc1twcm90b3R5cGVdLCBzdWJ0ZXN0QXR0cmlidXRlcyk7XG4gICAgc3VidGVzdCA9IG5ldyBTdWJ0ZXN0KHN1YnRlc3RBdHRyaWJ1dGVzKTtcbiAgICByZXR1cm4gc3VidGVzdC5zYXZlKG51bGwsIHtcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcImNsYXNzL3N1YnRlc3QvXCIgKyBndWlkLCB0cnVlKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhbGVydChcIlBsZWFzZSB0cnkgYWdhaW4uIFRoZXJlIHdhcyBhIHByb2JsZW0gY3JlYXRpbmcgdGhlIG5ldyBzdWJ0ZXN0LlwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBDdXJyaWN1bHVtVmlldy5wcm90b3R5cGUuZGVsZXRlU3VidGVzdCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHN1YnRlc3QsIHN1YnRlc3RJZDtcbiAgICBzdWJ0ZXN0SWQgPSAkKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtc3VidGVzdElkXCIpO1xuICAgIHN1YnRlc3QgPSB0aGlzLnN1YnRlc3RzLmdldChzdWJ0ZXN0SWQpO1xuICAgIGlmIChjb25maXJtKFwiRGVsZXRlIHN1YnRlc3RcXG5cIiArIChzdWJ0ZXN0LmdldCgnbmFtZScpKSArIFwiP1wiKSkge1xuICAgICAgcmV0dXJuIHN1YnRlc3QuZGVzdHJveSh7XG4gICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIF90aGlzLnN1YnRlc3RzLnJlbW92ZShzdWJ0ZXN0SWQpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZVRhYmxlKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcyksXG4gICAgICAgIGVycm9yOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYWxlcnQoXCJQbGVhc2UgdHJ5IGFnYWluLCBjb3VsZCBub3QgZGVsZXRlIHN1YnRlc3QuXCIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIEN1cnJpY3VsdW1WaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgQ3VycmljdWxhIGV4dGVuZHMgQmFja2JvbmUuQ29sbGVjdGlvblxuXG4gIHVybCA6IFwiY3VycmljdWx1bVwiXG4gIG1vZGVsIDogQ3VycmljdWx1bVxuIiwidmFyIEN1cnJpY3VsYSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkN1cnJpY3VsYSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChDdXJyaWN1bGEsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEN1cnJpY3VsYSgpIHtcbiAgICByZXR1cm4gQ3VycmljdWxhLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgQ3VycmljdWxhLnByb3RvdHlwZS51cmwgPSBcImN1cnJpY3VsdW1cIjtcblxuICBDdXJyaWN1bGEucHJvdG90eXBlLm1vZGVsID0gQ3VycmljdWx1bTtcblxuICByZXR1cm4gQ3VycmljdWxhO1xuXG59KShCYWNrYm9uZS5Db2xsZWN0aW9uKTtcblxuIiwiY2xhc3MgQ3VycmljdWxhVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIkN1cnJpY3VsYVZpZXdcIlxuXG4gIGV2ZW50cyA6XG4gICAgJ2NsaWNrIC5pbXBvcnQnIDogJ2dvdG9JbXBvcnQnXG4gICAgJ2NsaWNrIC5iYWNrJyAgIDogJ2dvQmFjaydcblxuICBnb0JhY2s6IC0+IGhpc3RvcnkuYmFjaygpXG5cbiAgZ290b0ltcG9ydDogLT5cbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiY3VycmljdWx1bUltcG9ydFwiLCB0cnVlXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMgKS0+XG4gICAgQHN1YlZpZXcgPSBuZXcgQ3VycmljdWxhTGlzdFZpZXdcbiAgICAgIGN1cnJpY3VsYSA6IG9wdGlvbnMuY3VycmljdWxhXG5cbiAgcmVuZGVyOiAtPlxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGJ1dHRvbiBjbGFzcz0nYmFjayBuYXYtYnV0dG9uJz4je3QoJ2JhY2snKX08L2J1dHRvbj48YnI+XG4gICAgICA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIGltcG9ydCc+I3t0KCdpbXBvcnQnKX08L2J1dHRvbj5cbiAgICAgIDxicj5cbiAgICAgIDxkaXYgaWQ9J2N1cnJpY3VsYV9saXN0Jz48L2Rpdj5cbiAgICBcIlxuXG4gICAgQHN1YlZpZXcuc2V0RWxlbWVudCBAJGVsLmZpbmQoJyNjdXJyaWN1bGFfbGlzdCcpXG4gICAgQHN1YlZpZXcucmVuZGVyKClcblxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuXG4gIG9uQ2xvc2U6IC0+XG4gICAgQHN1YlZpZXc/LmNsb3NlKCkiLCJ2YXIgQ3VycmljdWxhVmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkN1cnJpY3VsYVZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoQ3VycmljdWxhVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQ3VycmljdWxhVmlldygpIHtcbiAgICByZXR1cm4gQ3VycmljdWxhVmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEN1cnJpY3VsYVZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiQ3VycmljdWxhVmlld1wiO1xuXG4gIEN1cnJpY3VsYVZpZXcucHJvdG90eXBlLmV2ZW50cyA9IHtcbiAgICAnY2xpY2sgLmltcG9ydCc6ICdnb3RvSW1wb3J0JyxcbiAgICAnY2xpY2sgLmJhY2snOiAnZ29CYWNrJ1xuICB9O1xuXG4gIEN1cnJpY3VsYVZpZXcucHJvdG90eXBlLmdvQmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBoaXN0b3J5LmJhY2soKTtcbiAgfTtcblxuICBDdXJyaWN1bGFWaWV3LnByb3RvdHlwZS5nb3RvSW1wb3J0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJjdXJyaWN1bHVtSW1wb3J0XCIsIHRydWUpO1xuICB9O1xuXG4gIEN1cnJpY3VsYVZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuc3ViVmlldyA9IG5ldyBDdXJyaWN1bGFMaXN0Vmlldyh7XG4gICAgICBjdXJyaWN1bGE6IG9wdGlvbnMuY3VycmljdWxhXG4gICAgfSk7XG4gIH07XG5cbiAgQ3VycmljdWxhVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwuaHRtbChcIjxidXR0b24gY2xhc3M9J2JhY2sgbmF2LWJ1dHRvbic+XCIgKyAodCgnYmFjaycpKSArIFwiPC9idXR0b24+PGJyPiA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIGltcG9ydCc+XCIgKyAodCgnaW1wb3J0JykpICsgXCI8L2J1dHRvbj4gPGJyPiA8ZGl2IGlkPSdjdXJyaWN1bGFfbGlzdCc+PC9kaXY+XCIpO1xuICAgIHRoaXMuc3ViVmlldy5zZXRFbGVtZW50KHRoaXMuJGVsLmZpbmQoJyNjdXJyaWN1bGFfbGlzdCcpKTtcbiAgICB0aGlzLnN1YlZpZXcucmVuZGVyKCk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIEN1cnJpY3VsYVZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmVmO1xuICAgIHJldHVybiAocmVmID0gdGhpcy5zdWJWaWV3KSAhPSBudWxsID8gcmVmLmNsb3NlKCkgOiB2b2lkIDA7XG4gIH07XG5cbiAgcmV0dXJuIEN1cnJpY3VsYVZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBDdXJyaWN1bGFMaXN0VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiQ3VycmljdWxhTGlzdFZpZXdcIlxuICB0YWdOYW1lOiBcInVsXCJcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBAdmlld3MgPSBbXVxuICAgIEBjdXJyaWN1bGEgPSBvcHRpb25zLmN1cnJpY3VsYVxuICAgIEBjdXJyaWN1bGEub24/IFwiYWxsXCIsIEByZW5kZXJcblxuXG4gIHJlbmRlcjogPT5cbiAgICByZXR1cm4gaWYgQGN1cnJpY3VsYS5sZW5ndGggPT0gMCBcbiAgICBAJGVsLmh0bWwgXCI8aDE+Q3VycmljdWxhPC9oMT5cIlxuICAgIEBjbG9zZVZpZXdzXG4gICAgQGN1cnJpY3VsYS5lYWNoIChjdXJyaWN1bHVtKSA9PlxuICAgICAgdmlldyA9IG5ldyBDdXJyaWN1bHVtTGlzdEVsZW1lbnRWaWV3XG4gICAgICAgIFwiY3VycmljdWx1bVwiIDogY3VycmljdWx1bVxuICAgICAgdmlldy5yZW5kZXIoKVxuICAgICAgQCRlbC5hcHBlbmQgdmlldy5lbFxuICAgICAgQHZpZXdzLnB1c2ggdmlld1xuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG4gIFxuICBvbkNsb3NlOiAtPlxuICAgIEBjbG9zZVZpZXdzKClcbiAgXG4gIGNsb3NlVmlld3M6IC0+XG4gICAgZm9yIHZpZXcgaW4gQHZpZXdzXG4gICAgICB2aWV3LmNsb3NlPygpXG4gICIsInZhciBDdXJyaWN1bGFMaXN0VmlldyxcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5DdXJyaWN1bGFMaXN0VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChDdXJyaWN1bGFMaXN0Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQ3VycmljdWxhTGlzdFZpZXcoKSB7XG4gICAgdGhpcy5yZW5kZXIgPSBiaW5kKHRoaXMucmVuZGVyLCB0aGlzKTtcbiAgICByZXR1cm4gQ3VycmljdWxhTGlzdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBDdXJyaWN1bGFMaXN0Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJDdXJyaWN1bGFMaXN0Vmlld1wiO1xuXG4gIEN1cnJpY3VsYUxpc3RWaWV3LnByb3RvdHlwZS50YWdOYW1lID0gXCJ1bFwiO1xuXG4gIEN1cnJpY3VsYUxpc3RWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBiYXNlO1xuICAgIHRoaXMudmlld3MgPSBbXTtcbiAgICB0aGlzLmN1cnJpY3VsYSA9IG9wdGlvbnMuY3VycmljdWxhO1xuICAgIHJldHVybiB0eXBlb2YgKGJhc2UgPSB0aGlzLmN1cnJpY3VsYSkub24gPT09IFwiZnVuY3Rpb25cIiA/IGJhc2Uub24oXCJhbGxcIiwgdGhpcy5yZW5kZXIpIDogdm9pZCAwO1xuICB9O1xuXG4gIEN1cnJpY3VsYUxpc3RWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5jdXJyaWN1bGEubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuJGVsLmh0bWwoXCI8aDE+Q3VycmljdWxhPC9oMT5cIik7XG4gICAgdGhpcy5jbG9zZVZpZXdzO1xuICAgIHRoaXMuY3VycmljdWxhLmVhY2goKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY3VycmljdWx1bSkge1xuICAgICAgICB2YXIgdmlldztcbiAgICAgICAgdmlldyA9IG5ldyBDdXJyaWN1bHVtTGlzdEVsZW1lbnRWaWV3KHtcbiAgICAgICAgICBcImN1cnJpY3VsdW1cIjogY3VycmljdWx1bVxuICAgICAgICB9KTtcbiAgICAgICAgdmlldy5yZW5kZXIoKTtcbiAgICAgICAgX3RoaXMuJGVsLmFwcGVuZCh2aWV3LmVsKTtcbiAgICAgICAgcmV0dXJuIF90aGlzLnZpZXdzLnB1c2godmlldyk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgQ3VycmljdWxhTGlzdFZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9zZVZpZXdzKCk7XG4gIH07XG5cbiAgQ3VycmljdWxhTGlzdFZpZXcucHJvdG90eXBlLmNsb3NlVmlld3MgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgbGVuLCByZWYsIHJlc3VsdHMsIHZpZXc7XG4gICAgcmVmID0gdGhpcy52aWV3cztcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2aWV3ID0gcmVmW2ldO1xuICAgICAgcmVzdWx0cy5wdXNoKHR5cGVvZiB2aWV3LmNsb3NlID09PSBcImZ1bmN0aW9uXCIgPyB2aWV3LmNsb3NlKCkgOiB2b2lkIDApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICByZXR1cm4gQ3VycmljdWxhTGlzdFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBDdXJyaWN1bHVtTGlzdEVsZW1lbnRWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZSA6IFwiQ3VycmljdWx1bUxpc3RFbGVtZW50Vmlld1wiXG4gIHRhZ05hbWU6IFwibGlcIlxuXG4gIGV2ZW50czpcbiAgICAnY2xpY2sgLnRvZ2dsZV9tZW51JyA6ICd0b2dnbGVNZW51J1xuICAgICdjbGljayAuZHVwbGljYXRlJyAgIDogJ2R1cGxpY2F0ZSdcbiAgICAnY2xpY2sgLmRlbGV0ZScgICAgICAgICA6ICdkZWxldGVUb2dnbGUnXG4gICAgJ2NsaWNrIC5kZWxldGVfY2FuY2VsJyAgOiAnZGVsZXRlVG9nZ2xlJ1xuICAgICdjbGljayAuZGVsZXRlX2NvbmZpcm0nIDogJ2RlbGV0ZSdcblxuXG5cblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBAY3VycmljdWx1bSA9IG9wdGlvbnMuY3VycmljdWx1bVxuICAgIEBzdWJ0ZXN0cyA9IG9wdGlvbnMuc3VidGVzdHNcblxuICBkdXBsaWNhdGU6IC0+XG4gICAgbmV3TmFtZSA9IFwiQ29weSBvZiBcIiArIEBjdXJyaWN1bHVtLmdldChcIm5hbWVcIilcbiAgICBAY3VycmljdWx1bS5kdXBsaWNhdGUgeyBuYW1lIDogbmV3TmFtZSB9LCBudWxsLCBudWxsLCAoY3VycmljdWx1bSkgPT4gXG4gICAgICBAY3VycmljdWx1bS50cmlnZ2VyIFwibmV3XCIsIGN1cnJpY3VsdW1cblxuICB0b2dnbGVNZW51OiAtPlxuICAgIEAkZWwuZmluZChcIi5zcF9kb3duLCAuc3BfcmlnaHRcIikudG9nZ2xlQ2xhc3MoJ3NwX2Rvd24nKS50b2dnbGVDbGFzcygnc3BfcmlnaHQnKVxuICAgIEAkZWwuZmluZChcIi5tZW51XCIpLmZhZGVUb2dnbGUoMTUwKVxuXG4gIGRlbGV0ZVRvZ2dsZTogLT4gQCRlbC5maW5kKFwiLmRlbGV0ZV9jb25maXJtXCIpLmZhZGVUb2dnbGUoMjUwKTsgZmFsc2VcblxuICAjIGRlZXAgbm9uLWdlcm5lcmljIGRlbGV0ZVxuICBkZWxldGU6ID0+XG4gICAgIyByZW1vdmUgZnJvbSBjb2xsZWN0aW9uXG4gICAgQGN1cnJpY3VsdW0uZGVzdHJveSgpXG5cblxuICByZW5kZXI6IC0+XG4gICAgdG9nZ2xlQnV0dG9uICAgID0gXCI8ZGl2IGNsYXNzPSd0b2dnbGVfbWVudSBzcF9yaWdodCc+PGRpdj4gPC9kaXY+PC9kaXY+XCJcbiAgICBlZGl0QnV0dG9uICAgICAgPSBcIjxhIGhyZWY9JyNjdXJyaWN1bHVtLyN7QGN1cnJpY3VsdW0uaWR9Jz48aW1nIGNsYXNzPSdsaW5rX2ljb24gZWRpdCcgdGl0bGU9J0VkaXQnIHNyYz0naW1hZ2VzL2ljb25fZWRpdC5wbmcnPjwvYT5cIlxuICAgIGR1cGxpY2F0ZUJ1dHRvbiA9IFwiPGltZyBjbGFzcz0nbGlua19pY29uIGR1cGxpY2F0ZScgdGl0bGU9J0R1cGxpY2F0ZScgc3JjPSdpbWFnZXMvaWNvbl9kdXBsaWNhdGUucG5nJz5cIlxuICAgIGRlbGV0ZUJ1dHRvbiAgICA9IFwiPGltZyBjbGFzcz0nZGVsZXRlIGxpbmtfaWNvbicgdGl0bGU9J0RlbGV0ZScgc3JjPSdpbWFnZXMvaWNvbl9kZWxldGUucG5nJz5cIlxuICAgIGRlbGV0ZUNvbmZpcm0gICA9IFwiPHNwYW4gY2xhc3M9J2RlbGV0ZV9jb25maXJtJz48ZGl2IGNsYXNzPSdtZW51X2JveCc+Q29uZmlybSA8YnV0dG9uIGNsYXNzPSdkZWxldGVfeWVzIGNvbW1hbmRfcmVkJz5EZWxldGU8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz0nZGVsZXRlX2NhbmNlbCBjb21tYW5kJz5DYW5jZWw8L2J1dHRvbj48L2Rpdj48L3NwYW4+XCJcbiAgICBkb3dubG9hZEtleSAgICAgPSBcIjxzcGFuIGNsYXNzPSdkb3dubG9hZF9rZXkgc21hbGxfZ3JleSc+RG93bmxvYWQga2V5IDxiPiN7QGN1cnJpY3VsdW0uaWQuc3Vic3RyKC01LDUpfTwvYj48L3NwYW4+XCJcblxuICAgIG5hbWUgPSBcIjxzcGFuIGNsYXNzPSd0b2dnbGVfbWVudSc+I3tAY3VycmljdWx1bS5lc2NhcGUoJ25hbWUnKX08L3NwYW4+XCJcbiAgICBtZW51ID0gXCJcbiAgICAgICN7ZWRpdEJ1dHRvbn1cbiAgICAgICN7ZHVwbGljYXRlQnV0dG9ufVxuICAgICAgI3tkZWxldGVCdXR0b259XG4gICAgICAje2Rvd25sb2FkS2V5fVxuICAgICAgI3tkZWxldGVDb25maXJtfVxuICAgIFwiIGlmIFRhbmdlcmluZS51c2VyLmlzQWRtaW4oKVxuXG4gICAgbWVudSA9IFwiXG4gICAgICAje2VkaXRCdXR0b259XG4gICAgICAje2Rvd25sb2FkS2V5fVxuICAgIFwiIGlmIG5vdCBUYW5nZXJpbmUudXNlci5pc0FkbWluKClcblxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGRpdj5cbiAgICAgICAgI3t0b2dnbGVCdXR0b259XG4gICAgICAgICN7bmFtZX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0nY29uZmlybWF0aW9uIG1lbnUnPlxuICAgICAgICAgICN7bWVudX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgIFwiXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiIiwidmFyIEN1cnJpY3VsdW1MaXN0RWxlbWVudFZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuQ3VycmljdWx1bUxpc3RFbGVtZW50VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChDdXJyaWN1bHVtTGlzdEVsZW1lbnRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBDdXJyaWN1bHVtTGlzdEVsZW1lbnRWaWV3KCkge1xuICAgIHRoaXNbXCJkZWxldGVcIl0gPSBiaW5kKHRoaXNbXCJkZWxldGVcIl0sIHRoaXMpO1xuICAgIHJldHVybiBDdXJyaWN1bHVtTGlzdEVsZW1lbnRWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgQ3VycmljdWx1bUxpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJDdXJyaWN1bHVtTGlzdEVsZW1lbnRWaWV3XCI7XG5cbiAgQ3VycmljdWx1bUxpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUudGFnTmFtZSA9IFwibGlcIjtcblxuICBDdXJyaWN1bHVtTGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrIC50b2dnbGVfbWVudSc6ICd0b2dnbGVNZW51JyxcbiAgICAnY2xpY2sgLmR1cGxpY2F0ZSc6ICdkdXBsaWNhdGUnLFxuICAgICdjbGljayAuZGVsZXRlJzogJ2RlbGV0ZVRvZ2dsZScsXG4gICAgJ2NsaWNrIC5kZWxldGVfY2FuY2VsJzogJ2RlbGV0ZVRvZ2dsZScsXG4gICAgJ2NsaWNrIC5kZWxldGVfY29uZmlybSc6ICdkZWxldGUnXG4gIH07XG5cbiAgQ3VycmljdWx1bUxpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLmN1cnJpY3VsdW0gPSBvcHRpb25zLmN1cnJpY3VsdW07XG4gICAgcmV0dXJuIHRoaXMuc3VidGVzdHMgPSBvcHRpb25zLnN1YnRlc3RzO1xuICB9O1xuXG4gIEN1cnJpY3VsdW1MaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLmR1cGxpY2F0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdOYW1lO1xuICAgIG5ld05hbWUgPSBcIkNvcHkgb2YgXCIgKyB0aGlzLmN1cnJpY3VsdW0uZ2V0KFwibmFtZVwiKTtcbiAgICByZXR1cm4gdGhpcy5jdXJyaWN1bHVtLmR1cGxpY2F0ZSh7XG4gICAgICBuYW1lOiBuZXdOYW1lXG4gICAgfSwgbnVsbCwgbnVsbCwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY3VycmljdWx1bSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuY3VycmljdWx1bS50cmlnZ2VyKFwibmV3XCIsIGN1cnJpY3VsdW0pO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gIH07XG5cbiAgQ3VycmljdWx1bUxpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUudG9nZ2xlTWVudSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJGVsLmZpbmQoXCIuc3BfZG93biwgLnNwX3JpZ2h0XCIpLnRvZ2dsZUNsYXNzKCdzcF9kb3duJykudG9nZ2xlQ2xhc3MoJ3NwX3JpZ2h0Jyk7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIubWVudVwiKS5mYWRlVG9nZ2xlKDE1MCk7XG4gIH07XG5cbiAgQ3VycmljdWx1bUxpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuZGVsZXRlVG9nZ2xlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwuZmluZChcIi5kZWxldGVfY29uZmlybVwiKS5mYWRlVG9nZ2xlKDI1MCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEN1cnJpY3VsdW1MaXN0RWxlbWVudFZpZXcucHJvdG90eXBlW1wiZGVsZXRlXCJdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmljdWx1bS5kZXN0cm95KCk7XG4gIH07XG5cbiAgQ3VycmljdWx1bUxpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlbGV0ZUJ1dHRvbiwgZGVsZXRlQ29uZmlybSwgZG93bmxvYWRLZXksIGR1cGxpY2F0ZUJ1dHRvbiwgZWRpdEJ1dHRvbiwgbWVudSwgbmFtZSwgdG9nZ2xlQnV0dG9uO1xuICAgIHRvZ2dsZUJ1dHRvbiA9IFwiPGRpdiBjbGFzcz0ndG9nZ2xlX21lbnUgc3BfcmlnaHQnPjxkaXY+IDwvZGl2PjwvZGl2PlwiO1xuICAgIGVkaXRCdXR0b24gPSBcIjxhIGhyZWY9JyNjdXJyaWN1bHVtL1wiICsgdGhpcy5jdXJyaWN1bHVtLmlkICsgXCInPjxpbWcgY2xhc3M9J2xpbmtfaWNvbiBlZGl0JyB0aXRsZT0nRWRpdCcgc3JjPSdpbWFnZXMvaWNvbl9lZGl0LnBuZyc+PC9hPlwiO1xuICAgIGR1cGxpY2F0ZUJ1dHRvbiA9IFwiPGltZyBjbGFzcz0nbGlua19pY29uIGR1cGxpY2F0ZScgdGl0bGU9J0R1cGxpY2F0ZScgc3JjPSdpbWFnZXMvaWNvbl9kdXBsaWNhdGUucG5nJz5cIjtcbiAgICBkZWxldGVCdXR0b24gPSBcIjxpbWcgY2xhc3M9J2RlbGV0ZSBsaW5rX2ljb24nIHRpdGxlPSdEZWxldGUnIHNyYz0naW1hZ2VzL2ljb25fZGVsZXRlLnBuZyc+XCI7XG4gICAgZGVsZXRlQ29uZmlybSA9IFwiPHNwYW4gY2xhc3M9J2RlbGV0ZV9jb25maXJtJz48ZGl2IGNsYXNzPSdtZW51X2JveCc+Q29uZmlybSA8YnV0dG9uIGNsYXNzPSdkZWxldGVfeWVzIGNvbW1hbmRfcmVkJz5EZWxldGU8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz0nZGVsZXRlX2NhbmNlbCBjb21tYW5kJz5DYW5jZWw8L2J1dHRvbj48L2Rpdj48L3NwYW4+XCI7XG4gICAgZG93bmxvYWRLZXkgPSBcIjxzcGFuIGNsYXNzPSdkb3dubG9hZF9rZXkgc21hbGxfZ3JleSc+RG93bmxvYWQga2V5IDxiPlwiICsgKHRoaXMuY3VycmljdWx1bS5pZC5zdWJzdHIoLTUsIDUpKSArIFwiPC9iPjwvc3Bhbj5cIjtcbiAgICBuYW1lID0gXCI8c3BhbiBjbGFzcz0ndG9nZ2xlX21lbnUnPlwiICsgKHRoaXMuY3VycmljdWx1bS5lc2NhcGUoJ25hbWUnKSkgKyBcIjwvc3Bhbj5cIjtcbiAgICBpZiAoVGFuZ2VyaW5lLnVzZXIuaXNBZG1pbigpKSB7XG4gICAgICBtZW51ID0gZWRpdEJ1dHRvbiArIFwiIFwiICsgZHVwbGljYXRlQnV0dG9uICsgXCIgXCIgKyBkZWxldGVCdXR0b24gKyBcIiBcIiArIGRvd25sb2FkS2V5ICsgXCIgXCIgKyBkZWxldGVDb25maXJtO1xuICAgIH1cbiAgICBpZiAoIVRhbmdlcmluZS51c2VyLmlzQWRtaW4oKSkge1xuICAgICAgbWVudSA9IGVkaXRCdXR0b24gKyBcIiBcIiArIGRvd25sb2FkS2V5O1xuICAgIH1cbiAgICB0aGlzLiRlbC5odG1sKFwiPGRpdj4gXCIgKyB0b2dnbGVCdXR0b24gKyBcIiBcIiArIG5hbWUgKyBcIiA8L2Rpdj4gPGRpdj4gPGRpdiBjbGFzcz0nY29uZmlybWF0aW9uIG1lbnUnPiBcIiArIG1lbnUgKyBcIiA8L2Rpdj4gPC9kaXY+XCIpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICByZXR1cm4gQ3VycmljdWx1bUxpc3RFbGVtZW50VmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIFRlYWNoZXIgZXh0ZW5kcyBCYWNrYm9uZS5Nb2RlbFxuICB1cmwgOiBcInRlYWNoZXJcIiIsInZhciBUZWFjaGVyLFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuVGVhY2hlciA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChUZWFjaGVyLCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBUZWFjaGVyKCkge1xuICAgIHJldHVybiBUZWFjaGVyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgVGVhY2hlci5wcm90b3R5cGUudXJsID0gXCJ0ZWFjaGVyXCI7XG5cbiAgcmV0dXJuIFRlYWNoZXI7XG5cbn0pKEJhY2tib25lLk1vZGVsKTtcblxuIiwiY2xhc3MgVGVhY2hlcnMgZXh0ZW5kcyBCYWNrYm9uZS5Db2xsZWN0aW9uXG4gIG1vZGVsIDogVGVhY2hlclxuICB1cmwgOiBcInRlYWNoZXJcIiIsInZhciBUZWFjaGVycyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblRlYWNoZXJzID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFRlYWNoZXJzLCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBUZWFjaGVycygpIHtcbiAgICByZXR1cm4gVGVhY2hlcnMuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBUZWFjaGVycy5wcm90b3R5cGUubW9kZWwgPSBUZWFjaGVyO1xuXG4gIFRlYWNoZXJzLnByb3RvdHlwZS51cmwgPSBcInRlYWNoZXJcIjtcblxuICByZXR1cm4gVGVhY2hlcnM7XG5cbn0pKEJhY2tib25lLkNvbGxlY3Rpb24pO1xuXG4iLCJjbGFzcyBUZWFjaGVyc1ZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcIlRlYWNoZXJzVmlld1wiXG5cbiAgZXZlbnRzIDpcbiAgICBcImNsaWNrIC5lZGl0X2luX3BsYWNlXCIgIDogXCJlZGl0SW5QbGFjZVwiXG4gICAgXCJmb2N1c291dCAuZWRpdGluZ1wiIDogXCJlZGl0aW5nXCJcbiAgICBcImtleXVwICAgIC5lZGl0aW5nXCIgOiBcImVkaXRpbmdcIlxuICAgIFwia2V5ZG93biAgLmVkaXRpbmdcIiA6IFwiZWRpdGluZ1wiXG4gICAgJ2NsaWNrICAgIC5jaGFuZ2VfcGFzc3dvcmQnIDogXCJjaGFuZ2VQYXNzd29yZFwiXG4gICAgJ2NoYW5nZSAgIC5zaG93X3Bhc3N3b3JkJyA6IFwic2hvd1Bhc3N3b3JkXCJcbiAgICAnY2xpY2sgICAgLnNhdmVfcGFzc3dvcmQnIDogJ3NhdmVQYXNzd29yZCdcbiAgICAnY2xpY2sgICAgLmJhY2snIDogJ2dvQmFjaydcblxuICBnb0JhY2s6IC0+XG4gICAgd2luZG93Lmhpc3RvcnkuYmFjaygpXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgQHRlYWNoZXJzID0gb3B0aW9ucy50ZWFjaGVyc1xuICAgIEB1c2VycyAgICA9IG9wdGlvbnMudXNlcnNcblxuICAgIEB1c2Vyc0J5VGVhY2hlcklkID0gQHVzZXJzLmluZGV4QnkoXCJ0ZWFjaGVySWRcIilcblxuICAgIEB0ZWFjaGVyUHJvcGVydGllcyA9XG4gICAgICBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImtleVwiICAgICAgOiBcIm5hbWVcIlxuICAgICAgICAgIFwiZWRpdGFibGVcIiA6IHRydWVcbiAgICAgICAgICBcImhlYWRlcmxlc3NcIiA6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwia2V5XCIgICAgICA6IFwiZmlyc3RcIlxuICAgICAgICAgIFwibGFiZWxcIiAgICA6IFwiRmlyc3RcIlxuICAgICAgICAgIFwiZWRpdGFibGVcIiA6IHRydWVcbiAgICAgICAgICBcImVzY2FwZWRcIiAgOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImtleVwiICAgICAgOiBcImxhc3RcIlxuICAgICAgICAgIFwibGFiZWxcIiAgICA6IFwiTGFzdFwiXG4gICAgICAgICAgXCJlZGl0YWJsZVwiIDogdHJ1ZVxuICAgICAgICAgIFwiZXNjYXBlZFwiICA6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwia2V5XCIgICAgICA6IFwiZ2VuZGVyXCJcbiAgICAgICAgICBcImxhYmVsXCIgICAgOiBcIkdlbmRlclwiXG4gICAgICAgICAgXCJlZGl0YWJsZVwiIDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJrZXlcIiAgICAgIDogXCJzY2hvb2xcIlxuICAgICAgICAgIFwibGFiZWxcIiAgICA6IFwiU2Nob29sIG5hbWVcIlxuICAgICAgICAgIFwiZWRpdGFibGVcIiA6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwia2V5XCIgICAgICA6IFwiY29udGFjdFwiXG4gICAgICAgICAgXCJsYWJlbFwiICAgIDogXCJDb250YWN0IEluZm9ybWF0aW9uXCJcbiAgICAgICAgICBcImVkaXRhYmxlXCIgOiB0cnVlXG4gICAgICAgIH07XG4gICAgICBdXG5cbiAgc2hvd1Bhc3N3b3JkOiAoZXZlbnQpIC0+XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgIHRlYWNoZXJJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtdGVhY2hlcklkXCIpXG4gICAgaWYgQCRlbC5maW5kKFwiLiN7dGVhY2hlcklkfV9wYXNzd29yZFwiKS5hdHRyKFwidHlwZVwiKSA9PSBcInBhc3N3b3JkXCJcbiAgICAgIEAkZWwuZmluZChcIi4je3RlYWNoZXJJZH1fcGFzc3dvcmRcIikuYXR0cihcInR5cGVcIiwgXCJ0ZXh0XCIpXG4gICAgZWxzZVxuICAgICAgQCRlbC5maW5kKFwiLiN7dGVhY2hlcklkfV9wYXNzd29yZFwiKS5hdHRyKFwidHlwZVwiLCBcInBhc3N3b3JkXCIpXG5cblxuICBjaGFuZ2VQYXNzd29yZDogKGV2ZW50KSAtPlxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICB0ZWFjaGVySWQgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLXRlYWNoZXJJZFwiKVxuICAgIEAkZWwuZmluZChcIi4je3RlYWNoZXJJZH1fbWVudVwiKS50b2dnbGVDbGFzcyhcImNvbmZpcm1hdGlvblwiKVxuICAgIEAkZWwuZmluZChcIi4je3RlYWNoZXJJZH1cIikuc2Nyb2xsVG8oKVxuICAgIEAkZWwuZmluZChcIi4je3RlYWNoZXJJZH1fcGFzc3dvcmRcIikuZm9jdXMoKVxuXG4gIHNhdmVQYXNzd29yZDogKGV2ZW50KSAtPlxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICB0ZWFjaGVySWQgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLXRlYWNoZXJJZFwiKVxuXG4gICAgdGVhY2hlck1vZGVsID0gQHRlYWNoZXJzLmdldCh0ZWFjaGVySWQpXG4gICAgdXNlck1vZGVsICAgID0gQHVzZXJzQnlUZWFjaGVySWRbdGVhY2hlcklkXVswXVxuICAgIHVzZXJNb2RlbC5zZXRQYXNzd29yZCBAJGVsLmZpbmQoXCIuI3t0ZWFjaGVySWR9X3Bhc3N3b3JkXCIpLnZhbCgpXG4gICAgdXNlck1vZGVsLnNhdmUgbnVsbCxcbiAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiVGVhY2hlcidzIHBhc3N3b3JkIHNhdmVkXCJcbiAgICAgICAgQCRlbC5maW5kKFwiLiN7dGVhY2hlcklkfV9wYXNzd29yZFwiKS52YWwoXCJcIilcbiAgICAgICAgQCRlbC5maW5kKFwiLiN7dGVhY2hlcklkfV9tZW51XCIpLnRvZ2dsZUNsYXNzKFwiY29uZmlybWF0aW9uXCIpXG4gICAgICBlcnJvcjogPT5cbiAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJTYXZlIGVycm9yXCJcblxuXG5cbiAgcmVuZGVyOiAtPlxuICAgIHRlYWNoZXJUYWJsZSA9IEBnZXRUZWFjaGVyVGFibGUoKVxuICAgIGRlbGV0ZUJ1dHRvbiA9IFwiPGJ1dHRvbiBjbGFzcz0nY29tbWFuZF9yZWQgZGVsZXRlJz5EZWxldGU8L2J1dHRvbj5cIlxuXG4gICAgQCRlbC5odG1sIFwiXG4gICAgICA8aDE+VGVhY2hlcnM8L2gxPlxuXG4gICAgICA8ZGl2IGlkPSd0ZWFjaGVyX3RhYmxlX2NvbnRhaW5lcic+XG4gICAgICAgICN7dGVhY2hlclRhYmxlfVxuICAgICAgPC9kaXY+XG4gICAgXCJcblxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuXG4gIHVwZGF0ZVRhYmxlOiAtPiBAJGVsLmZpbmQoXCIjdGVhY2hlcl90YWJsZV9jb250YWluZXJcIikuaHRtbCBAZ2V0VGVhY2hlclRhYmxlKClcblxuICBnZXRUZWFjaGVyVGFibGU6IC0+XG5cbiAgICBodG1sID0gXCJcIlxuXG4gICAgZm9yIHRlYWNoZXIgaW4gQHRlYWNoZXJzLm1vZGVsc1xuXG4gICAgICBodG1sICs9IFwiXG4gICAgICA8dGFibGUgY2xhc3M9J2NsYXNzX3RhYmxlIHRlYWNoZXJzICN7dGVhY2hlci5pZH0nID5cbiAgICAgICAgPHRib2R5PlxuICAgICAgXCJcblxuICAgICAgZm9yIHByb3AgaW4gQHRlYWNoZXJQcm9wZXJ0aWVzXG4gICAgICAgIGh0bWwgKz0gQHByb3BDb29rUm93KHByb3AsIHRlYWNoZXIpXG5cbiAgICAgIGh0bWwgKz0gXCJcbiAgICAgICAgICA8dHIgY2xhc3M9J2xhc3QnPjx0aD48YnV0dG9uIGNsYXNzPSdjaGFuZ2VfcGFzc3dvcmQgY29tbWFuZCcgZGF0YS10ZWFjaGVySWQ9JyN7dGVhY2hlci5pZH0nPkNoYW5nZSBQYXNzd29yZDwvYnV0dG9uPjxicj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nI3t0ZWFjaGVyLmlkfV9tZW51IGNvbmZpcm1hdGlvbic+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9J21lbnVfYm94Jz5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ncGFzc3dvcmQnIGNsYXNzPScje3RlYWNoZXIuaWR9X3Bhc3N3b3JkJz5cbiAgICAgICAgICAgICAgICA8dGFibGU+PHRyPlxuICAgICAgICAgICAgICAgICAgPHRoIHN0eWxlPSdwYWRkaW5nOjA7Jz48bGFiZWwgZm9yPScje3RlYWNoZXIuaWR9X3Nob3dfcGFzc3dvcmQnPlNob3cgcGFzc3dvcmQ8L2xhYmVsPjwvdGg+XG4gICAgICAgICAgICAgICAgICA8dGggc3R5bGU9J3BhZGRpbmc6MTBweCc+PGlucHV0IHR5cGU9J2NoZWNrYm94JyBpZD0nI3t0ZWFjaGVyLmlkfV9zaG93X3Bhc3N3b3JkJyBjbGFzcz0nc2hvd19wYXNzd29yZCcgZGF0YS10ZWFjaGVySWQ9JyN7dGVhY2hlci5pZH0nPjwvdGg+XG4gICAgICAgICAgICAgICAgPC90cj48L3RhYmxlPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J3NhdmVfcGFzc3dvcmQgY29tbWFuZCcgZGF0YS10ZWFjaGVySWQ9JyN7dGVhY2hlci5pZH0nPlNhdmU8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICAgIFwiXG5cbiAgICByZXR1cm4gaHRtbFxuXG5cbiAgcHJvcENvb2tSb3c6IChwcm9wLCB0ZWFjaGVyKSAtPlxuXG4gICAgaWYgcHJvcC5oZWFkZXJsZXNzXG4gICAgICBwcm9wLnRhZ05hbWUgPSBcInRoXCJcbiAgICBlbHNlXG4gICAgICBoZWFkZXIgPSBcIjx0aD4je3Byb3AubGFiZWx9PC90aD5cIlxuXG4gICAgXCI8dHI+I3toZWFkZXJ8fFwiXCJ9I3tAcHJvcENvb2socHJvcCwgdGVhY2hlcil9PC90cj5cIlxuXG4gIHByb3BDb29rOiAocHJvcCwgdGVhY2hlciktPlxuXG4gICAgIyBjb29rIHRoZSB2YWx1ZVxuICAgIHZhbHVlID0gaWYgcHJvcC5rZXk/ICAgdGhlbiB0ZWFjaGVyLmdldChwcm9wLmtleSkgICAgZWxzZSBcIiZuYnNwO1wiXG4gICAgdmFsdWUgPSBpZiBwcm9wLmVzY2FwZSB0aGVuIHRlYWNoZXIuZXNjYXBlKHByb3Aua2V5KSBlbHNlIHZhbHVlXG4gICAgdmFsdWUgPSBcIl9cIiBpZiBub3QgdmFsdWU/XG5cbiAgICAjIGNhbGN1bGF0ZSB0YWdcbiAgICB0YWdOYW1lID0gcHJvcC50YWdOYW1lIHx8IFwidGRcIlxuXG4gICAgIyB3aGF0IGlzIGl0XG4gICAgZWRpdE9yTm90ICAgPSBpZiBwcm9wLmVkaXRhYmxlIHRoZW4gXCJlZGl0X2luX3BsYWNlXCIgZWxzZSBcIlwiXG5cbiAgICBudW1iZXJPck5vdCA9IGlmIF8uaXNOdW1iZXIodmFsdWUpIHRoZW4gXCJkYXRhLWlzTnVtYmVyPSd0cnVlJ1wiIGVsc2UgXCJkYXRhLWlzTnVtYmVyPSdmYWxzZSdcIlxuXG4gICAgcmV0dXJuIFwiPCN7dGFnTmFtZX0gY2xhc3M9JyN7ZWRpdE9yTm90fSc+PHNwYW4gZGF0YS10ZWFjaGVySWQ9JyN7dGVhY2hlci5pZH0nIGRhdGEta2V5PScje3Byb3Aua2V5fScgZGF0YS12YWx1ZT0nI3t2YWx1ZX0nICN7ZWRpdE9yTm90fSAje251bWJlck9yTm90fT4je3ZhbHVlfTwvZGl2PjwvI3t0YWdOYW1lfT5cIlxuXG5cbiAgZWRpdEluUGxhY2U6IChldmVudCkgLT5cblxuICAgIHJldHVybiBpZiBAYWxyZWFkeUVkaXRpbmdcbiAgICBAYWxyZWFkeUVkaXRpbmcgPSB0cnVlXG5cbiAgICAjIHNhdmUgc3RhdGVcbiAgICAjIHJlcGxhY2Ugd2l0aCB0ZXh0IGFyZWFcbiAgICAjIG9uIHNhdmUsIHNhdmUgYW5kIHJlLXJlcGxhY2VcbiAgICAkc3BhbiA9ICQoZXZlbnQudGFyZ2V0KVxuXG4gICAgaWYgJHNwYW4ucHJvcChcInRhZ05hbWVcIikgPT0gXCJURFwiXG4gICAgICAkc3BhbiA9ICRzcGFuLmZpbmQoXCJzcGFuXCIpXG4gICAgICByZXR1cm4gaWYgJHNwYW4ubGVuZ3RoID09IDBcbiAgICAkdGQgID0gJHNwYW4ucGFyZW50KClcblxuICAgIEAkb2xkU3BhbiA9ICRzcGFuLmNsb25lKClcblxuICAgIHJldHVybiBpZiAkc3Bhbi5wcm9wKFwidGFnTmFtZVwiKSA9PSBcIlRFWFRBUkVBXCJcblxuICAgIGd1aWQgICAgICAgICA9IFV0aWxzLmd1aWQoKVxuXG4gICAga2V5ICAgICAgICAgID0gJHNwYW4uYXR0cihcImRhdGEta2V5XCIpXG4gICAgaXNOdW1iZXIgICAgID0gJHNwYW4uYXR0cihcImRhdGEtaXNOdW1iZXJcIikgPT0gXCJ0cnVlXCJcblxuICAgIHRlYWNoZXJJZCAgICA9ICRzcGFuLmF0dHIoXCJkYXRhLXRlYWNoZXJJZFwiKVxuICAgIHRlYWNoZXIgICAgICA9IEB0ZWFjaGVycy5nZXQodGVhY2hlcklkKVxuICAgIG9sZFZhbHVlICAgICA9XG4gICAgICBpZiBpc051bWJlclxuICAgICAgICB0ZWFjaGVyLmdldE51bWJlcihrZXkpXG4gICAgICBlbHNlXG4gICAgICAgIHRlYWNoZXIuZ2V0U3RyaW5nKGtleSlcblxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICBjbGFzc2VzID0gKCR0YXJnZXQuYXR0cihcImNsYXNzXCIpIHx8IFwiXCIpLnJlcGxhY2UoXCJzZXR0aW5nc1wiLFwiXCIpXG4gICAgbWFyZ2lucyA9ICR0YXJnZXQuY3NzKFwibWFyZ2luXCIpXG5cbiAgICAjc3BlY2lhbCBjYXNlXG4gICAgb2xkVmFsdWUgPSBvbGRWYWx1ZS5qb2luIFwiIFwiIGlmIGtleSA9PSAnaXRlbXMnXG5cbiAgICB0cmFuc2ZlclZhcmlhYmxlcyA9IFwiZGF0YS1pc051bWJlcj0nI3tpc051bWJlcn0nIGRhdGEta2V5PScje2tleX0nIGRhdGEtdGVhY2hlcklkPScje3RlYWNoZXJJZH0nIFwiXG5cbiAgICAjIHNldHMgd2lkdGgvaGVpZ2h0IHdpdGggc3R5bGUgYXR0cmlidXRlXG4gICAgJHRkLmh0bWwoXCI8dGV4dGFyZWEgaWQ9JyN7Z3VpZH0nICN7dHJhbnNmZXJWYXJpYWJsZXN9IGNsYXNzPSdlZGl0aW5nICN7Y2xhc3Nlc30nIHN0eWxlPSdtYXJnaW46I3ttYXJnaW5zfSc+I3tvbGRWYWx1ZX08L3RleHRhcmVhPlwiKVxuICAgICMgc3R5bGU9J3dpZHRoOiN7b2xkV2lkdGh9cHg7IGhlaWdodDogI3tvbGRIZWlnaHR9cHg7J1xuICAgICR0ZXh0YXJlYSA9ICQoXCIjI3tndWlkfVwiKVxuICAgICR0ZXh0YXJlYS5mb2N1cygpXG5cbiAgZWRpdGluZzogKGV2ZW50KSAtPlxuXG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuICAgICR0ZCA9ICR0YXJnZXQucGFyZW50KClcblxuICAgIGlmIGV2ZW50LndoaWNoID09IDI3IG9yIGV2ZW50LnR5cGUgPT0gXCJmb2N1c291dFwiXG4gICAgICAkdGFyZ2V0LnJlbW92ZSgpXG4gICAgICAkdGQuaHRtbChAJG9sZFNwYW4pXG4gICAgICBAYWxyZWFkeUVkaXRpbmcgPSBmYWxzZVxuICAgICAgcmV0dXJuXG5cbiAgICAjIGFjdCBub3JtYWwsIHVubGVzcyBpdCdzIGFuIGVudGVyIGtleSBvbiBrZXlkb3duXG4gICAgcmV0dXJuIHRydWUgdW5sZXNzIGV2ZW50LndoaWNoID09IDEzIGFuZCBldmVudC50eXBlID09IFwia2V5ZG93blwiXG5cbiAgICBAYWxyZWFkeUVkaXRpbmcgPSBmYWxzZVxuXG4gICAga2V5ICAgICAgICAgID0gJHRhcmdldC5hdHRyKFwiZGF0YS1rZXlcIilcbiAgICBpc051bWJlciAgICAgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLWlzTnVtYmVyXCIpID09IFwidHJ1ZVwiXG5cbiAgICB0ZWFjaGVySWQgICAgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLXRlYWNoZXJJZFwiKVxuICAgIHRlYWNoZXIgICAgICA9IEB0ZWFjaGVycy5nZXQodGVhY2hlcklkKVxuICAgIG9sZFZhbHVlICAgICA9IHRlYWNoZXIuZ2V0KGtleSlcblxuICAgIG5ld1ZhbHVlID0gJHRhcmdldC52YWwoKVxuICAgIG5ld1ZhbHVlID0gaWYgaXNOdW1iZXIgdGhlbiBwYXJzZUludChuZXdWYWx1ZSkgZWxzZSBuZXdWYWx1ZVxuXG4gICAgI3NwZWNpYWwgY2FzZVxuXG4gICAgIyB0aGlzIGlzIG5vdCBEUlkuIHJlcGVhdGVkIGluIGdyaWQgcHJvdG90eXBlLlxuICAgIGlmIGtleSA9PSBcIml0ZW1zXCJcbiAgICAgICMgY2xlYW4gd2hpdGVzcGFjZSwgZ2l2ZSByZW1pbmRlciBpZiB0YWJzIG9yIGNvbW1hcyBmb3VuZCwgY29udmVydCBiYWNrIHRvIGFycmF5XG4gICAgICBuZXdWYWx1ZSA9IG5ld1ZhbHVlLnJlcGxhY2UoL1xccysvZywgJyAnKVxuICAgICAgaWYgL1xcdHwsLy50ZXN0KG5ld1ZhbHVlKSB0aGVuIGFsZXJ0IFwiUGxlYXNlIHJlbWVtYmVyXFxuXFxuR3JpZCBpdGVtcyBhcmUgc3BhY2UgXFxcIiBcXFwiIGRlbGltaXRlZFwiXG4gICAgICBuZXdWYWx1ZSA9IF8uY29tcGFjdCBuZXdWYWx1ZS5zcGxpdChcIiBcIilcblxuICAgICMgSWYgdGhlcmUgd2FzIGEgY2hhbmdlLCBzYXZlIGl0XG4gICAgaWYgU3RyaW5nKG5ld1ZhbHVlKSAhPSBTdHJpbmcob2xkVmFsdWUpXG4gICAgICBhdHRyaWJ1dGVzID0ge31cbiAgICAgIGF0dHJpYnV0ZXNba2V5XSA9IG5ld1ZhbHVlXG4gICAgICB0ZWFjaGVyLnNhdmUgYXR0cmlidXRlcyxcbiAgICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgICBVdGlscy50b3BBbGVydCBcIlRlYWNoZXIgc2F2ZWRcIlxuICAgICAgICAgIHRlYWNoZXIuZmV0Y2hcbiAgICAgICAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgICAgICAgIEB1cGRhdGVUYWJsZSgpXG4gICAgICAgIGVycm9yOiA9PlxuICAgICAgICAgIHRlYWNoZXIuZmV0Y2hcbiAgICAgICAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgICAgICAgIEB1cGRhdGVUYWJsZSgpXG4gICAgICAgICAgICAgICMgaWRlYWxseSB3ZSB3b3VsZG4ndCBoYXZlIHRvIHNhdmUgdGhpcyBidXQgY29uZmxpY3RzIGhhcHBlbiBzb21ldGltZXNcbiAgICAgICAgICAgICAgIyBAVE9ETyBtYWtlIHRoZSBtb2RlbCB0cnkgYWdhaW4gd2hlbiB1bnN1Y2Nlc3NmdWwuXG4gICAgICAgICAgICAgIGFsZXJ0IFwiUGxlYXNlIHRyeSB0byBzYXZlIGFnYWluLCBpdCBkaWRuJ3Qgd29yayB0aGF0IHRpbWUuXCJcblxuICAgICMgdGhpcyBlbnN1cmVzIHdlIGRvIG5vdCBpbnNlcnQgYSBuZXdsaW5lIGNoYXJhY3RlciB3aGVuIHdlIHByZXNzIGVudGVyXG4gICAgcmV0dXJuIGZhbHNlXG4iLCJ2YXIgVGVhY2hlcnNWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuVGVhY2hlcnNWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFRlYWNoZXJzVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gVGVhY2hlcnNWaWV3KCkge1xuICAgIHJldHVybiBUZWFjaGVyc1ZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBUZWFjaGVyc1ZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiVGVhY2hlcnNWaWV3XCI7XG5cbiAgVGVhY2hlcnNWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgXCJjbGljayAuZWRpdF9pbl9wbGFjZVwiOiBcImVkaXRJblBsYWNlXCIsXG4gICAgXCJmb2N1c291dCAuZWRpdGluZ1wiOiBcImVkaXRpbmdcIixcbiAgICBcImtleXVwICAgIC5lZGl0aW5nXCI6IFwiZWRpdGluZ1wiLFxuICAgIFwia2V5ZG93biAgLmVkaXRpbmdcIjogXCJlZGl0aW5nXCIsXG4gICAgJ2NsaWNrICAgIC5jaGFuZ2VfcGFzc3dvcmQnOiBcImNoYW5nZVBhc3N3b3JkXCIsXG4gICAgJ2NoYW5nZSAgIC5zaG93X3Bhc3N3b3JkJzogXCJzaG93UGFzc3dvcmRcIixcbiAgICAnY2xpY2sgICAgLnNhdmVfcGFzc3dvcmQnOiAnc2F2ZVBhc3N3b3JkJyxcbiAgICAnY2xpY2sgICAgLmJhY2snOiAnZ29CYWNrJ1xuICB9O1xuXG4gIFRlYWNoZXJzVmlldy5wcm90b3R5cGUuZ29CYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgfTtcblxuICBUZWFjaGVyc1ZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy50ZWFjaGVycyA9IG9wdGlvbnMudGVhY2hlcnM7XG4gICAgdGhpcy51c2VycyA9IG9wdGlvbnMudXNlcnM7XG4gICAgdGhpcy51c2Vyc0J5VGVhY2hlcklkID0gdGhpcy51c2Vycy5pbmRleEJ5KFwidGVhY2hlcklkXCIpO1xuICAgIHJldHVybiB0aGlzLnRlYWNoZXJQcm9wZXJ0aWVzID0gW1xuICAgICAge1xuICAgICAgICBcImtleVwiOiBcIm5hbWVcIixcbiAgICAgICAgXCJlZGl0YWJsZVwiOiB0cnVlLFxuICAgICAgICBcImhlYWRlcmxlc3NcIjogdHJ1ZVxuICAgICAgfSwge1xuICAgICAgICBcImtleVwiOiBcImZpcnN0XCIsXG4gICAgICAgIFwibGFiZWxcIjogXCJGaXJzdFwiLFxuICAgICAgICBcImVkaXRhYmxlXCI6IHRydWUsXG4gICAgICAgIFwiZXNjYXBlZFwiOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIFwia2V5XCI6IFwibGFzdFwiLFxuICAgICAgICBcImxhYmVsXCI6IFwiTGFzdFwiLFxuICAgICAgICBcImVkaXRhYmxlXCI6IHRydWUsXG4gICAgICAgIFwiZXNjYXBlZFwiOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIFwia2V5XCI6IFwiZ2VuZGVyXCIsXG4gICAgICAgIFwibGFiZWxcIjogXCJHZW5kZXJcIixcbiAgICAgICAgXCJlZGl0YWJsZVwiOiB0cnVlXG4gICAgICB9LCB7XG4gICAgICAgIFwia2V5XCI6IFwic2Nob29sXCIsXG4gICAgICAgIFwibGFiZWxcIjogXCJTY2hvb2wgbmFtZVwiLFxuICAgICAgICBcImVkaXRhYmxlXCI6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgXCJrZXlcIjogXCJjb250YWN0XCIsXG4gICAgICAgIFwibGFiZWxcIjogXCJDb250YWN0IEluZm9ybWF0aW9uXCIsXG4gICAgICAgIFwiZWRpdGFibGVcIjogdHJ1ZVxuICAgICAgfVxuICAgIF07XG4gIH07XG5cbiAgVGVhY2hlcnNWaWV3LnByb3RvdHlwZS5zaG93UGFzc3dvcmQgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCB0ZWFjaGVySWQ7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICB0ZWFjaGVySWQgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLXRlYWNoZXJJZFwiKTtcbiAgICBpZiAodGhpcy4kZWwuZmluZChcIi5cIiArIHRlYWNoZXJJZCArIFwiX3Bhc3N3b3JkXCIpLmF0dHIoXCJ0eXBlXCIpID09PSBcInBhc3N3b3JkXCIpIHtcbiAgICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLlwiICsgdGVhY2hlcklkICsgXCJfcGFzc3dvcmRcIikuYXR0cihcInR5cGVcIiwgXCJ0ZXh0XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5cIiArIHRlYWNoZXJJZCArIFwiX3Bhc3N3b3JkXCIpLmF0dHIoXCJ0eXBlXCIsIFwicGFzc3dvcmRcIik7XG4gICAgfVxuICB9O1xuXG4gIFRlYWNoZXJzVmlldy5wcm90b3R5cGUuY2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCB0ZWFjaGVySWQ7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICB0ZWFjaGVySWQgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLXRlYWNoZXJJZFwiKTtcbiAgICB0aGlzLiRlbC5maW5kKFwiLlwiICsgdGVhY2hlcklkICsgXCJfbWVudVwiKS50b2dnbGVDbGFzcyhcImNvbmZpcm1hdGlvblwiKTtcbiAgICB0aGlzLiRlbC5maW5kKFwiLlwiICsgdGVhY2hlcklkKS5zY3JvbGxUbygpO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLlwiICsgdGVhY2hlcklkICsgXCJfcGFzc3dvcmRcIikuZm9jdXMoKTtcbiAgfTtcblxuICBUZWFjaGVyc1ZpZXcucHJvdG90eXBlLnNhdmVQYXNzd29yZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIHRlYWNoZXJJZCwgdGVhY2hlck1vZGVsLCB1c2VyTW9kZWw7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICB0ZWFjaGVySWQgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLXRlYWNoZXJJZFwiKTtcbiAgICB0ZWFjaGVyTW9kZWwgPSB0aGlzLnRlYWNoZXJzLmdldCh0ZWFjaGVySWQpO1xuICAgIHVzZXJNb2RlbCA9IHRoaXMudXNlcnNCeVRlYWNoZXJJZFt0ZWFjaGVySWRdWzBdO1xuICAgIHVzZXJNb2RlbC5zZXRQYXNzd29yZCh0aGlzLiRlbC5maW5kKFwiLlwiICsgdGVhY2hlcklkICsgXCJfcGFzc3dvcmRcIikudmFsKCkpO1xuICAgIHJldHVybiB1c2VyTW9kZWwuc2F2ZShudWxsLCB7XG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiVGVhY2hlcidzIHBhc3N3b3JkIHNhdmVkXCIpO1xuICAgICAgICAgIF90aGlzLiRlbC5maW5kKFwiLlwiICsgdGVhY2hlcklkICsgXCJfcGFzc3dvcmRcIikudmFsKFwiXCIpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy4kZWwuZmluZChcIi5cIiArIHRlYWNoZXJJZCArIFwiX21lbnVcIikudG9nZ2xlQ2xhc3MoXCJjb25maXJtYXRpb25cIik7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSxcbiAgICAgIGVycm9yOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIlNhdmUgZXJyb3JcIik7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFRlYWNoZXJzVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlbGV0ZUJ1dHRvbiwgdGVhY2hlclRhYmxlO1xuICAgIHRlYWNoZXJUYWJsZSA9IHRoaXMuZ2V0VGVhY2hlclRhYmxlKCk7XG4gICAgZGVsZXRlQnV0dG9uID0gXCI8YnV0dG9uIGNsYXNzPSdjb21tYW5kX3JlZCBkZWxldGUnPkRlbGV0ZTwvYnV0dG9uPlwiO1xuICAgIHRoaXMuJGVsLmh0bWwoXCI8aDE+VGVhY2hlcnM8L2gxPiA8ZGl2IGlkPSd0ZWFjaGVyX3RhYmxlX2NvbnRhaW5lcic+IFwiICsgdGVhY2hlclRhYmxlICsgXCIgPC9kaXY+XCIpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICBUZWFjaGVyc1ZpZXcucHJvdG90eXBlLnVwZGF0ZVRhYmxlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjdGVhY2hlcl90YWJsZV9jb250YWluZXJcIikuaHRtbCh0aGlzLmdldFRlYWNoZXJUYWJsZSgpKTtcbiAgfTtcblxuICBUZWFjaGVyc1ZpZXcucHJvdG90eXBlLmdldFRlYWNoZXJUYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBodG1sLCBpLCBqLCBsZW4sIGxlbjEsIHByb3AsIHJlZiwgcmVmMSwgdGVhY2hlcjtcbiAgICBodG1sID0gXCJcIjtcbiAgICByZWYgPSB0aGlzLnRlYWNoZXJzLm1vZGVscztcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHRlYWNoZXIgPSByZWZbaV07XG4gICAgICBodG1sICs9IFwiPHRhYmxlIGNsYXNzPSdjbGFzc190YWJsZSB0ZWFjaGVycyBcIiArIHRlYWNoZXIuaWQgKyBcIicgPiA8dGJvZHk+XCI7XG4gICAgICByZWYxID0gdGhpcy50ZWFjaGVyUHJvcGVydGllcztcbiAgICAgIGZvciAoaiA9IDAsIGxlbjEgPSByZWYxLmxlbmd0aDsgaiA8IGxlbjE7IGorKykge1xuICAgICAgICBwcm9wID0gcmVmMVtqXTtcbiAgICAgICAgaHRtbCArPSB0aGlzLnByb3BDb29rUm93KHByb3AsIHRlYWNoZXIpO1xuICAgICAgfVxuICAgICAgaHRtbCArPSBcIjx0ciBjbGFzcz0nbGFzdCc+PHRoPjxidXR0b24gY2xhc3M9J2NoYW5nZV9wYXNzd29yZCBjb21tYW5kJyBkYXRhLXRlYWNoZXJJZD0nXCIgKyB0ZWFjaGVyLmlkICsgXCInPkNoYW5nZSBQYXNzd29yZDwvYnV0dG9uPjxicj4gPGRpdiBjbGFzcz0nXCIgKyB0ZWFjaGVyLmlkICsgXCJfbWVudSBjb25maXJtYXRpb24nPiA8ZGl2IGNsYXNzPSdtZW51X2JveCc+IDxpbnB1dCB0eXBlPSdwYXNzd29yZCcgY2xhc3M9J1wiICsgdGVhY2hlci5pZCArIFwiX3Bhc3N3b3JkJz4gPHRhYmxlPjx0cj4gPHRoIHN0eWxlPSdwYWRkaW5nOjA7Jz48bGFiZWwgZm9yPSdcIiArIHRlYWNoZXIuaWQgKyBcIl9zaG93X3Bhc3N3b3JkJz5TaG93IHBhc3N3b3JkPC9sYWJlbD48L3RoPiA8dGggc3R5bGU9J3BhZGRpbmc6MTBweCc+PGlucHV0IHR5cGU9J2NoZWNrYm94JyBpZD0nXCIgKyB0ZWFjaGVyLmlkICsgXCJfc2hvd19wYXNzd29yZCcgY2xhc3M9J3Nob3dfcGFzc3dvcmQnIGRhdGEtdGVhY2hlcklkPSdcIiArIHRlYWNoZXIuaWQgKyBcIic+PC90aD4gPC90cj48L3RhYmxlPiA8YnV0dG9uIGNsYXNzPSdzYXZlX3Bhc3N3b3JkIGNvbW1hbmQnIGRhdGEtdGVhY2hlcklkPSdcIiArIHRlYWNoZXIuaWQgKyBcIic+U2F2ZTwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvdGg+IDwvdHI+IDwvdGJvZHk+IDwvdGFibGU+XCI7XG4gICAgfVxuICAgIHJldHVybiBodG1sO1xuICB9O1xuXG4gIFRlYWNoZXJzVmlldy5wcm90b3R5cGUucHJvcENvb2tSb3cgPSBmdW5jdGlvbihwcm9wLCB0ZWFjaGVyKSB7XG4gICAgdmFyIGhlYWRlcjtcbiAgICBpZiAocHJvcC5oZWFkZXJsZXNzKSB7XG4gICAgICBwcm9wLnRhZ05hbWUgPSBcInRoXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciA9IFwiPHRoPlwiICsgcHJvcC5sYWJlbCArIFwiPC90aD5cIjtcbiAgICB9XG4gICAgcmV0dXJuIFwiPHRyPlwiICsgKGhlYWRlciB8fCBcIlwiKSArICh0aGlzLnByb3BDb29rKHByb3AsIHRlYWNoZXIpKSArIFwiPC90cj5cIjtcbiAgfTtcblxuICBUZWFjaGVyc1ZpZXcucHJvdG90eXBlLnByb3BDb29rID0gZnVuY3Rpb24ocHJvcCwgdGVhY2hlcikge1xuICAgIHZhciBlZGl0T3JOb3QsIG51bWJlck9yTm90LCB0YWdOYW1lLCB2YWx1ZTtcbiAgICB2YWx1ZSA9IHByb3Aua2V5ICE9IG51bGwgPyB0ZWFjaGVyLmdldChwcm9wLmtleSkgOiBcIiZuYnNwO1wiO1xuICAgIHZhbHVlID0gcHJvcC5lc2NhcGUgPyB0ZWFjaGVyLmVzY2FwZShwcm9wLmtleSkgOiB2YWx1ZTtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgdmFsdWUgPSBcIl9cIjtcbiAgICB9XG4gICAgdGFnTmFtZSA9IHByb3AudGFnTmFtZSB8fCBcInRkXCI7XG4gICAgZWRpdE9yTm90ID0gcHJvcC5lZGl0YWJsZSA/IFwiZWRpdF9pbl9wbGFjZVwiIDogXCJcIjtcbiAgICBudW1iZXJPck5vdCA9IF8uaXNOdW1iZXIodmFsdWUpID8gXCJkYXRhLWlzTnVtYmVyPSd0cnVlJ1wiIDogXCJkYXRhLWlzTnVtYmVyPSdmYWxzZSdcIjtcbiAgICByZXR1cm4gXCI8XCIgKyB0YWdOYW1lICsgXCIgY2xhc3M9J1wiICsgZWRpdE9yTm90ICsgXCInPjxzcGFuIGRhdGEtdGVhY2hlcklkPSdcIiArIHRlYWNoZXIuaWQgKyBcIicgZGF0YS1rZXk9J1wiICsgcHJvcC5rZXkgKyBcIicgZGF0YS12YWx1ZT0nXCIgKyB2YWx1ZSArIFwiJyBcIiArIGVkaXRPck5vdCArIFwiIFwiICsgbnVtYmVyT3JOb3QgKyBcIj5cIiArIHZhbHVlICsgXCI8L2Rpdj48L1wiICsgdGFnTmFtZSArIFwiPlwiO1xuICB9O1xuXG4gIFRlYWNoZXJzVmlldy5wcm90b3R5cGUuZWRpdEluUGxhY2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkc3BhbiwgJHRhcmdldCwgJHRkLCAkdGV4dGFyZWEsIGNsYXNzZXMsIGd1aWQsIGlzTnVtYmVyLCBrZXksIG1hcmdpbnMsIG9sZFZhbHVlLCB0ZWFjaGVyLCB0ZWFjaGVySWQsIHRyYW5zZmVyVmFyaWFibGVzO1xuICAgIGlmICh0aGlzLmFscmVhZHlFZGl0aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuYWxyZWFkeUVkaXRpbmcgPSB0cnVlO1xuICAgICRzcGFuID0gJChldmVudC50YXJnZXQpO1xuICAgIGlmICgkc3Bhbi5wcm9wKFwidGFnTmFtZVwiKSA9PT0gXCJURFwiKSB7XG4gICAgICAkc3BhbiA9ICRzcGFuLmZpbmQoXCJzcGFuXCIpO1xuICAgICAgaWYgKCRzcGFuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgICR0ZCA9ICRzcGFuLnBhcmVudCgpO1xuICAgIHRoaXMuJG9sZFNwYW4gPSAkc3Bhbi5jbG9uZSgpO1xuICAgIGlmICgkc3Bhbi5wcm9wKFwidGFnTmFtZVwiKSA9PT0gXCJURVhUQVJFQVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGd1aWQgPSBVdGlscy5ndWlkKCk7XG4gICAga2V5ID0gJHNwYW4uYXR0cihcImRhdGEta2V5XCIpO1xuICAgIGlzTnVtYmVyID0gJHNwYW4uYXR0cihcImRhdGEtaXNOdW1iZXJcIikgPT09IFwidHJ1ZVwiO1xuICAgIHRlYWNoZXJJZCA9ICRzcGFuLmF0dHIoXCJkYXRhLXRlYWNoZXJJZFwiKTtcbiAgICB0ZWFjaGVyID0gdGhpcy50ZWFjaGVycy5nZXQodGVhY2hlcklkKTtcbiAgICBvbGRWYWx1ZSA9IGlzTnVtYmVyID8gdGVhY2hlci5nZXROdW1iZXIoa2V5KSA6IHRlYWNoZXIuZ2V0U3RyaW5nKGtleSk7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICBjbGFzc2VzID0gKCR0YXJnZXQuYXR0cihcImNsYXNzXCIpIHx8IFwiXCIpLnJlcGxhY2UoXCJzZXR0aW5nc1wiLCBcIlwiKTtcbiAgICBtYXJnaW5zID0gJHRhcmdldC5jc3MoXCJtYXJnaW5cIik7XG4gICAgaWYgKGtleSA9PT0gJ2l0ZW1zJykge1xuICAgICAgb2xkVmFsdWUgPSBvbGRWYWx1ZS5qb2luKFwiIFwiKTtcbiAgICB9XG4gICAgdHJhbnNmZXJWYXJpYWJsZXMgPSBcImRhdGEtaXNOdW1iZXI9J1wiICsgaXNOdW1iZXIgKyBcIicgZGF0YS1rZXk9J1wiICsga2V5ICsgXCInIGRhdGEtdGVhY2hlcklkPSdcIiArIHRlYWNoZXJJZCArIFwiJyBcIjtcbiAgICAkdGQuaHRtbChcIjx0ZXh0YXJlYSBpZD0nXCIgKyBndWlkICsgXCInIFwiICsgdHJhbnNmZXJWYXJpYWJsZXMgKyBcIiBjbGFzcz0nZWRpdGluZyBcIiArIGNsYXNzZXMgKyBcIicgc3R5bGU9J21hcmdpbjpcIiArIG1hcmdpbnMgKyBcIic+XCIgKyBvbGRWYWx1ZSArIFwiPC90ZXh0YXJlYT5cIik7XG4gICAgJHRleHRhcmVhID0gJChcIiNcIiArIGd1aWQpO1xuICAgIHJldHVybiAkdGV4dGFyZWEuZm9jdXMoKTtcbiAgfTtcblxuICBUZWFjaGVyc1ZpZXcucHJvdG90eXBlLmVkaXRpbmcgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCAkdGQsIGF0dHJpYnV0ZXMsIGlzTnVtYmVyLCBrZXksIG5ld1ZhbHVlLCBvbGRWYWx1ZSwgdGVhY2hlciwgdGVhY2hlcklkO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgJHRkID0gJHRhcmdldC5wYXJlbnQoKTtcbiAgICBpZiAoZXZlbnQud2hpY2ggPT09IDI3IHx8IGV2ZW50LnR5cGUgPT09IFwiZm9jdXNvdXRcIikge1xuICAgICAgJHRhcmdldC5yZW1vdmUoKTtcbiAgICAgICR0ZC5odG1sKHRoaXMuJG9sZFNwYW4pO1xuICAgICAgdGhpcy5hbHJlYWR5RWRpdGluZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIShldmVudC53aGljaCA9PT0gMTMgJiYgZXZlbnQudHlwZSA9PT0gXCJrZXlkb3duXCIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5hbHJlYWR5RWRpdGluZyA9IGZhbHNlO1xuICAgIGtleSA9ICR0YXJnZXQuYXR0cihcImRhdGEta2V5XCIpO1xuICAgIGlzTnVtYmVyID0gJHRhcmdldC5hdHRyKFwiZGF0YS1pc051bWJlclwiKSA9PT0gXCJ0cnVlXCI7XG4gICAgdGVhY2hlcklkID0gJHRhcmdldC5hdHRyKFwiZGF0YS10ZWFjaGVySWRcIik7XG4gICAgdGVhY2hlciA9IHRoaXMudGVhY2hlcnMuZ2V0KHRlYWNoZXJJZCk7XG4gICAgb2xkVmFsdWUgPSB0ZWFjaGVyLmdldChrZXkpO1xuICAgIG5ld1ZhbHVlID0gJHRhcmdldC52YWwoKTtcbiAgICBuZXdWYWx1ZSA9IGlzTnVtYmVyID8gcGFyc2VJbnQobmV3VmFsdWUpIDogbmV3VmFsdWU7XG4gICAgaWYgKGtleSA9PT0gXCJpdGVtc1wiKSB7XG4gICAgICBuZXdWYWx1ZSA9IG5ld1ZhbHVlLnJlcGxhY2UoL1xccysvZywgJyAnKTtcbiAgICAgIGlmICgvXFx0fCwvLnRlc3QobmV3VmFsdWUpKSB7XG4gICAgICAgIGFsZXJ0KFwiUGxlYXNlIHJlbWVtYmVyXFxuXFxuR3JpZCBpdGVtcyBhcmUgc3BhY2UgXFxcIiBcXFwiIGRlbGltaXRlZFwiKTtcbiAgICAgIH1cbiAgICAgIG5ld1ZhbHVlID0gXy5jb21wYWN0KG5ld1ZhbHVlLnNwbGl0KFwiIFwiKSk7XG4gICAgfVxuICAgIGlmIChTdHJpbmcobmV3VmFsdWUpICE9PSBTdHJpbmcob2xkVmFsdWUpKSB7XG4gICAgICBhdHRyaWJ1dGVzID0ge307XG4gICAgICBhdHRyaWJ1dGVzW2tleV0gPSBuZXdWYWx1ZTtcbiAgICAgIHRlYWNoZXIuc2F2ZShhdHRyaWJ1dGVzLCB7XG4gICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFV0aWxzLnRvcEFsZXJ0KFwiVGVhY2hlciBzYXZlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiB0ZWFjaGVyLmZldGNoKHtcbiAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZVRhYmxlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpLFxuICAgICAgICBlcnJvcjogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRlYWNoZXIuZmV0Y2goe1xuICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVUYWJsZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhbGVydChcIlBsZWFzZSB0cnkgdG8gc2F2ZSBhZ2FpbiwgaXQgZGlkbid0IHdvcmsgdGhhdCB0aW1lLlwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcylcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgcmV0dXJuIFRlYWNoZXJzVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIFJlZ2lzdGVyVGVhY2hlclZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJSZWdpc3RlclRlYWNoZXJWaWV3XCJcblxuICBldmVudHMgOlxuICAgICdjbGljayAucmVnaXN0ZXInIDogJ3JlZ2lzdGVyJ1xuICAgICdjbGljayAuY2FuY2VsJyA6ICdjYW5jZWwnXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cbiAgICBAbmFtZSA9IG9wdGlvbnMubmFtZVxuICAgIEBwYXNzID0gb3B0aW9ucy5wYXNzXG4gICAgQGZpZWxkcyA9IFtcImZpcnN0XCIsIFwibGFzdFwiLCBcImdlbmRlclwiLCBcInNjaG9vbFwiLCBcImNvbnRhY3RcIl1cblxuICBjYW5jZWw6IC0+XG4gICAgVGFuZ2VyaW5lLnJvdXRlci5sb2dpbigpXG5cbiAgcmVnaXN0ZXI6IC0+XG4gICAgQHZhbGlkYXRlID0+IEBzYXZlVXNlcigpXG5cbiAgdmFsaWRhdGU6IChjYWxsYmFjaykgLT5cblxuICAgIGVycm9ycyA9IGZhbHNlXG4gICAgZm9yIGVsZW1lbnQgaW4gQGZpZWxkc1xuICAgICAgaWYgXy5pc0VtcHR5KEBbZWxlbWVudF0udmFsKCkpXG4gICAgICAgIEAkZWwuZmluZChcIiMje2VsZW1lbnR9X21lc3NhZ2VcIikuaHRtbCBcIlBsZWFzZSBmaWxsIG91dCB0aGlzIGZpZWxkLlwiXG4gICAgICAgIGVycm9ycyA9IHRydWVcbiAgICAgIGVsc2VcbiAgICAgICAgQCRlbC5maW5kKFwiIyN7ZWxlbWVudH1fbWVzc2FnZVwiKS5odG1sIFwiXCJcbiAgICBpZiBlcnJvcnMgXG4gICAgICBVdGlscy5taWRBbGVydCBcIlBsZWFzZSBjb3JyZWN0IHRoZSBlcnJvcnMgb24gdGhpcyBwYWdlLlwiXG4gICAgZWxzZVxuICAgICAgY2FsbGJhY2soKVxuXG4gIHNhdmVVc2VyOiAtPlxuXG4gICAgdGVhY2hlckRvYyA9IFxuICAgICAgXCJuYW1lXCIgOiBAbmFtZVxuXG4gICAgKHRlYWNoZXJEb2NbZWxlbWVudF0gPSBAW2VsZW1lbnRdLnZhbCgpKSBmb3IgZWxlbWVudCBpbiBAZmllbGRzXG5cbiAgICBjb3VjaFVzZXJEb2MgPSBcbiAgICAgIFwibmFtZVwiIDogQG5hbWVcblxuICAgIHRlYWNoZXIgPSBuZXcgVGVhY2hlciB0ZWFjaGVyRG9jXG4gICAgdGVhY2hlci5zYXZlIFxuICAgICAgXCJfaWRcIiA6IFV0aWxzLmh1bWFuR1VJRCgpXG4gICAgLFxuICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgVGFuZ2VyaW5lLnVzZXIuc2F2ZVxuICAgICAgICAgIFwidGVhY2hlcklkXCIgOiB0ZWFjaGVyLmlkXG4gICAgICAgICxcbiAgICAgICAgICBzdWNjZXNzOiA9PlxuICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJOZXcgdGVhY2hlciByZWdpc3RlcmVkXCJcbiAgICAgICAgICAgIFRhbmdlcmluZS51c2VyLmxvZ2luIEBuYW1lLCBAcGFzcywgc3VjY2VzczogLT4gVGFuZ2VyaW5lLnJvdXRlci5sYW5kaW5nKClcbiAgICAgICAgICBlcnJvcjogKGVycm9yKSAtPlxuICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJSZWdpc3RyYXRpb24gZXJyb3I8YnI+I3tlcnJvcn1cIiwgNTAwMFxuXG5cbiAgcmVuZGVyOiAtPlxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGgxPlJlZ2lzdGVyIG5ldyB0ZWFjaGVyPC9oMT5cbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0ZCBjbGFzcz0nc21hbGxfZ3JleSc+PGI+VXNlcm5hbWU8L2I+PC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3M9J3NtYWxsX2dyZXknPiN7QG5hbWV9PC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3M9J3NtYWxsX2dyZXknPjxiPlBhc3N3b3JkPC9iPjwvdGQ+XG4gICAgICAgICAgPHRkIGNsYXNzPSdzbWFsbF9ncmV5Jz4jeyhcIipcIiBmb3IgeCBpbiBAcGFzcykuam9pbignJyl9PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvdGFibGU+XG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxsYWJlbCBmb3I9J2ZpcnN0Jz5GaXJzdCBuYW1lPC9sYWJlbD5cbiAgICAgICAgPGRpdiBpZD0nZmlyc3RfbWVzc2FnZScgY2xhc3M9J21lc3NhZ2VzJz48L2Rpdj5cbiAgICAgICAgPGlucHV0IGlkPSdmaXJzdCc+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsIGZvcj0nbGFzdCc+TGFzdCBOYW1lPC9sYWJlbD5cbiAgICAgICAgPGRpdiBpZD0nbGFzdF9tZXNzYWdlJyBjbGFzcz0nbWVzc2FnZXMnPjwvZGl2PlxuICAgICAgICA8aW5wdXQgaWQ9J2xhc3QnPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxsYWJlbCBmb3I9J2dlbmRlcic+R2VuZGVyPC9sYWJlbD5cbiAgICAgICAgPGRpdiBpZD0nZ2VuZGVyX21lc3NhZ2UnIGNsYXNzPSdtZXNzYWdlcyc+PC9kaXY+XG4gICAgICAgIDxpbnB1dCBpZD0nZ2VuZGVyJz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICA8bGFiZWwgZm9yPSdzY2hvb2wnPlNjaG9vbCBuYW1lPC9sYWJlbD5cbiAgICAgICAgPGRpdiBpZD0nc2Nob29sX21lc3NhZ2UnIGNsYXNzPSdtZXNzYWdlcyc+PC9kaXY+XG4gICAgICAgIDxpbnB1dCBpZD0nc2Nob29sJz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICA8bGFiZWwgZm9yPSdjb250YWN0Jz5FbWFpbCBhZGRyZXNzIG9yIG1vYmlsZSBwaG9uZSBudW1iZXI8L2xhYmVsPlxuICAgICAgICA8ZGl2IHR5cGU9J2VtYWlsJyBpZD0nY29udGFjdF9tZXNzYWdlJyBjbGFzcz0nbWVzc2FnZXMnPjwvZGl2PlxuICAgICAgICA8aW5wdXQgaWQ9J2NvbnRhY3QnPlxuICAgICAgPC9kaXY+XG4gICAgICA8YnV0dG9uIGNsYXNzPSdyZWdpc3RlciBjb21tYW5kJz5SZWdpc3RlcjwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdjYW5jZWwgY29tbWFuZCc+Q2FuY2VsPC9idXR0b24+XG4gICAgXCJcbiAgICBmb3IgZWxlbWVudCBpbiBAZmllbGRzXG4gICAgICBAW2VsZW1lbnRdID0gQCRlbC5maW5kKFwiI1wiK2VsZW1lbnQpXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiIsInZhciBSZWdpc3RlclRlYWNoZXJWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuUmVnaXN0ZXJUZWFjaGVyVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChSZWdpc3RlclRlYWNoZXJWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBSZWdpc3RlclRlYWNoZXJWaWV3KCkge1xuICAgIHJldHVybiBSZWdpc3RlclRlYWNoZXJWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgUmVnaXN0ZXJUZWFjaGVyVmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJSZWdpc3RlclRlYWNoZXJWaWV3XCI7XG5cbiAgUmVnaXN0ZXJUZWFjaGVyVmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdjbGljayAucmVnaXN0ZXInOiAncmVnaXN0ZXInLFxuICAgICdjbGljayAuY2FuY2VsJzogJ2NhbmNlbCdcbiAgfTtcblxuICBSZWdpc3RlclRlYWNoZXJWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICB0aGlzLnBhc3MgPSBvcHRpb25zLnBhc3M7XG4gICAgcmV0dXJuIHRoaXMuZmllbGRzID0gW1wiZmlyc3RcIiwgXCJsYXN0XCIsIFwiZ2VuZGVyXCIsIFwic2Nob29sXCIsIFwiY29udGFjdFwiXTtcbiAgfTtcblxuICBSZWdpc3RlclRlYWNoZXJWaWV3LnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5sb2dpbigpO1xuICB9O1xuXG4gIFJlZ2lzdGVyVGVhY2hlclZpZXcucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGUoKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5zYXZlVXNlcigpO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gIH07XG5cbiAgUmVnaXN0ZXJUZWFjaGVyVmlldy5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciBlbGVtZW50LCBlcnJvcnMsIGksIGxlbiwgcmVmO1xuICAgIGVycm9ycyA9IGZhbHNlO1xuICAgIHJlZiA9IHRoaXMuZmllbGRzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgZWxlbWVudCA9IHJlZltpXTtcbiAgICAgIGlmIChfLmlzRW1wdHkodGhpc1tlbGVtZW50XS52YWwoKSkpIHtcbiAgICAgICAgdGhpcy4kZWwuZmluZChcIiNcIiArIGVsZW1lbnQgKyBcIl9tZXNzYWdlXCIpLmh0bWwoXCJQbGVhc2UgZmlsbCBvdXQgdGhpcyBmaWVsZC5cIik7XG4gICAgICAgIGVycm9ycyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbC5maW5kKFwiI1wiICsgZWxlbWVudCArIFwiX21lc3NhZ2VcIikuaHRtbChcIlwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVycm9ycykge1xuICAgICAgcmV0dXJuIFV0aWxzLm1pZEFsZXJ0KFwiUGxlYXNlIGNvcnJlY3QgdGhlIGVycm9ycyBvbiB0aGlzIHBhZ2UuXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gIH07XG5cbiAgUmVnaXN0ZXJUZWFjaGVyVmlldy5wcm90b3R5cGUuc2F2ZVVzZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY291Y2hVc2VyRG9jLCBlbGVtZW50LCBpLCBsZW4sIHJlZiwgdGVhY2hlciwgdGVhY2hlckRvYztcbiAgICB0ZWFjaGVyRG9jID0ge1xuICAgICAgXCJuYW1lXCI6IHRoaXMubmFtZVxuICAgIH07XG4gICAgcmVmID0gdGhpcy5maWVsZHM7XG4gICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBlbGVtZW50ID0gcmVmW2ldO1xuICAgICAgdGVhY2hlckRvY1tlbGVtZW50XSA9IHRoaXNbZWxlbWVudF0udmFsKCk7XG4gICAgfVxuICAgIGNvdWNoVXNlckRvYyA9IHtcbiAgICAgIFwibmFtZVwiOiB0aGlzLm5hbWVcbiAgICB9O1xuICAgIHRlYWNoZXIgPSBuZXcgVGVhY2hlcih0ZWFjaGVyRG9jKTtcbiAgICByZXR1cm4gdGVhY2hlci5zYXZlKHtcbiAgICAgIFwiX2lkXCI6IFV0aWxzLmh1bWFuR1VJRCgpXG4gICAgfSwge1xuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIuc2F2ZSh7XG4gICAgICAgICAgICBcInRlYWNoZXJJZFwiOiB0ZWFjaGVyLmlkXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiTmV3IHRlYWNoZXIgcmVnaXN0ZXJlZFwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLmxvZ2luKF90aGlzLm5hbWUsIF90aGlzLnBhc3MsIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLmxhbmRpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQoXCJSZWdpc3RyYXRpb24gZXJyb3I8YnI+XCIgKyBlcnJvciwgNTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFJlZ2lzdGVyVGVhY2hlclZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlbGVtZW50LCBpLCBsZW4sIHJlZiwgeDtcbiAgICB0aGlzLiRlbC5odG1sKFwiPGgxPlJlZ2lzdGVyIG5ldyB0ZWFjaGVyPC9oMT4gPHRhYmxlPiA8dHI+IDx0ZCBjbGFzcz0nc21hbGxfZ3JleSc+PGI+VXNlcm5hbWU8L2I+PC90ZD4gPHRkIGNsYXNzPSdzbWFsbF9ncmV5Jz5cIiArIHRoaXMubmFtZSArIFwiPC90ZD4gPHRkIGNsYXNzPSdzbWFsbF9ncmV5Jz48Yj5QYXNzd29yZDwvYj48L3RkPiA8dGQgY2xhc3M9J3NtYWxsX2dyZXknPlwiICsgKCgoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgbGVuLCByZWYsIHJlc3VsdHM7XG4gICAgICByZWYgPSB0aGlzLnBhc3M7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgeCA9IHJlZltpXTtcbiAgICAgICAgcmVzdWx0cy5wdXNoKFwiKlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pLmNhbGwodGhpcykpLmpvaW4oJycpKSArIFwiPC90ZD4gPC90cj4gPC90YWJsZT4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdmaXJzdCc+Rmlyc3QgbmFtZTwvbGFiZWw+IDxkaXYgaWQ9J2ZpcnN0X21lc3NhZ2UnIGNsYXNzPSdtZXNzYWdlcyc+PC9kaXY+IDxpbnB1dCBpZD0nZmlyc3QnPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdsYXN0Jz5MYXN0IE5hbWU8L2xhYmVsPiA8ZGl2IGlkPSdsYXN0X21lc3NhZ2UnIGNsYXNzPSdtZXNzYWdlcyc+PC9kaXY+IDxpbnB1dCBpZD0nbGFzdCc+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J2dlbmRlcic+R2VuZGVyPC9sYWJlbD4gPGRpdiBpZD0nZ2VuZGVyX21lc3NhZ2UnIGNsYXNzPSdtZXNzYWdlcyc+PC9kaXY+IDxpbnB1dCBpZD0nZ2VuZGVyJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nc2Nob29sJz5TY2hvb2wgbmFtZTwvbGFiZWw+IDxkaXYgaWQ9J3NjaG9vbF9tZXNzYWdlJyBjbGFzcz0nbWVzc2FnZXMnPjwvZGl2PiA8aW5wdXQgaWQ9J3NjaG9vbCc+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J2NvbnRhY3QnPkVtYWlsIGFkZHJlc3Mgb3IgbW9iaWxlIHBob25lIG51bWJlcjwvbGFiZWw+IDxkaXYgdHlwZT0nZW1haWwnIGlkPSdjb250YWN0X21lc3NhZ2UnIGNsYXNzPSdtZXNzYWdlcyc+PC9kaXY+IDxpbnB1dCBpZD0nY29udGFjdCc+IDwvZGl2PiA8YnV0dG9uIGNsYXNzPSdyZWdpc3RlciBjb21tYW5kJz5SZWdpc3RlcjwvYnV0dG9uPiA8YnV0dG9uIGNsYXNzPSdjYW5jZWwgY29tbWFuZCc+Q2FuY2VsPC9idXR0b24+XCIpO1xuICAgIHJlZiA9IHRoaXMuZmllbGRzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgZWxlbWVudCA9IHJlZltpXTtcbiAgICAgIHRoaXNbZWxlbWVudF0gPSB0aGlzLiRlbC5maW5kKFwiI1wiICsgZWxlbWVudCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICByZXR1cm4gUmVnaXN0ZXJUZWFjaGVyVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIFN0dWRlbnQgZXh0ZW5kcyBCYWNrYm9uZS5Nb2RlbFxuXG4gIHVybCA6IFwic3R1ZGVudFwiXG5cbiAgZGVmYXVsdHMgOlxuICAgIGdlbmRlciAgOiBcIk5vdCBlbnRlcmVkXCJcbiAgICBhZ2UgICAgIDogXCJOb3QgZW50ZXJlZFwiXG4gICAgbmFtZSAgICA6IFwiTm90IGVudGVyZWRcIlxuICAgIGtsYXNzSWQgOiBudWxsXG5cbiAgaW5pdGlhbGl6ZTogLT4iLCJ2YXIgU3R1ZGVudCxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblN0dWRlbnQgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoU3R1ZGVudCwgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gU3R1ZGVudCgpIHtcbiAgICByZXR1cm4gU3R1ZGVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFN0dWRlbnQucHJvdG90eXBlLnVybCA9IFwic3R1ZGVudFwiO1xuXG4gIFN0dWRlbnQucHJvdG90eXBlLmRlZmF1bHRzID0ge1xuICAgIGdlbmRlcjogXCJOb3QgZW50ZXJlZFwiLFxuICAgIGFnZTogXCJOb3QgZW50ZXJlZFwiLFxuICAgIG5hbWU6IFwiTm90IGVudGVyZWRcIixcbiAgICBrbGFzc0lkOiBudWxsXG4gIH07XG5cbiAgU3R1ZGVudC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge307XG5cbiAgcmV0dXJuIFN0dWRlbnQ7XG5cbn0pKEJhY2tib25lLk1vZGVsKTtcblxuIiwiY2xhc3MgU3R1ZGVudHMgZXh0ZW5kcyBCYWNrYm9uZS5Db2xsZWN0aW9uXG5cbiAgbW9kZWw6IFN0dWRlbnRcbiAgdXJsOiBcInN0dWRlbnRcIlxuXG4gIGNvbXBhcmF0b3I6IChtb2RlbCkgLT5cbiAgICBtb2RlbC5nZXQoXCJuYW1lXCIpLnRvTG93ZXJDYXNlKClcbiIsInZhciBTdHVkZW50cyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblN0dWRlbnRzID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFN0dWRlbnRzLCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBTdHVkZW50cygpIHtcbiAgICByZXR1cm4gU3R1ZGVudHMuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBTdHVkZW50cy5wcm90b3R5cGUubW9kZWwgPSBTdHVkZW50O1xuXG4gIFN0dWRlbnRzLnByb3RvdHlwZS51cmwgPSBcInN0dWRlbnRcIjtcblxuICBTdHVkZW50cy5wcm90b3R5cGUuY29tcGFyYXRvciA9IGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgcmV0dXJuIG1vZGVsLmdldChcIm5hbWVcIikudG9Mb3dlckNhc2UoKTtcbiAgfTtcblxuICByZXR1cm4gU3R1ZGVudHM7XG5cbn0pKEJhY2tib25lLkNvbGxlY3Rpb24pO1xuXG4iLCJjbGFzcyBTdHVkZW50TGlzdEVsZW1lbnRWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZTogXCJzdHVkZW50X2xpc3RfZWxlbWVudFwiXG4gIHRhZ05hbWUgOiBcImxpXCJcblxuICBldmVudHMgOlxuICAgICdjbGljayAuZWRpdCcgICAgICAgICAgOiAnZWRpdCdcbiAgICAnY2xpY2sgLnJlbW92ZScgICAgICAgIDogJ3RvZ2dsZVJlbW92ZSdcbiAgICAnY2xpY2sgLnJlbW92ZV9jYW5jZWwnIDogJ3RvZ2dsZVJlbW92ZSdcbiAgICAnY2xpY2sgLnJlbW92ZV9kZWxldGUnIDogJ3JlbW92ZVN0dWRlbnQnXG4gIFxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBAc3R1ZGVudCA9IG9wdGlvbnMuc3R1ZGVudFxuICAgIEBzdHVkZW50cyA9IG9wdGlvbnMuc3R1ZGVudHNcbiAgXG4gIGVkaXQ6ICAgIC0+IFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJjbGFzcy9zdHVkZW50LyN7QHN0dWRlbnQuaWR9XCIsIHRydWVcbiAgdG9nZ2xlUmVtb3ZlOiAtPiBAJGVsLmZpbmQoXCIucmVtb3ZlX2NvbmZpcm0sIC5yZW1vdmVcIikudG9nZ2xlKClcbiAgcmVtb3ZlU3R1ZGVudDogLT4gXG4gICAgQHN0dWRlbnQuc2V0KGtsYXNzSWQgOiBudWxsKS5zYXZlKClcbiAgICBAc3R1ZGVudHMucmVtb3ZlKEBzdHVkZW50KVxuXG4gIHJlbmRlcjogLT5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgICN7QHN0dWRlbnQuZ2V0ICduYW1lJ31cbiAgICAgICN7QHN0dWRlbnQuZ2V0ICdnZW5kZXInfVxuICAgICAgI3tAc3R1ZGVudC5nZXQgJ2FnZSd9XG4gICAgICA8aW1nIHNyYz0naW1hZ2VzL2ljb25fZWRpdC5wbmcnIGNsYXNzPSdlZGl0JyB0aXRsZT0nRWRpdCc+XG4gICAgICA8aW1nIHNyYz0naW1hZ2VzL2ljb25fZGVsZXRlLnBuZycgY2xhc3M9J3JlbW92ZScgdGl0bGU9J1JlbW92ZSc+XG4gICAgICA8ZGl2IGNsYXNzPSdyZW1vdmVfY29uZmlybSBjb25maXJtYXRpb24nPlxuICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgI3t0KCdyZW1vdmUgc3R1ZGVudCcpfTxicj5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdyZW1vdmVfZGVsZXRlIGNvbW1hbmRfcmVkJz4je3QoJ3JlbW92ZScpfTwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9J3JlbW92ZV9jYW5jZWwgY29tbWFuZCc+I3t0KCdjYW5jZWwnKX08L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBcIlxuICAgIFxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuIiwidmFyIFN0dWRlbnRMaXN0RWxlbWVudFZpZXcsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5TdHVkZW50TGlzdEVsZW1lbnRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFN0dWRlbnRMaXN0RWxlbWVudFZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFN0dWRlbnRMaXN0RWxlbWVudFZpZXcoKSB7XG4gICAgcmV0dXJuIFN0dWRlbnRMaXN0RWxlbWVudFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBTdHVkZW50TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcInN0dWRlbnRfbGlzdF9lbGVtZW50XCI7XG5cbiAgU3R1ZGVudExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUudGFnTmFtZSA9IFwibGlcIjtcblxuICBTdHVkZW50TGlzdEVsZW1lbnRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrIC5lZGl0JzogJ2VkaXQnLFxuICAgICdjbGljayAucmVtb3ZlJzogJ3RvZ2dsZVJlbW92ZScsXG4gICAgJ2NsaWNrIC5yZW1vdmVfY2FuY2VsJzogJ3RvZ2dsZVJlbW92ZScsXG4gICAgJ2NsaWNrIC5yZW1vdmVfZGVsZXRlJzogJ3JlbW92ZVN0dWRlbnQnXG4gIH07XG5cbiAgU3R1ZGVudExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLnN0dWRlbnQgPSBvcHRpb25zLnN0dWRlbnQ7XG4gICAgcmV0dXJuIHRoaXMuc3R1ZGVudHMgPSBvcHRpb25zLnN0dWRlbnRzO1xuICB9O1xuXG4gIFN0dWRlbnRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLmVkaXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcImNsYXNzL3N0dWRlbnQvXCIgKyB0aGlzLnN0dWRlbnQuaWQsIHRydWUpO1xuICB9O1xuXG4gIFN0dWRlbnRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnRvZ2dsZVJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLnJlbW92ZV9jb25maXJtLCAucmVtb3ZlXCIpLnRvZ2dsZSgpO1xuICB9O1xuXG4gIFN0dWRlbnRMaXN0RWxlbWVudFZpZXcucHJvdG90eXBlLnJlbW92ZVN0dWRlbnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0dWRlbnQuc2V0KHtcbiAgICAgIGtsYXNzSWQ6IG51bGxcbiAgICB9KS5zYXZlKCk7XG4gICAgcmV0dXJuIHRoaXMuc3R1ZGVudHMucmVtb3ZlKHRoaXMuc3R1ZGVudCk7XG4gIH07XG5cbiAgU3R1ZGVudExpc3RFbGVtZW50Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwuaHRtbCgodGhpcy5zdHVkZW50LmdldCgnbmFtZScpKSArIFwiIFwiICsgKHRoaXMuc3R1ZGVudC5nZXQoJ2dlbmRlcicpKSArIFwiIFwiICsgKHRoaXMuc3R1ZGVudC5nZXQoJ2FnZScpKSArIFwiIDxpbWcgc3JjPSdpbWFnZXMvaWNvbl9lZGl0LnBuZycgY2xhc3M9J2VkaXQnIHRpdGxlPSdFZGl0Jz4gPGltZyBzcmM9J2ltYWdlcy9pY29uX2RlbGV0ZS5wbmcnIGNsYXNzPSdyZW1vdmUnIHRpdGxlPSdSZW1vdmUnPiA8ZGl2IGNsYXNzPSdyZW1vdmVfY29uZmlybSBjb25maXJtYXRpb24nPiA8ZGl2IGNsYXNzPSdtZW51X2JveCc+IFwiICsgKHQoJ3JlbW92ZSBzdHVkZW50JykpICsgXCI8YnI+IDxidXR0b24gY2xhc3M9J3JlbW92ZV9kZWxldGUgY29tbWFuZF9yZWQnPlwiICsgKHQoJ3JlbW92ZScpKSArIFwiPC9idXR0b24+IDxidXR0b24gY2xhc3M9J3JlbW92ZV9jYW5jZWwgY29tbWFuZCc+XCIgKyAodCgnY2FuY2VsJykpICsgXCI8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PlwiKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgcmV0dXJuIFN0dWRlbnRMaXN0RWxlbWVudFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBTdHVkZW50RWRpdFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcIlN0dWRlbnRFZGl0Vmlld1wiXG5cbiAgZXZlbnRzOlxuICAgICdjbGljayAuZG9uZScgOiAnZG9uZSdcbiAgICAnY2xpY2sgLmJhY2snIDogJ2JhY2snXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cbiAgICBAc3R1ZGVudCA9IG9wdGlvbnMuc3R1ZGVudFxuICAgIEBrbGFzc2VzID0gb3B0aW9ucy5rbGFzc2VzXG5cbiAgZG9uZTogLT5cbiAgICBrbGFzc0lkID0gQCRlbC5maW5kKFwiI2tsYXNzX3NlbGVjdCBvcHRpb246c2VsZWN0ZWRcIikuYXR0cihcImRhdGEtaWRcIilcbiAgICBrbGFzc0lkID0gbnVsbCBpZiBrbGFzc0lkID09IFwibnVsbFwiXG4gICAgQHN0dWRlbnQuc2V0XG4gICAgICBuYW1lICAgIDogQCRlbC5maW5kKFwiI25hbWVcIikudmFsKClcbiAgICAgIGdlbmRlciAgOiBAJGVsLmZpbmQoXCIjZ2VuZGVyXCIpLnZhbCgpXG4gICAgICBhZ2UgICAgIDogQCRlbC5maW5kKFwiI2FnZVwiKS52YWwoKVxuICAgICAga2xhc3NJZCA6IGtsYXNzSWRcbiAgICBAc3R1ZGVudC5zYXZlKClcbiAgICBAYmFjaygpXG5cbiAgYmFjazogLT5cbiAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKClcblxuICByZW5kZXI6IC0+XG4gICAgbmFtZSAgID0gQHN0dWRlbnQuZ2V0KFwibmFtZVwiKSAgIHx8IFwiXCJcbiAgICBnZW5kZXIgPSBAc3R1ZGVudC5nZXQoXCJnZW5kZXJcIikgfHwgXCJcIlxuICAgIGFnZSAgICA9IEBzdHVkZW50LmdldChcImFnZVwiKSAgICB8fCBcIlwiXG5cbiAgICBrbGFzc0lkID0gQHN0dWRlbnQuZ2V0KFwia2xhc3NJZFwiKVxuICAgIGh0bWwgPSBcIlxuICAgIDxoMT4je3QoJ2VkaXQgc3R1ZGVudCcpfTwvaDE+XG4gICAgPGJ1dHRvbiBjbGFzcz0nYmFjayBuYXZpZ2F0aW9uJz4je3QoJ2JhY2snKX08L2J1dHRvbj48YnI+XG4gICAgPGRpdiBjbGFzcz0naW5mb19ib3gnPlxuICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICA8bGFiZWwgZm9yPSduYW1lJz5GdWxsIG5hbWU8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgaWQ9J25hbWUnIHZhbHVlPScje25hbWV9Jz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICA8bGFiZWwgZm9yPSdnZW5kZXInPiN7dCgnZ2VuZGVyJyl9PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IGlkPSdnZW5kZXInIHZhbHVlPScje2dlbmRlcn0nPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgIDxsYWJlbCBmb3I9J2FnZSc+I3t0KCdhZ2UnKX08L2xhYmVsPlxuICAgICAgICA8aW5wdXQgaWQ9J2FnZScgdmFsdWU9JyN7YWdlfSc+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgPGxhYmVsIGZvcj0na2xhc3Nfc2VsZWN0Jz4je3QoJ2NsYXNzJyl9PC9sYWJlbD48YnI+XG4gICAgICAgIDxzZWxlY3QgaWQ9J2tsYXNzX3NlbGVjdCc+XCJcbiAgICBodG1sICs9IFwiPG9wdGlvbiBkYXRhLWlkPSdudWxsJyAje2lmIGtsYXNzSWQgPT0gbnVsbCB0aGVuIFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wifT4je3QoJ25vbmUnKX08L29wdGlvbj5cIlxuICAgIGZvciBrbGFzcyBpbiBAa2xhc3Nlcy5tb2RlbHNcbiAgICAgIGh0bWwgKz0gXCI8b3B0aW9uIGRhdGEtaWQ9JyN7a2xhc3MuaWR9JyAje2lmIGtsYXNzLmlkID09IGtsYXNzSWQgdGhlbiBcInNlbGVjdGVkPSdzZWxlY3RlZCdcIn0+I3trbGFzcy5nZXQgJ3llYXInfSAtICN7a2xhc3MuZ2V0ICdncmFkZSd9IC0gI3trbGFzcy5nZXQgJ3N0cmVhbSd9PC9vcHRpb24+XCJcblxuICAgIGh0bWwgKz0gXCJcbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxidXR0b24gY2xhc3M9J2RvbmUgY29tbWFuZCc+I3t0KCdkb25lJyl9PC9idXR0b24+XG4gICAgPC9kaXY+XG4gICAgXCJcbiAgICBcbiAgICBAJGVsLmh0bWwgaHRtbFxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuXG4iLCJ2YXIgU3R1ZGVudEVkaXRWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuU3R1ZGVudEVkaXRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFN0dWRlbnRFZGl0Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gU3R1ZGVudEVkaXRWaWV3KCkge1xuICAgIHJldHVybiBTdHVkZW50RWRpdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBTdHVkZW50RWRpdFZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiU3R1ZGVudEVkaXRWaWV3XCI7XG5cbiAgU3R1ZGVudEVkaXRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrIC5kb25lJzogJ2RvbmUnLFxuICAgICdjbGljayAuYmFjayc6ICdiYWNrJ1xuICB9O1xuXG4gIFN0dWRlbnRFZGl0Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLnN0dWRlbnQgPSBvcHRpb25zLnN0dWRlbnQ7XG4gICAgcmV0dXJuIHRoaXMua2xhc3NlcyA9IG9wdGlvbnMua2xhc3NlcztcbiAgfTtcblxuICBTdHVkZW50RWRpdFZpZXcucHJvdG90eXBlLmRvbmUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIga2xhc3NJZDtcbiAgICBrbGFzc0lkID0gdGhpcy4kZWwuZmluZChcIiNrbGFzc19zZWxlY3Qgb3B0aW9uOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLWlkXCIpO1xuICAgIGlmIChrbGFzc0lkID09PSBcIm51bGxcIikge1xuICAgICAga2xhc3NJZCA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuc3R1ZGVudC5zZXQoe1xuICAgICAgbmFtZTogdGhpcy4kZWwuZmluZChcIiNuYW1lXCIpLnZhbCgpLFxuICAgICAgZ2VuZGVyOiB0aGlzLiRlbC5maW5kKFwiI2dlbmRlclwiKS52YWwoKSxcbiAgICAgIGFnZTogdGhpcy4kZWwuZmluZChcIiNhZ2VcIikudmFsKCksXG4gICAgICBrbGFzc0lkOiBrbGFzc0lkXG4gICAgfSk7XG4gICAgdGhpcy5zdHVkZW50LnNhdmUoKTtcbiAgICByZXR1cm4gdGhpcy5iYWNrKCk7XG4gIH07XG5cbiAgU3R1ZGVudEVkaXRWaWV3LnByb3RvdHlwZS5iYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgfTtcblxuICBTdHVkZW50RWRpdFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhZ2UsIGdlbmRlciwgaHRtbCwgaSwga2xhc3MsIGtsYXNzSWQsIGxlbiwgbmFtZSwgcmVmO1xuICAgIG5hbWUgPSB0aGlzLnN0dWRlbnQuZ2V0KFwibmFtZVwiKSB8fCBcIlwiO1xuICAgIGdlbmRlciA9IHRoaXMuc3R1ZGVudC5nZXQoXCJnZW5kZXJcIikgfHwgXCJcIjtcbiAgICBhZ2UgPSB0aGlzLnN0dWRlbnQuZ2V0KFwiYWdlXCIpIHx8IFwiXCI7XG4gICAga2xhc3NJZCA9IHRoaXMuc3R1ZGVudC5nZXQoXCJrbGFzc0lkXCIpO1xuICAgIGh0bWwgPSBcIjxoMT5cIiArICh0KCdlZGl0IHN0dWRlbnQnKSkgKyBcIjwvaDE+IDxidXR0b24gY2xhc3M9J2JhY2sgbmF2aWdhdGlvbic+XCIgKyAodCgnYmFjaycpKSArIFwiPC9idXR0b24+PGJyPiA8ZGl2IGNsYXNzPSdpbmZvX2JveCc+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nbmFtZSc+RnVsbCBuYW1lPC9sYWJlbD4gPGlucHV0IGlkPSduYW1lJyB2YWx1ZT0nXCIgKyBuYW1lICsgXCInPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdnZW5kZXInPlwiICsgKHQoJ2dlbmRlcicpKSArIFwiPC9sYWJlbD4gPGlucHV0IGlkPSdnZW5kZXInIHZhbHVlPSdcIiArIGdlbmRlciArIFwiJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nYWdlJz5cIiArICh0KCdhZ2UnKSkgKyBcIjwvbGFiZWw+IDxpbnB1dCBpZD0nYWdlJyB2YWx1ZT0nXCIgKyBhZ2UgKyBcIic+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J2tsYXNzX3NlbGVjdCc+XCIgKyAodCgnY2xhc3MnKSkgKyBcIjwvbGFiZWw+PGJyPiA8c2VsZWN0IGlkPSdrbGFzc19zZWxlY3QnPlwiO1xuICAgIGh0bWwgKz0gXCI8b3B0aW9uIGRhdGEtaWQ9J251bGwnIFwiICsgKGtsYXNzSWQgPT09IG51bGwgPyBcInNlbGVjdGVkPSdzZWxlY3RlZCdcIiA6IHZvaWQgMCkgKyBcIj5cIiArICh0KCdub25lJykpICsgXCI8L29wdGlvbj5cIjtcbiAgICByZWYgPSB0aGlzLmtsYXNzZXMubW9kZWxzO1xuICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAga2xhc3MgPSByZWZbaV07XG4gICAgICBodG1sICs9IFwiPG9wdGlvbiBkYXRhLWlkPSdcIiArIGtsYXNzLmlkICsgXCInIFwiICsgKGtsYXNzLmlkID09PSBrbGFzc0lkID8gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCIgOiB2b2lkIDApICsgXCI+XCIgKyAoa2xhc3MuZ2V0KCd5ZWFyJykpICsgXCIgLSBcIiArIChrbGFzcy5nZXQoJ2dyYWRlJykpICsgXCIgLSBcIiArIChrbGFzcy5nZXQoJ3N0cmVhbScpKSArIFwiPC9vcHRpb24+XCI7XG4gICAgfVxuICAgIGh0bWwgKz0gXCI8L3NlbGVjdD4gPC9kaXY+IDxidXR0b24gY2xhc3M9J2RvbmUgY29tbWFuZCc+XCIgKyAodCgnZG9uZScpKSArIFwiPC9idXR0b24+IDwvZGl2PlwiO1xuICAgIHRoaXMuJGVsLmh0bWwoaHRtbCk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIHJldHVybiBTdHVkZW50RWRpdFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBDcml0aXF1ZSBleHRlbmRzIEJhY2tib25lLkNoaWxkTW9kZWxcblxuICB1cmw6IFwiY3JpdGlxdWVcIlxuXG4gIGluaXRpYWxpemU6IC0+XG5cbiAgc2hvdWxkU2hvd05vdGVzOiAtPlxuICAgIEBnZXRTdHJpbmcoXCJzaG93Tm90ZXNcIikgPT0gXCJ0cnVlXCIgb3IgQGdldFN0cmluZyhcInNob3dOb3Rlc1wiKSA9PSB0cnVlIiwidmFyIENyaXRpcXVlLFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuQ3JpdGlxdWUgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoQ3JpdGlxdWUsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIENyaXRpcXVlKCkge1xuICAgIHJldHVybiBDcml0aXF1ZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIENyaXRpcXVlLnByb3RvdHlwZS51cmwgPSBcImNyaXRpcXVlXCI7XG5cbiAgQ3JpdGlxdWUucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbigpIHt9O1xuXG4gIENyaXRpcXVlLnByb3RvdHlwZS5zaG91bGRTaG93Tm90ZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdHJpbmcoXCJzaG93Tm90ZXNcIikgPT09IFwidHJ1ZVwiIHx8IHRoaXMuZ2V0U3RyaW5nKFwic2hvd05vdGVzXCIpID09PSB0cnVlO1xuICB9O1xuXG4gIHJldHVybiBDcml0aXF1ZTtcblxufSkoQmFja2JvbmUuQ2hpbGRNb2RlbCk7XG5cbiIsImNsYXNzIENyaXRpcXVlcyBleHRlbmRzIEJhY2tib25lLkNoaWxkQ29sbGVjdGlvblxuXG4gIG1vZGVsOiBDcml0aXF1ZVxuXG4gIGNvbXBhcmF0b3I6IChhLCBiKSAtPlxuICAgIHJldHVybiAxIHVubGVzcyBhLmhhcyhcIm9yZGVyXCIpXG4gICAgcGFyc2VJbnQoYS5nZXQoXCJvcmRlclwiKSkgLSBwYXJzZUludChiLmdldChcIm9yZGVyXCIpKVxuIiwidmFyIENyaXRpcXVlcyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkNyaXRpcXVlcyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChDcml0aXF1ZXMsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIENyaXRpcXVlcygpIHtcbiAgICByZXR1cm4gQ3JpdGlxdWVzLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgQ3JpdGlxdWVzLnByb3RvdHlwZS5tb2RlbCA9IENyaXRpcXVlO1xuXG4gIENyaXRpcXVlcy5wcm90b3R5cGUuY29tcGFyYXRvciA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICBpZiAoIWEuaGFzKFwib3JkZXJcIikpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2VJbnQoYS5nZXQoXCJvcmRlclwiKSkgLSBwYXJzZUludChiLmdldChcIm9yZGVyXCIpKTtcbiAgfTtcblxuICByZXR1cm4gQ3JpdGlxdWVzO1xuXG59KShCYWNrYm9uZS5DaGlsZENvbGxlY3Rpb24pO1xuXG4iLCIjIENvbW11bmljYXRlcyB3aXRoIHRoZSBsb2NhdGlvbiB2aWV3XG5jbGFzcyBMb2NcblxuXG5cbiAgQHF1ZXJ5OiAobGV2ZWxzLCBjcml0ZXJpYSA9IHt9LCBxQ2FsbGJhY2ssIGNvbnRleHQpIC0+XG5cbiAgICBsb2NhdGlvbnMgPSBUYW5nZXJpbmUubG9jYXRpb25MaXN0LmdldCBcImxvY2F0aW9uc1wiXG4gICAgbG9jYXRpb25MZXZlbHMgPSBUYW5nZXJpbmUubG9jYXRpb25MaXN0LmdldCBcImxvY2F0aW9uc0xldmVsc1wiXG5cbiAgICB0YXJnZXRMZXZlbEluZGV4ID0gMFxuICAgIGxldmVsSURzID0gW11cbiAgICBsZXZlbE1hcCA9IFtdXG5cbiAgICBmb3IgbGV2ZWwsIGkgaW4gbG9jYXRpb25MZXZlbHNcbiAgICAgIGlmIF8uaW5kZXhPZihsZXZlbHMsIGxldmVsKSA9PSAtMVxuICAgICAgICBsZXZlbE1hcFtpXSA9IG51bGxcbiAgICAgIGVsc2VcbiAgICAgICAgbGV2ZWxNYXBbaV0gPSBsZXZlbFxuXG4gICAgY3VycmVudExldmVsSW5kZXggPSBMb2MuZ2V0Q3VycmVudExldmVsSW5kZXgobGV2ZWxzLCBjcml0ZXJpYSwgbGV2ZWxNYXApXG5cbiAgICAjY29uc29sZS5sb2cgXCJMb2MuX3F1ZXJ5KDAsIGN1cnJlbnRMZXZlbEluZGV4LCBsb2NhdGlvbnMsIGxldmVsTWFwLCBjcml0ZXJpYSlcIiwgMCwgY3VycmVudExldmVsSW5kZXgsIGxvY2F0aW9ucywgbGV2ZWxNYXAsIGNyaXRlcmlhXG4gICAgcmVzcCA9IExvYy5fcXVlcnkoMCwgY3VycmVudExldmVsSW5kZXgsIGxvY2F0aW9ucywgbGV2ZWxNYXAsIGNyaXRlcmlhKVxuXG4gICAgc2V0VGltZW91dCAoY2IpIC0+XG4gICAgICBpZiByZXNwLmxlbmd0aCBpcyAwXG4gICAgICAgIGNiLmFwcGx5IGNvbnRleHQsIFtudWxsXVxuICAgICAgZWxzZVxuICAgICAgICBjYi5hcHBseSBjb250ZXh0LCBbcmVzcF1cbiAgICAsIDAsIHFDYWxsYmFja1xuXG4gICAgIyBjb25zb2xlLmxvZyBcImxldmVsTWFwOiBcIiwgbGV2ZWxNYXBcbiAgICAjIGNvbnNvbGUubG9nIFwiY3VycmVudExldmVsSW5kZXg6IFwiLCBjdXJyZW50TGV2ZWxJbmRleFxuICAgICMgY29uc29sZS5sb2cgXCJyZXNwOiBcIiwgcmVzcFxuXG5cbiAgQF9xdWVyeTogKGRlcHRoLCB0YXJnZXREZXB0aCwgZGF0YSwgbGV2ZWxNYXAsIGNyaXRlcmlhKSAtPlxuXG4gICAgI2NvbnNvbGUubG9nIFwiX3F1ZXJ5OiAoZGVwdGgsIHRhcmdldERlcHRoLCBkYXRhLCBsZXZlbE1hcCwgY3JpdGVyaWEpXCIsIGRlcHRoLCB0YXJnZXREZXB0aCwgZGF0YSwgbGV2ZWxNYXAsIGNyaXRlcmlhXG5cbiAgICBpZiBkZXB0aCA9PSB0YXJnZXREZXB0aFxuICAgICAgcmV0dXJuIF8ubWFwIGRhdGEsIChvYmopIC0+XG4gICAgICAgIHJldHVybiB7IGlkOiBvYmouaWQsIGxhYmVsOiBvYmoubGFiZWx9XG5cbiAgICBpZiAobGV2ZWxNYXBbZGVwdGhdPykgYW5kIChkZXB0aCA8IHRhcmdldERlcHRoKVxuICAgICAgaWYgY3JpdGVyaWFbbGV2ZWxNYXBbZGVwdGhdXVxuICAgICAgICAjIGNvbnNvbGUubG9nIFwidG9vayBoaWdoIHJvYWRcIlxuICAgICAgICByZXR1cm4gTG9jLl9xdWVyeSAoZGVwdGggKyAxKSwgdGFyZ2V0RGVwdGgsIGRhdGFbY3JpdGVyaWFbbGV2ZWxNYXBbZGVwdGhdXV0uY2hpbGRyZW4sIGxldmVsTWFwLCBjcml0ZXJpYVxuXG4gICAgaWYgKG5vdCBsZXZlbE1hcFtkZXB0aF0/KSBhbmQgKGRlcHRoIDwgdGFyZ2V0RGVwdGgpXG4gICAgICBsZXZlbERhdGEgPSB7fVxuICAgICAgIyBjb25zb2xlLmxvZyBcInRvb2sgbG93IHJvYWRcIlxuICAgICAgYWxsQ2hpbGRyZW4gPSBfLm1hcCBkYXRhLCAobG9jKSAtPlxuICAgICAgICByZXR1cm4gbG9jLmNoaWxkcmVuXG4gICAgICBmb3IgdiwgaSBpbiBhbGxDaGlsZHJlblxuICAgICAgICBfLmV4dGVuZCBsZXZlbERhdGEsIHZcbiBcbiAgICAgIHJldHVybiBMb2MuX3F1ZXJ5IChkZXB0aCArIDEpLCB0YXJnZXREZXB0aCwgbGV2ZWxEYXRhLCBsZXZlbE1hcCwgY3JpdGVyaWFcbiAgICBjb25zb2xlLmxvZyBcIl9xdWVyeTogKGRlcHRoLCB0YXJnZXREZXB0aCwgZGF0YSwgbGV2ZWxNYXAsIGNyaXRlcmlhKVwiLCBkZXB0aCwgdGFyZ2V0RGVwdGgsIGRhdGEsIGxldmVsTWFwLCBjcml0ZXJpYVxuICAgIGNvbnNvbGUubG9nIFwiRVJST1I6IENhbm5vdCBmaW5kIGxvY2F0aW9uLiBJIHNob3VsZCBuZXZlciByZWFjaCB0aGlzLlwiXG4gICAgcmV0dXJuIHt9XG5cbiAgQGdldEN1cnJlbnRMZXZlbEluZGV4OiAobGV2ZWxzLCBjcml0ZXJpYSwgbGV2ZWxNYXApIC0+XG4gICAgZm9yIGxldmVsLCBpIGluIGxldmVsc1xuICAgICAgaWYgbm90IGNyaXRlcmlhW2xldmVsXT9cbiAgICAgICAgcmV0dXJuIF8uaW5kZXhPZihsZXZlbE1hcCwgbGV2ZWwpXG4gICAgcmV0dXJuIF8uaW5kZXhPZihsZXZlbE1hcCwgXy5sYXN0KGxldmVscykpXG5cbiAgXG4gICAgXG5cblxuXG4gIFxuICAgICAgXG4gICAgXG5cbiAgIyBjcml0ZXJpYSBjYW4gYmUgc29tZSBhcHByb3ByaWF0ZSBjb21iaW5hdGlvbiBvZiBjb3VudHk6IFwiXCIsIHpvbmU6IFwiXCIsIHNjaG9vbDogXCJcIi5cbiAgIyBpZiBpdCdzIHtrZXk6XCJcIn0gdGhlbiBpdCB3aWxsIGxvb2sgdXAgXCJrZXktWU9VUktFWVwiXG4gICMgQHF1ZXJ5OiAoY3JpdGVyaWEsIGNhbGxiYWNrLCBjb250ZXh0KSAtPlxuICAjICAgaWYgbm90IGNyaXRlcmlhP1xuICAjICAgICBrZXkgPSBcImNvdW50aWVzXCJcbiAgIyAgIGVsc2UgaWYgY3JpdGVyaWEua2V5P1xuICAjICAgICBrZXkgPSBcImtleS0je2NyaXRlcmlhLmtleX1cIlxuICAjICAgZWxzZSBpZiBjcml0ZXJpYS5wYXJlbnRzP1xuICAjICAgICBrZXkgPSBcInBhcmVudHMtI3tjcml0ZXJpYS5wYXJlbnRzfVwiXG4gICMgICBlbHNlXG4gICMgICAgIGtleSA9IExvYy5nZXRLZXkgY3JpdGVyaWFcblxuICAjICAgQF9xdWVyeShrZXksIGNhbGxiYWNrLCBjb250ZXh0KVxuXG4gICMgQF9xdWVyeTogKGtleSwgY2FsbGJhY2ssIGNvbnRleHQpIC0+XG4gICMgICAkLmNvdWNoLmRiKFRhbmdlcmluZS5kYl9uYW1lKS52aWV3IFwiI3tUYW5nZXJpbmUuZGVzaWduX2RvY30vbG9jYXRpb25cIixcbiAgIyAgICAga2V5IDoga2V5XG4gICMgICAgIGVycm9yOiAtPiBjb25zb2xlLmVycm9yIGFyZ3VtZW50c1xuICAjICAgICBzdWNjZXNzOiAocmVzKSAtPlxuICAjICAgICAgIGlmIHJlcy5yb3dzLmxlbmd0aCBpcyAwXG4gICMgICAgICAgICBjYWxsYmFjay5hcHBseSBjb250ZXh0LCBbbnVsbF1cbiAgIyAgICAgICBlbHNlXG4gICMgICAgICAgICBjYWxsYmFjay5hcHBseSBjb250ZXh0LCBbcmVzLnJvd3NbMF0udmFsdWVdXG5cblxuICAjIEBnZXRLZXk6IChjcml0ZXJpYSkgLT5cbiAgIyAgIGNyaXRlcmlhQXJyYXkgPSBbXVxuICAjICAgY3JpdGVyaWFBcnJheS5wdXNoKFwiY291bnR5LSN7Y3JpdGVyaWEuY291bnR5fVwiKSBpZiBjcml0ZXJpYS5jb3VudHk/XG4gICMgICBjcml0ZXJpYUFycmF5LnB1c2goXCJ6b25lLSN7Y3JpdGVyaWEuem9uZX1cIikgICAgIGlmIGNyaXRlcmlhLnpvbmU/XG4gICMgICBjcml0ZXJpYUFycmF5LnB1c2goXCJzY2hvb2wtI3tjcml0ZXJpYS5zY2hvb2x9XCIpIGlmIGNyaXRlcmlhLnNjaG9vbD9cbiAgIyAgIHJldHVybiBjcml0ZXJpYUFycmF5LmpvaW4oXCItXCIpXG5cbiIsInZhciBMb2M7XG5cbkxvYyA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gTG9jKCkge31cblxuICBMb2MucXVlcnkgPSBmdW5jdGlvbihsZXZlbHMsIGNyaXRlcmlhLCBxQ2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICB2YXIgY3VycmVudExldmVsSW5kZXgsIGksIGosIGxlbiwgbGV2ZWwsIGxldmVsSURzLCBsZXZlbE1hcCwgbG9jYXRpb25MZXZlbHMsIGxvY2F0aW9ucywgcmVzcCwgdGFyZ2V0TGV2ZWxJbmRleDtcbiAgICBpZiAoY3JpdGVyaWEgPT0gbnVsbCkge1xuICAgICAgY3JpdGVyaWEgPSB7fTtcbiAgICB9XG4gICAgbG9jYXRpb25zID0gVGFuZ2VyaW5lLmxvY2F0aW9uTGlzdC5nZXQoXCJsb2NhdGlvbnNcIik7XG4gICAgbG9jYXRpb25MZXZlbHMgPSBUYW5nZXJpbmUubG9jYXRpb25MaXN0LmdldChcImxvY2F0aW9uc0xldmVsc1wiKTtcbiAgICB0YXJnZXRMZXZlbEluZGV4ID0gMDtcbiAgICBsZXZlbElEcyA9IFtdO1xuICAgIGxldmVsTWFwID0gW107XG4gICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IGxvY2F0aW9uTGV2ZWxzLmxlbmd0aDsgaiA8IGxlbjsgaSA9ICsraikge1xuICAgICAgbGV2ZWwgPSBsb2NhdGlvbkxldmVsc1tpXTtcbiAgICAgIGlmIChfLmluZGV4T2YobGV2ZWxzLCBsZXZlbCkgPT09IC0xKSB7XG4gICAgICAgIGxldmVsTWFwW2ldID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsTWFwW2ldID0gbGV2ZWw7XG4gICAgICB9XG4gICAgfVxuICAgIGN1cnJlbnRMZXZlbEluZGV4ID0gTG9jLmdldEN1cnJlbnRMZXZlbEluZGV4KGxldmVscywgY3JpdGVyaWEsIGxldmVsTWFwKTtcbiAgICByZXNwID0gTG9jLl9xdWVyeSgwLCBjdXJyZW50TGV2ZWxJbmRleCwgbG9jYXRpb25zLCBsZXZlbE1hcCwgY3JpdGVyaWEpO1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKGNiKSB7XG4gICAgICBpZiAocmVzcC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNiLmFwcGx5KGNvbnRleHQsIFtudWxsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2IuYXBwbHkoY29udGV4dCwgW3Jlc3BdKTtcbiAgICAgIH1cbiAgICB9LCAwLCBxQ2FsbGJhY2spO1xuICB9O1xuXG4gIExvYy5fcXVlcnkgPSBmdW5jdGlvbihkZXB0aCwgdGFyZ2V0RGVwdGgsIGRhdGEsIGxldmVsTWFwLCBjcml0ZXJpYSkge1xuICAgIHZhciBhbGxDaGlsZHJlbiwgaSwgaiwgbGVuLCBsZXZlbERhdGEsIHY7XG4gICAgaWYgKGRlcHRoID09PSB0YXJnZXREZXB0aCkge1xuICAgICAgcmV0dXJuIF8ubWFwKGRhdGEsIGZ1bmN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiBvYmouaWQsXG4gICAgICAgICAgbGFiZWw6IG9iai5sYWJlbFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICgobGV2ZWxNYXBbZGVwdGhdICE9IG51bGwpICYmIChkZXB0aCA8IHRhcmdldERlcHRoKSkge1xuICAgICAgaWYgKGNyaXRlcmlhW2xldmVsTWFwW2RlcHRoXV0pIHtcbiAgICAgICAgcmV0dXJuIExvYy5fcXVlcnkoZGVwdGggKyAxLCB0YXJnZXREZXB0aCwgZGF0YVtjcml0ZXJpYVtsZXZlbE1hcFtkZXB0aF1dXS5jaGlsZHJlbiwgbGV2ZWxNYXAsIGNyaXRlcmlhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKChsZXZlbE1hcFtkZXB0aF0gPT0gbnVsbCkgJiYgKGRlcHRoIDwgdGFyZ2V0RGVwdGgpKSB7XG4gICAgICBsZXZlbERhdGEgPSB7fTtcbiAgICAgIGFsbENoaWxkcmVuID0gXy5tYXAoZGF0YSwgZnVuY3Rpb24obG9jKSB7XG4gICAgICAgIHJldHVybiBsb2MuY2hpbGRyZW47XG4gICAgICB9KTtcbiAgICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSBhbGxDaGlsZHJlbi5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgICAgdiA9IGFsbENoaWxkcmVuW2ldO1xuICAgICAgICBfLmV4dGVuZChsZXZlbERhdGEsIHYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIExvYy5fcXVlcnkoZGVwdGggKyAxLCB0YXJnZXREZXB0aCwgbGV2ZWxEYXRhLCBsZXZlbE1hcCwgY3JpdGVyaWEpO1xuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcIl9xdWVyeTogKGRlcHRoLCB0YXJnZXREZXB0aCwgZGF0YSwgbGV2ZWxNYXAsIGNyaXRlcmlhKVwiLCBkZXB0aCwgdGFyZ2V0RGVwdGgsIGRhdGEsIGxldmVsTWFwLCBjcml0ZXJpYSk7XG4gICAgY29uc29sZS5sb2coXCJFUlJPUjogQ2Fubm90IGZpbmQgbG9jYXRpb24uIEkgc2hvdWxkIG5ldmVyIHJlYWNoIHRoaXMuXCIpO1xuICAgIHJldHVybiB7fTtcbiAgfTtcblxuICBMb2MuZ2V0Q3VycmVudExldmVsSW5kZXggPSBmdW5jdGlvbihsZXZlbHMsIGNyaXRlcmlhLCBsZXZlbE1hcCkge1xuICAgIHZhciBpLCBqLCBsZW4sIGxldmVsO1xuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSBsZXZlbHMubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICBsZXZlbCA9IGxldmVsc1tpXTtcbiAgICAgIGlmIChjcml0ZXJpYVtsZXZlbF0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXy5pbmRleE9mKGxldmVsTWFwLCBsZXZlbCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfLmluZGV4T2YobGV2ZWxNYXAsIF8ubGFzdChsZXZlbHMpKTtcbiAgfTtcblxuICByZXR1cm4gTG9jO1xuXG59KSgpO1xuXG4iLCIjIGRpc3BsYXlzIGhlaXJhcmNoaWNhbCBkcm9wZG93bnMgYmFzZWQgb24gZ2VvZ3JhcGh5IGZyb20gTG9jXG5jbGFzcyBMb2NWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGV2ZW50cyA6XG4gICAgXCJjaGFuZ2Ugc2VsZWN0XCIgOiBcIm9uQ2hhbmdlXCJcblxuICBvbkNoYW5nZTogKGV2ZW50KSAtPlxuICAgICMgY2xlYXIgc3Vic2VxdWVudCBzZWxlY3QgYm94ZXNcbiAgICAkKGV2ZW50LnRhcmdldCkuY2xvc2VzdChcImRpdlwiKS5uZXh0QWxsKCkucmVtb3ZlKClcblxuICAgIGluZGV4ID0gcGFyc2VJbnQoJChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtaW5kZXgnKSlcbiAgICBAcmVuZGVyT25lKCBpbmRleCArIDEgKSB1bmxlc3MgaW5kZXggKyAxIGlzIEBsZXZlbHMubGVuZ3RoXG4gICAgQHRyaWdnZXIgXCJjaGFuZ2VcIlxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zPXt9KSAtPlxuICAgIEBzaG93VGl0bGVzID0gaWYgb3B0aW9ucy5zaG93VGl0bGVzPyB0aGVuIG9wdGlvbnMuc2hvd1RpdGxlcyBlbHNlIHRydWVcbiAgICBAbGV2ZWxzID0gb3B0aW9ucy5sZXZlbHMgfHwgW1wiY291bnR5XCIsIFwiem9uZVwiLCBcInNjaG9vbFwiXVxuICAgIEBhZGRlZE9wdGlvbnMgPSBpZiBvcHRpb25zLmFkZGVkT3B0aW9ucz8gdGhlbiBvcHRpb25zLmFkZGVkT3B0aW9ucyBlbHNlIGZhbHNlXG4gICAgQHNlbGVjdGVkID0gb3B0aW9ucy5zZWxlY3RlZCB8fCBbXVxuICAgIEByZW5kZXIoKVxuXG4gIGlzQ29tcGxldGU6IC0+XG4gICAgdmFsdWUgPSBAdmFsdWUoKVxuICAgIGZvciBsZXZlbCBpbiBAbGV2ZWxzXG4gICAgICByZXR1cm4gZmFsc2UgdW5sZXNzIHZhbHVlW2xldmVsXVxuICAgIHJldHVybiB0cnVlXG5cblxuICB2YWx1ZTogLT5cbiAgICByZXN1bHQgPSB7fVxuICAgIGZvciBsZXZlbCwgaSBpbiBAbGV2ZWxzXG4gICAgICBpZiBAJGVsLmZpbmQoXCJbZGF0YS1pbmRleD0nI3tpfSddXCIpLmxlbmd0aCBpc250IDBcbiAgICAgICAgcmVzdWx0W2xldmVsXSA9IEAkZWwuZmluZChcIltkYXRhLWluZGV4PScje2l9J11cIikudmFsKClcbiAgICByZXR1cm4gcmVzdWx0XG5cbiAgcmVuZGVyT25lOiAoaW5kZXgpIC0+XG4gICAgaWYgaW5kZXggaXMgMFxuICAgICAgY3JpdGVyaWEgPSB7fVxuICAgIGVsc2VcbiAgICAgIGNyaXRlcmlhID0gQHZhbHVlKClcblxuICAgIExvYy5xdWVyeSBAbGV2ZWxzLCBjcml0ZXJpYSwgKHJlcykgLT5cblxuICAgICAgaWYgQGFkZGVkT3B0aW9uc1xuICAgICAgICByZXMgPSBAYWRkZWRPcHRpb25zW2luZGV4XS5jb25jYXQgcmVzXG4gICAgICBjb25zb2xlLmxvZyBcInJlc3VsdHM6IFwiLCByZXNcbiAgICAgIHJlcyA9IHJlcy5zb3J0IChhLGIpIC0+XG4gICAgICAgIGlmIGEubGFiZWwudG9Mb3dlckNhc2UoKSA8IGIubGFiZWwudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIHJldHVybiAtMVxuICAgICAgICBlbHNlIGlmIGEubGFiZWwudG9Mb3dlckNhc2UoKSA+IGIubGFiZWwudG9Mb3dlckNhc2UoKVxuICAgICAgICAgIHJldHVybiAxXG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gMFxuXG4gICAgICBodG1sT3B0aW9ucyA9IHJlcy5tYXAgKGVsKSAtPlxuICAgICAgICBpZiBAc2VsZWN0ZWRbaW5kZXhdPyBhbmQgZWwuaWQgaXMgQHNlbGVjdGVkW2luZGV4XVxuICAgICAgICAgIHNlbGVjdGVkID0gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCJcbiAgICAgICAgXCI8b3B0aW9uIHZhbHVlPScje2VsLmlkfScgI3tzZWxlY3RlZHx8Jyd9PiN7ZWwubGFiZWx9PC9vcHRpb24+XCJcbiAgICAgICwgQFxuXG4gICAgICB0aXRsZSA9IEBsZXZlbHNbaW5kZXhdLnRpdGxlaXplKCkgaWYgQHNob3dUaXRsZXNcblxuICAgICAgbm9QcmVTZWxlY3Rpb24gPSBub3QgQHNlbGVjdGVkW2luZGV4XT9cbiAgICAgIGlmIG5vUHJlU2VsZWN0aW9uXG4gICAgICAgIHNlbGVjdGVkID0gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCJcblxuICAgICAgQCRlbC5hcHBlbmQgXCJcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8bGFiZWw+I3t0aXRsZSB8fCAnJ31cbiAgICAgICAgICAgIDxzZWxlY3QgZGF0YS1pbmRleD0nI3tpbmRleH0nPlxuICAgICAgICAgICAgICA8b3B0aW9uICN7c2VsZWN0ZWR8fCcnfSBkaXNhYmxlZD0nZGlzYWJsZWQnPlNlbGVjdC4uLjwvb3B0aW9uPlxuICAgICAgICAgICAgICAje2h0bWxPcHRpb25zfVxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8YnI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgXCJcbiAgICAgIGlmIEBzZWxlY3RlZC5sZW5ndGggaXNudCAwXG4gICAgICAgIGlmIGluZGV4ICsgMSBpcyBAc2VsZWN0ZWQubGVuZ3RoXG4gICAgICAgICAgQHNlbGVjdGVkID0gW11cbiAgICAgICAgZWxzZVxuICAgICAgICAgIEByZW5kZXJPbmUoaW5kZXgrMSlcbiAgICAsIEBcblxuXG5cbiAgcmVuZGVyOiAtPlxuICAgIEByZW5kZXJPbmUoMClcblxuIiwidmFyIExvY1ZpZXcsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5Mb2NWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKExvY1ZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIExvY1ZpZXcoKSB7XG4gICAgcmV0dXJuIExvY1ZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBMb2NWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgXCJjaGFuZ2Ugc2VsZWN0XCI6IFwib25DaGFuZ2VcIlxuICB9O1xuXG4gIExvY1ZpZXcucHJvdG90eXBlLm9uQ2hhbmdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgaW5kZXg7XG4gICAgJChldmVudC50YXJnZXQpLmNsb3Nlc3QoXCJkaXZcIikubmV4dEFsbCgpLnJlbW92ZSgpO1xuICAgIGluZGV4ID0gcGFyc2VJbnQoJChldmVudC50YXJnZXQpLmF0dHIoJ2RhdGEtaW5kZXgnKSk7XG4gICAgaWYgKGluZGV4ICsgMSAhPT0gdGhpcy5sZXZlbHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnJlbmRlck9uZShpbmRleCArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICB9O1xuXG4gIExvY1ZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB0aGlzLnNob3dUaXRsZXMgPSBvcHRpb25zLnNob3dUaXRsZXMgIT0gbnVsbCA/IG9wdGlvbnMuc2hvd1RpdGxlcyA6IHRydWU7XG4gICAgdGhpcy5sZXZlbHMgPSBvcHRpb25zLmxldmVscyB8fCBbXCJjb3VudHlcIiwgXCJ6b25lXCIsIFwic2Nob29sXCJdO1xuICAgIHRoaXMuYWRkZWRPcHRpb25zID0gb3B0aW9ucy5hZGRlZE9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuYWRkZWRPcHRpb25zIDogZmFsc2U7XG4gICAgdGhpcy5zZWxlY3RlZCA9IG9wdGlvbnMuc2VsZWN0ZWQgfHwgW107XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyKCk7XG4gIH07XG5cbiAgTG9jVmlldy5wcm90b3R5cGUuaXNDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBqLCBsZW4sIGxldmVsLCByZWYsIHZhbHVlO1xuICAgIHZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgIHJlZiA9IHRoaXMubGV2ZWxzO1xuICAgIGZvciAoaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgbGV2ZWwgPSByZWZbal07XG4gICAgICBpZiAoIXZhbHVlW2xldmVsXSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIExvY1ZpZXcucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGosIGxlbiwgbGV2ZWwsIHJlZiwgcmVzdWx0O1xuICAgIHJlc3VsdCA9IHt9O1xuICAgIHJlZiA9IHRoaXMubGV2ZWxzO1xuICAgIGZvciAoaSA9IGogPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBqIDwgbGVuOyBpID0gKytqKSB7XG4gICAgICBsZXZlbCA9IHJlZltpXTtcbiAgICAgIGlmICh0aGlzLiRlbC5maW5kKFwiW2RhdGEtaW5kZXg9J1wiICsgaSArIFwiJ11cIikubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJlc3VsdFtsZXZlbF0gPSB0aGlzLiRlbC5maW5kKFwiW2RhdGEtaW5kZXg9J1wiICsgaSArIFwiJ11cIikudmFsKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgTG9jVmlldy5wcm90b3R5cGUucmVuZGVyT25lID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICB2YXIgY3JpdGVyaWE7XG4gICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICBjcml0ZXJpYSA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjcml0ZXJpYSA9IHRoaXMudmFsdWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIExvYy5xdWVyeSh0aGlzLmxldmVscywgY3JpdGVyaWEsIGZ1bmN0aW9uKHJlcykge1xuICAgICAgdmFyIGh0bWxPcHRpb25zLCBub1ByZVNlbGVjdGlvbiwgc2VsZWN0ZWQsIHRpdGxlO1xuICAgICAgaWYgKHRoaXMuYWRkZWRPcHRpb25zKSB7XG4gICAgICAgIHJlcyA9IHRoaXMuYWRkZWRPcHRpb25zW2luZGV4XS5jb25jYXQocmVzKTtcbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKFwicmVzdWx0czogXCIsIHJlcyk7XG4gICAgICByZXMgPSByZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIGlmIChhLmxhYmVsLnRvTG93ZXJDYXNlKCkgPCBiLmxhYmVsLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAoYS5sYWJlbC50b0xvd2VyQ2FzZSgpID4gYi5sYWJlbC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaHRtbE9wdGlvbnMgPSByZXMubWFwKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIHZhciBzZWxlY3RlZDtcbiAgICAgICAgaWYgKCh0aGlzLnNlbGVjdGVkW2luZGV4XSAhPSBudWxsKSAmJiBlbC5pZCA9PT0gdGhpcy5zZWxlY3RlZFtpbmRleF0pIHtcbiAgICAgICAgICBzZWxlY3RlZCA9IFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIjxvcHRpb24gdmFsdWU9J1wiICsgZWwuaWQgKyBcIicgXCIgKyAoc2VsZWN0ZWQgfHwgJycpICsgXCI+XCIgKyBlbC5sYWJlbCArIFwiPC9vcHRpb24+XCI7XG4gICAgICB9LCB0aGlzKTtcbiAgICAgIGlmICh0aGlzLnNob3dUaXRsZXMpIHtcbiAgICAgICAgdGl0bGUgPSB0aGlzLmxldmVsc1tpbmRleF0udGl0bGVpemUoKTtcbiAgICAgIH1cbiAgICAgIG5vUHJlU2VsZWN0aW9uID0gdGhpcy5zZWxlY3RlZFtpbmRleF0gPT0gbnVsbDtcbiAgICAgIGlmIChub1ByZVNlbGVjdGlvbikge1xuICAgICAgICBzZWxlY3RlZCA9IFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiO1xuICAgICAgfVxuICAgICAgdGhpcy4kZWwuYXBwZW5kKFwiPGRpdj4gPGxhYmVsPlwiICsgKHRpdGxlIHx8ICcnKSArIFwiIDxzZWxlY3QgZGF0YS1pbmRleD0nXCIgKyBpbmRleCArIFwiJz4gPG9wdGlvbiBcIiArIChzZWxlY3RlZCB8fCAnJykgKyBcIiBkaXNhYmxlZD0nZGlzYWJsZWQnPlNlbGVjdC4uLjwvb3B0aW9uPiBcIiArIGh0bWxPcHRpb25zICsgXCIgPC9zZWxlY3Q+IDwvbGFiZWw+IDxicj4gPC9kaXY+XCIpO1xuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGlmIChpbmRleCArIDEgPT09IHRoaXMuc2VsZWN0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWQgPSBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJPbmUoaW5kZXggKyAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9O1xuXG4gIExvY1ZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJlbmRlck9uZSgwKTtcbiAgfTtcblxuICByZXR1cm4gTG9jVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIEZlZWRiYWNrIGV4dGVuZHMgQmFja2JvbmUuUGFyZW50TW9kZWxcblxuICB1cmwgOiBcImZlZWRiYWNrXCJcblxuICBDaGlsZCAgICAgICAgICAgOiBDcml0aXF1ZVxuICBDaGlsZENvbGxlY3Rpb24gOiBDcml0aXF1ZXNcblxuXG5jbGFzcyBGZWVkYmFja3MgZXh0ZW5kcyBCYWNrYm9uZS5Db2xsZWN0aW9uXG5cbiAgbW9kZWwgOiBGZWVkYmFja1xuICB1cmwgOiBcImZlZWRiYWNrXCJcblxuIiwidmFyIEZlZWRiYWNrLCBGZWVkYmFja3MsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5GZWVkYmFjayA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChGZWVkYmFjaywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gRmVlZGJhY2soKSB7XG4gICAgcmV0dXJuIEZlZWRiYWNrLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgRmVlZGJhY2sucHJvdG90eXBlLnVybCA9IFwiZmVlZGJhY2tcIjtcblxuICBGZWVkYmFjay5wcm90b3R5cGUuQ2hpbGQgPSBDcml0aXF1ZTtcblxuICBGZWVkYmFjay5wcm90b3R5cGUuQ2hpbGRDb2xsZWN0aW9uID0gQ3JpdGlxdWVzO1xuXG4gIHJldHVybiBGZWVkYmFjaztcblxufSkoQmFja2JvbmUuUGFyZW50TW9kZWwpO1xuXG5GZWVkYmFja3MgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoRmVlZGJhY2tzLCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBGZWVkYmFja3MoKSB7XG4gICAgcmV0dXJuIEZlZWRiYWNrcy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEZlZWRiYWNrcy5wcm90b3R5cGUubW9kZWwgPSBGZWVkYmFjaztcblxuICBGZWVkYmFja3MucHJvdG90eXBlLnVybCA9IFwiZmVlZGJhY2tcIjtcblxuICByZXR1cm4gRmVlZGJhY2tzO1xuXG59KShCYWNrYm9uZS5Db2xsZWN0aW9uKTtcblxuIiwiXG5jbGFzcyBGZWVkYmFja0VkaXRWaWV3IGV4dGVuZHMgQmFja2JvbmUuRWRpdFZpZXdcbiAgXG4gIGV2ZW50cyA6ICQuZXh0ZW5kXG4gICAgJ2NsaWNrICAuY3JpdGlxdWUtYWRkJyAgICA6IFwiY3JpdGlxdWVBZGRcIlxuICAgICdjbGljayAgLmNyaXRpcXVlLXJlbW92ZScgOiAnY3JpdGlxdWVSZW1vdmUnXG4gICwgQmFja2JvbmUuRWRpdFZpZXcucHJvdG90eXBlLmV2ZW50c1xuXG5cbiAgY3JpdGlxdWVSZW1vdmU6IChldmVudCkgLT5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG4gICAgbW9kZWxJZCA9ICR0YXJnZXQuYXR0cignZGF0YS1tb2RlbC1pZCcpXG4gICAgQGZlZWRiYWNrLmNvbGxlY3Rpb24ucmVtb3ZlKG1vZGVsSWQpXG4gICAgQGZlZWRiYWNrLnNhdmUgbnVsbCxcbiAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgIFV0aWxzLnRvcEFsZXJ0KFwiQ3JpdGlxdWUgcmVtb3ZlZFwiKVxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBba2V5XSA9IHZhbHVlIGZvciBrZXksIHZhbHVlIG9mIG9wdGlvbnNcbiAgICBAdXBkYXRlRWRpdEluUGxhY2VNb2RlbHMoKVxuICAgIEBmZWVkYmFjay5jb2xsZWN0aW9uLm9uIFwiY2hhbmdlIGFkZCByZW1vdmVcIiwgPT5cbiAgICAgIEBmZWVkYmFjay5jb2xsZWN0aW9uLnNvcnQoKVxuICAgICAgQHVwZGF0ZUVkaXRJblBsYWNlTW9kZWxzKClcbiAgICAgIEByZW5kZXIoKVxuXG4gIHVwZGF0ZUVkaXRJblBsYWNlTW9kZWxzOiA9PlxuICAgIEBtb2RlbHMgPSBuZXcgQmFja2JvbmUuQ29sbGVjdGlvbiBbQGZlZWRiYWNrXS5jb25jYXQoQGZlZWRiYWNrLmNvbGxlY3Rpb24ubW9kZWxzKVxuXG4gIHJlbmRlcjogPT5cblxuICAgIGNyaXRpcXVlTGlzdCA9IFwiXCJcblxuICAgIEBmZWVkYmFjay5jb2xsZWN0aW9uLmVhY2ggKGNyaXRpcXVlTW9kZWwpID0+XG5cbiAgICAgIGNyaXRpcXVlTGlzdCArPSBcIlxuICAgICAgICA8bGk+XG4gICAgICAgICAgPHRhYmxlPlxuXG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cblxuICAgICAgICAgICAgICA8dGQ+I3tAZ2V0RWRpdGFibGVcbiAgICAgICAgICAgICAgICBtb2RlbDogY3JpdGlxdWVNb2RlbFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogXG4gICAgICAgICAgICAgICAgICBrZXkgOiAnbmFtZSdcbiAgICAgICAgICAgICAgICAgIGVzY2FwZSA6IHRydWVcbiAgICAgICAgICAgICAgICBuYW1lOiAnU3RlcCBuYW1lJ1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyIDogJ3VudGl0bGVkIGNyaXRpcXVlJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRoPk9yZGVyPC90aD5cbiAgICAgICAgICAgICAgPHRkPiN7QGdldEVkaXRhYmxlXG4gICAgICAgICAgICAgICAgICBtb2RlbDogY3JpdGlxdWVNb2RlbFxuICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiBcbiAgICAgICAgICAgICAgICAgICAga2V5IDogJ29yZGVyJ1xuICAgICAgICAgICAgICAgICAgICBpc051bWJlciA6IHRydWVcbiAgICAgICAgICAgICAgICAgIG5hbWUgOiAnT3JkZXInXG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ3Vub3JkZXJlZCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuXG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0aD5TaG93IG5vdGVzIGZpZWxkPC90aD5cbiAgICAgICAgICAgICAgPHRkPiN7QGdldEVkaXRhYmxlXG4gICAgICAgICAgICAgICAgbW9kZWw6IGNyaXRpcXVlTW9kZWxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6IFxuICAgICAgICAgICAgICAgICAga2V5IDogJ3Nob3dOb3RlcydcbiAgICAgICAgICAgICAgICBuYW1lOiAnU2hvdyBub3RlcyBmaWVsZCdcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ3RydWUgb3IgZmFsc2UnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cblxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGg+VGVtcGxhdGU8L3RoPlxuICAgICAgICAgICAgICA8dGQ+I3tAZ2V0RWRpdGFibGVcbiAgICAgICAgICAgICAgICBtb2RlbDogY3JpdGlxdWVNb2RlbFxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZSA6XG4gICAgICAgICAgICAgICAgICBrZXkgOiAndGVtcGxhdGUnXG4gICAgICAgICAgICAgICAgICBlc2NhcGUgOiB0cnVlXG4gICAgICAgICAgICAgICAgbmFtZTogJ1RlbXBsYXRlJ1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnbm9uZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuXG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0aD5GZWVkYmFjayBDb2RlPC90aD5cbiAgICAgICAgICAgICAgPHRkPiN7QGdldEVkaXRhYmxlXG4gICAgICAgICAgICAgICAgbW9kZWw6IGNyaXRpcXVlTW9kZWxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6IFxuICAgICAgICAgICAgICAgICAga2V5IDogJ3Byb2Nlc3NpbmdDb2RlJ1xuICAgICAgICAgICAgICAgICAgZXNjYXBlOiB0cnVlXG4gICAgICAgICAgICAgICAgICBjb2ZmZWU6IHRydWVcbiAgICAgICAgICAgICAgICBuYW1lOiAnRmVlZGJhY2sgY29kZSdcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ0ZlZWRiYWNrIGNvZGUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cblxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGg+U2hvdyBmZWVkYmFjayB3aGVuPC90aD5cbiAgICAgICAgICAgICAgPHRkPiN7QGdldEVkaXRhYmxlXG4gICAgICAgICAgICAgICAgbW9kZWw6IGNyaXRpcXVlTW9kZWxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6IFxuICAgICAgICAgICAgICAgICAga2V5IDogJ3doZW4nXG4gICAgICAgICAgICAgICAgbmFtZTogJ1Nob3cgd2hlbiBjb2RlJ1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2hvdyB3aGVuIGNvZGUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cblxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGQ+PGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBjcml0aXF1ZS1yZW1vdmUnIGRhdGEtbW9kZWwtaWQ9JyN7Y3JpdGlxdWVNb2RlbC5pZH0nPlJlbW92ZTwvYnV0dG9uPjwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgIDwvbGk+XG4gICAgICBcIlxuXG4gICAgaHRtbCA9IFwiXG4gICAgICA8aDE+I3tAd29ya2Zsb3cuZ2V0KCduYW1lJyl9IGZlZWRiYWNrPC9oMT5cbiAgICAgIDxzdHlsZT5cbiAgICAgICAgI3N0ZXBMaXN0IGxpXG4gICAgICAgIHtcbiAgICAgICAgICBtYXJnaW46IDFlbSAwO1xuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBncmV5O1xuICAgICAgICB9XG4gICAgICA8L3N0eWxlPlxuICAgICAgPGRpdiBjbGFzcz0nbWVudWJveCc+XG4gICAgICAgIDxkaXYgY2xhc3M9J21lbnVib3gnPlxuICAgICAgICAgIDxoMz5EaXNwbGF5IExlc3NvbiB2aWV3ZXI8L2gzPlxuICAgICAgICAgICN7QGdldEVkaXRhYmxlXG4gICAgICAgICAgICBtb2RlbDogQGZlZWRiYWNrXG4gICAgICAgICAgICBhdHRyaWJ1dGU6IFxuICAgICAgICAgICAgICBrZXkgOiAnc2hvd0xlc3NvblBsYW4nXG4gICAgICAgICAgICBuYW1lOiAnTGVzc29uIHZpZXdlciBzdGF0dXMnXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ3RydWUgb3IgZmFsc2UnXG4gICAgICAgICAgICBwcmVwYXJlOiAodmFsdWUpIC0+IHZhbHVlIGlzIFwidHJ1ZVwiXG4gICAgICAgICAgfVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8dWwgaWQ9J3N0ZXBMaXN0Jz4je2NyaXRpcXVlTGlzdH08L3VsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGlkPSdjb250cm9scyc+XG4gICAgICAgIDxidXR0b24gY2xhc3M9J2NyaXRpcXVlLWFkZCBjb21tYW5kJz5BZGQgY3JpdGlxdWU8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIFwiXG5cbiAgICBAJGVsLmh0bWwgaHRtbFxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgY3JpdGlxdWVBZGQ6IC0+IEBmZWVkYmFjay5uZXdDaGlsZCgpXG5cblxuIiwidmFyIEZlZWRiYWNrRWRpdFZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuRmVlZGJhY2tFZGl0VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChGZWVkYmFja0VkaXRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBGZWVkYmFja0VkaXRWaWV3KCkge1xuICAgIHRoaXMucmVuZGVyID0gYmluZCh0aGlzLnJlbmRlciwgdGhpcyk7XG4gICAgdGhpcy51cGRhdGVFZGl0SW5QbGFjZU1vZGVscyA9IGJpbmQodGhpcy51cGRhdGVFZGl0SW5QbGFjZU1vZGVscywgdGhpcyk7XG4gICAgcmV0dXJuIEZlZWRiYWNrRWRpdFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBGZWVkYmFja0VkaXRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSAkLmV4dGVuZCh7XG4gICAgJ2NsaWNrICAuY3JpdGlxdWUtYWRkJzogXCJjcml0aXF1ZUFkZFwiLFxuICAgICdjbGljayAgLmNyaXRpcXVlLXJlbW92ZSc6ICdjcml0aXF1ZVJlbW92ZSdcbiAgfSwgQmFja2JvbmUuRWRpdFZpZXcucHJvdG90eXBlLmV2ZW50cyk7XG5cbiAgRmVlZGJhY2tFZGl0Vmlldy5wcm90b3R5cGUuY3JpdGlxdWVSZW1vdmUgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCBtb2RlbElkO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgbW9kZWxJZCA9ICR0YXJnZXQuYXR0cignZGF0YS1tb2RlbC1pZCcpO1xuICAgIHRoaXMuZmVlZGJhY2suY29sbGVjdGlvbi5yZW1vdmUobW9kZWxJZCk7XG4gICAgcmV0dXJuIHRoaXMuZmVlZGJhY2suc2F2ZShudWxsLCB7XG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFV0aWxzLnRvcEFsZXJ0KFwiQ3JpdGlxdWUgcmVtb3ZlZFwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBGZWVkYmFja0VkaXRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBrZXksIHZhbHVlO1xuICAgIGZvciAoa2V5IGluIG9wdGlvbnMpIHtcbiAgICAgIHZhbHVlID0gb3B0aW9uc1trZXldO1xuICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlRWRpdEluUGxhY2VNb2RlbHMoKTtcbiAgICByZXR1cm4gdGhpcy5mZWVkYmFjay5jb2xsZWN0aW9uLm9uKFwiY2hhbmdlIGFkZCByZW1vdmVcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIF90aGlzLmZlZWRiYWNrLmNvbGxlY3Rpb24uc29ydCgpO1xuICAgICAgICBfdGhpcy51cGRhdGVFZGl0SW5QbGFjZU1vZGVscygpO1xuICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyKCk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuICBGZWVkYmFja0VkaXRWaWV3LnByb3RvdHlwZS51cGRhdGVFZGl0SW5QbGFjZU1vZGVscyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1vZGVscyA9IG5ldyBCYWNrYm9uZS5Db2xsZWN0aW9uKFt0aGlzLmZlZWRiYWNrXS5jb25jYXQodGhpcy5mZWVkYmFjay5jb2xsZWN0aW9uLm1vZGVscykpO1xuICB9O1xuXG4gIEZlZWRiYWNrRWRpdFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjcml0aXF1ZUxpc3QsIGh0bWw7XG4gICAgY3JpdGlxdWVMaXN0ID0gXCJcIjtcbiAgICB0aGlzLmZlZWRiYWNrLmNvbGxlY3Rpb24uZWFjaCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjcml0aXF1ZU1vZGVsKSB7XG4gICAgICAgIHJldHVybiBjcml0aXF1ZUxpc3QgKz0gXCI8bGk+IDx0YWJsZT4gPHRyPiA8dGg+TmFtZTwvdGg+IDx0ZD5cIiArIChfdGhpcy5nZXRFZGl0YWJsZSh7XG4gICAgICAgICAgbW9kZWw6IGNyaXRpcXVlTW9kZWwsXG4gICAgICAgICAgYXR0cmlidXRlOiB7XG4gICAgICAgICAgICBrZXk6ICduYW1lJyxcbiAgICAgICAgICAgIGVzY2FwZTogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogJ1N0ZXAgbmFtZScsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6ICd1bnRpdGxlZCBjcml0aXF1ZSdcbiAgICAgICAgfSkpICsgXCIgPC90ZD4gPC90cj4gPHRyPiA8dGg+T3JkZXI8L3RoPiA8dGQ+XCIgKyAoX3RoaXMuZ2V0RWRpdGFibGUoe1xuICAgICAgICAgIG1vZGVsOiBjcml0aXF1ZU1vZGVsLFxuICAgICAgICAgIGF0dHJpYnV0ZToge1xuICAgICAgICAgICAga2V5OiAnb3JkZXInLFxuICAgICAgICAgICAgaXNOdW1iZXI6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIG5hbWU6ICdPcmRlcicsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6ICd1bm9yZGVyZWQnXG4gICAgICAgIH0pKSArIFwiIDwvdGQ+IDwvdHI+IDx0cj4gPHRoPlNob3cgbm90ZXMgZmllbGQ8L3RoPiA8dGQ+XCIgKyAoX3RoaXMuZ2V0RWRpdGFibGUoe1xuICAgICAgICAgIG1vZGVsOiBjcml0aXF1ZU1vZGVsLFxuICAgICAgICAgIGF0dHJpYnV0ZToge1xuICAgICAgICAgICAga2V5OiAnc2hvd05vdGVzJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogJ1Nob3cgbm90ZXMgZmllbGQnLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiAndHJ1ZSBvciBmYWxzZSdcbiAgICAgICAgfSkpICsgXCIgPC90ZD4gPC90cj4gPHRyPiA8dGg+VGVtcGxhdGU8L3RoPiA8dGQ+XCIgKyAoX3RoaXMuZ2V0RWRpdGFibGUoe1xuICAgICAgICAgIG1vZGVsOiBjcml0aXF1ZU1vZGVsLFxuICAgICAgICAgIGF0dHJpYnV0ZToge1xuICAgICAgICAgICAga2V5OiAndGVtcGxhdGUnLFxuICAgICAgICAgICAgZXNjYXBlOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBuYW1lOiAnVGVtcGxhdGUnLFxuICAgICAgICAgIHBsYWNlaG9sZGVyOiAnbm9uZSdcbiAgICAgICAgfSkpICsgXCIgPC90ZD4gPC90cj4gPHRyPiA8dGg+RmVlZGJhY2sgQ29kZTwvdGg+IDx0ZD5cIiArIChfdGhpcy5nZXRFZGl0YWJsZSh7XG4gICAgICAgICAgbW9kZWw6IGNyaXRpcXVlTW9kZWwsXG4gICAgICAgICAgYXR0cmlidXRlOiB7XG4gICAgICAgICAgICBrZXk6ICdwcm9jZXNzaW5nQ29kZScsXG4gICAgICAgICAgICBlc2NhcGU6IHRydWUsXG4gICAgICAgICAgICBjb2ZmZWU6IHRydWVcbiAgICAgICAgICB9LFxuICAgICAgICAgIG5hbWU6ICdGZWVkYmFjayBjb2RlJyxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogJ0ZlZWRiYWNrIGNvZGUnXG4gICAgICAgIH0pKSArIFwiIDwvdGQ+IDwvdHI+IDx0cj4gPHRoPlNob3cgZmVlZGJhY2sgd2hlbjwvdGg+IDx0ZD5cIiArIChfdGhpcy5nZXRFZGl0YWJsZSh7XG4gICAgICAgICAgbW9kZWw6IGNyaXRpcXVlTW9kZWwsXG4gICAgICAgICAgYXR0cmlidXRlOiB7XG4gICAgICAgICAgICBrZXk6ICd3aGVuJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogJ1Nob3cgd2hlbiBjb2RlJyxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogJ1Nob3cgd2hlbiBjb2RlJ1xuICAgICAgICB9KSkgKyBcIiA8L3RkPiA8L3RyPiA8dHI+IDx0ZD48YnV0dG9uIGNsYXNzPSdjb21tYW5kIGNyaXRpcXVlLXJlbW92ZScgZGF0YS1tb2RlbC1pZD0nXCIgKyBjcml0aXF1ZU1vZGVsLmlkICsgXCInPlJlbW92ZTwvYnV0dG9uPjwvdGQ+IDwvdHI+IDwvdGFibGU+IDwvbGk+XCI7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICBodG1sID0gXCI8aDE+XCIgKyAodGhpcy53b3JrZmxvdy5nZXQoJ25hbWUnKSkgKyBcIiBmZWVkYmFjazwvaDE+IDxzdHlsZT4gI3N0ZXBMaXN0IGxpIHsgbWFyZ2luOiAxZW0gMDsgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGdyZXk7IH0gPC9zdHlsZT4gPGRpdiBjbGFzcz0nbWVudWJveCc+IDxkaXYgY2xhc3M9J21lbnVib3gnPiA8aDM+RGlzcGxheSBMZXNzb24gdmlld2VyPC9oMz4gXCIgKyAodGhpcy5nZXRFZGl0YWJsZSh7XG4gICAgICBtb2RlbDogdGhpcy5mZWVkYmFjayxcbiAgICAgIGF0dHJpYnV0ZToge1xuICAgICAgICBrZXk6ICdzaG93TGVzc29uUGxhbidcbiAgICAgIH0sXG4gICAgICBuYW1lOiAnTGVzc29uIHZpZXdlciBzdGF0dXMnLFxuICAgICAgcGxhY2Vob2xkZXI6ICd0cnVlIG9yIGZhbHNlJyxcbiAgICAgIHByZXBhcmU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gXCJ0cnVlXCI7XG4gICAgICB9XG4gICAgfSkpICsgXCIgPC9kaXY+IDx1bCBpZD0nc3RlcExpc3QnPlwiICsgY3JpdGlxdWVMaXN0ICsgXCI8L3VsPiA8L2Rpdj4gPGRpdiBpZD0nY29udHJvbHMnPiA8YnV0dG9uIGNsYXNzPSdjcml0aXF1ZS1hZGQgY29tbWFuZCc+QWRkIGNyaXRpcXVlPC9idXR0b24+IDwvZGl2PlwiO1xuICAgIHRoaXMuJGVsLmh0bWwoaHRtbCk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIEZlZWRiYWNrRWRpdFZpZXcucHJvdG90eXBlLmNyaXRpcXVlQWRkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZmVlZGJhY2submV3Q2hpbGQoKTtcbiAgfTtcblxuICByZXR1cm4gRmVlZGJhY2tFZGl0VmlldztcblxufSkoQmFja2JvbmUuRWRpdFZpZXcpO1xuXG4iLCJjbGFzcyBOYW1lc3BhY2VcbiAgY29uc3RydWN0b3I6IChvcHRpb25zKSAtPlxuICAgIEBba2V5XSA9IHZhbHVlIGZvciBrZXksIHZhbHVlIG9mIG9wdGlvbnNcblxuY2xhc3MgTm90ZXNWaWV3IGV4dGVuZHMgQmFja2JvbmUuRWRpdFZpZXdcblxuICBjbGFzc05hbWUgOiBcIk5vdGVzVmlld1wiXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT5cbiAgICBAbW9kZWwgPSBvcHRpb25zLm1vZGVsXG4gICAgQG1vZGVscyA9IG5ldyBCYWNrYm9uZS5Db2xsZWN0aW9uIFtAbW9kZWxdXG5cbiAgcmVuZGVyOiAtPlxuICAgIEAkZWwuaHRtbCBAZ2V0RWRpdGFibGVcbiAgICAgIG1vZGVsOiBAbW9kZWxcbiAgICAgIGF0dHJpYnV0ZTogXG4gICAgICAgIGtleSA6ICdub3RlcydcbiAgICAgIG5hbWU6ICdOb3RlcydcbiAgICAgIHBsYWNlaG9sZGVyOiAnVGFwIGhlcmUgdG8gZWRpdCdcblxuXG5jbGFzcyBGZWVkYmFja1J1blZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcIkZlZWRiYWNrUnVuVmlld1wiXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgQFtrZXldID0gdmFsdWUgZm9yIGtleSwgdmFsdWUgb2Ygb3B0aW9uc1xuICAgIEBub3RlVmlld3MgPSBbXVxuXG4gIHJlbmRlcjogLT5cbiAgICBodG1sID0gXCJcIlxuICAgIHNob3duQ291bnQgPSAwXG5cbiAgICBAZmVlZGJhY2suY29sbGVjdGlvbi5lYWNoIChjcml0aXF1ZSwgaSkgPT5cblxuICAgICAgbmFtZXNwYWNlID0gbmV3IE5hbWVzcGFjZVxuICAgICAgICBjcml0aXF1ZSA6IGNyaXRpcXVlXG4gICAgICAgIHRyaXAgICAgIDogQHRyaXBcbiAgICAgICAgZ2V0RHVyYXRpb25NaW51dGVzIDogPT5cbiAgICAgICAgICBtYXhUaW1lID0gMFxuICAgICAgICAgIG1pblRpbWUgPSAwXG4gICAgICAgICAgZmlyc3QgPSB0cnVlXG4gICAgICAgICAgZm9yIGtleSwgdmFsdWUgb2YgQHRyaXAuYXR0cmlidXRlc1xuICAgICAgICAgICAgaWYgfmtleS5pbmRleE9mKFwidGltZXN0YW1wXCIpIHx8IH5rZXkuaW5kZXhPZihcInRpbWVfc3RhbXBcIilcbiAgICAgICAgICAgICAgaW50VmFsdWUgPSBwYXJzZUludCh2YWx1ZSlcbiAgICAgICAgICAgICAgaWYgbm90IE51bWJlci5pc05hTihpbnRWYWx1ZSlcbiAgICAgICAgICAgICAgICBpZiBmaXJzdFxuICAgICAgICAgICAgICAgICAgbWF4VGltZSA9IGludFZhbHVlXG4gICAgICAgICAgICAgICAgICBtaW5UaW1lID0gaW50VmFsdWVcbiAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2VcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICBtYXhUaW1lID0gTWF0aC5tYXgoaW50VmFsdWUsIG1heFRpbWUpXG4gICAgICAgICAgICAgICAgICBtaW5UaW1lID0gTWF0aC5taW4oaW50VmFsdWUsIG1pblRpbWUpXG4gICAgICAgICAgcmV0dXJuIHBhcnNlSW50KCggbWF4VGltZSAtIG1pblRpbWUgKSAvIDEwMDAgLyA2MClcblxuXG4gICAgICB0cnkgXG4gICAgICAgIHNob3VsZERpc3BsYXkgPSBDb2ZmZWVTY3JpcHQuZXZhbC5hcHBseShuYW1lc3BhY2UsIFtjcml0aXF1ZS5nZXRTdHJpbmcoXCJ3aGVuXCIpXSlcbiAgICAgIGNhdGNoIGVcbiAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJTaG93IHdoZW4gY29kZSBlcnJvciBpbiAje2NyaXRpcXVlLmdldFN0cmluZyhcIm5hbWVcIil9PGJyPiN7ZX1cIlxuXG4gICAgICByZXR1cm4gdW5sZXNzIHNob3VsZERpc3BsYXlcblxuICAgICAgdHJ5XG4gICAgICAgIENvZmZlZVNjcmlwdC5ldmFsLmFwcGx5KG5hbWVzcGFjZSwgW2NyaXRpcXVlLmdldFN0cmluZyhcInByb2Nlc3NpbmdDb2RlXCIpXSlcbiAgICAgIGNhdGNoIGVcbiAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJQcm9jZXNzaW5nIGNvZGUgZXJyb3IgaW4gI3tjcml0aXF1ZS5nZXRTdHJpbmcoXCJuYW1lXCIpfTxicj4je2V9XCJcbiAgICAgIFxuICAgICAgdHJ5XG4gICAgICAgIHRlbXBsYXRlID0gXy50ZW1wbGF0ZSBjcml0aXF1ZS5nZXRTdHJpbmcoXCJ0ZW1wbGF0ZVwiKVxuICAgICAgY2F0Y2ggZVxuICAgICAgICBVdGlscy5taWRBbGVydCBcIkVycm9yIHBhcnNpbmcgdGVtcGxhdGUgaW4gI3tjcml0aXF1ZS5nZXRTdHJpbmcoXCJuYW1lXCIpfTxicj4je2V9XCJcblxuXG4gICAgICB0cnlcblxuICAgICAgICBmaXJzdFRocmVlQ2xhc3MgPSBpZiBzaG93bkNvdW50ID49IDEgYW5kIHNob3duQ291bnQgPD0gMyB0aGVuIFwiIGNsYXNzPSd0aHJlZSdcIiBlbHNlICcnXG4gICAgICAgIGh0bWwgKz0gXCJcbiAgICAgICAgPGRpdiN7Zmlyc3RUaHJlZUNsYXNzfT5cbiAgICAgICAgICA8aDM+I3tjcml0aXF1ZS5nZXRTdHJpbmcoJ25hbWUnKX08L2gzPlxuICAgICAgICAgIDxwPiN7dGVtcGxhdGUobmFtZXNwYWNlKX08L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcIlxuICAgICAgY2F0Y2ggZVxuICAgICAgICBVdGlscy5taWRBbGVydCBcIkVycm9yIGNvbXBpbGluZyB0ZW1wbGF0ZSBpbiAje2NyaXRpcXVlLmdldFN0cmluZyhcIm5hbWVcIil9PGJyPiN7ZX1cIlxuXG4gICAgICBpZiBjcml0aXF1ZS5zaG91bGRTaG93Tm90ZXMoKVxuXG4gICAgICAgIGh0bWwgKz0gXCI8ZGl2IGNsYXNzPSdub3RlcyBOb3Rlc1ZpZXcnIGRhdGEtbW9kZWwtaWQ9JyN7Y3JpdGlxdWUuaWR9Jz48L2Rpdj5cIlxuXG4gICAgICBzaG93bkNvdW50KytcblxuXG4gICAgQCRlbC5odG1sIFwiPHNlY3Rpb24+I3todG1sfTwvc2VjdGlvbj5cIlxuXG5cbiAgICAkbm90ZXMgPSBAJGVsLmZpbmQoXCIubm90ZXNcIilcbiAgICBpZiAkbm90ZXMubGVuZ3RoID4gMFxuICAgICAgJG5vdGVzLmVhY2ggKGksIG5vdGUpID0+XG5cbiAgICAgICAgbW9kZWwgPSBuZXcgUmVzdWx0XG4gICAgICAgICAgXCJfaWRcIiA6IEBmZWVkYmFjay5pZCArIEB0cmlwLmlkXG5cbiAgICAgICAgbm90ZVZpZXcgPSBuZXcgTm90ZXNWaWV3XG4gICAgICAgICAgbW9kZWw6IG1vZGVsXG4gICAgICAgIG5vdGVWaWV3LnNldEVsZW1lbnQgJChub3RlKVxuICAgICAgICBAbm90ZVZpZXdzLnB1c2ggbm90ZVZpZXdcbiAgICAgICAgXG4gICAgICAgIG1vZGVsLmZldGNoXG4gICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgIG5vdGVWaWV3LnJlbmRlcigpXG4gICAgICAgICAgZXJyb3I6ID0+XG4gICAgICAgICAgICBtb2RlbC5zYXZlXG4gICAgICAgICAgICAgICd0cmlwSWQnIDogQHRyaXAuaWRcbiAgICAgICAgICAgICxcbiAgICAgICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgICAgICBub3RlVmlldy5yZW5kZXIoKVxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgb25DbG9zZTogLT5cbiAgICBmb3IgdmlldyBpbiBAbm90ZVZpZXdzXG4gICAgICB2aWV3LmNsb3NlKClcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4iLCJ2YXIgRmVlZGJhY2tSdW5WaWV3LCBOYW1lc3BhY2UsIE5vdGVzVmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbk5hbWVzcGFjZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gTmFtZXNwYWNlKG9wdGlvbnMpIHtcbiAgICB2YXIga2V5LCB2YWx1ZTtcbiAgICBmb3IgKGtleSBpbiBvcHRpb25zKSB7XG4gICAgICB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcbiAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBOYW1lc3BhY2U7XG5cbn0pKCk7XG5cbk5vdGVzVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChOb3Rlc1ZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIE5vdGVzVmlldygpIHtcbiAgICByZXR1cm4gTm90ZXNWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgTm90ZXNWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIk5vdGVzVmlld1wiO1xuXG4gIE5vdGVzVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICByZXR1cm4gdGhpcy5tb2RlbHMgPSBuZXcgQmFja2JvbmUuQ29sbGVjdGlvbihbdGhpcy5tb2RlbF0pO1xuICB9O1xuXG4gIE5vdGVzVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwodGhpcy5nZXRFZGl0YWJsZSh7XG4gICAgICBtb2RlbDogdGhpcy5tb2RlbCxcbiAgICAgIGF0dHJpYnV0ZToge1xuICAgICAgICBrZXk6ICdub3RlcydcbiAgICAgIH0sXG4gICAgICBuYW1lOiAnTm90ZXMnLFxuICAgICAgcGxhY2Vob2xkZXI6ICdUYXAgaGVyZSB0byBlZGl0J1xuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTm90ZXNWaWV3O1xuXG59KShCYWNrYm9uZS5FZGl0Vmlldyk7XG5cbkZlZWRiYWNrUnVuVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChGZWVkYmFja1J1blZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEZlZWRiYWNrUnVuVmlldygpIHtcbiAgICByZXR1cm4gRmVlZGJhY2tSdW5WaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgRmVlZGJhY2tSdW5WaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIkZlZWRiYWNrUnVuVmlld1wiO1xuXG4gIEZlZWRiYWNrUnVuVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIga2V5LCB2YWx1ZTtcbiAgICBmb3IgKGtleSBpbiBvcHRpb25zKSB7XG4gICAgICB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcbiAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5ub3RlVmlld3MgPSBbXTtcbiAgfTtcblxuICBGZWVkYmFja1J1blZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkbm90ZXMsIGh0bWwsIHNob3duQ291bnQ7XG4gICAgaHRtbCA9IFwiXCI7XG4gICAgc2hvd25Db3VudCA9IDA7XG4gICAgdGhpcy5mZWVkYmFjay5jb2xsZWN0aW9uLmVhY2goKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oY3JpdGlxdWUsIGkpIHtcbiAgICAgICAgdmFyIGUsIGZpcnN0VGhyZWVDbGFzcywgbmFtZXNwYWNlLCBzaG91bGREaXNwbGF5LCB0ZW1wbGF0ZTtcbiAgICAgICAgbmFtZXNwYWNlID0gbmV3IE5hbWVzcGFjZSh7XG4gICAgICAgICAgY3JpdGlxdWU6IGNyaXRpcXVlLFxuICAgICAgICAgIHRyaXA6IF90aGlzLnRyaXAsXG4gICAgICAgICAgZ2V0RHVyYXRpb25NaW51dGVzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBmaXJzdCwgaW50VmFsdWUsIGtleSwgbWF4VGltZSwgbWluVGltZSwgcmVmLCB2YWx1ZTtcbiAgICAgICAgICAgIG1heFRpbWUgPSAwO1xuICAgICAgICAgICAgbWluVGltZSA9IDA7XG4gICAgICAgICAgICBmaXJzdCA9IHRydWU7XG4gICAgICAgICAgICByZWYgPSBfdGhpcy50cmlwLmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiByZWYpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSByZWZba2V5XTtcbiAgICAgICAgICAgICAgaWYgKH5rZXkuaW5kZXhPZihcInRpbWVzdGFtcFwiKSB8fCB+a2V5LmluZGV4T2YoXCJ0aW1lX3N0YW1wXCIpKSB7XG4gICAgICAgICAgICAgICAgaW50VmFsdWUgPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4oaW50VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4VGltZSA9IGludFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBtaW5UaW1lID0gaW50VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtYXhUaW1lID0gTWF0aC5tYXgoaW50VmFsdWUsIG1heFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICBtaW5UaW1lID0gTWF0aC5taW4oaW50VmFsdWUsIG1pblRpbWUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KChtYXhUaW1lIC0gbWluVGltZSkgLyAxMDAwIC8gNjApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc2hvdWxkRGlzcGxheSA9IENvZmZlZVNjcmlwdFtcImV2YWxcIl0uYXBwbHkobmFtZXNwYWNlLCBbY3JpdGlxdWUuZ2V0U3RyaW5nKFwid2hlblwiKV0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGUgPSBlcnJvcjtcbiAgICAgICAgICBVdGlscy5taWRBbGVydChcIlNob3cgd2hlbiBjb2RlIGVycm9yIGluIFwiICsgKGNyaXRpcXVlLmdldFN0cmluZyhcIm5hbWVcIikpICsgXCI8YnI+XCIgKyBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNob3VsZERpc3BsYXkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBDb2ZmZWVTY3JpcHRbXCJldmFsXCJdLmFwcGx5KG5hbWVzcGFjZSwgW2NyaXRpcXVlLmdldFN0cmluZyhcInByb2Nlc3NpbmdDb2RlXCIpXSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiUHJvY2Vzc2luZyBjb2RlIGVycm9yIGluIFwiICsgKGNyaXRpcXVlLmdldFN0cmluZyhcIm5hbWVcIikpICsgXCI8YnI+XCIgKyBlKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRlbXBsYXRlID0gXy50ZW1wbGF0ZShjcml0aXF1ZS5nZXRTdHJpbmcoXCJ0ZW1wbGF0ZVwiKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgZSA9IGVycm9yO1xuICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiRXJyb3IgcGFyc2luZyB0ZW1wbGF0ZSBpbiBcIiArIChjcml0aXF1ZS5nZXRTdHJpbmcoXCJuYW1lXCIpKSArIFwiPGJyPlwiICsgZSk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBmaXJzdFRocmVlQ2xhc3MgPSBzaG93bkNvdW50ID49IDEgJiYgc2hvd25Db3VudCA8PSAzID8gXCIgY2xhc3M9J3RocmVlJ1wiIDogJyc7XG4gICAgICAgICAgaHRtbCArPSBcIjxkaXZcIiArIGZpcnN0VGhyZWVDbGFzcyArIFwiPiA8aDM+XCIgKyAoY3JpdGlxdWUuZ2V0U3RyaW5nKCduYW1lJykpICsgXCI8L2gzPiA8cD5cIiArICh0ZW1wbGF0ZShuYW1lc3BhY2UpKSArIFwiPC9wPiA8L2Rpdj5cIjtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBlID0gZXJyb3I7XG4gICAgICAgICAgVXRpbHMubWlkQWxlcnQoXCJFcnJvciBjb21waWxpbmcgdGVtcGxhdGUgaW4gXCIgKyAoY3JpdGlxdWUuZ2V0U3RyaW5nKFwibmFtZVwiKSkgKyBcIjxicj5cIiArIGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjcml0aXF1ZS5zaG91bGRTaG93Tm90ZXMoKSkge1xuICAgICAgICAgIGh0bWwgKz0gXCI8ZGl2IGNsYXNzPSdub3RlcyBOb3Rlc1ZpZXcnIGRhdGEtbW9kZWwtaWQ9J1wiICsgY3JpdGlxdWUuaWQgKyBcIic+PC9kaXY+XCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNob3duQ291bnQrKztcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICAgIHRoaXMuJGVsLmh0bWwoXCI8c2VjdGlvbj5cIiArIGh0bWwgKyBcIjwvc2VjdGlvbj5cIik7XG4gICAgJG5vdGVzID0gdGhpcy4kZWwuZmluZChcIi5ub3Rlc1wiKTtcbiAgICBpZiAoJG5vdGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICRub3Rlcy5lYWNoKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oaSwgbm90ZSkge1xuICAgICAgICAgIHZhciBtb2RlbCwgbm90ZVZpZXc7XG4gICAgICAgICAgbW9kZWwgPSBuZXcgUmVzdWx0KHtcbiAgICAgICAgICAgIFwiX2lkXCI6IF90aGlzLmZlZWRiYWNrLmlkICsgX3RoaXMudHJpcC5pZFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG5vdGVWaWV3ID0gbmV3IE5vdGVzVmlldyh7XG4gICAgICAgICAgICBtb2RlbDogbW9kZWxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBub3RlVmlldy5zZXRFbGVtZW50KCQobm90ZSkpO1xuICAgICAgICAgIF90aGlzLm5vdGVWaWV3cy5wdXNoKG5vdGVWaWV3KTtcbiAgICAgICAgICByZXR1cm4gbW9kZWwuZmV0Y2goe1xuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBub3RlVmlldy5yZW5kZXIoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBtb2RlbC5zYXZlKHtcbiAgICAgICAgICAgICAgICAndHJpcElkJzogX3RoaXMudHJpcC5pZFxuICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbm90ZVZpZXcucmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIEZlZWRiYWNrUnVuVmlldy5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBqLCBsZW4sIHJlZiwgcmVzdWx0cywgdmlldztcbiAgICByZWYgPSB0aGlzLm5vdGVWaWV3cztcbiAgICByZXN1bHRzID0gW107XG4gICAgZm9yIChqID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICB2aWV3ID0gcmVmW2pdO1xuICAgICAgcmVzdWx0cy5wdXNoKHZpZXcuY2xvc2UoKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIHJldHVybiBGZWVkYmFja1J1blZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBGZWVkYmFja1RyaXBzVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiRmVlZGJhY2tUcmlwc1ZpZXdcIlxuXG4gIGV2ZW50czogLT5cblxuICAgIFwiY2hhbmdlICNjb3VudHlcIiA6IFwib25Db3VudHlTZWxlY3Rpb25DaGFuZ2VcIlxuICAgIFwiY2hhbmdlICN6b25lXCIgICA6IFwib25ab25lU2VsZWN0aW9uQ2hhbmdlXCJcbiAgICBcImNoYW5nZSAjc2Nob29sXCIgOiBcIm9uU2Nob29sU2VsZWN0aW9uQ2hhbmdlXCJcblxuICAgIFwiY2xpY2sgLnNob3ctZmVlZGJhY2tcIiAgICA6IFwic2hvd0ZlZWRiYWNrXCJcbiAgICBcImNsaWNrIC5zaG93LWxlc3Nvbi1wbGFuXCIgOiBcInNob3dMZXNzb25QbGFuXCJcblxuICAgIFwiY2xpY2sgLmhpZGUtZmVlZGJhY2tcIiAgICA6IFwiaGlkZUZlZWRiYWNrXCJcbiAgICBcImNsaWNrIC5oaWRlLWxlc3Nvbi1wbGFuXCIgOiBcImhpZGVMZXNzb25QbGFuXCJcblxuICAgIFwiY2xpY2sgLnNob3ctc3VydmV5LWRhdGFcIiA6IFwic2hvd1N1cnZleURhdGFcIlxuICAgIFwiY2xpY2sgLmhpZGUtc3VydmV5LWRhdGFcIiA6IFwiaGlkZVN1cnZleURhdGFcIlxuXG4gICAgXCJjbGljayAuc29ydGFibGVcIiA6IFwic29ydFRhYmxlXCJcbiAgICBcImNsaWNrIC5iYWNrXCIgOiBcImdvQmFja1wiXG5cbiAgdmFsdWVUb0h1bWFuIDpcbiAgICBcImVuZ2xpc2hfd29yZFwiIDogXCJFbmdsaXNoXCJcbiAgICBcIndvcmRcIiAgICAgICAgIDogXCJLaXN3YWhpbGlcIlxuICAgIFwib3BlcmF0aW9uXCIgICAgOiBcIk1hdGhlbWF0aWNzXCJcbiAgICBcIjNcIiAgICAgICAgICAgIDogXCJNb3RoZXIgVG9uZ3VlXCJcblxuICAjIFxuICBzaG93U3VydmV5RGF0YTogKGV2ZW50KSAtPlxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcblxuICAgICR0YXJnZXQudG9nZ2xlKClcbiAgICAkdGFyZ2V0LnNpYmxpbmdzKCkudG9nZ2xlKClcblxuICAgIHRyaXBJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtdHJpcC1pZFwiKVxuICAgICRvdXRwdXQgPSBAJGVsLmZpbmQoXCIuI3t0cmlwSWR9LXJlc3VsdFwiKS5hcHBlbmQoXCI8ZGl2PjxpbWcgY2xhc3M9J2xvYWRpbmcnIHNyYz0naW1hZ2VzL2xvYWRpbmcuZ2lmJz48L2Rpdj5cIikuZmluZChcImRpdlwiKVxuXG4gICAgdmlldyA9IG5ldyBXb3JrZmxvd1Jlc3VsdFZpZXdcbiAgICAgIHdvcmtmbG93IDogQHdvcmtmbG93XG4gICAgICB0cmlwIDogQHRyaXBzLmdldCh0cmlwSWQpXG4gICAgdmlldy5zZXRFbGVtZW50KCRvdXRwdXQpXG5cbiAgICBAc3ViVmlld3MucHVzaCB2aWV3XG4gICAgQFtcIldvcmtmbG93UmVzdWx0Vmlldy0je3RyaXBJZH1cIl0gPSB2aWV3XG5cbiAgaGlkZVN1cnZleURhdGE6IChldmVudCkgLT5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG5cbiAgICAkdGFyZ2V0LnRvZ2dsZSgpXG4gICAgJHRhcmdldC5zaWJsaW5ncygpLnRvZ2dsZSgpXG5cbiAgICB0cmlwSWQgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLXRyaXAtaWRcIilcblxuICAgIEBzdWJWaWV3cyA9IF8oQHN1YlZpZXdzKS53aXRob3V0IEBbXCJXb3JrZmxvd1Jlc3VsdFZpZXctI3t0cmlwSWR9XCJdXG4gICAgQFtcIldvcmtmbG93UmVzdWx0Vmlldy0je3RyaXBJZH1cIl0uY2xvc2UoKVxuXG4gIGdvQmFjazogLT5cbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiXCIsIHRydWVcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBAW2tleV0gPSB2YWx1ZSBmb3Iga2V5LCB2YWx1ZSBvZiBvcHRpb25zXG5cbiAgICBAc3ViVmlld3MgPSBbXVxuXG4gICAgQGxvY0xldmVscyA9IFtcImNvdW50eVwiLCBcInpvbmVcIiwgXCJzY2hvb2xcIl1cblxuICAgIEB0cmlwcyA9IG5ldyBUcmlwUmVzdWx0Q29sbGVjdGlvblxuICAgIEB0cmlwcy5mZXRjaCBcbiAgICAgIHJlc3VsdFZpZXcgOiBcInR1dG9yVHJpcHNcIlxuICAgICAgcXVlcnlLZXkgICA6IFwid29ya2Zsb3ctI3tAd29ya2Zsb3cuaWR9XCJcbiAgICAgIHN1Y2Nlc3M6ID0+IFxuICAgICAgICAjIGdldCBjb3VudHkgbmFtZXNcbiAgICAgICAgTG9jLnF1ZXJ5IEBsb2NMZXZlbHMsIG51bGwsIChyZXMpID0+XG4gICAgICAgICAgQGNvdW50eU5hbWVzID0gcmVzLnJlZHVjZSAoIChvYmosIGN1cikgLT4gb2JqW2N1ci5pZF09Y3VyLmxhYmVsOyByZXR1cm4gb2JqICksIHt9XG5cbiAgICAgICAgICBAaXNSZWFkeSA9IHRydWVcbiAgICAgICAgICBAcmVuZGVyKClcblxuICBoaWRlTGVzc29uUGxhbjogKGV2ZW50KSAtPlxuXG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuXG4gICAgJHRhcmdldC50b2dnbGUoKVxuICAgICR0YXJnZXQuc2libGluZ3MoKS50b2dnbGUoKVxuXG4gICAgdHJpcElkID0gJHRhcmdldC5hdHRyKFwiZGF0YS10cmlwLWlkXCIpXG4gICAgQCRlbC5maW5kKFwiLiN7dHJpcElkfS1sZXNzb25cIikuZW1wdHkoKVxuXG5cbiAgc2hvd0xlc3NvblBsYW46IChldmVudCkgLT5cblxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcblxuICAgICR0YXJnZXQudG9nZ2xlKClcbiAgICAkdGFyZ2V0LnNpYmxpbmdzKCkudG9nZ2xlKClcblxuICAgIHRyaXBJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtdHJpcC1pZFwiKVxuICAgIHRyaXAgICA9IEB0cmlwcy5nZXQodHJpcElkKVxuXG4gICAgQCRsZXNzb25Db250YWluZXIgPSBAJGVsLmZpbmQoXCIuI3t0cmlwSWR9LWxlc3NvblwiKVxuXG4gICAgQCRsZXNzb25Db250YWluZXIuaHRtbCBcIjxpbWcgY2xhc3M9J2xvYWRpbmcnIHNyYz0naW1hZ2VzL2xvYWRpbmcuZ2lmJz5cIlxuXG5cbiAgICBzdWJqZWN0ID0gKHtcImJ1a3VzdVwiOiBcImJ1a3VzdVwiLFwia2FtYmFcIjogXCJrYW1iYVwiLFwid29yZFwiOiBcImtpc3dhaGlsaVwiLCBcImVuZ2xpc2hfd29yZFwiIDogXCJlbmdsaXNoXCIsIFwib3BlcmF0aW9uXCIgOiBcIm1hdGhzXCJ9KVt0cmlwLmdldCgnc3ViamVjdCcpXVxuXG4gICAgbW90aGVyVG9uZ3VlID0gdHJpcC5nZXQoXCJzdWJqZWN0X21vdGhlcl90b25ndWVcIilcbiAgICBncmFkZSAgID0gdHJpcC5nZXQoXCJjbGFzc1wiKVxuICAgIHdlZWsgICAgPSB0cmlwLmdldChcImxlc3Nvbl93ZWVrXCIpXG4gICAgZGF5ICAgICA9IHRyaXAuZ2V0KFwibGVzc29uX2RheVwiKVxuXG4gICAgbGVzc29uSW1hZ2UgPSBuZXcgSW1hZ2UgXG4gICAgJChsZXNzb25JbWFnZSkub24gXCJsb2FkXCIsIFxuICAgICAgKGV2ZW50KSA9PlxuICAgICAgICBpZiBsZXNzb25JbWFnZS5oZWlnaHQgaXMgMFxuICAgICAgICAgIEAkbGVzc29uQ29udGFpbmVyIC5maW5kKFwiaW1nXCIpLnJlbW92ZT8oKVxuICAgICAgICAgIEAkbGVzc29uQ29udGFpbmVyLmh0bWwgXCJTb3JyeSwgbm8gbGVzc29uIHBsYW4gYXZhaWxhYmxlLlwiXG4gICAgICAgICAgQCRsZXNzb25Db250YWluZXIuYXBwZW5kKGxlc3NvbkltYWdlKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgQCRsZXNzb25Db250YWluZXIuZmluZChcImltZ1wiKS5yZW1vdmU/KClcbiAgICAgICAgICBAJGxlc3NvbkNvbnRhaW5lci5hcHBlbmQobGVzc29uSW1hZ2UpXG5cblxuICAgIGlmIHN1YmplY3QgaXMgXCIzXCJcbiAgICAgIGxlc3NvbkltYWdlLnNyYyA9IFwiLyN7VGFuZ2VyaW5lLmRiX25hbWV9L19kZXNpZ24vYXNzZXRzL2xlc3NvbnMvI3ttb3RoZXJUb25ndWV9X3cje3dlZWt9X2Qje2RheX0ucG5nXCJcbiAgICBlbHNlXG4gICAgICBsZXNzb25JbWFnZS5zcmMgPSBcIi8je1RhbmdlcmluZS5kYl9uYW1lfS9fZGVzaWduL2Fzc2V0cy9sZXNzb25zLyN7c3ViamVjdH1fYyN7Z3JhZGV9X3cje3dlZWt9X2Qje2RheX0ucG5nXCJcblxuXG4gIGhpZGVGZWVkYmFjazogKGV2ZW50KSAtPlxuXG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KVxuXG4gICAgJHRhcmdldC50b2dnbGUoKVxuICAgICR0YXJnZXQuc2libGluZ3MoKS50b2dnbGUoKVxuXG4gICAgdHJpcElkID0gJHRhcmdldC5hdHRyKFwiZGF0YS10cmlwLWlkXCIpXG4gICAgQCRlbC5maW5kKFwiLiN7dHJpcElkfVwiKS5lbXB0eSgpXG5cblxuICBzaG93RmVlZGJhY2s6IChldmVudCkgLT5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG5cbiAgICAkdGFyZ2V0LnRvZ2dsZSgpXG4gICAgJHRhcmdldC5zaWJsaW5ncygpLnRvZ2dsZSgpXG5cblxuICAgIHRyaXBJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtdHJpcC1pZFwiKVxuXG4gICAgdHJpcCA9IEB0cmlwcy5nZXQodHJpcElkKVxuICAgIFxuICAgIHZpZXcgPSBuZXcgRmVlZGJhY2tSdW5WaWV3XG4gICAgICB0cmlwICAgICA6IHRyaXBcbiAgICAgIGZlZWRiYWNrIDogQGZlZWRiYWNrXG5cbiAgICB2aWV3LnJlbmRlcigpXG5cbiAgICBAc3ViVmlld3MucHVzaCB2aWV3XG5cbiAgICBAJGVsLmZpbmQoXCIuI3t0cmlwSWR9XCIpLmVtcHR5KCkuYXBwZW5kIHZpZXcuJGVsXG5cbiAgb25DbG9zZTogLT5cbiAgICBmb3IgdmlldyBpbiBAc3ViVmlld3NcbiAgICAgIHZpZXcuY2xvc2UoKVxuICAgIEAkbGVzc29uQ29udGFpbmVyPy5yZW1vdmU/KClcblxuICBzb3J0VGFibGU6ICggZXZlbnQgKSAtPlxuICAgIG5ld1NvcnRBdHRyaWJ1dGUgPSAkKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtYXR0clwiKVxuICAgIGlmIEBzb3J0QXR0cmlidXRlIGlzbnQgbmV3U29ydEF0dHJpYnV0ZSBvciBAc29ydEF0dHJpYnV0ZSBpcyBudWxsXG4gICAgICBAc29ydEF0dHJpYnV0ZSA9IG5ld1NvcnRBdHRyaWJ1dGVcbiAgICAgIEBzb3J0RGlyZWN0aW9uID0gMVxuICAgIGVsc2VcbiAgICAgIGlmIEBzb3J0RGlyZWN0aW9uIGlzIC0xXG4gICAgICAgIEBzb3J0RGlyZWN0aW9uID0gMVxuICAgICAgICBAc29ydEF0dHJpYnV0ZSA9IG51bGxcbiAgICAgIGVsc2UgaWYgQHNvcnREaXJlY3Rpb24gaXMgMVxuICAgICAgICBAc29ydERpcmVjdGlvbiA9IC0xXG5cbiAgICBAdXBkYXRlRmVlZGJhY2tMaXN0KClcblxuXG4gIHJlbmRlcjogPT5cbiAgICBpZiBAaXNSZWFkeSBhbmQgQHRyaXBzLmxlbmd0aCA9PSAwXG4gICAgICBAJGVsLmh0bWwgXCIgXG4gICAgICAgIDxoMT5GZWVkYmFjazwvaDE+XG4gICAgICAgIDxidXR0b24gY2xhc3M9J25hdi1idXR0b24gYmFjayc+QmFjazwvYnV0dG9uPlxuICAgICAgICA8cD5ObyB2aXNpdHMgeWV0LjwvcD5cbiAgICAgIFwiXG4gICAgICByZXR1cm4gQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG4gICAgICBcbiAgICBcbiAgICByZXR1cm4gdW5sZXNzIEBpc1JlYWR5XG4gICAgdHJpcHNCeUNvdW50eSA9IEB0cmlwcy5pbmRleEJ5KFwiY291bnR5XCIpXG4gICAgY291bnRpZXMgPSBfKEB0cmlwcy5wbHVjayhcImNvdW50eVwiKSkuY2hhaW4oKS5jb21wYWN0KCkudW5pcSgpLnZhbHVlKCkuc29ydCgpXG4gICAgY291bnR5T3B0aW9ucyA9IChcIjxvcHRpb24gdmFsdWU9JyN7Xyhjb3VudHkpLmVzY2FwZSgpfSc+I3tfKEBjb3VudHlOYW1lc1tjb3VudHldKS5lc2NhcGUoKX0gKCN7dHJpcHNCeUNvdW50eVtjb3VudHldPy5sZW5ndGggfHwgMH0pPC9vcHRpb24+XCIgZm9yIGNvdW50eSBpbiBjb3VudGllcykuam9pbignJylcbiAgICBjb3VudHlPcHRpb25zID0gXCI8b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz5TZWxlY3QgYSBjb3VudHk8L29wdGlvbj5cIiArIGNvdW50eU9wdGlvbnNcblxuICAgIGh0bWwgPSBcIlxuICAgICAgPGgxPkZlZWRiYWNrPC9oMT5cbiAgICAgIDxoMj5WaXNpdHM8L2gyPlxuICAgICAgPGRpdiBpZD0nY291bnR5LXNlbGVjdGlvbic+XG4gICAgICAgIDxsYWJlbCBmb3I9J2NvdW50eSc+Q291bnR5PC9sYWJlbD5cbiAgICAgICAgPHNlbGVjdCBpZD0nY291bnR5Jz5cbiAgICAgICAgICAje2NvdW50eU9wdGlvbnN9XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxkaXYgaWQ9J3pvbmUtc2VsZWN0aW9uJz5cbiAgICAgICAgPGxhYmVsIGZvcj0nem9uZSc+Wm9uZTwvbGFiZWw+XG4gICAgICAgIDxzZWxlY3QgaWQ9J3pvbmUnPlxuICAgICAgICAgIDxvcHRpb24gZGlzYWJsZWQ9J2Rpc2FibGVkJyBzZWxlY3RlZD0nc2VsZWN0ZWQnPjwvb3B0aW9uPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGlkPSdzY2hvb2wtc2VsZWN0aW9uJz5cbiAgICAgICAgPGxhYmVsIGZvcj0nc2Nob29sJz5TY2hvb2w8L2xhYmVsPlxuICAgICAgICA8c2VsZWN0IGlkPSdzY2hvb2wnPlxuICAgICAgICAgIDxvcHRpb24gZGlzYWJsZWQ9J2Rpc2FibGVkJyBzZWxlY3RlZD0nc2VsZWN0ZWQnPjwvb3B0aW9uPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGJyPlxuICAgICAgPGRpdiBpZD0nZmVlZGJhY2stbGlzdCc+XG5cbiAgICAgIDwvZGl2PlxuICAgIFwiXG5cbiAgICBAJGVsLmh0bWwgaHRtbFxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgb25Db3VudHlTZWxlY3Rpb25DaGFuZ2U6IChldmVudCkgLT5cblxuICAgIEBzZWxlY3RlZENvdW50eSA9ICQoZXZlbnQudGFyZ2V0KS52YWwoKVxuICAgIHRyaXBzQnlDb3VudHkgID0gQHRyaXBzLmluZGV4QnkoXCJjb3VudHlcIilcblxuICAgICMgZ2V0IHpvbmUgbmFtZXMgaW4gY291bnR5XG4gICAgTG9jLnF1ZXJ5IEBsb2NMZXZlbHMsIGNvdW50eTogQHNlbGVjdGVkQ291bnR5XG4gICAgLCAocmVzKSA9PlxuICAgICAgQHpvbmVOYW1lcyA9IHJlcy5yZWR1Y2UgKCAob2JqLCBjdXIpIC0+IG9ialtjdXIuaWRdPWN1ci5sYWJlbDsgcmV0dXJuIG9iaiApLCB7fVxuXG4gICAgICB6b25lcyA9IF8odHJpcHNCeUNvdW50eVtAc2VsZWN0ZWRDb3VudHldKS5jaGFpbigpLm1hcCgoYSktPmEuYXR0cmlidXRlc1snem9uZSddKS5jb21wYWN0KCkudW5pcSgpLnZhbHVlKCkuc29ydCgpXG5cbiAgICAgIHpvbmVPcHRpb25zID0gJydcbiAgICAgIGZvciB6b25lIGluIHpvbmVzXG4gICAgICAgIGNvdW50SW5ab25lID0gdHJpcHNCeUNvdW50eVtAc2VsZWN0ZWRDb3VudHldPy5tYXA/KChhKS0+YS5nZXQoXCJ6b25lXCIpKS5maWx0ZXIoKGEpLT5hIGlzIHpvbmUpPy5sZW5ndGggfHwgMFxuICAgICAgICB6b25lT3B0aW9ucyArPSBcIjxvcHRpb24gdmFsdWU9JyN7Xyh6b25lKS5lc2NhcGUoKX0nPiN7QHpvbmVOYW1lc1t6b25lXX0gKCN7Y291bnRJblpvbmV9KTwvb3B0aW9uPlwiXG4gICAgICB6b25lT3B0aW9ucyA9IFwiPG9wdGlvbiBkaXNhYmxlZD0nZGlzYWJsZWQnIHNlbGVjdGVkPSdzZWxlY3RlZCc+U2VsZWN0IGEgem9uZTwvb3B0aW9uPlwiICsgem9uZU9wdGlvbnNcblxuXG4gICAgICBAJGVsLmZpbmQoXCIjem9uZVwiKS5odG1sIHpvbmVPcHRpb25zXG5cbiAgICAgIHRyaXBzQnlDb3VudHlbQHNlbGVjdGVkQ291bnR5XT8ubWFwPygoYSktPiBhLmdldChcInpvbmVcIikpLmZpbHRlcj9cbiAgICAgICgoYSktPmE9PXpvbmUpLmxlbmd0aCB8fCAwXG5cbiAgb25ab25lU2VsZWN0aW9uQ2hhbmdlOiAoIGV2ZW50ICkgLT5cbiAgICBAc2VsZWN0ZWRab25lID0gJChldmVudC50YXJnZXQpLnZhbCgpXG4gICAgdHJpcHNCeVpvbmUgID0gQHRyaXBzLmluZGV4QnkoXCJ6b25lXCIpXG5cbiAgICBzY2hvb2xzID0gXyh0cmlwc0J5Wm9uZVtAc2VsZWN0ZWRab25lXSkuY2hhaW4oKS5tYXAoKGEpLT5hLmF0dHJpYnV0ZXNbJ3NjaG9vbCddKS5jb21wYWN0KCkudW5pcSgpLnZhbHVlKCkuc29ydCgpXG5cbiAgICAjIGdldCBzY2hvb2wgbmFtZXNcbiAgICAjY29uc29sZS5sb2cgXCJjb3VudHkgI3tAc2VsZWN0ZWRDb3VudHl9XCJcbiAgICAjY29uc29sZS5sb2cgXCJ6b25lOiAje0BzZWxlY3RlZFpvbmV9XCJcbiAgICBMb2MucXVlcnkgQGxvY0xldmVscyxcbiAgICAgIGNvdW50eSA6IEBzZWxlY3RlZENvdW50eVxuICAgICAgem9uZSAgIDogQHNlbGVjdGVkWm9uZVxuICAgICwgKHJlcykgPT5cbiAgICAgIEBzY2hvb2xOYW1lcyA9IHJlcy5yZWR1Y2UgKCAob2JqLCBjdXIpIC0+IG9ialtjdXIuaWRdPWN1ci5sYWJlbDsgcmV0dXJuIG9iaiApLCB7fVxuXG4gICAgICBzY2hvb2xPcHRpb25zID0gJydcbiAgICAgIGZvciBzY2hvb2wgaW4gc2Nob29sc1xuICAgICAgICBjb3VudEluU2Nob29sID0gdHJpcHNCeVpvbmVbQHNlbGVjdGVkWm9uZV0/Lm1hcD8oKGEpLT5hLmdldChcInNjaG9vbFwiKSkuZmlsdGVyKChhKS0+YSBpcyBzY2hvb2wpPy5sZW5ndGggfHwgMFxuICAgICAgICBzY2hvb2xPcHRpb25zICs9IFwiPG9wdGlvbiB2YWx1ZT0nI3tfKHNjaG9vbCkuZXNjYXBlKCl9Jz4je18oQHNjaG9vbE5hbWVzW3NjaG9vbF0pLmVzY2FwZSgpfSAoI3tjb3VudEluU2Nob29sfSk8L29wdGlvbj5cIlxuICAgICAgc2Nob29sT3B0aW9ucyA9IFwiPG9wdGlvbiBkaXNhYmxlZD0nZGlzYWJsZWQnIHNlbGVjdGVkPSdzZWxlY3RlZCc+U2VsZWN0IGEgc2Nob29sPC9vcHRpb24+XCIgKyBzY2hvb2xPcHRpb25zXG5cbiAgICAgIEAkZWwuZmluZChcIiNzY2hvb2xcIikuaHRtbCBzY2hvb2xPcHRpb25zXG5cbiAgICAgIHRyaXBzQnlab25lW0BzZWxlY3RlZFpvbmVdPy5tYXA/KChhKS0+IGEuZ2V0KFwic2Nob29sXCIpKS5maWx0ZXI/XG4gICAgICAoKGEpLT5hPT16b25lKS5sZW5ndGggfHwgMFxuXG4gIGdldFNvcnRBcnJvdzogKGF0dHJpYnV0ZU5hbWUpIC0+XG4gICAgcmV0dXJuIFwiJiN4MjViYztcIiBpZiBAc29ydEF0dHJpYnV0ZSBpcyBhdHRyaWJ1dGVOYW1lIGFuZCBAc29ydERpcmVjdGlvbiBpcyAxXG4gICAgcmV0dXJuIFwiJiN4MjViMjtcIiBpZiBAc29ydEF0dHJpYnV0ZSBpcyBhdHRyaWJ1dGVOYW1lIGFuZCBAc29ydERpcmVjdGlvbiBpcyAtMVxuICAgIHJldHVybiBcIlwiXG5cbiAgb25TY2hvb2xTZWxlY3Rpb25DaGFuZ2U6ICggZXZlbnQgKSAtPlxuXG4gICAgQHNlbGVjdGVkU2Nob29sID0gQCRlbC5maW5kKFwiI3NjaG9vbFwiKS52YWwoKVxuICAgIEBzZWxlY3RlZFpvbmUgICA9IEAkZWwuZmluZChcIiN6b25lXCIpLnZhbCgpXG4gICAgQHNlbGVjdGVkQ291bnR5ID0gQCRlbC5maW5kKFwiI2NvdW50eVwiKS52YWwoKVxuXG4gICAgQHNlbGVjdGVkVHJpcHMgPSBAdHJpcHMud2hlcmVcbiAgICAgIGNvdW50eSA6IEBzZWxlY3RlZENvdW50eVxuICAgICAgem9uZSAgIDogQHNlbGVjdGVkWm9uZVxuICAgICAgc2Nob29sIDogQHNlbGVjdGVkU2Nob29sXG5cbiAgICBAdXBkYXRlRmVlZGJhY2tMaXN0KClcblxuICB1cGRhdGVGZWVkYmFja0xpc3Q6IC0+XG5cbiAgICBpZiBAc29ydEF0dHJpYnV0ZSBpbiBbIFwic3ViamVjdFwiLCBcInN0cmVhbVwiIF1cblxuICAgICAgIyB0byBzb3J0IHN0cmluZ3NcbiAgICAgIHNvcnRGdW5jdGlvbiA9IChhLCBiKSA9PiBcbiAgICAgICAgYSA9IGEuZ2V0U3RyaW5nKEBzb3J0QXR0cmlidXRlKVxuICAgICAgICBiID0gYi5nZXRTdHJpbmcoQHNvcnRBdHRyaWJ1dGUpXG4gICAgICAgIGlmIChhIDwgYilcbiAgICAgICAgICByZXN1bHQgPSAtMVxuICAgICAgICBlbHNlIGlmIChhID4gYilcbiAgICAgICAgICByZXN1bHQgPSAxXG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXN1bHQgPSAwXG4gICAgICAgIHJldHVybiByZXN1bHQgKiBAc29ydERpcmVjdGlvblxuXG4gICAgZWxzZVxuXG4gICAgICAjIHNvcnRpbmcgbnVtYmVyc1xuXG4gICAgICBzb3J0RnVuY3Rpb24gPSAoYSwgYikgPT4gKCBiLmdldChAc29ydEF0dHJpYnV0ZSkgLSBhLmdldChAc29ydEF0dHJpYnV0ZSkgKSAqIEBzb3J0RGlyZWN0aW9uXG5cbiAgICBAc2VsZWN0ZWRUcmlwcyA9IEBzZWxlY3RlZFRyaXBzLnNvcnQgc29ydEZ1bmN0aW9uXG5cbiAgICBmZWVkYmFja0h0bWwgPSBcIlxuICAgICAgPGgyPiN7QHNjaG9vbE5hbWVzW0BzZWxlY3RlZFRyaXBzWzBdPy5nZXQ/KFwic2Nob29sXCIpXSB8fCAnJ308L2gyPlxuICAgICAgPHRhYmxlIGlkPSdmZWVkYmFjay10YWJsZSc+XG4gICAgICAgIDx0aGVhZD5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGggbm93cmFwIGNsYXNzPSdzb3J0YWJsZScgZGF0YS1hdHRyPSdzdWJqZWN0Jz5TdWJqZWN0ICN7QGdldFNvcnRBcnJvdyhcInN1YmplY3RcIil9PC90aD5cbiAgICAgICAgICAgIDx0aCBub3dyYXAgY2xhc3M9J3NvcnRhYmxlJyBkYXRhLWF0dHI9J2NsYXNzJz5DbGFzcyAje0BnZXRTb3J0QXJyb3coXCJjbGFzc1wiKX08L3RoPlxuICAgICAgICAgICAgPHRoIG5vd3JhcCBjbGFzcz0nc29ydGFibGUnIGRhdGEtYXR0cj0nc3RyZWFtJz5TdHJlYW0gI3tAZ2V0U29ydEFycm93KFwic3RyZWFtXCIpfTwvdGg+XG4gICAgICAgICAgICA8dGggbm93cmFwIGNsYXNzPSdzb3J0YWJsZScgZGF0YS1hdHRyPSdzdGFydF90aW1lJz5PYnNlcnZhdGlvbiBTdGFydCBUaW1lICN7QGdldFNvcnRBcnJvdyhcInN0YXJ0X3RpbWVcIil9PC9zcGFuPjwvdGg+XG4gICAgICAgICAgICA8dGggbm93cmFwIGNsYXNzPSdzb3J0YWJsZScgZGF0YS1hdHRyPScnPiZuYnNwOzwvdGg+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgPC90aGVhZD5cbiAgICAgICAgPHRib2R5PlxuICAgIFwiXG5cbiAgICBmb3IgdHJpcCxpbmRleCBpbiBAc2VsZWN0ZWRUcmlwc1xuXG4gICAgICB0cmlwSWQgPSB0cmlwLmdldCgndHJpcElkJylcblxuICAgICAgbGVzc29uUGxhbkJ1dHRvbnNIdG1sID0gXCJcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBzaG93LWxlc3Nvbi1wbGFuJyBkYXRhLXRyaXAtaWQ9JyN7dHJpcElkfSc+U2hvdyBsZXNzb24gcGxhbjwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIGhpZGUtbGVzc29uLXBsYW4nIGRhdGEtdHJpcC1pZD0nI3t0cmlwSWR9JyBzdHlsZT0nZGlzcGxheTpub25lOyc+SGlkZSBsZXNzb24gcGxhbjwvYnV0dG9uPlxuICAgICAgXCIgdW5sZXNzIEBmZWVkYmFjay5nZXQoXCJzaG93TGVzc29uUGxhblwiKVxuXG4gICAgICBzdWJqZWN0ID0gQHZhbHVlVG9IdW1hblt0cmlwLmdldCBcInN1YmplY3RcIl0gfHwgJydcblxuICAgICAgcmVzdWx0QnV0dG9uSHRtbCA9IFwiXG4gICAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQgc2hvdy1zdXJ2ZXktZGF0YScgZGF0YS10cmlwLWlkPScje3RyaXBJZH0nPlNob3cgc3VydmV5IGRhdGE8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBoaWRlLXN1cnZleS1kYXRhJyBkYXRhLXRyaXAtaWQ9JyN7dHJpcElkfScgc3R5bGU9J2Rpc3BsYXk6bm9uZTsnPkhpZGUgc3VydmV5IGRhdGE8L2J1dHRvbj5cbiAgICAgIFwiXG5cblxuICAgICAgZmVlZGJhY2tIdG1sICs9IFwiXG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGQgaWQ9J3N1YmplY3QtI3tpbmRleH0nPiN7c3ViamVjdH08L3RkPlxuICAgICAgICAgIDx0ZD4je3RyaXAuZ2V0U3RyaW5nKFwiY2xhc3NcIil9PC90ZD5cbiAgICAgICAgICA8dGQ+I3t0cmlwLmdldFN0cmluZyhcInN0cmVhbVwiKX08L3RkPlxuICAgICAgICAgIDx0ZD4je21vbWVudCh0cmlwLmdldChcInN0YXJ0X3RpbWVcIikpLmZvcm1hdChcIk1NTS1ERCBISDptbVwiKX08L3RkPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQgc2hvdy1mZWVkYmFjaycgZGF0YS10cmlwLWlkPScje3RyaXBJZH0nPlNob3cgZmVlZGJhY2s8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQgaGlkZS1mZWVkYmFjaycgZGF0YS10cmlwLWlkPScje3RyaXBJZH0nIHN0eWxlPSdkaXNwbGF5Om5vbmU7Jz5IaWRlIGZlZWRiYWNrPC9idXR0b24+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAje2xlc3NvblBsYW5CdXR0b25zSHRtbCB8fCAnJ31cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICN7cmVzdWx0QnV0dG9uSHRtbCB8fCAnJ31cbiAgICAgICAgICA8L3RkPlxuXG4gICAgICAgIDwvdHI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGQgY29sc3Bhbj0nNScgY2xhc3M9JyN7dHJpcElkfS1yZXN1bHQnPjwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGQgY29sc3Bhbj0nNScgY2xhc3M9JyN7dHJpcElkfSc+PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0ZCBjb2xzcGFuPSc1JyBjbGFzcz0nI3t0cmlwSWR9LWxlc3Nvbic+PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIFwiXG4gICAgZmVlZGJhY2tIdG1sICs9IFwiPC90Ym9keT48L3RhYmxlPlwiXG5cbiAgICBAJGVsLmZpbmQoXCIjZmVlZGJhY2stbGlzdFwiKS5odG1sIGZlZWRiYWNrSHRtbFxuXG5cbmNsYXNzIFdvcmtmbG93UmVzdWx0VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcbiAgXG4gIGV2ZW50czogXG4gICAgXCJjaGFuZ2Ugc2VsZWN0XCIgOiBcInVwZGF0ZURpc3BsYXlcIlxuXG4gIHVwZGF0ZURpc3BsYXk6IC0+XG4gICAgQCRlbC5maW5kKFwiLnJlc3VsdC1kaXNwbGF5XCIpLmhpZGUoKVxuICAgIHNlbGVjdGVkSWQgPSBAJGVsLmZpbmQoXCJzZWxlY3RcIikudmFsKClcbiAgICBAJGVsLmZpbmQoXCIuc3VidGVzdC0je3NlbGVjdGVkSWR9XCIpLnNob3coKVxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuXG4gICAgc2VsZiA9IEBcbiAgICBAW2tleV0gPSB2YWx1ZSBmb3Iga2V5LCB2YWx1ZSBvZiBvcHRpb25zXG5cbiAgICBhc3Nlc3NtZW50U3RlcHMgPSBfKEB3b3JrZmxvdy5nZXRDaGlsZHJlbigpKS53aGVyZSh7XCJ0eXBlXCI6XCJhc3Nlc3NtZW50XCJ9KVxuICAgIGFzc2Vzc21lbnRNb2RlbEJsYW5rcyA9IGFzc2Vzc21lbnRTdGVwcy5tYXAoIChlbCkgLT4geyBcIl9pZFwiIDogZWwudHlwZXNJZCB9KVxuICAgIGxvYWRPbmUgPSAoYXNzZXNzbWVudHMpIC0+XG4gICAgICBcbiAgICAgIGlmIGFzc2Vzc21lbnRNb2RlbEJsYW5rcy5sZW5ndGggPT0gMFxuICAgICAgICBzZWxmLnJlbmRlcigpXG4gICAgICBlbHNlXG4gICAgICAgIGJsYW5rID0gYXNzZXNzbWVudE1vZGVsQmxhbmtzLnBvcCgpXG4gICAgICAgIGFzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudCBibGFua1xuICAgICAgICBhc3Nlc3NtZW50cy5wdXNoIGFzc2Vzc21lbnRcbiAgICAgICAgYXNzZXNzbWVudC5mZXRjaFxuICAgICAgICAgIGVycm9yOiAtPiBhbGVydCBcIkxvYWRpbmcgYXNzZXNzbWVudCBmYWlsZWQuIFBsZWFzZSB0cnkgYWdhaW4uXCJcbiAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgYXNzZXNzbWVudC5xdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zXG4gICAgICAgICAgICBhc3Nlc3NtZW50LnF1ZXN0aW9ucy5mZXRjaFxuICAgICAgICAgICAgICBrZXkgOiBhc3Nlc3NtZW50LmlkXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICAgICAgbG9hZE9uZShhc3Nlc3NtZW50cylcblxuICAgIEBhc3Nlc3NtZW50cyA9IFtdXG4gICAgbG9hZE9uZShAYXNzZXNzbWVudHMpXG5cbiAgcmVuZGVyOiAtPlxuICAgIG9wdGlvbnNIdG1sID0gW11cbiAgICBkaXNwbGF5SHRtbCA9IFwiXCJcbiAgICBmaXJzdCA9IHRydWVcblxuICAgIGZvciBhc3Nlc3NtZW50IGluIEBhc3Nlc3NtZW50cyBcbiAgICAgIGZvciBzdWJ0ZXN0IGluIGFzc2Vzc21lbnQuc3VidGVzdHMubW9kZWxzXG4gICAgICAgIGlmIHN1YnRlc3QuZ2V0KFwicHJvdG90eXBlXCIpIGlzIFwic3VydmV5XCJcblxuICAgICAgICAgIGhpZGRlbiA9IGlmIG5vdCBmaXJzdCB0aGVuIFwic3R5bGU9J2Rpc3BsYXk6bm9uZTsnXCIgZWxzZSBcIlwiXG4gICAgICAgICAgZmlyc3QgPSBmYWxzZSBpZiBmaXJzdCBcbiAgICAgICAgICBkaXNwbGF5SHRtbCArPSBcIjxzZWN0aW9uICN7aGlkZGVufSBjbGFzcz0nc3VidGVzdC0je3N1YnRlc3QuaWR9IHJlc3VsdC1kaXNwbGF5Jz5cIlxuICAgICAgICAgIG9wdGlvbnNIdG1sICs9IFwiPG9wdGlvbiB2YWx1ZT0nI3tzdWJ0ZXN0LmlkfSc+I3tzdWJ0ZXN0LmdldCgnbmFtZScpfTwvb3B0aW9uPlwiXG5cbiAgICAgICAgICBmb3IgcXVlc3Rpb24gaW4gYXNzZXNzbWVudC5xdWVzdGlvbnMubW9kZWxzXG5cbiAgICAgICAgICAgIGNvbnRpbnVlIGlmIHF1ZXN0aW9uLmdldChcInN1YnRlc3RJZFwiKSBpc250IHN1YnRlc3QuaWRcblxuICAgICAgICAgICAgdGFibGVIdG1sID0gXCJcIlxuXG4gICAgICAgICAgICB0eXBlID0gcXVlc3Rpb24uZ2V0KCd0eXBlJylcblxuICAgICAgICAgICAgaWYgdHlwZSBpcyBcInNpbmdsZVwiXG4gICAgICAgICAgICAgIGZvciBvcHRpb24gaW4gcXVlc3Rpb24uZ2V0KFwib3B0aW9uc1wiKVxuICAgICAgICAgICAgICAgIHVubGVzcyBAdHJpcC5nZXQocXVlc3Rpb24uZ2V0KCduYW1lJykpXG4gICAgICAgICAgICAgICAgICBhbnN3ZXIgPSBcIjxzcGFuIGNvbG9yPSdncmV5Jz5ubyBkYXRhPC9zcGFuPlwiXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgYW5zd2VyID0gaWYgQHRyaXAuZ2V0KHF1ZXN0aW9uLmdldCgnbmFtZScpKSBpcyBvcHRpb24udmFsdWUgdGhlbiBcIjxzcGFuIHN0eWxlPSdjb2xvcjpncmVlbic+Y2hlY2tlZDwvc3Bhbj5cIiBlbHNlIFwiPHNwYW4gc3R5bGU9J2NvbG9yOnJlZCc+dW5jaGVja2VkPC9zcGFuPlwiXG4gICAgICAgICAgICAgICAgdGFibGVIdG1sICs9IFwiXG4gICAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0aD4je29wdGlvbi5sYWJlbH08L3RoPlxuICAgICAgICAgICAgICAgICAgICA8dGQ+I3thbnN3ZXJ9PC90ZD5cbiAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgIGVsc2UgaWYgdHlwZSBpcyBcIm11bHRpcGxlXCJcbiAgICAgICAgICAgICAgZm9yIG9wdGlvbiBpbiBxdWVzdGlvbi5nZXQoXCJvcHRpb25zXCIpXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBAdHJpcC5nZXQoXCIje3F1ZXN0aW9uLmdldCgnbmFtZScpfV8je29wdGlvbi52YWx1ZX1cIilcbiAgICAgICAgICAgICAgICB1bmxlc3MgdmFsdWVcbiAgICAgICAgICAgICAgICAgIGFuc3dlciA9IFwiPHNwYW4gY29sb3I9J2dyZXknPm5vIGRhdGE8L3NwYW4+XCJcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICBhbnN3ZXIgPSBpZiBAdHJpcC5nZXQoXCIje3F1ZXN0aW9uLmdldCgnbmFtZScpfV8je29wdGlvbi52YWx1ZX1cIikgaXMgMSB0aGVuIFwiPHNwYW4gc3R5bGU9J2NvbG9yOmdyZWVuJz5jaGVja2VkPC9zcGFuPlwiIGVsc2UgXCI8c3BhbiBzdHlsZT0nY29sb3I6cmVkJz51bmNoZWNrZWQ8L3NwYW4+XCJcbiAgICAgICAgICAgICAgICB0YWJsZUh0bWwgKz0gXCJcbiAgICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgICAgPHRoPiN7b3B0aW9uLmxhYmVsfTwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD4je2Fuc3dlcn08L3RkPlxuICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICB0YWJsZUh0bWwgKz0gXCJcbiAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0nMic+I3tAdHJpcC5nZXQocXVlc3Rpb24uZ2V0KCduYW1lJykpfTwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgIGRpc3BsYXlIdG1sICs9IFwiXG4gICAgICAgICAgICAgIDxoMz4je3F1ZXN0aW9uLmdldCgncHJvbXB0Jyl9PC9oMz5cbiAgICAgICAgICAgICAgPHRhYmxlPiN7dGFibGVIdG1sfTwvdGFibGU+XG4gICAgICAgICAgICBcIlxuICAgICAgICAgIGRpc3BsYXlIdG1sICs9IFwiPC9zZWN0aW9uPlwiXG4gICAgc2VsZWN0b3JIdG1sID0gXCI8c2VsZWN0PiN7b3B0aW9uc0h0bWx9PC9zZWxlY3Q+XCJcbiAgICBcbiAgICBcbiAgICBodG1sID0gXCJcbiAgICAgIDxoMj5TZWN0aW9uPC9oMj5cbiAgICAgICN7c2VsZWN0b3JIdG1sfVxuICAgICAgI3tkaXNwbGF5SHRtbH1cbiAgICBcIlxuXG4gICAgQCRlbC5odG1sIGh0bWwiLCJ2YXIgRmVlZGJhY2tUcmlwc1ZpZXcsIFdvcmtmbG93UmVzdWx0VmlldyxcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5GZWVkYmFja1RyaXBzVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChGZWVkYmFja1RyaXBzVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gRmVlZGJhY2tUcmlwc1ZpZXcoKSB7XG4gICAgdGhpcy5yZW5kZXIgPSBiaW5kKHRoaXMucmVuZGVyLCB0aGlzKTtcbiAgICByZXR1cm4gRmVlZGJhY2tUcmlwc1ZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBGZWVkYmFja1RyaXBzVmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJGZWVkYmFja1RyaXBzVmlld1wiO1xuXG4gIEZlZWRiYWNrVHJpcHNWaWV3LnByb3RvdHlwZS5ldmVudHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCJjaGFuZ2UgI2NvdW50eVwiOiBcIm9uQ291bnR5U2VsZWN0aW9uQ2hhbmdlXCIsXG4gICAgICBcImNoYW5nZSAjem9uZVwiOiBcIm9uWm9uZVNlbGVjdGlvbkNoYW5nZVwiLFxuICAgICAgXCJjaGFuZ2UgI3NjaG9vbFwiOiBcIm9uU2Nob29sU2VsZWN0aW9uQ2hhbmdlXCIsXG4gICAgICBcImNsaWNrIC5zaG93LWZlZWRiYWNrXCI6IFwic2hvd0ZlZWRiYWNrXCIsXG4gICAgICBcImNsaWNrIC5zaG93LWxlc3Nvbi1wbGFuXCI6IFwic2hvd0xlc3NvblBsYW5cIixcbiAgICAgIFwiY2xpY2sgLmhpZGUtZmVlZGJhY2tcIjogXCJoaWRlRmVlZGJhY2tcIixcbiAgICAgIFwiY2xpY2sgLmhpZGUtbGVzc29uLXBsYW5cIjogXCJoaWRlTGVzc29uUGxhblwiLFxuICAgICAgXCJjbGljayAuc2hvdy1zdXJ2ZXktZGF0YVwiOiBcInNob3dTdXJ2ZXlEYXRhXCIsXG4gICAgICBcImNsaWNrIC5oaWRlLXN1cnZleS1kYXRhXCI6IFwiaGlkZVN1cnZleURhdGFcIixcbiAgICAgIFwiY2xpY2sgLnNvcnRhYmxlXCI6IFwic29ydFRhYmxlXCIsXG4gICAgICBcImNsaWNrIC5iYWNrXCI6IFwiZ29CYWNrXCJcbiAgICB9O1xuICB9O1xuXG4gIEZlZWRiYWNrVHJpcHNWaWV3LnByb3RvdHlwZS52YWx1ZVRvSHVtYW4gPSB7XG4gICAgXCJlbmdsaXNoX3dvcmRcIjogXCJFbmdsaXNoXCIsXG4gICAgXCJ3b3JkXCI6IFwiS2lzd2FoaWxpXCIsXG4gICAgXCJvcGVyYXRpb25cIjogXCJNYXRoZW1hdGljc1wiLFxuICAgIFwiM1wiOiBcIk1vdGhlciBUb25ndWVcIlxuICB9O1xuXG4gIEZlZWRiYWNrVHJpcHNWaWV3LnByb3RvdHlwZS5zaG93U3VydmV5RGF0YSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICRvdXRwdXQsICR0YXJnZXQsIHRyaXBJZCwgdmlldztcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgICR0YXJnZXQudG9nZ2xlKCk7XG4gICAgJHRhcmdldC5zaWJsaW5ncygpLnRvZ2dsZSgpO1xuICAgIHRyaXBJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtdHJpcC1pZFwiKTtcbiAgICAkb3V0cHV0ID0gdGhpcy4kZWwuZmluZChcIi5cIiArIHRyaXBJZCArIFwiLXJlc3VsdFwiKS5hcHBlbmQoXCI8ZGl2PjxpbWcgY2xhc3M9J2xvYWRpbmcnIHNyYz0naW1hZ2VzL2xvYWRpbmcuZ2lmJz48L2Rpdj5cIikuZmluZChcImRpdlwiKTtcbiAgICB2aWV3ID0gbmV3IFdvcmtmbG93UmVzdWx0Vmlldyh7XG4gICAgICB3b3JrZmxvdzogdGhpcy53b3JrZmxvdyxcbiAgICAgIHRyaXA6IHRoaXMudHJpcHMuZ2V0KHRyaXBJZClcbiAgICB9KTtcbiAgICB2aWV3LnNldEVsZW1lbnQoJG91dHB1dCk7XG4gICAgdGhpcy5zdWJWaWV3cy5wdXNoKHZpZXcpO1xuICAgIHJldHVybiB0aGlzW1wiV29ya2Zsb3dSZXN1bHRWaWV3LVwiICsgdHJpcElkXSA9IHZpZXc7XG4gIH07XG5cbiAgRmVlZGJhY2tUcmlwc1ZpZXcucHJvdG90eXBlLmhpZGVTdXJ2ZXlEYXRhID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldCwgdHJpcElkO1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgJHRhcmdldC50b2dnbGUoKTtcbiAgICAkdGFyZ2V0LnNpYmxpbmdzKCkudG9nZ2xlKCk7XG4gICAgdHJpcElkID0gJHRhcmdldC5hdHRyKFwiZGF0YS10cmlwLWlkXCIpO1xuICAgIHRoaXMuc3ViVmlld3MgPSBfKHRoaXMuc3ViVmlld3MpLndpdGhvdXQodGhpc1tcIldvcmtmbG93UmVzdWx0Vmlldy1cIiArIHRyaXBJZF0pO1xuICAgIHJldHVybiB0aGlzW1wiV29ya2Zsb3dSZXN1bHRWaWV3LVwiICsgdHJpcElkXS5jbG9zZSgpO1xuICB9O1xuXG4gIEZlZWRiYWNrVHJpcHNWaWV3LnByb3RvdHlwZS5nb0JhY2sgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZShcIlwiLCB0cnVlKTtcbiAgfTtcblxuICBGZWVkYmFja1RyaXBzVmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB2YXIga2V5LCB2YWx1ZTtcbiAgICBmb3IgKGtleSBpbiBvcHRpb25zKSB7XG4gICAgICB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcbiAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICB0aGlzLnN1YlZpZXdzID0gW107XG4gICAgdGhpcy5sb2NMZXZlbHMgPSBbXCJjb3VudHlcIiwgXCJ6b25lXCIsIFwic2Nob29sXCJdO1xuICAgIHRoaXMudHJpcHMgPSBuZXcgVHJpcFJlc3VsdENvbGxlY3Rpb247XG4gICAgcmV0dXJuIHRoaXMudHJpcHMuZmV0Y2goe1xuICAgICAgcmVzdWx0VmlldzogXCJ0dXRvclRyaXBzXCIsXG4gICAgICBxdWVyeUtleTogXCJ3b3JrZmxvdy1cIiArIHRoaXMud29ya2Zsb3cuaWQsXG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBMb2MucXVlcnkoX3RoaXMubG9jTGV2ZWxzLCBudWxsLCBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgICAgIF90aGlzLmNvdW50eU5hbWVzID0gcmVzLnJlZHVjZSgoZnVuY3Rpb24ob2JqLCBjdXIpIHtcbiAgICAgICAgICAgICAgb2JqW2N1ci5pZF0gPSBjdXIubGFiZWw7XG4gICAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgICB9KSwge30pO1xuICAgICAgICAgICAgX3RoaXMuaXNSZWFkeSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIEZlZWRiYWNrVHJpcHNWaWV3LnByb3RvdHlwZS5oaWRlTGVzc29uUGxhbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIHRyaXBJZDtcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgICR0YXJnZXQudG9nZ2xlKCk7XG4gICAgJHRhcmdldC5zaWJsaW5ncygpLnRvZ2dsZSgpO1xuICAgIHRyaXBJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtdHJpcC1pZFwiKTtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5cIiArIHRyaXBJZCArIFwiLWxlc3NvblwiKS5lbXB0eSgpO1xuICB9O1xuXG4gIEZlZWRiYWNrVHJpcHNWaWV3LnByb3RvdHlwZS5zaG93TGVzc29uUGxhbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIGRheSwgZ3JhZGUsIGxlc3NvbkltYWdlLCBtb3RoZXJUb25ndWUsIHN1YmplY3QsIHRyaXAsIHRyaXBJZCwgd2VlaztcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgICR0YXJnZXQudG9nZ2xlKCk7XG4gICAgJHRhcmdldC5zaWJsaW5ncygpLnRvZ2dsZSgpO1xuICAgIHRyaXBJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtdHJpcC1pZFwiKTtcbiAgICB0cmlwID0gdGhpcy50cmlwcy5nZXQodHJpcElkKTtcbiAgICB0aGlzLiRsZXNzb25Db250YWluZXIgPSB0aGlzLiRlbC5maW5kKFwiLlwiICsgdHJpcElkICsgXCItbGVzc29uXCIpO1xuICAgIHRoaXMuJGxlc3NvbkNvbnRhaW5lci5odG1sKFwiPGltZyBjbGFzcz0nbG9hZGluZycgc3JjPSdpbWFnZXMvbG9hZGluZy5naWYnPlwiKTtcbiAgICBzdWJqZWN0ID0ge1xuICAgICAgXCJidWt1c3VcIjogXCJidWt1c3VcIixcbiAgICAgIFwia2FtYmFcIjogXCJrYW1iYVwiLFxuICAgICAgXCJ3b3JkXCI6IFwia2lzd2FoaWxpXCIsXG4gICAgICBcImVuZ2xpc2hfd29yZFwiOiBcImVuZ2xpc2hcIixcbiAgICAgIFwib3BlcmF0aW9uXCI6IFwibWF0aHNcIlxuICAgIH1bdHJpcC5nZXQoJ3N1YmplY3QnKV07XG4gICAgbW90aGVyVG9uZ3VlID0gdHJpcC5nZXQoXCJzdWJqZWN0X21vdGhlcl90b25ndWVcIik7XG4gICAgZ3JhZGUgPSB0cmlwLmdldChcImNsYXNzXCIpO1xuICAgIHdlZWsgPSB0cmlwLmdldChcImxlc3Nvbl93ZWVrXCIpO1xuICAgIGRheSA9IHRyaXAuZ2V0KFwibGVzc29uX2RheVwiKTtcbiAgICBsZXNzb25JbWFnZSA9IG5ldyBJbWFnZTtcbiAgICAkKGxlc3NvbkltYWdlKS5vbihcImxvYWRcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgdmFyIGJhc2UsIGJhc2UxO1xuICAgICAgICBpZiAobGVzc29uSW1hZ2UuaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiAoYmFzZSA9IF90aGlzLiRsZXNzb25Db250YWluZXIuZmluZChcImltZ1wiKSkucmVtb3ZlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGJhc2UucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIF90aGlzLiRsZXNzb25Db250YWluZXIuaHRtbChcIlNvcnJ5LCBubyBsZXNzb24gcGxhbiBhdmFpbGFibGUuXCIpO1xuICAgICAgICAgIHJldHVybiBfdGhpcy4kbGVzc29uQ29udGFpbmVyLmFwcGVuZChsZXNzb25JbWFnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiAoYmFzZTEgPSBfdGhpcy4kbGVzc29uQ29udGFpbmVyLmZpbmQoXCJpbWdcIikpLnJlbW92ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBiYXNlMS5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF90aGlzLiRsZXNzb25Db250YWluZXIuYXBwZW5kKGxlc3NvbkltYWdlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgaWYgKHN1YmplY3QgPT09IFwiM1wiKSB7XG4gICAgICByZXR1cm4gbGVzc29uSW1hZ2Uuc3JjID0gXCIvXCIgKyBUYW5nZXJpbmUuZGJfbmFtZSArIFwiL19kZXNpZ24vYXNzZXRzL2xlc3NvbnMvXCIgKyBtb3RoZXJUb25ndWUgKyBcIl93XCIgKyB3ZWVrICsgXCJfZFwiICsgZGF5ICsgXCIucG5nXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsZXNzb25JbWFnZS5zcmMgPSBcIi9cIiArIFRhbmdlcmluZS5kYl9uYW1lICsgXCIvX2Rlc2lnbi9hc3NldHMvbGVzc29ucy9cIiArIHN1YmplY3QgKyBcIl9jXCIgKyBncmFkZSArIFwiX3dcIiArIHdlZWsgKyBcIl9kXCIgKyBkYXkgKyBcIi5wbmdcIjtcbiAgICB9XG4gIH07XG5cbiAgRmVlZGJhY2tUcmlwc1ZpZXcucHJvdG90eXBlLmhpZGVGZWVkYmFjayA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIHRyaXBJZDtcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgICR0YXJnZXQudG9nZ2xlKCk7XG4gICAgJHRhcmdldC5zaWJsaW5ncygpLnRvZ2dsZSgpO1xuICAgIHRyaXBJZCA9ICR0YXJnZXQuYXR0cihcImRhdGEtdHJpcC1pZFwiKTtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5cIiArIHRyaXBJZCkuZW1wdHkoKTtcbiAgfTtcblxuICBGZWVkYmFja1RyaXBzVmlldy5wcm90b3R5cGUuc2hvd0ZlZWRiYWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldCwgdHJpcCwgdHJpcElkLCB2aWV3O1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgJHRhcmdldC50b2dnbGUoKTtcbiAgICAkdGFyZ2V0LnNpYmxpbmdzKCkudG9nZ2xlKCk7XG4gICAgdHJpcElkID0gJHRhcmdldC5hdHRyKFwiZGF0YS10cmlwLWlkXCIpO1xuICAgIHRyaXAgPSB0aGlzLnRyaXBzLmdldCh0cmlwSWQpO1xuICAgIHZpZXcgPSBuZXcgRmVlZGJhY2tSdW5WaWV3KHtcbiAgICAgIHRyaXA6IHRyaXAsXG4gICAgICBmZWVkYmFjazogdGhpcy5mZWVkYmFja1xuICAgIH0pO1xuICAgIHZpZXcucmVuZGVyKCk7XG4gICAgdGhpcy5zdWJWaWV3cy5wdXNoKHZpZXcpO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLlwiICsgdHJpcElkKS5lbXB0eSgpLmFwcGVuZCh2aWV3LiRlbCk7XG4gIH07XG5cbiAgRmVlZGJhY2tUcmlwc1ZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaSwgbGVuLCByZWYsIHJlZjEsIHZpZXc7XG4gICAgcmVmID0gdGhpcy5zdWJWaWV3cztcbiAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZpZXcgPSByZWZbaV07XG4gICAgICB2aWV3LmNsb3NlKCk7XG4gICAgfVxuICAgIHJldHVybiAocmVmMSA9IHRoaXMuJGxlc3NvbkNvbnRhaW5lcikgIT0gbnVsbCA/IHR5cGVvZiByZWYxLnJlbW92ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVmMS5yZW1vdmUoKSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgfTtcblxuICBGZWVkYmFja1RyaXBzVmlldy5wcm90b3R5cGUuc29ydFRhYmxlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgbmV3U29ydEF0dHJpYnV0ZTtcbiAgICBuZXdTb3J0QXR0cmlidXRlID0gJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLWF0dHJcIik7XG4gICAgaWYgKHRoaXMuc29ydEF0dHJpYnV0ZSAhPT0gbmV3U29ydEF0dHJpYnV0ZSB8fCB0aGlzLnNvcnRBdHRyaWJ1dGUgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuc29ydEF0dHJpYnV0ZSA9IG5ld1NvcnRBdHRyaWJ1dGU7XG4gICAgICB0aGlzLnNvcnREaXJlY3Rpb24gPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5zb3J0RGlyZWN0aW9uID09PSAtMSkge1xuICAgICAgICB0aGlzLnNvcnREaXJlY3Rpb24gPSAxO1xuICAgICAgICB0aGlzLnNvcnRBdHRyaWJ1dGUgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnNvcnREaXJlY3Rpb24gPT09IDEpIHtcbiAgICAgICAgdGhpcy5zb3J0RGlyZWN0aW9uID0gLTE7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVwZGF0ZUZlZWRiYWNrTGlzdCgpO1xuICB9O1xuXG4gIEZlZWRiYWNrVHJpcHNWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY291bnRpZXMsIGNvdW50eSwgY291bnR5T3B0aW9ucywgaHRtbCwgdHJpcHNCeUNvdW50eTtcbiAgICBpZiAodGhpcy5pc1JlYWR5ICYmIHRoaXMudHJpcHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLiRlbC5odG1sKFwiPGgxPkZlZWRiYWNrPC9oMT4gPGJ1dHRvbiBjbGFzcz0nbmF2LWJ1dHRvbiBiYWNrJz5CYWNrPC9idXR0b24+IDxwPk5vIHZpc2l0cyB5ZXQuPC9wPlwiKTtcbiAgICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmlzUmVhZHkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJpcHNCeUNvdW50eSA9IHRoaXMudHJpcHMuaW5kZXhCeShcImNvdW50eVwiKTtcbiAgICBjb3VudGllcyA9IF8odGhpcy50cmlwcy5wbHVjayhcImNvdW50eVwiKSkuY2hhaW4oKS5jb21wYWN0KCkudW5pcSgpLnZhbHVlKCkuc29ydCgpO1xuICAgIGNvdW50eU9wdGlvbnMgPSAoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGksIGxlbiwgcmVmLCByZXN1bHRzO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gY291bnRpZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY291bnR5ID0gY291bnRpZXNbaV07XG4gICAgICAgIHJlc3VsdHMucHVzaChcIjxvcHRpb24gdmFsdWU9J1wiICsgKF8oY291bnR5KS5lc2NhcGUoKSkgKyBcIic+XCIgKyAoXyh0aGlzLmNvdW50eU5hbWVzW2NvdW50eV0pLmVzY2FwZSgpKSArIFwiIChcIiArICgoKHJlZiA9IHRyaXBzQnlDb3VudHlbY291bnR5XSkgIT0gbnVsbCA/IHJlZi5sZW5ndGggOiB2b2lkIDApIHx8IDApICsgXCIpPC9vcHRpb24+XCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfSkuY2FsbCh0aGlzKSkuam9pbignJyk7XG4gICAgY291bnR5T3B0aW9ucyA9IFwiPG9wdGlvbiBkaXNhYmxlZD0nZGlzYWJsZWQnIHNlbGVjdGVkPSdzZWxlY3RlZCc+U2VsZWN0IGEgY291bnR5PC9vcHRpb24+XCIgKyBjb3VudHlPcHRpb25zO1xuICAgIGh0bWwgPSBcIjxoMT5GZWVkYmFjazwvaDE+IDxoMj5WaXNpdHM8L2gyPiA8ZGl2IGlkPSdjb3VudHktc2VsZWN0aW9uJz4gPGxhYmVsIGZvcj0nY291bnR5Jz5Db3VudHk8L2xhYmVsPiA8c2VsZWN0IGlkPSdjb3VudHknPiBcIiArIGNvdW50eU9wdGlvbnMgKyBcIiA8L3NlbGVjdD4gPC9kaXY+IDxkaXYgaWQ9J3pvbmUtc2VsZWN0aW9uJz4gPGxhYmVsIGZvcj0nem9uZSc+Wm9uZTwvbGFiZWw+IDxzZWxlY3QgaWQ9J3pvbmUnPiA8b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz48L29wdGlvbj4gPC9zZWxlY3Q+IDwvZGl2PiA8ZGl2IGlkPSdzY2hvb2wtc2VsZWN0aW9uJz4gPGxhYmVsIGZvcj0nc2Nob29sJz5TY2hvb2w8L2xhYmVsPiA8c2VsZWN0IGlkPSdzY2hvb2wnPiA8b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz48L29wdGlvbj4gPC9zZWxlY3Q+IDwvZGl2PiA8YnI+IDxkaXYgaWQ9J2ZlZWRiYWNrLWxpc3QnPiA8L2Rpdj5cIjtcbiAgICB0aGlzLiRlbC5odG1sKGh0bWwpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICBGZWVkYmFja1RyaXBzVmlldy5wcm90b3R5cGUub25Db3VudHlTZWxlY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciB0cmlwc0J5Q291bnR5O1xuICAgIHRoaXMuc2VsZWN0ZWRDb3VudHkgPSAkKGV2ZW50LnRhcmdldCkudmFsKCk7XG4gICAgdHJpcHNCeUNvdW50eSA9IHRoaXMudHJpcHMuaW5kZXhCeShcImNvdW50eVwiKTtcbiAgICByZXR1cm4gTG9jLnF1ZXJ5KHRoaXMubG9jTGV2ZWxzLCB7XG4gICAgICBjb3VudHk6IHRoaXMuc2VsZWN0ZWRDb3VudHlcbiAgICB9LCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihyZXMpIHtcbiAgICAgICAgdmFyIGNvdW50SW5ab25lLCBpLCBsZW4sIHJlZiwgcmVmMSwgcmVmMiwgem9uZSwgem9uZU9wdGlvbnMsIHpvbmVzO1xuICAgICAgICBfdGhpcy56b25lTmFtZXMgPSByZXMucmVkdWNlKChmdW5jdGlvbihvYmosIGN1cikge1xuICAgICAgICAgIG9ialtjdXIuaWRdID0gY3VyLmxhYmVsO1xuICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0pLCB7fSk7XG4gICAgICAgIHpvbmVzID0gXyh0cmlwc0J5Q291bnR5W190aGlzLnNlbGVjdGVkQ291bnR5XSkuY2hhaW4oKS5tYXAoZnVuY3Rpb24oYSkge1xuICAgICAgICAgIHJldHVybiBhLmF0dHJpYnV0ZXNbJ3pvbmUnXTtcbiAgICAgICAgfSkuY29tcGFjdCgpLnVuaXEoKS52YWx1ZSgpLnNvcnQoKTtcbiAgICAgICAgem9uZU9wdGlvbnMgPSAnJztcbiAgICAgICAgZm9yIChpID0gMCwgbGVuID0gem9uZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICB6b25lID0gem9uZXNbaV07XG4gICAgICAgICAgY291bnRJblpvbmUgPSAoKHJlZiA9IHRyaXBzQnlDb3VudHlbX3RoaXMuc2VsZWN0ZWRDb3VudHldKSAhPSBudWxsID8gdHlwZW9mIHJlZi5tYXAgPT09IFwiZnVuY3Rpb25cIiA/IChyZWYxID0gcmVmLm1hcChmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5nZXQoXCJ6b25lXCIpO1xuICAgICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICByZXR1cm4gYSA9PT0gem9uZTtcbiAgICAgICAgICB9KSkgIT0gbnVsbCA/IHJlZjEubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwIDogdm9pZCAwKSB8fCAwO1xuICAgICAgICAgIHpvbmVPcHRpb25zICs9IFwiPG9wdGlvbiB2YWx1ZT0nXCIgKyAoXyh6b25lKS5lc2NhcGUoKSkgKyBcIic+XCIgKyBfdGhpcy56b25lTmFtZXNbem9uZV0gKyBcIiAoXCIgKyBjb3VudEluWm9uZSArIFwiKTwvb3B0aW9uPlwiO1xuICAgICAgICB9XG4gICAgICAgIHpvbmVPcHRpb25zID0gXCI8b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz5TZWxlY3QgYSB6b25lPC9vcHRpb24+XCIgKyB6b25lT3B0aW9ucztcbiAgICAgICAgX3RoaXMuJGVsLmZpbmQoXCIjem9uZVwiKS5odG1sKHpvbmVPcHRpb25zKTtcbiAgICAgICAgKChyZWYyID0gdHJpcHNCeUNvdW50eVtfdGhpcy5zZWxlY3RlZENvdW50eV0pICE9IG51bGwgPyB0eXBlb2YgcmVmMi5tYXAgPT09IFwiZnVuY3Rpb25cIiA/IHJlZjIubWFwKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICByZXR1cm4gYS5nZXQoXCJ6b25lXCIpO1xuICAgICAgICB9KS5maWx0ZXIgOiB2b2lkIDAgOiB2b2lkIDApICE9IG51bGw7XG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24oYSkge1xuICAgICAgICAgIHJldHVybiBhID09PSB6b25lO1xuICAgICAgICB9KS5sZW5ndGggfHwgMDtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9O1xuXG4gIEZlZWRiYWNrVHJpcHNWaWV3LnByb3RvdHlwZS5vblpvbmVTZWxlY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBzY2hvb2xzLCB0cmlwc0J5Wm9uZTtcbiAgICB0aGlzLnNlbGVjdGVkWm9uZSA9ICQoZXZlbnQudGFyZ2V0KS52YWwoKTtcbiAgICB0cmlwc0J5Wm9uZSA9IHRoaXMudHJpcHMuaW5kZXhCeShcInpvbmVcIik7XG4gICAgc2Nob29scyA9IF8odHJpcHNCeVpvbmVbdGhpcy5zZWxlY3RlZFpvbmVdKS5jaGFpbigpLm1hcChmdW5jdGlvbihhKSB7XG4gICAgICByZXR1cm4gYS5hdHRyaWJ1dGVzWydzY2hvb2wnXTtcbiAgICB9KS5jb21wYWN0KCkudW5pcSgpLnZhbHVlKCkuc29ydCgpO1xuICAgIHJldHVybiBMb2MucXVlcnkodGhpcy5sb2NMZXZlbHMsIHtcbiAgICAgIGNvdW50eTogdGhpcy5zZWxlY3RlZENvdW50eSxcbiAgICAgIHpvbmU6IHRoaXMuc2VsZWN0ZWRab25lXG4gICAgfSwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgIHZhciBjb3VudEluU2Nob29sLCBpLCBsZW4sIHJlZiwgcmVmMSwgcmVmMiwgc2Nob29sLCBzY2hvb2xPcHRpb25zO1xuICAgICAgICBfdGhpcy5zY2hvb2xOYW1lcyA9IHJlcy5yZWR1Y2UoKGZ1bmN0aW9uKG9iaiwgY3VyKSB7XG4gICAgICAgICAgb2JqW2N1ci5pZF0gPSBjdXIubGFiZWw7XG4gICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSksIHt9KTtcbiAgICAgICAgc2Nob29sT3B0aW9ucyA9ICcnO1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSBzY2hvb2xzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgc2Nob29sID0gc2Nob29sc1tpXTtcbiAgICAgICAgICBjb3VudEluU2Nob29sID0gKChyZWYgPSB0cmlwc0J5Wm9uZVtfdGhpcy5zZWxlY3RlZFpvbmVdKSAhPSBudWxsID8gdHlwZW9mIHJlZi5tYXAgPT09IFwiZnVuY3Rpb25cIiA/IChyZWYxID0gcmVmLm1hcChmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5nZXQoXCJzY2hvb2xcIik7XG4gICAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBhID09PSBzY2hvb2w7XG4gICAgICAgICAgfSkpICE9IG51bGwgPyByZWYxLmxlbmd0aCA6IHZvaWQgMCA6IHZvaWQgMCA6IHZvaWQgMCkgfHwgMDtcbiAgICAgICAgICBzY2hvb2xPcHRpb25zICs9IFwiPG9wdGlvbiB2YWx1ZT0nXCIgKyAoXyhzY2hvb2wpLmVzY2FwZSgpKSArIFwiJz5cIiArIChfKF90aGlzLnNjaG9vbE5hbWVzW3NjaG9vbF0pLmVzY2FwZSgpKSArIFwiIChcIiArIGNvdW50SW5TY2hvb2wgKyBcIik8L29wdGlvbj5cIjtcbiAgICAgICAgfVxuICAgICAgICBzY2hvb2xPcHRpb25zID0gXCI8b3B0aW9uIGRpc2FibGVkPSdkaXNhYmxlZCcgc2VsZWN0ZWQ9J3NlbGVjdGVkJz5TZWxlY3QgYSBzY2hvb2w8L29wdGlvbj5cIiArIHNjaG9vbE9wdGlvbnM7XG4gICAgICAgIF90aGlzLiRlbC5maW5kKFwiI3NjaG9vbFwiKS5odG1sKHNjaG9vbE9wdGlvbnMpO1xuICAgICAgICAoKHJlZjIgPSB0cmlwc0J5Wm9uZVtfdGhpcy5zZWxlY3RlZFpvbmVdKSAhPSBudWxsID8gdHlwZW9mIHJlZjIubWFwID09PSBcImZ1bmN0aW9uXCIgPyByZWYyLm1hcChmdW5jdGlvbihhKSB7XG4gICAgICAgICAgcmV0dXJuIGEuZ2V0KFwic2Nob29sXCIpO1xuICAgICAgICB9KS5maWx0ZXIgOiB2b2lkIDAgOiB2b2lkIDApICE9IG51bGw7XG4gICAgICAgIHJldHVybiAoZnVuY3Rpb24oYSkge1xuICAgICAgICAgIHJldHVybiBhID09PSB6b25lO1xuICAgICAgICB9KS5sZW5ndGggfHwgMDtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9O1xuXG4gIEZlZWRiYWNrVHJpcHNWaWV3LnByb3RvdHlwZS5nZXRTb3J0QXJyb3cgPSBmdW5jdGlvbihhdHRyaWJ1dGVOYW1lKSB7XG4gICAgaWYgKHRoaXMuc29ydEF0dHJpYnV0ZSA9PT0gYXR0cmlidXRlTmFtZSAmJiB0aGlzLnNvcnREaXJlY3Rpb24gPT09IDEpIHtcbiAgICAgIHJldHVybiBcIiYjeDI1YmM7XCI7XG4gICAgfVxuICAgIGlmICh0aGlzLnNvcnRBdHRyaWJ1dGUgPT09IGF0dHJpYnV0ZU5hbWUgJiYgdGhpcy5zb3J0RGlyZWN0aW9uID09PSAtMSkge1xuICAgICAgcmV0dXJuIFwiJiN4MjViMjtcIjtcbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG4gIH07XG5cbiAgRmVlZGJhY2tUcmlwc1ZpZXcucHJvdG90eXBlLm9uU2Nob29sU2VsZWN0aW9uQ2hhbmdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB0aGlzLnNlbGVjdGVkU2Nob29sID0gdGhpcy4kZWwuZmluZChcIiNzY2hvb2xcIikudmFsKCk7XG4gICAgdGhpcy5zZWxlY3RlZFpvbmUgPSB0aGlzLiRlbC5maW5kKFwiI3pvbmVcIikudmFsKCk7XG4gICAgdGhpcy5zZWxlY3RlZENvdW50eSA9IHRoaXMuJGVsLmZpbmQoXCIjY291bnR5XCIpLnZhbCgpO1xuICAgIHRoaXMuc2VsZWN0ZWRUcmlwcyA9IHRoaXMudHJpcHMud2hlcmUoe1xuICAgICAgY291bnR5OiB0aGlzLnNlbGVjdGVkQ291bnR5LFxuICAgICAgem9uZTogdGhpcy5zZWxlY3RlZFpvbmUsXG4gICAgICBzY2hvb2w6IHRoaXMuc2VsZWN0ZWRTY2hvb2xcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVGZWVkYmFja0xpc3QoKTtcbiAgfTtcblxuICBGZWVkYmFja1RyaXBzVmlldy5wcm90b3R5cGUudXBkYXRlRmVlZGJhY2tMaXN0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGZlZWRiYWNrSHRtbCwgaSwgaW5kZXgsIGxlbiwgbGVzc29uUGxhbkJ1dHRvbnNIdG1sLCByZWYsIHJlZjEsIHJlZjIsIHJlc3VsdEJ1dHRvbkh0bWwsIHNvcnRGdW5jdGlvbiwgc3ViamVjdCwgdHJpcCwgdHJpcElkO1xuICAgIGlmICgocmVmID0gdGhpcy5zb3J0QXR0cmlidXRlKSA9PT0gXCJzdWJqZWN0XCIgfHwgcmVmID09PSBcInN0cmVhbVwiKSB7XG4gICAgICBzb3J0RnVuY3Rpb24gPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICAgIGEgPSBhLmdldFN0cmluZyhfdGhpcy5zb3J0QXR0cmlidXRlKTtcbiAgICAgICAgICBiID0gYi5nZXRTdHJpbmcoX3RoaXMuc29ydEF0dHJpYnV0ZSk7XG4gICAgICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgICAgICByZXN1bHQgPSAtMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGEgPiBiKSB7XG4gICAgICAgICAgICByZXN1bHQgPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogX3RoaXMuc29ydERpcmVjdGlvbjtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzb3J0RnVuY3Rpb24gPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gKGIuZ2V0KF90aGlzLnNvcnRBdHRyaWJ1dGUpIC0gYS5nZXQoX3RoaXMuc29ydEF0dHJpYnV0ZSkpICogX3RoaXMuc29ydERpcmVjdGlvbjtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLnNlbGVjdGVkVHJpcHMgPSB0aGlzLnNlbGVjdGVkVHJpcHMuc29ydChzb3J0RnVuY3Rpb24pO1xuICAgIGZlZWRiYWNrSHRtbCA9IFwiPGgyPlwiICsgKHRoaXMuc2Nob29sTmFtZXNbKHJlZjEgPSB0aGlzLnNlbGVjdGVkVHJpcHNbMF0pICE9IG51bGwgPyB0eXBlb2YgcmVmMS5nZXQgPT09IFwiZnVuY3Rpb25cIiA/IHJlZjEuZ2V0KFwic2Nob29sXCIpIDogdm9pZCAwIDogdm9pZCAwXSB8fCAnJykgKyBcIjwvaDI+IDx0YWJsZSBpZD0nZmVlZGJhY2stdGFibGUnPiA8dGhlYWQ+IDx0cj4gPHRoIG5vd3JhcCBjbGFzcz0nc29ydGFibGUnIGRhdGEtYXR0cj0nc3ViamVjdCc+U3ViamVjdCBcIiArICh0aGlzLmdldFNvcnRBcnJvdyhcInN1YmplY3RcIikpICsgXCI8L3RoPiA8dGggbm93cmFwIGNsYXNzPSdzb3J0YWJsZScgZGF0YS1hdHRyPSdjbGFzcyc+Q2xhc3MgXCIgKyAodGhpcy5nZXRTb3J0QXJyb3coXCJjbGFzc1wiKSkgKyBcIjwvdGg+IDx0aCBub3dyYXAgY2xhc3M9J3NvcnRhYmxlJyBkYXRhLWF0dHI9J3N0cmVhbSc+U3RyZWFtIFwiICsgKHRoaXMuZ2V0U29ydEFycm93KFwic3RyZWFtXCIpKSArIFwiPC90aD4gPHRoIG5vd3JhcCBjbGFzcz0nc29ydGFibGUnIGRhdGEtYXR0cj0nc3RhcnRfdGltZSc+T2JzZXJ2YXRpb24gU3RhcnQgVGltZSBcIiArICh0aGlzLmdldFNvcnRBcnJvdyhcInN0YXJ0X3RpbWVcIikpICsgXCI8L3NwYW4+PC90aD4gPHRoIG5vd3JhcCBjbGFzcz0nc29ydGFibGUnIGRhdGEtYXR0cj0nJz4mbmJzcDs8L3RoPiA8L3RyPiA8L3RoZWFkPiA8dGJvZHk+XCI7XG4gICAgcmVmMiA9IHRoaXMuc2VsZWN0ZWRUcmlwcztcbiAgICBmb3IgKGluZGV4ID0gaSA9IDAsIGxlbiA9IHJlZjIubGVuZ3RoOyBpIDwgbGVuOyBpbmRleCA9ICsraSkge1xuICAgICAgdHJpcCA9IHJlZjJbaW5kZXhdO1xuICAgICAgdHJpcElkID0gdHJpcC5nZXQoJ3RyaXBJZCcpO1xuICAgICAgaWYgKCF0aGlzLmZlZWRiYWNrLmdldChcInNob3dMZXNzb25QbGFuXCIpKSB7XG4gICAgICAgIGxlc3NvblBsYW5CdXR0b25zSHRtbCA9IFwiPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBzaG93LWxlc3Nvbi1wbGFuJyBkYXRhLXRyaXAtaWQ9J1wiICsgdHJpcElkICsgXCInPlNob3cgbGVzc29uIHBsYW48L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBoaWRlLWxlc3Nvbi1wbGFuJyBkYXRhLXRyaXAtaWQ9J1wiICsgdHJpcElkICsgXCInIHN0eWxlPSdkaXNwbGF5Om5vbmU7Jz5IaWRlIGxlc3NvbiBwbGFuPC9idXR0b24+XCI7XG4gICAgICB9XG4gICAgICBzdWJqZWN0ID0gdGhpcy52YWx1ZVRvSHVtYW5bdHJpcC5nZXQoXCJzdWJqZWN0XCIpXSB8fCAnJztcbiAgICAgIHJlc3VsdEJ1dHRvbkh0bWwgPSBcIjxidXR0b24gY2xhc3M9J2NvbW1hbmQgc2hvdy1zdXJ2ZXktZGF0YScgZGF0YS10cmlwLWlkPSdcIiArIHRyaXBJZCArIFwiJz5TaG93IHN1cnZleSBkYXRhPC9idXR0b24+IDxidXR0b24gY2xhc3M9J2NvbW1hbmQgaGlkZS1zdXJ2ZXktZGF0YScgZGF0YS10cmlwLWlkPSdcIiArIHRyaXBJZCArIFwiJyBzdHlsZT0nZGlzcGxheTpub25lOyc+SGlkZSBzdXJ2ZXkgZGF0YTwvYnV0dG9uPlwiO1xuICAgICAgZmVlZGJhY2tIdG1sICs9IFwiPHRyPiA8dGQgaWQ9J3N1YmplY3QtXCIgKyBpbmRleCArIFwiJz5cIiArIHN1YmplY3QgKyBcIjwvdGQ+IDx0ZD5cIiArICh0cmlwLmdldFN0cmluZyhcImNsYXNzXCIpKSArIFwiPC90ZD4gPHRkPlwiICsgKHRyaXAuZ2V0U3RyaW5nKFwic3RyZWFtXCIpKSArIFwiPC90ZD4gPHRkPlwiICsgKG1vbWVudCh0cmlwLmdldChcInN0YXJ0X3RpbWVcIikpLmZvcm1hdChcIk1NTS1ERCBISDptbVwiKSkgKyBcIjwvdGQ+IDx0ZD4gPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBzaG93LWZlZWRiYWNrJyBkYXRhLXRyaXAtaWQ9J1wiICsgdHJpcElkICsgXCInPlNob3cgZmVlZGJhY2s8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBoaWRlLWZlZWRiYWNrJyBkYXRhLXRyaXAtaWQ9J1wiICsgdHJpcElkICsgXCInIHN0eWxlPSdkaXNwbGF5Om5vbmU7Jz5IaWRlIGZlZWRiYWNrPC9idXR0b24+IDwvdGQ+IDx0ZD4gXCIgKyAobGVzc29uUGxhbkJ1dHRvbnNIdG1sIHx8ICcnKSArIFwiIDwvdGQ+IDx0ZD4gXCIgKyAocmVzdWx0QnV0dG9uSHRtbCB8fCAnJykgKyBcIiA8L3RkPiA8L3RyPiA8dHI+IDx0ZCBjb2xzcGFuPSc1JyBjbGFzcz0nXCIgKyB0cmlwSWQgKyBcIi1yZXN1bHQnPjwvdGQ+IDwvdHI+IDx0cj4gPHRkIGNvbHNwYW49JzUnIGNsYXNzPSdcIiArIHRyaXBJZCArIFwiJz48L3RkPiA8L3RyPiA8dHI+IDx0ZCBjb2xzcGFuPSc1JyBjbGFzcz0nXCIgKyB0cmlwSWQgKyBcIi1sZXNzb24nPjwvdGQ+IDwvdHI+XCI7XG4gICAgfVxuICAgIGZlZWRiYWNrSHRtbCArPSBcIjwvdGJvZHk+PC90YWJsZT5cIjtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNmZWVkYmFjay1saXN0XCIpLmh0bWwoZmVlZGJhY2tIdG1sKTtcbiAgfTtcblxuICByZXR1cm4gRmVlZGJhY2tUcmlwc1ZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG5Xb3JrZmxvd1Jlc3VsdFZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoV29ya2Zsb3dSZXN1bHRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBXb3JrZmxvd1Jlc3VsdFZpZXcoKSB7XG4gICAgcmV0dXJuIFdvcmtmbG93UmVzdWx0Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFdvcmtmbG93UmVzdWx0Vmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgIFwiY2hhbmdlIHNlbGVjdFwiOiBcInVwZGF0ZURpc3BsYXlcIlxuICB9O1xuXG4gIFdvcmtmbG93UmVzdWx0Vmlldy5wcm90b3R5cGUudXBkYXRlRGlzcGxheSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWxlY3RlZElkO1xuICAgIHRoaXMuJGVsLmZpbmQoXCIucmVzdWx0LWRpc3BsYXlcIikuaGlkZSgpO1xuICAgIHNlbGVjdGVkSWQgPSB0aGlzLiRlbC5maW5kKFwic2VsZWN0XCIpLnZhbCgpO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLnN1YnRlc3QtXCIgKyBzZWxlY3RlZElkKS5zaG93KCk7XG4gIH07XG5cbiAgV29ya2Zsb3dSZXN1bHRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHZhciBhc3Nlc3NtZW50TW9kZWxCbGFua3MsIGFzc2Vzc21lbnRTdGVwcywga2V5LCBsb2FkT25lLCBzZWxmLCB2YWx1ZTtcbiAgICBzZWxmID0gdGhpcztcbiAgICBmb3IgKGtleSBpbiBvcHRpb25zKSB7XG4gICAgICB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcbiAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICBhc3Nlc3NtZW50U3RlcHMgPSBfKHRoaXMud29ya2Zsb3cuZ2V0Q2hpbGRyZW4oKSkud2hlcmUoe1xuICAgICAgXCJ0eXBlXCI6IFwiYXNzZXNzbWVudFwiXG4gICAgfSk7XG4gICAgYXNzZXNzbWVudE1vZGVsQmxhbmtzID0gYXNzZXNzbWVudFN0ZXBzLm1hcChmdW5jdGlvbihlbCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgXCJfaWRcIjogZWwudHlwZXNJZFxuICAgICAgfTtcbiAgICB9KTtcbiAgICBsb2FkT25lID0gZnVuY3Rpb24oYXNzZXNzbWVudHMpIHtcbiAgICAgIHZhciBhc3Nlc3NtZW50LCBibGFuaztcbiAgICAgIGlmIChhc3Nlc3NtZW50TW9kZWxCbGFua3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzZWxmLnJlbmRlcigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxhbmsgPSBhc3Nlc3NtZW50TW9kZWxCbGFua3MucG9wKCk7XG4gICAgICAgIGFzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudChibGFuayk7XG4gICAgICAgIGFzc2Vzc21lbnRzLnB1c2goYXNzZXNzbWVudCk7XG4gICAgICAgIHJldHVybiBhc3Nlc3NtZW50LmZldGNoKHtcbiAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYWxlcnQoXCJMb2FkaW5nIGFzc2Vzc21lbnQgZmFpbGVkLiBQbGVhc2UgdHJ5IGFnYWluLlwiKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYXNzZXNzbWVudC5xdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2Vzc21lbnQucXVlc3Rpb25zLmZldGNoKHtcbiAgICAgICAgICAgICAga2V5OiBhc3Nlc3NtZW50LmlkLFxuICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZE9uZShhc3Nlc3NtZW50cyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmFzc2Vzc21lbnRzID0gW107XG4gICAgcmV0dXJuIGxvYWRPbmUodGhpcy5hc3Nlc3NtZW50cyk7XG4gIH07XG5cbiAgV29ya2Zsb3dSZXN1bHRWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYW5zd2VyLCBhc3Nlc3NtZW50LCBkaXNwbGF5SHRtbCwgZmlyc3QsIGhpZGRlbiwgaHRtbCwgaSwgaiwgaywgbCwgbGVuLCBsZW4xLCBsZW4yLCBsZW4zLCBsZW40LCBtLCBvcHRpb24sIG9wdGlvbnNIdG1sLCBxdWVzdGlvbiwgcmVmLCByZWYxLCByZWYyLCByZWYzLCByZWY0LCBzZWxlY3Rvckh0bWwsIHN1YnRlc3QsIHRhYmxlSHRtbCwgdHlwZSwgdmFsdWU7XG4gICAgb3B0aW9uc0h0bWwgPSBbXTtcbiAgICBkaXNwbGF5SHRtbCA9IFwiXCI7XG4gICAgZmlyc3QgPSB0cnVlO1xuICAgIHJlZiA9IHRoaXMuYXNzZXNzbWVudHM7XG4gICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBhc3Nlc3NtZW50ID0gcmVmW2ldO1xuICAgICAgcmVmMSA9IGFzc2Vzc21lbnQuc3VidGVzdHMubW9kZWxzO1xuICAgICAgZm9yIChqID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG4gICAgICAgIHN1YnRlc3QgPSByZWYxW2pdO1xuICAgICAgICBpZiAoc3VidGVzdC5nZXQoXCJwcm90b3R5cGVcIikgPT09IFwic3VydmV5XCIpIHtcbiAgICAgICAgICBoaWRkZW4gPSAhZmlyc3QgPyBcInN0eWxlPSdkaXNwbGF5Om5vbmU7J1wiIDogXCJcIjtcbiAgICAgICAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRpc3BsYXlIdG1sICs9IFwiPHNlY3Rpb24gXCIgKyBoaWRkZW4gKyBcIiBjbGFzcz0nc3VidGVzdC1cIiArIHN1YnRlc3QuaWQgKyBcIiByZXN1bHQtZGlzcGxheSc+XCI7XG4gICAgICAgICAgb3B0aW9uc0h0bWwgKz0gXCI8b3B0aW9uIHZhbHVlPSdcIiArIHN1YnRlc3QuaWQgKyBcIic+XCIgKyAoc3VidGVzdC5nZXQoJ25hbWUnKSkgKyBcIjwvb3B0aW9uPlwiO1xuICAgICAgICAgIHJlZjIgPSBhc3Nlc3NtZW50LnF1ZXN0aW9ucy5tb2RlbHM7XG4gICAgICAgICAgZm9yIChrID0gMCwgbGVuMiA9IHJlZjIubGVuZ3RoOyBrIDwgbGVuMjsgaysrKSB7XG4gICAgICAgICAgICBxdWVzdGlvbiA9IHJlZjJba107XG4gICAgICAgICAgICBpZiAocXVlc3Rpb24uZ2V0KFwic3VidGVzdElkXCIpICE9PSBzdWJ0ZXN0LmlkKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFibGVIdG1sID0gXCJcIjtcbiAgICAgICAgICAgIHR5cGUgPSBxdWVzdGlvbi5nZXQoJ3R5cGUnKTtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcInNpbmdsZVwiKSB7XG4gICAgICAgICAgICAgIHJlZjMgPSBxdWVzdGlvbi5nZXQoXCJvcHRpb25zXCIpO1xuICAgICAgICAgICAgICBmb3IgKGwgPSAwLCBsZW4zID0gcmVmMy5sZW5ndGg7IGwgPCBsZW4zOyBsKyspIHtcbiAgICAgICAgICAgICAgICBvcHRpb24gPSByZWYzW2xdO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy50cmlwLmdldChxdWVzdGlvbi5nZXQoJ25hbWUnKSkpIHtcbiAgICAgICAgICAgICAgICAgIGFuc3dlciA9IFwiPHNwYW4gY29sb3I9J2dyZXknPm5vIGRhdGE8L3NwYW4+XCI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGFuc3dlciA9IHRoaXMudHJpcC5nZXQocXVlc3Rpb24uZ2V0KCduYW1lJykpID09PSBvcHRpb24udmFsdWUgPyBcIjxzcGFuIHN0eWxlPSdjb2xvcjpncmVlbic+Y2hlY2tlZDwvc3Bhbj5cIiA6IFwiPHNwYW4gc3R5bGU9J2NvbG9yOnJlZCc+dW5jaGVja2VkPC9zcGFuPlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YWJsZUh0bWwgKz0gXCI8dHI+IDx0aD5cIiArIG9wdGlvbi5sYWJlbCArIFwiPC90aD4gPHRkPlwiICsgYW5zd2VyICsgXCI8L3RkPiA8L3RyPlwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwibXVsdGlwbGVcIikge1xuICAgICAgICAgICAgICByZWY0ID0gcXVlc3Rpb24uZ2V0KFwib3B0aW9uc1wiKTtcbiAgICAgICAgICAgICAgZm9yIChtID0gMCwgbGVuNCA9IHJlZjQubGVuZ3RoOyBtIDwgbGVuNDsgbSsrKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uID0gcmVmNFttXTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMudHJpcC5nZXQoKHF1ZXN0aW9uLmdldCgnbmFtZScpKSArIFwiX1wiICsgb3B0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICBhbnN3ZXIgPSBcIjxzcGFuIGNvbG9yPSdncmV5Jz5ubyBkYXRhPC9zcGFuPlwiO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBhbnN3ZXIgPSB0aGlzLnRyaXAuZ2V0KChxdWVzdGlvbi5nZXQoJ25hbWUnKSkgKyBcIl9cIiArIG9wdGlvbi52YWx1ZSkgPT09IDEgPyBcIjxzcGFuIHN0eWxlPSdjb2xvcjpncmVlbic+Y2hlY2tlZDwvc3Bhbj5cIiA6IFwiPHNwYW4gc3R5bGU9J2NvbG9yOnJlZCc+dW5jaGVja2VkPC9zcGFuPlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YWJsZUh0bWwgKz0gXCI8dHI+IDx0aD5cIiArIG9wdGlvbi5sYWJlbCArIFwiPC90aD4gPHRkPlwiICsgYW5zd2VyICsgXCI8L3RkPiA8L3RyPlwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0YWJsZUh0bWwgKz0gXCI8dHI+IDx0ZCBjb2xzcGFuPScyJz5cIiArICh0aGlzLnRyaXAuZ2V0KHF1ZXN0aW9uLmdldCgnbmFtZScpKSkgKyBcIjwvdGQ+IDwvdHI+XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXNwbGF5SHRtbCArPSBcIjxoMz5cIiArIChxdWVzdGlvbi5nZXQoJ3Byb21wdCcpKSArIFwiPC9oMz4gPHRhYmxlPlwiICsgdGFibGVIdG1sICsgXCI8L3RhYmxlPlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkaXNwbGF5SHRtbCArPSBcIjwvc2VjdGlvbj5cIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzZWxlY3Rvckh0bWwgPSBcIjxzZWxlY3Q+XCIgKyBvcHRpb25zSHRtbCArIFwiPC9zZWxlY3Q+XCI7XG4gICAgaHRtbCA9IFwiPGgyPlNlY3Rpb248L2gyPiBcIiArIHNlbGVjdG9ySHRtbCArIFwiIFwiICsgZGlzcGxheUh0bWw7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwoaHRtbCk7XG4gIH07XG5cbiAgcmV0dXJuIFdvcmtmbG93UmVzdWx0VmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIFRyaXBSZXN1bHQgZXh0ZW5kcyBCYWNrYm9uZS5Nb2RlbFxuXG4gIGluaXRpYWxpemU6IC0+XG5cbiAgZmV0Y2g6IC0+XG4gICAgIyBkbyBub3RoaW5nLCBqdXN0IGluIGNhc2VcblxuICBzYXZlOiAtPlxuICAgICMgZG8gbm90aGluZywganVzdCBpbiBjYXNlXG5cbiAgZ2V0VmFyaWFibGU6ICgga2V5ICkgLT5cbiAgICByZXN1bHQgPSBfKEBnZXQoXCJkYXRhXCIpKS53aGVyZShcImtleVwiOmtleSlcbiAgICByZXR1cm4gcmVzdWx0WzBdLnZhbHVlIGlmIHJlc3VsdC5sZW5ndGggPiAwXG4gICAgcmV0dXJuIFwibm90IGZvdW5kXCJcblxuICBhZGQ6IChyZXN1bHRzKSAtPlxuICAgIHJlc3VsdHMgPSBbcmVzdWx0c10gdW5sZXNzIF8ocmVzdWx0cykuaXNBcnJheSgpXG4gICAgQG1vZGVscyA9IEBtb2RlbHMuY29uY2F0IHJlc3VsdHNcbiIsInZhciBUcmlwUmVzdWx0LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuVHJpcFJlc3VsdCA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChUcmlwUmVzdWx0LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBUcmlwUmVzdWx0KCkge1xuICAgIHJldHVybiBUcmlwUmVzdWx0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgVHJpcFJlc3VsdC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge307XG5cbiAgVHJpcFJlc3VsdC5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbigpIHt9O1xuXG4gIFRyaXBSZXN1bHQucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbigpIHt9O1xuXG4gIFRyaXBSZXN1bHQucHJvdG90eXBlLmdldFZhcmlhYmxlID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICByZXN1bHQgPSBfKHRoaXMuZ2V0KFwiZGF0YVwiKSkud2hlcmUoe1xuICAgICAgXCJrZXlcIjoga2V5XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gcmVzdWx0WzBdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gXCJub3QgZm91bmRcIjtcbiAgfTtcblxuICBUcmlwUmVzdWx0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihyZXN1bHRzKSB7XG4gICAgaWYgKCFfKHJlc3VsdHMpLmlzQXJyYXkoKSkge1xuICAgICAgcmVzdWx0cyA9IFtyZXN1bHRzXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubW9kZWxzID0gdGhpcy5tb2RlbHMuY29uY2F0KHJlc3VsdHMpO1xuICB9O1xuXG4gIHJldHVybiBUcmlwUmVzdWx0O1xuXG59KShCYWNrYm9uZS5Nb2RlbCk7XG5cbiIsIiMgRXZlbnR1YWxseSB3ZSdsbCBtYWtlIEJhY2tib25lLlVzZXIgYmFzZWQgb24gdGhpcy5cblxuIyAkLmNvdWNoLnNlc3Npb24gbmVlZHMgdG8gYmUgYXN5bmM6IGZhbHNlXG5jbGFzcyBVc2VyIGV4dGVuZHMgQmFja2JvbmUuTW9kZWxcblxuICB1cmw6ICd1c2VyJ1xuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBteVJvbGVzICA9IFtdXG4gICAgQG15TmFtZSA9IG51bGxcbiAgICBAbXlQYXNzID0gbnVsbFxuXG4gICMjI1xuICAgIEFjY2Vzc29yc1xuICAjIyNcbiAgbmFtZTogIC0+IEBteU5hbWUgIHx8IG51bGxcbiAgbXlQYXNzOiAgLT4gQG15UGFzcyAgfHwgbnVsbFxuICByb2xlczogLT4gQG15Um9sZXMgfHwgbnVsbFxuICByZWNlbnRVc2VyczogLT4gKCQuY29va2llKFwicmVjZW50VXNlcnNcIil8fCcnKS5zcGxpdChcIixcIilcblxuXG4gIHNpZ251cDogKCBuYW1lLCBwYXNzICkgPT5cbiAgICBUYW5nZXJpbmUubG9nLmFwcCBcIlVzZXItc2lnbnVwXCIsIG5hbWVcbiAgICBSb2JiZXJ0LnNpZ251cFxuICAgICAgbmFtZSA6IG5hbWVcbiAgICAgIHBhc3MgOiBwYXNzXG4gICAgICBzdWNjZXNzOiA9PlxuICAgICAgICBpZiBAaW50ZW50ID09IFwibG9naW5cIlxuICAgICAgICAgIEBpbnRlbnQgPSBcInJldHJ5X2xvZ2luXCJcbiAgICAgICAgICBAbG9naW4gbmFtZSwgcGFzc1xuICAgICAgZXJyb3I6IChlcnIpID0+XG4gICAgICAgIEBpbnRlbnQgPSBudWxsXG4gICAgICAgIGFsZXJ0KFwiU2lnbnVwIGVycm9yXFxuXCIrZXJyLnRvU3RyaW5nKCkpXG5cbiAgZ3JvdXBzOiAtPlxuICAgIEBnZXRBcnJheSgncm9sZXMnKS5yZWR1Y2UgKHJlc3VsdCwgcm9sZSkgLT5cbiAgICAgIGlmIHJvbGUuaW5kZXhPZignYWRtaW4tJykgIT0gLTEgIyBpc0FkbWluXG4gICAgICAgIHJlc3VsdC5hZG1pbi5wdXNoIHJvbGUuc3Vic3RyKDYsIHJvbGUubGVuZ3RoKSAjIHJlbW92ZSBhZG1pbi1cbiAgICAgIGVsc2UgaWYgcm9sZS5pbmRleE9mKCdtZW1iZXItJykgIT0gLTEgIyBpc01lbWJlclxuICAgICAgICByZXN1bHQubWVtYmVyLnB1c2ggcm9sZS5zdWJzdHIoNywgcm9sZS5sZW5ndGgpICAjIHJlbW92ZSBtZW1iZXItXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgLCB7IGFkbWluIDogW10sIG1lbWJlciA6IFtdIH1cblxuICBsb2dpbjogKCBuYW1lLCBwYXNzLCBjYWxsYmFja3MgPSB7fSkgPT5cbiMgICAgY29uc29sZS5sb2coXCJVc2VyLmxvZ2luOiBcIiArIHBhc3MpXG4gICAgVGFuZ2VyaW5lLmxvZy5hcHAgXCJVc2VyLWxvZ2luLWF0dGVtcHRcIiwgbmFtZVxuICAgICQuY291Y2gubG9naW5cbiAgICAgIG5hbWUgICAgIDogbmFtZVxuICAgICAgcGFzc3dvcmQgOiBwYXNzXG4gICAgICBzdWNjZXNzOiAoIHVzZXIgKSA9PlxuIyAgICAgICAgY29uc29sZS5sb2coXCJhc3NpZ25pbmcgQG15UGFzczpcIiArIHBhc3MpXG4gICAgICAgIEBpbnRlbnQgPSBcIlwiXG4gICAgICAgIEBteU5hbWUgPSBuYW1lXG4gICAgICAgIEBwYXNzID0gcGFzc1xuICAgICAgICBAbXlQYXNzID0gcGFzc1xuICAgICAgICBAbXlSb2xlcyAgPSB1c2VyLnJvbGVzXG4gICAgICAgIFRhbmdlcmluZS5sb2cuYXBwIFwiVXNlci1sb2dpbi1zdWNjZXNzXCIsIG5hbWVcbiAgICAgICAgQGZldGNoXG4gICAgICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgICAgIGNhbGxiYWNrcy5zdWNjZXNzPygpXG4gICAgICAgICAgICBAdHJpZ2dlciBcImxvZ2luXCJcbiAgICAgICAgICAgIHJlY2VudFVzZXJzID0gQHJlY2VudFVzZXJzKCkuZmlsdGVyKCAoYSkgPT4gIX5hLmluZGV4T2YoQG5hbWUoKSkpXG4gICAgICAgICAgICByZWNlbnRVc2Vycy51bnNoaWZ0KEBuYW1lKCkpXG4gICAgICAgICAgICByZWNlbnRVc2Vycy5wb3AoKSBpZiByZWNlbnRVc2Vycy5sZW5ndGggPj0gQFJFQ0VOVF9VU0VSX01BWFxuICAgICAgICAgICAgJC5jb29raWUoXCJyZWNlbnRVc2Vyc1wiLCByZWNlbnRVc2VycylcblxuICAgICAgZXJyb3I6ICggc3RhdHVzLCBlcnJvciwgbWVzc2FnZSApID0+XG4gICAgICAgIGlmIEBpbnRlbnQgPT0gXCJyZXRyeV9sb2dpblwiXG4gICAgICAgICAgQGludGVudCA9IFwiXCJcbiAgICAgICAgICBAdHJpZ2dlciBcInBhc3MtZXJyb3JcIiwgdChcIkxvZ2luVmlldy5tZXNzYWdlLmVycm9yX3Bhc3N3b3JkX2luY29ycmVjdFwiKVxuICAgICAgICAgIFRhbmdlcmluZS5sb2cuYXBwIFwiVXNlci1sb2dpbi1mYWlsXCIsIG5hbWUgKyBcIiBwYXNzd29yZCBpbmNvcnJlY3RcIlxuICAgICAgICBlbHNlXG4gICAgICAgICAgQGludGVudCA9IFwibG9naW5cIlxuICAgICAgICAgIEBzaWdudXAgbmFtZSwgcGFzc1xuXG4gICMgYXR0ZW1wdCB0byByZXN0b3JlIGEgdXNlcidzIGxvZ2luIHN0YXRlIGZyb20gY291Y2ggc2Vzc2lvblxuICBzZXNzaW9uUmVmcmVzaDogKGNhbGxiYWNrcykgPT5cbiAgICAkLmNvdWNoLnNlc3Npb25cbiAgICAgIHN1Y2Nlc3M6IChyZXNwb25zZSkgPT5cbiAgICAgICAgaWYgcmVzcG9uc2UudXNlckN0eC5uYW1lP1xuICAgICAgICAgIEBteU5hbWUgID0gcmVzcG9uc2UudXNlckN0eC5uYW1lXG4gICAgICAgICAgQG15Um9sZXMgPSByZXNwb25zZS51c2VyQ3R4LnJvbGVzXG4gICAgICAgICAgQGZldGNoXG4gICAgICAgICAgICBzdWNjZXNzOiA9PlxuICAgICAgICAgICAgICBAdHJpZ2dlciBcImxvZ2luXCJcbiAgICAgICAgICAgICAgY2FsbGJhY2tzLnN1Y2Nlc3MuYXBwbHkoQCwgYXJndW1lbnRzKVxuICAgICAgICAgICAgICBUYW5nZXJpbmUubG9nLmFwcCBcIlVzZXItbG9naW5cIiwgXCJSZXN1bWVkIHNlc3Npb25cIlxuICAgICAgICBlbHNlXG4gICAgICAgICAgY2FsbGJhY2tzLnN1Y2Nlc3MuYXBwbHkoQCwgYXJndW1lbnRzKVxuICAgICAgZXJyb3I6IC0+XG4gICAgICAgIGFsZXJ0IFwiQ291Y2ggc2Vzc2lvbiBlcnJvci5cXG5cXG4je2FyZ3VtZW50cy5qb2luKFwiXFxuXCIpfVwiXG5cbiAgIyBAY2FsbGJhY2tzIFN1cHBvcnRzIGlzQWRtaW4sIGlzVXNlciwgaXNBdXRoZW50aWNhdGVkLCBpc1VucmVnaXN0ZXJlZFxuICB2ZXJpZnk6ICggY2FsbGJhY2tzICkgLT5cbiAgICBpZiBAbXlOYW1lID09IG51bGxcbiAgICAgIGlmIGNhbGxiYWNrcz8uaXNVbnJlZ2lzdGVyZWQ/XG4gICAgICAgIGNhbGxiYWNrcy5pc1VucmVnaXN0ZXJlZCgpXG4gICAgICBlbHNlXG4gICAgICAgIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJsb2dpblwiLCB0cnVlXG4gICAgZWxzZVxuICAgICAgY2FsbGJhY2tzPy5pc0F1dGhlbnRpY2F0ZWQ/KClcbiAgICAgIGlmIEBpc0FkbWluKClcbiAgICAgICAgY2FsbGJhY2tzPy5pc0FkbWluPygpXG4gICAgICBlbHNlXG4gICAgICAgIGNhbGxiYWNrcz8uaXNVc2VyPygpXG5cbiAgaXNBZG1pbjogLT5cbiAgICBhbVNlcnZlckFkbWluID0gQGdldEFycmF5KCdyb2xlcycpLmluZGV4T2YoJ19hZG1pbicpICE9IC0xXG4gICAgYW1Hcm91cEFkbWluID0gQGdyb3VwcygpLmFkbWluLmluZGV4T2YoVGFuZ2VyaW5lLnNldHRpbmdzLmdldCgnZ3JvdXBOYW1lJykpICE9IC0xXG4gICAgcmV0dXJuIHRydWUgaWYgYW1Hcm91cEFkbWluXG4gICAgcmV0dXJuIHRydWUgaWYgYW1TZXJ2ZXJBZG1pblxuICAgIHJldHVybiBmYWxzZVxuXG4gIGxvZ291dDogLT5cbiAgICAkLmNvdWNoLmxvZ291dFxuICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgJC5yZW1vdmVDb29raWUgXCJBdXRoU2Vzc2lvblwiXG4gICAgICAgIEBteU5hbWUgID0gbnVsbFxuICAgICAgICBAbXlQYXNzICA9IG51bGxcbiAgICAgICAgQHBhc3MgPSBudWxsXG4gICAgICAgIEBteVJvbGVzID0gW11cbiAgICAgICAgQGNsZWFyKClcbiAgICAgICAgQHRyaWdnZXIgXCJsb2dvdXRcIlxuICAgICAgICBUYW5nZXJpbmUubG9nLmFwcCBcIlVzZXItbG9nb3V0XCIsIFwibG9nb3V0XCJcbiAgICAgICAgd2luZG93LmxvY2F0aW9uID0gVGFuZ2VyaW5lLnNldHRpbmdzLnVybEluZGV4IFwidHJ1bmtcIlxuXG5cbiAgIyMjXG4gICAgU2F2ZXMgdG8gdGhlIGBfdXNlcnNgIGRhdGFiYXNlXG4gICAgdXNhZ2U6IGVpdGhlciBgQHNhdmUoXCJrZXlcIiwgXCJ2YWx1ZVwiLCBvcHRpb25zKWAgb3IgYEBzYXZlKHtcImtleVwiOlwidmFsdWVcIn0sIG9wdGlvbnMpYFxuICAgIEBvdmVycmlkZSAoQmFja2JvbmUuTW9kZWwuc2F2ZSlcbiAgIyMjXG4gIHNhdmU6IChrZXlPYmplY3QsIHZhbHVlT3B0aW9ucywgb3B0aW9ucyApIC0+XG4gICAgYXR0cnMgPSB7fVxuICAgIGlmIF8uaXNPYmplY3Qga2V5T2JqZWN0XG4gICAgICBhdHRycyA9ICQuZXh0ZW5kIGF0dHJzLCBrZXlPYmplY3RcbiAgICAgIG9wdGlvbnMgPSB2YWx1ZU9wdGlvbnNcbiAgICBlbHNlXG4gICAgICBhdHRyc1trZXlPYmplY3RdID0gdmFsdWVcbiAgICAjIGdldCB1c2VyIERCXG4gICAgJC5jb3VjaC51c2VyRGIgKGRiKSA9PlxuICAgICAgZGIuc2F2ZURvYyAkLmV4dGVuZChAYXR0cmlidXRlcywgYXR0cnMpLFxuICAgICAgICBzdWNjZXNzOiA9PlxuICAgICAgICAgIG9wdGlvbnMuc3VjY2Vzcz8uYXBwbHkoQCwgYXJndW1lbnRzKVxuXG4gICMjI1xuICAgIEZldGNoZXMgdXNlcidzIGRvYyBmcm9tIF91c2VycywgbG9hZHMgaW50byBAYXR0cmlidXRlc1xuICAjIyNcbiAgZmV0Y2g6ICggY2FsbGJhY2tzPXt9ICkgPT5cbiAgICAkLmNvdWNoLnVzZXJEYiAoZGIpID0+XG4gICAgICBkYi5vcGVuRG9jIFwib3JnLmNvdWNoZGIudXNlcjoje0BteU5hbWV9XCIsXG4gICAgICAgIHN1Y2Nlc3M6ICggdXNlckRvYyApID0+XG4gICAgICAgICAgQHNldCB1c2VyRG9jXG4gICAgICAgICAgY2FsbGJhY2tzLnN1Y2Nlc3M/KHVzZXJEb2MpXG4gICAgICAgIGVycm9yOiA9PlxuICAgICAgICAgIGNhbGxiYWNrcy5lcnJvcj8odXNlckRvYylcblxuXG5cbiAgIyMjXG5cbiAgUHJlZmVyZW5jZXNcblxuICAjIyNcblxuICBzZXRQcmVmZXJlbmNlczogKCBkb21haW4gPSBcImdlbmVyYWxcIiwga2V5ID0gJycsIHZhbHVlID0gJycgKSAtPlxuICAgIHByZWZlcmVuY2VzID0gQGdldChcInByZWZlcmVuY2VzXCIpIHx8IHt9XG4gICAgcHJlZmVyZW5jZXNbZG9tYWluXSA9IHt9IHVubGVzcyBwcmVmZXJlbmNlc1tkb21haW5dP1xuICAgIHByZWZlcmVuY2VzW2RvbWFpbl1ba2V5XSA9IHZhbHVlXG4gICAgQHNhdmUoXCJwcmVmZXJlbmNlc1wiOiBwcmVmZXJlbmNlcylcblxuICBnZXRQcmVmZXJlbmNlczogKCBkb21haW4gPSBcImdlbmVyYWxcIiwga2V5ID0gXCJcIiApIC0+XG4gICAgcHJlZnMgPSBAZ2V0KFwicHJlZmVyZW5jZXNcIilcbiAgICByZXR1cm4gcHJlZnM/W2RvbWFpbl0gfHwgbnVsbCBpZiBrZXkgaXMgXCJcIlxuICAgIHJldHVybiBwcmVmcz9bZG9tYWluXT9ba2V5XSB8fCBudWxsXG5cblxuXG4gICMjI1xuXG4gIEdyb3Vwc1xuXG4gICMjI1xuXG4gIGpvaW5Hcm91cDogKG5hbWUsIGNhbGxiYWNrcyA9IHt9KSAtPlxuICAgIFV0aWxzLndvcmtpbmcgdHJ1ZVxuICAgIFJvYmJlcnQubmV3R3JvdXBcbiAgICAgIG5hbWUgIDogbmFtZVxuICAgICAgc3VjY2VzcyA6ICggcmVzcG9uc2UgKSA9PlxuICAgICAgICBVdGlscy53b3JraW5nIGZhbHNlXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IHJlc3BvbnNlLm1lc3NhZ2VcbiAgICAgICAgQGZldGNoXG4gICAgICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgICAgIGNhbGxiYWNrcy5zdWNjZXNzPyhyZXNwb25zZSlcbiAgICAgICAgICAgIEB0cmlnZ2VyIFwiZ3JvdXBzLXVwZGF0ZVwiXG4gICAgICBlcnJvciA6IChyZXNwb25zZSkgPT5cbiAgICAgICAgVXRpbHMud29ya2luZyBmYWxzZVxuICAgICAgICBVdGlscy5taWRBbGVydCAocmVzcG9uc2UucmVzcG9uc2VKU09OfHx7fSkubWVzc2FnZSB8fCAnRXJyb3IgY3JlYXRpbmcgZ3JvdXAnXG4gICAgICAgIGNhbGxiYWNrcy5lcnJvcj8ocmVzcG9uc2UpXG5cbiAgbGVhdmVHcm91cDogKGdyb3VwLCBjYWxsYmFja3MgPSB7fSkgLT5cbiAgICBVdGlscy53b3JraW5nIHRydWVcbiAgICBSb2JiZXJ0LmxlYXZlR3JvdXBcbiAgICAgIHVzZXIgICA6IEBnZXQoXCJuYW1lXCIpXG4gICAgICBncm91cCAgOiBncm91cFxuICAgICAgc3VjY2VzcyA6IChyZXNwb25zZSkgPT5cbiAgICAgICAgQGZldGNoXG4gICAgICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgICAgIFV0aWxzLndvcmtpbmcgZmFsc2VcbiAgICAgICAgICAgIEB0cmlnZ2VyIFwiZ3JvdXBzLXVwZGF0ZVwiXG4gICAgICAgICAgICBVdGlscy5taWRBbGVydCByZXNwb25zZS5tZXNzYWdlXG4gICAgICAgICAgICBjYWxsYmFja3Muc3VjY2Vzcz8ocmVzcG9uc2UpXG5cbiAgICAgIGVycm9yIDogKHJlc3BvbnNlKSA9PlxuICAgICAgICBVdGlscy53b3JraW5nIGZhbHNlXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiRXJyb3IgbGVhdmluZyBncm91cFxcbiN7cmVzcG9uc2UucmVzcG9uc2VKU09OfVwiXG4gICAgICAgIGNhbGxiYWNrcy5lcnJvcj8ocmVzcG9uc2UpXG5cbiAgIyBwcm9iYWJseSBub3QgbmVlZGVkIGFueW1vcmVcbiAgZ2hvc3RMb2dpbjogKHVzZXIsIHBhc3MpIC0+XG4gICAgVGFuZ2VyaW5lLmxvZy5kYiBcIlVzZXJcIiwgXCJnaG9zdExvZ2luXCJcbiAgICBsb2NhdGlvbiA9IGVuY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24udG9TdHJpbmcoKSlcbiAgICBkb2N1bWVudC5sb2NhdGlvbiA9IFRhbmdlcmluZS5zZXR0aW5ncy5sb2NhdGlvbi5ncm91cC51cmwucmVwbGFjZSgvXFw6XFwvXFwvLipALywnOi8vJykrXCJfZ2hvc3QvI3t1c2VyfS8je3Bhc3N9LyN7bG9jYXRpb259XCJcbiIsInZhciBVc2VyLFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblVzZXIgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoVXNlciwgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gVXNlcigpIHtcbiAgICB0aGlzLmZldGNoID0gYmluZCh0aGlzLmZldGNoLCB0aGlzKTtcbiAgICB0aGlzLnNlc3Npb25SZWZyZXNoID0gYmluZCh0aGlzLnNlc3Npb25SZWZyZXNoLCB0aGlzKTtcbiAgICB0aGlzLmxvZ2luID0gYmluZCh0aGlzLmxvZ2luLCB0aGlzKTtcbiAgICB0aGlzLnNpZ251cCA9IGJpbmQodGhpcy5zaWdudXAsIHRoaXMpO1xuICAgIHJldHVybiBVc2VyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgVXNlci5wcm90b3R5cGUudXJsID0gJ3VzZXInO1xuXG4gIFVzZXIucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5teVJvbGVzID0gW107XG4gICAgdGhpcy5teU5hbWUgPSBudWxsO1xuICAgIHJldHVybiB0aGlzLm15UGFzcyA9IG51bGw7XG4gIH07XG5cblxuICAvKlxuICAgIEFjY2Vzc29yc1xuICAgKi9cblxuICBVc2VyLnByb3RvdHlwZS5uYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubXlOYW1lIHx8IG51bGw7XG4gIH07XG5cbiAgVXNlci5wcm90b3R5cGUubXlQYXNzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMubXlQYXNzIHx8IG51bGw7XG4gIH07XG5cbiAgVXNlci5wcm90b3R5cGUucm9sZXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5teVJvbGVzIHx8IG51bGw7XG4gIH07XG5cbiAgVXNlci5wcm90b3R5cGUucmVjZW50VXNlcnMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKCQuY29va2llKFwicmVjZW50VXNlcnNcIikgfHwgJycpLnNwbGl0KFwiLFwiKTtcbiAgfTtcblxuICBVc2VyLnByb3RvdHlwZS5zaWdudXAgPSBmdW5jdGlvbihuYW1lLCBwYXNzKSB7XG4gICAgVGFuZ2VyaW5lLmxvZy5hcHAoXCJVc2VyLXNpZ251cFwiLCBuYW1lKTtcbiAgICByZXR1cm4gUm9iYmVydC5zaWdudXAoe1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHBhc3M6IHBhc3MsXG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChfdGhpcy5pbnRlbnQgPT09IFwibG9naW5cIikge1xuICAgICAgICAgICAgX3RoaXMuaW50ZW50ID0gXCJyZXRyeV9sb2dpblwiO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxvZ2luKG5hbWUsIHBhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgX3RoaXMuaW50ZW50ID0gbnVsbDtcbiAgICAgICAgICByZXR1cm4gYWxlcnQoXCJTaWdudXAgZXJyb3JcXG5cIiArIGVyci50b1N0cmluZygpKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgVXNlci5wcm90b3R5cGUuZ3JvdXBzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXJyYXkoJ3JvbGVzJykucmVkdWNlKGZ1bmN0aW9uKHJlc3VsdCwgcm9sZSkge1xuICAgICAgaWYgKHJvbGUuaW5kZXhPZignYWRtaW4tJykgIT09IC0xKSB7XG4gICAgICAgIHJlc3VsdC5hZG1pbi5wdXNoKHJvbGUuc3Vic3RyKDYsIHJvbGUubGVuZ3RoKSk7XG4gICAgICB9IGVsc2UgaWYgKHJvbGUuaW5kZXhPZignbWVtYmVyLScpICE9PSAtMSkge1xuICAgICAgICByZXN1bHQubWVtYmVyLnB1c2gocm9sZS5zdWJzdHIoNywgcm9sZS5sZW5ndGgpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwge1xuICAgICAgYWRtaW46IFtdLFxuICAgICAgbWVtYmVyOiBbXVxuICAgIH0pO1xuICB9O1xuXG4gIFVzZXIucHJvdG90eXBlLmxvZ2luID0gZnVuY3Rpb24obmFtZSwgcGFzcywgY2FsbGJhY2tzKSB7XG4gICAgaWYgKGNhbGxiYWNrcyA9PSBudWxsKSB7XG4gICAgICBjYWxsYmFja3MgPSB7fTtcbiAgICB9XG4gICAgVGFuZ2VyaW5lLmxvZy5hcHAoXCJVc2VyLWxvZ2luLWF0dGVtcHRcIiwgbmFtZSk7XG4gICAgcmV0dXJuICQuY291Y2gubG9naW4oe1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHBhc3N3b3JkOiBwYXNzLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgX3RoaXMuaW50ZW50ID0gXCJcIjtcbiAgICAgICAgICBfdGhpcy5teU5hbWUgPSBuYW1lO1xuICAgICAgICAgIF90aGlzLnBhc3MgPSBwYXNzO1xuICAgICAgICAgIF90aGlzLm15UGFzcyA9IHBhc3M7XG4gICAgICAgICAgX3RoaXMubXlSb2xlcyA9IHVzZXIucm9sZXM7XG4gICAgICAgICAgVGFuZ2VyaW5lLmxvZy5hcHAoXCJVc2VyLWxvZ2luLXN1Y2Nlc3NcIiwgbmFtZSk7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmZldGNoKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgcmVjZW50VXNlcnM7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2tzLnN1Y2Nlc3MgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5zdWNjZXNzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlcihcImxvZ2luXCIpO1xuICAgICAgICAgICAgICByZWNlbnRVc2VycyA9IF90aGlzLnJlY2VudFVzZXJzKCkuZmlsdGVyKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIX5hLmluZGV4T2YoX3RoaXMubmFtZSgpKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJlY2VudFVzZXJzLnVuc2hpZnQoX3RoaXMubmFtZSgpKTtcbiAgICAgICAgICAgICAgaWYgKHJlY2VudFVzZXJzLmxlbmd0aCA+PSBfdGhpcy5SRUNFTlRfVVNFUl9NQVgpIHtcbiAgICAgICAgICAgICAgICByZWNlbnRVc2Vycy5wb3AoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gJC5jb29raWUoXCJyZWNlbnRVc2Vyc1wiLCByZWNlbnRVc2Vycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSxcbiAgICAgIGVycm9yOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXR1cywgZXJyb3IsIG1lc3NhZ2UpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuaW50ZW50ID09PSBcInJldHJ5X2xvZ2luXCIpIHtcbiAgICAgICAgICAgIF90aGlzLmludGVudCA9IFwiXCI7XG4gICAgICAgICAgICBfdGhpcy50cmlnZ2VyKFwicGFzcy1lcnJvclwiLCB0KFwiTG9naW5WaWV3Lm1lc3NhZ2UuZXJyb3JfcGFzc3dvcmRfaW5jb3JyZWN0XCIpKTtcbiAgICAgICAgICAgIHJldHVybiBUYW5nZXJpbmUubG9nLmFwcChcIlVzZXItbG9naW4tZmFpbFwiLCBuYW1lICsgXCIgcGFzc3dvcmQgaW5jb3JyZWN0XCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5pbnRlbnQgPSBcImxvZ2luXCI7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuc2lnbnVwKG5hbWUsIHBhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgVXNlci5wcm90b3R5cGUuc2Vzc2lvblJlZnJlc2ggPSBmdW5jdGlvbihjYWxsYmFja3MpIHtcbiAgICByZXR1cm4gJC5jb3VjaC5zZXNzaW9uKHtcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICBpZiAocmVzcG9uc2UudXNlckN0eC5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICAgIF90aGlzLm15TmFtZSA9IHJlc3BvbnNlLnVzZXJDdHgubmFtZTtcbiAgICAgICAgICAgIF90aGlzLm15Um9sZXMgPSByZXNwb25zZS51c2VyQ3R4LnJvbGVzO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZldGNoKHtcbiAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudHJpZ2dlcihcImxvZ2luXCIpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5zdWNjZXNzLmFwcGx5KF90aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBUYW5nZXJpbmUubG9nLmFwcChcIlVzZXItbG9naW5cIiwgXCJSZXN1bWVkIHNlc3Npb25cIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2tzLnN1Y2Nlc3MuYXBwbHkoX3RoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSkodGhpcyksXG4gICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhbGVydChcIkNvdWNoIHNlc3Npb24gZXJyb3IuXFxuXFxuXCIgKyAoYXJndW1lbnRzLmpvaW4oXCJcXG5cIikpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBVc2VyLnByb3RvdHlwZS52ZXJpZnkgPSBmdW5jdGlvbihjYWxsYmFja3MpIHtcbiAgICBpZiAodGhpcy5teU5hbWUgPT09IG51bGwpIHtcbiAgICAgIGlmICgoY2FsbGJhY2tzICE9IG51bGwgPyBjYWxsYmFja3MuaXNVbnJlZ2lzdGVyZWQgOiB2b2lkIDApICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrcy5pc1VucmVnaXN0ZXJlZCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJsb2dpblwiLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNhbGxiYWNrcyAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2tzLmlzQXV0aGVudGljYXRlZCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgY2FsbGJhY2tzLmlzQXV0aGVudGljYXRlZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc0FkbWluKCkpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrcyAhPSBudWxsID8gdHlwZW9mIGNhbGxiYWNrcy5pc0FkbWluID09PSBcImZ1bmN0aW9uXCIgPyBjYWxsYmFja3MuaXNBZG1pbigpIDogdm9pZCAwIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrcyAhPSBudWxsID8gdHlwZW9mIGNhbGxiYWNrcy5pc1VzZXIgPT09IFwiZnVuY3Rpb25cIiA/IGNhbGxiYWNrcy5pc1VzZXIoKSA6IHZvaWQgMCA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgVXNlci5wcm90b3R5cGUuaXNBZG1pbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhbUdyb3VwQWRtaW4sIGFtU2VydmVyQWRtaW47XG4gICAgYW1TZXJ2ZXJBZG1pbiA9IHRoaXMuZ2V0QXJyYXkoJ3JvbGVzJykuaW5kZXhPZignX2FkbWluJykgIT09IC0xO1xuICAgIGFtR3JvdXBBZG1pbiA9IHRoaXMuZ3JvdXBzKCkuYWRtaW4uaW5kZXhPZihUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0KCdncm91cE5hbWUnKSkgIT09IC0xO1xuICAgIGlmIChhbUdyb3VwQWRtaW4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoYW1TZXJ2ZXJBZG1pbikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBVc2VyLnByb3RvdHlwZS5sb2dvdXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJC5jb3VjaC5sb2dvdXQoe1xuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkLnJlbW92ZUNvb2tpZShcIkF1dGhTZXNzaW9uXCIpO1xuICAgICAgICAgIF90aGlzLm15TmFtZSA9IG51bGw7XG4gICAgICAgICAgX3RoaXMubXlQYXNzID0gbnVsbDtcbiAgICAgICAgICBfdGhpcy5wYXNzID0gbnVsbDtcbiAgICAgICAgICBfdGhpcy5teVJvbGVzID0gW107XG4gICAgICAgICAgX3RoaXMuY2xlYXIoKTtcbiAgICAgICAgICBfdGhpcy50cmlnZ2VyKFwibG9nb3V0XCIpO1xuICAgICAgICAgIFRhbmdlcmluZS5sb2cuYXBwKFwiVXNlci1sb2dvdXRcIiwgXCJsb2dvdXRcIik7XG4gICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbiA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxJbmRleChcInRydW5rXCIpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuXG4gIC8qXG4gICAgU2F2ZXMgdG8gdGhlIGBfdXNlcnNgIGRhdGFiYXNlXG4gICAgdXNhZ2U6IGVpdGhlciBgQHNhdmUoXCJrZXlcIiwgXCJ2YWx1ZVwiLCBvcHRpb25zKWAgb3IgYEBzYXZlKHtcImtleVwiOlwidmFsdWVcIn0sIG9wdGlvbnMpYFxuICAgIEBvdmVycmlkZSAoQmFja2JvbmUuTW9kZWwuc2F2ZSlcbiAgICovXG5cbiAgVXNlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uKGtleU9iamVjdCwgdmFsdWVPcHRpb25zLCBvcHRpb25zKSB7XG4gICAgdmFyIGF0dHJzO1xuICAgIGF0dHJzID0ge307XG4gICAgaWYgKF8uaXNPYmplY3Qoa2V5T2JqZWN0KSkge1xuICAgICAgYXR0cnMgPSAkLmV4dGVuZChhdHRycywga2V5T2JqZWN0KTtcbiAgICAgIG9wdGlvbnMgPSB2YWx1ZU9wdGlvbnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF0dHJzW2tleU9iamVjdF0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuICQuY291Y2gudXNlckRiKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRiKSB7XG4gICAgICAgIHJldHVybiBkYi5zYXZlRG9jKCQuZXh0ZW5kKF90aGlzLmF0dHJpYnV0ZXMsIGF0dHJzKSwge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHJlZjtcbiAgICAgICAgICAgIHJldHVybiAocmVmID0gb3B0aW9ucy5zdWNjZXNzKSAhPSBudWxsID8gcmVmLmFwcGx5KF90aGlzLCBhcmd1bWVudHMpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuXG4gIC8qXG4gICAgRmV0Y2hlcyB1c2VyJ3MgZG9jIGZyb20gX3VzZXJzLCBsb2FkcyBpbnRvIEBhdHRyaWJ1dGVzXG4gICAqL1xuXG4gIFVzZXIucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24oY2FsbGJhY2tzKSB7XG4gICAgaWYgKGNhbGxiYWNrcyA9PSBudWxsKSB7XG4gICAgICBjYWxsYmFja3MgPSB7fTtcbiAgICB9XG4gICAgcmV0dXJuICQuY291Y2gudXNlckRiKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRiKSB7XG4gICAgICAgIHJldHVybiBkYi5vcGVuRG9jKFwib3JnLmNvdWNoZGIudXNlcjpcIiArIF90aGlzLm15TmFtZSwge1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHVzZXJEb2MpIHtcbiAgICAgICAgICAgIF90aGlzLnNldCh1c2VyRG9jKTtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgY2FsbGJhY2tzLnN1Y2Nlc3MgPT09IFwiZnVuY3Rpb25cIiA/IGNhbGxiYWNrcy5zdWNjZXNzKHVzZXJEb2MpIDogdm9pZCAwO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBjYWxsYmFja3MuZXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IGNhbGxiYWNrcy5lcnJvcih1c2VyRG9jKSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gIH07XG5cblxuICAvKlxuICBcbiAgUHJlZmVyZW5jZXNcbiAgICovXG5cbiAgVXNlci5wcm90b3R5cGUuc2V0UHJlZmVyZW5jZXMgPSBmdW5jdGlvbihkb21haW4sIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgcHJlZmVyZW5jZXM7XG4gICAgaWYgKGRvbWFpbiA9PSBudWxsKSB7XG4gICAgICBkb21haW4gPSBcImdlbmVyYWxcIjtcbiAgICB9XG4gICAgaWYgKGtleSA9PSBudWxsKSB7XG4gICAgICBrZXkgPSAnJztcbiAgICB9XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIHZhbHVlID0gJyc7XG4gICAgfVxuICAgIHByZWZlcmVuY2VzID0gdGhpcy5nZXQoXCJwcmVmZXJlbmNlc1wiKSB8fCB7fTtcbiAgICBpZiAocHJlZmVyZW5jZXNbZG9tYWluXSA9PSBudWxsKSB7XG4gICAgICBwcmVmZXJlbmNlc1tkb21haW5dID0ge307XG4gICAgfVxuICAgIHByZWZlcmVuY2VzW2RvbWFpbl1ba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzLnNhdmUoe1xuICAgICAgXCJwcmVmZXJlbmNlc1wiOiBwcmVmZXJlbmNlc1xuICAgIH0pO1xuICB9O1xuXG4gIFVzZXIucHJvdG90eXBlLmdldFByZWZlcmVuY2VzID0gZnVuY3Rpb24oZG9tYWluLCBrZXkpIHtcbiAgICB2YXIgcHJlZnMsIHJlZjtcbiAgICBpZiAoZG9tYWluID09IG51bGwpIHtcbiAgICAgIGRvbWFpbiA9IFwiZ2VuZXJhbFwiO1xuICAgIH1cbiAgICBpZiAoa2V5ID09IG51bGwpIHtcbiAgICAgIGtleSA9IFwiXCI7XG4gICAgfVxuICAgIHByZWZzID0gdGhpcy5nZXQoXCJwcmVmZXJlbmNlc1wiKTtcbiAgICBpZiAoa2V5ID09PSBcIlwiKSB7XG4gICAgICByZXR1cm4gKHByZWZzICE9IG51bGwgPyBwcmVmc1tkb21haW5dIDogdm9pZCAwKSB8fCBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gKHByZWZzICE9IG51bGwgPyAocmVmID0gcHJlZnNbZG9tYWluXSkgIT0gbnVsbCA/IHJlZltrZXldIDogdm9pZCAwIDogdm9pZCAwKSB8fCBudWxsO1xuICB9O1xuXG5cbiAgLypcbiAgXG4gIEdyb3Vwc1xuICAgKi9cblxuICBVc2VyLnByb3RvdHlwZS5qb2luR3JvdXAgPSBmdW5jdGlvbihuYW1lLCBjYWxsYmFja3MpIHtcbiAgICBpZiAoY2FsbGJhY2tzID09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrcyA9IHt9O1xuICAgIH1cbiAgICBVdGlscy53b3JraW5nKHRydWUpO1xuICAgIHJldHVybiBSb2JiZXJ0Lm5ld0dyb3VwKHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICAgICAgVXRpbHMubWlkQWxlcnQocmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLmZldGNoKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrcy5zdWNjZXNzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3VjY2VzcyhyZXNwb25zZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnRyaWdnZXIoXCJncm91cHMtdXBkYXRlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyksXG4gICAgICBlcnJvcjogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIFV0aWxzLndvcmtpbmcoZmFsc2UpO1xuICAgICAgICAgIFV0aWxzLm1pZEFsZXJ0KChyZXNwb25zZS5yZXNwb25zZUpTT04gfHwge30pLm1lc3NhZ2UgfHwgJ0Vycm9yIGNyZWF0aW5nIGdyb3VwJyk7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBjYWxsYmFja3MuZXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IGNhbGxiYWNrcy5lcnJvcihyZXNwb25zZSkgOiB2b2lkIDA7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFVzZXIucHJvdG90eXBlLmxlYXZlR3JvdXAgPSBmdW5jdGlvbihncm91cCwgY2FsbGJhY2tzKSB7XG4gICAgaWYgKGNhbGxiYWNrcyA9PSBudWxsKSB7XG4gICAgICBjYWxsYmFja3MgPSB7fTtcbiAgICB9XG4gICAgVXRpbHMud29ya2luZyh0cnVlKTtcbiAgICByZXR1cm4gUm9iYmVydC5sZWF2ZUdyb3VwKHtcbiAgICAgIHVzZXI6IHRoaXMuZ2V0KFwibmFtZVwiKSxcbiAgICAgIGdyb3VwOiBncm91cCxcbiAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuZmV0Y2goe1xuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIFV0aWxzLndvcmtpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICBfdGhpcy50cmlnZ2VyKFwiZ3JvdXBzLXVwZGF0ZVwiKTtcbiAgICAgICAgICAgICAgVXRpbHMubWlkQWxlcnQocmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgY2FsbGJhY2tzLnN1Y2Nlc3MgPT09IFwiZnVuY3Rpb25cIiA/IGNhbGxiYWNrcy5zdWNjZXNzKHJlc3BvbnNlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICBVdGlscy53b3JraW5nKGZhbHNlKTtcbiAgICAgICAgICBVdGlscy5taWRBbGVydChcIkVycm9yIGxlYXZpbmcgZ3JvdXBcXG5cIiArIHJlc3BvbnNlLnJlc3BvbnNlSlNPTik7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBjYWxsYmFja3MuZXJyb3IgPT09IFwiZnVuY3Rpb25cIiA/IGNhbGxiYWNrcy5lcnJvcihyZXNwb25zZSkgOiB2b2lkIDA7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIFVzZXIucHJvdG90eXBlLmdob3N0TG9naW4gPSBmdW5jdGlvbih1c2VyLCBwYXNzKSB7XG4gICAgdmFyIGxvY2F0aW9uO1xuICAgIFRhbmdlcmluZS5sb2cuZGIoXCJVc2VyXCIsIFwiZ2hvc3RMb2dpblwiKTtcbiAgICBsb2NhdGlvbiA9IGVuY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24udG9TdHJpbmcoKSk7XG4gICAgcmV0dXJuIGRvY3VtZW50LmxvY2F0aW9uID0gVGFuZ2VyaW5lLnNldHRpbmdzLmxvY2F0aW9uLmdyb3VwLnVybC5yZXBsYWNlKC9cXDpcXC9cXC8uKkAvLCAnOi8vJykgKyAoXCJfZ2hvc3QvXCIgKyB1c2VyICsgXCIvXCIgKyBwYXNzICsgXCIvXCIgKyBsb2NhdGlvbik7XG4gIH07XG5cbiAgcmV0dXJuIFVzZXI7XG5cbn0pKEJhY2tib25lLk1vZGVsKTtcblxuIiwiY2xhc3MgVXNlcnMgZXh0ZW5kcyBCYWNrYm9uZS5Db2xsZWN0aW9uXG4gIHVybCAgIDogXCJ1c2VyXCJcbiAgbW9kZWwgOiBVc2VyIiwidmFyIFVzZXJzLFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuVXNlcnMgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoVXNlcnMsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFVzZXJzKCkge1xuICAgIHJldHVybiBVc2Vycy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFVzZXJzLnByb3RvdHlwZS51cmwgPSBcInVzZXJcIjtcblxuICBVc2Vycy5wcm90b3R5cGUubW9kZWwgPSBVc2VyO1xuXG4gIHJldHVybiBVc2VycztcblxufSkoQmFja2JvbmUuQ29sbGVjdGlvbik7XG5cbiIsImNsYXNzIExvZ2luVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6ICdMb2dpblZpZXcnXG5cbiAgZXZlbnRzOlxuICAgIGlmIE1vZGVybml6ci50b3VjaFxuICAgICAgJ2tleXByZXNzIGlucHV0JyAgICAgOiAna2V5SGFuZGxlcidcbiAgICAgICdjaGFuZ2UgaW5wdXQnICAgICAgIDogJ29uSW5wdXRDaGFuZ2UnXG4gICAgICAnY2hhbmdlIHNlbGVjdCNuYW1lJyA6ICdvblNlbGVjdENoYW5nZSdcbiAgICAgICdjbGljayAubW9kZScgICA6ICd1cGRhdGVNb2RlJ1xuICAgICAgJ2NsaWNrIGJ1dHRvbicgIDogJ2FjdGlvbidcbiAgICAgICdjbGljayAucmVjZW50JyA6ICdzaG93UmVjZW50J1xuICAgICAgJ2JsdXIgLnJlY2VudCcgICAgICAgOiAnYmx1clJlY2VudCdcbiAgICAgICdrZXl1cCAjbmV3X25hbWUnICAgIDogJ2NoZWNrTmV3TmFtZSdcbiAgICBlbHNlXG4gICAgICAna2V5cHJlc3MgaW5wdXQnICAgICA6ICdrZXlIYW5kbGVyJ1xuICAgICAgJ2NoYW5nZSBpbnB1dCcgICAgICAgOiAnb25JbnB1dENoYW5nZSdcbiAgICAgICdjaGFuZ2Ugc2VsZWN0I25hbWUnIDogJ29uU2VsZWN0Q2hhbmdlJ1xuICAgICAgJ2NsaWNrIC5tb2RlJyAgICAgICAgOiAndXBkYXRlTW9kZSdcbiAgICAgICdjbGljayBidXR0b24nICAgICAgIDogJ2FjdGlvbidcbiAgICAgICdjbGljayAucmVjZW50JyAgICAgIDogJ3Nob3dSZWNlbnQnXG4gICAgICAnYmx1ciAucmVjZW50JyAgICAgICA6ICdibHVyUmVjZW50J1xuICAgICAgJ2tleXVwICNuZXdfbmFtZScgICAgOiAnY2hlY2tOZXdOYW1lJ1xuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgICQod2luZG93KS5vbignb3JpZW50YXRpb25jaGFuZ2Ugc2Nyb2xsIHJlc2l6ZScsIEByZWNlbnRlcilcbiAgICBAbW9kZSA9IFwibG9naW5cIlxuICAgIEBpMThuKClcbiAgICBAdXNlcnMgPSBvcHRpb25zLnVzZXJzXG4gICAgQHVzZXIgPSBUYW5nZXJpbmUudXNlclxuICAgIEB1c2VyLm9uIFwibG9naW5cIiwgQGdvT25cbiAgICBAdXNlci5vbiBcInBhc3MtZXJyb3JcIiwgKGVycm9yKSA9PiBAcGFzc0Vycm9yIGVycm9yXG4gICAgQHVzZXIub24gXCJuYW1lLWVycm9yXCIsIChlcnJvcikgPT4gQG5hbWVFcnJvciBlcnJvclxuICAgIEBvbGRCYWNrZ3JvdW5kID0gJChcImJvZHlcIikuY3NzKFwiYmFja2dyb3VuZFwiKVxuICAgICQoXCJib2R5XCIpLmNzcyhcImJhY2tncm91bmRcIiwgXCJ3aGl0ZVwiKVxuICAgICQoXCIjZm9vdGVyXCIpLmhpZGUoKVxuXG4gIGNoZWNrTmV3TmFtZTogKGV2ZW50KSAtPlxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICBuYW1lID0gKCAkdGFyZ2V0LnZhbCgpLnRvTG93ZXJDYXNlKCkgfHwgJycgKVxuICAgIGlmIG5hbWUubGVuZ3RoID4gNCBhbmQgbmFtZSBpbiBAdXNlcnMucGx1Y2soXCJuYW1lXCIpXG4gICAgICBAbmFtZUVycm9yKEB0ZXh0WydlcnJvcl9uYW1lX3Rha2VuJ10pXG4gICAgZWxzZVxuICAgICAgQGNsZWFyRXJyb3JzKClcblxuXG4gIG9uSW5wdXRDaGFuZ2U6IChldmVudCkgLT5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG4gICAgdHlwZSA9ICR0YXJnZXQuYXR0cihcInR5cGVcIilcbiAgICByZXR1cm4gdW5sZXNzIHR5cGUgaXMgJ3RleHQnIG9yIG5vdCB0eXBlP1xuXG4gIHNob3dSZWNlbnQ6IC0+XG4gICAgQCRlbC5maW5kKFwiI25hbWVcIikuYXV0b2NvbXBsZXRlKFxuICAgICAgc291cmNlOiBAdXNlci5yZWNlbnRVc2VycygpXG4gICAgICBtaW5MZW5ndGg6IDBcbiAgICApLmF1dG9jb21wbGV0ZShcInNlYXJjaFwiLCBcIlwiKVxuXG4gIGJsdXJSZWNlbnQ6IC0+XG4gICAgQCRlbC5maW5kKFwiI25hbWVcIikuYXV0b2NvbXBsZXRlKFwiY2xvc2VcIilcbiAgICBAaW5pdEF1dG9jb21wbGV0ZSgpXG5cbiAgcmVjZW50ZXI6ID0+XG4gICAgQCRlbC5taWRkbGVDZW50ZXIoKVxuXG4gIGkxOG46IC0+XG4gICAgQHRleHQgPVxuICAgICAgXCJsb2dpblwiICAgICAgOiB0KCdMb2dpblZpZXcuYnV0dG9uLmxvZ2luJylcbiAgICAgIFwic2lnbl91cFwiICAgIDogdCgnTG9naW5WaWV3LmJ1dHRvbi5zaWduX3VwJylcblxuICAgICAgXCJsb2dpbl90YWJcIiAgOiB0KCdMb2dpblZpZXcubGFiZWwubG9naW4nKVxuICAgICAgXCJzaWduX3VwX3RhYlwiICA6IHQoJ0xvZ2luVmlldy5sYWJlbC5zaWduX3VwJylcblxuICAgICAgXCJ1c2VyXCIgICAgICAgOiBfKHQoJ0xvZ2luVmlldy5sYWJlbC51c2VyJykpLmVzY2FwZSgpXG4gICAgICBcInRlYWNoZXJcIiAgICA6IF8odCgnTG9naW5WaWV3LmxhYmVsLnRlYWNoZXInKSkuZXNjYXBlKClcbiAgICAgIFwiZW51bWVyYXRvclwiIDogXyh0KCdMb2dpblZpZXcubGFiZWwuZW51bWVyYXRvcicpKS5lc2NhcGUoKVxuICAgICAgXCJwYXNzd29yZFwiICAgOiB0KCdMb2dpblZpZXcubGFiZWwucGFzc3dvcmQnKVxuICAgICAgXCJwYXNzd29yZF9jb25maXJtXCIgOiB0KCdMb2dpblZpZXcubGFiZWwucGFzc3dvcmRfY29uZmlybScpXG4gICAgICBcImVycm9yX25hbWVcIiA6IHQoJ0xvZ2luVmlldy5tZXNzYWdlLmVycm9yX25hbWVfZW1wdHknKVxuICAgICAgXCJlcnJvcl9wYXNzXCIgOiB0KCdMb2dpblZpZXcubWVzc2FnZS5lcnJvcl9wYXNzd29yZF9lbXB0eScpXG4gICAgICBcImVycm9yX25hbWVfdGFrZW5cIiA6IHQoJ0xvZ2luVmlldy5tZXNzYWdlLmVycm9yX25hbWVfdGFrZW4nKVxuXG5cbiAgb25TZWxlY3RDaGFuZ2U6IChldmVudCkgLT5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG4gICAgaWYgJHRhcmdldC52YWwoKSA9PSBcIipuZXdcIlxuICAgICAgQHVwZGF0ZU1vZGUgXCJzaWdudXBcIlxuICAgIGVsc2VcbiAgICAgIEAkZWwuZmluZChcIiNwYXNzXCIpLmZvY3VzKClcblxuICBnb09uOiAtPiBUYW5nZXJpbmUucm91dGVyLmxhbmRpbmcoKVxuXG4gIHVwZGF0ZU1vZGU6IChldmVudCkgLT5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG4gICAgQG1vZGUgPSAkdGFyZ2V0LmF0dHIoJ2RhdGEtbW9kZScpXG4gICAgJHRhcmdldC5wYXJlbnQoKS5maW5kKFwiLnNlbGVjdGVkXCIpLnJlbW92ZUNsYXNzKFwic2VsZWN0ZWRcIilcbiAgICAkdGFyZ2V0LmFkZENsYXNzKFwic2VsZWN0ZWRcIilcbiAgICAkbG9naW4gID0gQCRlbC5maW5kKFwiLmxvZ2luXCIpXG4gICAgJHNpZ251cCA9IEAkZWwuZmluZChcIi5zaWdudXBcIilcblxuICAgIHN3aXRjaCBAbW9kZVxuICAgICAgd2hlbiBcImxvZ2luXCJcbiAgICAgICAgJGxvZ2luLnNob3coKVxuICAgICAgICAkc2lnbnVwLmhpZGUoKVxuICAgICAgd2hlbiBcInNpZ251cFwiXG4gICAgICAgICRsb2dpbi5oaWRlKClcbiAgICAgICAgJHNpZ251cC5zaG93KClcblxuICAgIEAkZWwuZmluZChcImlucHV0XCIpWzBdLmZvY3VzKClcblxuICByZW5kZXI6ID0+XG5cbiAgICBuYW1lTmFtZSA9ICBAdGV4dC51c2VyXG5cbiAgICBuYW1lTmFtZSA9IG5hbWVOYW1lLnRpdGxlaXplKClcblxuICAgIGh0bWwgPSBcIlxuICAgICAgPGltZyBzcmM9J2ltYWdlcy90YW5nZXJpbmVfbG9nb19zbWFsbC5wbmcnIGlkPSdsb2dpbl9sb2dvJz5cbiAgICAgIDxkaXYgaWQ9J25hbWVfbWVzc2FnZScgY2xhc3M9J21lc3NhZ2VzJz48L2Rpdj5cbiAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyBpZD0nbmFtZScgcGxhY2Vob2xkZXI9JyN7bmFtZU5hbWV9Jz5cbiAgICAgIDxkaXYgaWQ9J3Bhc3NfbWVzc2FnZScgY2xhc3M9J21lc3NhZ2VzJz48L2Rpdj5cbiAgICAgIDxpbnB1dCBpZD0ncGFzcycgdHlwZT0ncGFzc3dvcmQnIHBsYWNlaG9sZGVyPScje0B0ZXh0LnBhc3N3b3JkfSc+XG4gICAgICA8YnV0dG9uIGNsYXNzPSdsb2dpbic+I3tAdGV4dC5sb2dpbn08L2J1dHRvbj5cbiAgICBcIlxuXG4gICAgQCRlbC5odG1sIGh0bWxcblxuXG4gICAgQG5hbWVNc2cgPSBAJGVsLmZpbmQoXCIubmFtZV9tZXNzYWdlXCIpXG4gICAgQHBhc3NNc2cgPSBAJGVsLmZpbmQoXCIucGFzc19tZXNzYWdlXCIpXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICBhZnRlclJlbmRlcjogPT5cbiAgICBAcmVjZW50ZXIoKVxuXG4gIG9uQ2xvc2U6ID0+XG4gICAgJChcIiNmb290ZXJcIikuc2hvdygpXG4gICAgJChcImJvZHlcIikuY3NzKFwiYmFja2dyb3VuZFwiLCBAb2xkQmFja2dyb3VuZClcblxuICBrZXlIYW5kbGVyOiAoZXZlbnQpIC0+XG5cbiAgICBrZXkgPVxuICAgICAgRU5URVIgICAgIDogMTNcbiAgICAgIFRBQiAgICAgICA6IDlcbiAgICAgIEJBQ0tTUEFDRSA6IDhcblxuICAgICQoJy5tZXNzYWdlcycpLmh0bWwoJycpXG4gICAgY2hhciA9IGV2ZW50LndoaWNoXG4gICAgaWYgY2hhcj9cbiAgICAgIGlzU3BlY2lhbCA9XG4gICAgICAgIGNoYXIgaXMga2V5LkVOVEVSICAgICAgICAgICAgICBvclxuICAgICAgICBldmVudC5rZXlDb2RlIGlzIGtleS5UQUIgICAgICAgb3JcbiAgICAgICAgZXZlbnQua2V5Q29kZSBpcyBrZXkuQkFDS1NQQUNFXG4gICAgICByZXR1cm4gQGFjdGlvbigpIGlmIGNoYXIgaXMga2V5LkVOVEVSXG4gICAgZWxzZVxuICAgICAgcmV0dXJuIHRydWVcblxuICBhY3Rpb246IC0+XG4gICAgQGxvZ2luKCkgIGlmIEBtb2RlIGlzIFwibG9naW5cIlxuICAgIEBzaWdudXAoKSBpZiBAbW9kZSBpcyBcInNpZ251cFwiXG4gICAgcmV0dXJuIGZhbHNlXG5cbiAgc2lnbnVwOiAtPlxuICAgIG5hbWUgID0gKCRuYW1lICA9IEAkZWwuZmluZChcIiNuZXdfbmFtZVwiKSkudmFsKCkudG9Mb3dlckNhc2UoKVxuICAgIHBhc3MxID0gKCRwYXNzMSA9IEAkZWwuZmluZChcIiNuZXdfcGFzc18xXCIpKS52YWwoKVxuICAgIHBhc3MyID0gKCRwYXNzMiA9IEAkZWwuZmluZChcIiNuZXdfcGFzc18yXCIpKS52YWwoKVxuXG4gICAgQHBhc3NFcnJvcihAdGV4dC5wYXNzX21pc21hdGNoKSBpZiBwYXNzMSBpc250IHBhc3MyXG5cbiAgICB0cnlcbiAgICAgIEB1c2VyLnNpZ251cCBuYW1lLCBwYXNzMVxuICAgIGNhdGNoIGVcbiAgICAgIGNvbnNvbGUubG9nIGVcbiAgICAgIEBuYW1lRXJyb3IoZSlcblxuICBsb2dpbjogLT5cbiAgICBuYW1lID0gKCRuYW1lID0gQCRlbC5maW5kKFwiI25hbWVcIikpLnZhbCgpXG4gICAgcGFzcyA9ICgkcGFzcyA9IEAkZWwuZmluZChcIiNwYXNzXCIpKS52YWwoKVxuXG4gICAgQGNsZWFyRXJyb3JzKClcblxuICAgIEBuYW1lRXJyb3IoQHRleHQuZXJyb3JfbmFtZSkgaWYgbmFtZSA9PSBcIlwiXG4gICAgQHBhc3NFcnJvcihAdGV4dC5lcnJvcl9wYXNzKSBpZiBwYXNzID09IFwiXCJcblxuICAgIGlmIEBlcnJvcnMgPT0gMFxuICAgICAgdHJ5XG4gICAgICAgIEB1c2VyLmxvZ2luIG5hbWUsIHBhc3NcbiAgICAgIGNhdGNoIGVcbiAgICAgICAgQG5hbWVFcnJvciBlXG5cbiAgICByZXR1cm4gZmFsc2VcblxuICBwYXNzRXJyb3I6IChlcnJvcikgLT5cbiAgICBAZXJyb3JzKytcbiAgICBAcGFzc01zZy5odG1sIGVycm9yXG4gICAgQCRlbC5maW5kKFwiI3Bhc3NcIikuZm9jdXMoKVxuXG4gIG5hbWVFcnJvcjogKGVycm9yKSAtPlxuICAgIEBlcnJvcnMrK1xuICAgIEBuYW1lTXNnLmh0bWwgZXJyb3JcbiAgICBAJGVsLmZpbmQoXCIjbmFtZVwiKS5mb2N1cygpXG5cbiAgY2xlYXJFcnJvcnM6IC0+XG4gICAgQG5hbWVNc2cuaHRtbCBcIlwiXG4gICAgQHBhc3NNc2cuaHRtbCBcIlwiXG4gICAgQGVycm9ycyA9IDBcbiIsInZhciBMb2dpblZpZXcsXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSxcbiAgaW5kZXhPZiA9IFtdLmluZGV4T2YgfHwgZnVuY3Rpb24oaXRlbSkgeyBmb3IgKHZhciBpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7IGlmIChpIGluIHRoaXMgJiYgdGhpc1tpXSA9PT0gaXRlbSkgcmV0dXJuIGk7IH0gcmV0dXJuIC0xOyB9O1xuXG5Mb2dpblZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoTG9naW5WaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBMb2dpblZpZXcoKSB7XG4gICAgdGhpcy5vbkNsb3NlID0gYmluZCh0aGlzLm9uQ2xvc2UsIHRoaXMpO1xuICAgIHRoaXMuYWZ0ZXJSZW5kZXIgPSBiaW5kKHRoaXMuYWZ0ZXJSZW5kZXIsIHRoaXMpO1xuICAgIHRoaXMucmVuZGVyID0gYmluZCh0aGlzLnJlbmRlciwgdGhpcyk7XG4gICAgdGhpcy5yZWNlbnRlciA9IGJpbmQodGhpcy5yZWNlbnRlciwgdGhpcyk7XG4gICAgcmV0dXJuIExvZ2luVmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIExvZ2luVmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gJ0xvZ2luVmlldyc7XG5cbiAgTG9naW5WaWV3LnByb3RvdHlwZS5ldmVudHMgPSBNb2Rlcm5penIudG91Y2ggPyB7XG4gICAgJ2tleXByZXNzIGlucHV0JzogJ2tleUhhbmRsZXInLFxuICAgICdjaGFuZ2UgaW5wdXQnOiAnb25JbnB1dENoYW5nZScsXG4gICAgJ2NoYW5nZSBzZWxlY3QjbmFtZSc6ICdvblNlbGVjdENoYW5nZScsXG4gICAgJ2NsaWNrIC5tb2RlJzogJ3VwZGF0ZU1vZGUnLFxuICAgICdjbGljayBidXR0b24nOiAnYWN0aW9uJyxcbiAgICAnY2xpY2sgLnJlY2VudCc6ICdzaG93UmVjZW50JyxcbiAgICAnYmx1ciAucmVjZW50JzogJ2JsdXJSZWNlbnQnLFxuICAgICdrZXl1cCAjbmV3X25hbWUnOiAnY2hlY2tOZXdOYW1lJ1xuICB9IDoge1xuICAgICdrZXlwcmVzcyBpbnB1dCc6ICdrZXlIYW5kbGVyJyxcbiAgICAnY2hhbmdlIGlucHV0JzogJ29uSW5wdXRDaGFuZ2UnLFxuICAgICdjaGFuZ2Ugc2VsZWN0I25hbWUnOiAnb25TZWxlY3RDaGFuZ2UnLFxuICAgICdjbGljayAubW9kZSc6ICd1cGRhdGVNb2RlJyxcbiAgICAnY2xpY2sgYnV0dG9uJzogJ2FjdGlvbicsXG4gICAgJ2NsaWNrIC5yZWNlbnQnOiAnc2hvd1JlY2VudCcsXG4gICAgJ2JsdXIgLnJlY2VudCc6ICdibHVyUmVjZW50JyxcbiAgICAna2V5dXAgI25ld19uYW1lJzogJ2NoZWNrTmV3TmFtZSdcbiAgfTtcblxuICBMb2dpblZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgJCh3aW5kb3cpLm9uKCdvcmllbnRhdGlvbmNoYW5nZSBzY3JvbGwgcmVzaXplJywgdGhpcy5yZWNlbnRlcik7XG4gICAgdGhpcy5tb2RlID0gXCJsb2dpblwiO1xuICAgIHRoaXMuaTE4bigpO1xuICAgIHRoaXMudXNlcnMgPSBvcHRpb25zLnVzZXJzO1xuICAgIHRoaXMudXNlciA9IFRhbmdlcmluZS51c2VyO1xuICAgIHRoaXMudXNlci5vbihcImxvZ2luXCIsIHRoaXMuZ29Pbik7XG4gICAgdGhpcy51c2VyLm9uKFwicGFzcy1lcnJvclwiLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICByZXR1cm4gX3RoaXMucGFzc0Vycm9yKGVycm9yKTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICAgIHRoaXMudXNlci5vbihcIm5hbWUtZXJyb3JcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm5hbWVFcnJvcihlcnJvcik7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICB0aGlzLm9sZEJhY2tncm91bmQgPSAkKFwiYm9keVwiKS5jc3MoXCJiYWNrZ3JvdW5kXCIpO1xuICAgICQoXCJib2R5XCIpLmNzcyhcImJhY2tncm91bmRcIiwgXCJ3aGl0ZVwiKTtcbiAgICByZXR1cm4gJChcIiNmb290ZXJcIikuaGlkZSgpO1xuICB9O1xuXG4gIExvZ2luVmlldy5wcm90b3R5cGUuY2hlY2tOZXdOYW1lID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldCwgbmFtZTtcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgIG5hbWUgPSAkdGFyZ2V0LnZhbCgpLnRvTG93ZXJDYXNlKCkgfHwgJyc7XG4gICAgaWYgKG5hbWUubGVuZ3RoID4gNCAmJiBpbmRleE9mLmNhbGwodGhpcy51c2Vycy5wbHVjayhcIm5hbWVcIiksIG5hbWUpID49IDApIHtcbiAgICAgIHJldHVybiB0aGlzLm5hbWVFcnJvcih0aGlzLnRleHRbJ2Vycm9yX25hbWVfdGFrZW4nXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmNsZWFyRXJyb3JzKCk7XG4gICAgfVxuICB9O1xuXG4gIExvZ2luVmlldy5wcm90b3R5cGUub25JbnB1dENoYW5nZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICR0YXJnZXQsIHR5cGU7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICB0eXBlID0gJHRhcmdldC5hdHRyKFwidHlwZVwiKTtcbiAgICBpZiAoISh0eXBlID09PSAndGV4dCcgfHwgKHR5cGUgPT0gbnVsbCkpKSB7XG5cbiAgICB9XG4gIH07XG5cbiAgTG9naW5WaWV3LnByb3RvdHlwZS5zaG93UmVjZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjbmFtZVwiKS5hdXRvY29tcGxldGUoe1xuICAgICAgc291cmNlOiB0aGlzLnVzZXIucmVjZW50VXNlcnMoKSxcbiAgICAgIG1pbkxlbmd0aDogMFxuICAgIH0pLmF1dG9jb21wbGV0ZShcInNlYXJjaFwiLCBcIlwiKTtcbiAgfTtcblxuICBMb2dpblZpZXcucHJvdG90eXBlLmJsdXJSZWNlbnQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRlbC5maW5kKFwiI25hbWVcIikuYXV0b2NvbXBsZXRlKFwiY2xvc2VcIik7XG4gICAgcmV0dXJuIHRoaXMuaW5pdEF1dG9jb21wbGV0ZSgpO1xuICB9O1xuXG4gIExvZ2luVmlldy5wcm90b3R5cGUucmVjZW50ZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwubWlkZGxlQ2VudGVyKCk7XG4gIH07XG5cbiAgTG9naW5WaWV3LnByb3RvdHlwZS5pMThuID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCA9IHtcbiAgICAgIFwibG9naW5cIjogdCgnTG9naW5WaWV3LmJ1dHRvbi5sb2dpbicpLFxuICAgICAgXCJzaWduX3VwXCI6IHQoJ0xvZ2luVmlldy5idXR0b24uc2lnbl91cCcpLFxuICAgICAgXCJsb2dpbl90YWJcIjogdCgnTG9naW5WaWV3LmxhYmVsLmxvZ2luJyksXG4gICAgICBcInNpZ25fdXBfdGFiXCI6IHQoJ0xvZ2luVmlldy5sYWJlbC5zaWduX3VwJyksXG4gICAgICBcInVzZXJcIjogXyh0KCdMb2dpblZpZXcubGFiZWwudXNlcicpKS5lc2NhcGUoKSxcbiAgICAgIFwidGVhY2hlclwiOiBfKHQoJ0xvZ2luVmlldy5sYWJlbC50ZWFjaGVyJykpLmVzY2FwZSgpLFxuICAgICAgXCJlbnVtZXJhdG9yXCI6IF8odCgnTG9naW5WaWV3LmxhYmVsLmVudW1lcmF0b3InKSkuZXNjYXBlKCksXG4gICAgICBcInBhc3N3b3JkXCI6IHQoJ0xvZ2luVmlldy5sYWJlbC5wYXNzd29yZCcpLFxuICAgICAgXCJwYXNzd29yZF9jb25maXJtXCI6IHQoJ0xvZ2luVmlldy5sYWJlbC5wYXNzd29yZF9jb25maXJtJyksXG4gICAgICBcImVycm9yX25hbWVcIjogdCgnTG9naW5WaWV3Lm1lc3NhZ2UuZXJyb3JfbmFtZV9lbXB0eScpLFxuICAgICAgXCJlcnJvcl9wYXNzXCI6IHQoJ0xvZ2luVmlldy5tZXNzYWdlLmVycm9yX3Bhc3N3b3JkX2VtcHR5JyksXG4gICAgICBcImVycm9yX25hbWVfdGFrZW5cIjogdCgnTG9naW5WaWV3Lm1lc3NhZ2UuZXJyb3JfbmFtZV90YWtlbicpXG4gICAgfTtcbiAgfTtcblxuICBMb2dpblZpZXcucHJvdG90eXBlLm9uU2VsZWN0Q2hhbmdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJHRhcmdldDtcbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpO1xuICAgIGlmICgkdGFyZ2V0LnZhbCgpID09PSBcIipuZXdcIikge1xuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlTW9kZShcInNpZ251cFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjcGFzc1wiKS5mb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICBMb2dpblZpZXcucHJvdG90eXBlLmdvT24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5sYW5kaW5nKCk7XG4gIH07XG5cbiAgTG9naW5WaWV3LnByb3RvdHlwZS51cGRhdGVNb2RlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgJGxvZ2luLCAkc2lnbnVwLCAkdGFyZ2V0O1xuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgdGhpcy5tb2RlID0gJHRhcmdldC5hdHRyKCdkYXRhLW1vZGUnKTtcbiAgICAkdGFyZ2V0LnBhcmVudCgpLmZpbmQoXCIuc2VsZWN0ZWRcIikucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZFwiKTtcbiAgICAkdGFyZ2V0LmFkZENsYXNzKFwic2VsZWN0ZWRcIik7XG4gICAgJGxvZ2luID0gdGhpcy4kZWwuZmluZChcIi5sb2dpblwiKTtcbiAgICAkc2lnbnVwID0gdGhpcy4kZWwuZmluZChcIi5zaWdudXBcIik7XG4gICAgc3dpdGNoICh0aGlzLm1vZGUpIHtcbiAgICAgIGNhc2UgXCJsb2dpblwiOlxuICAgICAgICAkbG9naW4uc2hvdygpO1xuICAgICAgICAkc2lnbnVwLmhpZGUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2lnbnVwXCI6XG4gICAgICAgICRsb2dpbi5oaWRlKCk7XG4gICAgICAgICRzaWdudXAuc2hvdygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcImlucHV0XCIpWzBdLmZvY3VzKCk7XG4gIH07XG5cbiAgTG9naW5WaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaHRtbCwgbmFtZU5hbWU7XG4gICAgbmFtZU5hbWUgPSB0aGlzLnRleHQudXNlcjtcbiAgICBuYW1lTmFtZSA9IG5hbWVOYW1lLnRpdGxlaXplKCk7XG4gICAgaHRtbCA9IFwiPGltZyBzcmM9J2ltYWdlcy90YW5nZXJpbmVfbG9nb19zbWFsbC5wbmcnIGlkPSdsb2dpbl9sb2dvJz4gPGRpdiBpZD0nbmFtZV9tZXNzYWdlJyBjbGFzcz0nbWVzc2FnZXMnPjwvZGl2PiA8aW5wdXQgdHlwZT0ndGV4dCcgaWQ9J25hbWUnIHBsYWNlaG9sZGVyPSdcIiArIG5hbWVOYW1lICsgXCInPiA8ZGl2IGlkPSdwYXNzX21lc3NhZ2UnIGNsYXNzPSdtZXNzYWdlcyc+PC9kaXY+IDxpbnB1dCBpZD0ncGFzcycgdHlwZT0ncGFzc3dvcmQnIHBsYWNlaG9sZGVyPSdcIiArIHRoaXMudGV4dC5wYXNzd29yZCArIFwiJz4gPGJ1dHRvbiBjbGFzcz0nbG9naW4nPlwiICsgdGhpcy50ZXh0LmxvZ2luICsgXCI8L2J1dHRvbj5cIjtcbiAgICB0aGlzLiRlbC5odG1sKGh0bWwpO1xuICAgIHRoaXMubmFtZU1zZyA9IHRoaXMuJGVsLmZpbmQoXCIubmFtZV9tZXNzYWdlXCIpO1xuICAgIHRoaXMucGFzc01zZyA9IHRoaXMuJGVsLmZpbmQoXCIucGFzc19tZXNzYWdlXCIpO1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICBMb2dpblZpZXcucHJvdG90eXBlLmFmdGVyUmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVjZW50ZXIoKTtcbiAgfTtcblxuICBMb2dpblZpZXcucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICAkKFwiI2Zvb3RlclwiKS5zaG93KCk7XG4gICAgcmV0dXJuICQoXCJib2R5XCIpLmNzcyhcImJhY2tncm91bmRcIiwgdGhpcy5vbGRCYWNrZ3JvdW5kKTtcbiAgfTtcblxuICBMb2dpblZpZXcucHJvdG90eXBlLmtleUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBjaGFyLCBpc1NwZWNpYWwsIGtleTtcbiAgICBrZXkgPSB7XG4gICAgICBFTlRFUjogMTMsXG4gICAgICBUQUI6IDksXG4gICAgICBCQUNLU1BBQ0U6IDhcbiAgICB9O1xuICAgICQoJy5tZXNzYWdlcycpLmh0bWwoJycpO1xuICAgIGNoYXIgPSBldmVudC53aGljaDtcbiAgICBpZiAoY2hhciAhPSBudWxsKSB7XG4gICAgICBpc1NwZWNpYWwgPSBjaGFyID09PSBrZXkuRU5URVIgfHwgZXZlbnQua2V5Q29kZSA9PT0ga2V5LlRBQiB8fCBldmVudC5rZXlDb2RlID09PSBrZXkuQkFDS1NQQUNFO1xuICAgICAgaWYgKGNoYXIgPT09IGtleS5FTlRFUikge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3Rpb24oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuXG4gIExvZ2luVmlldy5wcm90b3R5cGUuYWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMubW9kZSA9PT0gXCJsb2dpblwiKSB7XG4gICAgICB0aGlzLmxvZ2luKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLm1vZGUgPT09IFwic2lnbnVwXCIpIHtcbiAgICAgIHRoaXMuc2lnbnVwKCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBMb2dpblZpZXcucHJvdG90eXBlLnNpZ251cCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkbmFtZSwgJHBhc3MxLCAkcGFzczIsIGUsIG5hbWUsIHBhc3MxLCBwYXNzMjtcbiAgICBuYW1lID0gKCRuYW1lID0gdGhpcy4kZWwuZmluZChcIiNuZXdfbmFtZVwiKSkudmFsKCkudG9Mb3dlckNhc2UoKTtcbiAgICBwYXNzMSA9ICgkcGFzczEgPSB0aGlzLiRlbC5maW5kKFwiI25ld19wYXNzXzFcIikpLnZhbCgpO1xuICAgIHBhc3MyID0gKCRwYXNzMiA9IHRoaXMuJGVsLmZpbmQoXCIjbmV3X3Bhc3NfMlwiKSkudmFsKCk7XG4gICAgaWYgKHBhc3MxICE9PSBwYXNzMikge1xuICAgICAgdGhpcy5wYXNzRXJyb3IodGhpcy50ZXh0LnBhc3NfbWlzbWF0Y2gpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXMudXNlci5zaWdudXAobmFtZSwgcGFzczEpO1xuICAgIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgICAgZSA9IGVycm9yMTtcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xuICAgICAgcmV0dXJuIHRoaXMubmFtZUVycm9yKGUpO1xuICAgIH1cbiAgfTtcblxuICBMb2dpblZpZXcucHJvdG90eXBlLmxvZ2luID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyICRuYW1lLCAkcGFzcywgZSwgbmFtZSwgcGFzcztcbiAgICBuYW1lID0gKCRuYW1lID0gdGhpcy4kZWwuZmluZChcIiNuYW1lXCIpKS52YWwoKTtcbiAgICBwYXNzID0gKCRwYXNzID0gdGhpcy4kZWwuZmluZChcIiNwYXNzXCIpKS52YWwoKTtcbiAgICB0aGlzLmNsZWFyRXJyb3JzKCk7XG4gICAgaWYgKG5hbWUgPT09IFwiXCIpIHtcbiAgICAgIHRoaXMubmFtZUVycm9yKHRoaXMudGV4dC5lcnJvcl9uYW1lKTtcbiAgICB9XG4gICAgaWYgKHBhc3MgPT09IFwiXCIpIHtcbiAgICAgIHRoaXMucGFzc0Vycm9yKHRoaXMudGV4dC5lcnJvcl9wYXNzKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZXJyb3JzID09PSAwKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLnVzZXIubG9naW4obmFtZSwgcGFzcyk7XG4gICAgICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICAgICAgZSA9IGVycm9yMTtcbiAgICAgICAgdGhpcy5uYW1lRXJyb3IoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBMb2dpblZpZXcucHJvdG90eXBlLnBhc3NFcnJvciA9IGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgdGhpcy5lcnJvcnMrKztcbiAgICB0aGlzLnBhc3NNc2cuaHRtbChlcnJvcik7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjcGFzc1wiKS5mb2N1cygpO1xuICB9O1xuXG4gIExvZ2luVmlldy5wcm90b3R5cGUubmFtZUVycm9yID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICB0aGlzLmVycm9ycysrO1xuICAgIHRoaXMubmFtZU1zZy5odG1sKGVycm9yKTtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNuYW1lXCIpLmZvY3VzKCk7XG4gIH07XG5cbiAgTG9naW5WaWV3LnByb3RvdHlwZS5jbGVhckVycm9ycyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubmFtZU1zZy5odG1sKFwiXCIpO1xuICAgIHRoaXMucGFzc01zZy5odG1sKFwiXCIpO1xuICAgIHJldHVybiB0aGlzLmVycm9ycyA9IDA7XG4gIH07XG5cbiAgcmV0dXJuIExvZ2luVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIEFjY291bnRWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZTogXCJBY2NvdW50Vmlld1wiXG5cbiAgZXZlbnRzOlxuICAgICdjbGljayAubGVhdmUnICAgICAgIDogJ2xlYXZlR3JvdXAnXG4gICAgJ2NsaWNrIC5qb2luX2NhbmNlbCcgOiAnam9pblRvZ2dsZSdcbiAgICAnY2xpY2sgLmpvaW4nICAgICAgICA6ICdqb2luVG9nZ2xlJ1xuICAgICdjbGljayAuam9pbl9ncm91cCcgIDogJ2pvaW4nXG4gICAgJ2NsaWNrIC5iYWNrJyAgICAgICAgOiAnZ29CYWNrJ1xuICAgICdjbGljayAudXBkYXRlJyA6ICd1cGRhdGUnXG4gICAgJ2NsaWNrIC5yZXN0YXJ0JyA6ICdyZXN0YXJ0J1xuICAgICdjbGljayAuc2VuZF9kZWJ1ZycgOiAnc2VuZERlYnVnJ1xuXG4gICAgXCJjbGljayAuZWRpdF9pbl9wbGFjZVwiICA6IFwiZWRpdEluUGxhY2VcIlxuICAgIFwiZm9jdXNvdXQgLmVkaXRpbmdcIiA6IFwiZWRpdGluZ1wiXG4gICAgXCJrZXl1cCAgICAuZWRpdGluZ1wiIDogXCJlZGl0aW5nXCJcbiAgICBcImtleWRvd24gIC5lZGl0aW5nXCIgOiBcImVkaXRpbmdcIlxuXG4gICAgJ2NsaWNrIC5jaGFuZ2VfcGFzc3dvcmQnIDogXCJ0b2dnbGVQYXNzd29yZFwiXG4gICAgJ2NsaWNrIC5jb25maXJtX3Bhc3N3b3JkJyA6IFwic2F2ZU5ld1Bhc3N3b3JkXCJcblxuICB0b2dnbGVQYXNzd29yZDogLT5cbiAgICAkbWVudSA9IEAkZWwuZmluZChcIi5wYXNzd29yZF9tZW51XCIpXG4gICAgJG1lbnUudG9nZ2xlKClcbiAgICBpZiAkbWVudS5pcyhcIjp2aXNpYmxlXCIpXG4gICAgICBAJGVsLmZpbmQoXCIjbmV3X3Bhc3N3b3JkXCIpLmZvY3VzKCkuc2Nyb2xsVG8oKVxuXG5cbiAgc2F2ZU5ld1Bhc3N3b3JkOiAtPlxuICAgIHBhc3MgPSBAJGVsLmZpbmQoXCIubmV3X3Bhc3N3b3JkXCIpLnZhbCgpXG4gICAgVGFuZ2VyaW5lLnVzZXIuc2V0UGFzc3dvcmQocGFzcylcbiAgICBUYW5nZXJpbmUudXNlci5zYXZlIG51bGwsXG4gICAgICBzdWNjZXNzOiA9PlxuICAgICAgICBAJGVsLmZpbmQoXCIubmV3X3Bhc3N3b3JkXCIpLnZhbCgnJylcbiAgICAgICAgQHRvZ2dsZVBhc3N3b3JkKClcbiAgICAgICAgVXRpbHMubWlkQWxlcnQgXCJQYXNzd29yZCBjaGFuZ2VkXCJcblxuXG4gIHNlbmREZWJ1ZzogLT5cbiAgICBUYW5nZXJpbmUuJGRiLnZpZXcgXCIje1RhbmdlcmluZS5kZXNpZ25fZG9jfS9ieUNvbGxlY3Rpb25cIlxuICAgICxcblxuICAgICAga2V5czogW1widGVhY2hlclwiLCBcImtsYXNzXCIsIFwic3R1ZGVudFwiLCBcImNvbmZpZ1wiLCBcInNldHRpbmdzXCJdXG5cbiAgICAgIHN1Y2Nlc3M6IChyZXNwb25zZSkgLT5cblxuICAgICAgICBkb2NJZCA9IFwiZGVidWctcmVwb3J0LSN7VGFuZ2VyaW5lLnNldHRpbmdzLmdldCgnaW5zdGFuY2VJZCcpfVwiXG5cbiAgICAgICAgc2F2ZVJlcG9ydCA9IChyZXNwb25zZSwgb2xkUmV2ID0gbnVsbCwgZG9jSWQpIC0+XG4gICAgICAgICAgZG9jID1cbiAgICAgICAgICAgIF9pZCAgICAgICAgOiBkb2NJZFxuICAgICAgICAgICAgX3JldiAgICAgICA6IG9sZFJldlxuICAgICAgICAgICAgZG9jcyAgICAgICA6IF8ucGx1Y2socmVzcG9uc2Uucm93cyxcInZhbHVlXCIpXG4gICAgICAgICAgICBjb2xsZWN0aW9uIDogXCJkZWJ1Z19yZXBvcnRcIlxuXG4gICAgICAgICAgZGVsZXRlIGRvYy5fcmV2IHVubGVzcyBkb2MuX3Jldj9cblxuICAgICAgICAgIFRhbmdlcmluZS4kZGIuc2F2ZURvYyBkb2MsXG4gICAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgICAkLmNvdWNoLnJlcGxpY2F0ZSBUYW5nZXJpbmUuZGJfbmFtZSwgVGFuZ2VyaW5lLnNldHRpbmdzLnVybERCKFwiZ3JvdXBcIiksXG4gICAgICAgICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgICAgICAgIFV0aWxzLnN0aWNreSBcIkRlYnVnIHJlcG9ydCBzZW50XCIsIFwiT2tcIlxuICAgICAgICAgICAgICAsXG4gICAgICAgICAgICAgICAgZG9jX2lkczogW2RvY0lkXVxuXG5cbiAgICAgICAgVGFuZ2VyaW5lLiRkYi5vcGVuRG9jIGRvY0lkLFxuICAgICAgICAgIHN1Y2Nlc3M6IChvbGREb2MpIC0+XG4gICAgICAgICAgICBzYXZlUmVwb3J0IHJlc3BvbnNlLCBvbGREb2MuX3JldiwgZG9jSWRcbiAgICAgICAgICBlcnJvcjogKGVycm9yKSAtPlxuICAgICAgICAgICAgc2F2ZVJlcG9ydCByZXNwb25zZSwgbnVsbCwgZG9jSWRcblxuXG4gIHVwZGF0ZTogLT5cbiAgICBkb1Jlc29sdmUgPSBAJGVsLmZpbmQoXCIjYXR0ZW1wdF9yZXNvbHZlXCIpLmlzKFwiOmNoZWNrZWRcIilcblxuICAgIFV0aWxzLnVwZGF0ZVRhbmdlcmluZShkb1Jlc29sdmUpXG5cbiAgcmVzdGFydDogLT5cbiAgICBVdGlscy5yZXN0YXJ0VGFuZ2VyaW5lKClcblxuICBnb0JhY2s6IC0+XG4gICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZSBcImdyb3Vwc1wiLCB0cnVlXG5cbiAgam9pblRvZ2dsZTogLT5cbiAgICBAJGVsLmZpbmQoXCIuam9pbiwgLmpvaW5fY29uZmlybWF0aW9uXCIpLmZhZGVUb2dnbGUoMClcbiAgICBAJGVsLmZpbmQoXCIjZ3JvdXBfbmFtZVwiKS52YWwgXCJcIlxuXG4gIGpvaW46IC0+XG4gICAgZ3JvdXAgPSBAJGVsLmZpbmQoXCIjZ3JvdXBfbmFtZVwiKS52YWwoKS5kYXRhYmFzZVNhZmV0eURhbmNlKClcbiAgICByZXR1cm4gaWYgZ3JvdXAubGVuZ3RoID09IDBcbiAgICBAdXNlci5qb2luR3JvdXAgZ3JvdXAsID0+XG4gICAgICBAam9pblRvZ2dsZSgpXG5cbiAgbGVhdmVHcm91cDogKGV2ZW50KSAtPlxuICAgIGdyb3VwID0gJChldmVudC50YXJnZXQpLnBhcmVudCgpLmF0dHIoJ2RhdGEtZ3JvdXAnKVxuICAgIEB1c2VyLmxlYXZlR3JvdXAgZ3JvdXBcblxuICBpbml0aWFsaXplOiAoIG9wdGlvbnMgKSAtPlxuXG4gICAgQHVzZXIgPSBvcHRpb25zLnVzZXJcbiAgICBAdGVhY2hlciA9IG9wdGlvbnMudGVhY2hlclxuXG4gICAgbW9kZWxzID0gW11cbiAgICBtb2RlbHMucHVzaCBAdXNlciBpZiBAdXNlcj9cbiAgICBtb2RlbHMucHVzaCBAdGVhY2hlciBpZiBAdGVhY2hlcj9cblxuICAgIEBtb2RlbHMgPSBuZXcgQmFja2JvbmUuQ29sbGVjdGlvbihtb2RlbHMpXG4gICAgQGxpc3RlblRvIEB1c2VyLCBcImdyb3Vwcy11cGRhdGVcIiwgQHJlbmRlckdyb3Vwc1xuXG4gIHJlbmRlckdyb3VwczogPT5cbiAgICBncm91cExpID0gKGdyb3VwKSAtPiBcIjxsaSBkYXRhLWdyb3VwPScje18uZXNjYXBlKGdyb3VwKX0nPiN7Z3JvdXB9IDxidXR0b24gY2xhc3M9J2NvbW1hbmQgbGVhdmUnPkxlYXZlPC9idXR0b24+PC9saT5cIlxuICAgIGh0bWwgPSBcIjx1bD5cIlxuICAgIGh0bWwgKz0gQHVzZXIuZ3JvdXBzKCkuYWRtaW4ubWFwKChnKSAtPiBncm91cExpKGcpKS5qb2luKCcnKVxuICAgIGh0bWwgKz0gQHVzZXIuZ3JvdXBzKCkubWVtYmVyLm1hcCgoZykgLT4gZ3JvdXBMaShnKSkuam9pbignJylcbiAgICBodG1sICs9IFwiPC91bD5cIlxuICAgIEAkZWwuZmluZChcIiNncm91cF93cmFwcGVyXCIpLmh0bWwgaHRtbFxuXG4gIHJlbmRlcjogLT5cblxuICAgIGdyb3VwU2VjdGlvbiA9IFwiXG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICAgIDxsYWJlbD5Hcm91cHM8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgaWQ9J2dyb3VwX3dyYXBwZXInPjwvZGl2PlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQgam9pbic+Sm9pbiBvciBjcmVhdGUgYSBncm91cDwvYnV0dG9uPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J2NvbmZpcm1hdGlvbiBqb2luX2NvbmZpcm1hdGlvbic+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdtZW51X2JveCc+XG4gICAgICAgICAgICAgIDxpbnB1dCBpZD0nZ3JvdXBfbmFtZScgcGxhY2Vob2xkZXI9J0dyb3VwIG5hbWUnPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdzbWFsbF9ncmV5Jz5QbGVhc2UgYmUgc3BlY2lmaWMuPGJyPlxuICAgICAgICAgICAgICBHb29kIGV4YW1wbGVzOiBtYWxhd2lfanVuXzIwMTIsIG1pa2VfdGVzdF9ncm91cF8yMDEyLCBlZ3JhX2dyb3VwX2F1Zy0yMDEyPGJyPlxuICAgICAgICAgICAgICBCYWQgZXhhbXBsZXM6IGdyb3VwLCB0ZXN0LCBtaW5lPC9kaXY+PGJyPlxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIGpvaW5fZ3JvdXAnPkpvaW4gR3JvdXA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBqb2luX2NhbmNlbCc+Q2FuY2VsPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgIFwiXG5cbiAgICB1c2VyRWRpdHMgPVxuICAgICAgQGdldEVkaXRhYmxlUm93KHtrZXk6XCJlbWFpbFwiLCBuYW1lOlwiRW1haWxcIn0sIEB1c2VyKSArXG4gICAgICBAZ2V0RWRpdGFibGVSb3coe2tleTpcImZpcnN0XCIsIG5hbWU6XCJGaXJzdCBuYW1lXCJ9LCBAdXNlcikgK1xuICAgICAgQGdldEVkaXRhYmxlUm93KHtrZXk6XCJsYXN0XCIsIG5hbWU6XCJMYXN0IG5hbWVcIn0sIEB1c2VyKVxuXG4gICAgaHRtbCA9IFwiXG4gICAgICA8YnV0dG9uIGNsYXNzPSdiYWNrIG5hdmlnYXRpb24nPkJhY2s8L2J1dHRvbj5cbiAgICAgIDxoMT5NYW5hZ2U8L2gxPlxuXG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgPGgyPkFjY291bnQ8L2gyPlxuICAgICAgICAgIDx0YWJsZSBjbGFzcz0nY2xhc3NfdGFibGUnPlxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGQgc3R5bGU9J2NvbG9yOmJsYWNrJz5OYW1lPC90ZD5cbiAgICAgICAgICAgICAgPHRkIHN0eWxlPSdjb2xvcjpibGFjayc+I3tAdXNlci5uYW1lKCl9PC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAje3VzZXJFZGl0cyB8fCAnJ31cbiAgICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9zZWN0aW9uPlxuICAgICAgI3tncm91cFNlY3Rpb24gfHwgXCJcIn1cbiAgICAgIDwvZGl2PlxuICAgIFwiXG5cbiAgICBAJGVsLmh0bWwgaHRtbFxuICAgIEByZW5kZXJHcm91cHMoKVxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cblxuICBnZXRFZGl0YWJsZVJvdzogKHByb3AsIG1vZGVsKSAtPlxuICAgIFwiPHRyPjx0ZD4je3Byb3AubmFtZX08L3RkPjx0ZD4je0BnZXRFZGl0YWJsZShwcm9wLCBtb2RlbCl9PC90ZD48L3RyPlwiXG5cbiAgZ2V0RWRpdGFibGU6IChwcm9wLCBtb2RlbCkgLT5cblxuICAgICMgY29vayB0aGUgdmFsdWVcbiAgICB2YWx1ZSA9IGlmIHByb3Aua2V5PyAgIHRoZW4gbW9kZWwuZ2V0KHByb3Aua2V5KSAgICBlbHNlIFwiJm5ic3A7XCJcbiAgICB2YWx1ZSA9IGlmIHByb3AuZXNjYXBlIHRoZW4gbW9kZWwuZXNjYXBlKHByb3Aua2V5KSBlbHNlIHZhbHVlXG4gICAgdmFsdWUgPSBcIm5vdCBzZXRcIiBpZiBub3QgdmFsdWU/IG9yIF8uaXNFbXB0eVN0cmluZyh2YWx1ZSlcblxuICAgICMgd2hhdCBpcyBpdFxuICAgIGVkaXRPck5vdCAgID0gaWYgcHJvcC5lZGl0YWJsZSB0aGVuIFwiY2xhc3M9J2VkaXRfaW5fcGxhY2UnXCIgZWxzZSBcIlwiXG5cbiAgICBudW1iZXJPck5vdCA9IGlmIF8uaXNOdW1iZXIodmFsdWUpIHRoZW4gXCJkYXRhLWlzTnVtYmVyPSd0cnVlJ1wiIGVsc2UgXCJkYXRhLWlzTnVtYmVyPSdmYWxzZSdcIlxuXG4gICAgcmV0dXJuIFwiPGRpdiBjbGFzcz0nZWRpdF9pbl9wbGFjZSc+PHNwYW4gZGF0YS1tb2RlbElkPScje21vZGVsLmlkfScgZGF0YS1rZXk9JyN7cHJvcC5rZXl9JyBkYXRhLXZhbHVlPScje3ZhbHVlfScgZGF0YS1uYW1lPScje3Byb3AubmFtZX0nICN7ZWRpdE9yTm90fSAje251bWJlck9yTm90fT4je3ZhbHVlfTwvZGl2PjwvZGl2PlwiXG5cblxuICBlZGl0SW5QbGFjZTogKGV2ZW50KSAtPlxuXG4gICAgcmV0dXJuIGlmIEBhbHJlYWR5RWRpdGluZ1xuICAgIEBhbHJlYWR5RWRpdGluZyA9IHRydWVcblxuICAgICMgc2F2ZSBzdGF0ZVxuICAgICMgcmVwbGFjZSB3aXRoIHRleHQgYXJlYVxuICAgICMgb24gc2F2ZSwgc2F2ZSBhbmQgcmUtcmVwbGFjZVxuICAgICRzcGFuID0gJChldmVudC50YXJnZXQpXG5cbiAgICAkdGQgID0gJHNwYW4ucGFyZW50KClcblxuICAgIEAkb2xkU3BhbiA9ICRzcGFuLmNsb25lKClcblxuICAgIHJldHVybiBpZiAkc3Bhbi5oYXNDbGFzcyhcImVkaXRpbmdcIilcblxuICAgIGd1aWQgICAgID0gVXRpbHMuZ3VpZCgpXG5cbiAgICBrZXkgICAgICA9ICRzcGFuLmF0dHIoXCJkYXRhLWtleVwiKVxuICAgIG5hbWUgICAgID0gJHNwYW4uYXR0cihcImRhdGEtbmFtZVwiKVxuICAgIGlzTnVtYmVyID0gJHNwYW4uYXR0cihcImRhdGEtaXNOdW1iZXJcIikgPT0gXCJ0cnVlXCJcblxuICAgIG1vZGVsSWQgID0gJHNwYW4uYXR0cihcImRhdGEtbW9kZWxJZFwiKVxuICAgIG1vZGVsICAgID0gQG1vZGVscy5nZXQobW9kZWxJZClcbiAgICBvbGRWYWx1ZSA9IG1vZGVsLmdldChrZXkpIHx8IFwiXCJcbiAgICBvbGRWYWx1ZSA9IFwiXCIgaWYgb2xkVmFsdWUgPT0gXCJub3Qgc2V0XCJcblxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldClcbiAgICBjbGFzc2VzID0gKCR0YXJnZXQuYXR0cihcImNsYXNzXCIpIHx8IFwiXCIpLnJlcGxhY2UoXCJzZXR0aW5nc1wiLFwiXCIpXG4gICAgbWFyZ2lucyA9ICR0YXJnZXQuY3NzKFwibWFyZ2luXCIpXG5cbiAgICB0cmFuc2ZlclZhcmlhYmxlcyA9IFwiZGF0YS1pc051bWJlcj0nI3tpc051bWJlcn0nIGRhdGEta2V5PScje2tleX0nIGRhdGEtbW9kZWxJZD0nI3ttb2RlbElkfScgXCJcblxuICAgICMgc2V0cyB3aWR0aC9oZWlnaHQgd2l0aCBzdHlsZSBhdHRyaWJ1dGVcbiAgICAkdGQuaHRtbChcIjx0ZXh0YXJlYSBwbGFjZWhvbGRlcj0nI3tuYW1lfScgaWQ9JyN7Z3VpZH0nIHJvd3M9JyN7MStvbGRWYWx1ZS5jb3VudChcIlxcblwiKX0nICN7dHJhbnNmZXJWYXJpYWJsZXN9IGNsYXNzPSdlZGl0aW5nICN7Y2xhc3Nlc30nIHN0eWxlPSdtYXJnaW46I3ttYXJnaW5zfScgZGF0YS1uYW1lPScje25hbWV9Jz4je29sZFZhbHVlfTwvdGV4dGFyZWE+XCIpXG4gICAgIyBzdHlsZT0nd2lkdGg6I3tvbGRXaWR0aH1weDsgaGVpZ2h0OiAje29sZEhlaWdodH1weDsnXG4gICAgJHRleHRhcmVhID0gJChcIiMje2d1aWR9XCIpXG4gICAgJHRleHRhcmVhLmZvY3VzKClcblxuICBlZGl0aW5nOiAoZXZlbnQpIC0+XG5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG4gICAgJHRkID0gJHRhcmdldC5wYXJlbnQoKVxuXG4gICAgaWYgZXZlbnQud2hpY2ggPT0gMjcgb3IgZXZlbnQudHlwZSA9PSBcImZvY3Vzb3V0XCJcbiAgICAgICR0YXJnZXQucmVtb3ZlKClcbiAgICAgICR0ZC5odG1sKEAkb2xkU3BhbilcbiAgICAgIEBhbHJlYWR5RWRpdGluZyA9IGZhbHNlXG4gICAgICByZXR1cm5cblxuICAgICMgYWN0IG5vcm1hbCwgdW5sZXNzIGl0J3MgYW4gZW50ZXIga2V5IG9uIGtleWRvd25cbiAgICByZXR1cm4gdHJ1ZSB1bmxlc3MgZXZlbnQud2hpY2ggPT0gMTMgYW5kIGV2ZW50LnR5cGUgPT0gXCJrZXlkb3duXCJcblxuICAgICNyZXR1cm4gdHJ1ZSBpZiBldmVudC53aGljaCA9PSAxMyBhbmQgZXZlbnQuYWx0S2V5XG5cbiAgICBAYWxyZWFkeUVkaXRpbmcgPSBmYWxzZVxuXG4gICAga2V5ICAgICAgICA9ICR0YXJnZXQuYXR0cihcImRhdGEta2V5XCIpXG4gICAgaXNOdW1iZXIgICA9ICR0YXJnZXQuYXR0cihcImRhdGEtaXNOdW1iZXJcIikgPT0gXCJ0cnVlXCJcblxuICAgIG1vZGVsSWQgICAgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLW1vZGVsSWRcIilcbiAgICBuYW1lICAgICAgID0gJHRhcmdldC5hdHRyKFwiZGF0YS1uYW1lXCIpXG5cbiAgICBtb2RlbCAgICAgID0gQG1vZGVscy5nZXQobW9kZWxJZClcbiAgICBvbGRWYWx1ZSAgID0gbW9kZWwuZ2V0KGtleSlcblxuICAgIG5ld1ZhbHVlID0gJHRhcmdldC52YWwoKVxuICAgIG5ld1ZhbHVlID0gaWYgaXNOdW1iZXIgdGhlbiBwYXJzZUludChuZXdWYWx1ZSkgZWxzZSBuZXdWYWx1ZVxuXG4gICAgIyBJZiB0aGVyZSB3YXMgYSBjaGFuZ2UsIHNhdmUgaXRcbiAgICBpZiBTdHJpbmcobmV3VmFsdWUpICE9IFN0cmluZyhvbGRWYWx1ZSlcbiAgICAgIGF0dHJpYnV0ZXMgPSB7fVxuICAgICAgYXR0cmlidXRlc1trZXldID0gbmV3VmFsdWVcbiAgICAgIG1vZGVsLnNhdmUgYXR0cmlidXRlcyxcbiAgICAgICAgc3VjY2VzczogPT5cbiAgICAgICAgICBVdGlscy5taWRBbGVydCBcIiN7bmFtZX0gc2F2ZWRcIlxuICAgICAgICAgIG1vZGVsLmZldGNoXG4gICAgICAgICAgICBzdWNjZXNzOiA9PlxuICAgICAgICAgICAgICBpZiBAdXBkYXRlRGlzcGxheT9cbiAgICAgICAgICAgICAgICBAdXBkYXRlRGlzcGxheSgpXG4gICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBAcmVuZGVyKClcbiAgICAgICAgZXJyb3I6ID0+XG4gICAgICAgICAgbW9kZWwuZmV0Y2hcbiAgICAgICAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgICAgICAgIGlmIEB1cGRhdGVEaXNwbGF5P1xuICAgICAgICAgICAgICAgIEB1cGRhdGVEaXNwbGF5KClcbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIEByZW5kZXIoKVxuICAgICAgICAgICAgICAjIGlkZWFsbHkgd2Ugd291bGRuJ3QgaGF2ZSB0byBzYXZlIHRoaXMgYnV0IGNvbmZsaWN0cyBoYXBwZW4gc29tZXRpbWVzXG4gICAgICAgICAgICAgICMgQFRPRE8gbWFrZSB0aGUgbW9kZWwgdHJ5IGFnYWluIHdoZW4gdW5zdWNjZXNzZnVsLlxuICAgICAgICAgICAgICBhbGVydCBcIlBsZWFzZSB0cnkgdG8gc2F2ZSBhZ2FpbiwgaXQgZGlkbid0IHdvcmsgdGhhdCB0aW1lLlwiXG5cbiAgICAjIHRoaXMgZW5zdXJlcyB3ZSBkbyBub3QgaW5zZXJ0IGEgbmV3bGluZSBjaGFyYWN0ZXIgd2hlbiB3ZSBwcmVzcyBlbnRlclxuICAgIHJldHVybiBmYWxzZVxuXG4gIGdvQmFjazogLT5cbiAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKClcbiIsInZhciBBY2NvdW50VmlldyxcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5BY2NvdW50VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChBY2NvdW50Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQWNjb3VudFZpZXcoKSB7XG4gICAgdGhpcy5yZW5kZXJHcm91cHMgPSBiaW5kKHRoaXMucmVuZGVyR3JvdXBzLCB0aGlzKTtcbiAgICByZXR1cm4gQWNjb3VudFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBBY2NvdW50Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJBY2NvdW50Vmlld1wiO1xuXG4gIEFjY291bnRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrIC5sZWF2ZSc6ICdsZWF2ZUdyb3VwJyxcbiAgICAnY2xpY2sgLmpvaW5fY2FuY2VsJzogJ2pvaW5Ub2dnbGUnLFxuICAgICdjbGljayAuam9pbic6ICdqb2luVG9nZ2xlJyxcbiAgICAnY2xpY2sgLmpvaW5fZ3JvdXAnOiAnam9pbicsXG4gICAgJ2NsaWNrIC5iYWNrJzogJ2dvQmFjaycsXG4gICAgJ2NsaWNrIC51cGRhdGUnOiAndXBkYXRlJyxcbiAgICAnY2xpY2sgLnJlc3RhcnQnOiAncmVzdGFydCcsXG4gICAgJ2NsaWNrIC5zZW5kX2RlYnVnJzogJ3NlbmREZWJ1ZycsXG4gICAgXCJjbGljayAuZWRpdF9pbl9wbGFjZVwiOiBcImVkaXRJblBsYWNlXCIsXG4gICAgXCJmb2N1c291dCAuZWRpdGluZ1wiOiBcImVkaXRpbmdcIixcbiAgICBcImtleXVwICAgIC5lZGl0aW5nXCI6IFwiZWRpdGluZ1wiLFxuICAgIFwia2V5ZG93biAgLmVkaXRpbmdcIjogXCJlZGl0aW5nXCIsXG4gICAgJ2NsaWNrIC5jaGFuZ2VfcGFzc3dvcmQnOiBcInRvZ2dsZVBhc3N3b3JkXCIsXG4gICAgJ2NsaWNrIC5jb25maXJtX3Bhc3N3b3JkJzogXCJzYXZlTmV3UGFzc3dvcmRcIlxuICB9O1xuXG4gIEFjY291bnRWaWV3LnByb3RvdHlwZS50b2dnbGVQYXNzd29yZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciAkbWVudTtcbiAgICAkbWVudSA9IHRoaXMuJGVsLmZpbmQoXCIucGFzc3dvcmRfbWVudVwiKTtcbiAgICAkbWVudS50b2dnbGUoKTtcbiAgICBpZiAoJG1lbnUuaXMoXCI6dmlzaWJsZVwiKSkge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjbmV3X3Bhc3N3b3JkXCIpLmZvY3VzKCkuc2Nyb2xsVG8oKTtcbiAgICB9XG4gIH07XG5cbiAgQWNjb3VudFZpZXcucHJvdG90eXBlLnNhdmVOZXdQYXNzd29yZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXNzO1xuICAgIHBhc3MgPSB0aGlzLiRlbC5maW5kKFwiLm5ld19wYXNzd29yZFwiKS52YWwoKTtcbiAgICBUYW5nZXJpbmUudXNlci5zZXRQYXNzd29yZChwYXNzKTtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIuc2F2ZShudWxsLCB7XG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLiRlbC5maW5kKFwiLm5ld19wYXNzd29yZFwiKS52YWwoJycpO1xuICAgICAgICAgIF90aGlzLnRvZ2dsZVBhc3N3b3JkKCk7XG4gICAgICAgICAgcmV0dXJuIFV0aWxzLm1pZEFsZXJ0KFwiUGFzc3dvcmQgY2hhbmdlZFwiKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgQWNjb3VudFZpZXcucHJvdG90eXBlLnNlbmREZWJ1ZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUuJGRiLnZpZXcoVGFuZ2VyaW5lLmRlc2lnbl9kb2MgKyBcIi9ieUNvbGxlY3Rpb25cIiwge1xuICAgICAga2V5czogW1widGVhY2hlclwiLCBcImtsYXNzXCIsIFwic3R1ZGVudFwiLCBcImNvbmZpZ1wiLCBcInNldHRpbmdzXCJdLFxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIGRvY0lkLCBzYXZlUmVwb3J0O1xuICAgICAgICBkb2NJZCA9IFwiZGVidWctcmVwb3J0LVwiICsgKFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoJ2luc3RhbmNlSWQnKSk7XG4gICAgICAgIHNhdmVSZXBvcnQgPSBmdW5jdGlvbihyZXNwb25zZSwgb2xkUmV2LCBkb2NJZCkge1xuICAgICAgICAgIHZhciBkb2M7XG4gICAgICAgICAgaWYgKG9sZFJldiA9PSBudWxsKSB7XG4gICAgICAgICAgICBvbGRSZXYgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkb2MgPSB7XG4gICAgICAgICAgICBfaWQ6IGRvY0lkLFxuICAgICAgICAgICAgX3Jldjogb2xkUmV2LFxuICAgICAgICAgICAgZG9jczogXy5wbHVjayhyZXNwb25zZS5yb3dzLCBcInZhbHVlXCIpLFxuICAgICAgICAgICAgY29sbGVjdGlvbjogXCJkZWJ1Z19yZXBvcnRcIlxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKGRvYy5fcmV2ID09IG51bGwpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBkb2MuX3JldjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFRhbmdlcmluZS4kZGIuc2F2ZURvYyhkb2MsIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gJC5jb3VjaC5yZXBsaWNhdGUoVGFuZ2VyaW5lLmRiX25hbWUsIFRhbmdlcmluZS5zZXR0aW5ncy51cmxEQihcImdyb3VwXCIpLCB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gVXRpbHMuc3RpY2t5KFwiRGVidWcgcmVwb3J0IHNlbnRcIiwgXCJPa1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkb2NfaWRzOiBbZG9jSWRdXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLiRkYi5vcGVuRG9jKGRvY0lkLCB7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ob2xkRG9jKSB7XG4gICAgICAgICAgICByZXR1cm4gc2F2ZVJlcG9ydChyZXNwb25zZSwgb2xkRG9jLl9yZXYsIGRvY0lkKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHNhdmVSZXBvcnQocmVzcG9uc2UsIG51bGwsIGRvY0lkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIEFjY291bnRWaWV3LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9SZXNvbHZlO1xuICAgIGRvUmVzb2x2ZSA9IHRoaXMuJGVsLmZpbmQoXCIjYXR0ZW1wdF9yZXNvbHZlXCIpLmlzKFwiOmNoZWNrZWRcIik7XG4gICAgcmV0dXJuIFV0aWxzLnVwZGF0ZVRhbmdlcmluZShkb1Jlc29sdmUpO1xuICB9O1xuXG4gIEFjY291bnRWaWV3LnByb3RvdHlwZS5yZXN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFV0aWxzLnJlc3RhcnRUYW5nZXJpbmUoKTtcbiAgfTtcblxuICBBY2NvdW50Vmlldy5wcm90b3R5cGUuZ29CYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJncm91cHNcIiwgdHJ1ZSk7XG4gIH07XG5cbiAgQWNjb3VudFZpZXcucHJvdG90eXBlLmpvaW5Ub2dnbGUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRlbC5maW5kKFwiLmpvaW4sIC5qb2luX2NvbmZpcm1hdGlvblwiKS5mYWRlVG9nZ2xlKDApO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiI2dyb3VwX25hbWVcIikudmFsKFwiXCIpO1xuICB9O1xuXG4gIEFjY291bnRWaWV3LnByb3RvdHlwZS5qb2luID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdyb3VwO1xuICAgIGdyb3VwID0gdGhpcy4kZWwuZmluZChcIiNncm91cF9uYW1lXCIpLnZhbCgpLmRhdGFiYXNlU2FmZXR5RGFuY2UoKTtcbiAgICBpZiAoZ3JvdXAubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVzZXIuam9pbkdyb3VwKGdyb3VwLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmpvaW5Ub2dnbGUoKTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICB9O1xuXG4gIEFjY291bnRWaWV3LnByb3RvdHlwZS5sZWF2ZUdyb3VwID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgZ3JvdXA7XG4gICAgZ3JvdXAgPSAkKGV2ZW50LnRhcmdldCkucGFyZW50KCkuYXR0cignZGF0YS1ncm91cCcpO1xuICAgIHJldHVybiB0aGlzLnVzZXIubGVhdmVHcm91cChncm91cCk7XG4gIH07XG5cbiAgQWNjb3VudFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIG1vZGVscztcbiAgICB0aGlzLnVzZXIgPSBvcHRpb25zLnVzZXI7XG4gICAgdGhpcy50ZWFjaGVyID0gb3B0aW9ucy50ZWFjaGVyO1xuICAgIG1vZGVscyA9IFtdO1xuICAgIGlmICh0aGlzLnVzZXIgIT0gbnVsbCkge1xuICAgICAgbW9kZWxzLnB1c2godGhpcy51c2VyKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudGVhY2hlciAhPSBudWxsKSB7XG4gICAgICBtb2RlbHMucHVzaCh0aGlzLnRlYWNoZXIpO1xuICAgIH1cbiAgICB0aGlzLm1vZGVscyA9IG5ldyBCYWNrYm9uZS5Db2xsZWN0aW9uKG1vZGVscyk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuVG8odGhpcy51c2VyLCBcImdyb3Vwcy11cGRhdGVcIiwgdGhpcy5yZW5kZXJHcm91cHMpO1xuICB9O1xuXG4gIEFjY291bnRWaWV3LnByb3RvdHlwZS5yZW5kZXJHcm91cHMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZ3JvdXBMaSwgaHRtbDtcbiAgICBncm91cExpID0gZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgIHJldHVybiBcIjxsaSBkYXRhLWdyb3VwPSdcIiArIChfLmVzY2FwZShncm91cCkpICsgXCInPlwiICsgZ3JvdXAgKyBcIiA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIGxlYXZlJz5MZWF2ZTwvYnV0dG9uPjwvbGk+XCI7XG4gICAgfTtcbiAgICBodG1sID0gXCI8dWw+XCI7XG4gICAgaHRtbCArPSB0aGlzLnVzZXIuZ3JvdXBzKCkuYWRtaW4ubWFwKGZ1bmN0aW9uKGcpIHtcbiAgICAgIHJldHVybiBncm91cExpKGcpO1xuICAgIH0pLmpvaW4oJycpO1xuICAgIGh0bWwgKz0gdGhpcy51c2VyLmdyb3VwcygpLm1lbWJlci5tYXAoZnVuY3Rpb24oZykge1xuICAgICAgcmV0dXJuIGdyb3VwTGkoZyk7XG4gICAgfSkuam9pbignJyk7XG4gICAgaHRtbCArPSBcIjwvdWw+XCI7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjZ3JvdXBfd3JhcHBlclwiKS5odG1sKGh0bWwpO1xuICB9O1xuXG4gIEFjY291bnRWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZ3JvdXBTZWN0aW9uLCBodG1sLCB1c2VyRWRpdHM7XG4gICAgZ3JvdXBTZWN0aW9uID0gXCI8c2VjdGlvbj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWw+R3JvdXBzPC9sYWJlbD4gPGRpdiBpZD0nZ3JvdXBfd3JhcHBlcic+PC9kaXY+IDxidXR0b24gY2xhc3M9J2NvbW1hbmQgam9pbic+Sm9pbiBvciBjcmVhdGUgYSBncm91cDwvYnV0dG9uPiA8ZGl2IGNsYXNzPSdjb25maXJtYXRpb24gam9pbl9jb25maXJtYXRpb24nPiA8ZGl2IGNsYXNzPSdtZW51X2JveCc+IDxpbnB1dCBpZD0nZ3JvdXBfbmFtZScgcGxhY2Vob2xkZXI9J0dyb3VwIG5hbWUnPiA8ZGl2IGNsYXNzPSdzbWFsbF9ncmV5Jz5QbGVhc2UgYmUgc3BlY2lmaWMuPGJyPiBHb29kIGV4YW1wbGVzOiBtYWxhd2lfanVuXzIwMTIsIG1pa2VfdGVzdF9ncm91cF8yMDEyLCBlZ3JhX2dyb3VwX2F1Zy0yMDEyPGJyPiBCYWQgZXhhbXBsZXM6IGdyb3VwLCB0ZXN0LCBtaW5lPC9kaXY+PGJyPiA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIGpvaW5fZ3JvdXAnPkpvaW4gR3JvdXA8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBqb2luX2NhbmNlbCc+Q2FuY2VsPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9zZWN0aW9uPlwiO1xuICAgIHVzZXJFZGl0cyA9IHRoaXMuZ2V0RWRpdGFibGVSb3coe1xuICAgICAga2V5OiBcImVtYWlsXCIsXG4gICAgICBuYW1lOiBcIkVtYWlsXCJcbiAgICB9LCB0aGlzLnVzZXIpICsgdGhpcy5nZXRFZGl0YWJsZVJvdyh7XG4gICAgICBrZXk6IFwiZmlyc3RcIixcbiAgICAgIG5hbWU6IFwiRmlyc3QgbmFtZVwiXG4gICAgfSwgdGhpcy51c2VyKSArIHRoaXMuZ2V0RWRpdGFibGVSb3coe1xuICAgICAga2V5OiBcImxhc3RcIixcbiAgICAgIG5hbWU6IFwiTGFzdCBuYW1lXCJcbiAgICB9LCB0aGlzLnVzZXIpO1xuICAgIGh0bWwgPSBcIjxidXR0b24gY2xhc3M9J2JhY2sgbmF2aWdhdGlvbic+QmFjazwvYnV0dG9uPiA8aDE+TWFuYWdlPC9oMT4gPHNlY3Rpb24+IDxoMj5BY2NvdW50PC9oMj4gPHRhYmxlIGNsYXNzPSdjbGFzc190YWJsZSc+IDx0cj4gPHRkIHN0eWxlPSdjb2xvcjpibGFjayc+TmFtZTwvdGQ+IDx0ZCBzdHlsZT0nY29sb3I6YmxhY2snPlwiICsgKHRoaXMudXNlci5uYW1lKCkpICsgXCI8L3RkPiA8L3RyPiBcIiArICh1c2VyRWRpdHMgfHwgJycpICsgXCIgPC90YWJsZT4gPC9zZWN0aW9uPiBcIiArIChncm91cFNlY3Rpb24gfHwgXCJcIikgKyBcIiA8L2Rpdj5cIjtcbiAgICB0aGlzLiRlbC5odG1sKGh0bWwpO1xuICAgIHRoaXMucmVuZGVyR3JvdXBzKCk7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIEFjY291bnRWaWV3LnByb3RvdHlwZS5nZXRFZGl0YWJsZVJvdyA9IGZ1bmN0aW9uKHByb3AsIG1vZGVsKSB7XG4gICAgcmV0dXJuIFwiPHRyPjx0ZD5cIiArIHByb3AubmFtZSArIFwiPC90ZD48dGQ+XCIgKyAodGhpcy5nZXRFZGl0YWJsZShwcm9wLCBtb2RlbCkpICsgXCI8L3RkPjwvdHI+XCI7XG4gIH07XG5cbiAgQWNjb3VudFZpZXcucHJvdG90eXBlLmdldEVkaXRhYmxlID0gZnVuY3Rpb24ocHJvcCwgbW9kZWwpIHtcbiAgICB2YXIgZWRpdE9yTm90LCBudW1iZXJPck5vdCwgdmFsdWU7XG4gICAgdmFsdWUgPSBwcm9wLmtleSAhPSBudWxsID8gbW9kZWwuZ2V0KHByb3Aua2V5KSA6IFwiJm5ic3A7XCI7XG4gICAgdmFsdWUgPSBwcm9wLmVzY2FwZSA/IG1vZGVsLmVzY2FwZShwcm9wLmtleSkgOiB2YWx1ZTtcbiAgICBpZiAoKHZhbHVlID09IG51bGwpIHx8IF8uaXNFbXB0eVN0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gXCJub3Qgc2V0XCI7XG4gICAgfVxuICAgIGVkaXRPck5vdCA9IHByb3AuZWRpdGFibGUgPyBcImNsYXNzPSdlZGl0X2luX3BsYWNlJ1wiIDogXCJcIjtcbiAgICBudW1iZXJPck5vdCA9IF8uaXNOdW1iZXIodmFsdWUpID8gXCJkYXRhLWlzTnVtYmVyPSd0cnVlJ1wiIDogXCJkYXRhLWlzTnVtYmVyPSdmYWxzZSdcIjtcbiAgICByZXR1cm4gXCI8ZGl2IGNsYXNzPSdlZGl0X2luX3BsYWNlJz48c3BhbiBkYXRhLW1vZGVsSWQ9J1wiICsgbW9kZWwuaWQgKyBcIicgZGF0YS1rZXk9J1wiICsgcHJvcC5rZXkgKyBcIicgZGF0YS12YWx1ZT0nXCIgKyB2YWx1ZSArIFwiJyBkYXRhLW5hbWU9J1wiICsgcHJvcC5uYW1lICsgXCInIFwiICsgZWRpdE9yTm90ICsgXCIgXCIgKyBudW1iZXJPck5vdCArIFwiPlwiICsgdmFsdWUgKyBcIjwvZGl2PjwvZGl2PlwiO1xuICB9O1xuXG4gIEFjY291bnRWaWV3LnByb3RvdHlwZS5lZGl0SW5QbGFjZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyICRzcGFuLCAkdGFyZ2V0LCAkdGQsICR0ZXh0YXJlYSwgY2xhc3NlcywgZ3VpZCwgaXNOdW1iZXIsIGtleSwgbWFyZ2lucywgbW9kZWwsIG1vZGVsSWQsIG5hbWUsIG9sZFZhbHVlLCB0cmFuc2ZlclZhcmlhYmxlcztcbiAgICBpZiAodGhpcy5hbHJlYWR5RWRpdGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmFscmVhZHlFZGl0aW5nID0gdHJ1ZTtcbiAgICAkc3BhbiA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICAkdGQgPSAkc3Bhbi5wYXJlbnQoKTtcbiAgICB0aGlzLiRvbGRTcGFuID0gJHNwYW4uY2xvbmUoKTtcbiAgICBpZiAoJHNwYW4uaGFzQ2xhc3MoXCJlZGl0aW5nXCIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGd1aWQgPSBVdGlscy5ndWlkKCk7XG4gICAga2V5ID0gJHNwYW4uYXR0cihcImRhdGEta2V5XCIpO1xuICAgIG5hbWUgPSAkc3Bhbi5hdHRyKFwiZGF0YS1uYW1lXCIpO1xuICAgIGlzTnVtYmVyID0gJHNwYW4uYXR0cihcImRhdGEtaXNOdW1iZXJcIikgPT09IFwidHJ1ZVwiO1xuICAgIG1vZGVsSWQgPSAkc3Bhbi5hdHRyKFwiZGF0YS1tb2RlbElkXCIpO1xuICAgIG1vZGVsID0gdGhpcy5tb2RlbHMuZ2V0KG1vZGVsSWQpO1xuICAgIG9sZFZhbHVlID0gbW9kZWwuZ2V0KGtleSkgfHwgXCJcIjtcbiAgICBpZiAob2xkVmFsdWUgPT09IFwibm90IHNldFwiKSB7XG4gICAgICBvbGRWYWx1ZSA9IFwiXCI7XG4gICAgfVxuICAgICR0YXJnZXQgPSAkKGV2ZW50LnRhcmdldCk7XG4gICAgY2xhc3NlcyA9ICgkdGFyZ2V0LmF0dHIoXCJjbGFzc1wiKSB8fCBcIlwiKS5yZXBsYWNlKFwic2V0dGluZ3NcIiwgXCJcIik7XG4gICAgbWFyZ2lucyA9ICR0YXJnZXQuY3NzKFwibWFyZ2luXCIpO1xuICAgIHRyYW5zZmVyVmFyaWFibGVzID0gXCJkYXRhLWlzTnVtYmVyPSdcIiArIGlzTnVtYmVyICsgXCInIGRhdGEta2V5PSdcIiArIGtleSArIFwiJyBkYXRhLW1vZGVsSWQ9J1wiICsgbW9kZWxJZCArIFwiJyBcIjtcbiAgICAkdGQuaHRtbChcIjx0ZXh0YXJlYSBwbGFjZWhvbGRlcj0nXCIgKyBuYW1lICsgXCInIGlkPSdcIiArIGd1aWQgKyBcIicgcm93cz0nXCIgKyAoMSArIG9sZFZhbHVlLmNvdW50KFwiXFxuXCIpKSArIFwiJyBcIiArIHRyYW5zZmVyVmFyaWFibGVzICsgXCIgY2xhc3M9J2VkaXRpbmcgXCIgKyBjbGFzc2VzICsgXCInIHN0eWxlPSdtYXJnaW46XCIgKyBtYXJnaW5zICsgXCInIGRhdGEtbmFtZT0nXCIgKyBuYW1lICsgXCInPlwiICsgb2xkVmFsdWUgKyBcIjwvdGV4dGFyZWE+XCIpO1xuICAgICR0ZXh0YXJlYSA9ICQoXCIjXCIgKyBndWlkKTtcbiAgICByZXR1cm4gJHRleHRhcmVhLmZvY3VzKCk7XG4gIH07XG5cbiAgQWNjb3VudFZpZXcucHJvdG90eXBlLmVkaXRpbmcgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciAkdGFyZ2V0LCAkdGQsIGF0dHJpYnV0ZXMsIGlzTnVtYmVyLCBrZXksIG1vZGVsLCBtb2RlbElkLCBuYW1lLCBuZXdWYWx1ZSwgb2xkVmFsdWU7XG4gICAgJHRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcbiAgICAkdGQgPSAkdGFyZ2V0LnBhcmVudCgpO1xuICAgIGlmIChldmVudC53aGljaCA9PT0gMjcgfHwgZXZlbnQudHlwZSA9PT0gXCJmb2N1c291dFwiKSB7XG4gICAgICAkdGFyZ2V0LnJlbW92ZSgpO1xuICAgICAgJHRkLmh0bWwodGhpcy4kb2xkU3Bhbik7XG4gICAgICB0aGlzLmFscmVhZHlFZGl0aW5nID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghKGV2ZW50LndoaWNoID09PSAxMyAmJiBldmVudC50eXBlID09PSBcImtleWRvd25cIikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB0aGlzLmFscmVhZHlFZGl0aW5nID0gZmFsc2U7XG4gICAga2V5ID0gJHRhcmdldC5hdHRyKFwiZGF0YS1rZXlcIik7XG4gICAgaXNOdW1iZXIgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLWlzTnVtYmVyXCIpID09PSBcInRydWVcIjtcbiAgICBtb2RlbElkID0gJHRhcmdldC5hdHRyKFwiZGF0YS1tb2RlbElkXCIpO1xuICAgIG5hbWUgPSAkdGFyZ2V0LmF0dHIoXCJkYXRhLW5hbWVcIik7XG4gICAgbW9kZWwgPSB0aGlzLm1vZGVscy5nZXQobW9kZWxJZCk7XG4gICAgb2xkVmFsdWUgPSBtb2RlbC5nZXQoa2V5KTtcbiAgICBuZXdWYWx1ZSA9ICR0YXJnZXQudmFsKCk7XG4gICAgbmV3VmFsdWUgPSBpc051bWJlciA/IHBhcnNlSW50KG5ld1ZhbHVlKSA6IG5ld1ZhbHVlO1xuICAgIGlmIChTdHJpbmcobmV3VmFsdWUpICE9PSBTdHJpbmcob2xkVmFsdWUpKSB7XG4gICAgICBhdHRyaWJ1dGVzID0ge307XG4gICAgICBhdHRyaWJ1dGVzW2tleV0gPSBuZXdWYWx1ZTtcbiAgICAgIG1vZGVsLnNhdmUoYXR0cmlidXRlcywge1xuICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBVdGlscy5taWRBbGVydChuYW1lICsgXCIgc2F2ZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gbW9kZWwuZmV0Y2goe1xuICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMudXBkYXRlRGlzcGxheSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlRGlzcGxheSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KSh0aGlzKSxcbiAgICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBtb2RlbC5mZXRjaCh7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy51cGRhdGVEaXNwbGF5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZURpc3BsYXkoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgX3RoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhbGVydChcIlBsZWFzZSB0cnkgdG8gc2F2ZSBhZ2FpbiwgaXQgZGlkbid0IHdvcmsgdGhhdCB0aW1lLlwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcylcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgQWNjb3VudFZpZXcucHJvdG90eXBlLmdvQmFjayA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XG4gIH07XG5cbiAgcmV0dXJuIEFjY291bnRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgR3JvdXBzVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuXG4gIGNsYXNzTmFtZTogXCJHcm91cHNWaWV3XCJcblxuICBldmVudHM6XG4gICAgJ2NsaWNrIC5hY2NvdW50JyA6ICdnb3RvQWNjb3VudCdcbiAgICAnY2xpY2sgLmdvdG8nICAgIDogJ2dvdG9Hcm91cCdcbiAgICAnY2xpY2sgLm5ld1Byb2plY3QnICAgIDogJ25ld1Byb2plY3QnXG4gICAgJ2NsaWNrIC52aWV3UHJvamVjdCcgICAgOiAndmlld1Byb2plY3QnXG4gICAgJ2NvbnRleHRtZW51IC52aWV3UHJvamVjdCcgICAgOiAnc2hvd1Rvb2x0aXAnXG4jICAgICdtb3VzZWxlYXZlIC52aWV3UHJvamVjdCcgICAgOiAnbGVhdmVUb29sdGlwJ1xuXG4gIGluaXRpYWxpemU6IC0+XG4gICAgUm9iYmVydC5mZXRjaFVzZXJzXG4gICAgJC5hamF4XG4gICAgICB1cmw6IFwiL2VkaXRvci9wcm9qZWN0L2xpc3RBbGxcIixcbiAgICAgIHR5cGU6IFwiR0VUXCJcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIlxuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICBzdWNjZXNzOiAoIGRhdGEgKSA9PlxuIyAgICAgICAgY29uc29sZS5sb2coXCJQcm9qZWN0c1wiICsgSlNPTi5zdHJpbmdpZnkoZGF0YSkpXG4gICAgICAgIEBwcm9qZWN0cyA9IGRhdGFcbiAgICAgICAgY29uc29sZS5sb2coXCJQcm9qZWN0czogXCIgKyBKU09OLnN0cmluZ2lmeShAcHJvamVjdHMpKVxuICAgICAgICBAcmVuZGVyR3JvdXBzKFwiXCIpXG4gICAgICBlcnJvcjogKCBlcnIgKSA9PlxuICAgICAgICBhbGVydChcIkVycm9yOiBcIiArIGVycilcblxuICBnb3RvQWNjb3VudDogLT5cbiAgICBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlIFwiYWNjb3VudFwiLCB0cnVlXG5cbiAgZ290b0dyb3VwOiAoZXZlbnQpIC0+XG4gICAgZ3JvdXAgPSAkKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtZ3JvdXBcIilcbiAgICB3aW5kb3cubG9jYXRpb24gPSBUYW5nZXJpbmUuc2V0dGluZ3MudXJsSW5kZXgoZ3JvdXAsIFwiYXNzZXNzbWVudHNcIilcblxuICB2aWV3UHJvamVjdDogKGV2ZW50KSAtPlxuICAgIGdyb3VwID0gJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLWdyb3VwXCIpXG4gICAgY29uc29sZS5sb2coXCJ0YWtlIG1lIHRvIHRoZXJlOiBcIiArIGdyb3VwKVxuICAgIHdpbmRvdy5sb2NhdGlvbiA9IFwiL2VkaXRvci9wcm9qZWN0cy9cIiArIGdyb3VwICsgXCIvXCIgKyBcImNvbnRlbnQvXCJcblxuIyAgICAga3Vkb3M6IGh0dHA6Ly9qc2ZpZGRsZS5uZXQvb3N0YXBpc2NoZS80R0hHRi9cbiAgc2hvd1Rvb2x0aXA6IChldmVudCkgLT5cbiAgICBncm91cCA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKFwiZGF0YS1ncm91cFwiKVxuICAgIHRpdGxlID0gJChldmVudC50YXJnZXQpLmF0dHIoXCJ0aXRsZVwiKVxuICAgICMgICAgdG9vbHRpcElkID0gXCIjXCIgKyBncm91cCArIFwidG9vbHRpcFwiXG4gICAgIyAgICB0b29sdGlwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0b29sdGlwSWQpO1xuICAgICMgICAgdGV4dCA9IHRvb2x0aXAuaW5uZXJIVE1MXG4gICAgY29uc29sZS5sb2coXCJ0ZXh0OiBcIiArIHRpdGxlKVxuICAgICMgICAgdG9vbHRpcC5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmVcIjtcblxuICAgIHdpbmRvdy5wcm9tcHQoXCJDb3B5IHRvIGNsaXBib2FyZDogQ3RybCtDLCBFbnRlclwiLCB0aXRsZSk7XG4gICAgIyAgICBjb25zb2xlLmxvZyhcInN0dWZmXCIpO1xuICAgICMgICAgdG9vbHRpcC5zZWxlY3Q7XG5cbiAgICAjICAgIHRyeVxuICAgICMgICAgICBzdWNjZXNzZnVsID0gZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcbiAgICAjICAgICAgbXNnID0gc3VjY2Vzc2Z1bCA/ICdzdWNjZXNzZnVsJyA6ICd1bnN1Y2Nlc3NmdWwnO1xuICAgICMgICAgICBjb25zb2xlLmxvZygnQ29weWluZyB0ZXh0IGNvbW1hbmQgd2FzICcgKyBtc2cpO1xuICAgICMgICAgY2F0Y2ggZXJyXG4gICAgIyAgICAgIGNvbnNvbGUubG9nKCdPb3BzLCB1bmFibGUgdG8gY29weScpO1xuXG4gICAgcmV0dXJuXG5cbiAgbGVhdmVUb29sdGlwOiAoZXZlbnQpIC0+XG4gICAgZ3JvdXAgPSAkKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtZ3JvdXBcIilcbiAgICB0b29sdGlwSWQgPSBcIiNcIiArIGdyb3VwICsgXCJ0b29sdGlwXCJcbiAgICB0b29sdGlwID0gJCh0b29sdGlwSWQpO1xuICAgIHRvb2x0aXBbMF0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG4gIG5ld1Byb2plY3Q6IChldmVudCkgLT5cbiAgICBwcm9qZWN0TmFtZSA9ICQoJyNwcm9qZWN0TmFtZScpLnZhbCgpXG4gICAgY29uc29sZS5sb2coXCJwcm9qZWN0TmFtZTogXCIgKyBwcm9qZWN0TmFtZSlcbiAgICAkLmFqYXhcbiAgICAgIHVybDogXCIvZWRpdG9yL3Byb2plY3QvY3JlYXRlXCIsXG4gICAgICB0eXBlOiBcIlBPU1RcIlxuICAgICAgZGF0YVR5cGU6IFwianNvblwiXG4gICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KFxuICAgICAgICBwcm9qZWN0TmFtZSA6IHByb2plY3ROYW1lXG4gICAgICApXG4gICAgICBzdWNjZXNzOiAoIGRhdGEgKSA9PlxuICAgICAgICBjb25zb2xlLmxvZyhcIlByb2plY3QgY3JlYXRlZDogXCIgKyBKU09OLnN0cmluZ2lmeShkYXRhLmRpcnMpKVxuICAgICAgICBAcHJvamVjdHMgPSBkYXRhLmRpcnNcbiAgICAgICAgQCRlbC5maW5kKCcjZ3JvdXAtbGlzdC1jb250YWluZXInKS5odG1sIFwiXCJcbiAgICAgICAgQHJlbmRlckdyb3VwcyhcIlwiKVxuICAgICAgZXJyb3I6ICggZGF0YSApID0+XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUHJvamVjdCBjcmVhdGlvbiBlcnJvcjogXCIgKyBKU09OLnN0cmluZ2lmeShkYXRhKSlcbiAgICAgICAgYWxlcnQoXCJQcm9qZWN0IGNyZWF0aW9uIGVycm9yOiBcIiArIEpTT04uc3RyaW5naWZ5KGRhdGEpKVxuXG4jICAgICAgICA8ZGl2IGNsYXNzPSd0b29sdGlwJyBpZD0nI3tncm91cC5wcm9qZWN0TmFtZX10b29sdGlwJz4je2dyb3VwLmRhdEtleX08L2Rpdj48YnIvPlxuICByZW5kZXJHcm91cHM6IChtZXNzYWdlKSAtPlxuICAgIEAkZWwuZmluZCgnI2dyb3VwLWxpc3QtY29udGFpbmVyJykuaHRtbCBcIlxuICAgICAgPGgyPnYzIFByb2plY3RzPC9oMj4je21lc3NhZ2V9XG4gICAgICAgIDxwPkNyZWF0ZSBuZXcgcHJvamVjdDogPGlucHV0IHR5cGU9J3RleHQnIGlkPSdwcm9qZWN0TmFtZScgc3R5bGU9J3dpZHRoOiAyMDBweDsnPiA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIG5ld1Byb2plY3QnPkNyZWF0ZTwvYnV0dG9uPjwvcD5cXG5cbiAgICAgICAgPHA+UmlnaHQtY2xpY2sgb24gdGhlIHByb2plY3QgbmFtZSB0byB2aWV3IGl0cyBkYXQgaWQuPC9wPlxuICAgICAgICA8cD4je0Bwcm9qZWN0cy5tYXAoIChncm91cCkgLT4gXCI8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHZpZXdQcm9qZWN0JyBkYXRhLWdyb3VwPScje18uZXNjYXBlKGdyb3VwLnByb2plY3ROYW1lKX0nIHRpdGxlPScje2dyb3VwLmRhdEtleX0nPiN7Z3JvdXAucHJvamVjdE5hbWV9PC9idXR0b24+XCIpLmpvaW4oJycpfTwvcD5cbiAgICAgIDxoMj52MiBHcm91cHM8L2gyPlxuICAgICAgPGgzPkFkbWluPC9oMz5cbiAgICAgICAgPHA+I3tUYW5nZXJpbmUudXNlci5ncm91cHMoKS5hZG1pbi5tYXAoIChncm91cCkgLT4gXCI8YnV0dG9uIGNsYXNzPSdjb21tYW5kIGdvdG8nIGRhdGEtZ3JvdXA9JyN7Xy5lc2NhcGUoZ3JvdXApfSc+I3tncm91cH08L2J1dHRvbj5cIikuam9pbignJyl9PC9wPlxuICAgICAgPGgzPk1lbWJlcjwvaDM+XG4gICAgICAgICN7VGFuZ2VyaW5lLnVzZXIuZ3JvdXBzKCkubWVtYmVyLm1hcCggKGdyb3VwKSAtPiBcIjxidXR0b24gY2xhc3M9J2NvbW1hbmQgZ290bycgZGF0YS1ncm91cD0nI3tfLmVzY2FwZShncm91cCl9Jz4je2dyb3VwfTwvYnV0dG9uPlwiKS5qb2luKCcnKX1cbiAgICBcIlxuXG4gIHJlbmRlcjogLT5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgIDxidXR0b24gY2xhc3M9J2FjY291bnQgbmF2aWdhdGlvbic+QWNjb3VudDwvYnV0dG9uPlxuICAgICAgPGgxPkdyb3VwczwvaDE+XG4gICAgICA8ZGl2IGlkPSdncm91cC1hZGRlcic+PC9kaXY+XG4gICAgICA8ZGl2IGlkPSdncm91cC1saXN0LWNvbnRhaW5lcic+PGltZyBzcmM9J2ltYWdlcy9sb2FkaW5nLmdpZicgY2xhc3M9J2xvYWRpbmcnPjwvZGl2PlxuICAgIFwiXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuIiwidmFyIEdyb3Vwc1ZpZXcsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5Hcm91cHNWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKEdyb3Vwc1ZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIEdyb3Vwc1ZpZXcoKSB7XG4gICAgcmV0dXJuIEdyb3Vwc1ZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBHcm91cHNWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIkdyb3Vwc1ZpZXdcIjtcblxuICBHcm91cHNWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgJ2NsaWNrIC5hY2NvdW50JzogJ2dvdG9BY2NvdW50JyxcbiAgICAnY2xpY2sgLmdvdG8nOiAnZ290b0dyb3VwJyxcbiAgICAnY2xpY2sgLm5ld1Byb2plY3QnOiAnbmV3UHJvamVjdCcsXG4gICAgJ2NsaWNrIC52aWV3UHJvamVjdCc6ICd2aWV3UHJvamVjdCcsXG4gICAgJ2NvbnRleHRtZW51IC52aWV3UHJvamVjdCc6ICdzaG93VG9vbHRpcCdcbiAgfTtcblxuICBHcm91cHNWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgUm9iYmVydC5mZXRjaFVzZXJzO1xuICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgdXJsOiBcIi9lZGl0b3IvcHJvamVjdC9saXN0QWxsXCIsXG4gICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgX3RoaXMucHJvamVjdHMgPSBkYXRhO1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiUHJvamVjdHM6IFwiICsgSlNPTi5zdHJpbmdpZnkoX3RoaXMucHJvamVjdHMpKTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMucmVuZGVyR3JvdXBzKFwiXCIpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcyksXG4gICAgICBlcnJvcjogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICByZXR1cm4gYWxlcnQoXCJFcnJvcjogXCIgKyBlcnIpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcylcbiAgICB9KTtcbiAgfTtcblxuICBHcm91cHNWaWV3LnByb3RvdHlwZS5nb3RvQWNjb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwiYWNjb3VudFwiLCB0cnVlKTtcbiAgfTtcblxuICBHcm91cHNWaWV3LnByb3RvdHlwZS5nb3RvR3JvdXAgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBncm91cDtcbiAgICBncm91cCA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKFwiZGF0YS1ncm91cFwiKTtcbiAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uID0gVGFuZ2VyaW5lLnNldHRpbmdzLnVybEluZGV4KGdyb3VwLCBcImFzc2Vzc21lbnRzXCIpO1xuICB9O1xuXG4gIEdyb3Vwc1ZpZXcucHJvdG90eXBlLnZpZXdQcm9qZWN0ID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgZ3JvdXA7XG4gICAgZ3JvdXAgPSAkKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtZ3JvdXBcIik7XG4gICAgY29uc29sZS5sb2coXCJ0YWtlIG1lIHRvIHRoZXJlOiBcIiArIGdyb3VwKTtcbiAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uID0gXCIvZWRpdG9yL3Byb2plY3RzL1wiICsgZ3JvdXAgKyBcIi9cIiArIFwiY29udGVudC9cIjtcbiAgfTtcblxuICBHcm91cHNWaWV3LnByb3RvdHlwZS5zaG93VG9vbHRpcCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGdyb3VwLCB0aXRsZTtcbiAgICBncm91cCA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKFwiZGF0YS1ncm91cFwiKTtcbiAgICB0aXRsZSA9ICQoZXZlbnQudGFyZ2V0KS5hdHRyKFwidGl0bGVcIik7XG4gICAgY29uc29sZS5sb2coXCJ0ZXh0OiBcIiArIHRpdGxlKTtcbiAgICB3aW5kb3cucHJvbXB0KFwiQ29weSB0byBjbGlwYm9hcmQ6IEN0cmwrQywgRW50ZXJcIiwgdGl0bGUpO1xuICB9O1xuXG4gIEdyb3Vwc1ZpZXcucHJvdG90eXBlLmxlYXZlVG9vbHRpcCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIGdyb3VwLCB0b29sdGlwLCB0b29sdGlwSWQ7XG4gICAgZ3JvdXAgPSAkKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtZ3JvdXBcIik7XG4gICAgdG9vbHRpcElkID0gXCIjXCIgKyBncm91cCArIFwidG9vbHRpcFwiO1xuICAgIHRvb2x0aXAgPSAkKHRvb2x0aXBJZCk7XG4gICAgcmV0dXJuIHRvb2x0aXBbMF0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICB9O1xuXG4gIEdyb3Vwc1ZpZXcucHJvdG90eXBlLm5ld1Byb2plY3QgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBwcm9qZWN0TmFtZTtcbiAgICBwcm9qZWN0TmFtZSA9ICQoJyNwcm9qZWN0TmFtZScpLnZhbCgpO1xuICAgIGNvbnNvbGUubG9nKFwicHJvamVjdE5hbWU6IFwiICsgcHJvamVjdE5hbWUpO1xuICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgdXJsOiBcIi9lZGl0b3IvcHJvamVjdC9jcmVhdGVcIixcbiAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgY29udGVudFR5cGU6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBwcm9qZWN0TmFtZTogcHJvamVjdE5hbWVcbiAgICAgIH0pLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJQcm9qZWN0IGNyZWF0ZWQ6IFwiICsgSlNPTi5zdHJpbmdpZnkoZGF0YS5kaXJzKSk7XG4gICAgICAgICAgX3RoaXMucHJvamVjdHMgPSBkYXRhLmRpcnM7XG4gICAgICAgICAgX3RoaXMuJGVsLmZpbmQoJyNncm91cC1saXN0LWNvbnRhaW5lcicpLmh0bWwoXCJcIik7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlckdyb3VwcyhcIlwiKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiUHJvamVjdCBjcmVhdGlvbiBlcnJvcjogXCIgKyBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgICAgICAgcmV0dXJuIGFsZXJ0KFwiUHJvamVjdCBjcmVhdGlvbiBlcnJvcjogXCIgKyBKU09OLnN0cmluZ2lmeShkYXRhKSk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKVxuICAgIH0pO1xuICB9O1xuXG4gIEdyb3Vwc1ZpZXcucHJvdG90eXBlLnJlbmRlckdyb3VwcyA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZCgnI2dyb3VwLWxpc3QtY29udGFpbmVyJykuaHRtbChcIjxoMj52MyBQcm9qZWN0czwvaDI+XCIgKyBtZXNzYWdlICsgXCIgPHA+Q3JlYXRlIG5ldyBwcm9qZWN0OiA8aW5wdXQgdHlwZT0ndGV4dCcgaWQ9J3Byb2plY3ROYW1lJyBzdHlsZT0nd2lkdGg6IDIwMHB4Oyc+IDxidXR0b24gY2xhc3M9J2NvbW1hbmQgbmV3UHJvamVjdCc+Q3JlYXRlPC9idXR0b24+PC9wPlxcbiA8cD5SaWdodC1jbGljayBvbiB0aGUgcHJvamVjdCBuYW1lIHRvIHZpZXcgaXRzIGRhdCBpZC48L3A+IDxwPlwiICsgKHRoaXMucHJvamVjdHMubWFwKGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgICByZXR1cm4gXCI8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHZpZXdQcm9qZWN0JyBkYXRhLWdyb3VwPSdcIiArIChfLmVzY2FwZShncm91cC5wcm9qZWN0TmFtZSkpICsgXCInIHRpdGxlPSdcIiArIGdyb3VwLmRhdEtleSArIFwiJz5cIiArIGdyb3VwLnByb2plY3ROYW1lICsgXCI8L2J1dHRvbj5cIjtcbiAgICB9KS5qb2luKCcnKSkgKyBcIjwvcD4gPGgyPnYyIEdyb3VwczwvaDI+IDxoMz5BZG1pbjwvaDM+IDxwPlwiICsgKFRhbmdlcmluZS51c2VyLmdyb3VwcygpLmFkbWluLm1hcChmdW5jdGlvbihncm91cCkge1xuICAgICAgcmV0dXJuIFwiPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBnb3RvJyBkYXRhLWdyb3VwPSdcIiArIChfLmVzY2FwZShncm91cCkpICsgXCInPlwiICsgZ3JvdXAgKyBcIjwvYnV0dG9uPlwiO1xuICAgIH0pLmpvaW4oJycpKSArIFwiPC9wPiA8aDM+TWVtYmVyPC9oMz4gXCIgKyAoVGFuZ2VyaW5lLnVzZXIuZ3JvdXBzKCkubWVtYmVyLm1hcChmdW5jdGlvbihncm91cCkge1xuICAgICAgcmV0dXJuIFwiPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBnb3RvJyBkYXRhLWdyb3VwPSdcIiArIChfLmVzY2FwZShncm91cCkpICsgXCInPlwiICsgZ3JvdXAgKyBcIjwvYnV0dG9uPlwiO1xuICAgIH0pLmpvaW4oJycpKSk7XG4gIH07XG5cbiAgR3JvdXBzVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwuaHRtbChcIjxidXR0b24gY2xhc3M9J2FjY291bnQgbmF2aWdhdGlvbic+QWNjb3VudDwvYnV0dG9uPiA8aDE+R3JvdXBzPC9oMT4gPGRpdiBpZD0nZ3JvdXAtYWRkZXInPjwvZGl2PiA8ZGl2IGlkPSdncm91cC1saXN0LWNvbnRhaW5lcic+PGltZyBzcmM9J2ltYWdlcy9sb2FkaW5nLmdpZicgY2xhc3M9J2xvYWRpbmcnPjwvZGl2PlwiKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgcmV0dXJuIEdyb3Vwc1ZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBVc2Vyc01lbnVWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZTogXCJVc2Vyc01lbnVWaWV3XCJcblxuICBldmVudHM6XG4gICAgXCJjbGljayAuYWRtaW5cIiA6IFwic2VsZWN0QWRtaW5cIlxuICAgIFwiY2xpY2sgLnJlYWRlclwiIDogXCJzZWxlY3RSZWFkZXJcIlxuICAgIFwiY2xpY2sgI2FkZC1hZG1pblwiICAgICA6IFwiYWRkQWRtaW5cIlxuICAgIFwiY2xpY2sgI3JlbW92ZS1hZG1pblwiICA6IFwicmVtb3ZlQWRtaW5cIlxuICAgIFwiY2xpY2sgI2FkZC1tZW1iZXJcIiAgICA6IFwiYWRkTWVtYmVyXCJcbiAgICBcImNsaWNrICNyZW1vdmUtbWVtYmVyXCIgOiBcInJlbW92ZU1lbWJlclwiXG5cbiAgc2VsZWN0QWRtaW46ICggZXZlbnQgKSAtPlxuICAgIEAkZWwuZmluZChcIiNzZWxlY3RlZC1hZG1pblwiKS52YWwgJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLW5hbWVcIilcblxuICBzZWxlY3RSZWFkZXI6ICggZXZlbnQgKSAtPlxuICAgIEAkZWwuZmluZChcIiNzZWxlY3RlZC1tZW1iZXJcIikudmFsICQoZXZlbnQudGFyZ2V0KS5hdHRyKFwiZGF0YS1uYW1lXCIpXG5cbiAgYWRkQWRtaW46IC0+XG4gICAgdXNlciA9IEAkZWwuZmluZCgnI3NlbGVjdGVkLWFkbWluJykudmFsKClcbiAgICBSb2JiZXJ0LmFkZEFkbWluIHVzZXIsIEByZWZyZXNoVXNlcnNcblxuICByZW1vdmVBZG1pbjogLT5cbiAgICB1c2VyID0gQCRlbC5maW5kKCcjc2VsZWN0ZWQtYWRtaW4nKS52YWwoKVxuICAgIFJvYmJlcnQucmVtb3ZlQWRtaW4gdXNlciwgQHJlZnJlc2hVc2Vyc1xuXG4gIGFkZE1lbWJlcjogLT5cbiAgICB1c2VyID0gQCRlbC5maW5kKCcjc2VsZWN0ZWQtbWVtYmVyJykudmFsKClcbiAgICBSb2JiZXJ0LmFkZE1lbWJlciB1c2VyLCBAcmVmcmVzaFVzZXJzXG5cbiAgcmVtb3ZlTWVtYmVyOiAtPlxuICAgIHVzZXIgPSBAJGVsLmZpbmQoJyNzZWxlY3RlZC1tZW1iZXInKS52YWwoKVxuICAgIFJvYmJlcnQucmVtb3ZlTWVtYmVyIHVzZXIsIEByZWZyZXNoVXNlcnNcblxuICByZWZyZXNoVXNlcnM6ID0+XG4gICAgUm9iYmVydC5mZXRjaFVzZXJzIFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoJ2dyb3VwTmFtZScpLCAodXNlcnMpID0+IEByZW5kZXJVc2Vycyh1c2VycylcblxuICByZW5kZXJVc2VyczogKHVzZXJzKSAtPlxuXG4gICAgYWRtaW5IdG1sID0gdXNlcnMuYWRtaW4ubWFwKCAoYWRtaW4pIC0+XG4gICAgICBcIjxsaSBkYXRhLW5hbWU9JyN7Xy5lc2NhcGUoYWRtaW4pfScgY2xhc3M9J2FkbWluIGljb24nPiN7Xy5lc2NhcGUoYWRtaW4pfTwvbGk+XCJcbiAgICApLmpvaW4oJycpXG4gICAgaWYgdXNlcnMubWVtYmVyLmxlbmd0aCA9PSAwXG4gICAgICBtZW1iZXJIdG1sID0gXCI8c3BhbiBjbGFzcz0nZ3JleSc+Tm8gbWVtYmVycyB5ZXQuPC9zcGFuPlwiXG4gICAgZWxzZVxuICAgICAgbWVtYmVySHRtbCA9IHVzZXJzLm1lbWJlci5tYXAoIChtZW1iZXIpIC0+XG4gICAgICAgIFwiPGxpIGRhdGEtbmFtZT0nI3tfLmVzY2FwZShtZW1iZXIpfScgY2xhc3M9J21lbWJlciBpY29uJz4je18uZXNjYXBlKG1lbWJlcil9PC9saT5cIlxuICAgICAgKS5qb2luKCcnKVxuXG4gICAgQCRlbC5maW5kKCcjdXNlcnMtcm93JykuaHRtbCBcIlxuICAgICAgPHRkPjx1bCBpZD0nYWRtaW4tY29udGFpbmVyJyBtdWx0aXBsZT0nbXVsdGlwbGUnIHNpemU9JzUnPiN7YWRtaW5IdG1sfTwvdWw+PC90ZD5cbiAgICAgIDx0ZD48dWwgaWQ9J21lbWJlci1jb250YWluZXInIG11bHRpcGxlPSdtdWx0aXBsZScgc2l6ZT0nNSc+I3ttZW1iZXJIdG1sfTwvdWw+PC90ZD5cbiAgICBcIlxuXG4gIHJlbmRlcjogLT5cblxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGgxPlVzZXJzPC9oMT5cbiAgICAgIDx0YWJsZT5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRoPkFkbWluczwvdGg+XG4gICAgICAgIDx0aD5NZW1iZXJzPC90aD5cbiAgICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8aW5wdXQgaWQ9J3NlbGVjdGVkLWFkbWluJyAgdmFsdWU9Jyc+XG4gICAgICAgICAgPGJ1dHRvbiBpZD0nYWRkLWFkbWluJyBjbGFzcz0nY29tbWFuZCc+KzwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gaWQ9J3JlbW92ZS1hZG1pbicgY2xhc3M9J2NvbW1hbmQnPi08L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCBpZD0nc2VsZWN0ZWQtbWVtYmVyJyB2YWx1ZT0nJz5cbiAgICAgICAgICA8YnV0dG9uIGlkPSdhZGQtbWVtYmVyJyBjbGFzcz0nY29tbWFuZCc+KzwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gaWQ9J3JlbW92ZS1tZW1iZXInIGNsYXNzPSdjb21tYW5kJz4tPC9idXR0b24+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyIGlkPSd1c2Vycy1yb3cnPlxuICAgICAgPC90cj5cbiAgICBcIlxuXG4gICAgQHJlZnJlc2hVc2VycygpXG5cbiIsInZhciBVc2Vyc01lbnVWaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblVzZXJzTWVudVZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoVXNlcnNNZW51Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gVXNlcnNNZW51VmlldygpIHtcbiAgICB0aGlzLnJlZnJlc2hVc2VycyA9IGJpbmQodGhpcy5yZWZyZXNoVXNlcnMsIHRoaXMpO1xuICAgIHJldHVybiBVc2Vyc01lbnVWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgVXNlcnNNZW51Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJVc2Vyc01lbnVWaWV3XCI7XG5cbiAgVXNlcnNNZW51Vmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgIFwiY2xpY2sgLmFkbWluXCI6IFwic2VsZWN0QWRtaW5cIixcbiAgICBcImNsaWNrIC5yZWFkZXJcIjogXCJzZWxlY3RSZWFkZXJcIixcbiAgICBcImNsaWNrICNhZGQtYWRtaW5cIjogXCJhZGRBZG1pblwiLFxuICAgIFwiY2xpY2sgI3JlbW92ZS1hZG1pblwiOiBcInJlbW92ZUFkbWluXCIsXG4gICAgXCJjbGljayAjYWRkLW1lbWJlclwiOiBcImFkZE1lbWJlclwiLFxuICAgIFwiY2xpY2sgI3JlbW92ZS1tZW1iZXJcIjogXCJyZW1vdmVNZW1iZXJcIlxuICB9O1xuXG4gIFVzZXJzTWVudVZpZXcucHJvdG90eXBlLnNlbGVjdEFkbWluID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNzZWxlY3RlZC1hZG1pblwiKS52YWwoJChldmVudC50YXJnZXQpLmF0dHIoXCJkYXRhLW5hbWVcIikpO1xuICB9O1xuXG4gIFVzZXJzTWVudVZpZXcucHJvdG90eXBlLnNlbGVjdFJlYWRlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIjc2VsZWN0ZWQtbWVtYmVyXCIpLnZhbCgkKGV2ZW50LnRhcmdldCkuYXR0cihcImRhdGEtbmFtZVwiKSk7XG4gIH07XG5cbiAgVXNlcnNNZW51Vmlldy5wcm90b3R5cGUuYWRkQWRtaW4gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdXNlcjtcbiAgICB1c2VyID0gdGhpcy4kZWwuZmluZCgnI3NlbGVjdGVkLWFkbWluJykudmFsKCk7XG4gICAgcmV0dXJuIFJvYmJlcnQuYWRkQWRtaW4odXNlciwgdGhpcy5yZWZyZXNoVXNlcnMpO1xuICB9O1xuXG4gIFVzZXJzTWVudVZpZXcucHJvdG90eXBlLnJlbW92ZUFkbWluID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVzZXI7XG4gICAgdXNlciA9IHRoaXMuJGVsLmZpbmQoJyNzZWxlY3RlZC1hZG1pbicpLnZhbCgpO1xuICAgIHJldHVybiBSb2JiZXJ0LnJlbW92ZUFkbWluKHVzZXIsIHRoaXMucmVmcmVzaFVzZXJzKTtcbiAgfTtcblxuICBVc2Vyc01lbnVWaWV3LnByb3RvdHlwZS5hZGRNZW1iZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdXNlcjtcbiAgICB1c2VyID0gdGhpcy4kZWwuZmluZCgnI3NlbGVjdGVkLW1lbWJlcicpLnZhbCgpO1xuICAgIHJldHVybiBSb2JiZXJ0LmFkZE1lbWJlcih1c2VyLCB0aGlzLnJlZnJlc2hVc2Vycyk7XG4gIH07XG5cbiAgVXNlcnNNZW51Vmlldy5wcm90b3R5cGUucmVtb3ZlTWVtYmVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHVzZXI7XG4gICAgdXNlciA9IHRoaXMuJGVsLmZpbmQoJyNzZWxlY3RlZC1tZW1iZXInKS52YWwoKTtcbiAgICByZXR1cm4gUm9iYmVydC5yZW1vdmVNZW1iZXIodXNlciwgdGhpcy5yZWZyZXNoVXNlcnMpO1xuICB9O1xuXG4gIFVzZXJzTWVudVZpZXcucHJvdG90eXBlLnJlZnJlc2hVc2VycyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBSb2JiZXJ0LmZldGNoVXNlcnMoVGFuZ2VyaW5lLnNldHRpbmdzLmdldCgnZ3JvdXBOYW1lJyksIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHVzZXJzKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXJVc2Vycyh1c2Vycyk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuICBVc2Vyc01lbnVWaWV3LnByb3RvdHlwZS5yZW5kZXJVc2VycyA9IGZ1bmN0aW9uKHVzZXJzKSB7XG4gICAgdmFyIGFkbWluSHRtbCwgbWVtYmVySHRtbDtcbiAgICBhZG1pbkh0bWwgPSB1c2Vycy5hZG1pbi5tYXAoZnVuY3Rpb24oYWRtaW4pIHtcbiAgICAgIHJldHVybiBcIjxsaSBkYXRhLW5hbWU9J1wiICsgKF8uZXNjYXBlKGFkbWluKSkgKyBcIicgY2xhc3M9J2FkbWluIGljb24nPlwiICsgKF8uZXNjYXBlKGFkbWluKSkgKyBcIjwvbGk+XCI7XG4gICAgfSkuam9pbignJyk7XG4gICAgaWYgKHVzZXJzLm1lbWJlci5sZW5ndGggPT09IDApIHtcbiAgICAgIG1lbWJlckh0bWwgPSBcIjxzcGFuIGNsYXNzPSdncmV5Jz5ObyBtZW1iZXJzIHlldC48L3NwYW4+XCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1lbWJlckh0bWwgPSB1c2Vycy5tZW1iZXIubWFwKGZ1bmN0aW9uKG1lbWJlcikge1xuICAgICAgICByZXR1cm4gXCI8bGkgZGF0YS1uYW1lPSdcIiArIChfLmVzY2FwZShtZW1iZXIpKSArIFwiJyBjbGFzcz0nbWVtYmVyIGljb24nPlwiICsgKF8uZXNjYXBlKG1lbWJlcikpICsgXCI8L2xpPlwiO1xuICAgICAgfSkuam9pbignJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKCcjdXNlcnMtcm93JykuaHRtbChcIjx0ZD48dWwgaWQ9J2FkbWluLWNvbnRhaW5lcicgbXVsdGlwbGU9J211bHRpcGxlJyBzaXplPSc1Jz5cIiArIGFkbWluSHRtbCArIFwiPC91bD48L3RkPiA8dGQ+PHVsIGlkPSdtZW1iZXItY29udGFpbmVyJyBtdWx0aXBsZT0nbXVsdGlwbGUnIHNpemU9JzUnPlwiICsgbWVtYmVySHRtbCArIFwiPC91bD48L3RkPlwiKTtcbiAgfTtcblxuICBVc2Vyc01lbnVWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRlbC5odG1sKFwiPGgxPlVzZXJzPC9oMT4gPHRhYmxlPiA8dHI+IDx0aD5BZG1pbnM8L3RoPiA8dGg+TWVtYmVyczwvdGg+IDwvdHI+IDx0cj4gPHRkPiA8aW5wdXQgaWQ9J3NlbGVjdGVkLWFkbWluJyAgdmFsdWU9Jyc+IDxidXR0b24gaWQ9J2FkZC1hZG1pbicgY2xhc3M9J2NvbW1hbmQnPis8L2J1dHRvbj4gPGJ1dHRvbiBpZD0ncmVtb3ZlLWFkbWluJyBjbGFzcz0nY29tbWFuZCc+LTwvYnV0dG9uPiA8L3RkPiA8dGQ+IDxpbnB1dCBpZD0nc2VsZWN0ZWQtbWVtYmVyJyB2YWx1ZT0nJz4gPGJ1dHRvbiBpZD0nYWRkLW1lbWJlcicgY2xhc3M9J2NvbW1hbmQnPis8L2J1dHRvbj4gPGJ1dHRvbiBpZD0ncmVtb3ZlLW1lbWJlcicgY2xhc3M9J2NvbW1hbmQnPi08L2J1dHRvbj4gPC90ZD4gPC90cj4gPHRyIGlkPSd1c2Vycy1yb3cnPiA8L3RyPlwiKTtcbiAgICByZXR1cm4gdGhpcy5yZWZyZXNoVXNlcnMoKTtcbiAgfTtcblxuICByZXR1cm4gVXNlcnNNZW51VmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIEFzc2Vzc21lbnRQcmludFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcIkFzc2Vzc21lbnRQcmludFZpZXdcIlxuICBcbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgQGFib3J0QXNzZXNzbWVudCA9IGZhbHNlXG4gICAgQGluZGV4ID0gMFxuICAgIEBtb2RlbCA9IG9wdGlvbnMubW9kZWxcbiAgICBAZm9ybWF0ID0gb3B0aW9ucy5mb3JtYXRcblxuICAgIFRhbmdlcmluZS5hY3Rpdml0eSA9IFwiYXNzZXNzbWVudCBwcmludFwiXG4gICAgQHN1YnRlc3RWaWV3cyA9IFtdXG4gICAgQG1vZGVsLnN1YnRlc3RzLnNvcnQoKVxuICAgIEBtb2RlbC5zdWJ0ZXN0cy5lYWNoICggc3VidGVzdCApID0+XG4gICAgICBzdWJ0ZXN0VmlldyA9IG5ldyBTdWJ0ZXN0UHJpbnRWaWV3XG4gICAgICAgIG1vZGVsICA6IHN1YnRlc3RcbiAgICAgICAgcGFyZW50IDogQFxuICAgICAgICBmb3JtYXQgOiBAZm9ybWF0XG4gICAgICBzdWJ0ZXN0Vmlldy5vbiBcInJlbmRlcmVkXCIsICggdmlldyApID0+XG4gICAgICAgIHZpZXc/LmFmdGVyUmVuZGVyPygpXG4gICAgICBAc3VidGVzdFZpZXdzLnB1c2ggc3VidGVzdFZpZXdcbiAgXG4gIHJlbmRlcjogLT5cbiAgICBpZiBAbW9kZWwuc3VidGVzdHMubGVuZ3RoID09IDBcbiAgICAgIEAkZWwuYXBwZW5kIFwiPGgxPk9vcHMuLi48L2gxPjxwPlRoaXMgYXNzZXNzbWVudCBpcyBibGFuay4gUGVyaGFwcyB5b3UgbWVhbnQgdG8gYWRkIHNvbWUgc3VidGVzdHMuPC9wPlwiXG4gICAgZWxzZVxuICAgICAgQCRlbC5hZGRDbGFzcyhcImZvcm1hdC0je0Bmb3JtYXR9XCIpLmFwcGVuZCBcIlxuICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgQHBhZ2UgOnJpZ2h0IHsgQGJvdHRvbS1yaWdodC1jb3JuZXIge1xuICAgICAgICAgICAgY29udGVudDogY291bnRlcihwYWdlKSBcXFwiIG9mIFxcXCIgY291bnRlcihwYWdlcyk7XG4gICAgICAgICAgfX1cbiAgICAgICAgICB0YWJsZS5wcmludC1tZXRhZGF0YSB0ZHtcbiAgICAgICAgICAgIGJvcmRlcjogc29saWQgYmxhY2sgMXB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0YWJsZS5wcmludC1jb250ZW50LnF1ZXN0aW9uLWF0dHJpYnV0ZXN7XG4gICAgICAgICAgICBtYXJnaW46IDEwcHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRhYmxlLnByaW50LWNvbnRlbnQucXVlc3Rpb24tb3B0aW9uc3tcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGFibGUucHJpbnQtY29udGVudHtcbiAgICAgICAgICAgIGJvcmRlcjogc29saWQgYmxhY2sgMXB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0YWJsZS5wcmludC1jb250ZW50IHRke1xuICAgICAgICAgICAgYm9yZGVyOiBzb2xpZCBibGFjayAxcHg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC5Bc3Nlc3NtZW50UHJpbnRWaWV3ICNwcm90b3R5cGVfd3JhcHBlciAucHJpbnQtcGFnZS5jb250ZW50IHtcbiAgICAgICAgICAgIGhlaWdodDogYXV0bztcbiAgICAgICAgICB9XG4gICAgICAgIDwvc3R5bGU+XG4gICAgICAgIDxkaXYgY2xhc3M9J3ByaW50LXBhZ2UgI3tAZm9ybWF0fSc+XG4gICAgICAgICAgPGgyPiN7QG1vZGVsLmdldChcIm5hbWVcIikudGl0bGVpemUoKX08L2gyPlxuICAgICAgICAgIDxoMz5cbiAgICAgICAgICAgICN7XG4gICAgICAgICAgICAgIGlmIEBtb2RlbC5oYXMgXCJ1cGRhdGVkXCJcbiAgICAgICAgICAgICAgICBcIkxhc3QgVXBkYXRlZDogI3ttb21lbnQoQG1vZGVsLmdldCBcInVwZGF0ZWRcIil9XCJcbiAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIFwiXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L2gzPlxuICAgICAgICAgIDx0YWJsZSBjbGFzcz0nbWFya2luZy10YWJsZSc+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0ZCBzdHlsZT0ndmVydGljYWwtYWxpZ246bWlkZGxlJz5FbnVtZXJhdG9yIE5hbWU8L3RkPjx0ZCBjbGFzcz0nbWFya2luZy1hcmVhJz48L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGhyLz5cbiAgICAgIFwiXG4gICAgICBfLmVhY2ggQHN1YnRlc3RWaWV3cyAsIChzdWJ0ZXN0VmlldykgPT5cblxuICAgICAgICBzdWJ0ZXN0Vmlldy5yZW5kZXIoKVxuICAgICAgICBAJGVsLmFwcGVuZCBzdWJ0ZXN0Vmlldy5lbFxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgYWZ0ZXJSZW5kZXI6ID0+XG4gICAgXy5kZWxheSAoKSAtPlxuICAgICAgJCgnI25hdmlnYXRpb24nKS5oaWRlKClcbiAgICAgICQoJyNmb290ZXInKS5oaWRlKClcbiAgICAgLDEwMDBcbiIsInZhciBBc3Nlc3NtZW50UHJpbnRWaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkFzc2Vzc21lbnRQcmludFZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoQXNzZXNzbWVudFByaW50Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQXNzZXNzbWVudFByaW50VmlldygpIHtcbiAgICB0aGlzLmFmdGVyUmVuZGVyID0gYmluZCh0aGlzLmFmdGVyUmVuZGVyLCB0aGlzKTtcbiAgICByZXR1cm4gQXNzZXNzbWVudFByaW50Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEFzc2Vzc21lbnRQcmludFZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiQXNzZXNzbWVudFByaW50Vmlld1wiO1xuXG4gIEFzc2Vzc21lbnRQcmludFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5hYm9ydEFzc2Vzc21lbnQgPSBmYWxzZTtcbiAgICB0aGlzLmluZGV4ID0gMDtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICB0aGlzLmZvcm1hdCA9IG9wdGlvbnMuZm9ybWF0O1xuICAgIFRhbmdlcmluZS5hY3Rpdml0eSA9IFwiYXNzZXNzbWVudCBwcmludFwiO1xuICAgIHRoaXMuc3VidGVzdFZpZXdzID0gW107XG4gICAgdGhpcy5tb2RlbC5zdWJ0ZXN0cy5zb3J0KCk7XG4gICAgcmV0dXJuIHRoaXMubW9kZWwuc3VidGVzdHMuZWFjaCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzdWJ0ZXN0KSB7XG4gICAgICAgIHZhciBzdWJ0ZXN0VmlldztcbiAgICAgICAgc3VidGVzdFZpZXcgPSBuZXcgU3VidGVzdFByaW50Vmlldyh7XG4gICAgICAgICAgbW9kZWw6IHN1YnRlc3QsXG4gICAgICAgICAgcGFyZW50OiBfdGhpcyxcbiAgICAgICAgICBmb3JtYXQ6IF90aGlzLmZvcm1hdFxuICAgICAgICB9KTtcbiAgICAgICAgc3VidGVzdFZpZXcub24oXCJyZW5kZXJlZFwiLCBmdW5jdGlvbih2aWV3KSB7XG4gICAgICAgICAgcmV0dXJuIHZpZXcgIT0gbnVsbCA/IHR5cGVvZiB2aWV3LmFmdGVyUmVuZGVyID09PSBcImZ1bmN0aW9uXCIgPyB2aWV3LmFmdGVyUmVuZGVyKCkgOiB2b2lkIDAgOiB2b2lkIDA7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX3RoaXMuc3VidGVzdFZpZXdzLnB1c2goc3VidGVzdFZpZXcpO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gIH07XG5cbiAgQXNzZXNzbWVudFByaW50Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMubW9kZWwuc3VidGVzdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLiRlbC5hcHBlbmQoXCI8aDE+T29wcy4uLjwvaDE+PHA+VGhpcyBhc3Nlc3NtZW50IGlzIGJsYW5rLiBQZXJoYXBzIHlvdSBtZWFudCB0byBhZGQgc29tZSBzdWJ0ZXN0cy48L3A+XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbC5hZGRDbGFzcyhcImZvcm1hdC1cIiArIHRoaXMuZm9ybWF0KS5hcHBlbmQoXCI8c3R5bGU+IEBwYWdlIDpyaWdodCB7IEBib3R0b20tcmlnaHQtY29ybmVyIHsgY29udGVudDogY291bnRlcihwYWdlKSBcXFwiIG9mIFxcXCIgY291bnRlcihwYWdlcyk7IH19IHRhYmxlLnByaW50LW1ldGFkYXRhIHRkeyBib3JkZXI6IHNvbGlkIGJsYWNrIDFweDsgfSB0YWJsZS5wcmludC1jb250ZW50LnF1ZXN0aW9uLWF0dHJpYnV0ZXN7IG1hcmdpbjogMTBweDsgfSB0YWJsZS5wcmludC1jb250ZW50LnF1ZXN0aW9uLW9wdGlvbnN7IG1hcmdpbi1ib3R0b206IDVweDsgfSB0YWJsZS5wcmludC1jb250ZW50eyBib3JkZXI6IHNvbGlkIGJsYWNrIDFweDsgfSB0YWJsZS5wcmludC1jb250ZW50IHRkeyBib3JkZXI6IHNvbGlkIGJsYWNrIDFweDsgfSAuQXNzZXNzbWVudFByaW50VmlldyAjcHJvdG90eXBlX3dyYXBwZXIgLnByaW50LXBhZ2UuY29udGVudCB7IGhlaWdodDogYXV0bzsgfSA8L3N0eWxlPiA8ZGl2IGNsYXNzPSdwcmludC1wYWdlIFwiICsgdGhpcy5mb3JtYXQgKyBcIic+IDxoMj5cIiArICh0aGlzLm1vZGVsLmdldChcIm5hbWVcIikudGl0bGVpemUoKSkgKyBcIjwvaDI+IDxoMz4gXCIgKyAodGhpcy5tb2RlbC5oYXMoXCJ1cGRhdGVkXCIpID8gXCJMYXN0IFVwZGF0ZWQ6IFwiICsgKG1vbWVudCh0aGlzLm1vZGVsLmdldChcInVwZGF0ZWRcIikpKSA6IFwiXCIpICsgXCIgPC9oMz4gPHRhYmxlIGNsYXNzPSdtYXJraW5nLXRhYmxlJz4gPHRyPiA8dGQgc3R5bGU9J3ZlcnRpY2FsLWFsaWduOm1pZGRsZSc+RW51bWVyYXRvciBOYW1lPC90ZD48dGQgY2xhc3M9J21hcmtpbmctYXJlYSc+PC90ZD4gPC90cj4gPC90YWJsZT4gPC9kaXY+IDxoci8+XCIpO1xuICAgICAgXy5lYWNoKHRoaXMuc3VidGVzdFZpZXdzLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN1YnRlc3RWaWV3KSB7XG4gICAgICAgICAgc3VidGVzdFZpZXcucmVuZGVyKCk7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLiRlbC5hcHBlbmQoc3VidGVzdFZpZXcuZWwpO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgQXNzZXNzbWVudFByaW50Vmlldy5wcm90b3R5cGUuYWZ0ZXJSZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXy5kZWxheShmdW5jdGlvbigpIHtcbiAgICAgICQoJyNuYXZpZ2F0aW9uJykuaGlkZSgpO1xuICAgICAgcmV0dXJuICQoJyNmb290ZXInKS5oaWRlKCk7XG4gICAgfSwgMTAwMCk7XG4gIH07XG5cbiAgcmV0dXJuIEFzc2Vzc21lbnRQcmludFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBRdWVzdGlvblByaW50VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuIyAgY2xhc3NOYW1lOiBcInF1ZXN0aW9uIGJ1dHRvbnNldFwiXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgQG1vZGVsID0gb3B0aW9ucy5tb2RlbFxuXG4gICAgQGFuc3dlciAgID0ge31cbiAgICBAbmFtZSAgICAgPSBAbW9kZWwuZXNjYXBlKFwibmFtZVwiKS5yZXBsYWNlIC9bXkEtWmEtejAtOV9dL2csIFwiLVwiXG4gICAgQHR5cGUgICAgID0gQG1vZGVsLmdldCBcInR5cGVcIlxuICAgIEBvcHRpb25zICA9IEBtb2RlbC5nZXQgXCJvcHRpb25zXCJcbiAgICBAbm90QXNrZWQgPSBvcHRpb25zLm5vdEFza2VkXG4gICAgQGlzT2JzZXJ2YXRpb24gPSBvcHRpb25zLmlzT2JzZXJ2YXRpb25cbiAgICBAcGFyZW50ID0gb3B0aW9ucy5wYXJlbnRcblxuXG4gICAgaWYgQG1vZGVsLmdldChcInNraXBwYWJsZVwiKSA9PSBcInRydWVcIiB8fCBAbW9kZWwuZ2V0KFwic2tpcHBhYmxlXCIpID09IHRydWVcbiAgICAgIEBpc1ZhbGlkID0gdHJ1ZVxuICAgICAgQHNraXBwZWQgPSB0cnVlXG4gICAgZWxzZVxuICAgICAgQGlzVmFsaWQgPSBmYWxzZVxuICAgICAgQHNraXBwZWQgPSBmYWxzZVxuICAgIFxuICAgIGlmIEBub3RBc2tlZCA9PSB0cnVlXG4gICAgICBAaXNWYWxpZCA9IHRydWVcbiAgICAgIEB1cGRhdGVSZXN1bHQoKVxuICAgIFxuICB1cGRhdGU6IChldmVudCkgLT5cbiAgICBAdXBkYXRlUmVzdWx0KClcbiAgICBAdXBkYXRlVmFsaWRpdHkoKVxuICAgIEB0cmlnZ2VyIFwiYW5zd2VyXCIsIGV2ZW50LCBAbW9kZWwuZ2V0KFwib3JkZXJcIilcblxuICByZW5kZXI6IC0+XG5cbiAgICBAJGVsLmF0dHIgXCJpZFwiLCBcInF1ZXN0aW9uLSN7QG5hbWV9XCJcblxuICAgIHVubGVzcyBAbm90QXNrZWRcblxuICAgICAgaWYgQHBhcmVudC5mb3JtYXQgaXMgXCJzdGltdWxpXCJcbiAgICAgICAgQCRlbC5odG1sIFwiXG4gICAgICAgICAgPGRpdiBjbGFzcz0nc3RpbXVsaS1xdWVzdGlvbic+I3tAbW9kZWwuZ2V0ICdwcm9tcHQnfTwvZGl2PlxuICAgICAgICBcIlxuXG4gICAgICBlbHNlIGlmIEBwYXJlbnQuZm9ybWF0IGlzIFwiYmFja3VwXCJcbiAgICAgICAgQCRlbC5odG1sIFwiXG4gICAgICAgICAgPGRpdiBjbGFzcz0nYmFja3VwLXF1ZXN0aW9uJz5cbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAje0Btb2RlbC5nZXQgJ3Byb21wdCd9XG4gICAgICAgICAgICAgICN7IGlmIEBtb2RlbC5nZXQoJ2hpbnQnKSBpc250IFwiXCIgdGhlbiBcIigje0Btb2RlbC5nZXQgJ2hpbnQnfSlcIiBlbHNlIFwiXCJ9XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAje1xuICAgICAgICAgICAgICBpZiBAbW9kZWwuZ2V0KCd0eXBlJykgaXMgXCJvcGVuXCJcbiAgICAgICAgICAgICAgICBcIjx0YWJsZT5cbiAgICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSdwcmludC1xdWVzdGlvbi1sYWJlbCc+PC90ZD4gXG4gICAgICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdmcmVlLXRleHQnPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICA8L3RhYmxlPlwiXG4gICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBfLm1hcChAbW9kZWwuZ2V0KCdvcHRpb25zJyksIChvcHRpb24pID0+XG4gICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdiYWNrdXAtcXVlc3Rpb24tY2hlY2tib3gtbGFiZWwnPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdjaGVja2JveCc+Jm5ic3A7PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdwcmludC1xdWVzdGlvbi1sYWJlbCc+PHNwYW4gY2xhc3M9J3ByaW50LXF1ZXN0aW9uLW9wdGlvbic+I3tvcHRpb24ubGFiZWx9PHNwYW4+PC9zcGFuPiBcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICkuam9pbihcIlwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgXCJcblxuICAgICAgZWxzZSBpZiBAcGFyZW50LmZvcm1hdCBpcyBcIm1ldGFkYXRhXCJcbiAgICAgICAgQCRlbC5odG1sIFwiXG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgI3tcbiAgICAgICAgICAgICAgW1wibmFtZVwiLCBcInByb21wdFwiLCBcInR5cGVcIiwgXCJoaW50XCIsIFwibGlua2VkR3JpZFNjb3JlXCJdLm1hcCggKGF0dHJpYnV0ZSkgPT5cbiAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgPHRkPiN7QG1vZGVsLmdldCBhdHRyaWJ1dGV9PC90ZD5cbiAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICApLmpvaW4oXCJcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICN7XG4gICAgICAgICAgICAgICAgICBfLm1hcChAbW9kZWwuZ2V0KCdvcHRpb25zJyksIChvcHRpb24pIC0+XG4gICAgICAgICAgICAgICAgICAgIFwiI3tvcHRpb24udmFsdWV9IFxcXCIje29wdGlvbi5sYWJlbH1cXFwiIFwiXG4gICAgICAgICAgICAgICAgICApLmpvaW4oXCJcIilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgXCJcblxuXG4gICAgICBlbHNlIGlmIEBwYXJlbnQuZm9ybWF0IGlzIFwiY29udGVudFwiXG5cbiAgICAgICAgQCRlbC5odG1sIFwiXG4gICAgICAgICAgPHRhYmxlIGNsYXNzPSdwcmludC1jb250ZW50IHF1ZXN0aW9uLWF0dHJpYnV0ZXMnPlxuICAgICAgICAgICAgI3tcbiAgICAgICAgICAgICAgXyhcInByb21wdCwgbmFtZSwgaGludCwgdHlwZSwgc2tpcExvZ2ljLCBza2lwcGFibGUsIGN1c3RvbVZhbGlkYXRpb25Db2RlLCBjdXN0b21WYWxpZGF0aW9uTWVzc2FnZVwiLnNwbGl0KC8sICovKSkubWFwKCAoYXR0cmlidXRlKSA9PlxuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ncXVlc3Rpb24tYXR0cmlidXRlJz4je2F0dHJpYnV0ZS51bmRlcnNjb3JlKCkudGl0bGVpemUoKX08L3RkPlxuICAgICAgICAgICAgICAgICAgICA8dGQ+I3tAbW9kZWwuZ2V0IGF0dHJpYnV0ZX08L3RkPlxuICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICApLmpvaW4oXCJcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRkIGNsYXNzPSdxdWVzdGlvbi1hdHRyaWJ1dGUnPkFjdGlvbiBvbiBEaXNwbGF5PC90ZD5cbiAgICAgICAgICAgICAgPHRkPjxwcmUgc3R5bGU9J2ZvbnQtc2l6ZTo4MCUnPiN7QG1vZGVsLmdldChcImRpc3BsYXlDb2RlXCIpIHx8IFwiXCJ9PC9wcmU+PC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0ZD5PcHRpb25zPC90ZD5cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgIDwhLS0gSGFpbCBGbHlpbmcgU3BhZ2hldHRpIE1vbnN0ZXIsIFBsZWFzZSBmb3JnaXZlIG1lIGZvciBteSBuZXN0ZWQgdGFibGUgLS0+XG4gICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSdwcmludC1jb250ZW50IHF1ZXN0aW9uLW9wdGlvbnMnPlxuICAgICAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgICAgPHRkPkxhYmVsPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICA8dGQ+VmFsdWU8L3RkPlxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICAje1xuICAgICAgICAgICAgICAgICAgICAgIF8ubWFwKEBtb2RlbC5nZXQoJ29wdGlvbnMnKSwgKG9wdGlvbikgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+I3tvcHRpb24ubGFiZWx9PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+I3tvcHRpb24udmFsdWV9PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgKS5qb2luKFwiXCIpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgXCJcblxuICAgIGVsc2VcbiAgICAgIEAkZWwuaGlkZSgpXG5cblxuICAgIEB0cmlnZ2VyIFwicmVuZGVyZWRcIlxuICBcbiIsInZhciBRdWVzdGlvblByaW50VmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblF1ZXN0aW9uUHJpbnRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFF1ZXN0aW9uUHJpbnRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBRdWVzdGlvblByaW50VmlldygpIHtcbiAgICByZXR1cm4gUXVlc3Rpb25QcmludFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBRdWVzdGlvblByaW50Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICB0aGlzLmFuc3dlciA9IHt9O1xuICAgIHRoaXMubmFtZSA9IHRoaXMubW9kZWwuZXNjYXBlKFwibmFtZVwiKS5yZXBsYWNlKC9bXkEtWmEtejAtOV9dL2csIFwiLVwiKTtcbiAgICB0aGlzLnR5cGUgPSB0aGlzLm1vZGVsLmdldChcInR5cGVcIik7XG4gICAgdGhpcy5vcHRpb25zID0gdGhpcy5tb2RlbC5nZXQoXCJvcHRpb25zXCIpO1xuICAgIHRoaXMubm90QXNrZWQgPSBvcHRpb25zLm5vdEFza2VkO1xuICAgIHRoaXMuaXNPYnNlcnZhdGlvbiA9IG9wdGlvbnMuaXNPYnNlcnZhdGlvbjtcbiAgICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICAgIGlmICh0aGlzLm1vZGVsLmdldChcInNraXBwYWJsZVwiKSA9PT0gXCJ0cnVlXCIgfHwgdGhpcy5tb2RlbC5nZXQoXCJza2lwcGFibGVcIikgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuaXNWYWxpZCA9IHRydWU7XG4gICAgICB0aGlzLnNraXBwZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlzVmFsaWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2tpcHBlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5ub3RBc2tlZCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5pc1ZhbGlkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLnVwZGF0ZVJlc3VsdCgpO1xuICAgIH1cbiAgfTtcblxuICBRdWVzdGlvblByaW50Vmlldy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB0aGlzLnVwZGF0ZVJlc3VsdCgpO1xuICAgIHRoaXMudXBkYXRlVmFsaWRpdHkoKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwiYW5zd2VyXCIsIGV2ZW50LCB0aGlzLm1vZGVsLmdldChcIm9yZGVyXCIpKTtcbiAgfTtcblxuICBRdWVzdGlvblByaW50Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kZWwuYXR0cihcImlkXCIsIFwicXVlc3Rpb24tXCIgKyB0aGlzLm5hbWUpO1xuICAgIGlmICghdGhpcy5ub3RBc2tlZCkge1xuICAgICAgaWYgKHRoaXMucGFyZW50LmZvcm1hdCA9PT0gXCJzdGltdWxpXCIpIHtcbiAgICAgICAgdGhpcy4kZWwuaHRtbChcIjxkaXYgY2xhc3M9J3N0aW11bGktcXVlc3Rpb24nPlwiICsgKHRoaXMubW9kZWwuZ2V0KCdwcm9tcHQnKSkgKyBcIjwvZGl2PlwiKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wYXJlbnQuZm9ybWF0ID09PSBcImJhY2t1cFwiKSB7XG4gICAgICAgIHRoaXMuJGVsLmh0bWwoXCI8ZGl2IGNsYXNzPSdiYWNrdXAtcXVlc3Rpb24nPiA8cD4gXCIgKyAodGhpcy5tb2RlbC5nZXQoJ3Byb21wdCcpKSArIFwiIFwiICsgKHRoaXMubW9kZWwuZ2V0KCdoaW50JykgIT09IFwiXCIgPyBcIihcIiArICh0aGlzLm1vZGVsLmdldCgnaGludCcpKSArIFwiKVwiIDogXCJcIikgKyBcIiA8L3A+IFwiICsgKHRoaXMubW9kZWwuZ2V0KCd0eXBlJykgPT09IFwib3BlblwiID8gXCI8dGFibGU+IDx0cj4gPHRkIGNsYXNzPSdwcmludC1xdWVzdGlvbi1sYWJlbCc+PC90ZD4gPHRkPiA8ZGl2IGNsYXNzPSdmcmVlLXRleHQnPjwvZGl2PiA8L3RkPiA8L3RyPiA8L3RhYmxlPlwiIDogXy5tYXAodGhpcy5tb2RlbC5nZXQoJ29wdGlvbnMnKSwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIFwiPGRpdiBjbGFzcz0nYmFja3VwLXF1ZXN0aW9uLWNoZWNrYm94LWxhYmVsJz4gPHNwYW4gY2xhc3M9J2NoZWNrYm94Jz4mbmJzcDs8L3NwYW4+IDxzcGFuIGNsYXNzPSdwcmludC1xdWVzdGlvbi1sYWJlbCc+PHNwYW4gY2xhc3M9J3ByaW50LXF1ZXN0aW9uLW9wdGlvbic+XCIgKyBvcHRpb24ubGFiZWwgKyBcIjxzcGFuPjwvc3Bhbj4gPC9kaXY+XCI7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcykpLmpvaW4oXCJcIikpICsgXCIgPC90YWJsZT4gPC9kaXY+XCIpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnBhcmVudC5mb3JtYXQgPT09IFwibWV0YWRhdGFcIikge1xuICAgICAgICB0aGlzLiRlbC5odG1sKFwiPHRyPiBcIiArIChbXCJuYW1lXCIsIFwicHJvbXB0XCIsIFwidHlwZVwiLCBcImhpbnRcIiwgXCJsaW5rZWRHcmlkU2NvcmVcIl0ubWFwKChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIjx0ZD5cIiArIChfdGhpcy5tb2RlbC5nZXQoYXR0cmlidXRlKSkgKyBcIjwvdGQ+XCI7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSkodGhpcykpLmpvaW4oXCJcIikpICsgXCIgPHRkPiBcIiArIChfLm1hcCh0aGlzLm1vZGVsLmdldCgnb3B0aW9ucycpLCBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICByZXR1cm4gb3B0aW9uLnZhbHVlICsgXCIgXFxcIlwiICsgb3B0aW9uLmxhYmVsICsgXCJcXFwiIFwiO1xuICAgICAgICB9KS5qb2luKFwiXCIpKSArIFwiIDwvdGQ+IDwvdHI+XCIpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnBhcmVudC5mb3JtYXQgPT09IFwiY29udGVudFwiKSB7XG4gICAgICAgIHRoaXMuJGVsLmh0bWwoXCI8dGFibGUgY2xhc3M9J3ByaW50LWNvbnRlbnQgcXVlc3Rpb24tYXR0cmlidXRlcyc+IFwiICsgKF8oXCJwcm9tcHQsIG5hbWUsIGhpbnQsIHR5cGUsIHNraXBMb2dpYywgc2tpcHBhYmxlLCBjdXN0b21WYWxpZGF0aW9uQ29kZSwgY3VzdG9tVmFsaWRhdGlvbk1lc3NhZ2VcIi5zcGxpdCgvLCAqLykpLm1hcCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oYXR0cmlidXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gXCI8dHI+IDx0ZCBjbGFzcz0ncXVlc3Rpb24tYXR0cmlidXRlJz5cIiArIChhdHRyaWJ1dGUudW5kZXJzY29yZSgpLnRpdGxlaXplKCkpICsgXCI8L3RkPiA8dGQ+XCIgKyAoX3RoaXMubW9kZWwuZ2V0KGF0dHJpYnV0ZSkpICsgXCI8L3RkPiA8L3RyPlwiO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pKHRoaXMpKS5qb2luKFwiXCIpKSArIFwiIDx0cj4gPHRkIGNsYXNzPSdxdWVzdGlvbi1hdHRyaWJ1dGUnPkFjdGlvbiBvbiBEaXNwbGF5PC90ZD4gPHRkPjxwcmUgc3R5bGU9J2ZvbnQtc2l6ZTo4MCUnPlwiICsgKHRoaXMubW9kZWwuZ2V0KFwiZGlzcGxheUNvZGVcIikgfHwgXCJcIikgKyBcIjwvcHJlPjwvdGQ+IDwvdHI+IDx0cj4gPHRkPk9wdGlvbnM8L3RkPiA8dGQ+IDwhLS0gSGFpbCBGbHlpbmcgU3BhZ2hldHRpIE1vbnN0ZXIsIFBsZWFzZSBmb3JnaXZlIG1lIGZvciBteSBuZXN0ZWQgdGFibGUgLS0+IDx0YWJsZSBjbGFzcz0ncHJpbnQtY29udGVudCBxdWVzdGlvbi1vcHRpb25zJz4gPHRib2R5PiA8dHI+IDx0ZD5MYWJlbDwvdGQ+IDx0ZD5WYWx1ZTwvdGQ+IDwvdHI+IFwiICsgKF8ubWFwKHRoaXMubW9kZWwuZ2V0KCdvcHRpb25zJyksIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgIHJldHVybiBcIjx0cj4gPHRkPlwiICsgb3B0aW9uLmxhYmVsICsgXCI8L3RkPiA8dGQ+XCIgKyBvcHRpb24udmFsdWUgKyBcIjwvdGQ+IDwvdHI+XCI7XG4gICAgICAgIH0pLmpvaW4oXCJcIikpICsgXCIgPC90Ym9keT4gPC90YWJsZT4gPC90ZD4gPC90cj4gPC90YWJsZT5cIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsLmhpZGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIHJldHVybiBRdWVzdGlvblByaW50VmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsImNsYXNzIEdyaWRQcmludFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcImdyaWRfcHJvdG90eXBlXCJcblxuICBpbml0aWFsaXplOiAob3B0aW9ucykgLT5cbiAgICBAbW9kZWwgID0gb3B0aW9ucy5tb2RlbFxuICAgIEBwYXJlbnQgPSBvcHRpb25zLnBhcmVudFxuXG4gIHJlbmRlcjogLT5cbiAgICBzd2l0Y2ggQGZvcm1hdFxuICAgICAgd2hlbiBcImNvbnRlbnRcIiB0aGVuIEByZW5kZXJDb250ZW50KClcbiAgICAgIHdoZW4gXCJzdGltdWxpXCIgdGhlbiBAcmVuZGVyU3RpbXVsaSgpXG4gICAgICB3aGVuIFwiYmFja3VwXCIgIHRoZW4gQHJlbmRlckJhY2t1cCgpXG4gICAgQHBhcmVudC50cmlnZ2VyIFwicmVuZGVyZWRcIiwgQFxuXG4gIFxuICByZW5kZXJTdGltdWxpOiAtPlxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGRpdiBpZD0nI3tAbW9kZWwuZ2V0IFwiX2lkXCJ9JyBjbGFzcz0ncHJpbnQtcGFnZSBzdGltdWx1cy1ncmlkJz5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICN7XG4gICAgICAgICAgICAgIGluZGV4ID0gMFxuICAgICAgICAgICAgICBfLm1hcChAbW9kZWwuZ2V0KFwiaXRlbXNcIiksIChpdGVtKSA9PlxuICAgICAgICAgICAgICAgIGluZGV4ICs9IDFcbiAgICAgICAgICAgICAgICBpdGVtVGV4dCA9IFwiPHRkIGNsYXNzPSdpdGVtJz4je2l0ZW19PC90ZD5cIlxuICAgICAgICAgICAgICAgIGlmIGluZGV4ICUgQG1vZGVsLmdldChcImNvbHVtbnNcIikgaXMgMCBhbmQgaW5kZXggaXNudCBAbW9kZWwuZ2V0KFwiaXRlbXNcIikubGVuZ3RoIHRoZW4gaXRlbVRleHQgKz0gXCI8L3RyPjx0cj5cIiBlbHNlIFwiXCJcbiAgICAgICAgICAgICAgICBpdGVtVGV4dFxuICAgICAgICAgICAgICApLmpvaW4oXCJcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgXCJcblxuICAgIF8uZGVsYXkgPT5cbiAgICAgIG92ZXJmbG93ID0gMTAwXG4gICAgICBpbmNyZW1lbnRBbW91bnQgPSAzXG4gICAgICBjb25zb2xlLmxvZyBcIlRBUkdFVDogXCIgKyAkKFwiIyN7QG1vZGVsLmdldCBcIl9pZFwifVwiKVswXS5zY3JvbGxIZWlnaHRcbiAgICAgIHdoaWxlICQoXCIjI3tAbW9kZWwuZ2V0IFwiX2lkXCJ9XCIpWzBdLnNjcm9sbFdpZHRoID4gJChcIiMje0Btb2RlbC5nZXQgXCJfaWRcIn0gdGFibGVcIikuaW5uZXJXaWR0aCgpIGFuZCAgJChcIiMje0Btb2RlbC5nZXQgXCJfaWRcIn1cIilbMF0uc2Nyb2xsSGVpZ2h0ID4gJChcIiMje0Btb2RlbC5nZXQgXCJfaWRcIn0gdGFibGVcIikuaW5uZXJIZWlnaHQoKVxuICAgICAgICBjb25zb2xlLmxvZyAkKFwiIyN7QG1vZGVsLmdldCBcIl9pZFwifSB0YWJsZVwiKS5pbm5lckhlaWdodCgpXG4gICAgICAgIGJyZWFrIGlmIChvdmVyZmxvdy09MSkgaXMgMFxuXG4gICAgICAgIGN1cnJlbnRTaXplID0gJChcIiMje0Btb2RlbC5nZXQgXCJfaWRcIn0gdGRcIikuY3NzKFwiZm9udC1zaXplXCIpXG4gICAgICAgICMgSW5jcmVhc2UgYnkgaW5jcmVtZW50QW1vdW50XG4gICAgICAgICQoXCIjI3tAbW9kZWwuZ2V0IFwiX2lkXCJ9IHRkXCIpLmNzcyhcImZvbnQtc2l6ZVwiLCBcIiN7cGFyc2VJbnQoY3VycmVudFNpemUpK2luY3JlbWVudEFtb3VudH1weFwiKVxuICAgICAgY3VycmVudFNpemUgPSAkKFwiIyN7QG1vZGVsLmdldCBcIl9pZFwifSB0ZFwiKS5jc3MoXCJmb250LXNpemVcIilcbiAgICAgICQoXCIjI3tAbW9kZWwuZ2V0IFwiX2lkXCJ9IHRkXCIpLmNzcyhcImZvbnQtc2l6ZVwiLCBcIiN7cGFyc2VJbnQoY3VycmVudFNpemUpLTIqKGluY3JlbWVudEFtb3VudCl9cHhcIilcbiAgICAsMTAwMFxuXG4gIHJlbmRlckNvbnRlbnQ6IC0+XG4gICAgZmllbGRzID0gXCJhdXRvc3RvcFxuICAgIGNhcHR1cmVBZnRlclNlY29uZHNcbiAgICBjYXB0dXJlSXRlbUF0VGltZVxuICAgIGNvbHVtbnNcbiAgICBlbmRPZkxpbmVcbiAgICBmb250U2l6ZVxuICAgIGxheW91dE1vZGVcbiAgICBvcmRlclxuICAgIHJhbmRvbWl6ZVxuICAgIHRpbWVyXG4gICAgdmFyaWFibGVOYW1lXCJcblxuICAgIGZpZWxkcyA9IGZpZWxkcy5zcGxpdCgvXFwgKy8pXG5cbiAgICBAJGVsLmh0bWwgXCJcbiAgICAgIFByb3BlcnRpZXM6PGJyLz5cbiAgICAgIDx0YWJsZT5cbiAgICAgICN7XG4gICAgICAgIF8ubWFwKGZpZWxkcywgKGZpZWxkKSA9PlxuICAgICAgICAgIFwiPHRyPjx0ZD4je2ZpZWxkfTwvdGQ+PHRkPiN7QG1vZGVsLmdldCBmaWVsZH08L3RkPjwvdHI+XCJcbiAgICAgICAgKS5qb2luKFwiXCIpXG4gICAgICB9XG4gICAgICA8L3RhYmxlPlxuICAgICAgSXRlbXM6PGJyLz5cbiAgICAgICN7XG4gICAgICAgIF8ubWFwKEBtb2RlbC5nZXQoXCJpdGVtc1wiKSwgKGl0ZW0pIC0+XG4gICAgICAgICAgaXRlbVxuICAgICAgICApLmpvaW4oXCIsIFwiKVxuICAgICAgfVxuICAgIFwiXG4gICAgXG4gIHJlbmRlckJhY2t1cDogLT5cblxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgICA8dGFibGUgY2xhc3M9J3ByaW50LWdyaWQnPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICN7XG4gICAgICAgICAgICAgIGluZGV4ID0gMFxuICAgICAgICAgICAgICBfLm1hcChAbW9kZWwuZ2V0KFwiaXRlbXNcIiksIChpdGVtKSA9PlxuICAgICAgICAgICAgICAgIGluZGV4ICs9IDFcbiAgICAgICAgICAgICAgICBpdGVtVGV4dCA9IFwiPHRkIGNsYXNzPSdpdGVtJz4je2l0ZW19PC90ZD5cIlxuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cgQG1vZGVsLmdldChcImNvbHVtbnNcIilcbiAgICAgICAgICAgICAgICBpZiBpbmRleCAlIEBtb2RlbC5nZXQoXCJjb2x1bW5zXCIpIGlzIDAgYW5kIGluZGV4IGlzbnQgQG1vZGVsLmdldChcIml0ZW1zXCIpLmxlbmd0aCB0aGVuIGl0ZW1UZXh0ICs9IFwiPC90cj48dHI+XCIgZWxzZSBcIlwiXG4gICAgICAgICAgICAgICAgaXRlbVRleHRcbiAgICAgICAgICAgICAgKS5qb2luKFwiXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgPC90YWJsZT5cblxuICAgICAgICA8dGFibGUgY2xhc3M9J21hcmtpbmctdGFibGUnPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICN7XG4gICAgICAgICAgICAgIGlmIEBtb2RlbC5nZXQoXCJ0aW1lclwiKSBpc250IFwiXCJcbiAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgPHRkIHN0eWxlPSd2ZXJ0aWNhbC1hbGlnbjptaWRkbGUnPlRpbWUgUmVtYWluaW5nPC90ZD48dGQgY2xhc3M9J21hcmtpbmctYXJlYSc+PC90ZD5cbiAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgI3tcbiAgICAgICAgICAgICAgaWYgQG1vZGVsLmdldChcImF1dG9zdG9wXCIpXG4gICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0ndmVydGljYWwtYWxpZ246bWlkZGxlJz5BdXRvc3RvcD88L3RkPjx0ZD48c3BhbiBjbGFzcz0nY2hlY2tib3gnPjwvc3Bhbj48L3RkPlxuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgIFwiXG4gICAgXG4iLCJ2YXIgR3JpZFByaW50VmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkdyaWRQcmludFZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoR3JpZFByaW50Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gR3JpZFByaW50VmlldygpIHtcbiAgICByZXR1cm4gR3JpZFByaW50Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIEdyaWRQcmludFZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiZ3JpZF9wcm90b3R5cGVcIjtcblxuICBHcmlkUHJpbnRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIHJldHVybiB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICB9O1xuXG4gIEdyaWRQcmludFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHN3aXRjaCAodGhpcy5mb3JtYXQpIHtcbiAgICAgIGNhc2UgXCJjb250ZW50XCI6XG4gICAgICAgIHRoaXMucmVuZGVyQ29udGVudCgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJzdGltdWxpXCI6XG4gICAgICAgIHRoaXMucmVuZGVyU3RpbXVsaSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJiYWNrdXBcIjpcbiAgICAgICAgdGhpcy5yZW5kZXJCYWNrdXAoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGFyZW50LnRyaWdnZXIoXCJyZW5kZXJlZFwiLCB0aGlzKTtcbiAgfTtcblxuICBHcmlkUHJpbnRWaWV3LnByb3RvdHlwZS5yZW5kZXJTdGltdWxpID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluZGV4O1xuICAgIHRoaXMuJGVsLmh0bWwoXCI8ZGl2IGlkPSdcIiArICh0aGlzLm1vZGVsLmdldChcIl9pZFwiKSkgKyBcIicgY2xhc3M9J3ByaW50LXBhZ2Ugc3RpbXVsdXMtZ3JpZCc+IDx0YWJsZT4gPHRyPiBcIiArIChpbmRleCA9IDAsIF8ubWFwKHRoaXMubW9kZWwuZ2V0KFwiaXRlbXNcIiksIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgdmFyIGl0ZW1UZXh0O1xuICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICBpdGVtVGV4dCA9IFwiPHRkIGNsYXNzPSdpdGVtJz5cIiArIGl0ZW0gKyBcIjwvdGQ+XCI7XG4gICAgICAgIGlmIChpbmRleCAlIF90aGlzLm1vZGVsLmdldChcImNvbHVtbnNcIikgPT09IDAgJiYgaW5kZXggIT09IF90aGlzLm1vZGVsLmdldChcIml0ZW1zXCIpLmxlbmd0aCkge1xuICAgICAgICAgIGl0ZW1UZXh0ICs9IFwiPC90cj48dHI+XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgXCJcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbVRleHQ7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKS5qb2luKFwiXCIpKSArIFwiIDwvdHI+IDwvdGFibGU+IDwvZGl2PlwiKTtcbiAgICByZXR1cm4gXy5kZWxheSgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRTaXplLCBpbmNyZW1lbnRBbW91bnQsIG92ZXJmbG93O1xuICAgICAgICBvdmVyZmxvdyA9IDEwMDtcbiAgICAgICAgaW5jcmVtZW50QW1vdW50ID0gMztcbiAgICAgICAgY29uc29sZS5sb2coXCJUQVJHRVQ6IFwiICsgJChcIiNcIiArIChfdGhpcy5tb2RlbC5nZXQoXCJfaWRcIikpKVswXS5zY3JvbGxIZWlnaHQpO1xuICAgICAgICB3aGlsZSAoJChcIiNcIiArIChfdGhpcy5tb2RlbC5nZXQoXCJfaWRcIikpKVswXS5zY3JvbGxXaWR0aCA+ICQoXCIjXCIgKyAoX3RoaXMubW9kZWwuZ2V0KFwiX2lkXCIpKSArIFwiIHRhYmxlXCIpLmlubmVyV2lkdGgoKSAmJiAkKFwiI1wiICsgKF90aGlzLm1vZGVsLmdldChcIl9pZFwiKSkpWzBdLnNjcm9sbEhlaWdodCA+ICQoXCIjXCIgKyAoX3RoaXMubW9kZWwuZ2V0KFwiX2lkXCIpKSArIFwiIHRhYmxlXCIpLmlubmVySGVpZ2h0KCkpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygkKFwiI1wiICsgKF90aGlzLm1vZGVsLmdldChcIl9pZFwiKSkgKyBcIiB0YWJsZVwiKS5pbm5lckhlaWdodCgpKTtcbiAgICAgICAgICBpZiAoKG92ZXJmbG93IC09IDEpID09PSAwKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudFNpemUgPSAkKFwiI1wiICsgKF90aGlzLm1vZGVsLmdldChcIl9pZFwiKSkgKyBcIiB0ZFwiKS5jc3MoXCJmb250LXNpemVcIik7XG4gICAgICAgICAgJChcIiNcIiArIChfdGhpcy5tb2RlbC5nZXQoXCJfaWRcIikpICsgXCIgdGRcIikuY3NzKFwiZm9udC1zaXplXCIsIChwYXJzZUludChjdXJyZW50U2l6ZSkgKyBpbmNyZW1lbnRBbW91bnQpICsgXCJweFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50U2l6ZSA9ICQoXCIjXCIgKyAoX3RoaXMubW9kZWwuZ2V0KFwiX2lkXCIpKSArIFwiIHRkXCIpLmNzcyhcImZvbnQtc2l6ZVwiKTtcbiAgICAgICAgcmV0dXJuICQoXCIjXCIgKyAoX3RoaXMubW9kZWwuZ2V0KFwiX2lkXCIpKSArIFwiIHRkXCIpLmNzcyhcImZvbnQtc2l6ZVwiLCAocGFyc2VJbnQoY3VycmVudFNpemUpIC0gMiAqIGluY3JlbWVudEFtb3VudCkgKyBcInB4XCIpO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSwgMTAwMCk7XG4gIH07XG5cbiAgR3JpZFByaW50Vmlldy5wcm90b3R5cGUucmVuZGVyQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmaWVsZHM7XG4gICAgZmllbGRzID0gXCJhdXRvc3RvcCBjYXB0dXJlQWZ0ZXJTZWNvbmRzIGNhcHR1cmVJdGVtQXRUaW1lIGNvbHVtbnMgZW5kT2ZMaW5lIGZvbnRTaXplIGxheW91dE1vZGUgb3JkZXIgcmFuZG9taXplIHRpbWVyIHZhcmlhYmxlTmFtZVwiO1xuICAgIGZpZWxkcyA9IGZpZWxkcy5zcGxpdCgvXFwgKy8pO1xuICAgIHJldHVybiB0aGlzLiRlbC5odG1sKFwiUHJvcGVydGllczo8YnIvPiA8dGFibGU+IFwiICsgKF8ubWFwKGZpZWxkcywgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIFwiPHRyPjx0ZD5cIiArIGZpZWxkICsgXCI8L3RkPjx0ZD5cIiArIChfdGhpcy5tb2RlbC5nZXQoZmllbGQpKSArIFwiPC90ZD48L3RyPlwiO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSkuam9pbihcIlwiKSkgKyBcIiA8L3RhYmxlPiBJdGVtczo8YnIvPiBcIiArIChfLm1hcCh0aGlzLm1vZGVsLmdldChcIml0ZW1zXCIpLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9KS5qb2luKFwiLCBcIikpKTtcbiAgfTtcblxuICBHcmlkUHJpbnRWaWV3LnByb3RvdHlwZS5yZW5kZXJCYWNrdXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5kZXg7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwoXCI8dGFibGUgY2xhc3M9J3ByaW50LWdyaWQnPiA8dHI+IFwiICsgKGluZGV4ID0gMCwgXy5tYXAodGhpcy5tb2RlbC5nZXQoXCJpdGVtc1wiKSwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgaXRlbVRleHQ7XG4gICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgIGl0ZW1UZXh0ID0gXCI8dGQgY2xhc3M9J2l0ZW0nPlwiICsgaXRlbSArIFwiPC90ZD5cIjtcbiAgICAgICAgY29uc29sZS5sb2coX3RoaXMubW9kZWwuZ2V0KFwiY29sdW1uc1wiKSk7XG4gICAgICAgIGlmIChpbmRleCAlIF90aGlzLm1vZGVsLmdldChcImNvbHVtbnNcIikgPT09IDAgJiYgaW5kZXggIT09IF90aGlzLm1vZGVsLmdldChcIml0ZW1zXCIpLmxlbmd0aCkge1xuICAgICAgICAgIGl0ZW1UZXh0ICs9IFwiPC90cj48dHI+XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgXCJcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbVRleHQ7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKS5qb2luKFwiXCIpKSArIFwiIDwvdHI+IDwvdGFibGU+IDx0YWJsZSBjbGFzcz0nbWFya2luZy10YWJsZSc+IDx0cj4gXCIgKyAodGhpcy5tb2RlbC5nZXQoXCJ0aW1lclwiKSAhPT0gXCJcIiA/IFwiPHRkIHN0eWxlPSd2ZXJ0aWNhbC1hbGlnbjptaWRkbGUnPlRpbWUgUmVtYWluaW5nPC90ZD48dGQgY2xhc3M9J21hcmtpbmctYXJlYSc+PC90ZD5cIiA6IFwiXCIpICsgXCIgPC90cj4gPHRyPiBcIiArICh0aGlzLm1vZGVsLmdldChcImF1dG9zdG9wXCIpID8gXCI8dGQgc3R5bGU9J3ZlcnRpY2FsLWFsaWduOm1pZGRsZSc+QXV0b3N0b3A/PC90ZD48dGQ+PHNwYW4gY2xhc3M9J2NoZWNrYm94Jz48L3NwYW4+PC90ZD5cIiA6IFwiXCIpICsgXCIgPC90cj4gPC90YWJsZT4gPC9kaXY+XCIpO1xuICB9O1xuXG4gIHJldHVybiBHcmlkUHJpbnRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgQ29uc2VudFByaW50VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIkNvbnNlbnRQcmludFZpZXdcIlxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBjb25maXJtZWROb25Db25zZW50ID0gZmFsc2VcbiAgICBAbW9kZWwgID0gb3B0aW9ucy5tb2RlbFxuICAgIEBwYXJlbnQgPSBvcHRpb25zLnBhcmVudFxuICBcbiAgcmVuZGVyOiAtPlxuICAgIHJldHVybiBpZiBAZm9ybWF0IGlzIFwic3RpbXVsaVwiXG4gICAgaWYgQGZvcm1hdCBpcyBcImNvbnRlbnRcIiBvciBAZm9ybWF0IGlzIFwiYmFja3VwXCJcbiAgICAgIHNwYW5DbGFzcyA9IFwicHJpbnQtcXVlc3Rpb24tb3B0aW9uXCJcbiAgICAgIG1hcmtpbmdBcmVhID0gXCLimJBcIlxuICAgICAgQCRlbC5odG1sIFwiXG4gICAgICAgIDxzcGFuIGNsYXNzPScje3NwYW5DbGFzc30nPiN7QG1vZGVsLmdldCgncHJvbXB0JykgfHwgJ0RvZXMgdGhlIGNoaWxkIGNvbnNlbnQ/J30gI3ttYXJraW5nQXJlYX08L3NwYW4+XG4gICAgICBcIlxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG4iLCJ2YXIgQ29uc2VudFByaW50VmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkNvbnNlbnRQcmludFZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoQ29uc2VudFByaW50Vmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gQ29uc2VudFByaW50VmlldygpIHtcbiAgICByZXR1cm4gQ29uc2VudFByaW50Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIENvbnNlbnRQcmludFZpZXcucHJvdG90eXBlLmNsYXNzTmFtZSA9IFwiQ29uc2VudFByaW50Vmlld1wiO1xuXG4gIENvbnNlbnRQcmludFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5jb25maXJtZWROb25Db25zZW50ID0gZmFsc2U7XG4gICAgdGhpcy5tb2RlbCA9IG9wdGlvbnMubW9kZWw7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIH07XG5cbiAgQ29uc2VudFByaW50Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1hcmtpbmdBcmVhLCBzcGFuQ2xhc3M7XG4gICAgaWYgKHRoaXMuZm9ybWF0ID09PSBcInN0aW11bGlcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5mb3JtYXQgPT09IFwiY29udGVudFwiIHx8IHRoaXMuZm9ybWF0ID09PSBcImJhY2t1cFwiKSB7XG4gICAgICBzcGFuQ2xhc3MgPSBcInByaW50LXF1ZXN0aW9uLW9wdGlvblwiO1xuICAgICAgbWFya2luZ0FyZWEgPSBcIuKYkFwiO1xuICAgICAgdGhpcy4kZWwuaHRtbChcIjxzcGFuIGNsYXNzPSdcIiArIHNwYW5DbGFzcyArIFwiJz5cIiArICh0aGlzLm1vZGVsLmdldCgncHJvbXB0JykgfHwgJ0RvZXMgdGhlIGNoaWxkIGNvbnNlbnQ/JykgKyBcIiBcIiArIG1hcmtpbmdBcmVhICsgXCI8L3NwYW4+XCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgcmV0dXJuIENvbnNlbnRQcmludFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBEYXRldGltZVByaW50VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiZGF0ZXRpbWVcIlxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBtb2RlbCAgPSBvcHRpb25zLm1vZGVsXG4gICAgQHBhcmVudCA9IG9wdGlvbnMucGFyZW50XG4gIFxuICByZW5kZXI6IC0+XG4gICAgcmV0dXJuIGlmIEBmb3JtYXQgaXMgXCJzdGltdWxpXCJcblxuICAgIGlmIEBmb3JtYXQgaXMgXCJiYWNrdXBcIlxuXG4gICAgICBAJGVsLmh0bWwgXCJcbiAgICAgICAgICA8dGFibGUgY2xhc3M9J21hcmtpbmctdGFibGUnPlxuICAgICAgICAgICAgI3tcbiAgICAgICAgICAgIF8oXCJEYXRlLFRpbWVcIi5zcGxpdCgvLC8pKS5tYXAoIChsb2NhdGlvbkxldmVsKSAtPlxuICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0ndmVydGljYWwtYWxpZ246bWlkZGxlJz4je2xvY2F0aW9uTGV2ZWx9PC90ZD48dGQgY2xhc3M9J21hcmtpbmctYXJlYSc+PC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgKS5qb2luKFwiXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgIFwiXG5cbiAgICBpZiBAZm9ybWF0IGlzIFwiY29udGVudFwiXG4gICAgICBAJGVsLmh0bWwgXCJEYXRlVGltZVwiXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiIsInZhciBEYXRldGltZVByaW50VmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkRhdGV0aW1lUHJpbnRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKERhdGV0aW1lUHJpbnRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBEYXRldGltZVByaW50VmlldygpIHtcbiAgICByZXR1cm4gRGF0ZXRpbWVQcmludFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBEYXRldGltZVByaW50Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJkYXRldGltZVwiO1xuXG4gIERhdGV0aW1lUHJpbnRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIHJldHVybiB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICB9O1xuXG4gIERhdGV0aW1lUHJpbnRWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5mb3JtYXQgPT09IFwic3RpbXVsaVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmZvcm1hdCA9PT0gXCJiYWNrdXBcIikge1xuICAgICAgdGhpcy4kZWwuaHRtbChcIjx0YWJsZSBjbGFzcz0nbWFya2luZy10YWJsZSc+IFwiICsgKF8oXCJEYXRlLFRpbWVcIi5zcGxpdCgvLC8pKS5tYXAoZnVuY3Rpb24obG9jYXRpb25MZXZlbCkge1xuICAgICAgICByZXR1cm4gXCI8dHI+IDx0ZCBzdHlsZT0ndmVydGljYWwtYWxpZ246bWlkZGxlJz5cIiArIGxvY2F0aW9uTGV2ZWwgKyBcIjwvdGQ+PHRkIGNsYXNzPSdtYXJraW5nLWFyZWEnPjwvdGQ+IDwvdHI+XCI7XG4gICAgICB9KS5qb2luKFwiXCIpKSArIFwiIDwvdGFibGU+XCIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5mb3JtYXQgPT09IFwiY29udGVudFwiKSB7XG4gICAgICB0aGlzLiRlbC5odG1sKFwiRGF0ZVRpbWVcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICByZXR1cm4gRGF0ZXRpbWVQcmludFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBJZFByaW50VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiaWRcIlxuICBcbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG5cbiAgcmVuZGVyOiAtPlxuICAgIHJldHVybiBpZiBAZm9ybWF0IGlzIFwic3RpbXVsaVwiXG4gICAgaWYgQGZvcm1hdCBpcyBcImJhY2t1cFwiIG9yIEBmb3JtYXQgaXMgXCJjb250ZW50XCJcblxuICAgICAgQCRlbC5odG1sIFwiXG4gICAgICAgICAgPHRhYmxlIGNsYXNzPSdtYXJraW5nLXRhYmxlJz5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRkIHN0eWxlPSd2ZXJ0aWNhbC1hbGlnbjptaWRkbGUnPiN7QG1vZGVsLmdldCBcIm5hbWVcIn08L3RkPjx0ZCBjbGFzcz0nbWFya2luZy1hcmVhJz48L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICA8L3RhYmxlPlxuICAgICAgXCJcbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuIiwidmFyIElkUHJpbnRWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuSWRQcmludFZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoSWRQcmludFZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIElkUHJpbnRWaWV3KCkge1xuICAgIHJldHVybiBJZFByaW50Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIElkUHJpbnRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcImlkXCI7XG5cbiAgSWRQcmludFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7fTtcblxuICBJZFByaW50Vmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZm9ybWF0ID09PSBcInN0aW11bGlcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5mb3JtYXQgPT09IFwiYmFja3VwXCIgfHwgdGhpcy5mb3JtYXQgPT09IFwiY29udGVudFwiKSB7XG4gICAgICB0aGlzLiRlbC5odG1sKFwiPHRhYmxlIGNsYXNzPSdtYXJraW5nLXRhYmxlJz4gPHRyPiA8dGQgc3R5bGU9J3ZlcnRpY2FsLWFsaWduOm1pZGRsZSc+XCIgKyAodGhpcy5tb2RlbC5nZXQoXCJuYW1lXCIpKSArIFwiPC90ZD48dGQgY2xhc3M9J21hcmtpbmctYXJlYSc+PC90ZD4gPC90cj4gPC90YWJsZT5cIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJyZW5kZXJlZFwiKTtcbiAgfTtcblxuICByZXR1cm4gSWRQcmludFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBMb2NhdGlvblByaW50VmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWU6IFwiTG9jYXRpb25QcmludFZpZXdcIlxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIFxuICAgIEBtb2RlbCAgPSBvcHRpb25zLm1vZGVsXG4gICAgQHBhcmVudCA9IG9wdGlvbnMucGFyZW50XG4gICAgXG4gICAgQGxldmVscyA9IEBtb2RlbC5nZXQoXCJsZXZlbHNcIikgICAgICAgfHwgW11cbiAgICBAbG9jYXRpb25zID0gQG1vZGVsLmdldChcImxvY2F0aW9uc1wiKSB8fCBbXVxuXG4gICAgaWYgQGxldmVscy5sZW5ndGggPT0gMSAmJiBAbGV2ZWxzWzBdID09IFwiXCJcbiAgICAgIEBsZXZlbHMgPSBbXVxuICAgIGlmIEBsb2NhdGlvbnMubGVuZ3RoID09IDEgJiYgQGxvY2F0aW9uc1swXSA9PSBcIlwiXG4gICAgICBAbG9jYXRpb25zID0gW11cblxuXG5cbiAgcmVuZGVyOiAtPlxuICAgIHJldHVybiBpZiBAZm9ybWF0IGlzIFwic3RpbXVsaVwiXG5cbiAgICBpZiBAZm9ybWF0IGlzIFwiY29udGVudFwiXG5cbiAgICAgIEAkZWwuaHRtbCBcIlxuICAgICAgICBTY2hvb2wgTG9jYXRpb25zPGJyLz5cbiAgICAgICAgTGV2ZWxzOiAje0BsZXZlbHN9PGJyLz5cbiAgICAgICAgQXZhaWxhYmxlIExvY2F0aW9uczo8YnIvPlxuICAgICAgICAje0Bsb2NhdGlvbnMuam9pbihcIjxici8+XCIpfTxici8+XG4gICAgICBcIlxuXG4gICAgaWYgQGZvcm1hdCBpcyBcImJhY2t1cFwiXG5cbiAgICAgIEAkZWwuaHRtbCBcIlxuICAgICAgICAgIDx0YWJsZSBjbGFzcz0nbWFya2luZy10YWJsZSc+XG4gICAgICAgICAgICAje1xuICAgICAgICAgICAgXyhAbGV2ZWxzKS5tYXAoIChsb2NhdGlvbkxldmVsKSAtPlxuICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT0ndmVydGljYWwtYWxpZ246bWlkZGxlJz4je2xvY2F0aW9uTGV2ZWx9PC90ZD48dGQgY2xhc3M9J21hcmtpbmctYXJlYSc+PC90ZD5cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgKS5qb2luKFwiXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgIFwiXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuIiwidmFyIExvY2F0aW9uUHJpbnRWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuTG9jYXRpb25QcmludFZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoTG9jYXRpb25QcmludFZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIExvY2F0aW9uUHJpbnRWaWV3KCkge1xuICAgIHJldHVybiBMb2NhdGlvblByaW50Vmlldy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIExvY2F0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIkxvY2F0aW9uUHJpbnRWaWV3XCI7XG5cbiAgTG9jYXRpb25QcmludFZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy5tb2RlbCA9IG9wdGlvbnMubW9kZWw7XG4gICAgdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgICB0aGlzLmxldmVscyA9IHRoaXMubW9kZWwuZ2V0KFwibGV2ZWxzXCIpIHx8IFtdO1xuICAgIHRoaXMubG9jYXRpb25zID0gdGhpcy5tb2RlbC5nZXQoXCJsb2NhdGlvbnNcIikgfHwgW107XG4gICAgaWYgKHRoaXMubGV2ZWxzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLmxldmVsc1swXSA9PT0gXCJcIikge1xuICAgICAgdGhpcy5sZXZlbHMgPSBbXTtcbiAgICB9XG4gICAgaWYgKHRoaXMubG9jYXRpb25zLmxlbmd0aCA9PT0gMSAmJiB0aGlzLmxvY2F0aW9uc1swXSA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb25zID0gW107XG4gICAgfVxuICB9O1xuXG4gIExvY2F0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5mb3JtYXQgPT09IFwic3RpbXVsaVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmZvcm1hdCA9PT0gXCJjb250ZW50XCIpIHtcbiAgICAgIHRoaXMuJGVsLmh0bWwoXCJTY2hvb2wgTG9jYXRpb25zPGJyLz4gTGV2ZWxzOiBcIiArIHRoaXMubGV2ZWxzICsgXCI8YnIvPiBBdmFpbGFibGUgTG9jYXRpb25zOjxici8+IFwiICsgKHRoaXMubG9jYXRpb25zLmpvaW4oXCI8YnIvPlwiKSkgKyBcIjxici8+XCIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5mb3JtYXQgPT09IFwiYmFja3VwXCIpIHtcbiAgICAgIHRoaXMuJGVsLmh0bWwoXCI8dGFibGUgY2xhc3M9J21hcmtpbmctdGFibGUnPiBcIiArIChfKHRoaXMubGV2ZWxzKS5tYXAoZnVuY3Rpb24obG9jYXRpb25MZXZlbCkge1xuICAgICAgICByZXR1cm4gXCI8dHI+IDx0ZCBzdHlsZT0ndmVydGljYWwtYWxpZ246bWlkZGxlJz5cIiArIGxvY2F0aW9uTGV2ZWwgKyBcIjwvdGQ+PHRkIGNsYXNzPSdtYXJraW5nLWFyZWEnPjwvdGQ+IDwvdHI+XCI7XG4gICAgICB9KS5qb2luKFwiXCIpKSArIFwiIDwvdGFibGU+XCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgcmV0dXJuIExvY2F0aW9uUHJpbnRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgU3VydmV5UHJpbnRWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZTogXCJTdXJ2ZXlQcmludFZpZXdcIlxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBtb2RlbCAgICAgICAgID0gb3B0aW9ucy5tb2RlbFxuICAgIEBwYXJlbnQgICAgICAgID0gb3B0aW9ucy5wYXJlbnRcbiAgICBAaXNPYnNlcnZhdGlvbiA9IG9wdGlvbnMuaXNPYnNlcnZhdGlvblxuICAgIEBxdWVzdGlvblZpZXdzID0gW11cbiAgICBAYW5zd2VyZWQgICAgICA9IFtdXG4gICAgQHF1ZXN0aW9ucyAgICAgPSBuZXcgUXVlc3Rpb25zXG4gICAgQHF1ZXN0aW9ucy5mZXRjaFxuICAgICAga2V5OiBAbW9kZWwuZ2V0KFwiYXNzZXNzbWVudElkXCIpXG4gICAgICBzdWNjZXNzOiAoY29sbGVjdGlvbikgPT5cbiAgICAgICAgQHF1ZXN0aW9ucyA9IG5ldyBRdWVzdGlvbnMgY29sbGVjdGlvbi53aGVyZSB7XCJzdWJ0ZXN0SWRcIjpAbW9kZWwuaWR9XG4gICAgICAgIEBxdWVzdGlvbnMuc29ydCgpXG4gICAgICAgIEByZWFkeSA9IHRydWVcbiAgICAgICAgQHJlbmRlcigpXG5cbiAgcmVuZGVyOiAtPlxuICAgIGlmIEBmb3JtYXQgaXMgXCJtZXRhZGF0YVwiXG4gICAgICBAJGVsLmh0bWwgXCJcbiAgICAgICAgPHRhYmxlIGNsYXNzPSdwcmludC1tZXRhZGF0YSc+XG4gICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgI3tcbiAgICAgICAgICAgICAgW1wibmFtZVwiLCBcInByb21wdFwiLCBcInR5cGVcIiwgXCJoaW50XCIsIFwibGlua2VkR3JpZFNjb3JlXCJdLm1hcCggKGF0dHJpYnV0ZSkgPT5cbiAgICAgICAgICAgICAgICBcIjx0aD4je2F0dHJpYnV0ZS51bmRlcnNjb3JlKCkuaHVtYW5pemUoKX08L3RoPlwiXG4gICAgICAgICAgICAgICkuam9pbihcIlwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgPHRoPk9wdGlvbnM8L3RoPlxuICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgPHRib2R5IGNsYXNzPSdzdXJ2ZXktcXVlc3Rpb25zJz5cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgXCJcblxuICAgIGVsc2VcbiAgICAgIEAkZWwuaHRtbCBcIlxuICAgICAgICA8ZGl2IGlkPScje0Btb2RlbC5nZXQgXCJfaWRcIn0nIGNsYXNzPSdwcmludC1wYWdlICN7QGZvcm1hdH0nPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J3N1cnZleS1xdWVzdGlvbnMnPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHN0eWxlPlxuICAgICAgICAgIC5zdXJ2ZXktcXVlc3Rpb25zIC5zdGltdWxpLXF1ZXN0aW9ue1xuICAgICAgICAgICAgcGFkZGluZy1ib3R0b206IDMlO1xuICAgICAgICAgIH1cbiAgICAgICAgPC9zdHlsZT5cbiAgICAgIFwiXG5cbiAgICBub3RBc2tlZENvdW50ID0gMFxuICAgIEBxdWVzdGlvbnMuc29ydCgpXG4gICAgaWYgQHF1ZXN0aW9ucy5tb2RlbHM/XG4gICAgICBmb3IgcXVlc3Rpb24sIGkgaW4gQHF1ZXN0aW9ucy5tb2RlbHNcblxuICAgICAgICBvbmVWaWV3ID0gbmV3IFF1ZXN0aW9uUHJpbnRWaWV3XG4gICAgICAgICAgbW9kZWwgICAgICAgICA6IHF1ZXN0aW9uXG4gICAgICAgICAgcGFyZW50ICAgICAgICA6IEBcbiAgICAgICAgICBpc09ic2VydmF0aW9uIDogQGlzT2JzZXJ2YXRpb25cbiAgICAgICAgb25lVmlldy5vbiBcInJlbmRlcmVkXCIsIEBvblF1ZXN0aW9uUmVuZGVyZWRcblxuICAgICAgICBvbmVWaWV3LnJlbmRlcigpXG4gICAgICAgIEBxdWVzdGlvblZpZXdzW2ldID0gb25lVmlld1xuICAgICAgICBpZiBAZm9ybWF0IGlzIFwibWV0YWRhdGFcIlxuICAgICAgICAgIEAkZWwuZmluZCgnLnN1cnZleS1xdWVzdGlvbnMnKS5hcHBlbmQgJChvbmVWaWV3LmVsKS5odG1sKClcbiAgICAgICAgZWxzZVxuICAgICAgICAgIEAkZWwuZmluZCgnLnN1cnZleS1xdWVzdGlvbnMnKS5hcHBlbmQgb25lVmlldy5lbFxuXG4gICAgaWYgQHF1ZXN0aW9ucy5sZW5ndGggPT0gbm90QXNrZWRDb3VudCB0aGVuIEBwYXJlbnQubmV4dD8oKVxuICAgIFxuICAgIGlmIEBmb3JtYXQgaXMgXCJzdGltdWxpXCJcbiAgICAgIF8uZGVsYXkgPT5cbiAgICAgICAgQGluY3JlYXNlRm9udFVudGlsT3ZlcmZsb3cgJChcIiMje0Btb2RlbC5nZXQgXCJfaWRcIn1cIilbMF0sICQoXCIjI3tAbW9kZWwuZ2V0IFwiX2lkXCJ9IC5zdXJ2ZXktcXVlc3Rpb25zXCIpXG4gICAgICAsMTAwMFxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgaW5jcmVhc2VGb250VW50aWxPdmVyZmxvdzogKG91dGVyRGl2LGlubmVyRGl2KSAtPlxuICAgIG92ZXJmbG93ID0gMTAwXG4gICAgaW5jcmVtZW50QW1vdW50ID0gM1xuICAgIGN1cnJlbnRQZXJjZW50YWdlID0gMTAwXG4gICAgd2hpbGUgb3V0ZXJEaXYuc2Nyb2xsV2lkdGgtMSA8PSAkKG91dGVyRGl2KS5pbm5lcldpZHRoKCkgYW5kIG91dGVyRGl2LnNjcm9sbEhlaWdodC0xIDw9ICQob3V0ZXJEaXYpLmlubmVySGVpZ2h0KClcbiAgICAgIGJyZWFrIGlmIChvdmVyZmxvdy09MSkgaXMgMFxuICAgICAgY3VycmVudFBlcmNlbnRhZ2UgKz0gaW5jcmVtZW50QW1vdW50XG4gICAgICBpbm5lckRpdi5jc3MoXCJmb250LXNpemVcIiwgY3VycmVudFBlcmNlbnRhZ2UgKyBcIiVcIilcbiAgICBpbm5lckRpdi5jc3MoXCJmb250LXNpemVcIiwgY3VycmVudFBlcmNlbnRhZ2UgLSAoMippbmNyZW1lbnRBbW91bnQpICsgXCIlXCIpXG5cbiAgb25RdWVzdGlvblJlbmRlcmVkOiA9PlxuICAgIEB0cmlnZ2VyIFwic3ViUmVuZGVyZWRcIlxuIiwidmFyIFN1cnZleVByaW50VmlldyxcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5TdXJ2ZXlQcmludFZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoU3VydmV5UHJpbnRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBTdXJ2ZXlQcmludFZpZXcoKSB7XG4gICAgdGhpcy5vblF1ZXN0aW9uUmVuZGVyZWQgPSBiaW5kKHRoaXMub25RdWVzdGlvblJlbmRlcmVkLCB0aGlzKTtcbiAgICByZXR1cm4gU3VydmV5UHJpbnRWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgU3VydmV5UHJpbnRWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIlN1cnZleVByaW50Vmlld1wiO1xuXG4gIFN1cnZleVByaW50Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICB0aGlzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICAgIHRoaXMuaXNPYnNlcnZhdGlvbiA9IG9wdGlvbnMuaXNPYnNlcnZhdGlvbjtcbiAgICB0aGlzLnF1ZXN0aW9uVmlld3MgPSBbXTtcbiAgICB0aGlzLmFuc3dlcmVkID0gW107XG4gICAgdGhpcy5xdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zO1xuICAgIHJldHVybiB0aGlzLnF1ZXN0aW9ucy5mZXRjaCh7XG4gICAgICBrZXk6IHRoaXMubW9kZWwuZ2V0KFwiYXNzZXNzbWVudElkXCIpLFxuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgX3RoaXMucXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9ucyhjb2xsZWN0aW9uLndoZXJlKHtcbiAgICAgICAgICAgIFwic3VidGVzdElkXCI6IF90aGlzLm1vZGVsLmlkXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIF90aGlzLnF1ZXN0aW9ucy5zb3J0KCk7XG4gICAgICAgICAgX3RoaXMucmVhZHkgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBfdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgU3VydmV5UHJpbnRWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYmFzZSwgaSwgaiwgbGVuLCBub3RBc2tlZENvdW50LCBvbmVWaWV3LCBxdWVzdGlvbiwgcmVmO1xuICAgIGlmICh0aGlzLmZvcm1hdCA9PT0gXCJtZXRhZGF0YVwiKSB7XG4gICAgICB0aGlzLiRlbC5odG1sKFwiPHRhYmxlIGNsYXNzPSdwcmludC1tZXRhZGF0YSc+IDx0aGVhZD4gXCIgKyAoW1wibmFtZVwiLCBcInByb21wdFwiLCBcInR5cGVcIiwgXCJoaW50XCIsIFwibGlua2VkR3JpZFNjb3JlXCJdLm1hcCgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGF0dHJpYnV0ZSkge1xuICAgICAgICAgIHJldHVybiBcIjx0aD5cIiArIChhdHRyaWJ1dGUudW5kZXJzY29yZSgpLmh1bWFuaXplKCkpICsgXCI8L3RoPlwiO1xuICAgICAgICB9O1xuICAgICAgfSkodGhpcykpLmpvaW4oXCJcIikpICsgXCIgPHRoPk9wdGlvbnM8L3RoPiA8L3RoZWFkPiA8dGJvZHkgY2xhc3M9J3N1cnZleS1xdWVzdGlvbnMnPiA8L3Rib2R5PiA8L3RhYmxlPlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWwuaHRtbChcIjxkaXYgaWQ9J1wiICsgKHRoaXMubW9kZWwuZ2V0KFwiX2lkXCIpKSArIFwiJyBjbGFzcz0ncHJpbnQtcGFnZSBcIiArIHRoaXMuZm9ybWF0ICsgXCInPiA8ZGl2IGNsYXNzPSdzdXJ2ZXktcXVlc3Rpb25zJz48L2Rpdj4gPC9kaXY+IDxzdHlsZT4gLnN1cnZleS1xdWVzdGlvbnMgLnN0aW11bGktcXVlc3Rpb257IHBhZGRpbmctYm90dG9tOiAzJTsgfSA8L3N0eWxlPlwiKTtcbiAgICB9XG4gICAgbm90QXNrZWRDb3VudCA9IDA7XG4gICAgdGhpcy5xdWVzdGlvbnMuc29ydCgpO1xuICAgIGlmICh0aGlzLnF1ZXN0aW9ucy5tb2RlbHMgIT0gbnVsbCkge1xuICAgICAgcmVmID0gdGhpcy5xdWVzdGlvbnMubW9kZWxzO1xuICAgICAgZm9yIChpID0gaiA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGogPCBsZW47IGkgPSArK2opIHtcbiAgICAgICAgcXVlc3Rpb24gPSByZWZbaV07XG4gICAgICAgIG9uZVZpZXcgPSBuZXcgUXVlc3Rpb25QcmludFZpZXcoe1xuICAgICAgICAgIG1vZGVsOiBxdWVzdGlvbixcbiAgICAgICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICAgICAgaXNPYnNlcnZhdGlvbjogdGhpcy5pc09ic2VydmF0aW9uXG4gICAgICAgIH0pO1xuICAgICAgICBvbmVWaWV3Lm9uKFwicmVuZGVyZWRcIiwgdGhpcy5vblF1ZXN0aW9uUmVuZGVyZWQpO1xuICAgICAgICBvbmVWaWV3LnJlbmRlcigpO1xuICAgICAgICB0aGlzLnF1ZXN0aW9uVmlld3NbaV0gPSBvbmVWaWV3O1xuICAgICAgICBpZiAodGhpcy5mb3JtYXQgPT09IFwibWV0YWRhdGFcIikge1xuICAgICAgICAgIHRoaXMuJGVsLmZpbmQoJy5zdXJ2ZXktcXVlc3Rpb25zJykuYXBwZW5kKCQob25lVmlldy5lbCkuaHRtbCgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiRlbC5maW5kKCcuc3VydmV5LXF1ZXN0aW9ucycpLmFwcGVuZChvbmVWaWV3LmVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5xdWVzdGlvbnMubGVuZ3RoID09PSBub3RBc2tlZENvdW50KSB7XG4gICAgICBpZiAodHlwZW9mIChiYXNlID0gdGhpcy5wYXJlbnQpLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBiYXNlLm5leHQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuZm9ybWF0ID09PSBcInN0aW11bGlcIikge1xuICAgICAgXy5kZWxheSgoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5pbmNyZWFzZUZvbnRVbnRpbE92ZXJmbG93KCQoXCIjXCIgKyAoX3RoaXMubW9kZWwuZ2V0KFwiX2lkXCIpKSlbMF0sICQoXCIjXCIgKyAoX3RoaXMubW9kZWwuZ2V0KFwiX2lkXCIpKSArIFwiIC5zdXJ2ZXktcXVlc3Rpb25zXCIpKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLCAxMDAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIFN1cnZleVByaW50Vmlldy5wcm90b3R5cGUuaW5jcmVhc2VGb250VW50aWxPdmVyZmxvdyA9IGZ1bmN0aW9uKG91dGVyRGl2LCBpbm5lckRpdikge1xuICAgIHZhciBjdXJyZW50UGVyY2VudGFnZSwgaW5jcmVtZW50QW1vdW50LCBvdmVyZmxvdztcbiAgICBvdmVyZmxvdyA9IDEwMDtcbiAgICBpbmNyZW1lbnRBbW91bnQgPSAzO1xuICAgIGN1cnJlbnRQZXJjZW50YWdlID0gMTAwO1xuICAgIHdoaWxlIChvdXRlckRpdi5zY3JvbGxXaWR0aCAtIDEgPD0gJChvdXRlckRpdikuaW5uZXJXaWR0aCgpICYmIG91dGVyRGl2LnNjcm9sbEhlaWdodCAtIDEgPD0gJChvdXRlckRpdikuaW5uZXJIZWlnaHQoKSkge1xuICAgICAgaWYgKChvdmVyZmxvdyAtPSAxKSA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRQZXJjZW50YWdlICs9IGluY3JlbWVudEFtb3VudDtcbiAgICAgIGlubmVyRGl2LmNzcyhcImZvbnQtc2l6ZVwiLCBjdXJyZW50UGVyY2VudGFnZSArIFwiJVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGlubmVyRGl2LmNzcyhcImZvbnQtc2l6ZVwiLCBjdXJyZW50UGVyY2VudGFnZSAtICgyICogaW5jcmVtZW50QW1vdW50KSArIFwiJVwiKTtcbiAgfTtcblxuICBTdXJ2ZXlQcmludFZpZXcucHJvdG90eXBlLm9uUXVlc3Rpb25SZW5kZXJlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJzdWJSZW5kZXJlZFwiKTtcbiAgfTtcblxuICByZXR1cm4gU3VydmV5UHJpbnRWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgT2JzZXJ2YXRpb25QcmludFZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lOiBcIk9ic2VydmF0aW9uUHJpbnRWaWV3XCJcblxuICBldmVudHM6XG4gICAgXCJjbGljayAuc3RhcnRfdGltZVwiIDogXCJzdGFydE9ic2VydmF0aW9uc1wiXG4gICAgXCJjbGljayAuc3RvcF90aW1lXCIgIDogXCJzdG9wT2JzZXJ2YXRpb25zXCJcbiAgICBcImNsaWNrIC5kb25lXCIgOiBcImNvbXBsZXRlT2JzZXJ2YXRpb25cIlxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuXG4gICAgQG1vZGVsICA9IG9wdGlvbnMubW9kZWxcbiAgICBAcGFyZW50ID0gb3B0aW9ucy5wYXJlbnRcblxuXG5cbiAgaW5pdGlhbGl6ZVN1cnZleTogLT5cbiAgICBAb25DbG9zZSgpIGlmIEBzdXJ2ZXk/ICMgaWYgd2UncmUgUkVpbml0aWFsaXppbmcgY2xvc2UgdGhlIG9sZCB2aWV3cyBmaXJzdFxuICAgIFxuICAgIGF0dHJpYnV0ZXMgPSAkLmV4dGVuZChAbW9kZWwuZ2V0KCdzdXJ2ZXlBdHRyaWJ1dGVzJyksIHsgXCJfaWRcIiA6IEBtb2RlbC5pZCB9KVxuXG4gICAgIyAxLWluZGV4ZWQgYXJyYXksIGNvbnZlbmllbnQgYmVjYXVzZSB0aGUgMHRoIG9ic2VydmF0aW9uIGRvZXNuJ3QgdGFrZSBwbGFjZSwgYnV0IHRoZSBudGggZG9lcy5cbiAgICAjIG1ha2VzIGFuIGFycmF5IG9mIGlkZW50aWNhbCBtb2RlbHMgYmFzZWQgb24gdGhlIGFib3ZlIGF0dHJpYnV0ZXNcbiAgICBtb2RlbHMgPSAobmV3IEJhY2tib25lLk1vZGVsIGF0dHJpYnV0ZXMgZm9yIGkgaW4gWzEuLnBhcnNlSW50KEBtb2RlbC5nZXQoJ3RvdGFsU2Vjb25kcycpL0Btb2RlbC5nZXQoJ2ludGVydmFsTGVuZ3RoJykpXSlcbiAgICBtb2RlbHMudW5zaGlmdChcIlwiKVxuICAgIFxuICAgIEBza2lwcGFibGVWaWV3ID0gbmV3IFN1cnZleVJ1blZpZXdcbiAgICAgIFwibW9kZWxcIiAgICAgICAgIDogbW9kZWxzWzFdXG4gICAgICBcInBhcmVudFwiICAgICAgICA6IEBcbiAgICAgIFwiaXNPYnNlcnZhdGlvblwiIDogdHJ1ZVxuXG4gICAgXG4gICAgQHN1cnZleSA9XG4gICAgICBcIm1vZGVsc1wiICAgIDogbW9kZWxzXG4gICAgICBcInJlc3VsdHNcIiAgIDogW11cblxuICBpbml0aWFsaXplRmxhZ3M6IC0+XG4gICAgQGlBbSA9XG4gICAgICBcImNvdW50aW5nXCIgOiBmYWxzZVxuICAgICAgXCJyZWNvcmRpbmdcIiA6IGZhbHNlXG4gICAgQGlIYXZlbnQgPVxuICAgICAgXCJ3YXJuZWRcIiA6IHRydWVcbiAgICBAaUhhdmUgPVxuICAgICAgXCJydW5PbmNlXCIgOiBmYWxzZVxuICAgICAgXCJmaW5pc2hlZFwiIDogZmFsc2VcbiAgICBAbXkgPVxuICAgICAgXCJ0aW1lXCIgOlxuICAgICAgICBcInN0YXJ0XCIgICA6IDBcbiAgICAgICAgXCJlbGFwc2VkXCIgOiAwXG4gICAgICBcIm9ic2VydmF0aW9uXCIgOlxuICAgICAgICBcImluZGV4XCIgICAgIDogMFxuICAgICAgICBcIm9sZEluZGV4XCIgIDogMFxuICAgICAgICBcImNvbXBsZXRlZFwiIDogMFxuICAgICAgICBcInRvdGFsXCIgICAgIDogcGFyc2VJbnQoIEBtb2RlbC5nZXQoJ3RvdGFsU2Vjb25kcycpIC8gQG1vZGVsLmdldCgnaW50ZXJ2YWxMZW5ndGgnKSApXG5cblxuICBzdGFydE9ic2VydmF0aW9uczogLT5cbiAgICAjIGRvbid0IHJlc3BvbmQgZm9yIHRoZXNlIHJlYXNvbnNcbiAgICBpZiBAaUFtLmNvdW50aW5nIHx8IEBpSGF2ZS5ydW5PbmNlIHRoZW4gcmV0dXJuXG5cbiAgICBAJGVsLmZpbmQoXCIuc3RvcF9idXR0b25fd3JhcHBlciwgLm5leHRfZGlzcGxheSwgLmNvbXBsZXRlZF9kaXNwbGF5XCIpLnJlbW92ZUNsYXNzKFwiY29uZmlybWF0aW9uXCIpXG4gICAgQCRlbC5maW5kKFwiLnN0YXJ0X2J1dHRvbl93cmFwcGVyXCIpLmFkZENsYXNzKFwiY29uZmlybWF0aW9uXCIpXG4gICAgQHRpbWVySW50ZXJ2YWwgICA9IHNldEludGVydmFsIEB0aWNrLCAxMDAwXG4gICAgQGlBbS5jb3VudGluZyAgICA9IHRydWVcbiAgICBAbXkudGltZS5zdGFydCAgID0gQGdldFRpbWUoKVxuICAgIEBteS50aW1lLmVsYXBzZWQgPSAwXG5cbiAgc3RvcE9ic2VydmF0aW9uczogKGUpIC0+XG4gICAgY2xlYXJJbnRlcnZhbCBAdGltZXJJbnRlcnZhbFxuICAgIGZyb21DbGljayA9IGU/XG4gICAgaXNudFByZW1hdHVyZVN0b3AgPSAhIGU/XG4gICAgaWYgZT8gXG4gICAgICBAdHJpZ2dlciBcInNob3dOZXh0XCJcblxuICAgIGlmIGlzbnRQcmVtYXR1cmVTdG9wICYmIG5vdCBAaUhhdmUuZmluaXNoZWRcbiAgICAgIGlmIEBpQW0ucmVjb3JkaW5nXG4gICAgICAgIEByZXNldE9ic2VydmF0aW9uRmxhZ3MoKVxuICAgICAgICBAc2F2ZUN1cnJlbnRTdXJ2ZXkoKVxuICAgICAgQG15Lm9ic2VydmF0aW9uLmluZGV4KytcbiAgICAgIEByZW5kZXJTdXJ2ZXkoKVxuICAgIGVsc2VcbiAgICAgIEAkZWwuZmluZChcIi5zdG9wX2J1dHRvbl93cmFwcGVyXCIpLmFkZENsYXNzKFwiY29uZmlybWF0aW9uXCIpXG4gICAgICBVdGlscy5taWRBbGVydCBcIk9ic2VydmF0aW9ucyBmaW5pc2hlZFwiXG4gICAgQCRlbC5maW5kKFwiLm5leHRfZGlzcGxheVwiKS5hZGRDbGFzcyhcImNvbmZpcm1hdGlvblwiKVxuICAgIEBpSGF2ZS5maW5pc2hlZCA9IHRydWVcbiAgICBAaUhhdmUucnVuT25jZSA9IHRydWVcbiAgICBcblxuICAjIHJ1bnMgZXZlcnkgc2Vjb25kIHRoZSB0aW1lciBpcyBydW5uaW5nXG4gIHRpY2s6ID0+XG4gICAgQG15LnRpbWUuZWxhcHNlZCA9IEBnZXRUaW1lKCkgLSBAbXkudGltZS5zdGFydFxuICAgIEBjaGVja0lmT3ZlcigpXG4gICAgQHVwZGF0ZU9ic2VydmF0aW9uSW5kZXgoKVxuICAgIEB1cGRhdGVQcm9ncmVzc0Rpc3BsYXkoKVxuICAgIEBjaGVja1N1cnZleURpc3BsYXkoKVxuICAgIEBjaGVja09ic2VydmF0aW9uUGFjZSgpXG4gICAgQGNoZWNrV2FybmluZygpXG5cbiAgY2hlY2tPYnNlcnZhdGlvblBhY2U6ID0+XG4gICAgIyBpZiB3ZSdyZSBzdGlsbCBlbnRlcmluZyBvYnNlcnZhdGlvbnMgYW5kIGl0J3MgdGltZSBmb3IgdGhlIG5leHQgb25lXG4gICAgaWYgQGlBbS5yZWNvcmRpbmcgJiYgQG15Lm9ic2VydmF0aW9uLmNvbXBsZXRlZCA8IChAbXkub2JzZXJ2YXRpb24uaW5kZXgtMSkgJiYgQG15Lm9ic2VydmF0aW9uLmluZGV4ICE9IDAgIyBzdGFydHMgYXQgMCwgdGhlbiBnb2VzIHRvIDFcbiAgICAgIEBpSGF2ZS5mb3JjZWRQcm9ncmVzc2lvbiA9IHRydWVcbiAgICAgIEByZXNldE9ic2VydmF0aW9uRmxhZ3MoKVxuICAgICAgQHNhdmVDdXJyZW50U3VydmV5KClcbiAgICAgIEByZW5kZXJTdXJ2ZXkoKVxuXG4gIGNoZWNrV2FybmluZzogPT5cbiAgICBwcm9qZWN0ZWRJbmRleCA9IE1hdGguZmxvb3IoIChAbXkudGltZS5lbGFwc2VkICsgQHdhcm5pbmdTZWNvbmRzKSAvIEBtb2RlbC5nZXQoJ2ludGVydmFsTGVuZ3RoJykgKVxuICAgIGlTaG91bGRXYXJuID0gQG15Lm9ic2VydmF0aW9uLmluZGV4IDwgcHJvamVjdGVkSW5kZXggJiYgISBAaUhhdmUuZmluaXNoZWRcbiAgICAjIGlmIHdlJ3JlIHN0aWxsIGVudGVyaW5nIG9ic2VydmF0aW9ucywgd2FybiB0aGUgdXNlclxuICAgIGlmIEBpQW0ucmVjb3JkaW5nICYmIEBpSGF2ZW50Lndhcm5lZCAmJiBpU2hvdWxkV2FybiAmJiBAbXkub2JzZXJ2YXRpb24uaW5kZXggIT0gMCAjIGZpcnN0IG9uZSBkb2Vzbid0IGNvdW50XG4gICAgICBVdGlscy5taWRBbGVydCBcIk9ic2VydmF0aW9uIGVuZGluZyBzb29uXCJcbiAgICAgIEBpSGF2ZW50Lndhcm5lZCA9IGZhbHNlXG4gIFxuICBncmlkV2FzQXV0b3N0b3BwZWQ6IC0+XG4gICAgcmV0dXJuIGZhbHNlXG5cbiAgY2hlY2tJZk92ZXI6ID0+XG4gICAgaWYgQG15LnRpbWUuZWxhcHNlZCA+PSBAbW9kZWwuZ2V0KFwidG90YWxTZWNvbmRzXCIpXG4gICAgICBAc3RvcE9ic2VydmF0aW9ucygpXG5cbiAgY2hlY2tTdXJ2ZXlEaXNwbGF5OiA9PlxuICAgICMgY2hhbmdlLCBuZWVkcyB0byBkaXNwbGF5IG5ldyBzdXJ2ZXlcbiAgICBpZiBAbXkub2JzZXJ2YXRpb24ub2xkSW5kZXggIT0gQG15Lm9ic2VydmF0aW9uLmluZGV4ICYmICFAaUhhdmUuZmluaXNoZWQgJiYgIUBpQW0ucmVjb3JkaW5nXG4gICAgICBAcmVuZGVyU3VydmV5KClcbiAgICAgIEBteS5vYnNlcnZhdGlvbi5vbGRJbmRleCA9IEBteS5vYnNlcnZhdGlvbi5pbmRleFxuXG4gIHVwZGF0ZU9ic2VydmF0aW9uSW5kZXg6ID0+XG4gICAgQG15Lm9ic2VydmF0aW9uLmluZGV4ID0gTWF0aC5mbG9vciggKCBAbXkudGltZS5lbGFwc2VkICkgLyBAbW9kZWwuZ2V0KCdpbnRlcnZhbExlbmd0aCcpIClcbiAgICBpZiBAbXkub2JzZXJ2YXRpb24uaW5kZXggPiBAc3VydmV5Lm1vZGVscy5sZW5ndGggLSAxXG4gICAgICBAbXkub2JzZXJ2YXRpb24uaW5kZXggPSBAc3VydmV5Lm1vZGVscy5sZW5ndGggLSAxXG5cbiAgdXBkYXRlUHJvZ3Jlc3NEaXNwbGF5OiAtPlxuICAgICMgYmFja2JvbmUuanMsIHkgdSBubyBoYXZlIGRhdGEgYmluZGluZ3M/IGFic3RyYWN0IG1vcmVcbiAgICBAJGVsLmZpbmQoXCIuY3VycmVudF9vYnNlcnZhdGlvblwiKS5odG1sIEBteS5vYnNlcnZhdGlvbi5pbmRleFxuICAgIEAkZWwuZmluZChcIi5jb21wbGV0ZWRfY291bnRcIikuaHRtbCAgICAgQG15Lm9ic2VydmF0aW9uLmNvbXBsZXRlZFxuXG4gICAgdGltZVRpbGxOZXh0ID0gTWF0aC5tYXgoKChAbXkub2JzZXJ2YXRpb24uaW5kZXggKyAxKSAqIEBtb2RlbC5nZXQoJ2ludGVydmFsTGVuZ3RoJykpIC0gQG15LnRpbWUuZWxhcHNlZCwgMClcbiAgICBAJGVsLmZpbmQoXCIudGltZV90aWxsX25leHRcIikuaHRtbCB0aW1lVGlsbE5leHRcblxuICAgIGlmIG5vdCBAaUFtLnJlY29yZGluZyAmJiBub3QgQGlIYXZlLmZpbmlzaGVkXG4gICAgICBAJGVsLmZpbmQoXCIubmV4dF9kaXNwbGF5LCAuY29tcGxldGVkX2Rpc3BsYXlcIikucmVtb3ZlQ2xhc3MgXCJjb25maXJtYXRpb25cIiBcblxuICByZXNldE9ic2VydmF0aW9uRmxhZ3M6IC0+XG4gICAgQGlBbS5yZWNvcmRpbmcgID0gZmFsc2VcbiAgICBAaUhhdmVudC53YXJuZWQgPSB0cnVlXG5cbiAgZ2V0VGltZTogLT4gcGFyc2VJbnQoICggbmV3IERhdGUoKSApLmdldFRpbWUoKSAvIDEwMDAgKVxuXG4gIGNvbXBsZXRlT2JzZXJ2YXRpb246IChvcHRpb24pIC0+XG5cbiAgICBpZiBAc3VydmV5LnZpZXcuaXNWYWxpZCgpXG4gICAgICBAc2F2ZUN1cnJlbnRTdXJ2ZXkoKVxuICAgICAgQHRyaWdnZXIgXCJzaG93TmV4dFwiIGlmIEBpSGF2ZS5maW5pc2hlZFxuICAgIGVsc2VcbiAgICAgIEBzdXJ2ZXkudmlldy5zaG93RXJyb3JzKClcblxuICAgIEB0aWNrKCkgIyB1cGRhdGUgZGlzcGxheXNcblxuXG5cblxuICBzYXZlQ3VycmVudFN1cnZleTogPT5cbiAgICBAcmVzZXRPYnNlcnZhdGlvbkZsYWdzKClcbiAgICBAbXkub2JzZXJ2YXRpb24uY29tcGxldGVkKytcbiAgICBAc3VydmV5LnJlc3VsdHMucHVzaFxuICAgICAgb2JzZXJ2YXRpb25OdW1iZXIgOiBAc3VydmV5LnZpZXcuaW5kZXggIyB2aWV3J3MgaW5kZXhcbiAgICAgIGRhdGEgICAgICAgICAgICAgIDogQHN1cnZleS52aWV3LmdldFJlc3VsdCgpXG4gICAgICBzYXZlVGltZSAgICAgICAgICA6IEBteS50aW1lLmVsYXBzZWRcbiAgICBAc3VydmV5LnZpZXcuY2xvc2UoKVxuICAgIEAkZWwuZmluZChcIi5kb25lXCIpLnJlbW92ZSgpXG5cblxuICByZW5kZXI6IC0+XG4gICAgcmV0dXJuIGlmIEBmb3JtYXQgaXMgXCJzdGltdWxpXCJcblxuICAgIEB0cmlnZ2VyIFwiaGlkZU5leHRcIlxuICAgIHRvdGFsU2Vjb25kcyA9IEBtb2RlbC5nZXQoXCJ0b3RhbFNlY29uZHNcIilcblxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGRpdiBjbGFzcz0ndGltZXJfd3JhcHBlcic+XG4gICAgICAgIDxkaXYgY2xhc3M9J3Byb2dyZXNzIGNsZWFyZml4Jz5cbiAgICAgICAgICA8c3BhbiBjbGFzcz0nY29tcGxldGVkX2Rpc3BsYXkgY29uZmlybWF0aW9uJz5Db21wbGV0ZWQgPGRpdiBjbGFzcz0naW5mb19ib3ggY29tcGxldGVkX2NvdW50Jz4je0BteS5vYnNlcnZhdGlvbi5jb21wbGV0ZWR9PC9kaXY+PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPSduZXh0X2Rpc3BsYXkgY29uZmlybWF0aW9uJz5OZXh0IG9ic2VydmF0aW9uIDxkaXYgY2xhc3M9J2luZm9fYm94IHRpbWVfdGlsbF9uZXh0Jz4je0Btb2RlbC5nZXQoJ2ludGVydmFsTGVuZ3RoJyl9PC9kaXY+PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdzdGFydF9idXR0b25fd3JhcHBlcic+PGJ1dHRvbiBjbGFzcz0nc3RhcnRfdGltZSBjb21tYW5kJz5TdGFydDwvYnV0dG9uPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9J3N0b3BfYnV0dG9uX3dyYXBwZXIgY29uZmlybWF0aW9uJz48YnV0dG9uIGNsYXNzPSdzdG9wX3RpbWUgY29tbWFuZCc+QWJvcnQgPGk+YWxsPC9pPiBvYnNlcnZhdGlvbnM8L2J1dHRvbj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgaWQ9J2N1cnJlbnRfc3VydmV5Jz48L2Rpdj5cbiAgICBcIlxuXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiXG5cbiAgcmVuZGVyU3VydmV5OiAoZSkgLT5cbiAgICBpZiBub3QgQGlBbS5jb3VudGluZyB0aGVuIHJldHVyblxuICAgIEBpQW0ucmVjb3JkaW5nID0gdHJ1ZVxuICAgIFxuICAgIEBzdXJ2ZXkudmlldyAgPSBuZXcgU3VydmV5UnVuVmlld1xuICAgICAgXCJtb2RlbFwiICAgICAgICAgOiBAc3VydmV5Lm1vZGVsc1tAbXkub2JzZXJ2YXRpb24uaW5kZXhdXG4gICAgICBcInBhcmVudFwiICAgICAgICA6IEBcbiAgICAgIFwiaXNPYnNlcnZhdGlvblwiIDogdHJ1ZVxuICAgIEBzdXJ2ZXkudmlldy5pbmRleCA9IGRvID0+IEBteS5vYnNlcnZhdGlvbi5pbmRleCAjIGFkZCBhbiBpbmRleCBmb3IgcmVmZXJlbmNlXG5cbiAgICAjIGxpc3RlbiBmb3IgcmVuZGVyIGV2ZW50cywgcGFzcyB0aGVtIHVwXG4gICAgQHN1cnZleS52aWV3Lm9uIFwicmVuZGVyZWQgc3ViUmVuZGVyZWRcIiwgPT4gQHRyaWdnZXIgXCJzdWJSZW5kZXJlZFwiXG5cbiAgICBAc3VydmV5LnZpZXcucmVuZGVyKClcblxuICAgIEAkZWwuZmluZChcIiNjdXJyZW50X3N1cnZleVwiKS5odG1sKFwiPHNwYW4gY2xhc3M9J29ic2VydmF0aW9uX2Rpc3BsYXkgY29uZmlybWF0aW9uJz5PYnNlcnZhdGlvbiA8ZGl2IGNsYXNzPSdpbmZvX2JveCBjdXJyZW50X29ic2VydmF0aW9uJz4je0BteS5vYnNlcnZhdGlvbi5pbmRleH08L2Rpdj48L3NwYW4+XCIpXG4gICAgQCRlbC5maW5kKFwiI2N1cnJlbnRfc3VydmV5XCIpLmFwcGVuZCBAc3VydmV5LnZpZXcuZWxcbiAgICBAJGVsLmZpbmQoXCIjY3VycmVudF9zdXJ2ZXlcIikuYXBwZW5kIFwiPGJ1dHRvbiBjbGFzcz0nY29tbWFuZCBkb25lJz5Eb25lIHdpdGggPGk+dGhpczwvaT4gb2JzZXJ2YXRpb248L2J1dHRvbj5cIlxuICAgIFxuICAgIEAkZWwuZmluZChcIiNjdXJyZW50X3N1cnZleVwiKS5zY3JvbGxUbyAyNTAsID0+IFxuICAgICAgaWYgQGlIYXZlLmZvcmNlZFByb2dyZXNzaW9uXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiUGxlYXNlIGNvbnRpbnVlIHdpdGggdGhlIG5leHQgb2JzZXJ2YXRpb24uXCJcbiAgICAgICAgQGlIYXZlLmZvcmNlZFByb2dyZXNzaW9uID0gZmFsc2VcbiAgICAgIGVsc2UgaWYgQGlIYXZlLmZpbmlzaGVkXG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IFwiUGxlYXNlIGVudGVyIGxhc3Qgb2JzZXJ2YXRpb25cIlxuXG5cbiAgb25DbG9zZTogLT5cbiAgICBAc3VydmV5LnZpZXc/LmNsb3NlKClcbiAgICBAc2tpcHBhYmxlVmlldy5jbG9zZSgpXG5cbiAgZ2V0UmVzdWx0OiAtPlxuICAgIHtcbiAgICAgIFwic3VydmV5c1wiICAgICAgICAgICAgICAgOiBAc3VydmV5LnJlc3VsdHNcbiAgICAgIFwidmFyaWFibGVOYW1lXCIgICAgICAgICAgOiBAbW9kZWwuZ2V0KFwidmFyaWFibGVOYW1lXCIpXG4gICAgICBcInRvdGFsVGltZVwiICAgICAgICAgICAgIDogQG1vZGVsLmdldChcInRvdGFsVGltZVwiKVxuICAgICAgXCJpbnRlcnZhbExlbmd0aFwiICAgICAgICA6IEBtb2RlbC5nZXQoXCJpbnRlcnZhbFRpbWVcIilcbiAgICAgIFwiY29tcGxldGVkT2JzZXJ2YXRpb25zXCIgOiBAbXkub2JzZXJ2YXRpb24uY29tcGxldGVkXG4gICAgfVxuXG4gIGdldFN1bTogLT5cbiAgICB7XG4gICAgICBcInRvdGFsXCIgOiBAbXkub2JzZXJ2YXRpb24uY29tcGxldGVkIFxuICAgIH1cblxuICBnZXRTa2lwcGVkOiAtPlxuICAgIHZpZXdSZXN1bHQgPSBAc2tpcHBhYmxlVmlldy5nZXRTa2lwcGVkKClcbiAgICBza2lwcGVkUmVzdWx0cyA9IFtdXG4gICAgZm9yIGkgaW4gWzEuLihAc3VydmV5Lm1vZGVscy5sZW5ndGgtMSldXG4gICAgICBza2lwcGVkUmVzdWx0cy5wdXNoXG4gICAgICAgIG9ic2VydmF0aW9uTnVtYmVyIDogaSAjIHZpZXcncyBpbmRleFxuICAgICAgICBkYXRhICAgICAgICAgICAgICA6IHZpZXdSZXN1bHRcbiAgICAgICAgc2F2ZVRpbWUgICAgICAgICAgOiBcInNraXBwZWRcIlxuXG4gICAgcmV0dXJuIHtcbiAgICAgIFwic3VydmV5c1wiICAgICAgICAgICAgICAgOiBza2lwcGVkUmVzdWx0c1xuICAgICAgXCJ2YXJpYWJsZU5hbWVcIiAgICAgICAgICA6IFwic2tpcHBlZFwiXG4gICAgICBcInRvdGFsVGltZVwiICAgICAgICAgICAgIDogXCJza2lwcGVkXCJcbiAgICAgIFwiaW50ZXJ2YWxMZW5ndGhcIiAgICAgICAgOiBcInNraXBwZWRcIlxuICAgICAgXCJjb21wbGV0ZWRPYnNlcnZhdGlvbnNcIiA6IFwic2tpcHBlZFwiXG4gICAgfVxuXG4gIGlzVmFsaWQ6IC0+XG4gICAgQGlIYXZlLmZpbmlzaGVkXG5cbiAgc2hvd0Vycm9yczogLT5cbiAgICBAJGVsLmZpbmQoXCJtZXNzYWdlc1wiKS5odG1sIEB2YWxpZGF0b3IuZ2V0RXJyb3JzKCkuam9pbihcIiwgXCIpXG5cbiAgdXBkYXRlTmF2aWdhdGlvbjogLT5cbiAgICBUYW5nZXJpbmUubmF2LnNldFN0dWRlbnQgQCRlbC5maW5kKCcjcGFydGljaXBhbnRfaWQnKS52YWwoKVxuIiwidmFyIE9ic2VydmF0aW9uUHJpbnRWaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbk9ic2VydmF0aW9uUHJpbnRWaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKE9ic2VydmF0aW9uUHJpbnRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBPYnNlcnZhdGlvblByaW50VmlldygpIHtcbiAgICB0aGlzLnNhdmVDdXJyZW50U3VydmV5ID0gYmluZCh0aGlzLnNhdmVDdXJyZW50U3VydmV5LCB0aGlzKTtcbiAgICB0aGlzLnVwZGF0ZU9ic2VydmF0aW9uSW5kZXggPSBiaW5kKHRoaXMudXBkYXRlT2JzZXJ2YXRpb25JbmRleCwgdGhpcyk7XG4gICAgdGhpcy5jaGVja1N1cnZleURpc3BsYXkgPSBiaW5kKHRoaXMuY2hlY2tTdXJ2ZXlEaXNwbGF5LCB0aGlzKTtcbiAgICB0aGlzLmNoZWNrSWZPdmVyID0gYmluZCh0aGlzLmNoZWNrSWZPdmVyLCB0aGlzKTtcbiAgICB0aGlzLmNoZWNrV2FybmluZyA9IGJpbmQodGhpcy5jaGVja1dhcm5pbmcsIHRoaXMpO1xuICAgIHRoaXMuY2hlY2tPYnNlcnZhdGlvblBhY2UgPSBiaW5kKHRoaXMuY2hlY2tPYnNlcnZhdGlvblBhY2UsIHRoaXMpO1xuICAgIHRoaXMudGljayA9IGJpbmQodGhpcy50aWNrLCB0aGlzKTtcbiAgICByZXR1cm4gT2JzZXJ2YXRpb25QcmludFZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBPYnNlcnZhdGlvblByaW50Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJPYnNlcnZhdGlvblByaW50Vmlld1wiO1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5ldmVudHMgPSB7XG4gICAgXCJjbGljayAuc3RhcnRfdGltZVwiOiBcInN0YXJ0T2JzZXJ2YXRpb25zXCIsXG4gICAgXCJjbGljayAuc3RvcF90aW1lXCI6IFwic3RvcE9ic2VydmF0aW9uc1wiLFxuICAgIFwiY2xpY2sgLmRvbmVcIjogXCJjb21wbGV0ZU9ic2VydmF0aW9uXCJcbiAgfTtcblxuICBPYnNlcnZhdGlvblByaW50Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLm1vZGVsID0gb3B0aW9ucy5tb2RlbDtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgfTtcblxuICBPYnNlcnZhdGlvblByaW50Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZVN1cnZleSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhdHRyaWJ1dGVzLCBpLCBtb2RlbHM7XG4gICAgaWYgKHRoaXMuc3VydmV5ICE9IG51bGwpIHtcbiAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgIH1cbiAgICBhdHRyaWJ1dGVzID0gJC5leHRlbmQodGhpcy5tb2RlbC5nZXQoJ3N1cnZleUF0dHJpYnV0ZXMnKSwge1xuICAgICAgXCJfaWRcIjogdGhpcy5tb2RlbC5pZFxuICAgIH0pO1xuICAgIG1vZGVscyA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBqLCByZWYsIHJlc3VsdHM7XG4gICAgICByZXN1bHRzID0gW107XG4gICAgICBmb3IgKGkgPSBqID0gMSwgcmVmID0gcGFyc2VJbnQodGhpcy5tb2RlbC5nZXQoJ3RvdGFsU2Vjb25kcycpIC8gdGhpcy5tb2RlbC5nZXQoJ2ludGVydmFsTGVuZ3RoJykpOyAxIDw9IHJlZiA/IGogPD0gcmVmIDogaiA+PSByZWY7IGkgPSAxIDw9IHJlZiA/ICsraiA6IC0taikge1xuICAgICAgICByZXN1bHRzLnB1c2gobmV3IEJhY2tib25lLk1vZGVsKGF0dHJpYnV0ZXMpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pLmNhbGwodGhpcyk7XG4gICAgbW9kZWxzLnVuc2hpZnQoXCJcIik7XG4gICAgdGhpcy5za2lwcGFibGVWaWV3ID0gbmV3IFN1cnZleVJ1blZpZXcoe1xuICAgICAgXCJtb2RlbFwiOiBtb2RlbHNbMV0sXG4gICAgICBcInBhcmVudFwiOiB0aGlzLFxuICAgICAgXCJpc09ic2VydmF0aW9uXCI6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5zdXJ2ZXkgPSB7XG4gICAgICBcIm1vZGVsc1wiOiBtb2RlbHMsXG4gICAgICBcInJlc3VsdHNcIjogW11cbiAgICB9O1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplRmxhZ3MgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlBbSA9IHtcbiAgICAgIFwiY291bnRpbmdcIjogZmFsc2UsXG4gICAgICBcInJlY29yZGluZ1wiOiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy5pSGF2ZW50ID0ge1xuICAgICAgXCJ3YXJuZWRcIjogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5pSGF2ZSA9IHtcbiAgICAgIFwicnVuT25jZVwiOiBmYWxzZSxcbiAgICAgIFwiZmluaXNoZWRcIjogZmFsc2VcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLm15ID0ge1xuICAgICAgXCJ0aW1lXCI6IHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcImVsYXBzZWRcIjogMFxuICAgICAgfSxcbiAgICAgIFwib2JzZXJ2YXRpb25cIjoge1xuICAgICAgICBcImluZGV4XCI6IDAsXG4gICAgICAgIFwib2xkSW5kZXhcIjogMCxcbiAgICAgICAgXCJjb21wbGV0ZWRcIjogMCxcbiAgICAgICAgXCJ0b3RhbFwiOiBwYXJzZUludCh0aGlzLm1vZGVsLmdldCgndG90YWxTZWNvbmRzJykgLyB0aGlzLm1vZGVsLmdldCgnaW50ZXJ2YWxMZW5ndGgnKSlcbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5zdGFydE9ic2VydmF0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmlBbS5jb3VudGluZyB8fCB0aGlzLmlIYXZlLnJ1bk9uY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4kZWwuZmluZChcIi5zdG9wX2J1dHRvbl93cmFwcGVyLCAubmV4dF9kaXNwbGF5LCAuY29tcGxldGVkX2Rpc3BsYXlcIikucmVtb3ZlQ2xhc3MoXCJjb25maXJtYXRpb25cIik7XG4gICAgdGhpcy4kZWwuZmluZChcIi5zdGFydF9idXR0b25fd3JhcHBlclwiKS5hZGRDbGFzcyhcImNvbmZpcm1hdGlvblwiKTtcbiAgICB0aGlzLnRpbWVySW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh0aGlzLnRpY2ssIDEwMDApO1xuICAgIHRoaXMuaUFtLmNvdW50aW5nID0gdHJ1ZTtcbiAgICB0aGlzLm15LnRpbWUuc3RhcnQgPSB0aGlzLmdldFRpbWUoKTtcbiAgICByZXR1cm4gdGhpcy5teS50aW1lLmVsYXBzZWQgPSAwO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5zdG9wT2JzZXJ2YXRpb25zID0gZnVuY3Rpb24oZSkge1xuICAgIHZhciBmcm9tQ2xpY2ssIGlzbnRQcmVtYXR1cmVTdG9wO1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lckludGVydmFsKTtcbiAgICBmcm9tQ2xpY2sgPSBlICE9IG51bGw7XG4gICAgaXNudFByZW1hdHVyZVN0b3AgPSBlID09IG51bGw7XG4gICAgaWYgKGUgIT0gbnVsbCkge1xuICAgICAgdGhpcy50cmlnZ2VyKFwic2hvd05leHRcIik7XG4gICAgfVxuICAgIGlmIChpc250UHJlbWF0dXJlU3RvcCAmJiAhdGhpcy5pSGF2ZS5maW5pc2hlZCkge1xuICAgICAgaWYgKHRoaXMuaUFtLnJlY29yZGluZykge1xuICAgICAgICB0aGlzLnJlc2V0T2JzZXJ2YXRpb25GbGFncygpO1xuICAgICAgICB0aGlzLnNhdmVDdXJyZW50U3VydmV5KCk7XG4gICAgICB9XG4gICAgICB0aGlzLm15Lm9ic2VydmF0aW9uLmluZGV4Kys7XG4gICAgICB0aGlzLnJlbmRlclN1cnZleSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbC5maW5kKFwiLnN0b3BfYnV0dG9uX3dyYXBwZXJcIikuYWRkQ2xhc3MoXCJjb25maXJtYXRpb25cIik7XG4gICAgICBVdGlscy5taWRBbGVydChcIk9ic2VydmF0aW9ucyBmaW5pc2hlZFwiKTtcbiAgICB9XG4gICAgdGhpcy4kZWwuZmluZChcIi5uZXh0X2Rpc3BsYXlcIikuYWRkQ2xhc3MoXCJjb25maXJtYXRpb25cIik7XG4gICAgdGhpcy5pSGF2ZS5maW5pc2hlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXMuaUhhdmUucnVuT25jZSA9IHRydWU7XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25QcmludFZpZXcucHJvdG90eXBlLnRpY2sgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm15LnRpbWUuZWxhcHNlZCA9IHRoaXMuZ2V0VGltZSgpIC0gdGhpcy5teS50aW1lLnN0YXJ0O1xuICAgIHRoaXMuY2hlY2tJZk92ZXIoKTtcbiAgICB0aGlzLnVwZGF0ZU9ic2VydmF0aW9uSW5kZXgoKTtcbiAgICB0aGlzLnVwZGF0ZVByb2dyZXNzRGlzcGxheSgpO1xuICAgIHRoaXMuY2hlY2tTdXJ2ZXlEaXNwbGF5KCk7XG4gICAgdGhpcy5jaGVja09ic2VydmF0aW9uUGFjZSgpO1xuICAgIHJldHVybiB0aGlzLmNoZWNrV2FybmluZygpO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5jaGVja09ic2VydmF0aW9uUGFjZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLmlBbS5yZWNvcmRpbmcgJiYgdGhpcy5teS5vYnNlcnZhdGlvbi5jb21wbGV0ZWQgPCAodGhpcy5teS5vYnNlcnZhdGlvbi5pbmRleCAtIDEpICYmIHRoaXMubXkub2JzZXJ2YXRpb24uaW5kZXggIT09IDApIHtcbiAgICAgIHRoaXMuaUhhdmUuZm9yY2VkUHJvZ3Jlc3Npb24gPSB0cnVlO1xuICAgICAgdGhpcy5yZXNldE9ic2VydmF0aW9uRmxhZ3MoKTtcbiAgICAgIHRoaXMuc2F2ZUN1cnJlbnRTdXJ2ZXkoKTtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlclN1cnZleSgpO1xuICAgIH1cbiAgfTtcblxuICBPYnNlcnZhdGlvblByaW50Vmlldy5wcm90b3R5cGUuY2hlY2tXYXJuaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGlTaG91bGRXYXJuLCBwcm9qZWN0ZWRJbmRleDtcbiAgICBwcm9qZWN0ZWRJbmRleCA9IE1hdGguZmxvb3IoKHRoaXMubXkudGltZS5lbGFwc2VkICsgdGhpcy53YXJuaW5nU2Vjb25kcykgLyB0aGlzLm1vZGVsLmdldCgnaW50ZXJ2YWxMZW5ndGgnKSk7XG4gICAgaVNob3VsZFdhcm4gPSB0aGlzLm15Lm9ic2VydmF0aW9uLmluZGV4IDwgcHJvamVjdGVkSW5kZXggJiYgIXRoaXMuaUhhdmUuZmluaXNoZWQ7XG4gICAgaWYgKHRoaXMuaUFtLnJlY29yZGluZyAmJiB0aGlzLmlIYXZlbnQud2FybmVkICYmIGlTaG91bGRXYXJuICYmIHRoaXMubXkub2JzZXJ2YXRpb24uaW5kZXggIT09IDApIHtcbiAgICAgIFV0aWxzLm1pZEFsZXJ0KFwiT2JzZXJ2YXRpb24gZW5kaW5nIHNvb25cIik7XG4gICAgICByZXR1cm4gdGhpcy5pSGF2ZW50Lndhcm5lZCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBPYnNlcnZhdGlvblByaW50Vmlldy5wcm90b3R5cGUuZ3JpZFdhc0F1dG9zdG9wcGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5jaGVja0lmT3ZlciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLm15LnRpbWUuZWxhcHNlZCA+PSB0aGlzLm1vZGVsLmdldChcInRvdGFsU2Vjb25kc1wiKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RvcE9ic2VydmF0aW9ucygpO1xuICAgIH1cbiAgfTtcblxuICBPYnNlcnZhdGlvblByaW50Vmlldy5wcm90b3R5cGUuY2hlY2tTdXJ2ZXlEaXNwbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMubXkub2JzZXJ2YXRpb24ub2xkSW5kZXggIT09IHRoaXMubXkub2JzZXJ2YXRpb24uaW5kZXggJiYgIXRoaXMuaUhhdmUuZmluaXNoZWQgJiYgIXRoaXMuaUFtLnJlY29yZGluZykge1xuICAgICAgdGhpcy5yZW5kZXJTdXJ2ZXkoKTtcbiAgICAgIHJldHVybiB0aGlzLm15Lm9ic2VydmF0aW9uLm9sZEluZGV4ID0gdGhpcy5teS5vYnNlcnZhdGlvbi5pbmRleDtcbiAgICB9XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25QcmludFZpZXcucHJvdG90eXBlLnVwZGF0ZU9ic2VydmF0aW9uSW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm15Lm9ic2VydmF0aW9uLmluZGV4ID0gTWF0aC5mbG9vcih0aGlzLm15LnRpbWUuZWxhcHNlZCAvIHRoaXMubW9kZWwuZ2V0KCdpbnRlcnZhbExlbmd0aCcpKTtcbiAgICBpZiAodGhpcy5teS5vYnNlcnZhdGlvbi5pbmRleCA+IHRoaXMuc3VydmV5Lm1vZGVscy5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gdGhpcy5teS5vYnNlcnZhdGlvbi5pbmRleCA9IHRoaXMuc3VydmV5Lm1vZGVscy5sZW5ndGggLSAxO1xuICAgIH1cbiAgfTtcblxuICBPYnNlcnZhdGlvblByaW50Vmlldy5wcm90b3R5cGUudXBkYXRlUHJvZ3Jlc3NEaXNwbGF5ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRpbWVUaWxsTmV4dDtcbiAgICB0aGlzLiRlbC5maW5kKFwiLmN1cnJlbnRfb2JzZXJ2YXRpb25cIikuaHRtbCh0aGlzLm15Lm9ic2VydmF0aW9uLmluZGV4KTtcbiAgICB0aGlzLiRlbC5maW5kKFwiLmNvbXBsZXRlZF9jb3VudFwiKS5odG1sKHRoaXMubXkub2JzZXJ2YXRpb24uY29tcGxldGVkKTtcbiAgICB0aW1lVGlsbE5leHQgPSBNYXRoLm1heCgoKHRoaXMubXkub2JzZXJ2YXRpb24uaW5kZXggKyAxKSAqIHRoaXMubW9kZWwuZ2V0KCdpbnRlcnZhbExlbmd0aCcpKSAtIHRoaXMubXkudGltZS5lbGFwc2VkLCAwKTtcbiAgICB0aGlzLiRlbC5maW5kKFwiLnRpbWVfdGlsbF9uZXh0XCIpLmh0bWwodGltZVRpbGxOZXh0KTtcbiAgICBpZiAoIXRoaXMuaUFtLnJlY29yZGluZyAmJiAhdGhpcy5pSGF2ZS5maW5pc2hlZCkge1xuICAgICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCIubmV4dF9kaXNwbGF5LCAuY29tcGxldGVkX2Rpc3BsYXlcIikucmVtb3ZlQ2xhc3MoXCJjb25maXJtYXRpb25cIik7XG4gICAgfVxuICB9O1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5yZXNldE9ic2VydmF0aW9uRmxhZ3MgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlBbS5yZWNvcmRpbmcgPSBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5pSGF2ZW50Lndhcm5lZCA9IHRydWU7XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25QcmludFZpZXcucHJvdG90eXBlLmdldFRpbWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoKG5ldyBEYXRlKCkpLmdldFRpbWUoKSAvIDEwMDApO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5jb21wbGV0ZU9ic2VydmF0aW9uID0gZnVuY3Rpb24ob3B0aW9uKSB7XG4gICAgaWYgKHRoaXMuc3VydmV5LnZpZXcuaXNWYWxpZCgpKSB7XG4gICAgICB0aGlzLnNhdmVDdXJyZW50U3VydmV5KCk7XG4gICAgICBpZiAodGhpcy5pSGF2ZS5maW5pc2hlZCkge1xuICAgICAgICB0aGlzLnRyaWdnZXIoXCJzaG93TmV4dFwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdXJ2ZXkudmlldy5zaG93RXJyb3JzKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRpY2soKTtcbiAgfTtcblxuICBPYnNlcnZhdGlvblByaW50Vmlldy5wcm90b3R5cGUuc2F2ZUN1cnJlbnRTdXJ2ZXkgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlc2V0T2JzZXJ2YXRpb25GbGFncygpO1xuICAgIHRoaXMubXkub2JzZXJ2YXRpb24uY29tcGxldGVkKys7XG4gICAgdGhpcy5zdXJ2ZXkucmVzdWx0cy5wdXNoKHtcbiAgICAgIG9ic2VydmF0aW9uTnVtYmVyOiB0aGlzLnN1cnZleS52aWV3LmluZGV4LFxuICAgICAgZGF0YTogdGhpcy5zdXJ2ZXkudmlldy5nZXRSZXN1bHQoKSxcbiAgICAgIHNhdmVUaW1lOiB0aGlzLm15LnRpbWUuZWxhcHNlZFxuICAgIH0pO1xuICAgIHRoaXMuc3VydmV5LnZpZXcuY2xvc2UoKTtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIi5kb25lXCIpLnJlbW92ZSgpO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdG90YWxTZWNvbmRzO1xuICAgIGlmICh0aGlzLmZvcm1hdCA9PT0gXCJzdGltdWxpXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy50cmlnZ2VyKFwiaGlkZU5leHRcIik7XG4gICAgdG90YWxTZWNvbmRzID0gdGhpcy5tb2RlbC5nZXQoXCJ0b3RhbFNlY29uZHNcIik7XG4gICAgdGhpcy4kZWwuaHRtbChcIjxkaXYgY2xhc3M9J3RpbWVyX3dyYXBwZXInPiA8ZGl2IGNsYXNzPSdwcm9ncmVzcyBjbGVhcmZpeCc+IDxzcGFuIGNsYXNzPSdjb21wbGV0ZWRfZGlzcGxheSBjb25maXJtYXRpb24nPkNvbXBsZXRlZCA8ZGl2IGNsYXNzPSdpbmZvX2JveCBjb21wbGV0ZWRfY291bnQnPlwiICsgdGhpcy5teS5vYnNlcnZhdGlvbi5jb21wbGV0ZWQgKyBcIjwvZGl2Pjwvc3Bhbj4gPHNwYW4gY2xhc3M9J25leHRfZGlzcGxheSBjb25maXJtYXRpb24nPk5leHQgb2JzZXJ2YXRpb24gPGRpdiBjbGFzcz0naW5mb19ib3ggdGltZV90aWxsX25leHQnPlwiICsgKHRoaXMubW9kZWwuZ2V0KCdpbnRlcnZhbExlbmd0aCcpKSArIFwiPC9kaXY+PC9zcGFuPiA8L2Rpdj4gPGRpdj4gPGRpdiBjbGFzcz0nc3RhcnRfYnV0dG9uX3dyYXBwZXInPjxidXR0b24gY2xhc3M9J3N0YXJ0X3RpbWUgY29tbWFuZCc+U3RhcnQ8L2J1dHRvbj48L2Rpdj4gPGRpdiBjbGFzcz0nc3RvcF9idXR0b25fd3JhcHBlciBjb25maXJtYXRpb24nPjxidXR0b24gY2xhc3M9J3N0b3BfdGltZSBjb21tYW5kJz5BYm9ydCA8aT5hbGw8L2k+IG9ic2VydmF0aW9uczwvYnV0dG9uPjwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxkaXYgaWQ9J2N1cnJlbnRfc3VydmV5Jz48L2Rpdj5cIik7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5yZW5kZXJTdXJ2ZXkgPSBmdW5jdGlvbihlKSB7XG4gICAgaWYgKCF0aGlzLmlBbS5jb3VudGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmlBbS5yZWNvcmRpbmcgPSB0cnVlO1xuICAgIHRoaXMuc3VydmV5LnZpZXcgPSBuZXcgU3VydmV5UnVuVmlldyh7XG4gICAgICBcIm1vZGVsXCI6IHRoaXMuc3VydmV5Lm1vZGVsc1t0aGlzLm15Lm9ic2VydmF0aW9uLmluZGV4XSxcbiAgICAgIFwicGFyZW50XCI6IHRoaXMsXG4gICAgICBcImlzT2JzZXJ2YXRpb25cIjogdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMuc3VydmV5LnZpZXcuaW5kZXggPSAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm15Lm9ic2VydmF0aW9uLmluZGV4O1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSgpO1xuICAgIHRoaXMuc3VydmV5LnZpZXcub24oXCJyZW5kZXJlZCBzdWJSZW5kZXJlZFwiLCAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnRyaWdnZXIoXCJzdWJSZW5kZXJlZFwiKTtcbiAgICAgIH07XG4gICAgfSkodGhpcykpO1xuICAgIHRoaXMuc3VydmV5LnZpZXcucmVuZGVyKCk7XG4gICAgdGhpcy4kZWwuZmluZChcIiNjdXJyZW50X3N1cnZleVwiKS5odG1sKFwiPHNwYW4gY2xhc3M9J29ic2VydmF0aW9uX2Rpc3BsYXkgY29uZmlybWF0aW9uJz5PYnNlcnZhdGlvbiA8ZGl2IGNsYXNzPSdpbmZvX2JveCBjdXJyZW50X29ic2VydmF0aW9uJz5cIiArIHRoaXMubXkub2JzZXJ2YXRpb24uaW5kZXggKyBcIjwvZGl2Pjwvc3Bhbj5cIik7XG4gICAgdGhpcy4kZWwuZmluZChcIiNjdXJyZW50X3N1cnZleVwiKS5hcHBlbmQodGhpcy5zdXJ2ZXkudmlldy5lbCk7XG4gICAgdGhpcy4kZWwuZmluZChcIiNjdXJyZW50X3N1cnZleVwiKS5hcHBlbmQoXCI8YnV0dG9uIGNsYXNzPSdjb21tYW5kIGRvbmUnPkRvbmUgd2l0aCA8aT50aGlzPC9pPiBvYnNlcnZhdGlvbjwvYnV0dG9uPlwiKTtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiNjdXJyZW50X3N1cnZleVwiKS5zY3JvbGxUbygyNTAsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoX3RoaXMuaUhhdmUuZm9yY2VkUHJvZ3Jlc3Npb24pIHtcbiAgICAgICAgICBVdGlscy5taWRBbGVydChcIlBsZWFzZSBjb250aW51ZSB3aXRoIHRoZSBuZXh0IG9ic2VydmF0aW9uLlwiKTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuaUhhdmUuZm9yY2VkUHJvZ3Jlc3Npb24gPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpcy5pSGF2ZS5maW5pc2hlZCkge1xuICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIlBsZWFzZSBlbnRlciBsYXN0IG9ic2VydmF0aW9uXCIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuICBPYnNlcnZhdGlvblByaW50Vmlldy5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZWY7XG4gICAgaWYgKChyZWYgPSB0aGlzLnN1cnZleS52aWV3KSAhPSBudWxsKSB7XG4gICAgICByZWYuY2xvc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2tpcHBhYmxlVmlldy5jbG9zZSgpO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5nZXRSZXN1bHQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgXCJzdXJ2ZXlzXCI6IHRoaXMuc3VydmV5LnJlc3VsdHMsXG4gICAgICBcInZhcmlhYmxlTmFtZVwiOiB0aGlzLm1vZGVsLmdldChcInZhcmlhYmxlTmFtZVwiKSxcbiAgICAgIFwidG90YWxUaW1lXCI6IHRoaXMubW9kZWwuZ2V0KFwidG90YWxUaW1lXCIpLFxuICAgICAgXCJpbnRlcnZhbExlbmd0aFwiOiB0aGlzLm1vZGVsLmdldChcImludGVydmFsVGltZVwiKSxcbiAgICAgIFwiY29tcGxldGVkT2JzZXJ2YXRpb25zXCI6IHRoaXMubXkub2JzZXJ2YXRpb24uY29tcGxldGVkXG4gICAgfTtcbiAgfTtcblxuICBPYnNlcnZhdGlvblByaW50Vmlldy5wcm90b3R5cGUuZ2V0U3VtID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFwidG90YWxcIjogdGhpcy5teS5vYnNlcnZhdGlvbi5jb21wbGV0ZWRcbiAgICB9O1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5nZXRTa2lwcGVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGksIGosIHJlZiwgc2tpcHBlZFJlc3VsdHMsIHZpZXdSZXN1bHQ7XG4gICAgdmlld1Jlc3VsdCA9IHRoaXMuc2tpcHBhYmxlVmlldy5nZXRTa2lwcGVkKCk7XG4gICAgc2tpcHBlZFJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGkgPSBqID0gMSwgcmVmID0gdGhpcy5zdXJ2ZXkubW9kZWxzLmxlbmd0aCAtIDE7IDEgPD0gcmVmID8gaiA8PSByZWYgOiBqID49IHJlZjsgaSA9IDEgPD0gcmVmID8gKytqIDogLS1qKSB7XG4gICAgICBza2lwcGVkUmVzdWx0cy5wdXNoKHtcbiAgICAgICAgb2JzZXJ2YXRpb25OdW1iZXI6IGksXG4gICAgICAgIGRhdGE6IHZpZXdSZXN1bHQsXG4gICAgICAgIHNhdmVUaW1lOiBcInNraXBwZWRcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBcInN1cnZleXNcIjogc2tpcHBlZFJlc3VsdHMsXG4gICAgICBcInZhcmlhYmxlTmFtZVwiOiBcInNraXBwZWRcIixcbiAgICAgIFwidG90YWxUaW1lXCI6IFwic2tpcHBlZFwiLFxuICAgICAgXCJpbnRlcnZhbExlbmd0aFwiOiBcInNraXBwZWRcIixcbiAgICAgIFwiY29tcGxldGVkT2JzZXJ2YXRpb25zXCI6IFwic2tpcHBlZFwiXG4gICAgfTtcbiAgfTtcblxuICBPYnNlcnZhdGlvblByaW50Vmlldy5wcm90b3R5cGUuaXNWYWxpZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmlIYXZlLmZpbmlzaGVkO1xuICB9O1xuXG4gIE9ic2VydmF0aW9uUHJpbnRWaWV3LnByb3RvdHlwZS5zaG93RXJyb3JzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQoXCJtZXNzYWdlc1wiKS5odG1sKHRoaXMudmFsaWRhdG9yLmdldEVycm9ycygpLmpvaW4oXCIsIFwiKSk7XG4gIH07XG5cbiAgT2JzZXJ2YXRpb25QcmludFZpZXcucHJvdG90eXBlLnVwZGF0ZU5hdmlnYXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLm5hdi5zZXRTdHVkZW50KHRoaXMuJGVsLmZpbmQoJyNwYXJ0aWNpcGFudF9pZCcpLnZhbCgpKTtcbiAgfTtcblxuICByZXR1cm4gT2JzZXJ2YXRpb25QcmludFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBTdWJ0ZXN0UHJpbnRWaWV3IGV4dGVuZHMgQmFja2JvbmUuVmlld1xuXG4gIGNsYXNzTmFtZSA6IFwiU3VidGVzdFByaW50Vmlld1wiXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpIC0+XG4gICAgQHByb3RvVmlld3MgID0gVGFuZ2VyaW5lLmNvbmZpZy5wcm90b3R5cGVWaWV3c1xuICAgIEBtb2RlbCAgICAgICA9IG9wdGlvbnMubW9kZWxcbiAgICBAcGFyZW50ICAgICAgPSBvcHRpb25zLnBhcmVudFxuICAgIEBmb3JtYXQgICAgICA9IG9wdGlvbnMuZm9ybWF0XG5cbiAgICBAcHJvdG90eXBlUmVuZGVyZWQgPSBmYWxzZVxuXG4gIHJlbmRlcjogLT5cbiAgICAgIFxuICAgIGVudW1lcmF0b3JIZWxwID0gaWYgKEBtb2RlbC5nZXQoXCJlbnVtZXJhdG9ySGVscFwiKSB8fCBcIlwiKSAhPSBcIlwiIHRoZW4gXCI8ZGl2IGNsYXNzPSdlbnVtZXJhdG9yX2hlbHBfcHJpbnQnPiN7QG1vZGVsLmdldCAnZW51bWVyYXRvckhlbHAnfTwvZGl2PlwiIGVsc2UgXCJcIlxuICAgIHN0dWRlbnREaWFsb2cgID0gaWYgKEBtb2RlbC5nZXQoXCJzdHVkZW50RGlhbG9nXCIpICB8fCBcIlwiKSAhPSBcIlwiIHRoZW4gXCI8ZGl2IGNsYXNzPSdzdHVkZW50X2RpYWxvZ19wcmludCc+I3tAbW9kZWwuZ2V0ICdzdHVkZW50RGlhbG9nJ308L2Rpdj5cIiBlbHNlIFwiXCJcbiAgICBza2lwQnV0dG9uID0gXCI8YnV0dG9uIGNsYXNzPSdza2lwIG5hdmlnYXRpb24nPlNraXA8L2J1dHRvbj5cIlxuICAgIHNraXBwYWJsZSA9IEBtb2RlbC5nZXRCb29sZWFuKFwic2tpcHBhYmxlXCIpXG5cbiAgICBpZiBAZm9ybWF0IGlzIFwiY29udGVudFwiXG5cbiAgICAgIEAkZWwuaHRtbCBcIlxuICAgICAgICA8aDI+I3tAbW9kZWwuZ2V0ICduYW1lJ308L2gyPlxuICAgICAgICAje1xuICAgICAgICAgIGRpc3BsYXlDb2RlID0gQG1vZGVsLmdldCAnZGlzcGxheUNvZGUnXG4gICAgICAgICAgaWYgZGlzcGxheUNvZGU/IGFuZCBkaXNwbGF5Q29kZSBpc250IFwiXCJcbiAgICAgICAgICAgIFwiU3VidGVzdCBBY3Rpb24gb24gRGlzcGxheTo8cHJlIHN0eWxlPSdmb250LXNpemU6ODAlJz4je2Rpc3BsYXlDb2RlfTwvcHJlPlwiXG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgXCJcIlxuICAgICAgICB9XG4gICAgICAgIEVudW1lcmF0b3IgSGVscDo8YnIvPlxuICAgICAgICAje2VudW1lcmF0b3JIZWxwfVxuICAgICAgICBTdHVkZW50IERpYWxvZzo8YnIvPlxuICAgICAgICAje3N0dWRlbnREaWFsb2d9XG4gICAgICAgIDxkaXYgY2xhc3M9J2Zvcm1hdC0je0Bmb3JtYXR9JyBpZD0ncHJvdG90eXBlX3dyYXBwZXInPjwvZGl2PlxuICAgICAgICA8aHIvPlxuICAgICAgXCJcblxuICAgIGVsc2UgaWYgQGZvcm1hdCBpcyBcImJhY2t1cFwiXG4gICAgICBAJGVsLmh0bWwgXCJcbiAgICAgICAgPGRpdiBjbGFzcz0nc3VidGVzdC10aXRsZSc+I3tAbW9kZWwuZ2V0IFwibmFtZVwifTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdzdHVkZW50LWRpYWxvZyc+I3tzdHVkZW50RGlhbG9nfTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdmb3JtYXQtI3tAZm9ybWF0fScgaWQ9J3Byb3RvdHlwZV93cmFwcGVyJz48L2Rpdj5cbiAgICAgICAgPGhyLz5cbiAgICAgIFwiXG5cbiAgICBlbHNlXG4gICAgICBAJGVsLmFwcGVuZCBcIlxuICAgICAgICA8ZGl2IGNsYXNzPSdmb3JtYXQtI3tAZm9ybWF0fScgaWQ9J3Byb3RvdHlwZV93cmFwcGVyJz48L2Rpdj5cbiAgICAgIFwiXG4gIFxuICAgICMgVXNlIHByb3RvdHlwZSBzcGVjaWZpYyB2aWV3cyBoZXJlXG4gICAgY29uc29sZS5sb2cgQG1vZGVsLmdldCgncHJvdG90eXBlJykuaHVtYW5pemUoKSArICdQcmludFZpZXcnXG5cbiAgICBAcHJvdG90eXBlVmlldyA9IG5ldyB3aW5kb3dbQG1vZGVsLmdldCgncHJvdG90eXBlJykuaHVtYW5pemUoKSArICdQcmludFZpZXcnXVxuICAgICAgbW9kZWw6IEBtb2RlbFxuICAgICAgcGFyZW50OiBAXG4gICAgQHByb3RvdHlwZVZpZXcub24gXCJyZW5kZXJlZFwiLCAgICA9PiBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiAgICBAcHJvdG90eXBlVmlldy5vbiBcInN1YlJlbmRlcmVkXCIsID0+IEB0cmlnZ2VyIFwic3ViUmVuZGVyZWRcIlxuICAgIEBwcm90b3R5cGVWaWV3LnNldEVsZW1lbnQoQCRlbC5maW5kKCcjcHJvdG90eXBlX3dyYXBwZXInKSlcbiAgICBAcHJvdG90eXBlVmlldy5mb3JtYXQgPSBAZm9ybWF0XG4gICAgQHByb3RvdHlwZVZpZXcucmVuZGVyKClcbiAgICBAcHJvdG90eXBlUmVuZGVyZWQgPSB0cnVlXG5cbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiIsInZhciBTdWJ0ZXN0UHJpbnRWaWV3LFxuICBleHRlbmQgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKGhhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH0sXG4gIGhhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuU3VidGVzdFByaW50VmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChTdWJ0ZXN0UHJpbnRWaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBTdWJ0ZXN0UHJpbnRWaWV3KCkge1xuICAgIHJldHVybiBTdWJ0ZXN0UHJpbnRWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgU3VidGVzdFByaW50Vmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJTdWJ0ZXN0UHJpbnRWaWV3XCI7XG5cbiAgU3VidGVzdFByaW50Vmlldy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLnByb3RvVmlld3MgPSBUYW5nZXJpbmUuY29uZmlnLnByb3RvdHlwZVZpZXdzO1xuICAgIHRoaXMubW9kZWwgPSBvcHRpb25zLm1vZGVsO1xuICAgIHRoaXMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gICAgdGhpcy5mb3JtYXQgPSBvcHRpb25zLmZvcm1hdDtcbiAgICByZXR1cm4gdGhpcy5wcm90b3R5cGVSZW5kZXJlZCA9IGZhbHNlO1xuICB9O1xuXG4gIFN1YnRlc3RQcmludFZpZXcucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkaXNwbGF5Q29kZSwgZW51bWVyYXRvckhlbHAsIHNraXBCdXR0b24sIHNraXBwYWJsZSwgc3R1ZGVudERpYWxvZztcbiAgICBlbnVtZXJhdG9ySGVscCA9ICh0aGlzLm1vZGVsLmdldChcImVudW1lcmF0b3JIZWxwXCIpIHx8IFwiXCIpICE9PSBcIlwiID8gXCI8ZGl2IGNsYXNzPSdlbnVtZXJhdG9yX2hlbHBfcHJpbnQnPlwiICsgKHRoaXMubW9kZWwuZ2V0KCdlbnVtZXJhdG9ySGVscCcpKSArIFwiPC9kaXY+XCIgOiBcIlwiO1xuICAgIHN0dWRlbnREaWFsb2cgPSAodGhpcy5tb2RlbC5nZXQoXCJzdHVkZW50RGlhbG9nXCIpIHx8IFwiXCIpICE9PSBcIlwiID8gXCI8ZGl2IGNsYXNzPSdzdHVkZW50X2RpYWxvZ19wcmludCc+XCIgKyAodGhpcy5tb2RlbC5nZXQoJ3N0dWRlbnREaWFsb2cnKSkgKyBcIjwvZGl2PlwiIDogXCJcIjtcbiAgICBza2lwQnV0dG9uID0gXCI8YnV0dG9uIGNsYXNzPSdza2lwIG5hdmlnYXRpb24nPlNraXA8L2J1dHRvbj5cIjtcbiAgICBza2lwcGFibGUgPSB0aGlzLm1vZGVsLmdldEJvb2xlYW4oXCJza2lwcGFibGVcIik7XG4gICAgaWYgKHRoaXMuZm9ybWF0ID09PSBcImNvbnRlbnRcIikge1xuICAgICAgdGhpcy4kZWwuaHRtbChcIjxoMj5cIiArICh0aGlzLm1vZGVsLmdldCgnbmFtZScpKSArIFwiPC9oMj4gXCIgKyAoZGlzcGxheUNvZGUgPSB0aGlzLm1vZGVsLmdldCgnZGlzcGxheUNvZGUnKSwgKGRpc3BsYXlDb2RlICE9IG51bGwpICYmIGRpc3BsYXlDb2RlICE9PSBcIlwiID8gXCJTdWJ0ZXN0IEFjdGlvbiBvbiBEaXNwbGF5OjxwcmUgc3R5bGU9J2ZvbnQtc2l6ZTo4MCUnPlwiICsgZGlzcGxheUNvZGUgKyBcIjwvcHJlPlwiIDogXCJcIikgKyBcIiBFbnVtZXJhdG9yIEhlbHA6PGJyLz4gXCIgKyBlbnVtZXJhdG9ySGVscCArIFwiIFN0dWRlbnQgRGlhbG9nOjxici8+IFwiICsgc3R1ZGVudERpYWxvZyArIFwiIDxkaXYgY2xhc3M9J2Zvcm1hdC1cIiArIHRoaXMuZm9ybWF0ICsgXCInIGlkPSdwcm90b3R5cGVfd3JhcHBlcic+PC9kaXY+IDxoci8+XCIpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5mb3JtYXQgPT09IFwiYmFja3VwXCIpIHtcbiAgICAgIHRoaXMuJGVsLmh0bWwoXCI8ZGl2IGNsYXNzPSdzdWJ0ZXN0LXRpdGxlJz5cIiArICh0aGlzLm1vZGVsLmdldChcIm5hbWVcIikpICsgXCI8L2Rpdj4gPGRpdiBjbGFzcz0nc3R1ZGVudC1kaWFsb2cnPlwiICsgc3R1ZGVudERpYWxvZyArIFwiPC9kaXY+IDxkaXYgY2xhc3M9J2Zvcm1hdC1cIiArIHRoaXMuZm9ybWF0ICsgXCInIGlkPSdwcm90b3R5cGVfd3JhcHBlcic+PC9kaXY+IDxoci8+XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRlbC5hcHBlbmQoXCI8ZGl2IGNsYXNzPSdmb3JtYXQtXCIgKyB0aGlzLmZvcm1hdCArIFwiJyBpZD0ncHJvdG90eXBlX3dyYXBwZXInPjwvZGl2PlwiKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2codGhpcy5tb2RlbC5nZXQoJ3Byb3RvdHlwZScpLmh1bWFuaXplKCkgKyAnUHJpbnRWaWV3Jyk7XG4gICAgdGhpcy5wcm90b3R5cGVWaWV3ID0gbmV3IHdpbmRvd1t0aGlzLm1vZGVsLmdldCgncHJvdG90eXBlJykuaHVtYW5pemUoKSArICdQcmludFZpZXcnXSh7XG4gICAgICBtb2RlbDogdGhpcy5tb2RlbCxcbiAgICAgIHBhcmVudDogdGhpc1xuICAgIH0pO1xuICAgIHRoaXMucHJvdG90eXBlVmlldy5vbihcInJlbmRlcmVkXCIsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMudHJpZ2dlcihcInJlbmRlcmVkXCIpO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgdGhpcy5wcm90b3R5cGVWaWV3Lm9uKFwic3ViUmVuZGVyZWRcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy50cmlnZ2VyKFwic3ViUmVuZGVyZWRcIik7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICB0aGlzLnByb3RvdHlwZVZpZXcuc2V0RWxlbWVudCh0aGlzLiRlbC5maW5kKCcjcHJvdG90eXBlX3dyYXBwZXInKSk7XG4gICAgdGhpcy5wcm90b3R5cGVWaWV3LmZvcm1hdCA9IHRoaXMuZm9ybWF0O1xuICAgIHRoaXMucHJvdG90eXBlVmlldy5yZW5kZXIoKTtcbiAgICB0aGlzLnByb3RvdHlwZVJlbmRlcmVkID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgcmV0dXJuIFN1YnRlc3RQcmludFZpZXc7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBDb25maWcgZXh0ZW5kcyBCYWNrYm9uZS5Nb2RlbFxuXG4gIHVybCA6IFwiY29uZmlnXCJcblxuICBzYXZlIDogbnVsbFxuXG4gIGdldERlZmF1bHQ6IChrZXkpIC0+XG4gICAgQGdldChcImRlZmF1bHRzXCIpW2tleV1cblxuIiwidmFyIENvbmZpZyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkNvbmZpZyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChDb25maWcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIENvbmZpZygpIHtcbiAgICByZXR1cm4gQ29uZmlnLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgQ29uZmlnLnByb3RvdHlwZS51cmwgPSBcImNvbmZpZ1wiO1xuXG4gIENvbmZpZy5wcm90b3R5cGUuc2F2ZSA9IG51bGw7XG5cbiAgQ29uZmlnLnByb3RvdHlwZS5nZXREZWZhdWx0ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KFwiZGVmYXVsdHNcIilba2V5XTtcbiAgfTtcblxuICByZXR1cm4gQ29uZmlnO1xuXG59KShCYWNrYm9uZS5Nb2RlbCk7XG5cbiIsImNsYXNzIExvZyBleHRlbmRzIEJhY2tib25lLk1vZGVsXG5cbiAgdXJsOiBcImxvZ1wiXG5cbiAgI1xuICAjIExvZyB1c2luZyB0aGVzZSBmb3VyIGZ1bmN0aW9uc1xuICAjXG5cbiAgIyBsYXJnZXIgYXBwbGljYXRpb24gZnVuY3Rpb25zXG4gIGFwcDogKCBjb2RlID0gXCJcIiwgZGV0YWlscyA9IFwiXCIgKSAtPlxuICAgIHJldHVybiBpZiAhflRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJsb2dcIikuaW5kZXhPZihcImFwcFwiKVxuICAgIEBhZGRcbiAgICAgIFwidHlwZVwiICAgICAgOiBcImFwcFwiXG4gICAgICBcImNvZGVcIiAgICAgIDogY29kZVxuICAgICAgXCJkZXRhaWxzXCIgICA6IGRldGFpbHNcbiAgICAgIFwidGltZXN0YW1wXCIgOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpXG5cbiAgIyBjb21tdW5pY2F0aW9ucyB3aXRoIGRhdGFiYXNlc1xuICBkYjogKCBjb2RlID0gXCJcIiwgZGV0YWlscyA9IFwiXCIgKSAtPlxuICAgIHJldHVybiBpZiAhflRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJsb2dcIikuaW5kZXhPZihcImRiXCIpXG4gICAgQGFkZFxuICAgICAgXCJ0eXBlXCIgICAgICA6IFwiZGJcIlxuICAgICAgXCJjb2RlXCIgICAgICA6IGNvZGVcbiAgICAgIFwiZGV0YWlsc1wiICAgOiBkZXRhaWxzXG4gICAgICBcInRpbWVzdGFtcFwiIDogKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuXG4gICMgc3BlY2lmaWMgVUkgaW50ZXJhY3Rpb25zXG4gIHVpOiAoIGNvZGUgPSBcIlwiLCBkZXRhaWxzID0gXCJcIiApIC0+XG4gICAgcmV0dXJuIGlmICF+VGFuZ2VyaW5lLnNldHRpbmdzLmdldChcImxvZ1wiKS5pbmRleE9mKFwidWlcIilcbiAgICBAYWRkXG4gICAgICBcInR5cGVcIiAgICAgIDogXCJ1aVwiXG4gICAgICBcImNvZGVcIiAgICAgIDogY29kZVxuICAgICAgXCJkZXRhaWxzXCIgICA6IGRldGFpbHNcbiAgICAgIFwidGltZXN0YW1wXCIgOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpXG5cbiAgIyBlcnJvcnMsIGhhbmRsZWQgb3Igb3RoZXJ3aXNlXG4gIGVycjogKCBjb2RlID0gXCJcIiwgZGV0YWlscyA9IFwiXCIgKSAtPlxuICAgIHJldHVybiAhflRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJsb2dcIikuaW5kZXhPZihcImVyclwiKVxuICAgIEBhZGRcbiAgICAgIFwidHlwZVwiICAgICAgOiBcImVyclwiXG4gICAgICBcImNvZGVcIiAgICAgIDogY29kZVxuICAgICAgXCJkZXRhaWxzXCIgICA6IGRldGFpbHNcbiAgICAgIFwidGltZXN0YW1wXCIgOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpXG5cbiAgIyByZXF1aXJlcyB0aGF0IFRISVMsIEAsIGlzIHVwIHRvIGRhdGUuIFxuICAjIGhhcyBhIHNpZGUgZWZmZWN0LCBpdCBzYXZlc1xuICBhZGQ6ICggbG9nRXZlbnQgKSAtPlxuICAgIGQgPSBuZXcgRGF0ZSgpXG4gICAgbmFtZSA9IFwibm90LXNpZ25lZC1pblwiXG4gICAgbmFtZSA9IFRhbmdlcmluZS51c2VyLm5hbWUoKSBpZiBUYW5nZXJpbmUudXNlci5uYW1lKCk/XG4gICAgQHVuc2V0IFwiX3JldlwiXG4gICAgQHNhdmUgXG4gICAgICBcIl9pZFwiICAgICAgIDogQGNhbGNOYW1lKClcbiAgICAgIFwieWVhclwiICAgICAgOiBkLmdldEZ1bGxZZWFyKClcbiAgICAgIFwibW9udGhcIiAgICAgOiBkLmdldE1vbnRoKClcbiAgICAgIFwiZGF0ZVwiICAgICAgOiBkLmdldERhdGUoKVxuICAgICAgXCJ0aW1lc3RhbXBcIiA6IGQuZ2V0VGltZSgpXG4gICAgICBcInVzZXJcIiAgICAgIDogbmFtZVxuICAgICAgXCJldmVudFwiICAgICA6IGxvZ0V2ZW50XG5cbiAgY2FsY05hbWU6IC0+XG4gICAgZCA9IG5ldyBEYXRlKClcbiAgICB1c2VyID0gXCJub3Qtc2lnbmVkLWluXCJcbiAgICB1c2VyID0gVGFuZ2VyaW5lLnVzZXIubmFtZSgpIGlmIFRhbmdlcmluZS51c2VyLm5hbWUoKT9cbiAgICByZXR1cm4gaGV4X3NoYTEgXCIje3VzZXJ9XyN7ZC5nZXRUaW1lKCl9XCJcblxuY2xhc3MgTG9ncyBleHRlbmRzIEJhY2tib25lLkNvbGxlY3Rpb25cbiAgdXJsOiBcImxvZ1wiXG4gIG1vZGVsOiBMb2dcbiAgY29tcGFyYXRvcjogKG1vZGVsKSAtPiByZXR1cm4gbW9kZWwuZ2V0KFwidGltZXN0YW1wXCIpXG5cbmNsYXNzIExvZ1ZpZXcgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgY2xhc3NOYW1lIDogXCJMb2dWaWV3XCJcbiAgZXZlbnRzIDpcbiAgICBcImNoYW5nZSAjdXNlcl9zZWxlY3RvclwiIDogXCJ1cGRhdGVcIlxuXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuICAgIEBsb2dzID0gb3B0aW9ucy5sb2dzXG4gICAgQGxvZ3NCeVVzZXIgID0gQGxvZ3MuaW5kZXhCeSBcInVzZXJcIlxuICAgIEBzZWxlY3RlZFVzZXIgPSBfLmZpcnN0IF8ua2V5cyBAbG9nc0J5VXNlclxuXG4gIHJlbmRlcjogPT5cblxuICAgIGh0bWxPcHRpb25zID0gKFwiPG9wdGlvbiBkYXRhLXVzZXI9JyN7dXNlcn0nICN7KFwic2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiIGlmIEBzZWxlY3RlZFVzZXIgPT0gdXNlcikgfHwgXCJcIn0+I3t1c2VyfTwvb3B0aW9uPlwiIGZvciB1c2VyIGluIF8ua2V5cyhAbG9nc0J5VXNlcikpLmpvaW4gXCJcIlxuICAgIEAkZWwuaHRtbCBcIlxuICAgICAgPGgxPkxvZ3M8L2gxPlxuXG4gICAgICA8c2VsZWN0IGlkPSd1c2VyX3NlbGVjdG9yJz4je2h0bWxPcHRpb25zfTwvc2VsZWN0PlxuICAgICAgPGRpdiBjbGFzcz0nbG9nX2NvbnRhaW5lcic+PC9kaXY+XG4gICAgXCJcbiAgICBAdXBkYXRlKClcbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcblxuICB1cGRhdGU6IC0+XG5cbiAgICBAc2VsZWN0ZWRVc2VyID0gQCRlbC5maW5kKFwiI3VzZXJfc2VsZWN0b3Igb3B0aW9uOnNlbGVjdGVkXCIpLmF0dHIoXCJkYXRhLXVzZXJcIilcblxuICAgIGxvZ3MgPSBAbG9nc0J5VXNlcltAc2VsZWN0ZWRVc2VyXVxuXG4gICAgaHRtbFRhYmxlID0gXCJcbiAgICA8aDI+VXNlciAje0BzZWxlY3RlZFVzZXJ9PC9oMj5cblxuICAgICAgPHRhYmxlPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoPkNvZGU8L3RoPlxuICAgICAgICAgIDx0aD5EZXRhaWxzPC90aD5cbiAgICAgICAgICA8dGg+VGltZTwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgXCJcblxuXG4gICAgZm9yIGxvZyBpbiBsb2dzXG4gICAgICByZXR1cm4gaWYgbm90IGxvZy5nZXQoXCJldmVudFwiKT8gXG5cbiAgICAgIGV2ICAgICAgPSBsb2cuZ2V0IFwiZXZlbnRcIlxuICAgICAgbmFtZSAgICA9IGxvZy5nZXQoXCJ1c2VyXCIpXG4gICAgICBjb2RlICAgID0gZXYuY29kZVxuICAgICAgZGV0YWlscyA9IGV2LmRldGFpbHNcbiAgICAgIHRpbWUgICAgPSAobmV3IERhdGUocGFyc2VJbnQoZXYudGltZXN0YW1wKSkpLnRvU3RyaW5nKClcblxuICAgICAgaHRtbFRhYmxlICs9IFwiXG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGQ+I3tjb2RlfTwvdGQ+XG4gICAgICAgICAgPHRkPiN7ZGV0YWlsc308L3RkPlxuICAgICAgICAgIDx0ZD4je3RpbWV9PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICAgIFwiXG5cbiAgICBodG1sVGFibGUgKz0gXCI8L3RhYmxlPlwiXG5cbiAgICBAJGVsLmZpbmQoXCIubG9nX2NvbnRhaW5lclwiKS5odG1sIGh0bWxUYWJsZVxuIiwidmFyIExvZywgTG9nVmlldywgTG9ncyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gIGJpbmQgPSBmdW5jdGlvbihmbiwgbWUpeyByZXR1cm4gZnVuY3Rpb24oKXsgcmV0dXJuIGZuLmFwcGx5KG1lLCBhcmd1bWVudHMpOyB9OyB9O1xuXG5Mb2cgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoTG9nLCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBMb2coKSB7XG4gICAgcmV0dXJuIExvZy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIExvZy5wcm90b3R5cGUudXJsID0gXCJsb2dcIjtcblxuICBMb2cucHJvdG90eXBlLmFwcCA9IGZ1bmN0aW9uKGNvZGUsIGRldGFpbHMpIHtcbiAgICBpZiAoY29kZSA9PSBudWxsKSB7XG4gICAgICBjb2RlID0gXCJcIjtcbiAgICB9XG4gICAgaWYgKGRldGFpbHMgPT0gbnVsbCkge1xuICAgICAgZGV0YWlscyA9IFwiXCI7XG4gICAgfVxuICAgIGlmICghflRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJsb2dcIikuaW5kZXhPZihcImFwcFwiKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hZGQoe1xuICAgICAgXCJ0eXBlXCI6IFwiYXBwXCIsXG4gICAgICBcImNvZGVcIjogY29kZSxcbiAgICAgIFwiZGV0YWlsc1wiOiBkZXRhaWxzLFxuICAgICAgXCJ0aW1lc3RhbXBcIjogKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuICAgIH0pO1xuICB9O1xuXG4gIExvZy5wcm90b3R5cGUuZGIgPSBmdW5jdGlvbihjb2RlLCBkZXRhaWxzKSB7XG4gICAgaWYgKGNvZGUgPT0gbnVsbCkge1xuICAgICAgY29kZSA9IFwiXCI7XG4gICAgfVxuICAgIGlmIChkZXRhaWxzID09IG51bGwpIHtcbiAgICAgIGRldGFpbHMgPSBcIlwiO1xuICAgIH1cbiAgICBpZiAoIX5UYW5nZXJpbmUuc2V0dGluZ3MuZ2V0KFwibG9nXCIpLmluZGV4T2YoXCJkYlwiKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5hZGQoe1xuICAgICAgXCJ0eXBlXCI6IFwiZGJcIixcbiAgICAgIFwiY29kZVwiOiBjb2RlLFxuICAgICAgXCJkZXRhaWxzXCI6IGRldGFpbHMsXG4gICAgICBcInRpbWVzdGFtcFwiOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpXG4gICAgfSk7XG4gIH07XG5cbiAgTG9nLnByb3RvdHlwZS51aSA9IGZ1bmN0aW9uKGNvZGUsIGRldGFpbHMpIHtcbiAgICBpZiAoY29kZSA9PSBudWxsKSB7XG4gICAgICBjb2RlID0gXCJcIjtcbiAgICB9XG4gICAgaWYgKGRldGFpbHMgPT0gbnVsbCkge1xuICAgICAgZGV0YWlscyA9IFwiXCI7XG4gICAgfVxuICAgIGlmICghflRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJsb2dcIikuaW5kZXhPZihcInVpXCIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFkZCh7XG4gICAgICBcInR5cGVcIjogXCJ1aVwiLFxuICAgICAgXCJjb2RlXCI6IGNvZGUsXG4gICAgICBcImRldGFpbHNcIjogZGV0YWlscyxcbiAgICAgIFwidGltZXN0YW1wXCI6IChuZXcgRGF0ZSgpKS5nZXRUaW1lKClcbiAgICB9KTtcbiAgfTtcblxuICBMb2cucHJvdG90eXBlLmVyciA9IGZ1bmN0aW9uKGNvZGUsIGRldGFpbHMpIHtcbiAgICBpZiAoY29kZSA9PSBudWxsKSB7XG4gICAgICBjb2RlID0gXCJcIjtcbiAgICB9XG4gICAgaWYgKGRldGFpbHMgPT0gbnVsbCkge1xuICAgICAgZGV0YWlscyA9IFwiXCI7XG4gICAgfVxuICAgIHJldHVybiAhflRhbmdlcmluZS5zZXR0aW5ncy5nZXQoXCJsb2dcIikuaW5kZXhPZihcImVyclwiKTtcbiAgICByZXR1cm4gdGhpcy5hZGQoe1xuICAgICAgXCJ0eXBlXCI6IFwiZXJyXCIsXG4gICAgICBcImNvZGVcIjogY29kZSxcbiAgICAgIFwiZGV0YWlsc1wiOiBkZXRhaWxzLFxuICAgICAgXCJ0aW1lc3RhbXBcIjogKG5ldyBEYXRlKCkpLmdldFRpbWUoKVxuICAgIH0pO1xuICB9O1xuXG4gIExvZy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24obG9nRXZlbnQpIHtcbiAgICB2YXIgZCwgbmFtZTtcbiAgICBkID0gbmV3IERhdGUoKTtcbiAgICBuYW1lID0gXCJub3Qtc2lnbmVkLWluXCI7XG4gICAgaWYgKFRhbmdlcmluZS51c2VyLm5hbWUoKSAhPSBudWxsKSB7XG4gICAgICBuYW1lID0gVGFuZ2VyaW5lLnVzZXIubmFtZSgpO1xuICAgIH1cbiAgICB0aGlzLnVuc2V0KFwiX3JldlwiKTtcbiAgICByZXR1cm4gdGhpcy5zYXZlKHtcbiAgICAgIFwiX2lkXCI6IHRoaXMuY2FsY05hbWUoKSxcbiAgICAgIFwieWVhclwiOiBkLmdldEZ1bGxZZWFyKCksXG4gICAgICBcIm1vbnRoXCI6IGQuZ2V0TW9udGgoKSxcbiAgICAgIFwiZGF0ZVwiOiBkLmdldERhdGUoKSxcbiAgICAgIFwidGltZXN0YW1wXCI6IGQuZ2V0VGltZSgpLFxuICAgICAgXCJ1c2VyXCI6IG5hbWUsXG4gICAgICBcImV2ZW50XCI6IGxvZ0V2ZW50XG4gICAgfSk7XG4gIH07XG5cbiAgTG9nLnByb3RvdHlwZS5jYWxjTmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkLCB1c2VyO1xuICAgIGQgPSBuZXcgRGF0ZSgpO1xuICAgIHVzZXIgPSBcIm5vdC1zaWduZWQtaW5cIjtcbiAgICBpZiAoVGFuZ2VyaW5lLnVzZXIubmFtZSgpICE9IG51bGwpIHtcbiAgICAgIHVzZXIgPSBUYW5nZXJpbmUudXNlci5uYW1lKCk7XG4gICAgfVxuICAgIHJldHVybiBoZXhfc2hhMSh1c2VyICsgXCJfXCIgKyAoZC5nZXRUaW1lKCkpKTtcbiAgfTtcblxuICByZXR1cm4gTG9nO1xuXG59KShCYWNrYm9uZS5Nb2RlbCk7XG5cbkxvZ3MgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoTG9ncywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gTG9ncygpIHtcbiAgICByZXR1cm4gTG9ncy5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIExvZ3MucHJvdG90eXBlLnVybCA9IFwibG9nXCI7XG5cbiAgTG9ncy5wcm90b3R5cGUubW9kZWwgPSBMb2c7XG5cbiAgTG9ncy5wcm90b3R5cGUuY29tcGFyYXRvciA9IGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgcmV0dXJuIG1vZGVsLmdldChcInRpbWVzdGFtcFwiKTtcbiAgfTtcblxuICByZXR1cm4gTG9ncztcblxufSkoQmFja2JvbmUuQ29sbGVjdGlvbik7XG5cbkxvZ1ZpZXcgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoTG9nVmlldywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gTG9nVmlldygpIHtcbiAgICB0aGlzLnJlbmRlciA9IGJpbmQodGhpcy5yZW5kZXIsIHRoaXMpO1xuICAgIHJldHVybiBMb2dWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgTG9nVmlldy5wcm90b3R5cGUuY2xhc3NOYW1lID0gXCJMb2dWaWV3XCI7XG5cbiAgTG9nVmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgIFwiY2hhbmdlICN1c2VyX3NlbGVjdG9yXCI6IFwidXBkYXRlXCJcbiAgfTtcblxuICBMb2dWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMubG9ncyA9IG9wdGlvbnMubG9ncztcbiAgICB0aGlzLmxvZ3NCeVVzZXIgPSB0aGlzLmxvZ3MuaW5kZXhCeShcInVzZXJcIik7XG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRVc2VyID0gXy5maXJzdChfLmtleXModGhpcy5sb2dzQnlVc2VyKSk7XG4gIH07XG5cbiAgTG9nVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGh0bWxPcHRpb25zLCB1c2VyO1xuICAgIGh0bWxPcHRpb25zID0gKChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpLCBsZW4sIHJlZiwgcmVzdWx0cztcbiAgICAgIHJlZiA9IF8ua2V5cyh0aGlzLmxvZ3NCeVVzZXIpO1xuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHVzZXIgPSByZWZbaV07XG4gICAgICAgIHJlc3VsdHMucHVzaChcIjxvcHRpb24gZGF0YS11c2VyPSdcIiArIHVzZXIgKyBcIicgXCIgKyAoKHRoaXMuc2VsZWN0ZWRVc2VyID09PSB1c2VyID8gXCJzZWxlY3RlZD0nc2VsZWN0ZWQnXCIgOiB2b2lkIDApIHx8IFwiXCIpICsgXCI+XCIgKyB1c2VyICsgXCI8L29wdGlvbj5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9KS5jYWxsKHRoaXMpKS5qb2luKFwiXCIpO1xuICAgIHRoaXMuJGVsLmh0bWwoXCI8aDE+TG9nczwvaDE+IDxzZWxlY3QgaWQ9J3VzZXJfc2VsZWN0b3InPlwiICsgaHRtbE9wdGlvbnMgKyBcIjwvc2VsZWN0PiA8ZGl2IGNsYXNzPSdsb2dfY29udGFpbmVyJz48L2Rpdj5cIik7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgTG9nVmlldy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvZGUsIGRldGFpbHMsIGV2LCBodG1sVGFibGUsIGksIGxlbiwgbG9nLCBsb2dzLCBuYW1lLCB0aW1lO1xuICAgIHRoaXMuc2VsZWN0ZWRVc2VyID0gdGhpcy4kZWwuZmluZChcIiN1c2VyX3NlbGVjdG9yIG9wdGlvbjpzZWxlY3RlZFwiKS5hdHRyKFwiZGF0YS11c2VyXCIpO1xuICAgIGxvZ3MgPSB0aGlzLmxvZ3NCeVVzZXJbdGhpcy5zZWxlY3RlZFVzZXJdO1xuICAgIGh0bWxUYWJsZSA9IFwiPGgyPlVzZXIgXCIgKyB0aGlzLnNlbGVjdGVkVXNlciArIFwiPC9oMj4gPHRhYmxlPiA8dHI+IDx0aD5Db2RlPC90aD4gPHRoPkRldGFpbHM8L3RoPiA8dGg+VGltZTwvdGg+IDwvdHI+XCI7XG4gICAgZm9yIChpID0gMCwgbGVuID0gbG9ncy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgbG9nID0gbG9nc1tpXTtcbiAgICAgIGlmIChsb2cuZ2V0KFwiZXZlbnRcIikgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBldiA9IGxvZy5nZXQoXCJldmVudFwiKTtcbiAgICAgIG5hbWUgPSBsb2cuZ2V0KFwidXNlclwiKTtcbiAgICAgIGNvZGUgPSBldi5jb2RlO1xuICAgICAgZGV0YWlscyA9IGV2LmRldGFpbHM7XG4gICAgICB0aW1lID0gKG5ldyBEYXRlKHBhcnNlSW50KGV2LnRpbWVzdGFtcCkpKS50b1N0cmluZygpO1xuICAgICAgaHRtbFRhYmxlICs9IFwiPHRyPiA8dGQ+XCIgKyBjb2RlICsgXCI8L3RkPiA8dGQ+XCIgKyBkZXRhaWxzICsgXCI8L3RkPiA8dGQ+XCIgKyB0aW1lICsgXCI8L3RkPiA8L3RyPlwiO1xuICAgIH1cbiAgICBodG1sVGFibGUgKz0gXCI8L3RhYmxlPlwiO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiLmxvZ19jb250YWluZXJcIikuaHRtbChodG1sVGFibGUpO1xuICB9O1xuXG4gIHJldHVybiBMb2dWaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgVGVtcGxhdGUgZXh0ZW5kcyBCYWNrYm9uZS5Nb2RlbFxuXHR1cmwgOiBcInRlbXBsYXRlXCIiLCJ2YXIgVGVtcGxhdGUsXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5UZW1wbGF0ZSA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChUZW1wbGF0ZSwgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gVGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIFRlbXBsYXRlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgVGVtcGxhdGUucHJvdG90eXBlLnVybCA9IFwidGVtcGxhdGVcIjtcblxuICByZXR1cm4gVGVtcGxhdGU7XG5cbn0pKEJhY2tib25lLk1vZGVsKTtcblxuIiwiIyBoYW5kbGVzIHNldHRpbmdzIHRoYXQgYXJlIGdyb3VwIHNwZWNpZmljXG5jbGFzcyBTZXR0aW5ncyBleHRlbmRzIEJhY2tib25lLk1vZGVsXG5cbiAgdXJsIDogXCJzZXR0aW5nc1wiXG5cbiAgaW5pdGlhbGl6ZTogLT5cblxuICAgIEBpcFJhbmdlID0gXy51bmlxKCh4IGZvciB4IGluIFsxMDAuLjIwMF0pLmNvbmNhdCgoeCBmb3IgeCBpbiBbMC4uMjU1XSkpKVxuICAgIEBjb25maWcgPSBUYW5nZXJpbmUuY29uZmlnXG4gICAgQG9uIFwiYWxsXCIsID0+IEB1cGRhdGUoKVxuXG4gIHVwZGF0ZTogPT5cbiAgICBncm91cEhvc3QgPSBAZ2V0IFwiZ3JvdXBIb3N0XCJcbiAgICBncm91cE5hbWUgPSBAZ2V0IFwiZ3JvdXBOYW1lXCJcbiAgICBncm91cEREb2MgPSBAZ2V0IFwiZ3JvdXBERG9jXCJcblxuICAgIEB1cFVzZXIgPSBcInVwbG9hZGVyLSN7Z3JvdXBOYW1lfVwiXG4gICAgQHVwUGFzcyA9IEBnZXQgXCJ1cFBhc3NcIlxuXG4gICAgdXBkYXRlICAgICA9IEBjb25maWcuZ2V0IFwidXBkYXRlXCJcblxuICAgIHRydW5rICAgICAgPSBAY29uZmlnLmdldCBcInRydW5rXCJcbiAgICBsb2NhbCAgICAgID0gQGNvbmZpZy5nZXQgXCJsb2NhbFwiXG4gICAgcG9ydCAgICAgICA9IEBjb25maWcuZ2V0IFwicG9ydFwiXG5cbiAgICBkZXNpZ25Eb2MgID0gVGFuZ2VyaW5lLmRlc2lnbl9kb2NcblxuICAgIHByZWZpeCAgICAgPSBAY29uZmlnLmdldCBcImdyb3VwREJQcmVmaXhcIlxuXG4gICAgQGdyb3VwREIgPSBcIiN7cHJlZml4fSN7Z3JvdXBOYW1lfVwiXG4gICAgQHRydW5rREIgPSB0cnVuay5kYk5hbWVcblxuICAgIHN1Ym5ldEJhc2UgPSBAY29uZmlnLmdldChcInN1Ym5ldFwiKS5iYXNlXG5cbiAgICBAbG9jYXRpb24gPVxuICAgICAgbG9jYWw6XG4gICAgICAgIHVybCA6IFwiI3tsb2NhbC5ob3N0fToje3BvcnR9L1wiXG4gICAgICAgIGRiICA6IFwiLyN7VGFuZ2VyaW5lLmRiX25hbWV9L1wiXG4gICAgICB0cnVuazpcbiAgICAgICAgdXJsIDogXCJodHRwOi8vI3t0cnVuay5ob3N0fS9cIlxuICAgICAgICBkYiAgOiBcImh0dHA6Ly8je3RydW5rLmhvc3R9LyN7dHJ1bmsuZGJOYW1lfS9cIlxuICAgICAgZ3JvdXA6XG4gICAgICAgIHVybCA6IFwiI3tncm91cEhvc3R9L1wiXG4gICAgICAgIGRiICA6IFwiI3tncm91cEhvc3R9L2RiLyN7cHJlZml4fSN7Z3JvdXBOYW1lfS9cIlxuICAgICAgdXBkYXRlIDpcbiAgICAgICAgdXJsIDogXCJodHRwOi8vI3t1cGRhdGUuaG9zdH0vXCJcbiAgICAgICAgZGIgIDogXCJodHRwOi8vI3t1cGRhdGUuaG9zdH0vI3t1cGRhdGUuZGJOYW1lfS9cIlxuICAgICAgICB0YXJnZXQgOiB1cGRhdGUudGFyZ2V0XG4gICAgICBzdWJuZXQgOlxuICAgICAgICB1cmwgOiAoXCJodHRwOi8vI3tzdWJuZXRCYXNlfSN7QGlwUmFuZ2VbeF19OiN7cG9ydH0vXCIgICAgICAgICAgICAgICAgICAgICAgZm9yIHggaW4gWzAuLjI1NV0pXG4gICAgICAgIGRiICA6IChcImh0dHA6Ly8je3N1Ym5ldEJhc2V9I3tAaXBSYW5nZVt4XX06I3twb3J0fS8je1RhbmdlcmluZS5kYl9uYW1lfS9cIiBmb3IgeCBpbiBbMC4uMjU1XSlcbiAgICAgIHNhdGVsbGl0ZSA6XG4gICAgICAgIHVybCA6IChcIiN7c3VibmV0QmFzZX0je3h9OiN7cG9ydH0vXCIgICAgICAgICAgICAgICAgICAgICAgIGZvciB4IGluIFswLi4yNTVdKVxuICAgICAgICBkYiAgOiAoXCIje3N1Ym5ldEJhc2V9I3t4fToje3BvcnR9LyN7cHJlZml4fSN7Z3JvdXBOYW1lfS9cIiBmb3IgeCBpbiBbMC4uMjU1XSlcblxuICAgIEBjb3VjaCA9XG4gICAgICB2aWV3ICA6IFwiX2Rlc2lnbi8je2Rlc2lnbkRvY30vX3ZpZXcvXCJcbiAgICAgIHNob3cgIDogXCJfZGVzaWduLyN7ZGVzaWduRG9jfS9fc2hvdy9cIlxuICAgICAgbGlzdCAgOiBcIl9kZXNpZ24vI3tkZXNpZ25Eb2N9L19saXN0L1wiXG4gICAgICBpbmRleCA6IFwiX2Rlc2lnbi8je2Rlc2lnbkRvY30vaW5kZXguaHRtbFwiXG5cbiAgICBAc3BhID1cbiAgICAgIHZpZXcgIDogXCJkYi9fZGVzaWduLyN7ZGVzaWduRG9jfS9fdmlldy9cIlxuICAgICAgc2hvdyAgOiBcImRiL19kZXNpZ24vI3tkZXNpZ25Eb2N9L19zaG93L1wiXG4gICAgICBsaXN0ICA6IFwiZGIvX2Rlc2lnbi8je2Rlc2lnbkRvY30vX2xpc3QvXCJcbiAgICAgIGluZGV4IDogXCJpbmRleC5odG1sXCJcblxuICAgIEBncm91cENvdWNoID1cbiAgICAgIHZpZXcgIDogXCJfZGVzaWduLyN7Z3JvdXBERG9jfS9fdmlldy9cIlxuICAgICAgc2hvdyAgOiBcIl9kZXNpZ24vI3tncm91cEREb2N9L19zaG93L1wiXG4gICAgICBsaXN0ICA6IFwiX2Rlc2lnbi8je2dyb3VwRERvY30vX2xpc3QvXCJcbiAgICAgIGluZGV4IDogXCJfZGVzaWduLyN7Z3JvdXBERG9jfS9pbmRleC5odG1sXCJcblxuICB1cmxCdWxrRG9jcyA6IC0+XG4gICAgYnVsa0RvY3NVUkwgPSBcIi9kYi9cIiArIFRhbmdlcmluZS5kYl9uYW1lICsgXCIvX2J1bGtfZG9jc1wiXG5cblxuICB1cmxJbmRleCA6ICggZ3JvdXBOYW1lLCBoYXNoID0gbnVsbCApIC0+XG4gICAgZ3JvdXBIb3N0ID0gQGdldCBcImdyb3VwSG9zdFwiXG5cbiAgICAjIHBvcnQgbnVtYmVyIG9ubHkgZm9yIGxvY2FsLCBpcmlzY291Y2ggYWx3YXlzIHVzZXMgODAsIGNvbmZ1c2VzIGNvcnNcbiAgICBwb3J0ICAgPSBpZiBncm91cE5hbWUgPT0gXCJsb2NhbFwiIHRoZW4gXCI6XCIrQGNvbmZpZy5nZXQoXCJwb3J0XCIpIGVsc2UgXCJcIlxuICAgIGhhc2ggICA9IGlmIGhhc2g/IHRoZW4gXCIjI3toYXNofVwiIGVsc2UgXCJcIlxuXG4gICAgaWYgZ3JvdXBOYW1lID09IFwidHJ1bmtcIlxuICAgICAgZ3JvdXBOYW1lID0gXCJ0YW5nZXJpbmVcIlxuICAgIGVsc2VcbiAgICAgIGdyb3VwTmFtZSA9IEBjb25maWcuZ2V0KFwiZ3JvdXBEQlByZWZpeFwiKSArIGdyb3VwTmFtZVxuXG4gICAgcmV0dXJuIFwiI3tncm91cEhvc3R9I3twb3J0fS9hcHAvI3tncm91cE5hbWV9LyN7QHNwYS5pbmRleH0je2hhc2h9XCJcblxuICB1cmxIb3N0ICA6ICggbG9jYXRpb24gKSAtPiBcIiN7QGxvY2F0aW9uW2xvY2F0aW9uXS51cmx9XCJcblxuICB1cmxEQiAgICA6ICggbG9jYXRpb24sIHBhc3MgPSBudWxsICkgLT5cbiAgICBpZiBsb2NhdGlvbiA9PSBcImxvY2FsXCJcbiAgICAgIHJlc3VsdCA9IFwiI3tAbG9jYXRpb25bbG9jYXRpb25dLmRifVwiLnNsaWNlKDEsLTEpXG4gICAgZWxzZVxuICAgICAgcmVzdWx0ID0gXCIje0Bsb2NhdGlvbltsb2NhdGlvbl0uZGJ9XCIuc2xpY2UoMCwgLTEpXG5cbiAgICBzcGxpdERCID0gcmVzdWx0LnNwbGl0KFwiOi8vXCIpXG5cbiAgICBpZiBwYXNzP1xuICAgICAgcmVzdWx0ID0gXCIje3NwbGl0REJbMF19Oi8vI3tUYW5nZXJpbmUudXNlci5uYW1lKCl9OiN7cGFzc31AI3tzcGxpdERCWzFdfVwiXG5cbiAgICByZXR1cm4gcmVzdWx0XG5cbiAgdXJsRERvYyA6ICggbG9jYXRpb24gKSAtPlxuICAgIGREb2MgPSBUYW5nZXJpbmUuZGVzaWduRG9jXG4gICAgcmV0dXJuIFwiI3tAdXJsREIoJ3RydW5rJyl9L19kZXNpZ24vI3tkRG9jfVwiXG5cbiAgdXJsVmlldyAgOiAoIGxvY2F0aW9uLCB2aWV3ICkgLT5cbiAgICBpZiBsb2NhdGlvbiA9PSBcImdyb3VwXCJcbiAgICAgIFwiI3tAbG9jYXRpb25bbG9jYXRpb25dLmRifSN7QGdyb3VwQ291Y2gudmlld30je3ZpZXd9XCJcbiAgICBlbHNlXG4gICAgICBcIiN7QGxvY2F0aW9uW2xvY2F0aW9uXS5kYn0je0Bjb3VjaC52aWV3fSN7dmlld31cIlxuXG4gIHVybExpc3QgIDogKCBsb2NhdGlvbiwgbGlzdCApIC0+XG4gICAgaWYgbG9jYXRpb24gPT0gXCJncm91cFwiXG4gICAgICBcIiN7QGxvY2F0aW9uW2xvY2F0aW9uXS5kYn0je0Bncm91cENvdWNoLmxpc3R9I3tsaXN0fVwiXG4gICAgZWxzZVxuICAgICAgXCIje0Bsb2NhdGlvbltsb2NhdGlvbl0uZGJ9I3tAY291Y2gubGlzdH0je2xpc3R9XCJcblxuICB1cmxTaG93ICA6ICggbG9jYXRpb24sIHNob3cgKSAtPlxuICAgIGlmIGxvY2F0aW9uID09IFwiZ3JvdXBcIlxuICAgICAgXCIje0Bsb2NhdGlvbltsb2NhdGlvbl0uZGJ9I3tAZ3JvdXBDb3VjaC5zaG93fSN7c2hvd31cIlxuICAgIGVsc2VcbiAgICAgIFwiI3tAbG9jYXRpb25bbG9jYXRpb25dLmRifSN7QGNvdWNoLnNob3d9I3tzaG93fVwiXG5cbiAgIyB0aGVzZSB0d28gYXJlIGEgbGl0dGxlIHdlaXJkLiBJIGZlZWwgbGlrZSBzdWJuZXRBZGRyZXNzIHNob3VsZCBiZSBhIGNsYXNzIHdpdGggcHJvcGVydGllcyBJUCwgVVJMIGFuZCBpbmRleFxuICB1cmxTdWJuZXQ6ICggaXAgKSAtPlxuICAgIHBvcnQgICA9IEBjb25maWcuZ2V0IFwicG9ydFwiXG4gICAgZGJOYW1lID0gVGFuZ2VyaW5lLmRiX25hbWVcblxuICAgIFwiaHR0cDovLyN7aXB9OiN7cG9ydH0vI3tkYk5hbWV9XCJcblxuICBzdWJuZXRJUDogKCBpbmRleCApIC0+XG4gICAgYmFzZSA9IEBjb25maWcuZ2V0KFwic3VibmV0XCIpLmJhc2VcbiAgICBcIiN7YmFzZX0je0BpcFJhbmdlW2luZGV4XX1cIlxuXG5cblxuXG5cbiIsInZhciBTZXR0aW5ncyxcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5TZXR0aW5ncyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChTZXR0aW5ncywgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gU2V0dGluZ3MoKSB7XG4gICAgdGhpcy51cGRhdGUgPSBiaW5kKHRoaXMudXBkYXRlLCB0aGlzKTtcbiAgICByZXR1cm4gU2V0dGluZ3MuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBTZXR0aW5ncy5wcm90b3R5cGUudXJsID0gXCJzZXR0aW5nc1wiO1xuXG4gIFNldHRpbmdzLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHg7XG4gICAgdGhpcy5pcFJhbmdlID0gXy51bmlxKCgoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgcmVzdWx0cztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoeCA9IGkgPSAxMDA7IGkgPD0gMjAwOyB4ID0gKytpKSB7XG4gICAgICAgIHJlc3VsdHMucHVzaCh4KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH0pKCkpLmNvbmNhdCgoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgcmVzdWx0cztcbiAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoeCA9IGkgPSAwOyBpIDw9IDI1NTsgeCA9ICsraSkge1xuICAgICAgICByZXN1bHRzLnB1c2goeCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9KSgpKSk7XG4gICAgdGhpcy5jb25maWcgPSBUYW5nZXJpbmUuY29uZmlnO1xuICAgIHJldHVybiB0aGlzLm9uKFwiYWxsXCIsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlKCk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgfTtcblxuICBTZXR0aW5ncy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRlc2lnbkRvYywgZ3JvdXBERG9jLCBncm91cEhvc3QsIGdyb3VwTmFtZSwgbG9jYWwsIHBvcnQsIHByZWZpeCwgc3VibmV0QmFzZSwgdHJ1bmssIHVwZGF0ZSwgeDtcbiAgICBncm91cEhvc3QgPSB0aGlzLmdldChcImdyb3VwSG9zdFwiKTtcbiAgICBncm91cE5hbWUgPSB0aGlzLmdldChcImdyb3VwTmFtZVwiKTtcbiAgICBncm91cEREb2MgPSB0aGlzLmdldChcImdyb3VwRERvY1wiKTtcbiAgICB0aGlzLnVwVXNlciA9IFwidXBsb2FkZXItXCIgKyBncm91cE5hbWU7XG4gICAgdGhpcy51cFBhc3MgPSB0aGlzLmdldChcInVwUGFzc1wiKTtcbiAgICB1cGRhdGUgPSB0aGlzLmNvbmZpZy5nZXQoXCJ1cGRhdGVcIik7XG4gICAgdHJ1bmsgPSB0aGlzLmNvbmZpZy5nZXQoXCJ0cnVua1wiKTtcbiAgICBsb2NhbCA9IHRoaXMuY29uZmlnLmdldChcImxvY2FsXCIpO1xuICAgIHBvcnQgPSB0aGlzLmNvbmZpZy5nZXQoXCJwb3J0XCIpO1xuICAgIGRlc2lnbkRvYyA9IFRhbmdlcmluZS5kZXNpZ25fZG9jO1xuICAgIHByZWZpeCA9IHRoaXMuY29uZmlnLmdldChcImdyb3VwREJQcmVmaXhcIik7XG4gICAgdGhpcy5ncm91cERCID0gXCJcIiArIHByZWZpeCArIGdyb3VwTmFtZTtcbiAgICB0aGlzLnRydW5rREIgPSB0cnVuay5kYk5hbWU7XG4gICAgc3VibmV0QmFzZSA9IHRoaXMuY29uZmlnLmdldChcInN1Ym5ldFwiKS5iYXNlO1xuICAgIHRoaXMubG9jYXRpb24gPSB7XG4gICAgICBsb2NhbDoge1xuICAgICAgICB1cmw6IGxvY2FsLmhvc3QgKyBcIjpcIiArIHBvcnQgKyBcIi9cIixcbiAgICAgICAgZGI6IFwiL1wiICsgVGFuZ2VyaW5lLmRiX25hbWUgKyBcIi9cIlxuICAgICAgfSxcbiAgICAgIHRydW5rOiB7XG4gICAgICAgIHVybDogXCJodHRwOi8vXCIgKyB0cnVuay5ob3N0ICsgXCIvXCIsXG4gICAgICAgIGRiOiBcImh0dHA6Ly9cIiArIHRydW5rLmhvc3QgKyBcIi9cIiArIHRydW5rLmRiTmFtZSArIFwiL1wiXG4gICAgICB9LFxuICAgICAgZ3JvdXA6IHtcbiAgICAgICAgdXJsOiBncm91cEhvc3QgKyBcIi9cIixcbiAgICAgICAgZGI6IGdyb3VwSG9zdCArIFwiL2RiL1wiICsgcHJlZml4ICsgZ3JvdXBOYW1lICsgXCIvXCJcbiAgICAgIH0sXG4gICAgICB1cGRhdGU6IHtcbiAgICAgICAgdXJsOiBcImh0dHA6Ly9cIiArIHVwZGF0ZS5ob3N0ICsgXCIvXCIsXG4gICAgICAgIGRiOiBcImh0dHA6Ly9cIiArIHVwZGF0ZS5ob3N0ICsgXCIvXCIgKyB1cGRhdGUuZGJOYW1lICsgXCIvXCIsXG4gICAgICAgIHRhcmdldDogdXBkYXRlLnRhcmdldFxuICAgICAgfSxcbiAgICAgIHN1Ym5ldDoge1xuICAgICAgICB1cmw6IChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaSwgcmVzdWx0cztcbiAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgZm9yICh4ID0gaSA9IDA7IGkgPD0gMjU1OyB4ID0gKytpKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goXCJodHRwOi8vXCIgKyBzdWJuZXRCYXNlICsgdGhpcy5pcFJhbmdlW3hdICsgXCI6XCIgKyBwb3J0ICsgXCIvXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfSkuY2FsbCh0aGlzKSxcbiAgICAgICAgZGI6IChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaSwgcmVzdWx0cztcbiAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgZm9yICh4ID0gaSA9IDA7IGkgPD0gMjU1OyB4ID0gKytpKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goXCJodHRwOi8vXCIgKyBzdWJuZXRCYXNlICsgdGhpcy5pcFJhbmdlW3hdICsgXCI6XCIgKyBwb3J0ICsgXCIvXCIgKyBUYW5nZXJpbmUuZGJfbmFtZSArIFwiL1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH0pLmNhbGwodGhpcylcbiAgICAgIH0sXG4gICAgICBzYXRlbGxpdGU6IHtcbiAgICAgICAgdXJsOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGksIHJlc3VsdHM7XG4gICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgIGZvciAoeCA9IGkgPSAwOyBpIDw9IDI1NTsgeCA9ICsraSkge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKFwiXCIgKyBzdWJuZXRCYXNlICsgeCArIFwiOlwiICsgcG9ydCArIFwiL1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH0pKCksXG4gICAgICAgIGRiOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGksIHJlc3VsdHM7XG4gICAgICAgICAgcmVzdWx0cyA9IFtdO1xuICAgICAgICAgIGZvciAoeCA9IGkgPSAwOyBpIDw9IDI1NTsgeCA9ICsraSkge1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKFwiXCIgKyBzdWJuZXRCYXNlICsgeCArIFwiOlwiICsgcG9ydCArIFwiL1wiICsgcHJlZml4ICsgZ3JvdXBOYW1lICsgXCIvXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfSkoKVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5jb3VjaCA9IHtcbiAgICAgIHZpZXc6IFwiX2Rlc2lnbi9cIiArIGRlc2lnbkRvYyArIFwiL192aWV3L1wiLFxuICAgICAgc2hvdzogXCJfZGVzaWduL1wiICsgZGVzaWduRG9jICsgXCIvX3Nob3cvXCIsXG4gICAgICBsaXN0OiBcIl9kZXNpZ24vXCIgKyBkZXNpZ25Eb2MgKyBcIi9fbGlzdC9cIixcbiAgICAgIGluZGV4OiBcIl9kZXNpZ24vXCIgKyBkZXNpZ25Eb2MgKyBcIi9pbmRleC5odG1sXCJcbiAgICB9O1xuICAgIHRoaXMuc3BhID0ge1xuICAgICAgdmlldzogXCJkYi9fZGVzaWduL1wiICsgZGVzaWduRG9jICsgXCIvX3ZpZXcvXCIsXG4gICAgICBzaG93OiBcImRiL19kZXNpZ24vXCIgKyBkZXNpZ25Eb2MgKyBcIi9fc2hvdy9cIixcbiAgICAgIGxpc3Q6IFwiZGIvX2Rlc2lnbi9cIiArIGRlc2lnbkRvYyArIFwiL19saXN0L1wiLFxuICAgICAgaW5kZXg6IFwiaW5kZXguaHRtbFwiXG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5ncm91cENvdWNoID0ge1xuICAgICAgdmlldzogXCJfZGVzaWduL1wiICsgZ3JvdXBERG9jICsgXCIvX3ZpZXcvXCIsXG4gICAgICBzaG93OiBcIl9kZXNpZ24vXCIgKyBncm91cEREb2MgKyBcIi9fc2hvdy9cIixcbiAgICAgIGxpc3Q6IFwiX2Rlc2lnbi9cIiArIGdyb3VwRERvYyArIFwiL19saXN0L1wiLFxuICAgICAgaW5kZXg6IFwiX2Rlc2lnbi9cIiArIGdyb3VwRERvYyArIFwiL2luZGV4Lmh0bWxcIlxuICAgIH07XG4gIH07XG5cbiAgU2V0dGluZ3MucHJvdG90eXBlLnVybEJ1bGtEb2NzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJ1bGtEb2NzVVJMO1xuICAgIHJldHVybiBidWxrRG9jc1VSTCA9IFwiL2RiL1wiICsgVGFuZ2VyaW5lLmRiX25hbWUgKyBcIi9fYnVsa19kb2NzXCI7XG4gIH07XG5cbiAgU2V0dGluZ3MucHJvdG90eXBlLnVybEluZGV4ID0gZnVuY3Rpb24oZ3JvdXBOYW1lLCBoYXNoKSB7XG4gICAgdmFyIGdyb3VwSG9zdCwgcG9ydDtcbiAgICBpZiAoaGFzaCA9PSBudWxsKSB7XG4gICAgICBoYXNoID0gbnVsbDtcbiAgICB9XG4gICAgZ3JvdXBIb3N0ID0gdGhpcy5nZXQoXCJncm91cEhvc3RcIik7XG4gICAgcG9ydCA9IGdyb3VwTmFtZSA9PT0gXCJsb2NhbFwiID8gXCI6XCIgKyB0aGlzLmNvbmZpZy5nZXQoXCJwb3J0XCIpIDogXCJcIjtcbiAgICBoYXNoID0gaGFzaCAhPSBudWxsID8gXCIjXCIgKyBoYXNoIDogXCJcIjtcbiAgICBpZiAoZ3JvdXBOYW1lID09PSBcInRydW5rXCIpIHtcbiAgICAgIGdyb3VwTmFtZSA9IFwidGFuZ2VyaW5lXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3VwTmFtZSA9IHRoaXMuY29uZmlnLmdldChcImdyb3VwREJQcmVmaXhcIikgKyBncm91cE5hbWU7XG4gICAgfVxuICAgIHJldHVybiBcIlwiICsgZ3JvdXBIb3N0ICsgcG9ydCArIFwiL2FwcC9cIiArIGdyb3VwTmFtZSArIFwiL1wiICsgdGhpcy5zcGEuaW5kZXggKyBoYXNoO1xuICB9O1xuXG4gIFNldHRpbmdzLnByb3RvdHlwZS51cmxIb3N0ID0gZnVuY3Rpb24obG9jYXRpb24pIHtcbiAgICByZXR1cm4gXCJcIiArIHRoaXMubG9jYXRpb25bbG9jYXRpb25dLnVybDtcbiAgfTtcblxuICBTZXR0aW5ncy5wcm90b3R5cGUudXJsREIgPSBmdW5jdGlvbihsb2NhdGlvbiwgcGFzcykge1xuICAgIHZhciByZXN1bHQsIHNwbGl0REI7XG4gICAgaWYgKHBhc3MgPT0gbnVsbCkge1xuICAgICAgcGFzcyA9IG51bGw7XG4gICAgfVxuICAgIGlmIChsb2NhdGlvbiA9PT0gXCJsb2NhbFwiKSB7XG4gICAgICByZXN1bHQgPSAoXCJcIiArIHRoaXMubG9jYXRpb25bbG9jYXRpb25dLmRiKS5zbGljZSgxLCAtMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IChcIlwiICsgdGhpcy5sb2NhdGlvbltsb2NhdGlvbl0uZGIpLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gICAgc3BsaXREQiA9IHJlc3VsdC5zcGxpdChcIjovL1wiKTtcbiAgICBpZiAocGFzcyAhPSBudWxsKSB7XG4gICAgICByZXN1bHQgPSBzcGxpdERCWzBdICsgXCI6Ly9cIiArIChUYW5nZXJpbmUudXNlci5uYW1lKCkpICsgXCI6XCIgKyBwYXNzICsgXCJAXCIgKyBzcGxpdERCWzFdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIFNldHRpbmdzLnByb3RvdHlwZS51cmxERG9jID0gZnVuY3Rpb24obG9jYXRpb24pIHtcbiAgICB2YXIgZERvYztcbiAgICBkRG9jID0gVGFuZ2VyaW5lLmRlc2lnbkRvYztcbiAgICByZXR1cm4gKHRoaXMudXJsREIoJ3RydW5rJykpICsgXCIvX2Rlc2lnbi9cIiArIGREb2M7XG4gIH07XG5cbiAgU2V0dGluZ3MucHJvdG90eXBlLnVybFZpZXcgPSBmdW5jdGlvbihsb2NhdGlvbiwgdmlldykge1xuICAgIGlmIChsb2NhdGlvbiA9PT0gXCJncm91cFwiKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHRoaXMubG9jYXRpb25bbG9jYXRpb25dLmRiICsgdGhpcy5ncm91cENvdWNoLnZpZXcgKyB2aWV3O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJcIiArIHRoaXMubG9jYXRpb25bbG9jYXRpb25dLmRiICsgdGhpcy5jb3VjaC52aWV3ICsgdmlldztcbiAgICB9XG4gIH07XG5cbiAgU2V0dGluZ3MucHJvdG90eXBlLnVybExpc3QgPSBmdW5jdGlvbihsb2NhdGlvbiwgbGlzdCkge1xuICAgIGlmIChsb2NhdGlvbiA9PT0gXCJncm91cFwiKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHRoaXMubG9jYXRpb25bbG9jYXRpb25dLmRiICsgdGhpcy5ncm91cENvdWNoLmxpc3QgKyBsaXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJcIiArIHRoaXMubG9jYXRpb25bbG9jYXRpb25dLmRiICsgdGhpcy5jb3VjaC5saXN0ICsgbGlzdDtcbiAgICB9XG4gIH07XG5cbiAgU2V0dGluZ3MucHJvdG90eXBlLnVybFNob3cgPSBmdW5jdGlvbihsb2NhdGlvbiwgc2hvdykge1xuICAgIGlmIChsb2NhdGlvbiA9PT0gXCJncm91cFwiKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHRoaXMubG9jYXRpb25bbG9jYXRpb25dLmRiICsgdGhpcy5ncm91cENvdWNoLnNob3cgKyBzaG93O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJcIiArIHRoaXMubG9jYXRpb25bbG9jYXRpb25dLmRiICsgdGhpcy5jb3VjaC5zaG93ICsgc2hvdztcbiAgICB9XG4gIH07XG5cbiAgU2V0dGluZ3MucHJvdG90eXBlLnVybFN1Ym5ldCA9IGZ1bmN0aW9uKGlwKSB7XG4gICAgdmFyIGRiTmFtZSwgcG9ydDtcbiAgICBwb3J0ID0gdGhpcy5jb25maWcuZ2V0KFwicG9ydFwiKTtcbiAgICBkYk5hbWUgPSBUYW5nZXJpbmUuZGJfbmFtZTtcbiAgICByZXR1cm4gXCJodHRwOi8vXCIgKyBpcCArIFwiOlwiICsgcG9ydCArIFwiL1wiICsgZGJOYW1lO1xuICB9O1xuXG4gIFNldHRpbmdzLnByb3RvdHlwZS5zdWJuZXRJUCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgdmFyIGJhc2U7XG4gICAgYmFzZSA9IHRoaXMuY29uZmlnLmdldChcInN1Ym5ldFwiKS5iYXNlO1xuICAgIHJldHVybiBcIlwiICsgYmFzZSArIHRoaXMuaXBSYW5nZVtpbmRleF07XG4gIH07XG5cbiAgcmV0dXJuIFNldHRpbmdzO1xuXG59KShCYWNrYm9uZS5Nb2RlbCk7XG5cbiIsImNsYXNzIFNldHRpbmdzVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIlNldHRpbmdzVmlld1wiXG5cbiAgZXZlbnRzOiBcbiAgICAnY2xpY2sgLnNhdmUnIDogJ3NhdmUnXG4gICAgJ2NsaWNrIC5iYWNrJyA6ICdnb0JhY2snXG5cbiAgZ29CYWNrOiAtPlxuICAgIHdpbmRvdy5oaXN0b3J5LmJhY2soKVxuXG4gIGkxOG46IC0+XG4gICAgQHRleHQgPSBcblxuICAgICAgc2F2ZSA6IHQoXCJUYW5nZXJpbmUuYWN0aW9ucy5idXR0b24uc2F2ZVwiKVxuICAgICAgICBcbiAgICAgIGJhY2sgOiB0KFwiVGFuZ2VyaW5lLm5hdmlnYXRpb24uYnV0dG9uLmJhY2tcIilcblxuICAgICAgc2F2ZWQgOiB0KFwiVGFuZ2VyaW5lLm1lc3NhZ2Uuc2F2ZWRcIilcbiAgICAgIHNhdmVFcnJvciA6IHQoXCJUYW5nZXJpbmUubWVzc2FnZS5zYXZlX2Vycm9yXCIpXG5cbiAgICAgIHNldHRpbmdzOiB0KFwiU2V0dGluZ3NWaWV3LmxhYmVsLnNldHRpbmdzXCIpXG5cbiAgICAgIHdhcm5pbmc6IHQoXCJTZXR0aW5nc1ZpZXcubWVzc2FnZS53YXJuaW5nXCIpXG5cbiAgICAgIGNvbnRleHRIZWxwOiB0KFwiU2V0dGluZ3NWaWV3LmhlbHAuY29udGV4dFwiKVxuICAgICAgbGFuZ3VhZ2VIZWxwIDogdChcIlNldHRpbmdzVmlldy5oZWxwLmxhbmd1YWdlXCIpXG4gICAgICBncm91cEhhbmRsZUhlbHAgOiB0KFwiU2V0dGluZ3NWaWV3LmhlbHAuZ3JvdXBfaGFuZGxlXCIpXG4gICAgICBncm91cE5hbWVIZWxwIDogdChcIlNldHRpbmdzVmlldy5oZWxwLmdyb3VwX25hbWVcIilcbiAgICAgIGdyb3VwSG9zdEhlbHAgOiB0KFwiU2V0dGluZ3NWaWV3LmhlbHAuZ3JvdXBfaG9zdFwiKVxuICAgICAgdXBsb2FkUGFzc3dvcmRIZWxwIDogdChcIlNldHRpbmdzVmlldy5oZWxwLnVwbG9hZF9wYXNzd29yZFwiKVxuICAgICAgbG9nRXZlbnRzSGVscCA6IHQoXCJTZXR0aW5nc1ZpZXcuaGVscC5sb2dfZXZlbnRzXCIpXG5cbiAgICAgIGNvbnRleHQ6IHQoXCJTZXR0aW5nc1ZpZXcubGFiZWwuY29udGV4dFwiKVxuICAgICAgbGFuZ3VhZ2U6IHQoXCJTZXR0aW5nc1ZpZXcubGFiZWwubGFuZ3VhZ2VcIilcbiAgICAgIGdyb3VwSGFuZGxlOiB0KFwiU2V0dGluZ3NWaWV3LmxhYmVsLmdyb3VwX2hhbmRsZVwiKVxuICAgICAgZ3JvdXBOYW1lOiB0KFwiU2V0dGluZ3NWaWV3LmxhYmVsLmdyb3VwX25hbWVcIilcbiAgICAgIGdyb3VwSG9zdDogdChcIlNldHRpbmdzVmlldy5sYWJlbC5ncm91cF9ob3N0XCIpXG4gICAgICB1cGxvYWRQYXNzd29yZDogdChcIlNldHRpbmdzVmlldy5sYWJlbC51cGxvYWRfcGFzc3dvcmRcIilcbiAgICAgIGxvZ0V2ZW50cyA6IHQoXCJTZXR0aW5nc1ZpZXcubGFiZWwubG9nX2V2ZW50c1wiKVxuICAgICAgXG4gIGluaXRpYWxpemU6IChvcHRpb25zKSAtPlxuXG4gICAgQGkxOG4oKVxuXG4gICAgQHNldHRpbmdzID0gVGFuZ2VyaW5lLnNldHRpbmdzXG5cbiAgc2F2ZTogLT5cbiAgICBAc2V0dGluZ3Muc2F2ZVxuICAgICAgZ3JvdXBIYW5kbGUgOiBAJGVsLmZpbmQoJyNncm91cF9oYW5kbGUnKS52YWwoKVxuICAgICAgY29udGV4dCAgICAgOiBAJGVsLmZpbmQoJyNjb250ZXh0JykudmFsKClcbiAgICAgIGxhbmd1YWdlICAgIDogQCRlbC5maW5kKCcjbGFuZ3VhZ2UnKS52YWwoKVxuICAgICAgZ3JvdXBOYW1lICAgOiBAJGVsLmZpbmQoXCIjZ3JvdXBfbmFtZVwiKS52YWwoKVxuICAgICAgZ3JvdXBIb3N0ICAgOiBAJGVsLmZpbmQoXCIjZ3JvdXBfaG9zdFwiKS52YWwoKVxuICAgICAgdXBQYXNzICAgICAgOiBAJGVsLmZpbmQoXCIjdXBfcGFzc1wiKS52YWwoKVxuICAgICAgbG9nICAgICAgICAgOiBAJGVsLmZpbmQoXCIjbG9nXCIpLnZhbCgpLnNwbGl0KC9bXFxzLF0rLylcbiAgICAsXG4gICAgICBzdWNjZXNzOiA9PlxuICAgICAgICBVdGlscy5taWRBbGVydCBAdGV4dC5zYXZlZFxuICAgICAgZXJyb3I6IC0+XG4gICAgICAgIFV0aWxzLm1pZEFsZXJ0IEB0ZXh0LnNhdmVFcnJvclxuXG4gIHJlbmRlcjogLT5cbiAgICBjb250ZXh0ICAgICA9IEBzZXR0aW5ncy5nZXRFc2NhcGVkU3RyaW5nIFwiY29udGV4dFwiXG4gICAgbGFuZ3VhZ2UgICAgPSBAc2V0dGluZ3MuZ2V0RXNjYXBlZFN0cmluZyBcImxhbmd1YWdlXCJcbiAgICBncm91cE5hbWUgICA9IEBzZXR0aW5ncy5nZXRFc2NhcGVkU3RyaW5nIFwiZ3JvdXBOYW1lXCJcbiAgICBncm91cEhhbmRsZSA9IEBzZXR0aW5ncy5nZXRFc2NhcGVkU3RyaW5nIFwiZ3JvdXBIYW5kbGVcIlxuICAgIGdyb3VwSG9zdCAgID0gQHNldHRpbmdzLmdldEVzY2FwZWRTdHJpbmcgXCJncm91cEhvc3RcIlxuICAgIHVwUGFzcyAgICAgID0gQHNldHRpbmdzLmdldEVzY2FwZWRTdHJpbmcgXCJ1cFBhc3NcIlxuICAgIGxvZyAgICAgICAgID0gXy5lc2NhcGUoIEBzZXR0aW5ncy5nZXRBcnJheShcImxvZ1wiKS5qb2luKFwiLCBcIikgKVxuXG4gICAgQCRlbC5odG1sIFwiXG4gICAgICA8YnV0dG9uIGNsYXNzPSdiYWNrIG5hdmlnYXRpb24nPiN7QHRleHQuYmFja308L2J1dHRvbj5cbiAgICAgIDxoMT4je0B0ZXh0LnNldHRpbmdzfTwvaDE+XG4gICAgICA8cD48aW1nIHNyYz0naW1hZ2VzL2ljb25fd2Fybi5wbmcnIHRpdGxlPSdXYXJuaW5nJz4je0B0ZXh0Lndhcm5pbmd9PC9wPlxuICAgICAgPGRpdiBjbGFzcz0nbWVudV9ib3gnPlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nY29udGV4dCcgdGl0bGU9JyN7QHRleHQuY29udGV4dEhlbHB9Jz4je0B0ZXh0LmNvbnRleHR9PC9sYWJlbD48YnI+XG4gICAgICAgICAgPGlucHV0IGlkPSdjb250ZXh0JyB0eXBlPSd0ZXh0JyB2YWx1ZT0nI3tjb250ZXh0fSc+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nbGFuZ3VhZ2UnIHRpdGxlPScje0B0ZXh0Lmxhbmd1YWdlSGVscH0nPiN7QHRleHQubGFuZ3VhZ2V9PC9sYWJlbD48YnI+XG4gICAgICAgICAgPGlucHV0IGlkPSdsYW5ndWFnZScgdHlwZT0ndGV4dCcgdmFsdWU9JyN7bGFuZ3VhZ2V9Jz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz5cbiAgICAgICAgICA8bGFiZWwgZm9yPSdncm91cF9oYW5kbGUnIHRpdGxlPScje0B0ZXh0Lmdyb3VwSGFuZGxlSGVscH0nPiN7QHRleHQuZ3JvdXBIYW5kbGV9PC9sYWJlbD48YnI+XG4gICAgICAgICAgPGlucHV0IGlkPSdncm91cF9oYW5kbGUnIHR5cGU9J3RleHQnIHZhbHVlPScje2dyb3VwSGFuZGxlfSc+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nZ3JvdXBfbmFtZScgdGl0bGU9JyN7QHRleHQuZ3JvdXBOYW1lSGVscH0nPiN7QHRleHQuZ3JvdXBOYW1lfTwvbGFiZWw+PGJyPlxuICAgICAgICAgIDxpbnB1dCBpZD0nZ3JvdXBfbmFtZScgdHlwZT0ndGV4dCcgdmFsdWU9JyN7Z3JvdXBOYW1lfSc+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0nZ3JvdXBfaG9zdCcgdGl0bGU9JyN7QHRleHQuZ3JvdXBIb3N0SGVscH0nPiN7QHRleHQuZ3JvdXBIb3N0fTwvbGFiZWw+PGJyPlxuICAgICAgICAgIDxpbnB1dCBpZD0nZ3JvdXBfaG9zdCcgdHlwZT0ndGV4dCcgdmFsdWU9JyN7Z3JvdXBIb3N0fSc+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+XG4gICAgICAgICAgPGxhYmVsIGZvcj0ndXBfcGFzcycgdGl0bGU9JyN7QHRleHQudXBsb2FkUGFzc3dvcmRIZWxwfSc+I3tAdGV4dC51cGxvYWRQYXNzd29yZH08L2xhYmVsPjxicj5cbiAgICAgICAgICA8aW5wdXQgaWQ9J3VwX3Bhc3MnIHR5cGU9J3RleHQnIHZhbHVlPScje3VwUGFzc30nPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPlxuICAgICAgICAgIDxsYWJlbCBmb3I9J2xvZycgdGl0bGU9JyN7QHRleHQubG9nRXZlbnRzSGVscH0nPiN7QHRleHQubG9nRXZlbnRzfTwvbGFiZWw+PGJyPlxuICAgICAgICAgIDxpbnB1dCBpZD0nbG9nJyB2YWx1ZT0nI3tsb2d9Jz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj48YnI+XG5cbiAgICAgIDxidXR0b24gY2xhc3M9J2NvbW1hbmQgc2F2ZSc+I3tAdGV4dC5zYXZlfTwvYnV0dG9uPlxuICAgIFwiXG4gICAgXG4gICAgQHRyaWdnZXIgXCJyZW5kZXJlZFwiIiwidmFyIFNldHRpbmdzVmlldyxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cblNldHRpbmdzVmlldyA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChTZXR0aW5nc1ZpZXcsIHN1cGVyQ2xhc3MpO1xuXG4gIGZ1bmN0aW9uIFNldHRpbmdzVmlldygpIHtcbiAgICByZXR1cm4gU2V0dGluZ3NWaWV3Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgU2V0dGluZ3NWaWV3LnByb3RvdHlwZS5jbGFzc05hbWUgPSBcIlNldHRpbmdzVmlld1wiO1xuXG4gIFNldHRpbmdzVmlldy5wcm90b3R5cGUuZXZlbnRzID0ge1xuICAgICdjbGljayAuc2F2ZSc6ICdzYXZlJyxcbiAgICAnY2xpY2sgLmJhY2snOiAnZ29CYWNrJ1xuICB9O1xuXG4gIFNldHRpbmdzVmlldy5wcm90b3R5cGUuZ29CYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcbiAgfTtcblxuICBTZXR0aW5nc1ZpZXcucHJvdG90eXBlLmkxOG4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0ID0ge1xuICAgICAgc2F2ZTogdChcIlRhbmdlcmluZS5hY3Rpb25zLmJ1dHRvbi5zYXZlXCIpLFxuICAgICAgYmFjazogdChcIlRhbmdlcmluZS5uYXZpZ2F0aW9uLmJ1dHRvbi5iYWNrXCIpLFxuICAgICAgc2F2ZWQ6IHQoXCJUYW5nZXJpbmUubWVzc2FnZS5zYXZlZFwiKSxcbiAgICAgIHNhdmVFcnJvcjogdChcIlRhbmdlcmluZS5tZXNzYWdlLnNhdmVfZXJyb3JcIiksXG4gICAgICBzZXR0aW5nczogdChcIlNldHRpbmdzVmlldy5sYWJlbC5zZXR0aW5nc1wiKSxcbiAgICAgIHdhcm5pbmc6IHQoXCJTZXR0aW5nc1ZpZXcubWVzc2FnZS53YXJuaW5nXCIpLFxuICAgICAgY29udGV4dEhlbHA6IHQoXCJTZXR0aW5nc1ZpZXcuaGVscC5jb250ZXh0XCIpLFxuICAgICAgbGFuZ3VhZ2VIZWxwOiB0KFwiU2V0dGluZ3NWaWV3LmhlbHAubGFuZ3VhZ2VcIiksXG4gICAgICBncm91cEhhbmRsZUhlbHA6IHQoXCJTZXR0aW5nc1ZpZXcuaGVscC5ncm91cF9oYW5kbGVcIiksXG4gICAgICBncm91cE5hbWVIZWxwOiB0KFwiU2V0dGluZ3NWaWV3LmhlbHAuZ3JvdXBfbmFtZVwiKSxcbiAgICAgIGdyb3VwSG9zdEhlbHA6IHQoXCJTZXR0aW5nc1ZpZXcuaGVscC5ncm91cF9ob3N0XCIpLFxuICAgICAgdXBsb2FkUGFzc3dvcmRIZWxwOiB0KFwiU2V0dGluZ3NWaWV3LmhlbHAudXBsb2FkX3Bhc3N3b3JkXCIpLFxuICAgICAgbG9nRXZlbnRzSGVscDogdChcIlNldHRpbmdzVmlldy5oZWxwLmxvZ19ldmVudHNcIiksXG4gICAgICBjb250ZXh0OiB0KFwiU2V0dGluZ3NWaWV3LmxhYmVsLmNvbnRleHRcIiksXG4gICAgICBsYW5ndWFnZTogdChcIlNldHRpbmdzVmlldy5sYWJlbC5sYW5ndWFnZVwiKSxcbiAgICAgIGdyb3VwSGFuZGxlOiB0KFwiU2V0dGluZ3NWaWV3LmxhYmVsLmdyb3VwX2hhbmRsZVwiKSxcbiAgICAgIGdyb3VwTmFtZTogdChcIlNldHRpbmdzVmlldy5sYWJlbC5ncm91cF9uYW1lXCIpLFxuICAgICAgZ3JvdXBIb3N0OiB0KFwiU2V0dGluZ3NWaWV3LmxhYmVsLmdyb3VwX2hvc3RcIiksXG4gICAgICB1cGxvYWRQYXNzd29yZDogdChcIlNldHRpbmdzVmlldy5sYWJlbC51cGxvYWRfcGFzc3dvcmRcIiksXG4gICAgICBsb2dFdmVudHM6IHQoXCJTZXR0aW5nc1ZpZXcubGFiZWwubG9nX2V2ZW50c1wiKVxuICAgIH07XG4gIH07XG5cbiAgU2V0dGluZ3NWaWV3LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMuaTE4bigpO1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzID0gVGFuZ2VyaW5lLnNldHRpbmdzO1xuICB9O1xuXG4gIFNldHRpbmdzVmlldy5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnNhdmUoe1xuICAgICAgZ3JvdXBIYW5kbGU6IHRoaXMuJGVsLmZpbmQoJyNncm91cF9oYW5kbGUnKS52YWwoKSxcbiAgICAgIGNvbnRleHQ6IHRoaXMuJGVsLmZpbmQoJyNjb250ZXh0JykudmFsKCksXG4gICAgICBsYW5ndWFnZTogdGhpcy4kZWwuZmluZCgnI2xhbmd1YWdlJykudmFsKCksXG4gICAgICBncm91cE5hbWU6IHRoaXMuJGVsLmZpbmQoXCIjZ3JvdXBfbmFtZVwiKS52YWwoKSxcbiAgICAgIGdyb3VwSG9zdDogdGhpcy4kZWwuZmluZChcIiNncm91cF9ob3N0XCIpLnZhbCgpLFxuICAgICAgdXBQYXNzOiB0aGlzLiRlbC5maW5kKFwiI3VwX3Bhc3NcIikudmFsKCksXG4gICAgICBsb2c6IHRoaXMuJGVsLmZpbmQoXCIjbG9nXCIpLnZhbCgpLnNwbGl0KC9bXFxzLF0rLylcbiAgICB9LCB7XG4gICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChfdGhpcy50ZXh0LnNhdmVkKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpLFxuICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVXRpbHMubWlkQWxlcnQodGhpcy50ZXh0LnNhdmVFcnJvcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgU2V0dGluZ3NWaWV3LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29udGV4dCwgZ3JvdXBIYW5kbGUsIGdyb3VwSG9zdCwgZ3JvdXBOYW1lLCBsYW5ndWFnZSwgbG9nLCB1cFBhc3M7XG4gICAgY29udGV4dCA9IHRoaXMuc2V0dGluZ3MuZ2V0RXNjYXBlZFN0cmluZyhcImNvbnRleHRcIik7XG4gICAgbGFuZ3VhZ2UgPSB0aGlzLnNldHRpbmdzLmdldEVzY2FwZWRTdHJpbmcoXCJsYW5ndWFnZVwiKTtcbiAgICBncm91cE5hbWUgPSB0aGlzLnNldHRpbmdzLmdldEVzY2FwZWRTdHJpbmcoXCJncm91cE5hbWVcIik7XG4gICAgZ3JvdXBIYW5kbGUgPSB0aGlzLnNldHRpbmdzLmdldEVzY2FwZWRTdHJpbmcoXCJncm91cEhhbmRsZVwiKTtcbiAgICBncm91cEhvc3QgPSB0aGlzLnNldHRpbmdzLmdldEVzY2FwZWRTdHJpbmcoXCJncm91cEhvc3RcIik7XG4gICAgdXBQYXNzID0gdGhpcy5zZXR0aW5ncy5nZXRFc2NhcGVkU3RyaW5nKFwidXBQYXNzXCIpO1xuICAgIGxvZyA9IF8uZXNjYXBlKHRoaXMuc2V0dGluZ3MuZ2V0QXJyYXkoXCJsb2dcIikuam9pbihcIiwgXCIpKTtcbiAgICB0aGlzLiRlbC5odG1sKFwiPGJ1dHRvbiBjbGFzcz0nYmFjayBuYXZpZ2F0aW9uJz5cIiArIHRoaXMudGV4dC5iYWNrICsgXCI8L2J1dHRvbj4gPGgxPlwiICsgdGhpcy50ZXh0LnNldHRpbmdzICsgXCI8L2gxPiA8cD48aW1nIHNyYz0naW1hZ2VzL2ljb25fd2Fybi5wbmcnIHRpdGxlPSdXYXJuaW5nJz5cIiArIHRoaXMudGV4dC53YXJuaW5nICsgXCI8L3A+IDxkaXYgY2xhc3M9J21lbnVfYm94Jz4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdjb250ZXh0JyB0aXRsZT0nXCIgKyB0aGlzLnRleHQuY29udGV4dEhlbHAgKyBcIic+XCIgKyB0aGlzLnRleHQuY29udGV4dCArIFwiPC9sYWJlbD48YnI+IDxpbnB1dCBpZD0nY29udGV4dCcgdHlwZT0ndGV4dCcgdmFsdWU9J1wiICsgY29udGV4dCArIFwiJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nbGFuZ3VhZ2UnIHRpdGxlPSdcIiArIHRoaXMudGV4dC5sYW5ndWFnZUhlbHAgKyBcIic+XCIgKyB0aGlzLnRleHQubGFuZ3VhZ2UgKyBcIjwvbGFiZWw+PGJyPiA8aW5wdXQgaWQ9J2xhbmd1YWdlJyB0eXBlPSd0ZXh0JyB2YWx1ZT0nXCIgKyBsYW5ndWFnZSArIFwiJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nZ3JvdXBfaGFuZGxlJyB0aXRsZT0nXCIgKyB0aGlzLnRleHQuZ3JvdXBIYW5kbGVIZWxwICsgXCInPlwiICsgdGhpcy50ZXh0Lmdyb3VwSGFuZGxlICsgXCI8L2xhYmVsPjxicj4gPGlucHV0IGlkPSdncm91cF9oYW5kbGUnIHR5cGU9J3RleHQnIHZhbHVlPSdcIiArIGdyb3VwSGFuZGxlICsgXCInPiA8L2Rpdj4gPGRpdiBjbGFzcz0nbGFiZWxfdmFsdWUnPiA8bGFiZWwgZm9yPSdncm91cF9uYW1lJyB0aXRsZT0nXCIgKyB0aGlzLnRleHQuZ3JvdXBOYW1lSGVscCArIFwiJz5cIiArIHRoaXMudGV4dC5ncm91cE5hbWUgKyBcIjwvbGFiZWw+PGJyPiA8aW5wdXQgaWQ9J2dyb3VwX25hbWUnIHR5cGU9J3RleHQnIHZhbHVlPSdcIiArIGdyb3VwTmFtZSArIFwiJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nZ3JvdXBfaG9zdCcgdGl0bGU9J1wiICsgdGhpcy50ZXh0Lmdyb3VwSG9zdEhlbHAgKyBcIic+XCIgKyB0aGlzLnRleHQuZ3JvdXBIb3N0ICsgXCI8L2xhYmVsPjxicj4gPGlucHV0IGlkPSdncm91cF9ob3N0JyB0eXBlPSd0ZXh0JyB2YWx1ZT0nXCIgKyBncm91cEhvc3QgKyBcIic+IDwvZGl2PiA8ZGl2IGNsYXNzPSdsYWJlbF92YWx1ZSc+IDxsYWJlbCBmb3I9J3VwX3Bhc3MnIHRpdGxlPSdcIiArIHRoaXMudGV4dC51cGxvYWRQYXNzd29yZEhlbHAgKyBcIic+XCIgKyB0aGlzLnRleHQudXBsb2FkUGFzc3dvcmQgKyBcIjwvbGFiZWw+PGJyPiA8aW5wdXQgaWQ9J3VwX3Bhc3MnIHR5cGU9J3RleHQnIHZhbHVlPSdcIiArIHVwUGFzcyArIFwiJz4gPC9kaXY+IDxkaXYgY2xhc3M9J2xhYmVsX3ZhbHVlJz4gPGxhYmVsIGZvcj0nbG9nJyB0aXRsZT0nXCIgKyB0aGlzLnRleHQubG9nRXZlbnRzSGVscCArIFwiJz5cIiArIHRoaXMudGV4dC5sb2dFdmVudHMgKyBcIjwvbGFiZWw+PGJyPiA8aW5wdXQgaWQ9J2xvZycgdmFsdWU9J1wiICsgbG9nICsgXCInPiA8L2Rpdj4gPC9kaXY+PGJyPiA8YnV0dG9uIGNsYXNzPSdjb21tYW5kIHNhdmUnPlwiICsgdGhpcy50ZXh0LnNhdmUgKyBcIjwvYnV0dG9uPlwiKTtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFwicmVuZGVyZWRcIik7XG4gIH07XG5cbiAgcmV0dXJuIFNldHRpbmdzVmlldztcblxufSkoQmFja2JvbmUuVmlldyk7XG5cbiIsIiMgT25lIHZpZXcgdG8gcnVsZSB0aGVtIGFsbFxuIyBOb3QgbmVjZXNzYXJ5IHRvIGJlIGEgdmlldyBidXQganVzdCBpbiBjYXNlIHdlIG5lZWQgaXQgdG8gZG8gbW9yZVxuXG4jIFZpZXdNYW5hZ2VyIG5vdyBzdXBwb3J0cyBsb2FkaW5nIGJhcnMuIFRvIHRha2UgYWR2YW50YWdlIG9mIHRoaXMgZmVhdHVyZVxuIyB3aXRoaW4gYSB2aWV3IGFkZCBhIHRyaWdnZXIgZm9yIFwic3RhcnRfd29ya1wiIGFuZCBcImVuZF93b3JrXCIgYW5kIGR1cmluZ1xuIyBhbGwgdGhlIHRpbWUgaW4gYmV0d2VlbiBhIGxvYWRpbmcgYmFyIHNob3VsZCBhcHBlYXIuIFxuY2xhc3MgVmlld01hbmFnZXIgZXh0ZW5kcyBCYWNrYm9uZS5WaWV3XG5cbiAgc2hvdzogKHZpZXcpID0+XG5cbiAgICB3aW5kb3cuc2Nyb2xsVG8gMCwgMFxuXG4gICAgQGN1cnJlbnRWaWV3Py5jbG9zZSgpXG4gICAgQGN1cnJlbnRWaWV3ID0gdmlld1xuXG4gICAgQGNsYXNzTmFtZSA9IEBjdXJyZW50Vmlldy5jbGFzc05hbWVcbiAgICAjIFN0cmluZyhAY3VycmVudFZpZXcuY29uc3RydWN0b3IpLnNwbGl0KFwiZnVuY3Rpb24gXCIpWzFdLnNwbGl0KFwiKCkge1wiKVswXVxuXG4gICAgVGFuZ2VyaW5lLmxvZy5hcHAoXCJzaG93XCIsIEBjbGFzc05hbWUpXG5cbiAgICBAY3VycmVudFZpZXcub24gXCJyZW5kZXJlZFwiLCA9PlxuICAgICAgVXRpbHMud29ya2luZyBmYWxzZVxuICAgICAgJChcIiNjb250ZW50XCIpLmFwcGVuZCBAY3VycmVudFZpZXcuZWxcbiAgICAgIEBjdXJyZW50Vmlldy4kZWwuZmluZChcIi5idXR0b25zZXRcIikuYnV0dG9uc2V0KClcbiAgICAgIEBjdXJyZW50Vmlldy5hZnRlclJlbmRlcj8oKVxuXG4gICAgQGN1cnJlbnRWaWV3Lm9uIFwic3ViUmVuZGVyZWRcIiwgPT5cbiAgICAgIEBjdXJyZW50Vmlldy4kZWwuZmluZChcIi5idXR0b25zZXRcIikuYnV0dG9uc2V0KCkgIyBidXR0b24gc2V0IGV2ZXJ5dGhpbmdcblxuICAgICMgVXRpbHMucmVzaXplU2Nyb2xsUGFuZSgpXG5cbiAgICBAY3VycmVudFZpZXcub24gXCJzdGFydF93b3JrXCIsID0+XG4gICAgICBVdGlscy53b3JraW5nIHRydWVcblxuICAgIEBjdXJyZW50Vmlldy5vbiBcImVuZF93b3JrXCIsID0+XG4gICAgICBVdGlscy53b3JraW5nIGZhbHNlXG5cbiAgICBAY3VycmVudFZpZXcucmVuZGVyKClcbiIsInZhciBWaWV3TWFuYWdlcixcbiAgYmluZCA9IGZ1bmN0aW9uKGZuLCBtZSl7IHJldHVybiBmdW5jdGlvbigpeyByZXR1cm4gZm4uYXBwbHkobWUsIGFyZ3VtZW50cyk7IH07IH0sXG4gIGV4dGVuZCA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoaGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfSxcbiAgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5WaWV3TWFuYWdlciA9IChmdW5jdGlvbihzdXBlckNsYXNzKSB7XG4gIGV4dGVuZChWaWV3TWFuYWdlciwgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gVmlld01hbmFnZXIoKSB7XG4gICAgdGhpcy5zaG93ID0gYmluZCh0aGlzLnNob3csIHRoaXMpO1xuICAgIHJldHVybiBWaWV3TWFuYWdlci5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIFZpZXdNYW5hZ2VyLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24odmlldykge1xuICAgIHZhciByZWY7XG4gICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgIGlmICgocmVmID0gdGhpcy5jdXJyZW50VmlldykgIT0gbnVsbCkge1xuICAgICAgcmVmLmNsb3NlKCk7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudFZpZXcgPSB2aWV3O1xuICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jdXJyZW50Vmlldy5jbGFzc05hbWU7XG4gICAgVGFuZ2VyaW5lLmxvZy5hcHAoXCJzaG93XCIsIHRoaXMuY2xhc3NOYW1lKTtcbiAgICB0aGlzLmN1cnJlbnRWaWV3Lm9uKFwicmVuZGVyZWRcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBiYXNlO1xuICAgICAgICBVdGlscy53b3JraW5nKGZhbHNlKTtcbiAgICAgICAgJChcIiNjb250ZW50XCIpLmFwcGVuZChfdGhpcy5jdXJyZW50Vmlldy5lbCk7XG4gICAgICAgIF90aGlzLmN1cnJlbnRWaWV3LiRlbC5maW5kKFwiLmJ1dHRvbnNldFwiKS5idXR0b25zZXQoKTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiAoYmFzZSA9IF90aGlzLmN1cnJlbnRWaWV3KS5hZnRlclJlbmRlciA9PT0gXCJmdW5jdGlvblwiID8gYmFzZS5hZnRlclJlbmRlcigpIDogdm9pZCAwO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgdGhpcy5jdXJyZW50Vmlldy5vbihcInN1YlJlbmRlcmVkXCIsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuY3VycmVudFZpZXcuJGVsLmZpbmQoXCIuYnV0dG9uc2V0XCIpLmJ1dHRvbnNldCgpO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgdGhpcy5jdXJyZW50Vmlldy5vbihcInN0YXJ0X3dvcmtcIiwgKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBVdGlscy53b3JraW5nKHRydWUpO1xuICAgICAgfTtcbiAgICB9KSh0aGlzKSk7XG4gICAgdGhpcy5jdXJyZW50Vmlldy5vbihcImVuZF93b3JrXCIsIChmdW5jdGlvbihfdGhpcykge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVXRpbHMud29ya2luZyhmYWxzZSk7XG4gICAgICB9O1xuICAgIH0pKHRoaXMpKTtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50Vmlldy5yZW5kZXIoKTtcbiAgfTtcblxuICByZXR1cm4gVmlld01hbmFnZXI7XG5cbn0pKEJhY2tib25lLlZpZXcpO1xuXG4iLCJjbGFzcyBOYXZpZ2F0aW9uVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBlbCA6ICcjbmF2aWdhdGlvbidcblxuICBldmVudHM6IGlmIE1vZGVybml6ci50b3VjaCB0aGVuIHtcbiAgICAnY2xpY2sgI2xvZ291dCcgIDogJ2xvZ291dCdcbiAgICAnY2xpY2sgI25hdmlnYXRpb24tbG9nbycgICAgICA6ICdsb2dvQ2xpY2snXG4gICAgJ2NsaWNrICN1c2VybmFtZScgICAgICAgOiAnZ290b0FjY291bnQnXG4gIH0gZWxzZSB7XG4gICAgJ2NsaWNrICNsb2dvdXQnICAgOiAnbG9nb3V0J1xuICAgICdjbGljayAjbmF2aWdhdGlvbi1sb2dvJyAgICAgIDogJ2xvZ29DbGljaydcbiAgICAnY2xpY2sgI3VzZXJuYW1lJyAgICAgICA6ICdnb3RvQWNjb3VudCdcbiAgfVxuXG4gIHJlZnJlc2hEcm9wRG93blBvc2l0aW9uOiAtPlxuICAgIHVzZXJQb3Npc3Rpb24gPSBAJGVsLmZpbmQoXCIjdXNlcm5hbWUtY29udGFpbmVyXCIpLnBvc2l0aW9uKClcbiAgICAkdWwgPSBAJGVsLmZpbmQoXCIjdXNlcm5hbWUtZHJvcGRvd25cIilcbiAgICAkdWwuY3NzXG4gICAgICBsZWZ0IDogTWF0aC5taW4odXNlclBvc2lzdGlvbi5sZWZ0LCAkKHdpbmRvdykud2lkdGgoKSAtICR1bC53aWR0aCgpKVxuXG4gIHVzZXJNZW51SW46ID0+ICBAcmVmcmVzaERyb3BEb3duUG9zaXRpb24oKTsgQCRlbC5maW5kKFwiI3VzZXJuYW1lLWRyb3Bkb3duXCIpLnNob3coKVxuXG4gIHVzZXJNZW51T3V0OiA9PiBAcmVmcmVzaERyb3BEb3duUG9zaXRpb24oKTsgQCRlbC5maW5kKFwiI3VzZXJuYW1lLWRyb3Bkb3duXCIpLmhpZGUoKVxuXG4gIGdvdG9BY2NvdW50OiAtPlxuICAgIGlmIEB1c2VyLmlzQWRtaW4oKVxuICAgICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZSBcImFjY291bnRcIiwgdHJ1ZVxuXG4gIGxvZ29DbGljazogLT5cbiAgICBpZiBAdXNlci5pc0FkbWluKClcbiAgICAgIFRhbmdlcmluZS5hY3Rpdml0eSA9IFwiXCJcbiAgICAgIEByb3V0ZXIubGFuZGluZyh0cnVlKVxuICAgIGVsc2VcbiAgICAgIGlmIFRhbmdlcmluZS5hY3Rpdml0eSA9PSBcImFzc2Vzc21lbnQgcnVuXCJcbiAgICAgICAgaWYgY29uZmlybSBAdGV4dC5pbmNvbXBsZXRlX21haW5cbiAgICAgICAgICBAcm91dGVyLmxhbmRpbmcodHJ1ZSlcbiAgICAgIGVsc2VcbiAgICAgICAgICBAcm91dGVyLmxhbmRpbmcodHJ1ZSlcblxuICBsb2dvdXQ6IC0+XG4gICAgaWYgQHVzZXIuaXNBZG1pbigpXG4gICAgICBUYW5nZXJpbmUuYWN0aXZpdHkgPSBcIlwiXG4gICAgICBUYW5nZXJpbmUudXNlci5sb2dvdXQoKVxuICAgIGVsc2VcbiAgICAgIGlmIFRhbmdlcmluZS5hY3Rpdml0eSA9PSBcImFzc2Vzc21lbnQgcnVuXCJcbiAgICAgICAgaWYgY29uZmlybSBAdGV4dC5pbmNvbXBsZXRlX2xvZ291dFxuICAgICAgICAgIFRhbmdlcmluZS5hY3Rpdml0eSA9IFwiXCJcbiAgICAgICAgICBUYW5nZXJpbmUudXNlci5sb2dvdXQoKVxuICAgICAgZWxzZVxuICAgICAgICBpZiBjb25maXJtIEB0ZXh0LmNvbmZpcm1fbG9nb3V0XG4gICAgICAgICAgVGFuZ2VyaW5lLmFjdGl2aXR5ID0gXCJcIlxuICAgICAgICAgIFRhbmdlcmluZS51c2VyLmxvZ291dCgpXG5cbiAgb25DbG9zZTogLT4gIyBkbyBub3RoaW5nXG5cbiAgaW5pdGlhbGl6ZTogKG9wdGlvbnMpID0+XG5cbiAgICBAJGVsLmFkZENsYXNzIFwiTmF2aWdhdGlvblZpZXdcIlxuXG4gICAgQGkxOG4oKVxuICAgIEByZW5kZXIoKVxuXG4gICAgQHVzZXIgICA9IG9wdGlvbnMudXNlclxuICAgIEByb3V0ZXIgPSBvcHRpb25zLnJvdXRlclxuXG4gICAgQHdob0FtSSA9IEB0ZXh0LnVzZXJcblxuICAgIEByb3V0ZXIub24gJ2FsbCcsIEBoYW5kbGVNZW51XG4gICAgQHVzZXIub24gICAnbG9naW4gbG9nb3V0JywgQGhhbmRsZU1lbnVcblxuICBpMThuOiAtPlxuXG4gICAgQHRleHQgPVxuXG4gICAgICBcImxvZ291dFwiICAgICAgICAgICAgOiB0KCdOYXZpZ2F0aW9uVmlldy5idXR0b24ubG9nb3V0JylcblxuICAgICAgXCJhY2NvdW50X2J1dHRvblwiICAgIDogdCgnTmF2aWdhdGlvblZpZXcuYnV0dG9uLmFjY291bnQnKVxuICAgICAgXCJzZXR0aW5nc19idXR0b25cIiAgIDogdCgnTmF2aWdhdGlvblZpZXcuYnV0dG9uLnNldHRpbmdzJylcblxuICAgICAgXCJ1c2VyXCIgICAgICAgICAgICAgIDogdCgnTmF2aWdhdGlvblZpZXcubGFiZWwudXNlcicpXG4gICAgICBcInRlYWNoZXJcIiAgICAgICAgICAgOiB0KCdOYXZpZ2F0aW9uVmlldy5sYWJlbC50ZWFjaGVyJylcbiAgICAgIFwiZW51bWVyYXRvclwiICAgICAgICA6IHQoJ05hdmlnYXRpb25WaWV3LmxhYmVsLmVudW1lcmF0b3InKVxuICAgICAgXCJzdHVkZW50X2lkXCIgICAgICAgIDogdCgnTmF2aWdhdGlvblZpZXcubGFiZWwuc3R1ZGVudF9pZCcpXG4gICAgICBcInZlcnNpb25cIiAgICAgICAgICAgOiB0KCdOYXZpZ2F0aW9uVmlldy5sYWJlbC52ZXJzaW9uJylcblxuICAgICAgXCJhY2NvdW50XCIgICAgICAgICAgIDogdCgnTmF2aWdhdGlvblZpZXcuaGVscC5hY2NvdW50JylcbiAgICAgIFwibG9nb1wiICAgICAgICAgICAgICA6IHQoJ05hdmlnYXRpb25WaWV3LmhlbHAubG9nbycpXG5cbiAgICAgIFwiaW5jb21wbGV0ZV9sb2dvdXRcIiA6IHQoXCJOYXZpZ2F0aW9uVmlldy5tZXNzYWdlLmluY29tcGxldGVfbG9nb3V0XCIpXG4gICAgICBcImNvbmZpcm1fbG9nb3V0XCIgICAgOiB0KFwiTmF2aWdhdGlvblZpZXcubWVzc2FnZS5sb2dvdXRfY29uZmlybVwiKVxuICAgICAgXCJpbmNvbXBsZXRlX21haW5cIiAgIDogdChcIk5hdmlnYXRpb25WaWV3Lm1lc3NhZ2UuaW5jb21wbGV0ZV9tYWluX3NjcmVlblwiKVxuXG4gIHJlbmRlcjogLT5cblxuICAgIEAkZWwuaHRtbCBcIlxuXG4gICAgICA8aW1nIGlkPSduYXZpZ2F0aW9uLWxvZ28nIHNyYz0naW1hZ2VzL25hdmlnYXRpb24tbG9nby5wbmcnIHRpdGxlPScje0B0ZXh0LmxvZ299Jz5cblxuICAgICAgPHVsPlxuXG4gICAgICAgIDxsaSBpZD0nc3R1ZGVudC1jb250YWluZXInIGNsYXNzPSdoaWRkZW4nPlxuXG4gICAgICAgICAgPGxhYmVsPiN7QHRleHQuc3R1ZGVudF9pZH08L2xhYmVsPlxuICAgICAgICAgIDxkaXYgaWQ9J3N0dWRlbnQtaWQnPjwvZGl2PlxuXG4gICAgICAgIDwvbGk+XG5cbiAgICAgICAgPGxpIGlkPSd1c2VybmFtZS1jb250YWluZXInPlxuXG4gICAgICAgICAgPGxhYmVsIHRpdGxlPScje0B0ZXh0LmFjY291bnR9Jz4je0B3aG9BbUl9PC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGlkPSd1c2VybmFtZSc+I3tUYW5nZXJpbmUudXNlci5uYW1lKCkgfHwgXCJcIn08L2Rpdj5cblxuICAgICAgICAgIDx1bCBpZD0ndXNlcm5hbWUtZHJvcGRvd24nPlxuICAgICAgICAgICAgPGxpPjxhIGhyZWY9JyNhY2NvdW50Jz4je0B0ZXh0LmFjY291bnRfYnV0dG9ufTwvYT48L2xpPlxuICAgICAgICAgICAgPGxpPjxhIGhyZWY9JyNzZXR0aW5ncyc+I3tAdGV4dC5zZXR0aW5nc19idXR0b259PC9hPjwvbGk+XG4gICAgICAgICAgPC91bD5cblxuICAgICAgICA8L2xpPlxuXG4gICAgICAgIDxsaSBpZD0nbG9nb3V0Jz4je0B0ZXh0LmxvZ291dH08L2xpPlxuXG4gICAgICA8L3VsPlxuXG4gICAgXCJcblxuICAgICMgc2V0IHVwIHVzZXIgbWVudVxuICAgIGlmIEB1c2VyPy5pc0FkbWluPygpXG4gICAgICBAJGVsLmZpbmQoXCIjdXNlcm5hbWUtY29udGFpbmVyXCIpLmhvdmVyIEB1c2VyTWVudUluLCBAdXNlck1lbnVPdXRcblxuICAgICMgU3BpbiB0aGUgbG9nbyBvbiBhamF4IGNhbGxzXG4gICAgJChkb2N1bWVudCkuYWpheFN0YXJ0IC0+XG4gICAgICBpZiAkKFwiI25hdmlnYXRpb24tbG9nb1wiKS5hdHRyKFwic3JjXCIpIGlzbnQgXCJpbWFnZXMvbmF2aWdhdGlvbi1sb2dvLXNwaW4uZ2lmXCJcbiAgICAgICAgJChcIiNuYXZpZ2F0aW9uLWxvZ29cIikuYXR0ciBcInNyY1wiLCBcImltYWdlcy9uYXZpZ2F0aW9uLWxvZ28tc3Bpbi5naWZcIlxuICAgICQoZG9jdW1lbnQpLmFqYXhTdG9wIC0+XG4gICAgICBpZiAkKFwiI25hdmlnYXRpb24tbG9nb1wiKS5hdHRyKFwic3JjXCIpIGlzbnQgXCJpbWFnZXMvbmF2aWdhdGlvbi1sb2dvLnBuZ1wiXG4gICAgICAgICQoXCIjbmF2aWdhdGlvbi1sb2dvXCIpLmF0dHIgXCJzcmNcIiwgXCJpbWFnZXMvbmF2aWdhdGlvbi1sb2dvLnBuZ1wiXG5cbiAgc2V0U3R1ZGVudDogKCBpZCApIC0+XG4gICAgaWYgaWQgPT0gXCJcIlxuICAgICAgQCRlbC5maW5kKFwiI3N0dWRlbnQtY29udGFpbmVyXCIpLmFkZENsYXNzKFwiaGlkZGVuXCIpXG4gICAgICBAJGVsLmZpbmQoJyNzdHVkZW50LWlkJykuaHRtbChcIlwiKVxuICAgIGVsc2VcbiAgICAgIEAkZWwuZmluZChcIiNzdHVkZW50LWNvbnRhaW5lclwiKS5yZW1vdmVDbGFzcyhcImhpZGRlblwiKVxuICAgICAgQCRlbC5maW5kKCcjc3R1ZGVudC1pZCcpLmh0bWwoaWQpXG5cblxuICAjIEFkbWlucyBnZXQgYSBtYW5hZ2UgYnV0dG9uXG4gICMgdHJpZ2dlcmVkIG9uIHVzZXIgY2hhbmdlc1xuICBoYW5kbGVNZW51OiAoZXZlbnQpID0+XG5cbiAgICAkKFwiI3VzZXJuYW1lX2xhYmVsXCIpLmh0bWwgQHdob0FtSVxuXG4gICAgJCgnI3VzZXJuYW1lJykuaHRtbCBAdXNlci5uYW1lKClcblxuICAgICMgQFRPRE8gVGhpcyBuZWVkcyBmaXhpbmdcbiAgICBpZiB+d2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkuaW5kZXhPZihcIm5hbWU9XCIpIHRoZW4gQCRlbC5maW5kKFwiI2xvZ291dF9saW5rXCIpLmhpZGUoKSBlbHNlICBAJGVsLmZpbmQoXCIjbG9nb3V0X2xpbmtcIikuc2hvdygpXG5cbiAgICBAdXNlci52ZXJpZnlcbiAgICAgIGlzQXV0aGVudGljYXRlZDogPT5cbiAgICAgICAgQHJlbmRlcigpXG4gICAgICAgICQoICcjbmF2aWdhdGlvbicgKS5mYWRlSW4oMjUwKVxuICAgICAgaXNVbnJlZ2lzdGVyZWQ6ID0+XG4gICAgICAgIEByZW5kZXIoKVxuICAgICAgICAkKCAnI25hdmlnYXRpb24nICkuZmFkZU91dCgyNTApXG5cblxuIiwidmFyIE5hdmlnYXRpb25WaWV3LFxuICBiaW5kID0gZnVuY3Rpb24oZm4sIG1lKXsgcmV0dXJuIGZ1bmN0aW9uKCl7IHJldHVybiBmbi5hcHBseShtZSwgYXJndW1lbnRzKTsgfTsgfSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbk5hdmlnYXRpb25WaWV3ID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKE5hdmlnYXRpb25WaWV3LCBzdXBlckNsYXNzKTtcblxuICBmdW5jdGlvbiBOYXZpZ2F0aW9uVmlldygpIHtcbiAgICB0aGlzLmhhbmRsZU1lbnUgPSBiaW5kKHRoaXMuaGFuZGxlTWVudSwgdGhpcyk7XG4gICAgdGhpcy5pbml0aWFsaXplID0gYmluZCh0aGlzLmluaXRpYWxpemUsIHRoaXMpO1xuICAgIHRoaXMudXNlck1lbnVPdXQgPSBiaW5kKHRoaXMudXNlck1lbnVPdXQsIHRoaXMpO1xuICAgIHRoaXMudXNlck1lbnVJbiA9IGJpbmQodGhpcy51c2VyTWVudUluLCB0aGlzKTtcbiAgICByZXR1cm4gTmF2aWdhdGlvblZpZXcuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBOYXZpZ2F0aW9uVmlldy5wcm90b3R5cGUuZWwgPSAnI25hdmlnYXRpb24nO1xuXG4gIE5hdmlnYXRpb25WaWV3LnByb3RvdHlwZS5ldmVudHMgPSBNb2Rlcm5penIudG91Y2ggPyB7XG4gICAgJ2NsaWNrICNsb2dvdXQnOiAnbG9nb3V0JyxcbiAgICAnY2xpY2sgI25hdmlnYXRpb24tbG9nbyc6ICdsb2dvQ2xpY2snLFxuICAgICdjbGljayAjdXNlcm5hbWUnOiAnZ290b0FjY291bnQnXG4gIH0gOiB7XG4gICAgJ2NsaWNrICNsb2dvdXQnOiAnbG9nb3V0JyxcbiAgICAnY2xpY2sgI25hdmlnYXRpb24tbG9nbyc6ICdsb2dvQ2xpY2snLFxuICAgICdjbGljayAjdXNlcm5hbWUnOiAnZ290b0FjY291bnQnXG4gIH07XG5cbiAgTmF2aWdhdGlvblZpZXcucHJvdG90eXBlLnJlZnJlc2hEcm9wRG93blBvc2l0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyICR1bCwgdXNlclBvc2lzdGlvbjtcbiAgICB1c2VyUG9zaXN0aW9uID0gdGhpcy4kZWwuZmluZChcIiN1c2VybmFtZS1jb250YWluZXJcIikucG9zaXRpb24oKTtcbiAgICAkdWwgPSB0aGlzLiRlbC5maW5kKFwiI3VzZXJuYW1lLWRyb3Bkb3duXCIpO1xuICAgIHJldHVybiAkdWwuY3NzKHtcbiAgICAgIGxlZnQ6IE1hdGgubWluKHVzZXJQb3Npc3Rpb24ubGVmdCwgJCh3aW5kb3cpLndpZHRoKCkgLSAkdWwud2lkdGgoKSlcbiAgICB9KTtcbiAgfTtcblxuICBOYXZpZ2F0aW9uVmlldy5wcm90b3R5cGUudXNlck1lbnVJbiA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVmcmVzaERyb3BEb3duUG9zaXRpb24oKTtcbiAgICByZXR1cm4gdGhpcy4kZWwuZmluZChcIiN1c2VybmFtZS1kcm9wZG93blwiKS5zaG93KCk7XG4gIH07XG5cbiAgTmF2aWdhdGlvblZpZXcucHJvdG90eXBlLnVzZXJNZW51T3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZWZyZXNoRHJvcERvd25Qb3NpdGlvbigpO1xuICAgIHJldHVybiB0aGlzLiRlbC5maW5kKFwiI3VzZXJuYW1lLWRyb3Bkb3duXCIpLmhpZGUoKTtcbiAgfTtcblxuICBOYXZpZ2F0aW9uVmlldy5wcm90b3R5cGUuZ290b0FjY291bnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy51c2VyLmlzQWRtaW4oKSkge1xuICAgICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJhY2NvdW50XCIsIHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBOYXZpZ2F0aW9uVmlldy5wcm90b3R5cGUubG9nb0NsaWNrID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudXNlci5pc0FkbWluKCkpIHtcbiAgICAgIFRhbmdlcmluZS5hY3Rpdml0eSA9IFwiXCI7XG4gICAgICByZXR1cm4gdGhpcy5yb3V0ZXIubGFuZGluZyh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKFRhbmdlcmluZS5hY3Rpdml0eSA9PT0gXCJhc3Nlc3NtZW50IHJ1blwiKSB7XG4gICAgICAgIGlmIChjb25maXJtKHRoaXMudGV4dC5pbmNvbXBsZXRlX21haW4pKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucm91dGVyLmxhbmRpbmcodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvdXRlci5sYW5kaW5nKHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBOYXZpZ2F0aW9uVmlldy5wcm90b3R5cGUubG9nb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudXNlci5pc0FkbWluKCkpIHtcbiAgICAgIFRhbmdlcmluZS5hY3Rpdml0eSA9IFwiXCI7XG4gICAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIubG9nb3V0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChUYW5nZXJpbmUuYWN0aXZpdHkgPT09IFwiYXNzZXNzbWVudCBydW5cIikge1xuICAgICAgICBpZiAoY29uZmlybSh0aGlzLnRleHQuaW5jb21wbGV0ZV9sb2dvdXQpKSB7XG4gICAgICAgICAgVGFuZ2VyaW5lLmFjdGl2aXR5ID0gXCJcIjtcbiAgICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIubG9nb3V0KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjb25maXJtKHRoaXMudGV4dC5jb25maXJtX2xvZ291dCkpIHtcbiAgICAgICAgICBUYW5nZXJpbmUuYWN0aXZpdHkgPSBcIlwiO1xuICAgICAgICAgIHJldHVybiBUYW5nZXJpbmUudXNlci5sb2dvdXQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBOYXZpZ2F0aW9uVmlldy5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uKCkge307XG5cbiAgTmF2aWdhdGlvblZpZXcucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdGhpcy4kZWwuYWRkQ2xhc3MoXCJOYXZpZ2F0aW9uVmlld1wiKTtcbiAgICB0aGlzLmkxOG4oKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICAgIHRoaXMudXNlciA9IG9wdGlvbnMudXNlcjtcbiAgICB0aGlzLnJvdXRlciA9IG9wdGlvbnMucm91dGVyO1xuICAgIHRoaXMud2hvQW1JID0gdGhpcy50ZXh0LnVzZXI7XG4gICAgdGhpcy5yb3V0ZXIub24oJ2FsbCcsIHRoaXMuaGFuZGxlTWVudSk7XG4gICAgcmV0dXJuIHRoaXMudXNlci5vbignbG9naW4gbG9nb3V0JywgdGhpcy5oYW5kbGVNZW51KTtcbiAgfTtcblxuICBOYXZpZ2F0aW9uVmlldy5wcm90b3R5cGUuaTE4biA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnRleHQgPSB7XG4gICAgICBcImxvZ291dFwiOiB0KCdOYXZpZ2F0aW9uVmlldy5idXR0b24ubG9nb3V0JyksXG4gICAgICBcImFjY291bnRfYnV0dG9uXCI6IHQoJ05hdmlnYXRpb25WaWV3LmJ1dHRvbi5hY2NvdW50JyksXG4gICAgICBcInNldHRpbmdzX2J1dHRvblwiOiB0KCdOYXZpZ2F0aW9uVmlldy5idXR0b24uc2V0dGluZ3MnKSxcbiAgICAgIFwidXNlclwiOiB0KCdOYXZpZ2F0aW9uVmlldy5sYWJlbC51c2VyJyksXG4gICAgICBcInRlYWNoZXJcIjogdCgnTmF2aWdhdGlvblZpZXcubGFiZWwudGVhY2hlcicpLFxuICAgICAgXCJlbnVtZXJhdG9yXCI6IHQoJ05hdmlnYXRpb25WaWV3LmxhYmVsLmVudW1lcmF0b3InKSxcbiAgICAgIFwic3R1ZGVudF9pZFwiOiB0KCdOYXZpZ2F0aW9uVmlldy5sYWJlbC5zdHVkZW50X2lkJyksXG4gICAgICBcInZlcnNpb25cIjogdCgnTmF2aWdhdGlvblZpZXcubGFiZWwudmVyc2lvbicpLFxuICAgICAgXCJhY2NvdW50XCI6IHQoJ05hdmlnYXRpb25WaWV3LmhlbHAuYWNjb3VudCcpLFxuICAgICAgXCJsb2dvXCI6IHQoJ05hdmlnYXRpb25WaWV3LmhlbHAubG9nbycpLFxuICAgICAgXCJpbmNvbXBsZXRlX2xvZ291dFwiOiB0KFwiTmF2aWdhdGlvblZpZXcubWVzc2FnZS5pbmNvbXBsZXRlX2xvZ291dFwiKSxcbiAgICAgIFwiY29uZmlybV9sb2dvdXRcIjogdChcIk5hdmlnYXRpb25WaWV3Lm1lc3NhZ2UubG9nb3V0X2NvbmZpcm1cIiksXG4gICAgICBcImluY29tcGxldGVfbWFpblwiOiB0KFwiTmF2aWdhdGlvblZpZXcubWVzc2FnZS5pbmNvbXBsZXRlX21haW5fc2NyZWVuXCIpXG4gICAgfTtcbiAgfTtcblxuICBOYXZpZ2F0aW9uVmlldy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlZjtcbiAgICB0aGlzLiRlbC5odG1sKFwiPGltZyBpZD0nbmF2aWdhdGlvbi1sb2dvJyBzcmM9J2ltYWdlcy9uYXZpZ2F0aW9uLWxvZ28ucG5nJyB0aXRsZT0nXCIgKyB0aGlzLnRleHQubG9nbyArIFwiJz4gPHVsPiA8bGkgaWQ9J3N0dWRlbnQtY29udGFpbmVyJyBjbGFzcz0naGlkZGVuJz4gPGxhYmVsPlwiICsgdGhpcy50ZXh0LnN0dWRlbnRfaWQgKyBcIjwvbGFiZWw+IDxkaXYgaWQ9J3N0dWRlbnQtaWQnPjwvZGl2PiA8L2xpPiA8bGkgaWQ9J3VzZXJuYW1lLWNvbnRhaW5lcic+IDxsYWJlbCB0aXRsZT0nXCIgKyB0aGlzLnRleHQuYWNjb3VudCArIFwiJz5cIiArIHRoaXMud2hvQW1JICsgXCI8L2xhYmVsPiA8ZGl2IGlkPSd1c2VybmFtZSc+XCIgKyAoVGFuZ2VyaW5lLnVzZXIubmFtZSgpIHx8IFwiXCIpICsgXCI8L2Rpdj4gPHVsIGlkPSd1c2VybmFtZS1kcm9wZG93bic+IDxsaT48YSBocmVmPScjYWNjb3VudCc+XCIgKyB0aGlzLnRleHQuYWNjb3VudF9idXR0b24gKyBcIjwvYT48L2xpPiA8bGk+PGEgaHJlZj0nI3NldHRpbmdzJz5cIiArIHRoaXMudGV4dC5zZXR0aW5nc19idXR0b24gKyBcIjwvYT48L2xpPiA8L3VsPiA8L2xpPiA8bGkgaWQ9J2xvZ291dCc+XCIgKyB0aGlzLnRleHQubG9nb3V0ICsgXCI8L2xpPiA8L3VsPlwiKTtcbiAgICBpZiAoKHJlZiA9IHRoaXMudXNlcikgIT0gbnVsbCA/IHR5cGVvZiByZWYuaXNBZG1pbiA9PT0gXCJmdW5jdGlvblwiID8gcmVmLmlzQWRtaW4oKSA6IHZvaWQgMCA6IHZvaWQgMCkge1xuICAgICAgdGhpcy4kZWwuZmluZChcIiN1c2VybmFtZS1jb250YWluZXJcIikuaG92ZXIodGhpcy51c2VyTWVudUluLCB0aGlzLnVzZXJNZW51T3V0KTtcbiAgICB9XG4gICAgJChkb2N1bWVudCkuYWpheFN0YXJ0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCQoXCIjbmF2aWdhdGlvbi1sb2dvXCIpLmF0dHIoXCJzcmNcIikgIT09IFwiaW1hZ2VzL25hdmlnYXRpb24tbG9nby1zcGluLmdpZlwiKSB7XG4gICAgICAgIHJldHVybiAkKFwiI25hdmlnYXRpb24tbG9nb1wiKS5hdHRyKFwic3JjXCIsIFwiaW1hZ2VzL25hdmlnYXRpb24tbG9nby1zcGluLmdpZlwiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gJChkb2N1bWVudCkuYWpheFN0b3AoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoJChcIiNuYXZpZ2F0aW9uLWxvZ29cIikuYXR0cihcInNyY1wiKSAhPT0gXCJpbWFnZXMvbmF2aWdhdGlvbi1sb2dvLnBuZ1wiKSB7XG4gICAgICAgIHJldHVybiAkKFwiI25hdmlnYXRpb24tbG9nb1wiKS5hdHRyKFwic3JjXCIsIFwiaW1hZ2VzL25hdmlnYXRpb24tbG9nby5wbmdcIik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgTmF2aWdhdGlvblZpZXcucHJvdG90eXBlLnNldFN0dWRlbnQgPSBmdW5jdGlvbihpZCkge1xuICAgIGlmIChpZCA9PT0gXCJcIikge1xuICAgICAgdGhpcy4kZWwuZmluZChcIiNzdHVkZW50LWNvbnRhaW5lclwiKS5hZGRDbGFzcyhcImhpZGRlblwiKTtcbiAgICAgIHJldHVybiB0aGlzLiRlbC5maW5kKCcjc3R1ZGVudC1pZCcpLmh0bWwoXCJcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIjc3R1ZGVudC1jb250YWluZXJcIikucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7XG4gICAgICByZXR1cm4gdGhpcy4kZWwuZmluZCgnI3N0dWRlbnQtaWQnKS5odG1sKGlkKTtcbiAgICB9XG4gIH07XG5cbiAgTmF2aWdhdGlvblZpZXcucHJvdG90eXBlLmhhbmRsZU1lbnUgPSBmdW5jdGlvbihldmVudCkge1xuICAgICQoXCIjdXNlcm5hbWVfbGFiZWxcIikuaHRtbCh0aGlzLndob0FtSSk7XG4gICAgJCgnI3VzZXJuYW1lJykuaHRtbCh0aGlzLnVzZXIubmFtZSgpKTtcbiAgICBpZiAofndpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpLmluZGV4T2YoXCJuYW1lPVwiKSkge1xuICAgICAgdGhpcy4kZWwuZmluZChcIiNsb2dvdXRfbGlua1wiKS5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJGVsLmZpbmQoXCIjbG9nb3V0X2xpbmtcIikuc2hvdygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy51c2VyLnZlcmlmeSh7XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgX3RoaXMucmVuZGVyKCk7XG4gICAgICAgICAgcmV0dXJuICQoJyNuYXZpZ2F0aW9uJykuZmFkZUluKDI1MCk7XG4gICAgICAgIH07XG4gICAgICB9KSh0aGlzKSxcbiAgICAgIGlzVW5yZWdpc3RlcmVkOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIF90aGlzLnJlbmRlcigpO1xuICAgICAgICAgIHJldHVybiAkKCcjbmF2aWdhdGlvbicpLmZhZGVPdXQoMjUwKTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE5hdmlnYXRpb25WaWV3O1xuXG59KShCYWNrYm9uZS5WaWV3KTtcblxuIiwiY2xhc3MgUm91dGVyIGV4dGVuZHMgQmFja2JvbmUuUm91dGVyXG4jICBiZWZvcmU6ICgpIC0+XG4jICAgIGNvbnNvbGUubG9nKCdiZWZvcmUnKVxuIyAgICAkKCcjZm9vdGVyJykuc2hvdygpXG4jXG4jICBhZnRlcjogKCkgLT5cbiMgICAgY29uc29sZS5sb2coJ2FmdGVyJyk7XG4gIGV4ZWN1dGU6IChjYWxsYmFjaywgYXJncywgbmFtZSkgLT5cbiAgICAkKCcjZm9vdGVyJykuc2hvdygpXG4gICAgaWYgKGNhbGxiYWNrKVxuICAgICAgY2FsbGJhY2suYXBwbHkodGhpcywgYXJncylcblxuICByb3V0ZXM6XG5cbiAgICAnd29ya2Zsb3cvZWRpdC86d29ya2Zsb3dJZCcgOiAnd29ya2Zsb3dFZGl0J1xuICAgICd3b3JrZmxvdy9ydW4vOndvcmtmbG93SWQnICA6ICd3b3JrZmxvd1J1bidcbiAgICAnd29ya2Zsb3cvcmVzdW1lLzp3b3JrZmxvd0lkLzp0cmlwSWQnICA6ICd3b3JrZmxvd1Jlc3VtZSdcblxuICAgICdmZWVkYmFjay9lZGl0Lzp3b3JrZmxvd0lkJyA6ICdmZWVkYmFja0VkaXQnXG4gICAgJ2ZlZWRiYWNrLzp3b3JrZmxvd0lkJyAgICAgIDogJ2ZlZWRiYWNrJ1xuXG4gICAgJ2xvZ2luJyAgICA6ICdsb2dpbidcbiAgICAncmVnaXN0ZXInIDogJ3JlZ2lzdGVyJ1xuICAgICdsb2dvdXQnICAgOiAnbG9nb3V0J1xuICAgICdhY2NvdW50JyAgOiAnYWNjb3VudCdcblxuICAgICd0cmFuc2ZlcicgOiAndHJhbnNmZXInXG5cbiAgICAnc2V0dGluZ3MnIDogJ3NldHRpbmdzJ1xuICAgICd1cGRhdGUnIDogJ3VwZGF0ZSdcblxuICAgICcnIDogJ2xhbmRpbmcnXG5cbiAgICAnbG9ncycgOiAnbG9ncydcblxuICAgICMgQ2xhc3NcbiAgICAnY2xhc3MnICAgICAgICAgIDogJ2tsYXNzJ1xuICAgICdjbGFzcy9lZGl0LzppZCcgOiAna2xhc3NFZGl0J1xuICAgICdjbGFzcy9zdHVkZW50LzpzdHVkZW50SWQnICAgICAgICA6ICdzdHVkZW50RWRpdCdcbiAgICAnY2xhc3Mvc3R1ZGVudC9yZXBvcnQvOnN0dWRlbnRJZCcgOiAnc3R1ZGVudFJlcG9ydCdcbiAgICAnY2xhc3Mvc3VidGVzdC86aWQnIDogJ2VkaXRLbGFzc1N1YnRlc3QnXG4gICAgJ2NsYXNzL3F1ZXN0aW9uLzppZCcgOiBcImVkaXRLbGFzc1F1ZXN0aW9uXCJcblxuICAgICdjbGFzcy86aWQvOnBhcnQnIDogJ2tsYXNzUGFydGx5J1xuICAgICdjbGFzcy86aWQnICAgICAgIDogJ2tsYXNzUGFydGx5J1xuXG4gICAgJ2NsYXNzL3J1bi86c3R1ZGVudElkLzpzdWJ0ZXN0SWQnIDogJ3J1blN1YnRlc3QnXG5cbiAgICAnY2xhc3MvcmVzdWx0L3N0dWRlbnQvc3VidGVzdC86c3R1ZGVudElkLzpzdWJ0ZXN0SWQnIDogJ3N0dWRlbnRTdWJ0ZXN0J1xuXG4gICAgJ2N1cnJpY3VsYScgICAgICAgICA6ICdjdXJyaWN1bGEnXG4gICAgJ2N1cnJpY3VsdW0vOmlkJyAgICA6ICdjdXJyaWN1bHVtJ1xuICAgICdjdXJyaWN1bHVtSW1wb3J0JyAgOiAnY3VycmljdWx1bUltcG9ydCdcblxuICAgICdyZXBvcnQva2xhc3NHcm91cGluZy86a2xhc3NJZC86cGFydCcgOiAna2xhc3NHcm91cGluZydcbiAgICAncmVwb3J0L21hc3RlcnlDaGVjay86c3R1ZGVudElkJyAgICAgIDogJ21hc3RlcnlDaGVjaydcbiAgICAncmVwb3J0L3Byb2dyZXNzLzpzdHVkZW50SWQvOmtsYXNzSWQnIDogJ3Byb2dyZXNzUmVwb3J0J1xuXG5cbiAgICAjIHNlcnZlciAvIG1vYmlsZVxuICAgICdncm91cHMnIDogJ2dyb3VwcydcblxuICAgICdhc3Nlc3NtZW50cycgICAgICAgIDogJ2Fzc2Vzc21lbnRzJ1xuXG4gICAgJ3J1bi86aWQnICAgICAgIDogJ3J1bidcbiAgICAncHJpbnQvOmlkLzpmb3JtYXQnICAgICAgIDogJ3ByaW50J1xuICAgICdkYXRhRW50cnkvOmlkJyA6ICdkYXRhRW50cnknXG5cbiAgICAncmVzdW1lLzphc3Nlc3NtZW50SWQvOnJlc3VsdElkJyAgICA6ICdyZXN1bWUnXG5cbiAgICAncmVzdGFydC86aWQnICAgOiAncmVzdGFydCdcbiAgICAnZWRpdC86aWQnICAgICAgOiAnZWRpdCdcbiAgICAncmVzdWx0cy86aWQnICAgOiAncmVzdWx0cydcbiAgICAnaW1wb3J0JyAgICAgICAgOiAnaW1wb3J0J1xuXG4gICAgJ3N1YnRlc3QvOmlkJyAgICAgICA6ICdlZGl0U3VidGVzdCdcblxuICAgICdxdWVzdGlvbi86aWQnIDogJ2VkaXRRdWVzdGlvbidcbiAgICAnZGFzaGJvYXJkJyA6ICdkYXNoYm9hcmQnXG4gICAgJ2Rhc2hib2FyZC8qb3B0aW9ucycgOiAnZGFzaGJvYXJkJ1xuICAgICdhZG1pbicgOiAnYWRtaW4nXG5cbiAgICAnc3luYy86aWQnICAgICAgOiAnc3luYydcblxuICBmZWVkYmFja0VkaXQ6ICggd29ya2Zsb3dJZCApIC0+XG4gICAgVGFuZ2VyaW5lLnVzZXIudmVyaWZ5XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IC0+XG5cbiAgICAgICAgc2hvd0ZlZWRiYWNrRWRpdG9yID0gKCBmZWVkYmFjaywgd29ya2Zsb3cgKSAtPlxuICAgICAgICAgIGZlZWRiYWNrLnVwZGF0ZUNvbGxlY3Rpb24oKVxuICAgICAgICAgIHZpZXcgPSBuZXcgRmVlZGJhY2tFZGl0Vmlld1xuICAgICAgICAgICAgZmVlZGJhY2s6IGZlZWRiYWNrXG4gICAgICAgICAgICB3b3JrZmxvdzogd29ya2Zsb3dcbiAgICAgICAgICB2bS5zaG93IHZpZXdcblxuICAgICAgICB3b3JrZmxvdyA9IG5ldyBXb3JrZmxvdyBcIl9pZFwiIDogd29ya2Zsb3dJZFxuICAgICAgICB3b3JrZmxvdy5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICBmZWVkYmFja0lkID0gXCIje3dvcmtmbG93SWR9LWZlZWRiYWNrXCJcbiAgICAgICAgICAgIGZlZWRiYWNrICAgPSBuZXcgRmVlZGJhY2sgXCJfaWRcIiA6IGZlZWRiYWNrSWRcbiAgICAgICAgICAgIGZlZWRiYWNrLmZldGNoXG4gICAgICAgICAgICAgIGVycm9yOiAgIC0+IGZlZWRiYWNrLnNhdmUgbnVsbCwgc3VjY2VzczogLT4gc2hvd0ZlZWRiYWNrRWRpdG9yKGZlZWRiYWNrLCB3b3JrZmxvdylcbiAgICAgICAgICAgICAgc3VjY2VzczogLT4gc2hvd0ZlZWRiYWNrRWRpdG9yKGZlZWRiYWNrLCB3b3JrZmxvdylcblxuICBmZWVkYmFjazogKCB3b3JrZmxvd0lkICkgLT5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQXV0aGVudGljYXRlZDogLT5cblxuICAgICAgICB3b3JrZmxvdyA9IG5ldyBXb3JrZmxvdyBcIl9pZFwiIDogd29ya2Zsb3dJZFxuICAgICAgICB3b3JrZmxvdy5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICBmZWVkYmFja0lkID0gXCIje3dvcmtmbG93SWR9LWZlZWRiYWNrXCJcbiAgICAgICAgICAgIGZlZWRiYWNrID0gbmV3IEZlZWRiYWNrIFwiX2lkXCIgOiBmZWVkYmFja0lkXG4gICAgICAgICAgICBmZWVkYmFjay5mZXRjaFxuICAgICAgICAgICAgICBlcnJvcjogLT4gVXRpbHMubWlkQWxlcnQgXCJObyBmZWVkYmFjayBkZWZpbmVkXCJcbiAgICAgICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgICAgICBmZWVkYmFjay51cGRhdGVDb2xsZWN0aW9uKClcbiAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IEZlZWRiYWNrVHJpcHNWaWV3XG4gICAgICAgICAgICAgICAgICBmZWVkYmFjayA6IGZlZWRiYWNrXG4gICAgICAgICAgICAgICAgICB3b3JrZmxvdyA6IHdvcmtmbG93XG4gICAgICAgICAgICAgICAgdm0uc2hvdyB2aWV3XG5cblxuXG5cblxuICB3b3JrZmxvd0VkaXQ6ICggd29ya2Zsb3dJZCApIC0+XG4gICAgVGFuZ2VyaW5lLnVzZXIudmVyaWZ5XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IC0+XG5cbiAgICAgICAgd29ya2Zsb3cgPSBuZXcgV29ya2Zsb3cgXCJfaWRcIiA6IHdvcmtmbG93SWRcbiAgICAgICAgd29ya2Zsb3cuZmV0Y2hcbiAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgdmlldyA9IG5ldyBXb3JrZmxvd0VkaXRWaWV3IHdvcmtmbG93IDogd29ya2Zsb3dcbiAgICAgICAgICAgIHZtLnNob3cgdmlld1xuXG4gIHdvcmtmbG93UnVuOiAoIHdvcmtmbG93SWQgKSAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBdXRoZW50aWNhdGVkOiAtPlxuXG4gICAgICAgIHdvcmtmbG93ID0gbmV3IFdvcmtmbG93IFwiX2lkXCIgOiB3b3JrZmxvd0lkXG4gICAgICAgIHdvcmtmbG93LmZldGNoXG4gICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgIHdvcmtmbG93LnVwZGF0ZUNvbGxlY3Rpb24oKVxuICAgICAgICAgICAgdmlldyA9IG5ldyBXb3JrZmxvd1J1blZpZXdcbiAgICAgICAgICAgICAgd29ya2Zsb3c6IHdvcmtmbG93XG4gICAgICAgICAgICB2bS5zaG93IHZpZXdcblxuICB3b3JrZmxvd1Jlc3VtZTogKCB3b3JrZmxvd0lkLCB0cmlwSWQgKSAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBdXRoZW50aWNhdGVkOiAtPlxuXG4gICAgICAgIHdvcmtmbG93ID0gbmV3IFdvcmtmbG93IFwiX2lkXCIgOiB3b3JrZmxvd0lkXG4gICAgICAgIHdvcmtmbG93LmZldGNoXG4gICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgIFRhbmdlcmluZS4kZGIudmlldyBUYW5nZXJpbmUuZGVzaWduX2RvYytcIi90cmlwc0FuZFVzZXJzXCIsXG4gICAgICAgICAgICAgIGtleTogdHJpcElkXG4gICAgICAgICAgICAgIGluY2x1ZGVfZG9jczogdHJ1ZVxuICAgICAgICAgICAgICBzdWNjZXNzOiAoZGF0YSkgLT5cbiAgICAgICAgICAgICAgICBpbmRleCA9IE1hdGgubWF4KGRhdGEucm93cy5sZW5ndGggLSAxLCAwKVxuXG4gICAgICAgICAgICAgICAgIyBhZGQgb2xkIHJlc3VsdHNcbiAgICAgICAgICAgICAgICBzdGVwcyA9IFtdXG4gICAgICAgICAgICAgICAgZm9yIGogaW4gWzAuLmluZGV4XVxuICAgICAgICAgICAgICAgICAgc3RlcHMucHVzaCB7cmVzdWx0IDogbmV3IFJlc3VsdCBkYXRhLnJvd3Nbal0uZG9jfVxuXG4gICAgICAgICAgICAgICAgYXNzZXNzbWVudFJlc3VtZUluZGV4ID0gZGF0YS5yb3dzW2luZGV4XT8uZG9jPy5zdWJ0ZXN0RGF0YT8ubGVuZ3RoIHx8IDBcblxuICAgICAgICAgICAgICAgICMjI1xuICAgICAgICAgICAgICAgICAgaWYgZGF0YS5yb3dzW2luZGV4XT8uZG9jPy5vcmRlcl9tYXA/XG4gICAgICAgICAgICAgICAgICAjIHNhdmUgdGhlIG9yZGVyIG1hcCBvZiBwcmV2aW91cyByYW5kb21pemF0aW9uXG4gICAgICAgICAgICAgICAgICBvcmRlck1hcCA9IHJlc3VsdC5nZXQoXCJvcmRlcl9tYXBcIikuc2xpY2UoKSAjIGNsb25lIGFycmF5XG4gICAgICAgICAgICAgICAgICAjIHJlc3RvcmUgdGhlIHByZXZpb3VzIG9yZGVybWFwXG4gICAgICAgICAgICAgICAgICB2aWV3Lm9yZGVyTWFwID0gb3JkZXJNYXBcblxuICAgICAgICAgICAgICAgICMjI1xuXG4gICAgICAgICAgICAgICAgd29ya2Zsb3cgPSBuZXcgV29ya2Zsb3cgXCJfaWRcIiA6IHdvcmtmbG93SWRcbiAgICAgICAgICAgICAgICB3b3JrZmxvdy5mZXRjaFxuICAgICAgICAgICAgICAgICAgc3VjY2VzczogLT5cblxuICAgICAgICAgICAgICAgICAgICBpbmNvbXBsZXRlID0gVGFuZ2VyaW5lLnVzZXIuZ2V0UHJlZmVyZW5jZXMoXCJ0dXRvci13b3JrZmxvd3NcIiwgXCJpbmNvbXBsZXRlXCIpXG5cbiAgICAgICAgICAgICAgICAgICAgaW5jb21wbGV0ZVt3b3JrZmxvd0lkXSA9IF8oaW5jb21wbGV0ZVt3b3JrZmxvd0lkXSkud2l0aG91dCB0cmlwSWRcblxuICAgICAgICAgICAgICAgICAgICBUYW5nZXJpbmUudXNlci5nZXRQcmVmZXJlbmNlcyhcInR1dG9yLXdvcmtmbG93c1wiLCBcImluY29tcGxldGVcIiwgaW5jb21wbGV0ZSlcblxuICAgICAgICAgICAgICAgICAgICB3b3JrZmxvdy51cGRhdGVDb2xsZWN0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgdmlldyA9IG5ldyBXb3JrZmxvd1J1blZpZXdcbiAgICAgICAgICAgICAgICAgICAgICBhc3Nlc3NtZW50UmVzdW1lSW5kZXggOiBhc3Nlc3NtZW50UmVzdW1lSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICB3b3JrZmxvdzogd29ya2Zsb3dcbiAgICAgICAgICAgICAgICAgICAgICB0cmlwSWQgIDogdHJpcElkXG4gICAgICAgICAgICAgICAgICAgICAgaW5kZXggICA6IGluZGV4XG4gICAgICAgICAgICAgICAgICAgICAgc3RlcHMgICA6IHN0ZXBzXG4gICAgICAgICAgICAgICAgICAgIHZtLnNob3cgdmlld1xuXG5cblxuXG5cbiAgYWRtaW46IChvcHRpb25zKSAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBZG1pbjogLT5cbiAgICAgICAgJC5jb3VjaC5hbGxEYnNcbiAgICAgICAgICBzdWNjZXNzOiAoZGF0YWJhc2VzKSA9PlxuICAgICAgICAgICAgZ3JvdXBzID0gZGF0YWJhc2VzLmZpbHRlciAoZGF0YWJhc2UpIC0+IGRhdGFiYXNlLmluZGV4T2YoXCJncm91cC1cIikgPT0gMFxuICAgICAgICAgICAgdmlldyA9IG5ldyBBZG1pblZpZXdcbiAgICAgICAgICAgICAgZ3JvdXBzIDogZ3JvdXBzXG4gICAgICAgICAgICB2bS5zaG93IHZpZXdcblxuICBkYXNoYm9hcmQ6IChvcHRpb25zKSAtPlxuICAgIG9wdGlvbnMgPSBvcHRpb25zPy5zcGxpdCgvXFwvLylcbiAgICBjb25zb2xlLmxvZyhcIm9wdGlvbnM6IFwiICsgb3B0aW9ucylcbiAgICAjZGVmYXVsdCB2aWV3IG9wdGlvbnNcbiAgICByZXBvcnRWaWV3T3B0aW9ucyA9XG4gICAgICBhc3Nlc3NtZW50OiBcIkFsbFwiXG4gICAgICBncm91cEJ5OiBcImVudW1lcmF0b3JcIlxuXG4gICAgIyBBbGxvd3MgdXMgdG8gZ2V0IG5hbWUvdmFsdWUgcGFpcnMgZnJvbSBVUkxcbiAgICBfLmVhY2ggb3B0aW9ucywgKG9wdGlvbixpbmRleCkgLT5cbiAgICAgIHVubGVzcyBpbmRleCAlIDJcbiAgICAgICAgcmVwb3J0Vmlld09wdGlvbnNbb3B0aW9uXSA9IG9wdGlvbnNbaW5kZXgrMV1cblxuICAgIHZpZXcgPSBuZXcgRGFzaGJvYXJkVmlldyAgcmVwb3J0Vmlld09wdGlvbnNcblxuICAgIHZtLnNob3cgdmlld1xuXG4gIGxhbmRpbmc6IC0+XG5cbiAgICBpZiB+U3RyaW5nKHdpbmRvdy5sb2NhdGlvbi5ocmVmKS5pbmRleE9mKFwiYXBwL3RhbmdlcmluZS9cIikgIyBpbiBtYWluIGdyb3VwP1xuICAgICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZSBcImdyb3Vwc1wiLCB0cnVlXG4gICAgZWxzZVxuICAgICAgVGFuZ2VyaW5lLnJvdXRlci5uYXZpZ2F0ZSBcImFzc2Vzc21lbnRzXCIsIHRydWVcblxuXG4gIGdyb3VwczogLT5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQXV0aGVudGljYXRlZDogLT5cbiAgICAgICAgdmlldyA9IG5ldyBHcm91cHNWaWV3XG4gICAgICAgIHZtLnNob3cgdmlld1xuXG4gICNcbiAgIyBDbGFzc1xuICAjXG4gIGN1cnJpY3VsYTogLT5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQXV0aGVudGljYXRlZDogLT5cbiAgICAgICAgY3VycmljdWxhID0gbmV3IEN1cnJpY3VsYVxuICAgICAgICBjdXJyaWN1bGEuZmV0Y2hcbiAgICAgICAgICBzdWNjZXNzOiAoY29sbGVjdGlvbikgLT5cbiAgICAgICAgICAgIHZpZXcgPSBuZXcgQ3VycmljdWxhVmlld1xuICAgICAgICAgICAgICBcImN1cnJpY3VsYVwiIDogY29sbGVjdGlvblxuICAgICAgICAgICAgdm0uc2hvdyB2aWV3XG5cbiAgY3VycmljdWx1bTogKGN1cnJpY3VsdW1JZCkgLT5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQXV0aGVudGljYXRlZDogLT5cbiAgICAgICAgY3VycmljdWx1bSA9IG5ldyBDdXJyaWN1bHVtIFwiX2lkXCIgOiBjdXJyaWN1bHVtSWRcbiAgICAgICAgY3VycmljdWx1bS5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICBhbGxTdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0c1xuICAgICAgICAgICAgYWxsU3VidGVzdHMuZmV0Y2hcbiAgICAgICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgICAgICBzdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0cyBhbGxTdWJ0ZXN0cy53aGVyZSBcImN1cnJpY3VsdW1JZFwiIDogY3VycmljdWx1bUlkXG4gICAgICAgICAgICAgICAgYWxsUXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9uc1xuICAgICAgICAgICAgICAgIGFsbFF1ZXN0aW9ucy5mZXRjaFxuICAgICAgICAgICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25zID0gW11cbiAgICAgICAgICAgICAgICAgICAgc3VidGVzdHMuZWFjaCAoc3VidGVzdCkgLT4gcXVlc3Rpb25zID0gcXVlc3Rpb25zLmNvbmNhdChhbGxRdWVzdGlvbnMud2hlcmUgXCJzdWJ0ZXN0SWRcIiA6IHN1YnRlc3QuaWQgKVxuICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zIHF1ZXN0aW9uc1xuICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IEN1cnJpY3VsdW1WaWV3XG4gICAgICAgICAgICAgICAgICAgICAgXCJjdXJyaWN1bHVtXCIgOiBjdXJyaWN1bHVtXG4gICAgICAgICAgICAgICAgICAgICAgXCJzdWJ0ZXN0c1wiICAgOiBzdWJ0ZXN0c1xuICAgICAgICAgICAgICAgICAgICAgIFwicXVlc3Rpb25zXCIgIDogcXVlc3Rpb25zXG5cbiAgICAgICAgICAgICAgICAgICAgdm0uc2hvdyB2aWV3XG5cblxuICBjdXJyaWN1bHVtRWRpdDogKGN1cnJpY3VsdW1JZCkgLT5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQXV0aGVudGljYXRlZDogLT5cbiAgICAgICAgY3VycmljdWx1bSA9IG5ldyBDdXJyaWN1bHVtIFwiX2lkXCIgOiBjdXJyaWN1bHVtSWRcbiAgICAgICAgY3VycmljdWx1bS5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICBhbGxTdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0c1xuICAgICAgICAgICAgYWxsU3VidGVzdHMuZmV0Y2hcbiAgICAgICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgICAgICBzdWJ0ZXN0cyA9IGFsbFN1YnRlc3RzLndoZXJlIFwiY3VycmljdWx1bUlkXCIgOiBjdXJyaWN1bHVtSWRcbiAgICAgICAgICAgICAgICBhbGxQYXJ0cyA9IChzdWJ0ZXN0LmdldChcInBhcnRcIikgZm9yIHN1YnRlc3QgaW4gc3VidGVzdHMpXG4gICAgICAgICAgICAgICAgcGFydENvdW50ID0gTWF0aC5tYXguYXBwbHkgTWF0aCwgYWxsUGFydHNcbiAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IEN1cnJpY3VsdW1WaWV3XG4gICAgICAgICAgICAgICAgICBcImN1cnJpY3VsdW1cIiA6IGN1cnJpY3VsdW1cbiAgICAgICAgICAgICAgICAgIFwic3VidGVzdHNcIiA6IHN1YnRlc3RzXG4gICAgICAgICAgICAgICAgICBcInBhcnRzXCIgOiBwYXJ0Q291bnRcbiAgICAgICAgICAgICAgICB2bS5zaG93IHZpZXdcblxuXG4gIGN1cnJpY3VsdW1JbXBvcnQ6IC0+XG4gICAgVGFuZ2VyaW5lLnVzZXIudmVyaWZ5XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IC0+XG4gICAgICAgIHZpZXcgPSBuZXcgQXNzZXNzbWVudEltcG9ydFZpZXdcbiAgICAgICAgICBub3VuIDogXCJjdXJyaWN1bHVtXCJcbiAgICAgICAgdm0uc2hvdyB2aWV3XG5cbiAga2xhc3M6IC0+XG4gICAgVGFuZ2VyaW5lLnVzZXIudmVyaWZ5XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IC0+XG4gICAgICAgIGFsbEtsYXNzZXMgPSBuZXcgS2xhc3Nlc1xuICAgICAgICBhbGxLbGFzc2VzLmZldGNoXG4gICAgICAgICAgc3VjY2VzczogKCBrbGFzc0NvbGxlY3Rpb24gKSAtPlxuICAgICAgICAgICAgdGVhY2hlcnMgPSBuZXcgVGVhY2hlcnNcbiAgICAgICAgICAgIHRlYWNoZXJzLmZldGNoXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICAgICAgYWxsQ3VycmljdWxhID0gbmV3IEN1cnJpY3VsYVxuICAgICAgICAgICAgICAgIGFsbEN1cnJpY3VsYS5mZXRjaFxuICAgICAgICAgICAgICAgICAgc3VjY2VzczogKCBjdXJyaWN1bGFDb2xsZWN0aW9uICkgLT5cbiAgICAgICAgICAgICAgICAgICAgaWYgbm90IFRhbmdlcmluZS51c2VyLmlzQWRtaW4oKVxuICAgICAgICAgICAgICAgICAgICAgIGtsYXNzQ29sbGVjdGlvbiA9IG5ldyBLbGFzc2VzIGtsYXNzQ29sbGVjdGlvbi53aGVyZShcInRlYWNoZXJJZFwiIDogVGFuZ2VyaW5lLnVzZXIuZ2V0KFwidGVhY2hlcklkXCIpKVxuICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IEtsYXNzZXNWaWV3XG4gICAgICAgICAgICAgICAgICAgICAga2xhc3NlcyAgIDoga2xhc3NDb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgY3VycmljdWxhIDogY3VycmljdWxhQ29sbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgIHRlYWNoZXJzICA6IHRlYWNoZXJzXG4gICAgICAgICAgICAgICAgICAgIHZtLnNob3cgdmlld1xuXG4gIGtsYXNzRWRpdDogKGlkKSAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBdXRoZW50aWNhdGVkOiAtPlxuICAgICAgICBrbGFzcyA9IG5ldyBLbGFzcyBfaWQgOiBpZFxuICAgICAgICBrbGFzcy5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3M6ICggbW9kZWwgKSAtPlxuICAgICAgICAgICAgdGVhY2hlcnMgPSBuZXcgVGVhY2hlcnNcbiAgICAgICAgICAgIHRlYWNoZXJzLmZldGNoXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICAgICAgYWxsU3R1ZGVudHMgPSBuZXcgU3R1ZGVudHNcbiAgICAgICAgICAgICAgICBhbGxTdHVkZW50cy5mZXRjaFxuICAgICAgICAgICAgICAgICAgc3VjY2VzczogKGFsbFN0dWRlbnRzKSAtPlxuICAgICAgICAgICAgICAgICAgICBrbGFzc1N0dWRlbnRzID0gbmV3IFN0dWRlbnRzIGFsbFN0dWRlbnRzLndoZXJlIHtrbGFzc0lkIDogaWR9XG4gICAgICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgS2xhc3NFZGl0Vmlld1xuICAgICAgICAgICAgICAgICAgICAgIGtsYXNzICAgICAgIDogbW9kZWxcbiAgICAgICAgICAgICAgICAgICAgICBzdHVkZW50cyAgICA6IGtsYXNzU3R1ZGVudHNcbiAgICAgICAgICAgICAgICAgICAgICBhbGxTdHVkZW50cyA6IGFsbFN0dWRlbnRzXG4gICAgICAgICAgICAgICAgICAgICAgdGVhY2hlcnMgICAgOiB0ZWFjaGVyc1xuICAgICAgICAgICAgICAgICAgICB2bS5zaG93IHZpZXdcblxuICBrbGFzc1BhcnRseTogKGtsYXNzSWQsIHBhcnQ9bnVsbCkgLT5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQXV0aGVudGljYXRlZDogLT5cbiAgICAgICAga2xhc3MgPSBuZXcgS2xhc3MgXCJfaWRcIiA6IGtsYXNzSWRcbiAgICAgICAga2xhc3MuZmV0Y2hcbiAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgY3VycmljdWx1bSA9IG5ldyBDdXJyaWN1bHVtIFwiX2lkXCIgOiBrbGFzcy5nZXQoXCJjdXJyaWN1bHVtSWRcIilcbiAgICAgICAgICAgIGN1cnJpY3VsdW0uZmV0Y2hcbiAgICAgICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgICAgICBhbGxTdHVkZW50cyA9IG5ldyBTdHVkZW50c1xuICAgICAgICAgICAgICAgIGFsbFN0dWRlbnRzLmZldGNoXG4gICAgICAgICAgICAgICAgICBzdWNjZXNzOiAoY29sbGVjdGlvbikgLT5cbiAgICAgICAgICAgICAgICAgICAgc3R1ZGVudHMgPSBuZXcgU3R1ZGVudHMgKCBjb2xsZWN0aW9uLndoZXJlKCBcImtsYXNzSWRcIiA6IGtsYXNzSWQgKSApXG5cbiAgICAgICAgICAgICAgICAgICAgYWxsUmVzdWx0cyA9IG5ldyBLbGFzc1Jlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgYWxsUmVzdWx0cy5mZXRjaFxuICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IChjb2xsZWN0aW9uKSAtPlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IG5ldyBLbGFzc1Jlc3VsdHMgKCBjb2xsZWN0aW9uLndoZXJlKCBcImtsYXNzSWRcIiA6IGtsYXNzSWQgKSApXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFN1YnRlc3RzID0gbmV3IFN1YnRlc3RzXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTdWJ0ZXN0cy5mZXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiAoY29sbGVjdGlvbiApIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VidGVzdHMgPSBuZXcgU3VidGVzdHMgKCBjb2xsZWN0aW9uLndoZXJlKCBcImN1cnJpY3VsdW1JZFwiIDoga2xhc3MuZ2V0KFwiY3VycmljdWx1bUlkXCIpICkgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgS2xhc3NQYXJ0bHlWaWV3XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhcnRcIiAgICAgICA6IHBhcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3VidGVzdHNcIiAgIDogc3VidGVzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmVzdWx0c1wiICAgIDogcmVzdWx0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHVkZW50c1wiICAgOiBzdHVkZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjdXJyaWN1bHVtXCIgOiBjdXJyaWN1bHVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImtsYXNzXCIgICAgICA6IGtsYXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm0uc2hvdyB2aWV3XG5cblxuICBzdHVkZW50U3VidGVzdDogKHN0dWRlbnRJZCwgc3VidGVzdElkKSAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBdXRoZW50aWNhdGVkOiAtPlxuICAgICAgICBzdHVkZW50ID0gbmV3IFN0dWRlbnQgXCJfaWRcIiA6IHN0dWRlbnRJZFxuICAgICAgICBzdHVkZW50LmZldGNoXG4gICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgIHN1YnRlc3QgPSBuZXcgU3VidGVzdCBcIl9pZFwiIDogc3VidGVzdElkXG4gICAgICAgICAgICBzdWJ0ZXN0LmZldGNoXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICAgICAgVGFuZ2VyaW5lLiRkYi52aWV3IFwiI3tUYW5nZXJpbmUuZGVzaWduX2RvY30vcmVzdWx0c0J5U3R1ZGVudFN1YnRlc3RcIixcbiAgICAgICAgICAgICAgICAgIGtleSA6IFtzdHVkZW50SWQsc3VidGVzdElkXVxuICAgICAgICAgICAgICAgICAgc3VjY2VzczogKHJlc3BvbnNlKSA9PlxuICAgICAgICAgICAgICAgICAgICBhbGxSZXN1bHRzID0gbmV3IEtsYXNzUmVzdWx0c1xuICAgICAgICAgICAgICAgICAgICBhbGxSZXN1bHRzLmZldGNoXG4gICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogKGNvbGxlY3Rpb24pIC0+XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gY29sbGVjdGlvbi53aGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YnRlc3RJZFwiIDogc3VidGVzdElkXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwic3R1ZGVudElkXCIgOiBzdHVkZW50SWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJrbGFzc0lkXCIgICA6IHN0dWRlbnQuZ2V0KFwia2xhc3NJZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdmlldyA9IG5ldyBLbGFzc1N1YnRlc3RSZXN1bHRWaWV3XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxsUmVzdWx0c1wiIDogYWxsUmVzdWx0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlc3VsdHNcIiAgOiByZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwic3VidGVzdFwiICA6IHN1YnRlc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHVkZW50XCIgIDogc3R1ZGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInByZXZpb3VzXCIgOiByZXNwb25zZS5yb3dzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uc2hvdyB2aWV3XG5cbiAgcnVuU3VidGVzdDogKHN0dWRlbnRJZCwgc3VidGVzdElkKSAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBdXRoZW50aWNhdGVkOiAtPlxuICAgICAgICBzdWJ0ZXN0ID0gbmV3IFN1YnRlc3QgXCJfaWRcIiA6IHN1YnRlc3RJZFxuICAgICAgICBzdWJ0ZXN0LmZldGNoXG4gICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgIHN0dWRlbnQgPSBuZXcgU3R1ZGVudCBcIl9pZFwiIDogc3R1ZGVudElkXG5cbiAgICAgICAgICAgICMgdGhpcyBmdW5jdGlvbiBmb3IgbGF0ZXIsIHJlYWwgY29kZSBiZWxvd1xuICAgICAgICAgICAgb25TdHVkZW50UmVhZHkgPSAoc3R1ZGVudCwgc3VidGVzdCkgLT5cbiAgICAgICAgICAgICAgc3R1ZGVudC5mZXRjaFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IC0+XG5cbiAgICAgICAgICAgICAgICAgICMgdGhpcyBmdW5jdGlvbiBmb3IgbGF0ZXIsIHJlYWwgY29kZSBiZWxvd1xuICAgICAgICAgICAgICAgICAgb25TdWNjZXNzID0gKHN0dWRlbnQsIHN1YnRlc3QsIHF1ZXN0aW9uPW51bGwsIGxpbmtlZFJlc3VsdD17fSkgLT5cbiAgICAgICAgICAgICAgICAgICAgdmlldyA9IG5ldyBLbGFzc1N1YnRlc3RSdW5WaWV3XG4gICAgICAgICAgICAgICAgICAgICAgXCJzdHVkZW50XCIgICAgICA6IHN0dWRlbnRcbiAgICAgICAgICAgICAgICAgICAgICBcInN1YnRlc3RcIiAgICAgIDogc3VidGVzdFxuICAgICAgICAgICAgICAgICAgICAgIFwicXVlc3Rpb25zXCIgICAgOiBxdWVzdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICBcImxpbmtlZFJlc3VsdFwiIDogbGlua2VkUmVzdWx0XG4gICAgICAgICAgICAgICAgICAgIHZtLnNob3cgdmlld1xuXG4gICAgICAgICAgICAgICAgICBxdWVzdGlvbnMgPSBudWxsXG4gICAgICAgICAgICAgICAgICBpZiBzdWJ0ZXN0LmdldChcInByb3RvdHlwZVwiKSA9PSBcInN1cnZleVwiXG4gICAgICAgICAgICAgICAgICAgIFRhbmdlcmluZS4kZGIudmlldyBcIiN7VGFuZ2VyaW5lLmRlc2lnbl9kb2N9L3Jlc3VsdHNCeVN0dWRlbnRTdWJ0ZXN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAga2V5IDogW3N0dWRlbnRJZCxzdWJ0ZXN0LmdldChcImdyaWRMaW5rSWRcIildXG4gICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogKHJlc3BvbnNlKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgcmVzcG9uc2Uucm93cyAhPSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtlZFJlc3VsdCA9IG5ldyBLbGFzc1Jlc3VsdCBfLmxhc3QocmVzcG9uc2Uucm93cyk/LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbnMuZmV0Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInFcIiArIHN1YnRlc3QuZ2V0KFwiY3VycmljdWx1bUlkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9ucyhxdWVzdGlvbnMud2hlcmUge3N1YnRlc3RJZCA6IHN1YnRlc3RJZCB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uU3VjY2VzcyhzdHVkZW50LCBzdWJ0ZXN0LCBxdWVzdGlvbnMsIGxpbmtlZFJlc3VsdClcbiAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzKHN0dWRlbnQsIHN1YnRlc3QpXG4gICAgICAgICAgICAgICMgZW5kIG9mIG9uU3R1ZGVudFJlYWR5XG5cbiAgICAgICAgICAgIGlmIHN0dWRlbnRJZCA9PSBcInRlc3RcIlxuICAgICAgICAgICAgICBzdHVkZW50LmZldGNoXG4gICAgICAgICAgICAgICAgc3VjY2VzczogLT4gb25TdHVkZW50UmVhZHkoIHN0dWRlbnQsIHN1YnRlc3QpXG4gICAgICAgICAgICAgICAgZXJyb3I6IC0+XG4gICAgICAgICAgICAgICAgICBzdHVkZW50LnNhdmUgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogLT4gb25TdHVkZW50UmVhZHkoIHN0dWRlbnQsIHN1YnRlc3QpXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgIHN0dWRlbnQuZmV0Y2hcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgICAgICAgb25TdHVkZW50UmVhZHkoc3R1ZGVudCwgc3VidGVzdClcblxuICByZWdpc3RlcjogLT5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzVW5yZWdpc3RlcmVkOiAtPlxuICAgICAgICB2aWV3ID0gbmV3IFJlZ2lzdGVyVGVhY2hlclZpZXdcbiAgICAgICAgICB1c2VyIDogbmV3IFVzZXJcbiAgICAgICAgdm0uc2hvdyB2aWV3XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IC0+XG4gICAgICAgIFRhbmdlcmluZS5yb3V0ZXIubGFuZGluZygpXG5cbiAgc3R1ZGVudEVkaXQ6ICggc3R1ZGVudElkICkgLT5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQXV0aGVudGljYXRlZDogLT5cbiAgICAgICAgc3R1ZGVudCA9IG5ldyBTdHVkZW50IF9pZCA6IHN0dWRlbnRJZFxuICAgICAgICBzdHVkZW50LmZldGNoXG4gICAgICAgICAgc3VjY2VzczogKG1vZGVsKSAtPlxuICAgICAgICAgICAgYWxsS2xhc3NlcyA9IG5ldyBLbGFzc2VzXG4gICAgICAgICAgICBhbGxLbGFzc2VzLmZldGNoXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6ICgga2xhc3NDb2xsZWN0aW9uICktPlxuICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgU3R1ZGVudEVkaXRWaWV3XG4gICAgICAgICAgICAgICAgICBzdHVkZW50IDogbW9kZWxcbiAgICAgICAgICAgICAgICAgIGtsYXNzZXMgOiBrbGFzc0NvbGxlY3Rpb25cbiAgICAgICAgICAgICAgICB2bS5zaG93IHZpZXdcblxuXG4gICNcbiAgIyBBc3Nlc3NtZW50XG4gICNcblxuXG4gIGRhdGFFbnRyeTogKCBhc3Nlc3NtZW50SWQgKSAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBZG1pbjogLT5cbiAgICAgICAgYXNzZXNzbWVudCA9IG5ldyBBc3Nlc3NtZW50IFwiX2lkXCIgOiBhc3Nlc3NtZW50SWRcbiAgICAgICAgYXNzZXNzbWVudC5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICBxdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zXG4gICAgICAgICAgICBxdWVzdGlvbnMuZmV0Y2hcbiAgICAgICAgICAgICAga2V5OiBcInFcIiArIGFzc2Vzc21lbnRJZFxuICAgICAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgICAgIHF1ZXN0aW9uc0J5U3VidGVzdElkID0gcXVlc3Rpb25zLmluZGV4QnkoXCJzdWJ0ZXN0SWRcIilcbiAgICAgICAgICAgICAgICBmb3Igc3VidGVzdElkLCBxdWVzdGlvbnMgb2YgcXVlc3Rpb25zQnlTdWJ0ZXN0SWRcbiAgICAgICAgICAgICAgICAgIGFzc2Vzc21lbnQuc3VidGVzdHMuZ2V0KHN1YnRlc3RJZCkucXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9ucyBxdWVzdGlvbnNcbiAgICAgICAgICAgICAgICB2bS5zaG93IG5ldyBBc3Nlc3NtZW50RGF0YUVudHJ5VmlldyBhc3Nlc3NtZW50OiBhc3Nlc3NtZW50XG5cblxuXG4gIHN5bmM6ICggYXNzZXNzbWVudElkICkgLT5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQWRtaW46IC0+XG4gICAgICAgIGFzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudCBcIl9pZFwiIDogYXNzZXNzbWVudElkXG4gICAgICAgIGFzc2Vzc21lbnQuZmV0Y2hcbiAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgdm0uc2hvdyBuZXcgQXNzZXNzbWVudFN5bmNWaWV3IFwiYXNzZXNzbWVudFwiOiBhc3Nlc3NtZW50XG5cbiAgaW1wb3J0OiAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBdXRoZW50aWNhdGVkOiAtPlxuICAgICAgICB2aWV3ID0gbmV3IEFzc2Vzc21lbnRJbXBvcnRWaWV3XG4gICAgICAgICAgbm91biA6XCJhc3Nlc3NtZW50XCJcbiAgICAgICAgdm0uc2hvdyB2aWV3XG5cbiAgXG4gIGFzc2Vzc21lbnRzOiAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBdXRoZW50aWNhdGVkOiAtPlxuICAgICAgICAod29ya2Zsb3dzID0gbmV3IFdvcmtmbG93cykuZmV0Y2hcbiAgICAgICAgICBzdWNjZXNzOiAtPlxuXG4gICAgICAgICAgICBpZiB3b3JrZmxvd3MubGVuZ3RoID4gMCAmJiBUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0KFwiY29udGV4dFwiKSBpc250IFwic2VydmVyXCJcblxuICAgICAgICAgICAgICBmZWVkYmFja3MgPSBuZXcgRmVlZGJhY2tzIGZlZWRiYWNrc1xuICAgICAgICAgICAgICBmZWVkYmFja3MuZmV0Y2hcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgICAgICAgdmlldyA9IG5ldyBXb3JrZmxvd01lbnVWaWV3XG4gICAgICAgICAgICAgICAgICAgIHdvcmtmbG93cyA6IHdvcmtmbG93c1xuICAgICAgICAgICAgICAgICAgICBmZWVkYmFja3MgOiBmZWVkYmFja3NcbiAgICAgICAgICAgICAgICAgIHZtLnNob3cgdmlld1xuXG4gICAgICAgICAgICBjb2xsZWN0aW9ucyA9IFtcbiAgICAgICAgICAgICAgXCJLbGFzc2VzXCJcbiAgICAgICAgICAgICAgXCJUZWFjaGVyc1wiXG4gICAgICAgICAgICAgIFwiQ3VycmljdWxhXCJcbiAgICAgICAgICAgICAgXCJBc3Nlc3NtZW50c1wiXG4gICAgICAgICAgICAgIFwiV29ya2Zsb3dzXCJcbiAgICAgICAgICAgIF1cblxuICAgICAgICAgICAgIyBjb2xsZWN0aW9ucy5wdXNoIGlmIFwic2VydmVyXCIgPT0gVGFuZ2VyaW5lLnNldHRpbmdzLmdldChcImNvbnRleHRcIikgdGhlbiBcIlVzZXJzXCIgZWxzZSBcIlRhYmxldFVzZXJzXCJcbiAgICAgICAgICAgIGNvbGxlY3Rpb25zLnB1c2ggXCJVc2Vyc1wiXG5cbiAgICAgICAgICAgIFV0aWxzLmxvYWRDb2xsZWN0aW9uc1xuICAgICAgICAgICAgICBjb2xsZWN0aW9uczogY29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgY29tcGxldGU6IChvcHRpb25zKSAtPlxuICAgICAgICAgICAgICAgICMgbG9hZCBmZWVkYmFjayBtb2RlbHMgYXNzb2NpYXRlZCB3aXRoIHdvcmtmbG93c1xuICAgICAgICAgICAgICAgIGZlZWRiYWNrcyA9IG9wdGlvbnMud29ya2Zsb3dzLm1vZGVscy5tYXAgKGEpIC0+IG5ldyBGZWVkYmFjayBcIl9pZFwiIDogXCIje2EuaWR9LWZlZWRiYWNrXCJcbiAgICAgICAgICAgICAgICBmZWVkYmFja3MgPSBuZXcgRmVlZGJhY2tzIGZlZWRiYWNrc1xuICAgICAgICAgICAgICAgIGZlZWRiYWNrcy5mZXRjaFxuICAgICAgICAgICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5mZWVkYmFja3MgPSBmZWVkYmFja3NcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy51c2VycyA9IG9wdGlvbnMudGFibGV0VXNlcnMgfHwgb3B0aW9ucy51c2Vyc1xuICAgICAgICAgICAgICAgICAgICBpZiAhVGFuZ2VyaW5lLnVzZXIuaXNBZG1pbigpICYmIFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoJ3Nob3dXb3JrZmxvd3MnKSA9PSB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgdmlldyA9IG5ldyBXb3JrZmxvd01lbnVNZW1iZXJWaWV3IG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICB2bS5zaG93IHZpZXdcbiAgICAgICAgICAgICAgICAgICAgICAjIF4gdm0uc2hvdyBub3Qgd29ya2luZyBmb3Igc29tZSByZWFzb24gc28gbGV0cyBhdHRhY2ggdGhlIFZpZXcgdG8gdGhlIERPTSBtYW51YWxseS5cbiAgICAgICAgICAgICAgICAgICAgICAkKCcjY29udGVudCcpLmh0bWwodmlldy5lbClcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgIHZtLnNob3cgbmV3IEFzc2Vzc21lbnRzTWVudVZpZXcgb3B0aW9uc1xuXG5cbiAgZWRpdElkOiAoaWQpIC0+XG4gICAgaWQgPSBVdGlscy5jbGVhblVSTCBpZFxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBZG1pbjogLT5cbiAgICAgICAgYXNzZXNzbWVudCA9IG5ldyBBc3Nlc3NtZW50XG4gICAgICAgICAgX2lkOiBpZFxuICAgICAgICBhc3Nlc3NtZW50LnN1cGVyRmV0Y2hcbiAgICAgICAgICBzdWNjZXNzIDogKCBtb2RlbCApIC0+XG4gICAgICAgICAgICB2aWV3ID0gbmV3IEFzc2Vzc21lbnRFZGl0VmlldyBtb2RlbDogbW9kZWxcbiAgICAgICAgICAgIHZtLnNob3cgdmlld1xuICAgICAgaXNVc2VyOiAtPlxuICAgICAgICBUYW5nZXJpbmUucm91dGVyLmxhbmRpbmcoKVxuXG5cbiAgZWRpdDogKGlkKSAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBZG1pbjogLT5cbiAgICAgICAgYXNzZXNzbWVudCA9IG5ldyBBc3Nlc3NtZW50XG4gICAgICAgICAgXCJfaWRcIiA6IGlkXG4gICAgICAgIGFzc2Vzc21lbnQuZmV0Y2hcbiAgICAgICAgICBzdWNjZXNzIDogKCBtb2RlbCApIC0+XG4gICAgICAgICAgICB2aWV3ID0gbmV3IEFzc2Vzc21lbnRFZGl0VmlldyBtb2RlbDogbW9kZWxcbiAgICAgICAgICAgIHZtLnNob3cgdmlld1xuICAgICAgaXNVc2VyOiAtPlxuICAgICAgICBUYW5nZXJpbmUucm91dGVyLmxhbmRpbmcoKVxuXG4gIHJlc3RhcnQ6IChuYW1lKSAtPlxuICAgIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUgXCJydW4vI3tuYW1lfVwiLCB0cnVlXG5cbiMgIFdpZGdldFJ1blZpZXcgdGFrZXMgYSBsaXN0IG9mIHN1YnRlc3RzIGFuZCB0aGUgYXNzZXNzbWVudC5cbiAgcnVuOiAoaWQpIC0+XG4gICAgVGFuZ2VyaW5lLnVzZXIudmVyaWZ5XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IC0+XG4gICAgICAgIGRLZXkgPSBKU09OLnN0cmluZ2lmeShpZC5zdWJzdHIoLTUsIDUpKVxuICAgICAgICB1cmwgPSBUYW5nZXJpbmUuc2V0dGluZ3MudXJsVmlldyhcImdyb3VwXCIsIFwiYnlES2V5XCIpXG4gICAgICAgICQuYWpheFxuICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgIHR5cGU6IFwiR0VUXCJcbiAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCJcbiAgICAgICAgICBkYXRhOiBrZXk6IGRLZXlcbiAgICAgICAgICBlcnJvcjogKGEsIGIpID0+IEB0cmlnZ2VyIFwic3RhdHVzXCIsIFwiaW1wb3J0IGVycm9yXCIsIFwiI3thfSAje2J9XCJcbiAgICAgICAgICBzdWNjZXNzOiAoZGF0YSkgPT5cbiAgICAgICAgICAgIGRvY0xpc3QgPSBbXCJsb2NhdGlvbi1saXN0XCJdXG4gICAgICAgICAgICBmb3IgZGF0dW0gaW4gZGF0YS5yb3dzXG4gICAgICAgICAgICAgIGRvY0xpc3QucHVzaCBkYXR1bS5pZFxuICAgICAgICAgICAga2V5TGlzdCA9IF8udW5pcShkb2NMaXN0KVxuICAgICAgICAgICAgVGFuZ2VyaW5lLiRkYi5hbGxEb2NzXG4gICAgICAgICAgICAgIGtleXMgOiBrZXlMaXN0XG4gICAgICAgICAgICAgIGluY2x1ZGVfZG9jczp0cnVlXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IChyZXNwb25zZSkgLT5cbiAgICAgICAgICAgICAgICBkb2NzID0gW11cbiAgICAgICAgICAgICAgICBmb3Igcm93IGluIHJlc3BvbnNlLnJvd3NcbiAgICAgICAgICAgICAgICAgIGRvY3MucHVzaCByb3cuZG9jXG4jICAgICAgICAgICAgICAgIGJvZHkgPVxuIyAgICAgICAgICAgICAgICAgIGRvY3M6IGRvY3NcbiAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IFdpZGdldFJ1blZpZXcgbW9kZWw6IGRvY3NcbiAgICAgICAgICAgICAgICB2bS5zaG93IHZpZXdcblxuICBwcmludDogKCBhc3Nlc3NtZW50SWQsIGZvcm1hdCApIC0+XG4gICAgVGFuZ2VyaW5lLnVzZXIudmVyaWZ5XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IC0+XG4gICAgICAgIGFzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudFxuICAgICAgICAgIFwiX2lkXCIgOiBhc3Nlc3NtZW50SWRcbiAgICAgICAgYXNzZXNzbWVudC5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3MgOiAoIG1vZGVsICkgLT5cbiAgICAgICAgICAgIHZpZXcgPSBuZXcgQXNzZXNzbWVudFByaW50Vmlld1xuICAgICAgICAgICAgICBtb2RlbCAgOiBtb2RlbFxuICAgICAgICAgICAgICBmb3JtYXQgOiBmb3JtYXRcbiAgICAgICAgICAgIHZtLnNob3cgdmlld1xuXG4gIHJlc3VtZTogKGFzc2Vzc21lbnRJZCwgcmVzdWx0SWQpIC0+XG4gICAgVGFuZ2VyaW5lLnVzZXIudmVyaWZ5XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IC0+XG4gICAgICAgIGFzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudFxuICAgICAgICAgIFwiX2lkXCIgOiBhc3Nlc3NtZW50SWRcbiAgICAgICAgYXNzZXNzbWVudC5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3MgOiAoIGFzc2Vzc21lbnQgKSAtPlxuICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFJlc3VsdFxuICAgICAgICAgICAgICBcIl9pZFwiIDogcmVzdWx0SWRcbiAgICAgICAgICAgIHJlc3VsdC5mZXRjaFxuICAgICAgICAgICAgICBzdWNjZXNzOiAocmVzdWx0KSAtPlxuICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgQXNzZXNzbWVudFJ1blZpZXdcbiAgICAgICAgICAgICAgICAgIG1vZGVsOiBhc3Nlc3NtZW50XG5cbiAgICAgICAgICAgICAgICBpZiByZXN1bHQuaGFzKFwib3JkZXJfbWFwXCIpXG4gICAgICAgICAgICAgICAgICAjIHNhdmUgdGhlIG9yZGVyIG1hcCBvZiBwcmV2aW91cyByYW5kb21pemF0aW9uXG4gICAgICAgICAgICAgICAgICBvcmRlck1hcCA9IHJlc3VsdC5nZXQoXCJvcmRlcl9tYXBcIikuc2xpY2UoKSAjIGNsb25lIGFycmF5XG4gICAgICAgICAgICAgICAgICAjIHJlc3RvcmUgdGhlIHByZXZpb3VzIG9yZGVybWFwXG4gICAgICAgICAgICAgICAgICB2aWV3Lm9yZGVyTWFwID0gb3JkZXJNYXBcblxuICAgICAgICAgICAgICAgIGZvciBzdWJ0ZXN0IGluIHJlc3VsdC5nZXQoXCJzdWJ0ZXN0RGF0YVwiKVxuICAgICAgICAgICAgICAgICAgaWYgc3VidGVzdC5kYXRhPyAmJiBzdWJ0ZXN0LmRhdGEucGFydGljaXBhbnRfaWQ/XG4gICAgICAgICAgICAgICAgICAgIFRhbmdlcmluZS5uYXYuc2V0U3R1ZGVudCBzdWJ0ZXN0LmRhdGEucGFydGljaXBhbnRfaWRcblxuICAgICAgICAgICAgICAgICMgcmVwbGFjZSB0aGUgdmlldydzIHJlc3VsdCB3aXRoIG91ciBvbGQgb25lXG4gICAgICAgICAgICAgICAgdmlldy5yZXN1bHQgPSByZXN1bHRcblxuICAgICAgICAgICAgICAgICMgSGlqYWNrIHRoZSBub3JtYWwgUmVzdWx0IGFuZCBSZXN1bHRWaWV3LCB1c2Ugb25lIGZyb20gdGhlIGRiXG4gICAgICAgICAgICAgICAgdmlldy5zdWJ0ZXN0Vmlld3MucG9wKClcbiAgICAgICAgICAgICAgICB2aWV3LnN1YnRlc3RWaWV3cy5wdXNoIG5ldyBSZXN1bHRWaWV3XG4gICAgICAgICAgICAgICAgICBtb2RlbCAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICAgICAgICAgYXNzZXNzbWVudCAgICAgOiBhc3Nlc3NtZW50XG4gICAgICAgICAgICAgICAgICBhc3Nlc3NtZW50VmlldyA6IHZpZXdcbiAgICAgICAgICAgICAgICB2aWV3LmluZGV4ID0gcmVzdWx0LmdldChcInN1YnRlc3REYXRhXCIpLmxlbmd0aFxuICAgICAgICAgICAgICAgIHZtLnNob3cgdmlld1xuXG5cblxuICByZXN1bHRzOiAoYXNzZXNzbWVudElkKSAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBdXRoZW50aWNhdGVkOiAtPlxuICAgICAgICBhZnRlckZldGNoID0gKGFzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudChcIl9pZFwiOmFzc2Vzc21lbnRJZCksIGFzc2Vzc21lbnRJZCkgLT5cbiAgICAgICAgICBhbGxSZXN1bHRzID0gbmV3IFJlc3VsdHNcbiAgICAgICAgICBhbGxSZXN1bHRzLmZldGNoXG4gICAgICAgICAgICBpbmNsdWRlX2RvY3M6IGZhbHNlXG4gICAgICAgICAgICBrZXk6IFwiclwiICsgYXNzZXNzbWVudElkXG4gICAgICAgICAgICBzdWNjZXNzOiAocmVzdWx0cykgPT5cbiAgICAgICAgICAgICAgdmlldyA9IG5ldyBSZXN1bHRzVmlld1xuICAgICAgICAgICAgICAgIFwiYXNzZXNzbWVudFwiIDogYXNzZXNzbWVudFxuICAgICAgICAgICAgICAgIFwicmVzdWx0c1wiICAgIDogcmVzdWx0cy5tb2RlbHNcbiAgICAgICAgICAgICAgdm0uc2hvdyB2aWV3XG5cbiAgICAgICAgYXNzZXNzbWVudCA9IG5ldyBBc3Nlc3NtZW50XG4gICAgICAgICAgXCJfaWRcIiA6IGFzc2Vzc21lbnRJZFxuICAgICAgICBhc3Nlc3NtZW50LmZldGNoXG4gICAgICAgICAgc3VjY2VzcyA6ICAtPlxuICAgICAgICAgICAgYWZ0ZXJGZXRjaChhc3Nlc3NtZW50LCBhc3Nlc3NtZW50SWQpXG4gICAgICAgICAgZXJyb3IgOiAgLT5cbiAgICAgICAgICAgIGFmdGVyRmV0Y2goYXNzZXNzbWVudCwgYXNzZXNzbWVudElkKVxuXG5cbiAgI1xuICAjIFJlcG9ydHNcbiAgI1xuICBrbGFzc0dyb3VwaW5nOiAoa2xhc3NJZCwgcGFydCkgLT5cbiAgICBwYXJ0ID0gcGFyc2VJbnQocGFydClcbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQXV0aGVudGljYXRlZDogLT5cbiAgICAgICAgICBhbGxTdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0c1xuICAgICAgICAgIGFsbFN1YnRlc3RzLmZldGNoXG4gICAgICAgICAgICBzdWNjZXNzOiAoIGNvbGxlY3Rpb24gKSAtPlxuICAgICAgICAgICAgICBzdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0cyBjb2xsZWN0aW9uLndoZXJlIFwicGFydFwiIDogcGFydFxuICAgICAgICAgICAgICBhbGxSZXN1bHRzID0gbmV3IEtsYXNzUmVzdWx0c1xuICAgICAgICAgICAgICBhbGxSZXN1bHRzLmZldGNoXG4gICAgICAgICAgICAgICAgc3VjY2VzczogKCByZXN1bHRzICkgLT5cbiAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBuZXcgS2xhc3NSZXN1bHRzIHJlc3VsdHMud2hlcmUgXCJrbGFzc0lkXCIgOiBrbGFzc0lkXG4gICAgICAgICAgICAgICAgICBzdHVkZW50cyA9IG5ldyBTdHVkZW50c1xuICAgICAgICAgICAgICAgICAgc3R1ZGVudHMuZmV0Y2hcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogLT5cblxuICAgICAgICAgICAgICAgICAgICAgICMgZmlsdGVyIGBSZXN1bHRzYCBieSBgS2xhc3NgJ3MgY3VycmVudCBgU3R1ZGVudHNgXG4gICAgICAgICAgICAgICAgICAgICAgc3R1ZGVudHMgPSBuZXcgU3R1ZGVudHMgc3R1ZGVudHMud2hlcmUgXCJrbGFzc0lkXCIgOiBrbGFzc0lkXG4gICAgICAgICAgICAgICAgICAgICAgc3R1ZGVudElkcyA9IHN0dWRlbnRzLnBsdWNrKFwiX2lkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c0Zyb21DdXJyZW50U3R1ZGVudHMgPSBbXVxuICAgICAgICAgICAgICAgICAgICAgIGZvciByZXN1bHQgaW4gcmVzdWx0cy5tb2RlbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHNGcm9tQ3VycmVudFN0dWRlbnRzLnB1c2gocmVzdWx0KSBpZiByZXN1bHQuZ2V0KFwic3R1ZGVudElkXCIpIGluIHN0dWRlbnRJZHNcbiAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZFJlc3VsdHMgPSBuZXcgS2xhc3NSZXN1bHRzIHJlc3VsdHNGcm9tQ3VycmVudFN0dWRlbnRzXG5cbiAgICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IEtsYXNzR3JvdXBpbmdWaWV3XG4gICAgICAgICAgICAgICAgICAgICAgICBcInN0dWRlbnRzXCIgOiBzdHVkZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdWJ0ZXN0c1wiIDogc3VidGVzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicmVzdWx0c1wiICA6IGZpbHRlcmVkUmVzdWx0c1xuICAgICAgICAgICAgICAgICAgICAgIHZtLnNob3cgdmlld1xuXG4gIG1hc3RlcnlDaGVjazogKHN0dWRlbnRJZCkgLT5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQXV0aGVudGljYXRlZDogLT5cbiAgICAgICAgc3R1ZGVudCA9IG5ldyBTdHVkZW50IFwiX2lkXCIgOiBzdHVkZW50SWRcbiAgICAgICAgc3R1ZGVudC5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3M6IChzdHVkZW50KSAtPlxuICAgICAgICAgICAga2xhc3NJZCA9IHN0dWRlbnQuZ2V0IFwia2xhc3NJZFwiXG4gICAgICAgICAgICBrbGFzcyA9IG5ldyBLbGFzcyBcIl9pZFwiIDogc3R1ZGVudC5nZXQgXCJrbGFzc0lkXCJcbiAgICAgICAgICAgIGtsYXNzLmZldGNoXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IChrbGFzcykgLT5cbiAgICAgICAgICAgICAgICBhbGxSZXN1bHRzID0gbmV3IEtsYXNzUmVzdWx0c1xuICAgICAgICAgICAgICAgIGFsbFJlc3VsdHMuZmV0Y2hcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ICggY29sbGVjdGlvbiApIC0+XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBuZXcgS2xhc3NSZXN1bHRzIGNvbGxlY3Rpb24ud2hlcmUgXCJzdHVkZW50SWRcIiA6IHN0dWRlbnRJZCwgXCJyZXBvcnRUeXBlXCIgOiBcIm1hc3RlcnlcIiwgXCJrbGFzc0lkXCIgOiBrbGFzc0lkXG4gICAgICAgICAgICAgICAgICAgICMgZ2V0IGEgbGlzdCBvZiBzdWJ0ZXN0cyBpbnZvbHZlZFxuICAgICAgICAgICAgICAgICAgICBzdWJ0ZXN0SWRMaXN0ID0ge31cbiAgICAgICAgICAgICAgICAgICAgc3VidGVzdElkTGlzdFtyZXN1bHQuZ2V0KFwic3VidGVzdElkXCIpXSA9IHRydWUgZm9yIHJlc3VsdCBpbiByZXN1bHRzLm1vZGVsc1xuICAgICAgICAgICAgICAgICAgICBzdWJ0ZXN0SWRMaXN0ID0gXy5rZXlzKHN1YnRlc3RJZExpc3QpXG5cbiAgICAgICAgICAgICAgICAgICAgIyBtYWtlIGEgY29sbGVjdGlvbiBhbmQgZmV0Y2hcbiAgICAgICAgICAgICAgICAgICAgc3VidGVzdENvbGxlY3Rpb24gPSBuZXcgU3VidGVzdHNcbiAgICAgICAgICAgICAgICAgICAgc3VidGVzdENvbGxlY3Rpb24uYWRkIG5ldyBTdWJ0ZXN0KFwiX2lkXCIgOiBzdWJ0ZXN0SWQpIGZvciBzdWJ0ZXN0SWQgaW4gc3VidGVzdElkTGlzdFxuICAgICAgICAgICAgICAgICAgICBzdWJ0ZXN0Q29sbGVjdGlvbi5mZXRjaFxuICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IE1hc3RlcnlDaGVja1ZpZXdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHVkZW50XCIgIDogc3R1ZGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlc3VsdHNcIiAgOiByZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwia2xhc3NcIiAgICA6IGtsYXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwic3VidGVzdHNcIiA6IHN1YnRlc3RDb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5zaG93IHZpZXdcblxuICBwcm9ncmVzc1JlcG9ydDogKHN0dWRlbnRJZCwga2xhc3NJZCkgLT5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQXV0aGVudGljYXRlZDogLT5cbiAgICAgICAgIyBzYXZlIHRoaXMgY3JhenkgZnVuY3Rpb24gZm9yIGxhdGVyXG4gICAgICAgICMgc3R1ZGVudElkIGNhbiBoYXZlIHRoZSB2YWx1ZSBcImFsbFwiLCBpbiB3aGljaCBjYXNlIHN0dWRlbnQgc2hvdWxkID09IG51bGxcbiAgICAgICAgYWZ0ZXJGZXRjaCA9ICggc3R1ZGVudCwgc3R1ZGVudHMgKSAtPlxuICAgICAgICAgIGtsYXNzID0gbmV3IEtsYXNzIFwiX2lkXCIgOiBrbGFzc0lkXG4gICAgICAgICAga2xhc3MuZmV0Y2hcbiAgICAgICAgICAgIHN1Y2Nlc3M6IChrbGFzcykgLT5cbiAgICAgICAgICAgICAgYWxsU3VidGVzdHMgPSBuZXcgU3VidGVzdHNcbiAgICAgICAgICAgICAgYWxsU3VidGVzdHMuZmV0Y2hcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAoIGFsbFN1YnRlc3RzICkgLT5cbiAgICAgICAgICAgICAgICAgIHN1YnRlc3RzID0gbmV3IFN1YnRlc3RzIGFsbFN1YnRlc3RzLndoZXJlXG4gICAgICAgICAgICAgICAgICAgIFwiY3VycmljdWx1bUlkXCIgOiBrbGFzcy5nZXQoXCJjdXJyaWN1bHVtSWRcIilcbiAgICAgICAgICAgICAgICAgICAgXCJyZXBvcnRUeXBlXCIgICA6IFwicHJvZ3Jlc3NcIlxuICAgICAgICAgICAgICAgICAgYWxsUmVzdWx0cyA9IG5ldyBLbGFzc1Jlc3VsdHNcbiAgICAgICAgICAgICAgICAgIGFsbFJlc3VsdHMuZmV0Y2hcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogKCBjb2xsZWN0aW9uICkgLT5cbiAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzID0gbmV3IEtsYXNzUmVzdWx0cyBjb2xsZWN0aW9uLndoZXJlIFwia2xhc3NJZFwiIDoga2xhc3NJZCwgXCJyZXBvcnRUeXBlXCIgOiBcInByb2dyZXNzXCJcblxuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIHN0dWRlbnRzXG4gICAgICAgICAgICAgICAgICAgICAgaWYgc3R1ZGVudHM/XG4gICAgICAgICAgICAgICAgICAgICAgICAjIGZpbHRlciBgUmVzdWx0c2AgYnkgYEtsYXNzYCdzIGN1cnJlbnQgYFN0dWRlbnRzYFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R1ZGVudElkcyA9IHN0dWRlbnRzLnBsdWNrKFwiX2lkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzRnJvbUN1cnJlbnRTdHVkZW50cyA9IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgcmVzdWx0IGluIHJlc3VsdHMubW9kZWxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHNGcm9tQ3VycmVudFN0dWRlbnRzLnB1c2gocmVzdWx0KSBpZiByZXN1bHQuZ2V0KFwic3R1ZGVudElkXCIpIGluIHN0dWRlbnRJZHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBuZXcgS2xhc3NSZXN1bHRzIHJlc3VsdHNGcm9tQ3VycmVudFN0dWRlbnRzXG5cbiAgICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IFByb2dyZXNzVmlld1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdWJ0ZXN0c1wiIDogc3VidGVzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3R1ZGVudFwiICA6IHN0dWRlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicmVzdWx0c1wiICA6IHJlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIFwia2xhc3NcIiAgICA6IGtsYXNzXG4gICAgICAgICAgICAgICAgICAgICAgdm0uc2hvdyB2aWV3XG5cbiAgICAgICAgaWYgc3R1ZGVudElkICE9IFwiYWxsXCJcbiAgICAgICAgICBzdHVkZW50ID0gbmV3IFN0dWRlbnQgXCJfaWRcIiA6IHN0dWRlbnRJZFxuICAgICAgICAgIHN0dWRlbnQuZmV0Y2hcbiAgICAgICAgICAgIHN1Y2Nlc3M6IC0+IGFmdGVyRmV0Y2ggc3R1ZGVudFxuICAgICAgICBlbHNlXG4gICAgICAgICAgc3R1ZGVudHMgPSBuZXcgU3R1ZGVudHNcbiAgICAgICAgICBzdHVkZW50cy5mZXRjaFxuICAgICAgICAgICAgc3VjY2VzczogLT4gYWZ0ZXJGZXRjaCBudWxsLCBzdHVkZW50c1xuXG4gICNcbiAgIyBTdWJ0ZXN0c1xuICAjXG4gIGVkaXRTdWJ0ZXN0OiAoaWQpIC0+XG4gICAgVGFuZ2VyaW5lLnVzZXIudmVyaWZ5XG4gICAgICBpc0FkbWluOiAtPlxuICAgICAgICBpZCA9IFV0aWxzLmNsZWFuVVJMIGlkXG4gICAgICAgIHN1YnRlc3QgPSBuZXcgU3VidGVzdCBfaWQgOiBpZFxuICAgICAgICBzdWJ0ZXN0LmZldGNoXG4gICAgICAgICAgc3VjY2VzczogKG1vZGVsLCByZXNwb25zZSkgLT5cbiAgICAgICAgICAgIGFzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudFxuICAgICAgICAgICAgICBcIl9pZFwiIDogc3VidGVzdC5nZXQoXCJhc3Nlc3NtZW50SWRcIilcbiAgICAgICAgICAgIGFzc2Vzc21lbnQuZmV0Y2hcbiAgICAgICAgICAgICAgc3VjY2VzczogLT5cblxuICAgICAgICAgICAgICAgICMgQHRvZG8gVGhlIGZpcnN0IGF0dGVtcHQgYXQgZmV0Y2hpbmcgc3VidGVzdHMgbmV2ZXIgaGl0cyBpdHMgc3VjY2VzcyBjYWxsYmFjay4gRGVidWdnaW5nIHRoaXMgaXQncyBub3QgY2xlYXIgd2h5IHRoaXMgaXMgdGhlIGNhc2UuIFxuICAgICAgICAgICAgICAgICMgVGhpcyBzZWNvbmQgdHJ5IGRvZXMgaG93ZXZlciB3b3JrLiBJZiB0aGUgZmlyc3Qgb25lIGRvZXMgc3RhcnQgd29ya2luZyBhZ2FpbiwgdGhpcyBzZWNvbmQgdHJ5IHNob3VsZCBub3QgYWZmZWN0IHRoZSBvdmVyYWxsIHN0YXRlXG4gICAgICAgICAgICAgICAgIyBvZiB0aGUgYXBwbGljYXRpb24uXG4gICAgICAgICAgICAgICAgc3VidGVzdHNQcmltZVRoZVB1bXAgPSBuZXcgU3VidGVzdHNcbiAgICAgICAgICAgICAgICBzdWJ0ZXN0c1ByaW1lVGhlUHVtcC5mZXRjaFxuICAgICAgICAgICAgICAgICAga2V5OiBcInNcIiArIGFzc2Vzc21lbnQuaWRcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIFwiU3VidGVzdHNQcmltZVRoZVB1bXAgc3VjY2VzcyBjYWxsYmFjayBjYWxsZWRcIlxuICAgICAgICAgICAgICAgICAgZXJyb3I6IC0+XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nIFwiU3VidGVzdHNQcmltZVRoZVB1bXAgZXJyb3IgY2FsbGJhY2sgY2FsbGVkXCJcbiAgICAgICAgICAgICAgICBzdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0cyBcbiAgICAgICAgICAgICAgICBzdWJ0ZXN0cy5mZXRjaFxuICAgICAgICAgICAgICAgICAga2V5OiBcInNcIiArIGFzc2Vzc21lbnQuaWRcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IChjb2xsZWN0aW9uKSA9PlxuICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IFN1YnRlc3RFZGl0Vmlld1xuICAgICAgICAgICAgICAgICAgICAgIG1vZGVsICAgICAgOiBtb2RlbFxuICAgICAgICAgICAgICAgICAgICAgIHN1YnRlc3RzICAgOiBzdWJ0ZXN0cyBcbiAgICAgICAgICAgICAgICAgICAgICBhc3Nlc3NtZW50IDogYXNzZXNzbWVudFxuICAgICAgICAgICAgICAgICAgICB2bS5zaG93IHZpZXdcblxuICAgICAgaXNVc2VyOiAtPlxuICAgICAgICBUYW5nZXJpbmUucm91dGVyLmxhbmRpbmcoKVxuXG4gIGVkaXRLbGFzc1N1YnRlc3Q6IChpZCkgLT5cblxuICAgIG9uU3VjY2VzcyA9IChzdWJ0ZXN0LCBjdXJyaWN1bHVtLCBxdWVzdGlvbnM9bnVsbCkgLT5cbiAgICAgIHZpZXcgPSBuZXcgS2xhc3NTdWJ0ZXN0RWRpdFZpZXdcbiAgICAgICAgbW9kZWwgICAgICA6IHN1YnRlc3RcbiAgICAgICAgY3VycmljdWx1bSA6IGN1cnJpY3VsdW1cbiAgICAgICAgcXVlc3Rpb25zICA6IHF1ZXN0aW9uc1xuICAgICAgdm0uc2hvdyB2aWV3XG5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQWRtaW46IC0+XG4gICAgICAgIGlkID0gVXRpbHMuY2xlYW5VUkwgaWRcbiAgICAgICAgc3VidGVzdCA9IG5ldyBTdWJ0ZXN0IF9pZCA6IGlkXG4gICAgICAgIHN1YnRlc3QuZmV0Y2hcbiAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgY3VycmljdWx1bSA9IG5ldyBDdXJyaWN1bHVtXG4gICAgICAgICAgICAgIFwiX2lkXCIgOiBzdWJ0ZXN0LmdldChcImN1cnJpY3VsdW1JZFwiKVxuICAgICAgICAgICAgY3VycmljdWx1bS5mZXRjaFxuICAgICAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgICAgIGlmIHN1YnRlc3QuZ2V0KFwicHJvdG90eXBlXCIpID09IFwic3VydmV5XCJcbiAgICAgICAgICAgICAgICAgIHF1ZXN0aW9ucyA9IG5ldyBRdWVzdGlvbnNcbiAgICAgICAgICAgICAgICAgIHF1ZXN0aW9ucy5mZXRjaFxuICAgICAgICAgICAgICAgICAgICBrZXkgOiBjdXJyaWN1bHVtLmlkXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9ucyBxdWVzdGlvbnMud2hlcmUoXCJzdWJ0ZXN0SWRcIjpzdWJ0ZXN0LmlkKVxuICAgICAgICAgICAgICAgICAgICAgIG9uU3VjY2VzcyBzdWJ0ZXN0LCBjdXJyaWN1bHVtLCBxdWVzdGlvbnNcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICBvblN1Y2Nlc3Mgc3VidGVzdCwgY3VycmljdWx1bVxuICAgICAgaXNVc2VyOiAtPlxuICAgICAgICBUYW5nZXJpbmUucm91dGVyLmxhbmRpbmcoKVxuXG5cbiAgI1xuICAjIFF1ZXN0aW9uXG4gICNcbiAgZWRpdFF1ZXN0aW9uOiAoaWQpIC0+XG4gICAgVGFuZ2VyaW5lLnVzZXIudmVyaWZ5XG4gICAgICBpc0FkbWluOiAtPlxuICAgICAgICBpZCA9IFV0aWxzLmNsZWFuVVJMIGlkXG4gICAgICAgIHF1ZXN0aW9uID0gbmV3IFF1ZXN0aW9uIF9pZCA6IGlkXG4gICAgICAgIHF1ZXN0aW9uLmZldGNoXG4gICAgICAgICAgc3VjY2VzczogKHF1ZXN0aW9uLCByZXNwb25zZSkgLT5cbiAgICAgICAgICAgIGFzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudFxuICAgICAgICAgICAgICBcIl9pZFwiIDogcXVlc3Rpb24uZ2V0KFwiYXNzZXNzbWVudElkXCIpXG4gICAgICAgICAgICBhc3Nlc3NtZW50LmZldGNoXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICAgICAgc3VidGVzdCA9IG5ldyBTdWJ0ZXN0XG4gICAgICAgICAgICAgICAgICBcIl9pZFwiIDogcXVlc3Rpb24uZ2V0KFwic3VidGVzdElkXCIpXG4gICAgICAgICAgICAgICAgc3VidGVzdC5mZXRjaFxuICAgICAgICAgICAgICAgICAgc3VjY2VzczogLT5cbiAgICAgICAgICAgICAgICAgICAgdmlldyA9IG5ldyBRdWVzdGlvbkVkaXRWaWV3XG4gICAgICAgICAgICAgICAgICAgICAgXCJxdWVzdGlvblwiICAgOiBxdWVzdGlvblxuICAgICAgICAgICAgICAgICAgICAgIFwic3VidGVzdFwiICAgIDogc3VidGVzdFxuICAgICAgICAgICAgICAgICAgICAgIFwiYXNzZXNzbWVudFwiIDogYXNzZXNzbWVudFxuICAgICAgICAgICAgICAgICAgICB2bS5zaG93IHZpZXdcbiAgICAgIGlzVXNlcjogLT5cbiAgICAgICAgVGFuZ2VyaW5lLnJvdXRlci5sYW5kaW5nKClcblxuXG4gIGVkaXRLbGFzc1F1ZXN0aW9uOiAoaWQpIC0+XG4gICAgVGFuZ2VyaW5lLnVzZXIudmVyaWZ5XG4gICAgICBpc0FkbWluOiAtPlxuICAgICAgICBpZCA9IFV0aWxzLmNsZWFuVVJMIGlkXG4gICAgICAgIHF1ZXN0aW9uID0gbmV3IFF1ZXN0aW9uIFwiX2lkXCIgOiBpZFxuICAgICAgICBxdWVzdGlvbi5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3M6IChxdWVzdGlvbiwgcmVzcG9uc2UpIC0+XG4gICAgICAgICAgICBjdXJyaWN1bHVtID0gbmV3IEN1cnJpY3VsdW1cbiAgICAgICAgICAgICAgXCJfaWRcIiA6IHF1ZXN0aW9uLmdldChcImN1cnJpY3VsdW1JZFwiKVxuICAgICAgICAgICAgY3VycmljdWx1bS5mZXRjaFxuICAgICAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgICAgIHN1YnRlc3QgPSBuZXcgU3VidGVzdFxuICAgICAgICAgICAgICAgICAgXCJfaWRcIiA6IHF1ZXN0aW9uLmdldChcInN1YnRlc3RJZFwiKVxuICAgICAgICAgICAgICAgIHN1YnRlc3QuZmV0Y2hcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgUXVlc3Rpb25FZGl0Vmlld1xuICAgICAgICAgICAgICAgICAgICAgIFwicXVlc3Rpb25cIiAgIDogcXVlc3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICBcInN1YnRlc3RcIiAgICA6IHN1YnRlc3RcbiAgICAgICAgICAgICAgICAgICAgICBcImFzc2Vzc21lbnRcIiA6IGN1cnJpY3VsdW1cbiAgICAgICAgICAgICAgICAgICAgdm0uc2hvdyB2aWV3XG5cblxuICAjXG4gICMgVXNlclxuICAjXG4gIGxvZ2luOiAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBdXRoZW50aWNhdGVkOiAtPlxuICAgICAgICBUYW5nZXJpbmUucm91dGVyLmxhbmRpbmcoKVxuICAgICAgaXNVbnJlZ2lzdGVyZWQ6IC0+XG5cbiAgICAgICAgc2hvd1ZpZXcgPSAodXNlcnMgPSBbXSkgLT5cbiAgICAgICAgICB2aWV3ID0gbmV3IExvZ2luVmlld1xuICAgICAgICAgICAgdXNlcnM6IHVzZXJzXG4gICAgICAgICAgdm0uc2hvdyB2aWV3XG5cbiAgICAgICAgc2hvd1ZpZXcoKVxuXG4gIGxvZ291dDogLT5cbiAgICBUYW5nZXJpbmUudXNlci5sb2dvdXQoKVxuXG4gIGFjY291bnQ6IC0+XG4gICAgIyBjaGFuZ2UgdGhlIGxvY2F0aW9uIHRvIHRoZSB0cnVuaywgdW5sZXNzIHdlJ3JlIGFscmVhZHkgaW4gdGhlIHRydW5rXG4gICAgaWYgVGFuZ2VyaW5lLmRiX25hbWUgIT0gXCJ0YW5nZXJpbmVcIlxuICAgICAgd2luZG93LmxvY2F0aW9uID0gVGFuZ2VyaW5lLnNldHRpbmdzLnVybEluZGV4KFwidHJ1bmtcIiwgXCJhY2NvdW50XCIpXG4gICAgZWxzZVxuICAgICAgVGFuZ2VyaW5lLnVzZXIudmVyaWZ5XG4gICAgICAgIGlzQXV0aGVudGljYXRlZDogLT5cbiAgICAgICAgICB2aWV3ID0gbmV3IEFjY291bnRWaWV3XG4gICAgICAgICAgICB1c2VyIDogVGFuZ2VyaW5lLnVzZXJcbiAgICAgICAgICB2bS5zaG93IHZpZXdcblxuICBzZXR0aW5nczogLT5cbiAgICBUYW5nZXJpbmUudXNlci52ZXJpZnlcbiAgICAgIGlzQXV0aGVudGljYXRlZDogLT5cbiAgICAgICAgdmlldyA9IG5ldyBTZXR0aW5nc1ZpZXdcbiAgICAgICAgdm0uc2hvdyB2aWV3XG5cblxuICBsb2dzOiAtPlxuICAgIFRhbmdlcmluZS51c2VyLnZlcmlmeVxuICAgICAgaXNBdXRoZW50aWNhdGVkOiAtPlxuICAgICAgICBsb2dzID0gbmV3IExvZ3NcbiAgICAgICAgbG9ncy5mZXRjaFxuICAgICAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgICAgICB2aWV3ID0gbmV3IExvZ1ZpZXdcbiAgICAgICAgICAgICAgbG9nczogbG9nc1xuICAgICAgICAgICAgdm0uc2hvdyB2aWV3XG5cblxuXG5cbiAgIyBUcmFuc2ZlciBhIG5ldyB1c2VyIGZyb20gdGFuZ2VyaW5lLWNlbnRyYWwgaW50byB0YW5nZXJpbmVcbiAgdHJhbnNmZXI6IC0+XG4gICAgZ2V0VmFycyA9IFV0aWxzLiRfR0VUKClcbiAgICBuYW1lID0gZ2V0VmFycy5uYW1lXG4gICAgJC5jb3VjaC5sb2dvdXRcbiAgICAgIHN1Y2Nlc3M6ID0+XG4gICAgICAgICQuY29va2llIFwiQXV0aFNlc3Npb25cIiwgbnVsbFxuICAgICAgICAkLmNvdWNoLmxvZ2luXG4gICAgICAgICAgXCJuYW1lXCIgICAgIDogbmFtZVxuICAgICAgICAgIFwicGFzc3dvcmRcIiA6IG5hbWVcbiAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgVGFuZ2VyaW5lLnJvdXRlci5sYW5kaW5nKClcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKVxuICAgICAgICAgIGVycm9yOiAtPlxuICAgICAgICAgICAgJC5jb3VjaC5zaWdudXBcbiAgICAgICAgICAgICAgXCJuYW1lXCIgOiAgbmFtZVxuICAgICAgICAgICAgICBcInJvbGVzXCIgOiBbXCJfYWRtaW5cIl1cbiAgICAgICAgICAgICwgbmFtZSxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IC0+XG4gICAgICAgICAgICAgIHVzZXIgPSBuZXcgVXNlclxuICAgICAgICAgICAgICB1c2VyLnNhdmVcbiAgICAgICAgICAgICAgICBcIm5hbWVcIiAgOiBuYW1lXG4gICAgICAgICAgICAgICAgXCJpZFwiICAgIDogXCJ0YW5nZXJpbmUudXNlcjpcIituYW1lXG4gICAgICAgICAgICAgICAgXCJyb2xlc1wiIDogW11cbiAgICAgICAgICAgICAgICBcImZyb21cIiAgOiBcInRjXCJcbiAgICAgICAgICAgICAgLFxuICAgICAgICAgICAgICAgIHdhaXQ6IHRydWVcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAtPlxuICAgICAgICAgICAgICAgICAgJC5jb3VjaC5sb2dpblxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIiAgICAgOiBuYW1lXG4gICAgICAgICAgICAgICAgICAgIFwicGFzc3dvcmRcIiA6IG5hbWVcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IC0+XG4gICAgICAgICAgICAgICAgICAgICAgVGFuZ2VyaW5lLnJvdXRlci5sYW5kaW5nKClcbiAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKClcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IC0+XG4gICAgICAgICAgICAgICAgICAgICAgVXRpbHMuc3RpY2t5IFwiRXJyb3IgdHJhbnNmZXJpbmcgdXNlci5cIlxuIiwidmFyIFJvdXRlcixcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksXG4gIGluZGV4T2YgPSBbXS5pbmRleE9mIHx8IGZ1bmN0aW9uKGl0ZW0pIHsgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykgeyBpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHJldHVybiBpOyB9IHJldHVybiAtMTsgfTtcblxuUm91dGVyID0gKGZ1bmN0aW9uKHN1cGVyQ2xhc3MpIHtcbiAgZXh0ZW5kKFJvdXRlciwgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gUm91dGVyKCkge1xuICAgIHJldHVybiBSb3V0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBSb3V0ZXIucHJvdG90eXBlLmV4ZWN1dGUgPSBmdW5jdGlvbihjYWxsYmFjaywgYXJncywgbmFtZSkge1xuICAgICQoJyNmb290ZXInKS5zaG93KCk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucm91dGVzID0ge1xuICAgICd3b3JrZmxvdy9lZGl0Lzp3b3JrZmxvd0lkJzogJ3dvcmtmbG93RWRpdCcsXG4gICAgJ3dvcmtmbG93L3J1bi86d29ya2Zsb3dJZCc6ICd3b3JrZmxvd1J1bicsXG4gICAgJ3dvcmtmbG93L3Jlc3VtZS86d29ya2Zsb3dJZC86dHJpcElkJzogJ3dvcmtmbG93UmVzdW1lJyxcbiAgICAnZmVlZGJhY2svZWRpdC86d29ya2Zsb3dJZCc6ICdmZWVkYmFja0VkaXQnLFxuICAgICdmZWVkYmFjay86d29ya2Zsb3dJZCc6ICdmZWVkYmFjaycsXG4gICAgJ2xvZ2luJzogJ2xvZ2luJyxcbiAgICAncmVnaXN0ZXInOiAncmVnaXN0ZXInLFxuICAgICdsb2dvdXQnOiAnbG9nb3V0JyxcbiAgICAnYWNjb3VudCc6ICdhY2NvdW50JyxcbiAgICAndHJhbnNmZXInOiAndHJhbnNmZXInLFxuICAgICdzZXR0aW5ncyc6ICdzZXR0aW5ncycsXG4gICAgJ3VwZGF0ZSc6ICd1cGRhdGUnLFxuICAgICcnOiAnbGFuZGluZycsXG4gICAgJ2xvZ3MnOiAnbG9ncycsXG4gICAgJ2NsYXNzJzogJ2tsYXNzJyxcbiAgICAnY2xhc3MvZWRpdC86aWQnOiAna2xhc3NFZGl0JyxcbiAgICAnY2xhc3Mvc3R1ZGVudC86c3R1ZGVudElkJzogJ3N0dWRlbnRFZGl0JyxcbiAgICAnY2xhc3Mvc3R1ZGVudC9yZXBvcnQvOnN0dWRlbnRJZCc6ICdzdHVkZW50UmVwb3J0JyxcbiAgICAnY2xhc3Mvc3VidGVzdC86aWQnOiAnZWRpdEtsYXNzU3VidGVzdCcsXG4gICAgJ2NsYXNzL3F1ZXN0aW9uLzppZCc6IFwiZWRpdEtsYXNzUXVlc3Rpb25cIixcbiAgICAnY2xhc3MvOmlkLzpwYXJ0JzogJ2tsYXNzUGFydGx5JyxcbiAgICAnY2xhc3MvOmlkJzogJ2tsYXNzUGFydGx5JyxcbiAgICAnY2xhc3MvcnVuLzpzdHVkZW50SWQvOnN1YnRlc3RJZCc6ICdydW5TdWJ0ZXN0JyxcbiAgICAnY2xhc3MvcmVzdWx0L3N0dWRlbnQvc3VidGVzdC86c3R1ZGVudElkLzpzdWJ0ZXN0SWQnOiAnc3R1ZGVudFN1YnRlc3QnLFxuICAgICdjdXJyaWN1bGEnOiAnY3VycmljdWxhJyxcbiAgICAnY3VycmljdWx1bS86aWQnOiAnY3VycmljdWx1bScsXG4gICAgJ2N1cnJpY3VsdW1JbXBvcnQnOiAnY3VycmljdWx1bUltcG9ydCcsXG4gICAgJ3JlcG9ydC9rbGFzc0dyb3VwaW5nLzprbGFzc0lkLzpwYXJ0JzogJ2tsYXNzR3JvdXBpbmcnLFxuICAgICdyZXBvcnQvbWFzdGVyeUNoZWNrLzpzdHVkZW50SWQnOiAnbWFzdGVyeUNoZWNrJyxcbiAgICAncmVwb3J0L3Byb2dyZXNzLzpzdHVkZW50SWQvOmtsYXNzSWQnOiAncHJvZ3Jlc3NSZXBvcnQnLFxuICAgICdncm91cHMnOiAnZ3JvdXBzJyxcbiAgICAnYXNzZXNzbWVudHMnOiAnYXNzZXNzbWVudHMnLFxuICAgICdydW4vOmlkJzogJ3J1bicsXG4gICAgJ3ByaW50LzppZC86Zm9ybWF0JzogJ3ByaW50JyxcbiAgICAnZGF0YUVudHJ5LzppZCc6ICdkYXRhRW50cnknLFxuICAgICdyZXN1bWUvOmFzc2Vzc21lbnRJZC86cmVzdWx0SWQnOiAncmVzdW1lJyxcbiAgICAncmVzdGFydC86aWQnOiAncmVzdGFydCcsXG4gICAgJ2VkaXQvOmlkJzogJ2VkaXQnLFxuICAgICdyZXN1bHRzLzppZCc6ICdyZXN1bHRzJyxcbiAgICAnaW1wb3J0JzogJ2ltcG9ydCcsXG4gICAgJ3N1YnRlc3QvOmlkJzogJ2VkaXRTdWJ0ZXN0JyxcbiAgICAncXVlc3Rpb24vOmlkJzogJ2VkaXRRdWVzdGlvbicsXG4gICAgJ2Rhc2hib2FyZCc6ICdkYXNoYm9hcmQnLFxuICAgICdkYXNoYm9hcmQvKm9wdGlvbnMnOiAnZGFzaGJvYXJkJyxcbiAgICAnYWRtaW4nOiAnYWRtaW4nLFxuICAgICdzeW5jLzppZCc6ICdzeW5jJ1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuZmVlZGJhY2tFZGl0ID0gZnVuY3Rpb24od29ya2Zsb3dJZCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNob3dGZWVkYmFja0VkaXRvciwgd29ya2Zsb3c7XG4gICAgICAgIHNob3dGZWVkYmFja0VkaXRvciA9IGZ1bmN0aW9uKGZlZWRiYWNrLCB3b3JrZmxvdykge1xuICAgICAgICAgIHZhciB2aWV3O1xuICAgICAgICAgIGZlZWRiYWNrLnVwZGF0ZUNvbGxlY3Rpb24oKTtcbiAgICAgICAgICB2aWV3ID0gbmV3IEZlZWRiYWNrRWRpdFZpZXcoe1xuICAgICAgICAgICAgZmVlZGJhY2s6IGZlZWRiYWNrLFxuICAgICAgICAgICAgd29ya2Zsb3c6IHdvcmtmbG93XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHZtLnNob3codmlldyk7XG4gICAgICAgIH07XG4gICAgICAgIHdvcmtmbG93ID0gbmV3IFdvcmtmbG93KHtcbiAgICAgICAgICBcIl9pZFwiOiB3b3JrZmxvd0lkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gd29ya2Zsb3cuZmV0Y2goe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGZlZWRiYWNrLCBmZWVkYmFja0lkO1xuICAgICAgICAgICAgZmVlZGJhY2tJZCA9IHdvcmtmbG93SWQgKyBcIi1mZWVkYmFja1wiO1xuICAgICAgICAgICAgZmVlZGJhY2sgPSBuZXcgRmVlZGJhY2soe1xuICAgICAgICAgICAgICBcIl9pZFwiOiBmZWVkYmFja0lkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBmZWVkYmFjay5mZXRjaCh7XG4gICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmVlZGJhY2suc2F2ZShudWxsLCB7XG4gICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNob3dGZWVkYmFja0VkaXRvcihmZWVkYmFjaywgd29ya2Zsb3cpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2hvd0ZlZWRiYWNrRWRpdG9yKGZlZWRiYWNrLCB3b3JrZmxvdyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5mZWVkYmFjayA9IGZ1bmN0aW9uKHdvcmtmbG93SWQpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIudmVyaWZ5KHtcbiAgICAgIGlzQXV0aGVudGljYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB3b3JrZmxvdztcbiAgICAgICAgd29ya2Zsb3cgPSBuZXcgV29ya2Zsb3coe1xuICAgICAgICAgIFwiX2lkXCI6IHdvcmtmbG93SWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3b3JrZmxvdy5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZmVlZGJhY2ssIGZlZWRiYWNrSWQ7XG4gICAgICAgICAgICBmZWVkYmFja0lkID0gd29ya2Zsb3dJZCArIFwiLWZlZWRiYWNrXCI7XG4gICAgICAgICAgICBmZWVkYmFjayA9IG5ldyBGZWVkYmFjayh7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IGZlZWRiYWNrSWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGZlZWRiYWNrLmZldGNoKHtcbiAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5taWRBbGVydChcIk5vIGZlZWRiYWNrIGRlZmluZWRcIik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB2aWV3O1xuICAgICAgICAgICAgICAgIGZlZWRiYWNrLnVwZGF0ZUNvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IEZlZWRiYWNrVHJpcHNWaWV3KHtcbiAgICAgICAgICAgICAgICAgIGZlZWRiYWNrOiBmZWVkYmFjayxcbiAgICAgICAgICAgICAgICAgIHdvcmtmbG93OiB3b3JrZmxvd1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUud29ya2Zsb3dFZGl0ID0gZnVuY3Rpb24od29ya2Zsb3dJZCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHdvcmtmbG93O1xuICAgICAgICB3b3JrZmxvdyA9IG5ldyBXb3JrZmxvdyh7XG4gICAgICAgICAgXCJfaWRcIjogd29ya2Zsb3dJZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdvcmtmbG93LmZldGNoKHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciB2aWV3O1xuICAgICAgICAgICAgdmlldyA9IG5ldyBXb3JrZmxvd0VkaXRWaWV3KHtcbiAgICAgICAgICAgICAgd29ya2Zsb3c6IHdvcmtmbG93XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS53b3JrZmxvd1J1biA9IGZ1bmN0aW9uKHdvcmtmbG93SWQpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIudmVyaWZ5KHtcbiAgICAgIGlzQXV0aGVudGljYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB3b3JrZmxvdztcbiAgICAgICAgd29ya2Zsb3cgPSBuZXcgV29ya2Zsb3coe1xuICAgICAgICAgIFwiX2lkXCI6IHdvcmtmbG93SWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB3b3JrZmxvdy5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdmlldztcbiAgICAgICAgICAgIHdvcmtmbG93LnVwZGF0ZUNvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgIHZpZXcgPSBuZXcgV29ya2Zsb3dSdW5WaWV3KHtcbiAgICAgICAgICAgICAgd29ya2Zsb3c6IHdvcmtmbG93XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS53b3JrZmxvd1Jlc3VtZSA9IGZ1bmN0aW9uKHdvcmtmbG93SWQsIHRyaXBJZCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHdvcmtmbG93O1xuICAgICAgICB3b3JrZmxvdyA9IG5ldyBXb3JrZmxvdyh7XG4gICAgICAgICAgXCJfaWRcIjogd29ya2Zsb3dJZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHdvcmtmbG93LmZldGNoKHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBUYW5nZXJpbmUuJGRiLnZpZXcoVGFuZ2VyaW5lLmRlc2lnbl9kb2MgKyBcIi90cmlwc0FuZFVzZXJzXCIsIHtcbiAgICAgICAgICAgICAga2V5OiB0cmlwSWQsXG4gICAgICAgICAgICAgIGluY2x1ZGVfZG9jczogdHJ1ZSxcbiAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBhc3Nlc3NtZW50UmVzdW1lSW5kZXgsIGksIGluZGV4LCBqLCByZWYsIHJlZjEsIHJlZjIsIHJlZjMsIHN0ZXBzO1xuICAgICAgICAgICAgICAgIGluZGV4ID0gTWF0aC5tYXgoZGF0YS5yb3dzLmxlbmd0aCAtIDEsIDApO1xuICAgICAgICAgICAgICAgIHN0ZXBzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChqID0gaSA9IDAsIHJlZiA9IGluZGV4OyAwIDw9IHJlZiA/IGkgPD0gcmVmIDogaSA+PSByZWY7IGogPSAwIDw9IHJlZiA/ICsraSA6IC0taSkge1xuICAgICAgICAgICAgICAgICAgc3RlcHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogbmV3IFJlc3VsdChkYXRhLnJvd3Nbal0uZG9jKVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFzc2Vzc21lbnRSZXN1bWVJbmRleCA9ICgocmVmMSA9IGRhdGEucm93c1tpbmRleF0pICE9IG51bGwgPyAocmVmMiA9IHJlZjEuZG9jKSAhPSBudWxsID8gKHJlZjMgPSByZWYyLnN1YnRlc3REYXRhKSAhPSBudWxsID8gcmVmMy5sZW5ndGggOiB2b2lkIDAgOiB2b2lkIDAgOiB2b2lkIDApIHx8IDA7XG5cbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgaWYgZGF0YS5yb3dzW2luZGV4XT8uZG9jPy5vcmRlcl9tYXA/XG4gICAgICAgICAgICAgICAgICAgKiBzYXZlIHRoZSBvcmRlciBtYXAgb2YgcHJldmlvdXMgcmFuZG9taXphdGlvblxuICAgICAgICAgICAgICAgICAgb3JkZXJNYXAgPSByZXN1bHQuZ2V0KFwib3JkZXJfbWFwXCIpLnNsaWNlKCkgIyBjbG9uZSBhcnJheVxuICAgICAgICAgICAgICAgICAgICogcmVzdG9yZSB0aGUgcHJldmlvdXMgb3JkZXJtYXBcbiAgICAgICAgICAgICAgICAgIHZpZXcub3JkZXJNYXAgPSBvcmRlck1hcFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHdvcmtmbG93ID0gbmV3IFdvcmtmbG93KHtcbiAgICAgICAgICAgICAgICAgIFwiX2lkXCI6IHdvcmtmbG93SWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd29ya2Zsb3cuZmV0Y2goe1xuICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmNvbXBsZXRlLCB2aWV3O1xuICAgICAgICAgICAgICAgICAgICBpbmNvbXBsZXRlID0gVGFuZ2VyaW5lLnVzZXIuZ2V0UHJlZmVyZW5jZXMoXCJ0dXRvci13b3JrZmxvd3NcIiwgXCJpbmNvbXBsZXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICBpbmNvbXBsZXRlW3dvcmtmbG93SWRdID0gXyhpbmNvbXBsZXRlW3dvcmtmbG93SWRdKS53aXRob3V0KHRyaXBJZCk7XG4gICAgICAgICAgICAgICAgICAgIFRhbmdlcmluZS51c2VyLmdldFByZWZlcmVuY2VzKFwidHV0b3Itd29ya2Zsb3dzXCIsIFwiaW5jb21wbGV0ZVwiLCBpbmNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICAgICAgd29ya2Zsb3cudXBkYXRlQ29sbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IFdvcmtmbG93UnVuVmlldyh7XG4gICAgICAgICAgICAgICAgICAgICAgYXNzZXNzbWVudFJlc3VtZUluZGV4OiBhc3Nlc3NtZW50UmVzdW1lSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgd29ya2Zsb3c6IHdvcmtmbG93LFxuICAgICAgICAgICAgICAgICAgICAgIHRyaXBJZDogdHJpcElkLFxuICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICBzdGVwczogc3RlcHNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuYWRtaW4gPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLnZlcmlmeSh7XG4gICAgICBpc0FkbWluOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICQuY291Y2guYWxsRGJzKHtcbiAgICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhYmFzZXMpIHtcbiAgICAgICAgICAgICAgdmFyIGdyb3VwcywgdmlldztcbiAgICAgICAgICAgICAgZ3JvdXBzID0gZGF0YWJhc2VzLmZpbHRlcihmdW5jdGlvbihkYXRhYmFzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhYmFzZS5pbmRleE9mKFwiZ3JvdXAtXCIpID09PSAwO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdmlldyA9IG5ldyBBZG1pblZpZXcoe1xuICAgICAgICAgICAgICAgIGdyb3VwczogZ3JvdXBzXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkodGhpcylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5kYXNoYm9hcmQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIHJlcG9ydFZpZXdPcHRpb25zLCB2aWV3O1xuICAgIG9wdGlvbnMgPSBvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLnNwbGl0KC9cXC8vKSA6IHZvaWQgMDtcbiAgICBjb25zb2xlLmxvZyhcIm9wdGlvbnM6IFwiICsgb3B0aW9ucyk7XG4gICAgcmVwb3J0Vmlld09wdGlvbnMgPSB7XG4gICAgICBhc3Nlc3NtZW50OiBcIkFsbFwiLFxuICAgICAgZ3JvdXBCeTogXCJlbnVtZXJhdG9yXCJcbiAgICB9O1xuICAgIF8uZWFjaChvcHRpb25zLCBmdW5jdGlvbihvcHRpb24sIGluZGV4KSB7XG4gICAgICBpZiAoIShpbmRleCAlIDIpKSB7XG4gICAgICAgIHJldHVybiByZXBvcnRWaWV3T3B0aW9uc1tvcHRpb25dID0gb3B0aW9uc1tpbmRleCArIDFdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHZpZXcgPSBuZXcgRGFzaGJvYXJkVmlldyhyZXBvcnRWaWV3T3B0aW9ucyk7XG4gICAgcmV0dXJuIHZtLnNob3codmlldyk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5sYW5kaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKH5TdHJpbmcod2luZG93LmxvY2F0aW9uLmhyZWYpLmluZGV4T2YoXCJhcHAvdGFuZ2VyaW5lL1wiKSkge1xuICAgICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJncm91cHNcIiwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLm5hdmlnYXRlKFwiYXNzZXNzbWVudHNcIiwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuZ3JvdXBzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLnZlcmlmeSh7XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmlldztcbiAgICAgICAgdmlldyA9IG5ldyBHcm91cHNWaWV3O1xuICAgICAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmN1cnJpY3VsYSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGN1cnJpY3VsYTtcbiAgICAgICAgY3VycmljdWxhID0gbmV3IEN1cnJpY3VsYTtcbiAgICAgICAgcmV0dXJuIGN1cnJpY3VsYS5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oY29sbGVjdGlvbikge1xuICAgICAgICAgICAgdmFyIHZpZXc7XG4gICAgICAgICAgICB2aWV3ID0gbmV3IEN1cnJpY3VsYVZpZXcoe1xuICAgICAgICAgICAgICBcImN1cnJpY3VsYVwiOiBjb2xsZWN0aW9uXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jdXJyaWN1bHVtID0gZnVuY3Rpb24oY3VycmljdWx1bUlkKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLnZlcmlmeSh7XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY3VycmljdWx1bTtcbiAgICAgICAgY3VycmljdWx1bSA9IG5ldyBDdXJyaWN1bHVtKHtcbiAgICAgICAgICBcIl9pZFwiOiBjdXJyaWN1bHVtSWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjdXJyaWN1bHVtLmZldGNoKHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhbGxTdWJ0ZXN0cztcbiAgICAgICAgICAgIGFsbFN1YnRlc3RzID0gbmV3IFN1YnRlc3RzO1xuICAgICAgICAgICAgcmV0dXJuIGFsbFN1YnRlc3RzLmZldGNoKHtcbiAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFsbFF1ZXN0aW9ucywgc3VidGVzdHM7XG4gICAgICAgICAgICAgICAgc3VidGVzdHMgPSBuZXcgU3VidGVzdHMoYWxsU3VidGVzdHMud2hlcmUoe1xuICAgICAgICAgICAgICAgICAgXCJjdXJyaWN1bHVtSWRcIjogY3VycmljdWx1bUlkXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGFsbFF1ZXN0aW9ucyA9IG5ldyBRdWVzdGlvbnM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbFF1ZXN0aW9ucy5mZXRjaCh7XG4gICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHF1ZXN0aW9ucywgdmlldztcbiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25zID0gW107XG4gICAgICAgICAgICAgICAgICAgIHN1YnRlc3RzLmVhY2goZnVuY3Rpb24oc3VidGVzdCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWVzdGlvbnMgPSBxdWVzdGlvbnMuY29uY2F0KGFsbFF1ZXN0aW9ucy53aGVyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInN1YnRlc3RJZFwiOiBzdWJ0ZXN0LmlkXG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9ucyhxdWVzdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IEN1cnJpY3VsdW1WaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgICBcImN1cnJpY3VsdW1cIjogY3VycmljdWx1bSxcbiAgICAgICAgICAgICAgICAgICAgICBcInN1YnRlc3RzXCI6IHN1YnRlc3RzLFxuICAgICAgICAgICAgICAgICAgICAgIFwicXVlc3Rpb25zXCI6IHF1ZXN0aW9uc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZtLnNob3codmlldyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jdXJyaWN1bHVtRWRpdCA9IGZ1bmN0aW9uKGN1cnJpY3VsdW1JZCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGN1cnJpY3VsdW07XG4gICAgICAgIGN1cnJpY3VsdW0gPSBuZXcgQ3VycmljdWx1bSh7XG4gICAgICAgICAgXCJfaWRcIjogY3VycmljdWx1bUlkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY3VycmljdWx1bS5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYWxsU3VidGVzdHM7XG4gICAgICAgICAgICBhbGxTdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0cztcbiAgICAgICAgICAgIHJldHVybiBhbGxTdWJ0ZXN0cy5mZXRjaCh7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBhbGxQYXJ0cywgcGFydENvdW50LCBzdWJ0ZXN0LCBzdWJ0ZXN0cywgdmlldztcbiAgICAgICAgICAgICAgICBzdWJ0ZXN0cyA9IGFsbFN1YnRlc3RzLndoZXJlKHtcbiAgICAgICAgICAgICAgICAgIFwiY3VycmljdWx1bUlkXCI6IGN1cnJpY3VsdW1JZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGFsbFBhcnRzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgdmFyIGksIGxlbiwgcmVzdWx0czE7XG4gICAgICAgICAgICAgICAgICByZXN1bHRzMSA9IFtdO1xuICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gc3VidGVzdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgc3VidGVzdCA9IHN1YnRlc3RzW2ldO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzMS5wdXNoKHN1YnRlc3QuZ2V0KFwicGFydFwiKSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czE7XG4gICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgICAgICBwYXJ0Q291bnQgPSBNYXRoLm1heC5hcHBseShNYXRoLCBhbGxQYXJ0cyk7XG4gICAgICAgICAgICAgICAgdmlldyA9IG5ldyBDdXJyaWN1bHVtVmlldyh7XG4gICAgICAgICAgICAgICAgICBcImN1cnJpY3VsdW1cIjogY3VycmljdWx1bSxcbiAgICAgICAgICAgICAgICAgIFwic3VidGVzdHNcIjogc3VidGVzdHMsXG4gICAgICAgICAgICAgICAgICBcInBhcnRzXCI6IHBhcnRDb3VudFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY3VycmljdWx1bUltcG9ydCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZpZXc7XG4gICAgICAgIHZpZXcgPSBuZXcgQXNzZXNzbWVudEltcG9ydFZpZXcoe1xuICAgICAgICAgIG5vdW46IFwiY3VycmljdWx1bVwiXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmtsYXNzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLnZlcmlmeSh7XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYWxsS2xhc3NlcztcbiAgICAgICAgYWxsS2xhc3NlcyA9IG5ldyBLbGFzc2VzO1xuICAgICAgICByZXR1cm4gYWxsS2xhc3Nlcy5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oa2xhc3NDb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgdGVhY2hlcnM7XG4gICAgICAgICAgICB0ZWFjaGVycyA9IG5ldyBUZWFjaGVycztcbiAgICAgICAgICAgIHJldHVybiB0ZWFjaGVycy5mZXRjaCh7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBhbGxDdXJyaWN1bGE7XG4gICAgICAgICAgICAgICAgYWxsQ3VycmljdWxhID0gbmV3IEN1cnJpY3VsYTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsQ3VycmljdWxhLmZldGNoKHtcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGN1cnJpY3VsYUNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXc7XG4gICAgICAgICAgICAgICAgICAgIGlmICghVGFuZ2VyaW5lLnVzZXIuaXNBZG1pbigpKSB7XG4gICAgICAgICAgICAgICAgICAgICAga2xhc3NDb2xsZWN0aW9uID0gbmV3IEtsYXNzZXMoa2xhc3NDb2xsZWN0aW9uLndoZXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidGVhY2hlcklkXCI6IFRhbmdlcmluZS51c2VyLmdldChcInRlYWNoZXJJZFwiKVxuICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IEtsYXNzZXNWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgICBrbGFzc2VzOiBrbGFzc0NvbGxlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgY3VycmljdWxhOiBjdXJyaWN1bGFDb2xsZWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgIHRlYWNoZXJzOiB0ZWFjaGVyc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZtLnNob3codmlldyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5rbGFzc0VkaXQgPSBmdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICBrbGFzcyA9IG5ldyBLbGFzcyh7XG4gICAgICAgICAgX2lkOiBpZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGtsYXNzLmZldGNoKHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgICAgdmFyIHRlYWNoZXJzO1xuICAgICAgICAgICAgdGVhY2hlcnMgPSBuZXcgVGVhY2hlcnM7XG4gICAgICAgICAgICByZXR1cm4gdGVhY2hlcnMuZmV0Y2goe1xuICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWxsU3R1ZGVudHM7XG4gICAgICAgICAgICAgICAgYWxsU3R1ZGVudHMgPSBuZXcgU3R1ZGVudHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbFN0dWRlbnRzLmZldGNoKHtcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGFsbFN0dWRlbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrbGFzc1N0dWRlbnRzLCB2aWV3O1xuICAgICAgICAgICAgICAgICAgICBrbGFzc1N0dWRlbnRzID0gbmV3IFN0dWRlbnRzKGFsbFN0dWRlbnRzLndoZXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICBrbGFzc0lkOiBpZFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgS2xhc3NFZGl0Vmlldyh7XG4gICAgICAgICAgICAgICAgICAgICAga2xhc3M6IG1vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgIHN0dWRlbnRzOiBrbGFzc1N0dWRlbnRzLFxuICAgICAgICAgICAgICAgICAgICAgIGFsbFN0dWRlbnRzOiBhbGxTdHVkZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICB0ZWFjaGVyczogdGVhY2hlcnNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUua2xhc3NQYXJ0bHkgPSBmdW5jdGlvbihrbGFzc0lkLCBwYXJ0KSB7XG4gICAgaWYgKHBhcnQgPT0gbnVsbCkge1xuICAgICAgcGFydCA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICBrbGFzcyA9IG5ldyBLbGFzcyh7XG4gICAgICAgICAgXCJfaWRcIjoga2xhc3NJZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGtsYXNzLmZldGNoKHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjdXJyaWN1bHVtO1xuICAgICAgICAgICAgY3VycmljdWx1bSA9IG5ldyBDdXJyaWN1bHVtKHtcbiAgICAgICAgICAgICAgXCJfaWRcIjoga2xhc3MuZ2V0KFwiY3VycmljdWx1bUlkXCIpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjdXJyaWN1bHVtLmZldGNoKHtcbiAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFsbFN0dWRlbnRzO1xuICAgICAgICAgICAgICAgIGFsbFN0dWRlbnRzID0gbmV3IFN0dWRlbnRzO1xuICAgICAgICAgICAgICAgIHJldHVybiBhbGxTdHVkZW50cy5mZXRjaCh7XG4gICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbGxSZXN1bHRzLCBzdHVkZW50cztcbiAgICAgICAgICAgICAgICAgICAgc3R1ZGVudHMgPSBuZXcgU3R1ZGVudHMoY29sbGVjdGlvbi53aGVyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgXCJrbGFzc0lkXCI6IGtsYXNzSWRcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICBhbGxSZXN1bHRzID0gbmV3IEtsYXNzUmVzdWx0cztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbFJlc3VsdHMuZmV0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbGxTdWJ0ZXN0cywgcmVzdWx0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBuZXcgS2xhc3NSZXN1bHRzKGNvbGxlY3Rpb24ud2hlcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcImtsYXNzSWRcIjoga2xhc3NJZFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU3VidGVzdHMgPSBuZXcgU3VidGVzdHM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsU3VidGVzdHMuZmV0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnRlc3RzLCB2aWV3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRlc3RzID0gbmV3IFN1YnRlc3RzKGNvbGxlY3Rpb24ud2hlcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjdXJyaWN1bHVtSWRcIjoga2xhc3MuZ2V0KFwiY3VycmljdWx1bUlkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgS2xhc3NQYXJ0bHlWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGFydFwiOiBwYXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdWJ0ZXN0c1wiOiBzdWJ0ZXN0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicmVzdWx0c1wiOiByZXN1bHRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHVkZW50c1wiOiBzdHVkZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmljdWx1bVwiOiBjdXJyaWN1bHVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJrbGFzc1wiOiBrbGFzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuc3R1ZGVudFN1YnRlc3QgPSBmdW5jdGlvbihzdHVkZW50SWQsIHN1YnRlc3RJZCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0dWRlbnQ7XG4gICAgICAgIHN0dWRlbnQgPSBuZXcgU3R1ZGVudCh7XG4gICAgICAgICAgXCJfaWRcIjogc3R1ZGVudElkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3R1ZGVudC5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgc3VidGVzdDtcbiAgICAgICAgICAgIHN1YnRlc3QgPSBuZXcgU3VidGVzdCh7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IHN1YnRlc3RJZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gc3VidGVzdC5mZXRjaCh7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBUYW5nZXJpbmUuJGRiLnZpZXcoVGFuZ2VyaW5lLmRlc2lnbl9kb2MgKyBcIi9yZXN1bHRzQnlTdHVkZW50U3VidGVzdFwiLCB7XG4gICAgICAgICAgICAgICAgICBrZXk6IFtzdHVkZW50SWQsIHN1YnRlc3RJZF0sXG4gICAgICAgICAgICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGFsbFJlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICAgYWxsUmVzdWx0cyA9IG5ldyBLbGFzc1Jlc3VsdHM7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbFJlc3VsdHMuZmV0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0cywgdmlldztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IGNvbGxlY3Rpb24ud2hlcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3VidGVzdElkXCI6IHN1YnRlc3RJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0dWRlbnRJZFwiOiBzdHVkZW50SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJrbGFzc0lkXCI6IHN0dWRlbnQuZ2V0KFwia2xhc3NJZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmlldyA9IG5ldyBLbGFzc1N1YnRlc3RSZXN1bHRWaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFsbFJlc3VsdHNcIjogYWxsUmVzdWx0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlc3VsdHNcIjogcmVzdWx0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN1YnRlc3RcIjogc3VidGVzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0dWRlbnRcIjogc3R1ZGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInByZXZpb3VzXCI6IHJlc3BvbnNlLnJvd3MubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIH0pKHRoaXMpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5ydW5TdWJ0ZXN0ID0gZnVuY3Rpb24oc3R1ZGVudElkLCBzdWJ0ZXN0SWQpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIudmVyaWZ5KHtcbiAgICAgIGlzQXV0aGVudGljYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdWJ0ZXN0O1xuICAgICAgICBzdWJ0ZXN0ID0gbmV3IFN1YnRlc3Qoe1xuICAgICAgICAgIFwiX2lkXCI6IHN1YnRlc3RJZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1YnRlc3QuZmV0Y2goe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG9uU3R1ZGVudFJlYWR5LCBzdHVkZW50O1xuICAgICAgICAgICAgc3R1ZGVudCA9IG5ldyBTdHVkZW50KHtcbiAgICAgICAgICAgICAgXCJfaWRcIjogc3R1ZGVudElkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG9uU3R1ZGVudFJlYWR5ID0gZnVuY3Rpb24oc3R1ZGVudCwgc3VidGVzdCkge1xuICAgICAgICAgICAgICByZXR1cm4gc3R1ZGVudC5mZXRjaCh7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgb25TdWNjZXNzLCBxdWVzdGlvbnM7XG4gICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MgPSBmdW5jdGlvbihzdHVkZW50LCBzdWJ0ZXN0LCBxdWVzdGlvbiwgbGlua2VkUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2aWV3O1xuICAgICAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24gPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobGlua2VkUmVzdWx0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBsaW5rZWRSZXN1bHQgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IEtsYXNzU3VidGVzdFJ1blZpZXcoe1xuICAgICAgICAgICAgICAgICAgICAgIFwic3R1ZGVudFwiOiBzdHVkZW50LFxuICAgICAgICAgICAgICAgICAgICAgIFwic3VidGVzdFwiOiBzdWJ0ZXN0LFxuICAgICAgICAgICAgICAgICAgICAgIFwicXVlc3Rpb25zXCI6IHF1ZXN0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICBcImxpbmtlZFJlc3VsdFwiOiBsaW5rZWRSZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIHF1ZXN0aW9ucyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICBpZiAoc3VidGVzdC5nZXQoXCJwcm90b3R5cGVcIikgPT09IFwic3VydmV5XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRhbmdlcmluZS4kZGIudmlldyhUYW5nZXJpbmUuZGVzaWduX2RvYyArIFwiL3Jlc3VsdHNCeVN0dWRlbnRTdWJ0ZXN0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICBrZXk6IFtzdHVkZW50SWQsIHN1YnRlc3QuZ2V0KFwiZ3JpZExpbmtJZFwiKV0sXG4gICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmtlZFJlc3VsdCwgcmVmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uucm93cyAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmtlZFJlc3VsdCA9IG5ldyBLbGFzc1Jlc3VsdCgocmVmID0gXy5sYXN0KHJlc3BvbnNlLnJvd3MpKSAhPSBudWxsID8gcmVmLnZhbHVlIDogdm9pZCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVlc3Rpb25zLmZldGNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwicVwiICsgc3VidGVzdC5nZXQoXCJjdXJyaWN1bHVtSWRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zKHF1ZXN0aW9ucy53aGVyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnRlc3RJZDogc3VidGVzdElkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb25TdWNjZXNzKHN0dWRlbnQsIHN1YnRlc3QsIHF1ZXN0aW9ucywgbGlua2VkUmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICB9KSh0aGlzKVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvblN1Y2Nlc3Moc3R1ZGVudCwgc3VidGVzdCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoc3R1ZGVudElkID09PSBcInRlc3RcIikge1xuICAgICAgICAgICAgICByZXR1cm4gc3R1ZGVudC5mZXRjaCh7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gb25TdHVkZW50UmVhZHkoc3R1ZGVudCwgc3VidGVzdCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gc3R1ZGVudC5zYXZlKG51bGwsIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9uU3R1ZGVudFJlYWR5KHN0dWRlbnQsIHN1YnRlc3QpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHN0dWRlbnQuZmV0Y2goe1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG9uU3R1ZGVudFJlYWR5KHN0dWRlbnQsIHN1YnRlc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLnZlcmlmeSh7XG4gICAgICBpc1VucmVnaXN0ZXJlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2aWV3O1xuICAgICAgICB2aWV3ID0gbmV3IFJlZ2lzdGVyVGVhY2hlclZpZXcoe1xuICAgICAgICAgIHVzZXI6IG5ldyBVc2VyXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgICAgIH0sXG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5sYW5kaW5nKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5zdHVkZW50RWRpdCA9IGZ1bmN0aW9uKHN0dWRlbnRJZCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0dWRlbnQ7XG4gICAgICAgIHN0dWRlbnQgPSBuZXcgU3R1ZGVudCh7XG4gICAgICAgICAgX2lkOiBzdHVkZW50SWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdHVkZW50LmZldGNoKHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgICAgdmFyIGFsbEtsYXNzZXM7XG4gICAgICAgICAgICBhbGxLbGFzc2VzID0gbmV3IEtsYXNzZXM7XG4gICAgICAgICAgICByZXR1cm4gYWxsS2xhc3Nlcy5mZXRjaCh7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGtsYXNzQ29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHZhciB2aWV3O1xuICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgU3R1ZGVudEVkaXRWaWV3KHtcbiAgICAgICAgICAgICAgICAgIHN0dWRlbnQ6IG1vZGVsLFxuICAgICAgICAgICAgICAgICAga2xhc3Nlczoga2xhc3NDb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZtLnNob3codmlldyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5kYXRhRW50cnkgPSBmdW5jdGlvbihhc3Nlc3NtZW50SWQpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIudmVyaWZ5KHtcbiAgICAgIGlzQWRtaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXNzZXNzbWVudDtcbiAgICAgICAgYXNzZXNzbWVudCA9IG5ldyBBc3Nlc3NtZW50KHtcbiAgICAgICAgICBcIl9pZFwiOiBhc3Nlc3NtZW50SWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhc3Nlc3NtZW50LmZldGNoKHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBxdWVzdGlvbnM7XG4gICAgICAgICAgICBxdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zO1xuICAgICAgICAgICAgcmV0dXJuIHF1ZXN0aW9ucy5mZXRjaCh7XG4gICAgICAgICAgICAgIGtleTogXCJxXCIgKyBhc3Nlc3NtZW50SWQsXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBxdWVzdGlvbnNCeVN1YnRlc3RJZCwgc3VidGVzdElkO1xuICAgICAgICAgICAgICAgIHF1ZXN0aW9uc0J5U3VidGVzdElkID0gcXVlc3Rpb25zLmluZGV4QnkoXCJzdWJ0ZXN0SWRcIik7XG4gICAgICAgICAgICAgICAgZm9yIChzdWJ0ZXN0SWQgaW4gcXVlc3Rpb25zQnlTdWJ0ZXN0SWQpIHtcbiAgICAgICAgICAgICAgICAgIHF1ZXN0aW9ucyA9IHF1ZXN0aW9uc0J5U3VidGVzdElkW3N1YnRlc3RJZF07XG4gICAgICAgICAgICAgICAgICBhc3Nlc3NtZW50LnN1YnRlc3RzLmdldChzdWJ0ZXN0SWQpLnF1ZXN0aW9ucyA9IG5ldyBRdWVzdGlvbnMocXVlc3Rpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZtLnNob3cobmV3IEFzc2Vzc21lbnREYXRhRW50cnlWaWV3KHtcbiAgICAgICAgICAgICAgICAgIGFzc2Vzc21lbnQ6IGFzc2Vzc21lbnRcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5zeW5jID0gZnVuY3Rpb24oYXNzZXNzbWVudElkKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLnZlcmlmeSh7XG4gICAgICBpc0FkbWluOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFzc2Vzc21lbnQ7XG4gICAgICAgIGFzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudCh7XG4gICAgICAgICAgXCJfaWRcIjogYXNzZXNzbWVudElkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYXNzZXNzbWVudC5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gdm0uc2hvdyhuZXcgQXNzZXNzbWVudFN5bmNWaWV3KHtcbiAgICAgICAgICAgICAgXCJhc3Nlc3NtZW50XCI6IGFzc2Vzc21lbnRcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGVbXCJpbXBvcnRcIl0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIudmVyaWZ5KHtcbiAgICAgIGlzQXV0aGVudGljYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2aWV3O1xuICAgICAgICB2aWV3ID0gbmV3IEFzc2Vzc21lbnRJbXBvcnRWaWV3KHtcbiAgICAgICAgICBub3VuOiBcImFzc2Vzc21lbnRcIlxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHZtLnNob3codmlldyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5hc3Nlc3NtZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHdvcmtmbG93cztcbiAgICAgICAgcmV0dXJuICh3b3JrZmxvd3MgPSBuZXcgV29ya2Zsb3dzKS5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbnMsIGZlZWRiYWNrcztcbiAgICAgICAgICAgIGlmICh3b3JrZmxvd3MubGVuZ3RoID4gMCAmJiBUYW5nZXJpbmUuc2V0dGluZ3MuZ2V0KFwiY29udGV4dFwiKSAhPT0gXCJzZXJ2ZXJcIikge1xuICAgICAgICAgICAgICBmZWVkYmFja3MgPSBuZXcgRmVlZGJhY2tzKGZlZWRiYWNrcyk7XG4gICAgICAgICAgICAgIGZlZWRiYWNrcy5mZXRjaCh7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdmlldztcbiAgICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgV29ya2Zsb3dNZW51Vmlldyh7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtmbG93czogd29ya2Zsb3dzLFxuICAgICAgICAgICAgICAgICAgICBmZWVkYmFja3M6IGZlZWRiYWNrc1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sbGVjdGlvbnMgPSBbXCJLbGFzc2VzXCIsIFwiVGVhY2hlcnNcIiwgXCJDdXJyaWN1bGFcIiwgXCJBc3Nlc3NtZW50c1wiLCBcIldvcmtmbG93c1wiXTtcbiAgICAgICAgICAgIGNvbGxlY3Rpb25zLnB1c2goXCJVc2Vyc1wiKTtcbiAgICAgICAgICAgIHJldHVybiBVdGlscy5sb2FkQ29sbGVjdGlvbnMoe1xuICAgICAgICAgICAgICBjb2xsZWN0aW9uczogY29sbGVjdGlvbnMsXG4gICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgZmVlZGJhY2tzID0gb3B0aW9ucy53b3JrZmxvd3MubW9kZWxzLm1hcChmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZlZWRiYWNrKHtcbiAgICAgICAgICAgICAgICAgICAgXCJfaWRcIjogYS5pZCArIFwiLWZlZWRiYWNrXCJcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGZlZWRiYWNrcyA9IG5ldyBGZWVkYmFja3MoZmVlZGJhY2tzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmVlZGJhY2tzLmZldGNoKHtcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmlldztcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5mZWVkYmFja3MgPSBmZWVkYmFja3M7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMudXNlcnMgPSBvcHRpb25zLnRhYmxldFVzZXJzIHx8IG9wdGlvbnMudXNlcnM7XG4gICAgICAgICAgICAgICAgICAgIGlmICghVGFuZ2VyaW5lLnVzZXIuaXNBZG1pbigpICYmIFRhbmdlcmluZS5zZXR0aW5ncy5nZXQoJ3Nob3dXb3JrZmxvd3MnKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgV29ya2Zsb3dNZW51TWVtYmVyVmlldyhvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCcjY29udGVudCcpLmh0bWwodmlldy5lbCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZtLnNob3cobmV3IEFzc2Vzc21lbnRzTWVudVZpZXcob3B0aW9ucykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5lZGl0SWQgPSBmdW5jdGlvbihpZCkge1xuICAgIGlkID0gVXRpbHMuY2xlYW5VUkwoaWQpO1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBZG1pbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhc3Nlc3NtZW50O1xuICAgICAgICBhc3Nlc3NtZW50ID0gbmV3IEFzc2Vzc21lbnQoe1xuICAgICAgICAgIF9pZDogaWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhc3Nlc3NtZW50LnN1cGVyRmV0Y2goe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgICAgICAgICB2YXIgdmlldztcbiAgICAgICAgICAgIHZpZXcgPSBuZXcgQXNzZXNzbWVudEVkaXRWaWV3KHtcbiAgICAgICAgICAgICAgbW9kZWw6IG1vZGVsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgaXNVc2VyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubGFuZGluZygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuZWRpdCA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLnZlcmlmeSh7XG4gICAgICBpc0FkbWluOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFzc2Vzc21lbnQ7XG4gICAgICAgIGFzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudCh7XG4gICAgICAgICAgXCJfaWRcIjogaWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhc3Nlc3NtZW50LmZldGNoKHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgICAgdmFyIHZpZXc7XG4gICAgICAgICAgICB2aWV3ID0gbmV3IEFzc2Vzc21lbnRFZGl0Vmlldyh7XG4gICAgICAgICAgICAgIG1vZGVsOiBtb2RlbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGlzVXNlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLmxhbmRpbmcoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLnJlc3RhcnQgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubmF2aWdhdGUoXCJydW4vXCIgKyBuYW1lLCB0cnVlKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLnZlcmlmeSh7XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZEtleSwgdXJsO1xuICAgICAgICBkS2V5ID0gSlNPTi5zdHJpbmdpZnkoaWQuc3Vic3RyKC01LCA1KSk7XG4gICAgICAgIHVybCA9IFRhbmdlcmluZS5zZXR0aW5ncy51cmxWaWV3KFwiZ3JvdXBcIiwgXCJieURLZXlcIik7XG4gICAgICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIGtleTogZEtleVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnRyaWdnZXIoXCJzdGF0dXNcIiwgXCJpbXBvcnQgZXJyb3JcIiwgYSArIFwiIFwiICsgYik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pKHRoaXMpLFxuICAgICAgICAgIHN1Y2Nlc3M6IChmdW5jdGlvbihfdGhpcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgdmFyIGRhdHVtLCBkb2NMaXN0LCBpLCBrZXlMaXN0LCBsZW4sIHJlZjtcbiAgICAgICAgICAgICAgZG9jTGlzdCA9IFtcImxvY2F0aW9uLWxpc3RcIl07XG4gICAgICAgICAgICAgIHJlZiA9IGRhdGEucm93cztcbiAgICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGF0dW0gPSByZWZbaV07XG4gICAgICAgICAgICAgICAgZG9jTGlzdC5wdXNoKGRhdHVtLmlkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBrZXlMaXN0ID0gXy51bmlxKGRvY0xpc3QpO1xuICAgICAgICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLiRkYi5hbGxEb2NzKHtcbiAgICAgICAgICAgICAgICBrZXlzOiBrZXlMaXN0LFxuICAgICAgICAgICAgICAgIGluY2x1ZGVfZG9jczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGRvY3MsIGssIGxlbjEsIHJlZjEsIHJvdywgdmlldztcbiAgICAgICAgICAgICAgICAgIGRvY3MgPSBbXTtcbiAgICAgICAgICAgICAgICAgIHJlZjEgPSByZXNwb25zZS5yb3dzO1xuICAgICAgICAgICAgICAgICAgZm9yIChrID0gMCwgbGVuMSA9IHJlZjEubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdyA9IHJlZjFba107XG4gICAgICAgICAgICAgICAgICAgIGRvY3MucHVzaChyb3cuZG9jKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgV2lkZ2V0UnVuVmlldyh7XG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBkb2NzXG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pKHRoaXMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucHJpbnQgPSBmdW5jdGlvbihhc3Nlc3NtZW50SWQsIGZvcm1hdCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFzc2Vzc21lbnQ7XG4gICAgICAgIGFzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudCh7XG4gICAgICAgICAgXCJfaWRcIjogYXNzZXNzbWVudElkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYXNzZXNzbWVudC5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgICAgIHZhciB2aWV3O1xuICAgICAgICAgICAgdmlldyA9IG5ldyBBc3Nlc3NtZW50UHJpbnRWaWV3KHtcbiAgICAgICAgICAgICAgbW9kZWw6IG1vZGVsLFxuICAgICAgICAgICAgICBmb3JtYXQ6IGZvcm1hdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oYXNzZXNzbWVudElkLCByZXN1bHRJZCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFzc2Vzc21lbnQ7XG4gICAgICAgIGFzc2Vzc21lbnQgPSBuZXcgQXNzZXNzbWVudCh7XG4gICAgICAgICAgXCJfaWRcIjogYXNzZXNzbWVudElkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYXNzZXNzbWVudC5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oYXNzZXNzbWVudCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBSZXN1bHQoe1xuICAgICAgICAgICAgICBcIl9pZFwiOiByZXN1bHRJZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmZldGNoKHtcbiAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGksIGxlbiwgb3JkZXJNYXAsIHJlZiwgc3VidGVzdCwgdmlldztcbiAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IEFzc2Vzc21lbnRSdW5WaWV3KHtcbiAgICAgICAgICAgICAgICAgIG1vZGVsOiBhc3Nlc3NtZW50XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5oYXMoXCJvcmRlcl9tYXBcIikpIHtcbiAgICAgICAgICAgICAgICAgIG9yZGVyTWFwID0gcmVzdWx0LmdldChcIm9yZGVyX21hcFwiKS5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgdmlldy5vcmRlck1hcCA9IG9yZGVyTWFwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWYgPSByZXN1bHQuZ2V0KFwic3VidGVzdERhdGFcIik7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBzdWJ0ZXN0ID0gcmVmW2ldO1xuICAgICAgICAgICAgICAgICAgaWYgKChzdWJ0ZXN0LmRhdGEgIT0gbnVsbCkgJiYgKHN1YnRlc3QuZGF0YS5wYXJ0aWNpcGFudF9pZCAhPSBudWxsKSkge1xuICAgICAgICAgICAgICAgICAgICBUYW5nZXJpbmUubmF2LnNldFN0dWRlbnQoc3VidGVzdC5kYXRhLnBhcnRpY2lwYW50X2lkKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmlldy5yZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgdmlldy5zdWJ0ZXN0Vmlld3MucG9wKCk7XG4gICAgICAgICAgICAgICAgdmlldy5zdWJ0ZXN0Vmlld3MucHVzaChuZXcgUmVzdWx0Vmlldyh7XG4gICAgICAgICAgICAgICAgICBtb2RlbDogcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgYXNzZXNzbWVudDogYXNzZXNzbWVudCxcbiAgICAgICAgICAgICAgICAgIGFzc2Vzc21lbnRWaWV3OiB2aWV3XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHZpZXcuaW5kZXggPSByZXN1bHQuZ2V0KFwic3VidGVzdERhdGFcIikubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucmVzdWx0cyA9IGZ1bmN0aW9uKGFzc2Vzc21lbnRJZCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFmdGVyRmV0Y2gsIGFzc2Vzc21lbnQ7XG4gICAgICAgIGFmdGVyRmV0Y2ggPSBmdW5jdGlvbihhc3Nlc3NtZW50LCBhc3Nlc3NtZW50SWQpIHtcbiAgICAgICAgICB2YXIgYWxsUmVzdWx0cztcbiAgICAgICAgICBpZiAoYXNzZXNzbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICBhc3Nlc3NtZW50ID0gbmV3IEFzc2Vzc21lbnQoe1xuICAgICAgICAgICAgICBcIl9pZFwiOiBhc3Nlc3NtZW50SWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhbGxSZXN1bHRzID0gbmV3IFJlc3VsdHM7XG4gICAgICAgICAgcmV0dXJuIGFsbFJlc3VsdHMuZmV0Y2goe1xuICAgICAgICAgICAgaW5jbHVkZV9kb2NzOiBmYWxzZSxcbiAgICAgICAgICAgIGtleTogXCJyXCIgKyBhc3Nlc3NtZW50SWQsXG4gICAgICAgICAgICBzdWNjZXNzOiAoZnVuY3Rpb24oX3RoaXMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmlldztcbiAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IFJlc3VsdHNWaWV3KHtcbiAgICAgICAgICAgICAgICAgIFwiYXNzZXNzbWVudFwiOiBhc3Nlc3NtZW50LFxuICAgICAgICAgICAgICAgICAgXCJyZXN1bHRzXCI6IHJlc3VsdHMubW9kZWxzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZtLnNob3codmlldyk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSh0aGlzKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBhc3Nlc3NtZW50ID0gbmV3IEFzc2Vzc21lbnQoe1xuICAgICAgICAgIFwiX2lkXCI6IGFzc2Vzc21lbnRJZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFzc2Vzc21lbnQuZmV0Y2goe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGFmdGVyRmV0Y2goYXNzZXNzbWVudCwgYXNzZXNzbWVudElkKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBhZnRlckZldGNoKGFzc2Vzc21lbnQsIGFzc2Vzc21lbnRJZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmtsYXNzR3JvdXBpbmcgPSBmdW5jdGlvbihrbGFzc0lkLCBwYXJ0KSB7XG4gICAgcGFydCA9IHBhcnNlSW50KHBhcnQpO1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFsbFN1YnRlc3RzO1xuICAgICAgICBhbGxTdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0cztcbiAgICAgICAgcmV0dXJuIGFsbFN1YnRlc3RzLmZldGNoKHtcbiAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgYWxsUmVzdWx0cywgc3VidGVzdHM7XG4gICAgICAgICAgICBzdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0cyhjb2xsZWN0aW9uLndoZXJlKHtcbiAgICAgICAgICAgICAgXCJwYXJ0XCI6IHBhcnRcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGFsbFJlc3VsdHMgPSBuZXcgS2xhc3NSZXN1bHRzO1xuICAgICAgICAgICAgcmV0dXJuIGFsbFJlc3VsdHMuZmV0Y2goe1xuICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0dWRlbnRzO1xuICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBuZXcgS2xhc3NSZXN1bHRzKHJlc3VsdHMud2hlcmUoe1xuICAgICAgICAgICAgICAgICAgXCJrbGFzc0lkXCI6IGtsYXNzSWRcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgc3R1ZGVudHMgPSBuZXcgU3R1ZGVudHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0dWRlbnRzLmZldGNoKHtcbiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmlsdGVyZWRSZXN1bHRzLCBpLCBsZW4sIHJlZiwgcmVmMSwgcmVzdWx0LCByZXN1bHRzRnJvbUN1cnJlbnRTdHVkZW50cywgc3R1ZGVudElkcywgdmlldztcbiAgICAgICAgICAgICAgICAgICAgc3R1ZGVudHMgPSBuZXcgU3R1ZGVudHMoc3R1ZGVudHMud2hlcmUoe1xuICAgICAgICAgICAgICAgICAgICAgIFwia2xhc3NJZFwiOiBrbGFzc0lkXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgc3R1ZGVudElkcyA9IHN0dWRlbnRzLnBsdWNrKFwiX2lkXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzRnJvbUN1cnJlbnRTdHVkZW50cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICByZWYgPSByZXN1bHRzLm1vZGVscztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVmW2ldO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWYxID0gcmVzdWx0LmdldChcInN0dWRlbnRJZFwiKSwgaW5kZXhPZi5jYWxsKHN0dWRlbnRJZHMsIHJlZjEpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHNGcm9tQ3VycmVudFN0dWRlbnRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRSZXN1bHRzID0gbmV3IEtsYXNzUmVzdWx0cyhyZXN1bHRzRnJvbUN1cnJlbnRTdHVkZW50cyk7XG4gICAgICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgS2xhc3NHcm91cGluZ1ZpZXcoe1xuICAgICAgICAgICAgICAgICAgICAgIFwic3R1ZGVudHNcIjogc3R1ZGVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgXCJzdWJ0ZXN0c1wiOiBzdWJ0ZXN0cyxcbiAgICAgICAgICAgICAgICAgICAgICBcInJlc3VsdHNcIjogZmlsdGVyZWRSZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLm1hc3RlcnlDaGVjayA9IGZ1bmN0aW9uKHN0dWRlbnRJZCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0dWRlbnQ7XG4gICAgICAgIHN0dWRlbnQgPSBuZXcgU3R1ZGVudCh7XG4gICAgICAgICAgXCJfaWRcIjogc3R1ZGVudElkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3R1ZGVudC5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oc3R1ZGVudCkge1xuICAgICAgICAgICAgdmFyIGtsYXNzLCBrbGFzc0lkO1xuICAgICAgICAgICAga2xhc3NJZCA9IHN0dWRlbnQuZ2V0KFwia2xhc3NJZFwiKTtcbiAgICAgICAgICAgIGtsYXNzID0gbmV3IEtsYXNzKHtcbiAgICAgICAgICAgICAgXCJfaWRcIjogc3R1ZGVudC5nZXQoXCJrbGFzc0lkXCIpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBrbGFzcy5mZXRjaCh7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGtsYXNzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFsbFJlc3VsdHM7XG4gICAgICAgICAgICAgICAgYWxsUmVzdWx0cyA9IG5ldyBLbGFzc1Jlc3VsdHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbFJlc3VsdHMuZmV0Y2goe1xuICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSwgaywgbGVuLCBsZW4xLCByZWYsIHJlc3VsdCwgcmVzdWx0cywgc3VidGVzdENvbGxlY3Rpb24sIHN1YnRlc3RJZCwgc3VidGVzdElkTGlzdDtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IG5ldyBLbGFzc1Jlc3VsdHMoY29sbGVjdGlvbi53aGVyZSh7XG4gICAgICAgICAgICAgICAgICAgICAgXCJzdHVkZW50SWRcIjogc3R1ZGVudElkLFxuICAgICAgICAgICAgICAgICAgICAgIFwicmVwb3J0VHlwZVwiOiBcIm1hc3RlcnlcIixcbiAgICAgICAgICAgICAgICAgICAgICBcImtsYXNzSWRcIjoga2xhc3NJZFxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIHN1YnRlc3RJZExpc3QgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgcmVmID0gcmVzdWx0cy5tb2RlbHM7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDAsIGxlbiA9IHJlZi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlZltpXTtcbiAgICAgICAgICAgICAgICAgICAgICBzdWJ0ZXN0SWRMaXN0W3Jlc3VsdC5nZXQoXCJzdWJ0ZXN0SWRcIildID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdWJ0ZXN0SWRMaXN0ID0gXy5rZXlzKHN1YnRlc3RJZExpc3QpO1xuICAgICAgICAgICAgICAgICAgICBzdWJ0ZXN0Q29sbGVjdGlvbiA9IG5ldyBTdWJ0ZXN0cztcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMCwgbGVuMSA9IHN1YnRlc3RJZExpc3QubGVuZ3RoOyBrIDwgbGVuMTsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc3VidGVzdElkID0gc3VidGVzdElkTGlzdFtrXTtcbiAgICAgICAgICAgICAgICAgICAgICBzdWJ0ZXN0Q29sbGVjdGlvbi5hZGQobmV3IFN1YnRlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJfaWRcIjogc3VidGVzdElkXG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdWJ0ZXN0Q29sbGVjdGlvbi5mZXRjaCh7XG4gICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlldztcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgTWFzdGVyeUNoZWNrVmlldyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwic3R1ZGVudFwiOiBzdHVkZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlc3VsdHNcIjogcmVzdWx0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJrbGFzc1wiOiBrbGFzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdWJ0ZXN0c1wiOiBzdWJ0ZXN0Q29sbGVjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucHJvZ3Jlc3NSZXBvcnQgPSBmdW5jdGlvbihzdHVkZW50SWQsIGtsYXNzSWQpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIudmVyaWZ5KHtcbiAgICAgIGlzQXV0aGVudGljYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhZnRlckZldGNoLCBzdHVkZW50LCBzdHVkZW50cztcbiAgICAgICAgYWZ0ZXJGZXRjaCA9IGZ1bmN0aW9uKHN0dWRlbnQsIHN0dWRlbnRzKSB7XG4gICAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAgIGtsYXNzID0gbmV3IEtsYXNzKHtcbiAgICAgICAgICAgIFwiX2lkXCI6IGtsYXNzSWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4ga2xhc3MuZmV0Y2goe1xuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oa2xhc3MpIHtcbiAgICAgICAgICAgICAgdmFyIGFsbFN1YnRlc3RzO1xuICAgICAgICAgICAgICBhbGxTdWJ0ZXN0cyA9IG5ldyBTdWJ0ZXN0cztcbiAgICAgICAgICAgICAgcmV0dXJuIGFsbFN1YnRlc3RzLmZldGNoKHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihhbGxTdWJ0ZXN0cykge1xuICAgICAgICAgICAgICAgICAgdmFyIGFsbFJlc3VsdHMsIHN1YnRlc3RzO1xuICAgICAgICAgICAgICAgICAgc3VidGVzdHMgPSBuZXcgU3VidGVzdHMoYWxsU3VidGVzdHMud2hlcmUoe1xuICAgICAgICAgICAgICAgICAgICBcImN1cnJpY3VsdW1JZFwiOiBrbGFzcy5nZXQoXCJjdXJyaWN1bHVtSWRcIiksXG4gICAgICAgICAgICAgICAgICAgIFwicmVwb3J0VHlwZVwiOiBcInByb2dyZXNzXCJcbiAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgIGFsbFJlc3VsdHMgPSBuZXcgS2xhc3NSZXN1bHRzO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbFJlc3VsdHMuZmV0Y2goe1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGksIGxlbiwgcmVmLCByZWYxLCByZXN1bHQsIHJlc3VsdHMsIHJlc3VsdHNGcm9tQ3VycmVudFN0dWRlbnRzLCBzdHVkZW50SWRzLCB2aWV3O1xuICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBuZXcgS2xhc3NSZXN1bHRzKGNvbGxlY3Rpb24ud2hlcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJrbGFzc0lkXCI6IGtsYXNzSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJlcG9ydFR5cGVcIjogXCJwcm9ncmVzc1wiXG4gICAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHN0dWRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R1ZGVudHMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R1ZGVudElkcyA9IHN0dWRlbnRzLnBsdWNrKFwiX2lkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0c0Zyb21DdXJyZW50U3R1ZGVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZiA9IHJlc3VsdHMubW9kZWxzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlZltpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZjEgPSByZXN1bHQuZ2V0KFwic3R1ZGVudElkXCIpLCBpbmRleE9mLmNhbGwoc3R1ZGVudElkcywgcmVmMSkgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHNGcm9tQ3VycmVudFN0dWRlbnRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyA9IG5ldyBLbGFzc1Jlc3VsdHMocmVzdWx0c0Zyb21DdXJyZW50U3R1ZGVudHMpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IFByb2dyZXNzVmlldyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInN1YnRlc3RzXCI6IHN1YnRlc3RzLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHVkZW50XCI6IHN0dWRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJlc3VsdHNcIjogcmVzdWx0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwia2xhc3NcIjoga2xhc3NcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHN0dWRlbnRJZCAhPT0gXCJhbGxcIikge1xuICAgICAgICAgIHN0dWRlbnQgPSBuZXcgU3R1ZGVudCh7XG4gICAgICAgICAgICBcIl9pZFwiOiBzdHVkZW50SWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gc3R1ZGVudC5mZXRjaCh7XG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFmdGVyRmV0Y2goc3R1ZGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R1ZGVudHMgPSBuZXcgU3R1ZGVudHM7XG4gICAgICAgICAgcmV0dXJuIHN0dWRlbnRzLmZldGNoKHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gYWZ0ZXJGZXRjaChudWxsLCBzdHVkZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmVkaXRTdWJ0ZXN0ID0gZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIudmVyaWZ5KHtcbiAgICAgIGlzQWRtaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3VidGVzdDtcbiAgICAgICAgaWQgPSBVdGlscy5jbGVhblVSTChpZCk7XG4gICAgICAgIHN1YnRlc3QgPSBuZXcgU3VidGVzdCh7XG4gICAgICAgICAgX2lkOiBpZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1YnRlc3QuZmV0Y2goe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKG1vZGVsLCByZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIGFzc2Vzc21lbnQ7XG4gICAgICAgICAgICBhc3Nlc3NtZW50ID0gbmV3IEFzc2Vzc21lbnQoe1xuICAgICAgICAgICAgICBcIl9pZFwiOiBzdWJ0ZXN0LmdldChcImFzc2Vzc21lbnRJZFwiKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYXNzZXNzbWVudC5mZXRjaCh7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdWJ0ZXN0cywgc3VidGVzdHNQcmltZVRoZVB1bXA7XG4gICAgICAgICAgICAgICAgc3VidGVzdHNQcmltZVRoZVB1bXAgPSBuZXcgU3VidGVzdHM7XG4gICAgICAgICAgICAgICAgc3VidGVzdHNQcmltZVRoZVB1bXAuZmV0Y2goe1xuICAgICAgICAgICAgICAgICAga2V5OiBcInNcIiArIGFzc2Vzc21lbnQuaWQsXG4gICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiU3VidGVzdHNQcmltZVRoZVB1bXAgc3VjY2VzcyBjYWxsYmFjayBjYWxsZWRcIik7XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coXCJTdWJ0ZXN0c1ByaW1lVGhlUHVtcCBlcnJvciBjYWxsYmFjayBjYWxsZWRcIik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc3VidGVzdHMgPSBuZXcgU3VidGVzdHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YnRlc3RzLmZldGNoKHtcbiAgICAgICAgICAgICAgICAgIGtleTogXCJzXCIgKyBhc3Nlc3NtZW50LmlkLFxuICAgICAgICAgICAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXc7XG4gICAgICAgICAgICAgICAgICAgICAgdmlldyA9IG5ldyBTdWJ0ZXN0RWRpdFZpZXcoe1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IG1vZGVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VidGVzdHM6IHN1YnRlc3RzLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXNzbWVudDogYXNzZXNzbWVudFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgfSkodGhpcylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBpc1VzZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5sYW5kaW5nKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5lZGl0S2xhc3NTdWJ0ZXN0ID0gZnVuY3Rpb24oaWQpIHtcbiAgICB2YXIgb25TdWNjZXNzO1xuICAgIG9uU3VjY2VzcyA9IGZ1bmN0aW9uKHN1YnRlc3QsIGN1cnJpY3VsdW0sIHF1ZXN0aW9ucykge1xuICAgICAgdmFyIHZpZXc7XG4gICAgICBpZiAocXVlc3Rpb25zID09IG51bGwpIHtcbiAgICAgICAgcXVlc3Rpb25zID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZpZXcgPSBuZXcgS2xhc3NTdWJ0ZXN0RWRpdFZpZXcoe1xuICAgICAgICBtb2RlbDogc3VidGVzdCxcbiAgICAgICAgY3VycmljdWx1bTogY3VycmljdWx1bSxcbiAgICAgICAgcXVlc3Rpb25zOiBxdWVzdGlvbnNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHZtLnNob3codmlldyk7XG4gICAgfTtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIudmVyaWZ5KHtcbiAgICAgIGlzQWRtaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3VidGVzdDtcbiAgICAgICAgaWQgPSBVdGlscy5jbGVhblVSTChpZCk7XG4gICAgICAgIHN1YnRlc3QgPSBuZXcgU3VidGVzdCh7XG4gICAgICAgICAgX2lkOiBpZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1YnRlc3QuZmV0Y2goe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGN1cnJpY3VsdW07XG4gICAgICAgICAgICBjdXJyaWN1bHVtID0gbmV3IEN1cnJpY3VsdW0oe1xuICAgICAgICAgICAgICBcIl9pZFwiOiBzdWJ0ZXN0LmdldChcImN1cnJpY3VsdW1JZFwiKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY3VycmljdWx1bS5mZXRjaCh7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBxdWVzdGlvbnM7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnRlc3QuZ2V0KFwicHJvdG90eXBlXCIpID09PSBcInN1cnZleVwiKSB7XG4gICAgICAgICAgICAgICAgICBxdWVzdGlvbnMgPSBuZXcgUXVlc3Rpb25zO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHF1ZXN0aW9ucy5mZXRjaCh7XG4gICAgICAgICAgICAgICAgICAgIGtleTogY3VycmljdWx1bS5pZCxcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25zID0gbmV3IFF1ZXN0aW9ucyhxdWVzdGlvbnMud2hlcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdWJ0ZXN0SWRcIjogc3VidGVzdC5pZFxuICAgICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb25TdWNjZXNzKHN1YnRlc3QsIGN1cnJpY3VsdW0sIHF1ZXN0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gb25TdWNjZXNzKHN1YnRlc3QsIGN1cnJpY3VsdW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBpc1VzZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLnJvdXRlci5sYW5kaW5nKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5lZGl0UXVlc3Rpb24gPSBmdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBZG1pbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBxdWVzdGlvbjtcbiAgICAgICAgaWQgPSBVdGlscy5jbGVhblVSTChpZCk7XG4gICAgICAgIHF1ZXN0aW9uID0gbmV3IFF1ZXN0aW9uKHtcbiAgICAgICAgICBfaWQ6IGlkXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcXVlc3Rpb24uZmV0Y2goe1xuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHF1ZXN0aW9uLCByZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIGFzc2Vzc21lbnQ7XG4gICAgICAgICAgICBhc3Nlc3NtZW50ID0gbmV3IEFzc2Vzc21lbnQoe1xuICAgICAgICAgICAgICBcIl9pZFwiOiBxdWVzdGlvbi5nZXQoXCJhc3Nlc3NtZW50SWRcIilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGFzc2Vzc21lbnQuZmV0Y2goe1xuICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3VidGVzdDtcbiAgICAgICAgICAgICAgICBzdWJ0ZXN0ID0gbmV3IFN1YnRlc3Qoe1xuICAgICAgICAgICAgICAgICAgXCJfaWRcIjogcXVlc3Rpb24uZ2V0KFwic3VidGVzdElkXCIpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YnRlc3QuZmV0Y2goe1xuICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2aWV3O1xuICAgICAgICAgICAgICAgICAgICB2aWV3ID0gbmV3IFF1ZXN0aW9uRWRpdFZpZXcoe1xuICAgICAgICAgICAgICAgICAgICAgIFwicXVlc3Rpb25cIjogcXVlc3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgXCJzdWJ0ZXN0XCI6IHN1YnRlc3QsXG4gICAgICAgICAgICAgICAgICAgICAgXCJhc3Nlc3NtZW50XCI6IGFzc2Vzc21lbnRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGlzVXNlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBUYW5nZXJpbmUucm91dGVyLmxhbmRpbmcoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmVkaXRLbGFzc1F1ZXN0aW9uID0gZnVuY3Rpb24oaWQpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIudmVyaWZ5KHtcbiAgICAgIGlzQWRtaW46IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcXVlc3Rpb247XG4gICAgICAgIGlkID0gVXRpbHMuY2xlYW5VUkwoaWQpO1xuICAgICAgICBxdWVzdGlvbiA9IG5ldyBRdWVzdGlvbih7XG4gICAgICAgICAgXCJfaWRcIjogaWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBxdWVzdGlvbi5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocXVlc3Rpb24sIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB2YXIgY3VycmljdWx1bTtcbiAgICAgICAgICAgIGN1cnJpY3VsdW0gPSBuZXcgQ3VycmljdWx1bSh7XG4gICAgICAgICAgICAgIFwiX2lkXCI6IHF1ZXN0aW9uLmdldChcImN1cnJpY3VsdW1JZFwiKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY3VycmljdWx1bS5mZXRjaCh7XG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBzdWJ0ZXN0O1xuICAgICAgICAgICAgICAgIHN1YnRlc3QgPSBuZXcgU3VidGVzdCh7XG4gICAgICAgICAgICAgICAgICBcIl9pZFwiOiBxdWVzdGlvbi5nZXQoXCJzdWJ0ZXN0SWRcIilcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VidGVzdC5mZXRjaCh7XG4gICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZXc7XG4gICAgICAgICAgICAgICAgICAgIHZpZXcgPSBuZXcgUXVlc3Rpb25FZGl0Vmlldyh7XG4gICAgICAgICAgICAgICAgICAgICAgXCJxdWVzdGlvblwiOiBxdWVzdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICBcInN1YnRlc3RcIjogc3VidGVzdCxcbiAgICAgICAgICAgICAgICAgICAgICBcImFzc2Vzc21lbnRcIjogY3VycmljdWx1bVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZtLnNob3codmlldyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5sb2dpbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgaXNBdXRoZW50aWNhdGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFRhbmdlcmluZS5yb3V0ZXIubGFuZGluZygpO1xuICAgICAgfSxcbiAgICAgIGlzVW5yZWdpc3RlcmVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHNob3dWaWV3O1xuICAgICAgICBzaG93VmlldyA9IGZ1bmN0aW9uKHVzZXJzKSB7XG4gICAgICAgICAgdmFyIHZpZXc7XG4gICAgICAgICAgaWYgKHVzZXJzID09IG51bGwpIHtcbiAgICAgICAgICAgIHVzZXJzID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIHZpZXcgPSBuZXcgTG9naW5WaWV3KHtcbiAgICAgICAgICAgIHVzZXJzOiB1c2Vyc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc2hvd1ZpZXcoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmxvZ291dCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUYW5nZXJpbmUudXNlci5sb2dvdXQoKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmFjY291bnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoVGFuZ2VyaW5lLmRiX25hbWUgIT09IFwidGFuZ2VyaW5lXCIpIHtcbiAgICAgIHJldHVybiB3aW5kb3cubG9jYXRpb24gPSBUYW5nZXJpbmUuc2V0dGluZ3MudXJsSW5kZXgoXCJ0cnVua1wiLCBcImFjY291bnRcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBUYW5nZXJpbmUudXNlci52ZXJpZnkoe1xuICAgICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB2aWV3O1xuICAgICAgICAgIHZpZXcgPSBuZXcgQWNjb3VudFZpZXcoe1xuICAgICAgICAgICAgdXNlcjogVGFuZ2VyaW5lLnVzZXJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gdm0uc2hvdyh2aWV3KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuc2V0dGluZ3MgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLnVzZXIudmVyaWZ5KHtcbiAgICAgIGlzQXV0aGVudGljYXRlZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2aWV3O1xuICAgICAgICB2aWV3ID0gbmV3IFNldHRpbmdzVmlldztcbiAgICAgICAgcmV0dXJuIHZtLnNob3codmlldyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5sb2dzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLnZlcmlmeSh7XG4gICAgICBpc0F1dGhlbnRpY2F0ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbG9ncztcbiAgICAgICAgbG9ncyA9IG5ldyBMb2dzO1xuICAgICAgICByZXR1cm4gbG9ncy5mZXRjaCh7XG4gICAgICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHZhciB2aWV3O1xuICAgICAgICAgICAgICB2aWV3ID0gbmV3IExvZ1ZpZXcoe1xuICAgICAgICAgICAgICAgIGxvZ3M6IGxvZ3NcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiB2bS5zaG93KHZpZXcpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KSh0aGlzKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLnRyYW5zZmVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGdldFZhcnMsIG5hbWU7XG4gICAgZ2V0VmFycyA9IFV0aWxzLiRfR0VUKCk7XG4gICAgbmFtZSA9IGdldFZhcnMubmFtZTtcbiAgICByZXR1cm4gJC5jb3VjaC5sb2dvdXQoe1xuICAgICAgc3VjY2VzczogKGZ1bmN0aW9uKF90aGlzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAkLmNvb2tpZShcIkF1dGhTZXNzaW9uXCIsIG51bGwpO1xuICAgICAgICAgIHJldHVybiAkLmNvdWNoLmxvZ2luKHtcbiAgICAgICAgICAgIFwibmFtZVwiOiBuYW1lLFxuICAgICAgICAgICAgXCJwYXNzd29yZFwiOiBuYW1lLFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIFRhbmdlcmluZS5yb3V0ZXIubGFuZGluZygpO1xuICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICQuY291Y2guc2lnbnVwKHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogbmFtZSxcbiAgICAgICAgICAgICAgICBcInJvbGVzXCI6IFtcIl9hZG1pblwiXVxuICAgICAgICAgICAgICB9LCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdXNlcjtcbiAgICAgICAgICAgICAgICAgIHVzZXIgPSBuZXcgVXNlcjtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB1c2VyLnNhdmUoe1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcInRhbmdlcmluZS51c2VyOlwiICsgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgXCJyb2xlc1wiOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgXCJmcm9tXCI6IFwidGNcIlxuICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICB3YWl0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5jb3VjaC5sb2dpbih7XG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicGFzc3dvcmRcIjogbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBUYW5nZXJpbmUucm91dGVyLmxhbmRpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBVdGlscy5zdGlja3koXCJFcnJvciB0cmFuc2ZlcmluZyB1c2VyLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH0pKHRoaXMpXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcblxufSkoQmFja2JvbmUuUm91dGVyKTtcblxuIiwiVGFuZ2VyaW5lLmxvY2FsZXNbXCJlbi1VU1wiXT17dHJhbnNsYXRpb246e1RhbmdlcmluZTp7bWVzc2FnZTp7c2F2ZV9lcnJvcjpcIlNhdmUgZXJyb3JcIixzYXZlZDpcIlNhdmVkXCJ9LG5hdmlnYXRpb246e2J1dHRvbjp7YmFjazpcIkJhY2tcIn19LGFjdGlvbnM6e2J1dHRvbjp7c2F2ZTpcIlNhdmVcIn19fSxUYWJsZXRNYW5hZ2VyVmlldzp7bWVzc2FnZTp7Zm91bmQ6XCJfX2NvdW50X18gdGFibGV0cyBmb3VuZC5cIixkZXRlY3Rpbmc6XCJQbGVhc2Ugd2FpdCwgZGV0ZWN0aW5nIHRhYmxldHMuLi5cIixzZWFyY2hpbmc6XCJTZWFyY2hpbmcuIF9fcGVyY2VudGFnZV9fJSBjb21wbGV0ZS5cIixjb25maXJtX3B1bGw6XCJDb25maXJtIF9fZm91bmRfXyB0YWJsZXRzIGZvdW5kLiBTdGFydCBkYXRhIHB1bGw/XCIscHVsbF9zdGF0dXM6XCJQdWxsaW5nIGZyb20gX190YWJsZXRDb3VudF9fIHRhYmxldHMuXCIscHVsbF9jb21wbGV0ZTpcIlB1bGwgZmluaXNoZWQuIDxicj5fX3N1Y2Nlc3NmdWxfXyBvdXQgb2YgX190b3RhbF9fIHN1Y2Nlc3NmdWwuXCIsc3luY2luZzpcIlN5bmNpbmc6IDxicj5fX2RvbmVfXyBvdXQgb2YgX190b3RhbF9fLlwiLHN1Y2Nlc3NmdWxfY291bnQ6XCJfX3N1Y2Nlc3NmdWxfXyBvdXQgb2YgIF9fdG90YWxfXyBzdWNjZXNmdWwuXCJ9LGxhYmVsOntzeW5jX2NvbXBsZXRlOlwiU3luYyBDb21wbGV0ZVwifX0sUmVzdWx0c1ZpZXc6e2xhYmVsOntzYXZlX29wdGlvbnM6XCJTYXZlIG9wdGlvbnNcIixhZHZhbmNlZDpcIkFkdmFuY2VkXCIscGFnaW5hdGlvbjpcIlJlc3VsdHMgX19zdGFydF9fLV9fZW5kX18gb2YgX190b3RhbF9fXCIsY2xvdWQ6XCJDbG91ZFwiLGNzdjpcIkNTVlwiLHRhYmxldHM6XCJUYWJsZXRzXCIsc3RhdHVzOlwiU3RhdHVzXCIsc3RhcnRlZDpcIlN0YXJ0ZWRcIixyZXN1bHRzOlwiUmVzdWx0c1wiLGRldGFpbHM6XCJEZXRhaWxzXCIscGFnZTpcIlBhZ2VcIixwZXJfcGFnZTpcInBlciBwYWdlXCJ9LGJ1dHRvbjp7cmVmcmVzaDpcIlJlZnJlc2hcIixkZXRlY3Q6XCJEZXRlY3Qgb3B0aW9uc1wifX0sUmVzdWx0U3VtVmlldzp7YnV0dG9uOntyZXN1bWU6XCJSZXN1bWVcIn0sbWVzc2FnZTp7bm9fcmVzdWx0czpcIk5vIHJlc3VsdHMgeWV0IVwifX0sU2V0dGluZ3NWaWV3OnttZXNzYWdlOnt3YXJuaW5nOlwiUGxlYXNlIGJlIGNhcmVmdWwgd2l0aCB0aGUgZm9sbG93aW5nIHNldHRpbmdzLlwifSxoZWxwOntjb250ZXh0OlwiU2V0cyB0aGUgZ2VuZXJhbCBiZWhhdmlvciBhbmQgYXBwZWFyYW5jZSBvZiBUYW5nZXJpbmUuIERvIG5vdCBjaGFuZ2UgdGhpcyBzZXR0aW5nLlwiLGxhbmd1YWdlOlwiQ29udGFjdCBhIFRhbmdlcmluZSBhZG1pbiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB3aGF0IGxhbmd1YWdlcyBhcmUgY3VycmVudGx5IGF2YWlsYWJsZS5cIixncm91cF9oYW5kbGU6XCJBIGh1bWFuIHJlYWRhYmxlIG5hbWUuIE9ubHkgZm9yIGRpc3BsYXkgcHVycG9zZXMuIEFueSBjaGFuZ2UgaGVyZSB3aWxsIG5vdCBhZmZlY3QgdGhlIGFkZHJlc3Mgb2YgdGhlIGdyb3VwIG9yIGFueSBpbnRlcm5hbCBmdW5jdGlvbmFsaXR5LlwiLGdyb3VwX25hbWU6XCJUaGUgZ3JvdXAgY29ubmVjdGVkIHRvIHRoaXMgaW5zdGFuY2Ugb2YgVGFuZ2VyaW5lLCBhbmQgYW55IEFQS3MgbWFkZSBmcm9tIHRoaXMgaW5zdGFuY2UuXCIsZ3JvdXBfaG9zdDpcIlRoZSBVUkwgb2YgdGhlIHNlcnZlci5cIix1cGxvYWRfcGFzc3dvcmQ6XCJUaGUgcGFzc3dvcmQgZm9yIHVwbG9hZGluZyB0byB5b3VyIGdyb3VwLlwiLGxvZ19ldmVudHM6XCJhcHAsIHVpLCBkYiwgZXJyXCJ9LGxhYmVsOntzZXR0aW5nczpcIlNldHRpbmdzXCIsY29udGV4dDpcIkNvbnRleHRcIixsYW5ndWFnZTpcIkxhbmd1YWdlXCIsZ3JvdXBfaGFuZGxlOlwiR3JvdXAgaGFuZGxlXCIsZ3JvdXBfbmFtZTpcIkdyb3VwIG5hbWVcIixncm91cF9ob3N0OlwiR3JvdXAgaG9zdFwiLHVwbG9hZF9wYXNzd29yZDpcIlVwbG9hZCBwYXNzd29yZFwiLGxvZ19ldmVudHM6XCJMb2cgZXZlbnRzXCJ9fSxSZXN1bHRWaWV3OntsYWJlbDp7YXNzZXNzbWVudF9jb21wbGV0ZTpcIkFzc2Vzc21lbnQgY29tcGxldGVcIixjb21tZW50czpcIkFkZGl0aW9uYWwgY29tbWVudHMgKG9wdGlvbmFsKVwiLHN1YnRlc3RzX2NvbXBsZXRlZDpcIlN1YnRlc3RzIGNvbXBsZXRlZFwifSxtZXNzYWdlOntzYXZlZDpcIlJlc3VsdCBzYXZlZFwiLG5vdF9zYXZlZDpcIk5vdCBzYXZlZCB5ZXRcIn0sYnV0dG9uOntzYXZlOlwiU2F2ZSByZXN1bHRcIixhbm90aGVyOlwiUGVyZm9ybSBhbm90aGVyIGFzc2Vzc21lbnRcIn19LEFzc2Vzc21lbnRNZW51Vmlldzp7YnV0dG9uOntcIm5ld1wiOlwiTmV3XCIsXCJpbXBvcnRcIjpcIkltcG9ydFwiLGFwazpcIkFQS1wiLGdyb3VwczpcIkdyb3Vwc1wiLHVuaXZlcnNhbF91cGxvYWQ6XCJVbml2ZXJzYWwgVXBsb2FkXCIsc3luY190YWJsZXRzOlwiU3luYyB0YWJsZXRzXCIscmVzdWx0czpcIlJlc3VsdHNcIixzYXZlOlwiU2F2ZVwiLGNhbmNlbDpcIkNhbmNlbFwifSxsYWJlbDp7YXNzZXNzbWVudDpcIkFzc2Vzc21lbnRcIixhc3Nlc3NtZW50czpcIkFzc2Vzc21lbnRzXCIsY3VycmljdWx1bTpcIkN1cnJpY3VsdW1cIn19LEdyaWRSdW5WaWV3OntsYWJlbDp7aW5wdXRfbW9kZTpcIklucHV0IE1vZGVcIix3YXNfYXV0b3N0b3BwZWQ6XCJXYXMgYXV0b3N0b3BwZWRcIix0aW1lX3JlbWFpbmluZzpcIlRpbWUgcmVtYWluaW5nXCIsaXRlbV9hdF9zZWNvbmRzOlwiSXRlbSBhdCBfX3NlY29uZHNfXyBzZWNvbmRzXCJ9LG1lc3NhZ2U6e3RvdWNoX2xhc3RfaXRlbTpcIlBsZWFzZSB0b3VjaCBsYXN0IGl0ZW0gcmVhZC5cIix0aW1lX3N0aWxsX3J1bm5pbmc6XCJUaW1lIHN0aWxsIHJ1bm5pbmcuXCIsc3VidGVzdF9ub3RfY29tcGxldGU6XCJTdWJ0ZXN0IG5vdCBjb21wbGV0ZS5cIixhdXRvc3RvcDpcIkF1dG9zdG9wIGFjdGl2YXRlZC4gRGlzY29udGludWUgdGVzdC5cIixhdXRvc3RvcF9jYW5jZWw6XCJBdXRvc3RvcCByZW1vdmVkLiBDb250aW51ZS5cIixsYXN0X2l0ZW1fY29uZmlybTonV2FzIHRoZSBsYXN0IGl0ZW0gXCJfX2l0ZW1fX1wiP1xcbk9rIHRvIGNvbmZpcm0uIENhbmNlbCB0byBwbGFjZSBicmFja2V0Lid9LGJ1dHRvbjp7cmVzdGFydDpcIlJlc3RhcnRcIixzdGFydDpcIlN0YXJ0XCIsc3RvcDpcIlN0b3BcIixtYXJrOlwiTWFya1wiLGxhc3RfYXR0ZW1wdGVkOlwiTGFzdCBhdHRlbXB0ZWRcIixpdGVtX2F0X3NlY29uZHM6XCJJdGVtIGF0IF9fc2Vjb25kc19fIHNlY29uZHNcIn19LFN1YnRlc3RSdW5WaWV3OntidXR0b246e2hlbHA6XCJIZWxwXCIsc2tpcDpcIlNraXBcIixuZXh0OlwiTmV4dFwiLGJhY2s6XCJCYWNrXCJ9fSxEYXRldGltZVJ1blZpZXc6e2xhYmVsOnt5ZWFyOlwiWWVhclwiLG1vbnRoOlwiTW9udGhcIixkYXk6XCJEYXlcIix0aW1lOlwiVGltZVwifX0sQ29uc2VudFJ1blZpZXc6e2xhYmVsOntkZWZhdWx0X2NvbnNlbnRfcHJvbXB0OlwiRG9lcyB0aGUgY2hpbGQgY29uc2VudD9cIixjb25maXJtX25vbmNvbnNlbnQ6XCJDbGljayB0byBjb25maXJtIGNvbnNlbnQgbm90IG9idGFpbmVkLlwifSxidXR0b246e2NvbmZpcm06XCJDb25maXJtXCIseWVzX2NvbnRpbnVlOlwiWWVzLCBjb250aW51ZVwiLG5vX3N0b3A6XCJObywgc3RvcFwifSxtZXNzYWdlOntjb25maXJtOlwiUGxlYXNlIGNvbmZpcm0uXCIsc2VsZWN0OlwiUGxlYXNlIHNlbGVjdCBvbmUuXCJ9fSxJZFJ1blZpZXc6e2xhYmVsOntpZGVudGlmaWVyOlwiUmFuZG9tIGlkZW50aWZpZXJcIn0sYnV0dG9uOntnZW5lcmF0ZTpcIkdlbmVyYXRlXCJ9fSxMb2NhdGlvblJ1blZpZXc6e2J1dHRvbjp7Y2xlYXI6XCJDbGVhclwifSxtZXNzYWdlOnttdXN0X2JlX2ZpbGxlZDpcIl9fbGV2ZWxOYW1lX18gbXVzdCBiZSBmaWxsZWQuXCIscGxlYXNlX3NlbGVjdDpcIlBsZWFzZSBzZWxlY3QgYShuKSBfX2xldmVsTmFtZV9fXCJ9fSxTdXJ2ZXlSdW5WaWV3OntidXR0b246e25leHRfcXVlc3Rpb246XCJOZXh0IHF1ZXN0aW9uXCIscHJldmlvdXNfcXVlc3Rpb246XCJQcmV2aW91cyBxdWVzdGlvblwifSxtZXNzYWdlOntwbGVhc2VfYW5zd2VyOlwiUGxlYXNlIGFuc3dlciB0aGlzIHF1ZXN0aW9uLlwiLG5vdF9lbm91Z2g6XCJTdHVkZW50IGRpZCBub3QgcmVhZCBlbm91Z2ggd29yZHMgdG8gYXNrIGNvbXByZWhlbnNpb24gcXVlc3Rpb25zLlwiLGNvcnJlY3RfZXJyb3JzOlwiUGxlYXNlIGNvcnJlY3QgdGhlIGVycm9ycyBvbiB0aGlzIHBhZ2UuXCJ9fSxOYXZpZ2F0aW9uVmlldzp7bGFiZWw6e3RlYWNoZXI6XCJUZWFjaGVyXCIsdXNlcjpcIlVzZXJcIixlbnVtZXJhdG9yOlwiRW51bWVyYXRvclwiLHN0dWRlbnRfaWQ6XCJTdHVkZW50IElEXCIsdmVyc2lvbjpcIlZlcnNpb25cIn0sYnV0dG9uOntsb2dvdXQ6XCJMb2dvdXRcIixhY2NvdW50OlwiQWNjb3VudFwiLHNldHRpbmdzOlwiU2V0dGluZ3NcIn0saGVscDp7bG9nbzpcIkdvIHRvIG1haW4gc2NyZWVuLlwiLGFjY291bnQ6XCJHbyB0byBhY2NvdW50IHNjcmVlbi5cIn0sbWVzc2FnZTp7aW5jb21wbGV0ZV9tYWluX3NjcmVlbjpcIkFzc2Vzc21lbnQgbm90IGZpbmlzaGVkLiBDb250aW51ZSB0byBtYWluIHNjcmVlbj9cIixpbmNvbXBsZXRlX2xvZ291dDpcIkFzc2Vzc21lbnQgbm90IGZpbmlzaGVkLiBDb250aW51ZSB0byBsb2dvdXQ/XCIsbG9nb3V0X2NvbmZpcm06XCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbG9nb3V0P1wifX0sTG9naW5WaWV3OnttZXNzYWdlOntlcnJvcl9wYXNzd29yZF9pbmNvcnJlY3Q6XCJJbmNvcnJlY3QgcGFzc3dvcmQuXCIsZXJyb3JfcGFzc3dvcmRfZW1wdHk6XCJQbGVhc2UgZW50ZXIgYSBwYXNzd29yZC5cIixlcnJvcl9uYW1lX2VtcHR5OlwiUGxlYXNlIGVudGVyIGEgbmFtZS5cIixlcnJvcl9uYW1lX3Rha2VuOlwiTmFtZSBhbHJlYWR5IHRha2VuLlwiLHBhc3NfbWlzbWF0Y2g6XCJQYXNzd29yZHMgZG8gbm90IG1hdGNoXCJ9LGJ1dHRvbjp7c2lnbl91cDpcIlNpZ24gdXBcIixsb2dpbjpcIkxvZ2luXCIsbG9nb3V0OlwiTG9nb3V0XCJ9LGxhYmVsOntsb2dpbjpcIkxvZ2luXCIsc2lnbl91cDpcIlNpZ24gdXBcIix0ZWFjaGVyOlwiVGVhY2hlciBuYW1lXCIsdXNlcjpcIlVzZXIgbmFtZVwiLGVudW1lcmF0b3I6XCJFbnVtZXJhdG9yIG5hbWVcIixwYXNzd29yZDpcIlBhc3N3b3JkXCIscGFzc3dvcmRfY29uZmlybTpcIkNvbmZpcm0gUGFzc3dvcmRcIn19LFF1ZXN0aW9uc0VkaXRMaXN0RWxlbWVudFZpZXc6e2hlbHA6e2NvcHlfdG86XCJDb3B5IHRvXCIsXCJkZWxldGVcIjpcIkRlbGV0ZVwiLGVkaXQ6XCJFZGl0XCJ9LGJ1dHRvbjp7XCJkZWxldGVcIjpcIkRlbGV0ZVwiLGNhbmNlbDpcIkNhbmNlbFwifSxsYWJlbDp7ZGVsZXRlX2NvbmZpcm06XCJEZWxldGU/XCIsbG9hZGluZzpcIkxvYWRpbmcuLi5cIixzZWxlY3Q6XCJTZWxlY3QgYSBzdWJ0ZXN0XCJ9fSxHcHNSdW5WaWV3OntidXR0b246e2NsZWFyOlwiQ2xlYXJcIn0sbGFiZWw6e2dvb2Q6XCJHb29kXCIsb2s6XCJPa1wiLHBvb3I6XCJQb29yXCIsbWV0ZXJzOlwibWV0ZXJzXCIsbGF0aXR1ZGU6XCJMYXRpdHVkZVwiLGxvbmdpdHVkZTpcIkxvbmdpdHVkZVwiLGFjY3VyYWN5OlwiQWNjdXJhY3lcIixncHNfc3RhdHVzOlwiR1BTIFN0YXR1c1wiLGJlc3RfcmVhZGluZzpcIkJlc3QgcmVhZGluZ1wiLGN1cnJlbnRfcmVhZGluZzpcIkN1cnJlbnQgcmVhZGluZ1wifSxtZXNzYWdlOntncHNfb2s6XCJHUFMgc2lnbmFsIG9rLlwiLGF0dGVtcHQ6XCJBdHRlbXB0ICNfX2NvdW50X19cIixyZXRyeWluZzpcIlJldHJ5aW5nLi4uXCIsc2VhcmNoaW5nOlwiU2VhcmNoaW5nLi4uXCIsbm90X3N1cHBvcnRlZDpcIllvdXIgc3lzdGVtIGRvZXMgbm90IHN1cHBvcnQgZ2VvbG9jYXRpb25zLlwifX0sV2lkZ2V0UnVuVmlldzp7YnV0dG9uOntzYXZlOlwiU2F2ZSByZXN1bHQgdG8gc2VydmVyXCIsc2F2ZWQ6XCJSZXN1bHQgc2F2ZWQgdG8gQ291Y2hkYlwifX19fTtcblRhbmdlcmluZS5sb2NhbGVzLmZyPXt0cmFuc2xhdGlvbjp7VGFuZ2VyaW5lOnttZXNzYWdlOntzYXZlX2Vycm9yOlwiU2F2ZSBlcnJvclwiLHNhdmVkOlwiU2F2ZWRcIn0sbmF2aWdhdGlvbjp7YnV0dG9uOntiYWNrOlwiQmFja1wifX0sYWN0aW9uczp7YnV0dG9uOntzYXZlOlwiU2F2ZVwifX19LFRhYmxldE1hbmFnZXJWaWV3OnttZXNzYWdlOntmb3VuZDpcIl9fY291bnRfXyB0YWJsZXR0ZXMgdHJvdXbDqWVzLlwiLGRldGVjdGluZzpcIlZldWlsbGV6IHBhdGllbnRlciwgZGV0ZWN0aW9uIGRlIHRhYmxldHRlcyBlbiBjb3Vycy4uLlwiLHNlYXJjaGluZzpcIkNoZXJjaGFudDogX19wZXJjZW50YWdlX18lIENvbXBsw6l0w6lcIixjb25maXJtX3B1bGw6XCLDgCBjb25maXJtZXIgLyBfX2ZvdW5kX18gdGFibGV0dGVzIHRyb3V2w6llcy4gQ29tbWVuY2VyIHRpcmFnZSBkZXMgZG9ubsOpZXM/XCIscHVsbF9zdGF0dXM6XCJUaXJhbnQgZMOocyBfX3RhYmxldENvdW50X18gdGFibGV0dGVzLlwiLHB1bGxfY29tcGxldGU6XCJUaXJhZ2UgY29tcGzDqHRlLiBSw6l1c3NpdGUgY2hleiBfX3N1Y2Nlc3NmdWxfXyBwYXJtaSBfX3RvdGFsX18uXCIsc3luY2luZzpcIlN5bmNocm9uaXNhbnQgLyBfX2RvbmVfXyBwYXJtaSBfX3RvdGFsX18uXCIsc3VjY2Vzc2Z1bF9jb3VudDpcIlLDqXVzc2l0ZSBjaGV6IF9fc3VjY2Vzc2Z1bF9fIHBhcm1pIF9fdG90YWxfXy5cIn0sbGFiZWw6e3N5bmNfY29tcGxldGU6XCJTeW5jaHJvbmlzYXRpb24gY29tcGzDqHRlLlwifX0sUmVzdWx0c1ZpZXc6e2xhYmVsOntzYXZlX29wdGlvbnM6XCJNb2RhbGl0w6lzIGTigJllbnJlZ2lzdHJlbWVudCBkaXNwb25pYmxlc1wiLGFkdmFuY2VkOlwiQXZhbmPDqVwiLHBhZ2luYXRpb246XCJSw6lzdWx0YXRzIF9fc3RhcnRfXy1fX2VuZF9fIGRlIF9fdG90YWxfX1wiLGNsb3VkOlwiU2VydmV1clwiLGNzdjpcIkNTVlwiLHRhYmxldHM6XCJUYWJsZXR0ZXNcIixzdGF0dXM6XCLDiXRhdCBhY3R1ZWxcIixzdGFydGVkOlwiRMOpbWFycsOpZVwiLHJlc3VsdHM6XCJSw6lzdWx0YXRzXCIsZGV0YWlsczpcIkTDqXRhaWxzXCIscGFnZTpcIlBhZ2VcIixwZXJfcGFnZTpcInBhciBwYWdlXCJ9LGJ1dHRvbjp7cmVmcmVzaDpcIkFjdHVhbGlzZXJcIixkZXRlY3Q6XCJJZGVudGlmaWVyIHBvc3NpYmlsaXTDqXNcIn19LFJlc3VsdFN1bVZpZXc6e2J1dHRvbjp7cmVzdW1lOlwiUmVwcmVuZHJlXCJ9LG1lc3NhZ2U6e25vX3Jlc3VsdHM6XCJQYXMgZW5jb3JlIGRlIHLDqXN1bHRhdHMgIVwifX0sU2V0dGluZ3NWaWV3OnttZXNzYWdlOnt3YXJuaW5nOlwiUGxlYXNlIGJlIGNhcmVmdWwgd2l0aCB0aGUgZm9sbG93aW5nIHNldHRpbmdzLlwifSxoZWxwOntjb250ZXh0OlwiU2V0cyB0aGUgZ2VuZXJhbCBiZWhhdmlvciBhbmQgYXBwZWFyYW5jZSBvZiBUYW5nZXJpbmUuIERvIG5vdCBjaGFuZ2UgdGhpcyBzZXR0aW5nLlwiLGxhbmd1YWdlOlwiQ29udGFjdCBhIFRhbmdlcmluZSBhZG1pbiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB3aGF0IGxhbmd1YWdlcyBhcmUgY3VycmVudGx5IGF2YWlsYWJsZS5cIixncm91cF9oYW5kbGU6XCJBIGh1bWFuIHJlYWRhYmxlIG5hbWUuIE9ubHkgZm9yIGRpc3BsYXkgcHVycG9zZXMuIEFueSBjaGFuZ2UgaGVyZSB3aWxsIG5vdCBhZmZlY3QgdGhlIGFkZHJlc3Mgb2YgdGhlIGdyb3VwIG9yIGFueSBpbnRlcm5hbCBmdW5jdGlvbmFsaXR5LlwiLGdyb3VwX25hbWU6XCJUaGUgZ3JvdXAgY29ubmVjdGVkIHRvIHRoaXMgaW5zdGFuY2Ugb2YgVGFuZ2VyaW5lLCBhbmQgYW55IEFQS3MgbWFkZSBmcm9tIHRoaXMgaW5zdGFuY2UuXCIsZ3JvdXBfaG9zdDpcIlRoZSBVUkwgb2YgdGhlIHNlcnZlci5cIix1cGxvYWRfcGFzc3dvcmQ6XCJUaGUgcGFzc3dvcmQgZm9yIHVwbG9hZGluZyB0byB5b3VyIGdyb3VwLlwiLGxvZ19ldmVudHM6XCJhcHAsIHVpLCBkYiwgZXJyXCJ9LGxhYmVsOntzZXR0aW5nczpcIlNldHRpbmdzXCIsY29udGV4dDpcIkNvbnRleHRcIixsYW5ndWFnZTpcIkxhbmd1YWdlXCIsZ3JvdXBfaGFuZGxlOlwiR3JvdXAgaGFuZGxlXCIsZ3JvdXBfbmFtZTpcIkdyb3VwIG5hbWVcIixncm91cF9ob3N0OlwiR3JvdXAgaG9zdFwiLHVwbG9hZF9wYXNzd29yZDpcIlVwbG9hZCBwYXNzd29yZFwiLGxvZ19ldmVudHM6XCJMb2cgZXZlbnRzXCJ9fSxBc3Nlc3NtZW50TWVudVZpZXc6e2J1dHRvbjp7XCJuZXdcIjpcIk5vdXZlbGxlXCIsXCJpbXBvcnRcIjpcIkltcG9ydGVyXCIsYXBrOlwiQVBLXCIsZ3JvdXBzOlwiR3JvdXBlc1wiLHVuaXZlcnNhbF91cGxvYWQ6XCJFbnZvaSB1bml2ZXJzZWxcIixzeW5jX3RhYmxldHM6XCJTeW5jaHJvbmlzZXIgdGFibGV0dGVzXCIscmVzdWx0czpcIlLDqXN1bHRhdHNcIixzYXZlOlwiRW5yZWdpc3RyZXJcIixjYW5jZWw6XCJBbm51bGVyXCJ9LGxhYmVsOnthc3Nlc3NtZW50Olwiw4l2YWx1YXRpb25cIixhc3Nlc3NtZW50czpcIsOJdmFsdWF0aW9uc1wiLGN1cnJpY3VsdW06XCJQcm9ncmFtbWVcIn19LFJlc3VsdFZpZXc6e2xhYmVsOnthc3Nlc3NtZW50X2NvbXBsZXRlOlwiVGVzdCBjb21wbMOpdMOpXCIsY29tbWVudHM6XCJDb21tZW50YWlyZXMgw6AgcmFqb3V0ZXIgKGZhY3VsdGF0aWYpXCIsc3VidGVzdHNfY29tcGxldGVkOlwiVMOiY2hlcyBjb21wbMOpdMOpZXNcIn0sbWVzc2FnZTp7c2F2ZWQ6XCJSw6lzdWx0YXRzIEVucmVnaXN0csOpc1wiLG5vdF9zYXZlZDpcIiBQYXMgZW5jb3JlIGVucmVnaXN0csOpc1wifSxidXR0b246e3NhdmU6XCJFbnJlZ2lzdHJlciByw6lzdWx0YXRzXCIsYW5vdGhlcjpcIkZhaXJlIGVuY29yZSB1biB0ZXN0XCJ9fSxHcmlkUnVuVmlldzp7bGFiZWw6e2lucHV0X21vZGU6XCJNb2RlIGQnZW50csOpZVwiLHdhc19hdXRvc3RvcHBlZDpcIkFycsOqdMOpZSBhdXRvbWF0aXF1ZW1lbnRcIix0aW1lX3JlbWFpbmluZzpcIlRlbXBzIHJlc3RhbnRcIn0sbWVzc2FnZTp7dG91Y2hfbGFzdF9pdGVtOlwiVmV1aWxsZXogaW5kaXF1ZXIgbGUgZGVybmllciBpdGVtIHRlbnTDqS5cIix0aW1lX3N0aWxsX3J1bm5pbmc6XCJMZSBjb21wdGUgw6AgcmVib3VycyBjb250aW51ZS5cIixzdWJ0ZXN0X25vdF9jb21wbGV0ZTpcIlTDomNoZSBpbmNvbXBsw6h0ZS5cIixhdXRvc3RvcDpcIkF1dG8tYXJyw6p0IGFjdGl2w6kuIENlc3NleiBsYSB0w6JjaGUuXCIsYXV0b3N0b3BfY2FuY2VsOlwiQXV0by1hcnLDqnQgcmV0aXLDqS4gQ29udGludWV6LlwiLGxhc3RfaXRlbV9jb25maXJtOlwiTGUgZGVybmllciBpdGVtIMOpdGFpdC1pbCBfX2l0ZW1fXz9cXG4gQ29uZmlybWV6IGF2ZWMgT2suIEFubnVsZXogcG91ciBtZXR0cmUgbGUgY3JvY2hldC5cIn0sYnV0dG9uOntyZXN0YXJ0OlwiUmVkw6ltYXJyZXJcIixzdGFydDpcIkTDqW1hcnJlclwiLHN0b3A6XCJBcnLDqnRlclwiLG1hcms6XCJNYXJxdWVyXCIsbGFzdF9hdHRlbXB0ZWQ6XCJEZXJuaWVyIGl0ZW0gZXNzYXnDqVwiLGl0ZW1fYXRfc2Vjb25kczpcIkl0ZW0gw6AgX19zZWNvbmRzX18gc2Vjb25kZXNcIn19LFN1YnRlc3RSdW5WaWV3OntidXR0b246e2hlbHA6XCJBaWRlXCIsc2tpcDpcIlBhc3NlclwiLG5leHQ6XCJQcm9jaGFpbmVcIixiYWNrOlwiUmV0b3VyXCJ9fSxEYXRldGltZVJ1blZpZXc6e2xhYmVsOnt5ZWFyOlwiQW5uw6llXCIsbW9udGg6XCJNb2lzXCIsZGF5OlwiSm91clwiLHRpbWU6XCJIZXVyZVwifX0sQ29uc2VudFJ1blZpZXc6e2xhYmVsOntkZWZhdWx0X2NvbnNlbnRfcHJvbXB0OlwiQ29uc2VudGVtZW50IG9idGVudT9cIixjb25maXJtX25vbmNvbnNlbnQ6XCJDbGlxdWVyIHBvdXIgY29uZmlybWVyIHF1ZSBsZSBjb25zZW50ZW1lbnQgbuKAmWEgcGFzIMOpdMOpIG9idGVudS5cIn0sYnV0dG9uOntjb25maXJtOlwiQ29uZmlybWVyXCIseWVzX2NvbnRpbnVlOlwiT3VpLCBjb250aW51ZXJcIixub19zdG9wOlwiTm9uLCBhcnLDqnRlclwifSxtZXNzYWdlOntjb25maXJtOlwiVmV1aWxsZXogY29uZmlybWVyLlwiLHNlbGVjdDpcIlZldWlsbGV6IGVuIHPDqWxlY3Rpb25uZXIgdW5lLlwifX0sSWRSdW5WaWV3OntsYWJlbDp7aWRlbnRpZmllcjpcIklkZW50aWZpYW50IGFsw6lhdG9pcmVcIn0sYnV0dG9uOntnZW5lcmF0ZTpcIkfDqW7DqXJlclwifX0sTG9jYXRpb25SdW5WaWV3OntidXR0b246e2NsZWFyOlwiVmlkZXJcIn0sbWVzc2FnZTp7cGxlYXNlX3NlbGVjdDpcIlZldWlsbGV6IHPDqWxlY3Rpb25uZXIgdW4oZSkgX19sZXZlbE5hbWVfX1wiLG11c3RfYmVfZmlsbGVkOlwiX19sZXZlbE5hbWVfXyBkb2l0IMOqdHJlIHJlbXBsaS5cIn19LFN1cnZleVJ1blZpZXc6e2J1dHRvbjp7bmV4dF9xdWVzdGlvbjpcIlByb2NoYWluZSBxdWVzdGlvblwiLHByZXZpb3VzX3F1ZXN0aW9uOlwiUXVlc3Rpb24gcHLDqWPDqWRlbnRlXCJ9LG1lc3NhZ2U6e3BsZWFzZV9hbnN3ZXI6XCJWZXVpbGxleiByw6lwb25kcmUgw6AgY2V0dGUgcXVlc3Rpb24uXCIsbm90X2Vub3VnaDpcIkwnw6lsw6h2ZSBuJ2EgcGFzIGx1IHN1ZmZpc2FtbWVudCBkZSBtb3RzIHBvdXIgbHVpIHBvc2VyIGRlcyBxdWVzdGlvbnMgZGUgY29tcHLDqWhlbnNpb24uXCIsY29ycmVjdF9lcnJvcnM6XCJWZXVpbGxleiBjb3JyaWdlciBsZXMgZXJyZXVycyBzdXIgbGEgcGFnZS5cIn19LE5hdmlnYXRpb25WaWV3OntsYWJlbDp7dGVhY2hlcjpcIkVuc2VpZ25hbnRcIix1c2VyOlwiVXRpbGlzYXRldXJcIixlbnVtZXJhdG9yOlwiw4ludW3DqXJhdGV1clwiLHN0dWRlbnRfaWQ6XCJJZGVudGlmaWFudCBkZSBsJ8OpbMOodmVcIix2ZXJzaW9uOlwiVmVyc2lvblwifSxidXR0b246e2xvZ291dDpcIkZlcm1ldHVyZVwiLGFjY291bnQ6XCJDb21wdGVcIixzZXR0aW5nczpcIlBhcmFtw6h0cmVzXCJ9LGhlbHA6e2xvZ286XCJBbGxlciDDoCBsJ8OpY3JhbiBwcmluY2lwYWwuXCIsYWNjb3VudDpcIkFsbGVyIMOgIGwnw6ljcmFuIGRlIGNvbXB0ZXMuXCJ9LG1lc3NhZ2U6e2luY29tcGxldGVfbWFpbl9zY3JlZW46XCJUZXN0IGluY29tcGxldC4gQ29udGludWVyIMOgIGwnw6ljcmFuIHByaW5jaXBhbD9cIixpbmNvbXBsZXRlX2xvZ291dDpcIlRlc3QgaW5jb21wbGV0LiBDb250aW51ZXIgw6AgbCfDqWNyYW4gZGUgZmVybWV0dXJlP1wiLGxvZ291dF9jb25maXJtOlwiVm91cyDDqnRlcyBzw7tyIGRlIHZvdWxvaXIgZmVybWVyIGxhIHNlc3Npb24/XCJ9fSxMb2dpblZpZXc6e21lc3NhZ2U6e2Vycm9yX3Bhc3N3b3JkX2luY29ycmVjdDpcIk1vdCBkZSBwYXNzZSBpbmNvcnJlY3QuXCIsZXJyb3JfcGFzc3dvcmRfZW1wdHk6XCJWZXVpbGxleiBmb3VybmlyIHVuIG1vdCBkZSBwYXNzZS5cIixlcnJvcl9uYW1lX2VtcHR5OlwiVmV1aWxsZXogZm91cm5pciB1biBub20uXCIsZXJyb3JfbmFtZV90YWtlbjpcIk5vbSBkw6lqw6AgcHJpcy5cIixwYXNzX21pc21hdGNoOlwiTGVzIG1vdHMgZGUgcGFzc2UgbmUgY29ycmVzcG9uZGVudCBwYXMuXCJ9LGJ1dHRvbjp7c2lnbl91cDpcIkFib25uZW1lbnRcIixsb2dpbjpcIk91dmVydHVyZVwifSxsYWJlbDp7bG9naW46XCJPdXZlcnR1cmVcIixzaWduX3VwOlwiQWJvbm5lbWVudFwiLHRlYWNoZXI6XCJOb20gZCdlbnNlaWduYW50XCIsdXNlcjpcIk5vbSBkJ3V0aWxpc2F0ZXVyXCIsZW51bWVyYXRvcjpcIk5vbSBkJ8OpbnVtw6lyYXRldXJcIixwYXNzd29yZDpcIk1vdCBkZSBwYXNzZVwiLHBhc3N3b3JkX2NvbmZpcm06XCJDb25maXJtZXogbGUgbW90IGRlIHBhc3NlXCJ9fSxRdWVzdGlvbnNFZGl0TGlzdEVsZW1lbnRWaWV3OntoZWxwOntjb3B5X3RvOlwiQ29waWVyIHZlcnNcIixcImRlbGV0ZVwiOlwiw4lmZmFjZXJcIixlZGl0OlwiTW9kaWZpZXJcIn0sYnV0dG9uOntcImRlbGV0ZVwiOlwiw4lmZmFjZXJcIixjYW5jZWw6XCJBbm51bGVyXCJ9LGxhYmVsOntkZWxldGVfY29uZmlybTpcIsOJZmZhY2VyP1wiLGxvYWRpbmc6XCJDaGFyZ2VtZW50IGVuIGNvdXJz4oCmXCIsc2VsZWN0OlwiU8OpbGVjdGlvbm5lciB1bmUgdMOiY2hlXCJ9fSxHcHNSdW5WaWV3OntidXR0b246e2NsZWFyOlwiVmlkZXJcIn0sbGFiZWw6e2dvb2Q6XCJCb25cIixvazpcIk9rYXlcIixwb29yOlwiTWF1dmFpc1wiLG1ldGVyczpcIm3DqHRyZVwiLGxhdGl0dWRlOlwiTGF0aXR1ZGVcIixsb25naXR1ZGU6XCJMb25naXR1ZGVcIixhY2N1cmFjeTpcIkV4YWN0aXR1ZGVcIixncHNfc3RhdHVzOlwiw4l0YXQgR1BTXCIsYmVzdF9yZWFkaW5nOlwiTWVpbGxldXJlIGluZGljYXRpb25cIixjdXJyZW50X3JlYWRpbmc6XCJJbmRpY2F0aW9uIGFjdHVlbGxlXCJ9LG1lc3NhZ2U6e2dwc19vazpcIlNpZ25hbCBHUFMgb2suXCIsYXR0ZW1wdDpcIkVzc2FpIF9fY291bnRfX1wiLHJldHJ5aW5nOlwiUsOpZXNzYXlhbnTigKZcIixzZWFyY2hpbmc6XCJDaGVyY2hhbnTigKZcIixub3Rfc3VwcG9ydGVkOlwiVm90cmUgc3lzdMOobWUgbidlc3QgcGFzIGNvbXBhdGlibGUgYXZlYyBsYSBnw6lvbG9jYWxpc2F0aW9uLlwifX19fTsiLCIjIFRoaXMgZmlsZSBsb2FkcyB0aGUgbW9zdCBiYXNpYyBzZXR0aW5ncyByZWxhdGVkIHRvIFRhbmdlcmluZSBhbmQga2lja3Mgb2ZmIEJhY2tib25lJ3Mgcm91dGVyLlxuIyAgICogVGhlIGRvYyBgY29uZmlndXJhdGlvbmAgaG9sZHMgdGhlIG1ham9yaXR5IG9mIHNldHRpbmdzLlxuIyAgICogVGhlIFNldHRpbmdzIG9iamVjdCBjb250YWlucyBtYW55IGNvbnZlbmllbmNlIGZ1bmN0aW9ucyB0aGF0IHVzZSBjb25maWd1cmF0aW9uJ3MgZGF0YS5cbiMgICAqIFRlbXBsYXRlcyBzaG91bGQgY29udGFpbiBvYmplY3RzIGFuZCBjb2xsZWN0aW9ucyBvZiBvYmplY3RzIHJlYWR5IHRvIGJlIHVzZWQgYnkgYSBGYWN0b3J5LlxuIyBBbHNvIGludGlhbGl6ZWQgaGVyZSBhcmU6IEJhY2tib25lLmpzLCBhbmQgalF1ZXJ5LmkxOG5cbiMgQW55dGhpbmcgdGhhdCBmYWlscyBiYWQgaGVyZSBzaG91bGQgcHJvYmFibHkgYmUgZmFpbGluZyBpbiBmcm9udCBvZiB0aGUgdXNlci5cblxuIyBVdGlscy5kaXNhYmxlQ29uc29sZUxvZygpXG4jIFV0aWxzLmRpc2FibGVDb25zb2xlQXNzZXJ0KClcblxuVGFuZ2VyaW5lLmJvb3RTZXF1ZW5jZSA9XG5cbiAgIyBCYXNpYyBjb25maWd1cmF0aW9uXG5cbiAgYmFzaWNDb25maWcgOiAoY2FsbGJhY2spIC0+XG5cbiAgICAkLmNvdWNoLnVybFByZWZpeCA9ICcvZGInXG5cbiAgICBUYW5nZXJpbmUuZGJfbmFtZSAgICA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdChcIi9cIilbMl1cbiAgICBUYW5nZXJpbmUuZGVzaWduX2RvYyA9IFwib2phaVwiXG5cbiAgICAjIExvY2FsIHRhbmdlcmluZSBkYXRhYmFzZSBoYW5kbGVcbiAgICBUYW5nZXJpbmUuJGRiID0gJC5jb3VjaC5kYihUYW5nZXJpbmUuZGJfbmFtZSlcblxuICAgIHVybFBhcnNlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpXG4gICAgdXJsUGFyc2VyLmhyZWYgPSB3aW5kb3cubG9jYXRpb25cblxuICAgICMgQmFja2JvbmUgY29uZmlndXJhdGlvblxuICAgIEJhY2tib25lLmNvdWNoX2Nvbm5lY3Rvci5jb25maWcuYmFzZV91cmwgID0gXCIje3VybFBhcnNlci5wcm90b2NvbH0vLyN7dXJsUGFyc2VyLmhvc3R9L2RiXCJcbiAgICBCYWNrYm9uZS5jb3VjaF9jb25uZWN0b3IuY29uZmlnLmRiX25hbWUgICA9IFRhbmdlcmluZS5kYl9uYW1lXG4gICAgQmFja2JvbmUuY291Y2hfY29ubmVjdG9yLmNvbmZpZy5kZG9jX25hbWUgPSBUYW5nZXJpbmUuZGVzaWduX2RvY1xuICAgIEJhY2tib25lLmNvdWNoX2Nvbm5lY3Rvci5jb25maWcuZ2xvYmFsX2NoYW5nZXMgPSBmYWxzZVxuXG4gICAgIyBzZXQgdW5kZXJzY29yZSdzIHRlbXBsYXRlIGVuZ2luZSB0byBhY2NlcHQgaGFuZGxlYmFyLXN0eWxlIHZhcmlhYmxlc1xuICAgIF8udGVtcGxhdGVTZXR0aW5ncyA9IGludGVycG9sYXRlIDogL1xce1xceyguKz8pXFx9XFx9L2dcblxuICAgIGNhbGxiYWNrKClcblxuICAjIEdyYWIgb3VyIHN5c3RlbSBjb25maWcgZG9jLiBUaGVzZSBnZW5lcmFsbHkgZG9uJ3QgY2hhbmdlIHZlcnkgb2Z0ZW4gdW5sZXNzXG4gICMgbWFqb3Igc3lzdGVtIGNoYW5nZXMgYXJlIHJlcXVpcmVkLiBOZXcgc2VydmVycywgZXRjLlxuICBmZXRjaENvbmZpZ3VyYXRpb246ICggY2FsbGJhY2sgKSAtPlxuXG4gICAgVGFuZ2VyaW5lLmNvbmZpZyA9IG5ldyBDb25maWcgXCJfaWRcIiA6IFwiY29uZmlndXJhdGlvblwiXG4gICAgVGFuZ2VyaW5lLmNvbmZpZy5mZXRjaFxuICAgICAgZXJyb3IgICA6IC0+IGFsZXJ0IFwiQ291bGQgbm90IGZldGNoIGNvbmZpZ3VyYXRpb25cIlxuICAgICAgc3VjY2VzcyA6IGNhbGxiYWNrXG5cblxuXG4gICMgZ2V0IG91ciBsb2NhbCBUYW5nZXJpbmUgc2V0dGluZ3NcbiAgIyB0aGVzZSBkbyB0ZW5kIHRvIGNoYW5nZSBkZXBlbmRpbmcgb24gdGhlIHBhcnRpY3VsYXIgaW5zdGFsbCBvZiB0aGVcbiAgZmV0Y2hTZXR0aW5ncyA6ICggY2FsbGJhY2sgKSAtPlxuICAgIFRhbmdlcmluZS5zZXR0aW5ncyA9IG5ldyBTZXR0aW5ncyBcIl9pZFwiIDogXCJzZXR0aW5nc1wiXG4gICAgVGFuZ2VyaW5lLnNldHRpbmdzLmZldGNoXG4gICAgICBzdWNjZXNzOiBjYWxsYmFja1xuXG4gICAgICBlcnJvcjogLT5cbiAgICAgICAgZGVmYXVsdFNldHRpbmdzID0gVGFuZ2VyaW5lLmNvbmZpZy5nZXQoXCJkZWZhdWx0c1wiKT8uc2V0dGluZ3NcbiAgICAgICAgYWxlcnQgXCJNaXNzaW5nIGRlZmF1bHQgc2V0dGluZ3MgaW4gY29uZmlndXJhdGlvblwiIHVubGVzcyBkZWZhdWx0U2V0dGluZ3M/XG5cbiAgICAgICAgVGFuZ2VyaW5lLnNldHRpbmdzLnNldCBkZWZhdWx0U2V0dGluZ3MgIyBAdG9kbywgZmlndXJlIG91dCB3aHkgc2F2ZSwgb25seSBjYWxscyBiZWZvcmVzYXZlXG4gICAgICAgIFRhbmdlcmluZS5zZXR0aW5ncy5zYXZlIG51bGwsXG4gICAgICAgICAgZXJyb3I6IC0+IGFsZXJ0IFwiQ291bGQgbm90IHNhdmUgZGVmYXVsdCBzZXR0aW5nc1wiXG4gICAgICAgICAgc3VjY2VzczogY2FsbGJhY2tcblxuXG4gICMgZm9yIHVwZ3JhZGVzXG4gIGd1YXJhbnRlZUluc3RhbmNlSWQ6ICggY2FsbGJhY2sgKSAtPlxuICAgIHVubGVzcyBUYW5nZXJpbmUuc2V0dGluZ3MuaGFzKFwiaW5zdGFuY2VJZFwiKVxuICAgICAgVGFuZ2VyaW5lLnNldHRpbmdzLnNhdmVcbiAgICAgICAgXCJpbnN0YW5jZUlkXCIgOiBVdGlscy5odW1hbkdVSUQoKVxuICAgICAgLFxuICAgICAgICBlcnJvcjogLT4gYWxlcnQgXCJDb3VsZCBub3Qgc2F2ZSBuZXcgSW5zdGFuY2UgSWRcIlxuICAgICAgICBzdWNjZXNzOiBjYWxsYmFja1xuICAgIGVsc2VcbiAgICAgIGNhbGxiYWNrKClcblxuICAjIGxvYWQgdGVtcGxhdGVzXG4gIGZldGNoVGVtcGxhdGVzOiAoIGNhbGxiYWNrICkgLT5cbiAgICAoVGFuZ2VyaW5lLnRlbXBsYXRlcyA9IG5ldyBUZW1wbGF0ZSBcIl9pZFwiIDogXCJ0ZW1wbGF0ZXNcIikuZmV0Y2hcbiAgICAgIGVycm9yOiAtPiBhbGVydCBcIkNvdWxkIG5vdCBsb2FkIHRlbXBsYXRlcy5cIlxuICAgICAgc3VjY2VzczogY2FsbGJhY2tcblxuXG5cbiAgZG9jdW1lbnRSZWFkeTogKCBjYWxsYmFjayApIC0+ICQgLT5cblxuICAgICMkKFwiPGJ1dHRvbiBpZD0ncmVsb2FkJz5yZWxvYWQgbWU8L2J1dHRvbj5cIikuYXBwZW5kVG8oXCIjZm9vdGVyXCIpLmNsaWNrIC0+IGRvY3VtZW50LmxvY2F0aW9uLnJlbG9hZCgpXG5cbiAgICBjYWxsYmFjaygpXG5cbiAgbG9hZEkxOG46ICggY2FsbGJhY2sgKSAtPlxuICAgIGkxOG4uaW5pdFxuICAgICAgZmFsbGJhY2tMbmcgOiBcImVuLVVTXCJcbiAgICAgIGxuZyAgICAgICAgIDogVGFuZ2VyaW5lLnNldHRpbmdzLmdldChcImxhbmd1YWdlXCIpXG4gICAgICByZXNTdG9yZSAgICA6IFRhbmdlcmluZS5sb2NhbGVzXG4gICAgLCAtPlxuICAgICAgd2luZG93LnQgPSBpMThuLnRcbiAgICAgIGNhbGxiYWNrKClcblxuICBsb2FkU2luZ2xldG9uczogKCBjYWxsYmFjayApIC0+XG4gICAgIyBTaW5nbGV0b25zXG4gICAgd2luZG93LnZtID0gbmV3IFZpZXdNYW5hZ2VyKClcbiAgICBUYW5nZXJpbmUucm91dGVyID0gbmV3IFJvdXRlcigpXG4gICAgVGFuZ2VyaW5lLnVzZXIgICA9IG5ldyBVc2VyKClcbiAgICBUYW5nZXJpbmUubmF2ICAgID0gbmV3IE5hdmlnYXRpb25WaWV3XG4gICAgICB1c2VyICAgOiBUYW5nZXJpbmUudXNlclxuICAgICAgcm91dGVyIDogVGFuZ2VyaW5lLnJvdXRlclxuICAgIFRhbmdlcmluZS5sb2cgICAgPSBuZXcgTG9nKClcbiAgICBjYWxsYmFjaygpXG5cbiAgcmVsb2FkVXNlclNlc3Npb246ICggY2FsbGJhY2sgKSAtPlxuXG4gICAgVGFuZ2VyaW5lLnVzZXIuc2Vzc2lvblJlZnJlc2hcbiAgICAgIGVycm9yOiAtPiBUYW5nZXJpbmUudXNlci5sb2dvdXQoKVxuICAgICAgc3VjY2VzczogLT4gY2FsbGJhY2soKVxuXG4gIHN0YXJ0QmFja2JvbmU6ICggY2FsbGJhY2sgKSAtPlxuICAgIEJhY2tib25lLmhpc3Rvcnkuc3RhcnQoKVxuICAgIGNhbGxiYWNrKCkgIyBmb3IgdGVzdGluZ1xuXG4gIGdldExvY2F0aW9uTGlzdCA6ICggY2FsbGJhY2sgKSAtPiAgICBcbiAgICAjIEdyYWIgb3VyIHN5c3RlbSBjb25maWcgZG9jICAgXG4gICAgVGFuZ2VyaW5lLmxvY2F0aW9uTGlzdCA9IG5ldyBCYWNrYm9uZS5Nb2RlbCBcIl9pZFwiIDogXCJsb2NhdGlvbi1saXN0XCIgICAgXG4gICBcbiAgICBUYW5nZXJpbmUubG9jYXRpb25MaXN0LmZldGNoICAgXG4gICAgICBlcnJvciAgIDogY2FsbGJhY2sgICBcbiAgICAgIHN1Y2Nlc3MgOiBjYWxsYmFja1xuXG5cblxuIyBjYWxsYmFjayBpcyB1c2VkIGZvciB0ZXN0aW5nXG5UYW5nZXJpbmUuYm9vdCA9IChjYWxsYmFjaykgLT5cblxuICBzZXF1ZW5jZSA9IFtcbiAgICBUYW5nZXJpbmUuYm9vdFNlcXVlbmNlLmJhc2ljQ29uZmlnXG4gICAgVGFuZ2VyaW5lLmJvb3RTZXF1ZW5jZS5mZXRjaENvbmZpZ3VyYXRpb25cbiAgICBUYW5nZXJpbmUuYm9vdFNlcXVlbmNlLmZldGNoU2V0dGluZ3NcbiAgICBUYW5nZXJpbmUuYm9vdFNlcXVlbmNlLmd1YXJhbnRlZUluc3RhbmNlSWRcbiAgICBUYW5nZXJpbmUuYm9vdFNlcXVlbmNlLmZldGNoVGVtcGxhdGVzXG4gICAgVGFuZ2VyaW5lLmJvb3RTZXF1ZW5jZS5kb2N1bWVudFJlYWR5XG4gICAgVGFuZ2VyaW5lLmJvb3RTZXF1ZW5jZS5nZXRMb2NhdGlvbkxpc3RcbiAgICBUYW5nZXJpbmUuYm9vdFNlcXVlbmNlLmxvYWRJMThuXG4gICAgVGFuZ2VyaW5lLmJvb3RTZXF1ZW5jZS5sb2FkU2luZ2xldG9uc1xuICAgIFRhbmdlcmluZS5ib290U2VxdWVuY2UucmVsb2FkVXNlclNlc3Npb25cbiAgICBUYW5nZXJpbmUuYm9vdFNlcXVlbmNlLnN0YXJ0QmFja2JvbmVcbiAgXVxuXG4gIHNlcXVlbmNlLnB1c2ggY2FsbGJhY2sgaWYgY2FsbGJhY2s/XG5cbiAgVXRpbHMuZXhlY3V0ZSBzZXF1ZW5jZVxuXG5UYW5nZXJpbmUuYm9vdCgpXG5cblxuXG5cbiIsIlRhbmdlcmluZS5ib290U2VxdWVuY2UgPSB7XG4gIGJhc2ljQ29uZmlnOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciB1cmxQYXJzZXI7XG4gICAgJC5jb3VjaC51cmxQcmVmaXggPSAnL2RiJztcbiAgICBUYW5nZXJpbmUuZGJfbmFtZSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdChcIi9cIilbMl07XG4gICAgVGFuZ2VyaW5lLmRlc2lnbl9kb2MgPSBcIm9qYWlcIjtcbiAgICBUYW5nZXJpbmUuJGRiID0gJC5jb3VjaC5kYihUYW5nZXJpbmUuZGJfbmFtZSk7XG4gICAgdXJsUGFyc2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgdXJsUGFyc2VyLmhyZWYgPSB3aW5kb3cubG9jYXRpb247XG4gICAgQmFja2JvbmUuY291Y2hfY29ubmVjdG9yLmNvbmZpZy5iYXNlX3VybCA9IHVybFBhcnNlci5wcm90b2NvbCArIFwiLy9cIiArIHVybFBhcnNlci5ob3N0ICsgXCIvZGJcIjtcbiAgICBCYWNrYm9uZS5jb3VjaF9jb25uZWN0b3IuY29uZmlnLmRiX25hbWUgPSBUYW5nZXJpbmUuZGJfbmFtZTtcbiAgICBCYWNrYm9uZS5jb3VjaF9jb25uZWN0b3IuY29uZmlnLmRkb2NfbmFtZSA9IFRhbmdlcmluZS5kZXNpZ25fZG9jO1xuICAgIEJhY2tib25lLmNvdWNoX2Nvbm5lY3Rvci5jb25maWcuZ2xvYmFsX2NoYW5nZXMgPSBmYWxzZTtcbiAgICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG4gICAgICBpbnRlcnBvbGF0ZTogL1xce1xceyguKz8pXFx9XFx9L2dcbiAgICB9O1xuICAgIHJldHVybiBjYWxsYmFjaygpO1xuICB9LFxuICBmZXRjaENvbmZpZ3VyYXRpb246IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgVGFuZ2VyaW5lLmNvbmZpZyA9IG5ldyBDb25maWcoe1xuICAgICAgXCJfaWRcIjogXCJjb25maWd1cmF0aW9uXCJcbiAgICB9KTtcbiAgICByZXR1cm4gVGFuZ2VyaW5lLmNvbmZpZy5mZXRjaCh7XG4gICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhbGVydChcIkNvdWxkIG5vdCBmZXRjaCBjb25maWd1cmF0aW9uXCIpO1xuICAgICAgfSxcbiAgICAgIHN1Y2Nlc3M6IGNhbGxiYWNrXG4gICAgfSk7XG4gIH0sXG4gIGZldGNoU2V0dGluZ3M6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgVGFuZ2VyaW5lLnNldHRpbmdzID0gbmV3IFNldHRpbmdzKHtcbiAgICAgIFwiX2lkXCI6IFwic2V0dGluZ3NcIlxuICAgIH0pO1xuICAgIHJldHVybiBUYW5nZXJpbmUuc2V0dGluZ3MuZmV0Y2goe1xuICAgICAgc3VjY2VzczogY2FsbGJhY2ssXG4gICAgICBlcnJvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkZWZhdWx0U2V0dGluZ3MsIHJlZjtcbiAgICAgICAgZGVmYXVsdFNldHRpbmdzID0gKHJlZiA9IFRhbmdlcmluZS5jb25maWcuZ2V0KFwiZGVmYXVsdHNcIikpICE9IG51bGwgPyByZWYuc2V0dGluZ3MgOiB2b2lkIDA7XG4gICAgICAgIGlmIChkZWZhdWx0U2V0dGluZ3MgPT0gbnVsbCkge1xuICAgICAgICAgIGFsZXJ0KFwiTWlzc2luZyBkZWZhdWx0IHNldHRpbmdzIGluIGNvbmZpZ3VyYXRpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgVGFuZ2VyaW5lLnNldHRpbmdzLnNldChkZWZhdWx0U2V0dGluZ3MpO1xuICAgICAgICByZXR1cm4gVGFuZ2VyaW5lLnNldHRpbmdzLnNhdmUobnVsbCwge1xuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBhbGVydChcIkNvdWxkIG5vdCBzYXZlIGRlZmF1bHQgc2V0dGluZ3NcIik7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzdWNjZXNzOiBjYWxsYmFja1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgZ3VhcmFudGVlSW5zdGFuY2VJZDogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZiAoIVRhbmdlcmluZS5zZXR0aW5ncy5oYXMoXCJpbnN0YW5jZUlkXCIpKSB7XG4gICAgICByZXR1cm4gVGFuZ2VyaW5lLnNldHRpbmdzLnNhdmUoe1xuICAgICAgICBcImluc3RhbmNlSWRcIjogVXRpbHMuaHVtYW5HVUlEKClcbiAgICAgIH0sIHtcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhbGVydChcIkNvdWxkIG5vdCBzYXZlIG5ldyBJbnN0YW5jZSBJZFwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgc3VjY2VzczogY2FsbGJhY2tcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gIH0sXG4gIGZldGNoVGVtcGxhdGVzOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHJldHVybiAoVGFuZ2VyaW5lLnRlbXBsYXRlcyA9IG5ldyBUZW1wbGF0ZSh7XG4gICAgICBcIl9pZFwiOiBcInRlbXBsYXRlc1wiXG4gICAgfSkpLmZldGNoKHtcbiAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFsZXJ0KFwiQ291bGQgbm90IGxvYWQgdGVtcGxhdGVzLlwiKTtcbiAgICAgIH0sXG4gICAgICBzdWNjZXNzOiBjYWxsYmFja1xuICAgIH0pO1xuICB9LFxuICBkb2N1bWVudFJlYWR5OiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHJldHVybiAkKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gIH0sXG4gIGxvYWRJMThuOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHJldHVybiBpMThuLmluaXQoe1xuICAgICAgZmFsbGJhY2tMbmc6IFwiZW4tVVNcIixcbiAgICAgIGxuZzogVGFuZ2VyaW5lLnNldHRpbmdzLmdldChcImxhbmd1YWdlXCIpLFxuICAgICAgcmVzU3RvcmU6IFRhbmdlcmluZS5sb2NhbGVzXG4gICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICB3aW5kb3cudCA9IGkxOG4udDtcbiAgICAgIHJldHVybiBjYWxsYmFjaygpO1xuICAgIH0pO1xuICB9LFxuICBsb2FkU2luZ2xldG9uczogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB3aW5kb3cudm0gPSBuZXcgVmlld01hbmFnZXIoKTtcbiAgICBUYW5nZXJpbmUucm91dGVyID0gbmV3IFJvdXRlcigpO1xuICAgIFRhbmdlcmluZS51c2VyID0gbmV3IFVzZXIoKTtcbiAgICBUYW5nZXJpbmUubmF2ID0gbmV3IE5hdmlnYXRpb25WaWV3KHtcbiAgICAgIHVzZXI6IFRhbmdlcmluZS51c2VyLFxuICAgICAgcm91dGVyOiBUYW5nZXJpbmUucm91dGVyXG4gICAgfSk7XG4gICAgVGFuZ2VyaW5lLmxvZyA9IG5ldyBMb2coKTtcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgfSxcbiAgcmVsb2FkVXNlclNlc3Npb246IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLnNlc3Npb25SZWZyZXNoKHtcbiAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFRhbmdlcmluZS51c2VyLmxvZ291dCgpO1xuICAgICAgfSxcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgc3RhcnRCYWNrYm9uZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBCYWNrYm9uZS5oaXN0b3J5LnN0YXJ0KCk7XG4gICAgcmV0dXJuIGNhbGxiYWNrKCk7XG4gIH0sXG4gIGdldExvY2F0aW9uTGlzdDogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBUYW5nZXJpbmUubG9jYXRpb25MaXN0ID0gbmV3IEJhY2tib25lLk1vZGVsKHtcbiAgICAgIFwiX2lkXCI6IFwibG9jYXRpb24tbGlzdFwiXG4gICAgfSk7XG4gICAgcmV0dXJuIFRhbmdlcmluZS5sb2NhdGlvbkxpc3QuZmV0Y2goe1xuICAgICAgZXJyb3I6IGNhbGxiYWNrLFxuICAgICAgc3VjY2VzczogY2FsbGJhY2tcbiAgICB9KTtcbiAgfVxufTtcblxuVGFuZ2VyaW5lLmJvb3QgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgc2VxdWVuY2U7XG4gIHNlcXVlbmNlID0gW1RhbmdlcmluZS5ib290U2VxdWVuY2UuYmFzaWNDb25maWcsIFRhbmdlcmluZS5ib290U2VxdWVuY2UuZmV0Y2hDb25maWd1cmF0aW9uLCBUYW5nZXJpbmUuYm9vdFNlcXVlbmNlLmZldGNoU2V0dGluZ3MsIFRhbmdlcmluZS5ib290U2VxdWVuY2UuZ3VhcmFudGVlSW5zdGFuY2VJZCwgVGFuZ2VyaW5lLmJvb3RTZXF1ZW5jZS5mZXRjaFRlbXBsYXRlcywgVGFuZ2VyaW5lLmJvb3RTZXF1ZW5jZS5kb2N1bWVudFJlYWR5LCBUYW5nZXJpbmUuYm9vdFNlcXVlbmNlLmdldExvY2F0aW9uTGlzdCwgVGFuZ2VyaW5lLmJvb3RTZXF1ZW5jZS5sb2FkSTE4biwgVGFuZ2VyaW5lLmJvb3RTZXF1ZW5jZS5sb2FkU2luZ2xldG9ucywgVGFuZ2VyaW5lLmJvb3RTZXF1ZW5jZS5yZWxvYWRVc2VyU2Vzc2lvbiwgVGFuZ2VyaW5lLmJvb3RTZXF1ZW5jZS5zdGFydEJhY2tib25lXTtcbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHtcbiAgICBzZXF1ZW5jZS5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuICByZXR1cm4gVXRpbHMuZXhlY3V0ZShzZXF1ZW5jZSk7XG59O1xuXG5UYW5nZXJpbmUuYm9vdCgpO1xuXG4iXX0=
