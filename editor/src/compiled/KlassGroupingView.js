var KlassGroupingView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

KlassGroupingView = (function(superClass) {
  extend(KlassGroupingView, superClass);

  function KlassGroupingView() {
    return KlassGroupingView.__super__.constructor.apply(this, arguments);
  }

  KlassGroupingView.prototype.className = "KlassGroupingView";

  KlassGroupingView.prototype.normalCurve = [0.00000, 0.00399, 0.00798, 0.01197, 0.01595, 0.01994, 0.02392, 0.02790, 0.03188, 0.03586, 0.03983, 0.04380, 0.04776, 0.05172, 0.05567, 0.05962, 0.06356, 0.06749, 0.07142, 0.07535, 0.07926, 0.08317, 0.08706, 0.09095, 0.09483, 0.09871, 0.10257, 0.10642, 0.11026, 0.11409, 0.11791, 0.12172, 0.12552, 0.12930, 0.13307, 0.13683, 0.14058, 0.14431, 0.14803, 0.15173, 0.15542, 0.15910, 0.16276, 0.16640, 0.17003, 0.17364, 0.17724, 0.18082, 0.18439, 0.18793, 0.19146, 0.19497, 0.19847, 0.20194, 0.20540, 0.20884, 0.21226, 0.21566, 0.21904, 0.22240, 0.22575, 0.22907, 0.23237, 0.23565, 0.23891, 0.24215, 0.24537, 0.24857, 0.25175, 0.25490, 0.25804, 0.26115, 0.26424, 0.26730, 0.27035, 0.27337, 0.27637, 0.27935, 0.28230, 0.28524, 0.28814, 0.29103, 0.29389, 0.29673, 0.29955, 0.30234, 0.30511, 0.30785, 0.31057, 0.31327, 0.31594, 0.31859, 0.32121, 0.32381, 0.32639, 0.32894, 0.33147, 0.33398, 0.33646, 0.33891, 0.34134, 0.34375, 0.34614, 0.34849, 0.35083, 0.35314, 0.35543, 0.35769, 0.35993, 0.36214, 0.36433, 0.36650, 0.36864, 0.37076, 0.37286, 0.37493, 0.37698, 0.37900, 0.38100, 0.38298, 0.38493, 0.38686, 0.38877, 0.39065, 0.39251, 0.39435, 0.39617, 0.39796, 0.39973, 0.40147, 0.40320, 0.40490, 0.40658, 0.40824, 0.40988, 0.41149, 0.41308, 0.41466, 0.41621, 0.41774, 0.41924, 0.42073, 0.42220, 0.42364, 0.42507, 0.42647, 0.42785, 0.42922, 0.43056, 0.43189, 0.43319, 0.43448, 0.43574, 0.43699, 0.43822, 0.43943, 0.44062, 0.44179, 0.44295, 0.44408, 0.44520, 0.44630, 0.44738, 0.44845, 0.44950, 0.45053, 0.45154, 0.45254, 0.45352, 0.45449, 0.45543, 0.45637, 0.45728, 0.45818, 0.45907, 0.45994, 0.46080, 0.46164, 0.46246, 0.46327, 0.46407, 0.46485, 0.46562, 0.46638, 0.46712, 0.46784, 0.46856, 0.46926, 0.46995, 0.47062, 0.47128, 0.47193, 0.47257, 0.47320, 0.47381, 0.47441, 0.47500, 0.47558, 0.47615, 0.47670, 0.47725, 0.47778, 0.47831, 0.47882, 0.47932, 0.47982, 0.48030, 0.48077, 0.48124, 0.48169, 0.48214, 0.48257, 0.48300, 0.48341, 0.48382, 0.48422, 0.48461, 0.48500, 0.48537, 0.48574, 0.48610, 0.48645, 0.48679, 0.48713, 0.48745, 0.48778, 0.48809, 0.48840, 0.48870, 0.48899, 0.48928, 0.48956, 0.48983, 0.49010, 0.49036, 0.49061, 0.49086, 0.49111, 0.49134, 0.49158, 0.49180, 0.49202, 0.49224, 0.49245, 0.49266, 0.49286, 0.49305, 0.49324, 0.49343, 0.49361, 0.49379, 0.49396, 0.49413, 0.49430, 0.49446, 0.49461, 0.49477, 0.49492, 0.49506, 0.49520, 0.49534, 0.49547, 0.49560, 0.49573, 0.49585, 0.49598, 0.49609, 0.49621, 0.49632, 0.49643, 0.49653, 0.49664, 0.49674, 0.49683, 0.49693, 0.49702, 0.49711, 0.49720, 0.49728, 0.49736, 0.49744, 0.49752, 0.49760, 0.49767, 0.49774, 0.49781, 0.49788, 0.49795, 0.49801, 0.49807, 0.49813, 0.49819, 0.49825, 0.49831, 0.49836, 0.49841, 0.49846, 0.49851, 0.49856, 0.49861, 0.49865, 0.49869, 0.49874, 0.49878, 0.49882, 0.49886, 0.49889, 0.49893, 0.49896, 0.49900, 0.49903, 0.49906, 0.49910, 0.49913, 0.49916, 0.49918, 0.49921, 0.49924, 0.49926, 0.49929, 0.49931, 0.49934, 0.49936, 0.49938, 0.49940, 0.49942, 0.49944, 0.49946, 0.49948, 0.49950, 0.49952, 0.49953, 0.49955, 0.49957, 0.49958, 0.49960, 0.49961, 0.49962, 0.49964, 0.49965, 0.49966, 0.49968, 0.49969, 0.49970, 0.49971, 0.49972, 0.49973, 0.49974, 0.49975, 0.49976, 0.49977, 0.49978, 0.49978, 0.49979, 0.49980, 0.49981, 0.49981, 0.49982, 0.49983, 0.49983, 0.49984, 0.49985, 0.49985, 0.49986, 0.49986, 0.49987, 0.49987, 0.49988, 0.49988, 0.49989, 0.49989, 0.49990, 0.49990, 0.49990, 0.49991, 0.49991, 0.49992, 0.49992, 0.49992, 0.49992, 0.49993, 0.49993, 0.49993, 0.49994, 0.49994, 0.49994, 0.49994, 0.49995, 0.49995, 0.49995, 0.49995, 0.49995, 0.49996, 0.49996, 0.49996, 0.49996, 0.49996, 0.49996, 0.49997, 0.49997, 0.49997, 0.49997, 0.49997, 0.49997, 0.49997, 0.49997, 0.49998, 0.49998, 0.49998, 0.49998];

  KlassGroupingView.prototype.colorClass = ["concerning", "poor", "good", "great"];

  KlassGroupingView.prototype.status = ["Concerning", "Poor", "Good", "Great"];

  KlassGroupingView.prototype.events = {
    "click .back": "goBack",
    "change #selector_container input": "selector",
    'click .student_name': 'showItemized'
  };

  KlassGroupingView.prototype.showItemized = function(event) {
    var $studentResults, $target, studentId;
    $target = $(event.target);
    studentId = $(event.target).attr("data-studentId");
    $studentResults = this.$el.find(".student_" + studentId);
    if ($studentResults.is(":visible")) {
      $studentResults.addClass("confirmation");
      return $target.css({
        "color": "black"
      });
    } else {
      this.$el.find(".student_name").css({
        "color": "black"
      });
      $target.css({
        "color": "white"
      });
      this.$el.find(".itemized_results").addClass("confirmation");
      return this.$el.find(".student_" + studentId).removeClass("confirmation");
    }
  };

  KlassGroupingView.prototype.selector = function() {
    var subtestId;
    subtestId = this.$el.find("#selector_container input:checked").attr("data-subtestId");
    this.selected.subtestId = subtestId;
    this.selected.results = this.results.where({
      "subtestId": subtestId
    });
    this.updateTable();
    return this.render();
  };

  KlassGroupingView.prototype.goBack = function() {
    return history.back();
  };

  KlassGroupingView.prototype.initialize = function(options) {
    var i, j, len, ref, subtest;
    this.results = options.results;
    this.subtests = options.subtests;
    this.students = options.students;
    this.selected = {};
    ref = this.subtests.models;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      subtest = ref[i];
      this.selected.subtestId = this.subtests.models[i].id;
      if ((this.selected.results = this.results.where({
        "subtestId": subtest.id
      })).length !== 0) {
        break;
      }
    }
    return this.updateTable();
  };

  KlassGroupingView.prototype.updateTable = function() {
    var aCorrect, classNotReady, classReady, dev, devIndex, i, index, isClassReady, j, k, l, len, len1, len2, len3, m, nStudentsNotReady, pNotReady, pc, percentile, person, ref, ref1, ref2, ref3, ref4, result, warningIcon;
    this.table = [];
    aCorrect = 0;
    this.subtest = this.subtests.get(this.selected.subtestId);
    this.summary = {
      "name": this.subtest.get("name"),
      "classSize": this.students.length,
      "resultCount": this.selected.results.length,
      "aCorrect": 0,
      "anCorrect": 0,
      "stdDev": 0,
      "attempted": 0,
      "totalItems": (ref = this.selected.results[0]) != null ? ref.get("total") : void 0,
      "watchList": []
    };
    ref1 = this.selected.results;
    for (j = 0, len = ref1.length; j < len; j++) {
      result = ref1[j];
      person = {
        'studentId': result.get("studentId"),
        'items': result.getItemized(),
        'name': this.students.get(result.get("studentId")).get("name"),
        'pCorrect': 0,
        'nCorrect': result.get("correct"),
        'attempted': result.get("total") - result.get("missing"),
        'total': result.get("total"),
        'deviation': 0,
        'percentile': 0,
        'status': ""
      };
      person.pCorrect = Math.round(person.nCorrect / person.attempted * 100);
      this.summary.aCorrect += person.pCorrect;
      this.summary.anCorrect += person.nCorrect;
      this.summary.attempted += person.attempted;
      this.table.push(person);
    }
    this.summary.aCorrect = Math.decimals(this.summary.aCorrect / this.table.length, 0);
    this.summary.anCorrect = Math.decimals(this.summary.anCorrect / this.table.length, 2);
    this.summary.attempted = Math.decimals(this.summary.attempted / this.table.length, 2);
    ref2 = this.table;
    for (k = 0, len1 = ref2.length; k < len1; k++) {
      person = ref2[k];
      this.summary.stdDev += Math.pow(person.pCorrect - this.summary.aCorrect, 2);
    }
    this.summary.stdDev = Math.decimals(Math.pow(this.summary.stdDev / this.table.length, 0.5), 2);
    ref3 = this.table;
    for (i = l = 0, len2 = ref3.length; l < len2; i = ++l) {
      person = ref3[i];
      dev = (person.pCorrect - this.summary.aCorrect) / this.summary.stdDev;
      devIndex = Math.round(dev * 100);
      percentile = devIndex > 409 || devIndex < -409 ? 0 : devIndex > 0 ? 100 * Math.round(50 + 100 * this.normalCurve[devIndex]) / 100 : devIndex < 0 ? 100 * Math.round(50 - 100 * this.normalCurve[devIndex * -1]) / 100 : 50;
      pc = person.pCorrect;
      index = pc >= 80 ? index = 3 : pc >= 60 && pc <= 79 ? index = 2 : pc >= 30 && pc <= 59 ? index = 1 : index = 0;

      /* semi-old way
      Math.floor(person.pCorrect / 100 * 4)
      index = 3 if index == 4
       */
      this.table[i].deviation = devIndex / 100;
      this.table[i].percentile = percentile;
      this.table[i].index = index;
      this.table[i].status = this.status[index];
      if (index === 0 && !~this.summary.watchList.indexOf(person.name)) {
        this.summary.watchList.push(person.name);
      }
    }
    this.table.sort(function(a, b) {
      return b.pCorrect - a.pCorrect;
    });
    nStudentsNotReady = 0;
    ref4 = this.table;
    for (m = 0, len3 = ref4.length; m < len3; m++) {
      person = ref4[m];
      if (person.pCorrect < 75) {
        nStudentsNotReady++;
      }
    }
    pNotReady = (nStudentsNotReady / this.table.length) * 100;
    isClassReady = pNotReady < 20;
    warningIcon = "<img src='images/icon_warn.png'>";
    this.readyPercentage = "<p>" + (Math.round(pNotReady)) + "% of your students are not ready to move on to the next lessons.</p>";
    classReady = "It is ok to move on in the lesson sequence. Make sure that those children performing in the “poor” or “concerning” category get extra attention and practice and don’t fall behind. This can be done during practice lessons on Tuesday and Thursdays, or during another subject on the timetable.";
    classNotReady = "Your class needs extra practice. Consider re-teaching Monday and Wednesday lessons introducing the new curriculum items or organize intense practice activities for the entire class. To find out which items students are particularly struggling with, select the name of a few students in the “poor” or “concerning” category and review their performance item by item. Take note of items that seem particularly troublesome.";
    return this.readinessWarning = isClassReady ? classReady : classNotReady;
  };

  KlassGroupingView.prototype.render = function() {
    var checkedAttribute, datum, detailsHTML, emptyHTML, html, i, itemizedResults, j, k, l, len, len1, len2, menuHTML, person, ref, ref1, ref2, subtest, summaryHTML, warningsHTML;
    if (!~this.subtests.pluck("reportType").indexOf("progress")) {
      warningsHTML = "<section> " + this.readyPercentage + " " + this.readinessWarning + " </section>";
      warningsHTML += '<section> <p>Refer to the file “Kiswahili Wordlists” on your tablet for a list of additional words that may be useful for such group-based activities or practice for students performing in the “poor” or “concerning” category.</p> <p>For the students to watch – consider also communicating with parents for extra practice at home.</p> <p>Identify items these students need further practice on by selecting their name in the grouping report to see their performance on each item.</p> <p>Give parents some help: Write out on a piece of paper the letters for them to practice with their child; or copy applicable words from the “Kiswahili Wordlists” that contain the letters for the child to practice.</p> </section>';
    }
    emptyHTML = "<h1>" + (t('student grouping report')) + "</h1> <p>No students tested for " + (this.subtests.get(this.selected.subtestId).get("name")) + " on assessment #" + (this.subtests.models[0].get("part")) + " yet. Return to the <a href='#class'>class menu</a> and click the <img src='images/icon_run.png'> icon to collect data.</p>";
    menuHTML = "<div id='selector_container' class='buttonset'>";
    ref = this.subtests.models;
    for (j = 0, len = ref.length; j < len; j++) {
      subtest = ref[j];
      checkedAttribute = subtest.id === this.selected.subtestId ? "checked='checked'" : "";
      menuHTML += "<label for='" + subtest.id + "'>" + (subtest.get("name")) + "</label> <input type='radio' class='selector' name='selector' id='" + subtest.id + "' data-subtestId='" + subtest.id + "' " + checkedAttribute + ">";
    }
    menuHTML += "</div>";
    summaryHTML = "<h1>Summary</h1> <table class='summary'> <tr><th>Subtest Name</th>          <td>" + this.summary.name + "</td></tr> <tr><th>Class Size</th>            <td>" + this.summary.classSize + "</td></tr> <tr><th>Students Assessed</th>     <td>" + this.summary.resultCount + "</td></tr> <tr><th>Average Correct (%)</th>   <td>" + this.summary.aCorrect + "%</td></tr> <tr><th>Average Correct</th>       <td>" + this.summary.anCorrect + " / " + this.summary.attempted + "</td></tr> <tr><th>Students to watch</th>     <td>" + (this.summary.watchList.join(', ')) + "</td></tr> </table>";
    detailsHTML = "<h1>Student grouping</h1> <table class='details'> <tr> <th>Name</th> <th>% correct</th> <th>Status</th> </tr>";
    itemizedResults = "";
    ref1 = this.table;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      person = ref1[k];
      detailsHTML += "<tr class='" + this.colorClass[person.index] + "'> <td class='student_name icon' data-studentId='" + person.studentId + "'>" + person.name + "</td> <td>" + person.pCorrect + "</td> <td>" + person.status + "</td> </tr>";
      itemizedResults += "<table class='itemized_results confirmation student_" + person.studentId + "'> <tbody><tr><th>Item</th><th>Result</th></tr>";
      ref2 = person.items;
      for (i = l = 0, len2 = ref2.length; l < len2; i = ++l) {
        datum = ref2[i];
        itemizedResults += "<tr><td>" + datum.itemLabel + "</td><td>" + (t(datum.itemResult)) + "</td></tr>";
      }
      itemizedResults += "</tbody></table>";
    }
    detailsHTML += "</table>";
    if (this.selected.results.length !== 0) {
      html = menuHTML + " " + summaryHTML + " " + detailsHTML + " " + itemizedResults + " " + (warningsHTML || "") + " <button class='navigation back'>Back</button>";
    } else {
      html = menuHTML + " " + emptyHTML + " <button class='navigation back'>Back</button>";
    }
    this.$el.html(html);
    return this.trigger("rendered");
  };

  KlassGroupingView.prototype.getQuartile = function(percentile) {
    return Math.round((percentile / 100) * 3);
  };

  return KlassGroupingView;

})(Backbone.View);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcG9ydC9LbGFzc0dyb3VwaW5nVmlldy5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxpQkFBQTtFQUFBOzs7QUFBTTs7Ozs7Ozs4QkFFSixTQUFBLEdBQVk7OzhCQUlaLFdBQUEsR0FBYyxDQUFDLE9BQUQsRUFBVSxPQUFWLEVBQW1CLE9BQW5CLEVBQTRCLE9BQTVCLEVBQXFDLE9BQXJDLEVBQThDLE9BQTlDLEVBQXVELE9BQXZELEVBQWdFLE9BQWhFLEVBQXlFLE9BQXpFLEVBQWtGLE9BQWxGLEVBQTBGLE9BQTFGLEVBQW1HLE9BQW5HLEVBQTRHLE9BQTVHLEVBQXFILE9BQXJILEVBQThILE9BQTlILEVBQXVJLE9BQXZJLEVBQWdKLE9BQWhKLEVBQXlKLE9BQXpKLEVBQWtLLE9BQWxLLEVBQTJLLE9BQTNLLEVBQW1MLE9BQW5MLEVBQTRMLE9BQTVMLEVBQXFNLE9BQXJNLEVBQThNLE9BQTlNLEVBQXVOLE9BQXZOLEVBQWdPLE9BQWhPLEVBQXlPLE9BQXpPLEVBQWtQLE9BQWxQLEVBQTJQLE9BQTNQLEVBQW9RLE9BQXBRLEVBQTRRLE9BQTVRLEVBQXFSLE9BQXJSLEVBQThSLE9BQTlSLEVBQXVTLE9BQXZTLEVBQWdULE9BQWhULEVBQXlULE9BQXpULEVBQWtVLE9BQWxVLEVBQTJVLE9BQTNVLEVBQW9WLE9BQXBWLEVBQTZWLE9BQTdWLEVBQXFXLE9BQXJXLEVBQThXLE9BQTlXLEVBQXVYLE9BQXZYLEVBQWdZLE9BQWhZLEVBQXlZLE9BQXpZLEVBQWtaLE9BQWxaLEVBQTJaLE9BQTNaLEVBQW9hLE9BQXBhLEVBQTZhLE9BQTdhLEVBQXNiLE9BQXRiLEVBQThiLE9BQTliLEVBQXVjLE9BQXZjLEVBQWdkLE9BQWhkLEVBQXlkLE9BQXpkLEVBQWtlLE9BQWxlLEVBQTJlLE9BQTNlLEVBQW9mLE9BQXBmLEVBQTZmLE9BQTdmLEVBQXNnQixPQUF0Z0IsRUFBK2dCLE9BQS9nQixFQUF1aEIsT0FBdmhCLEVBQWdpQixPQUFoaUIsRUFB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LEdBQTJCLFdBQTNCLEdBQXFDLENBQUMsQ0FBQSxDQUFFLEtBQUssQ0FBQyxVQUFSLENBQUQsQ0FBckMsR0FBMEQ7QUFEL0U7TUFFQSxlQUFBLElBQW1CO0FBaEJyQjtJQW1CQSxXQUFBLElBQWU7SUFJZixJQUFHLElBQUMsQ0FBQSxRQUFRLENBQUMsT0FBTyxDQUFDLE1BQWxCLEtBQTRCLENBQS9CO01BQ0UsSUFBQSxHQUNJLFFBQUQsR0FBVSxHQUFWLEdBQ0MsV0FERCxHQUNhLEdBRGIsR0FFQyxXQUZELEdBRWEsR0FGYixHQUdDLGVBSEQsR0FHaUIsR0FIakIsR0FJQSxDQUFDLFlBQUEsSUFBZ0IsRUFBakIsQ0FKQSxHQUlvQixpREFOekI7S0FBQSxNQUFBO01BVUUsSUFBQSxHQUNJLFFBQUQsR0FBVSxHQUFWLEdBQ0MsU0FERCxHQUNXLGlEQVpoQjs7SUFnQkEsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsSUFBVjtXQUNBLElBQUMsQ0FBQSxPQUFELENBQVMsVUFBVDtFQW5ITTs7OEJBc0hSLFdBQUEsR0FBYSxTQUFDLFVBQUQ7V0FBZ0IsSUFBSSxDQUFDLEtBQUwsQ0FBWSxDQUFDLFVBQUEsR0FBYSxHQUFkLENBQUEsR0FBcUIsQ0FBakM7RUFBaEI7Ozs7R0F2UmlCLFFBQVEsQ0FBQyIsImZpbGUiOiJyZXBvcnQvS2xhc3NHcm91cGluZ1ZpZXcuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBLbGFzc0dyb3VwaW5nVmlldyBleHRlbmRzIEJhY2tib25lLlZpZXdcblxuICBjbGFzc05hbWUgOiBcIktsYXNzR3JvdXBpbmdWaWV3XCJcblxuICAjIFVzZWQgdG8gY2FsY3VsYXRlIHBlcmNlbnRpbGVzXG4gICMgVXNlIGluZGljZXMgd2hlcmUgSW5kZXggPSBTdGFuZGFyZCBEZXZpYXRpb24gKiAxMDAgZm9yIG5lZ2F0aXZlIGRldmlhdGlvbnNcbiAgbm9ybWFsQ3VydmUgOiBbMC4wMDAwMCwgMC4wMDM5OSwgMC4wMDc5OCwgMC4wMTE5NywgMC4wMTU5NSwgMC4wMTk5NCwgMC4wMjM5MiwgMC4wMjc5MCwgMC4wMzE4OCwgMC4wMzU4NiwwLjAzOTgzLCAwLjA0MzgwLCAwLjA0Nzc2LCAwLjA1MTcyLCAwLjA1NTY3LCAwLjA1OTYyLCAwLjA2MzU2LCAwLjA2NzQ5LCAwLjA3MTQyLCAwLjA3NTM1LDAuMDc5MjYsIDAuMDgzMTcsIDAuMDg3MDYsIDAuMDkwOTUsIDAuMDk0ODMsIDAuMDk4NzEsIDAuMTAyNTcsIDAuMTA2NDIsIDAuMTEwMjYsIDAuMTE0MDksMC4xMTc5MSwgMC4xMjE3MiwgMC4xMjU1MiwgMC4xMjkzMCwgMC4xMzMwNywgMC4xMzY4MywgMC4xNDA1OCwgMC4xNDQzMSwgMC4xNDgwMywgMC4xNTE3MywwLjE1NTQyLCAwLjE1OTEwLCAwLjE2Mjc2LCAwLjE2NjQwLCAwLjE3MDAzLCAwLjE3MzY0LCAwLjE3NzI0LCAwLjE4MDgyLCAwLjE4NDM5LCAwLjE4NzkzLDAuMTkxNDYsIDAuMTk0OTcsIDAuMTk4NDcsIDAuMjAxOTQsIDAuMjA1NDAsIDAuMjA4ODQsIDAuMjEyMjYsIDAuMjE1NjYsIDAuMjE5MDQsIDAuMjIyNDAsMC4yMjU3NSwgMC4yMjkwNywgMC4yMzIzNywgMC4yMzU2NSwgMC4yMzg5MSwgMC4yNDIxNSwgMC4yNDUzNywgMC4yNDg1NywgMC4yNTE3NSwgMC4yNTQ5MCwwLjI1ODA0LCAwLjI2MTE1LCAwLjI2NDI0LCAwLjI2NzMwLCAwLjI3MDM1LCAwLjI3MzM3LCAwLjI3NjM3LCAwLjI3OTM1LCAwLjI4MjMwLCAwLjI4NTI0LDAuMjg4MTQsIDAuMjkxMDMsIDAuMjkzODksIDAuMjk2NzMsIDAuMjk5NTUsIDAuMzAyMzQsIDAuMzA1MTEsIDAuMzA3ODUsIDAuMzEwNTcsIDAuMzEzMjcsMC4zMTU5NCwgMC4zMTg1OSwgMC4zMjEyMSwgMC4zMjM4MSwgMC4zMjYzOSwgMC4zMjg5NCwgMC4zMzE0NywgMC4zMzM5OCwgMC4zMzY0NiwgMC4zMzg5MSwwLjM0MTM0LCAwLjM0Mzc1LCAwLjM0NjE0LCAwLjM0ODQ5LCAwLjM1MDgzLCAwLjM1MzE0LCAwLjM1NTQzLCAwLjM1NzY5LCAwLjM1OTkzLCAwLjM2MjE0LDAuMzY0MzMsIDAuMzY2NTAsIDAuMzY4NjQsIDAuMzcwNzYsIDAuMzcyODYsIDAuMzc0OTMsIDAuMzc2OTgsIDAuMzc5MDAsIDAuMzgxMDAsIDAuMzgyOTgsMC4zODQ5MywgMC4zODY4NiwgMC4zODg3NywgMC4zOTA2NSwgMC4zOTI1MSwgMC4zOTQzNSwgMC4zOTYxNywgMC4zOTc5NiwgMC4zOTk3MywgMC40MDE0NywwLjQwMzIwLCAwLjQwNDkwLCAwLjQwNjU4LCAwLjQwODI0LCAwLjQwOTg4LCAwLjQxMTQ5LCAwLjQxMzA4LCAwLjQxNDY2LCAwLjQxNjIxLCAwLjQxNzc0LDAuNDE5MjQsIDAuNDIwNzMsIDAuNDIyMjAsIDAuNDIzNjQsIDAuNDI1MDcsIDAuNDI2NDcsIDAuNDI3ODUsIDAuNDI5MjIsIDAuNDMwNTYsIDAuNDMxODksMC40MzMxOSwgMC40MzQ0OCwgMC40MzU3NCwgMC40MzY5OSwgMC40MzgyMiwgMC40Mzk0MywgMC40NDA2MiwgMC40NDE3OSwgMC40NDI5NSwgMC40NDQwOCwwLjQ0NTIwLCAwLjQ0NjMwLCAwLjQ0NzM4LCAwLjQ0ODQ1LCAwLjQ0OTUwLCAwLjQ1MDUzLCAwLjQ1MTU0LCAwLjQ1MjU0LCAwLjQ1MzUyLCAwLjQ1NDQ5LDAuNDU1NDMsIDAuNDU2MzcsIDAuNDU3MjgsIDAuNDU4MTgsIDAuNDU5MDcsIDAuNDU5OTQsIDAuNDYwODAsIDAuNDYxNjQsIDAuNDYyNDYsIDAuNDYzMjcsMC40NjQwNywgMC40NjQ4NSwgMC40NjU2MiwgMC40NjYzOCwgMC40NjcxMiwgMC40Njc4NCwgMC40Njg1NiwgMC40NjkyNiwgMC40Njk5NSwgMC40NzA2MiwwLjQ3MTI4LCAwLjQ3MTkzLCAwLjQ3MjU3LCAwLjQ3MzIwLCAwLjQ3MzgxLCAwLjQ3NDQxLCAwLjQ3NTAwLCAwLjQ3NTU4LCAwLjQ3NjE1LCAwLjQ3NjcwLDAuNDc3MjUsIDAuNDc3NzgsIDAuNDc4MzEsIDAuNDc4ODIsIDAuNDc5MzIsIDAuNDc5ODIsIDAuNDgwMzAsIDAuNDgwNzcsIDAuNDgxMjQsIDAuNDgxNjksMC40ODIxNCwgMC40ODI1NywgMC40ODMwMCwgMC40ODM0MSwgMC40ODM4MiwgMC40ODQyMiwgMC40ODQ2MSwgMC40ODUwMCwgMC40ODUzNywgMC40ODU3NCwwLjQ4NjEwLCAwLjQ4NjQ1LCAwLjQ4Njc5LCAwLjQ4NzEzLCAwLjQ4NzQ1LCAwLjQ4Nzc4LCAwLjQ4ODA5LCAwLjQ4ODQwLCAwLjQ4ODcwLCAwLjQ4ODk5LDAuNDg5MjgsIDAuNDg5NTYsIDAuNDg5ODMsIDAuNDkwMTAsIDAuNDkwMzYsIDAuNDkwNjEsIDAuNDkwODYsIDAuNDkxMTEsIDAuNDkxMzQsIDAuNDkxNTgsMC40OTE4MCwgMC40OTIwMiwgMC40OTIyNCwgMC40OTI0NSwgMC40OTI2NiwgMC40OTI4NiwgMC40OTMwNSwgMC40OTMyNCwgMC40OTM0MywgMC40OTM2MSwwLjQ5Mzc5LCAwLjQ5Mzk2LCAwLjQ5NDEzLCAwLjQ5NDMwLCAwLjQ5NDQ2LCAwLjQ5NDYxLCAwLjQ5NDc3LCAwLjQ5NDkyLCAwLjQ5NTA2LCAwLjQ5NTIwLDAuNDk1MzQsIDAuNDk1NDcsIDAuNDk1NjAsIDAuNDk1NzMsIDAuNDk1ODUsIDAuNDk1OTgsIDAuNDk2MDksIDAuNDk2MjEsIDAuNDk2MzIsIDAuNDk2NDMsMC40OTY1MywgMC40OTY2NCwgMC40OTY3NCwgMC40OTY4MywgMC40OTY5MywgMC40OTcwMiwgMC40OTcxMSwgMC40OTcyMCwgMC40OTcyOCwgMC40OTczNiwwLjQ5NzQ0LCAwLjQ5NzUyLCAwLjQ5NzYwLCAwLjQ5NzY3LCAwLjQ5Nzc0LCAwLjQ5NzgxLCAwLjQ5Nzg4LCAwLjQ5Nzk1LCAwLjQ5ODAxLCAwLjQ5ODA3LDAuNDk4MTMsIDAuNDk4MTksIDAuNDk4MjUsIDAuNDk4MzEsIDAuNDk4MzYsIDAuNDk4NDEsIDAuNDk4NDYsIDAuNDk4NTEsIDAuNDk4NTYsIDAuNDk4NjEsMC40OTg2NSwgMC40OTg2OSwgMC40OTg3NCwgMC40OTg3OCwgMC40OTg4MiwgMC40OTg4NiwgMC40OTg4OSwgMC40OTg5MywgMC40OTg5NiwgMC40OTkwMCwwLjQ5OTAzLCAwLjQ5OTA2LCAwLjQ5OTEwLCAwLjQ5OTEzLCAwLjQ5OTE2LCAwLjQ5OTE4LCAwLjQ5OTIxLCAwLjQ5OTI0LCAwLjQ5OTI2LCAwLjQ5OTI5LDAuNDk5MzEsIDAuNDk5MzQsIDAuNDk5MzYsIDAuNDk5MzgsIDAuNDk5NDAsIDAuNDk5NDIsIDAuNDk5NDQsIDAuNDk5NDYsIDAuNDk5NDgsIDAuNDk5NTAsIDAuNDk5NTIsIDAuNDk5NTMsIDAuNDk5NTUsIDAuNDk5NTcsIDAuNDk5NTgsIDAuNDk5NjAsIDAuNDk5NjEsIDAuNDk5NjIsIDAuNDk5NjQsIDAuNDk5NjUsMC40OTk2NiwgMC40OTk2OCwgMC40OTk2OSwgMC40OTk3MCwgMC40OTk3MSwgMC40OTk3MiwgMC40OTk3MywgMC40OTk3NCwgMC40OTk3NSwgMC40OTk3NiwwLjQ5OTc3LCAwLjQ5OTc4LCAwLjQ5OTc4LCAwLjQ5OTc5LCAwLjQ5OTgwLCAwLjQ5OTgxLCAwLjQ5OTgxLCAwLjQ5OTgyLCAwLjQ5OTgzLCAwLjQ5OTgzLDAuNDk5ODQsIDAuNDk5ODUsIDAuNDk5ODUsIDAuNDk5ODYsIDAuNDk5ODYsIDAuNDk5ODcsIDAuNDk5ODcsIDAuNDk5ODgsIDAuNDk5ODgsIDAuNDk5ODksMC40OTk4OSwgMC40OTk5MCwgMC40OTk5MCwgMC40OTk5MCwgMC40OTk5MSwgMC40OTk5MSwgMC40OTk5MiwgMC40OTk5MiwgMC40OTk5MiwgMC40OTk5MiwwLjQ5OTkzLCAwLjQ5OTkzLCAwLjQ5OTkzLCAwLjQ5OTk0LCAwLjQ5OTk0LCAwLjQ5OTk0LCAwLjQ5OTk0LCAwLjQ5OTk1LCAwLjQ5OTk1LCAwLjQ5OTk1LDAuNDk5OTUsIDAuNDk5OTUsIDAuNDk5OTYsIDAuNDk5OTYsIDAuNDk5OTYsIDAuNDk5OTYsIDAuNDk5OTYsIDAuNDk5OTYsIDAuNDk5OTcsIDAuNDk5OTcsMC40OTk5NywgMC40OTk5NywgMC40OTk5NywgMC40OTk5NywgMC40OTk5NywgMC40OTk5NywgMC40OTk5OCwgMC40OTk5OCwgMC40OTk5OCwgMC40OTk5OF1cbiAgY29sb3JDbGFzcyAgOiBbXCJjb25jZXJuaW5nXCIsIFwicG9vclwiLCBcImdvb2RcIiwgXCJncmVhdFwiXVxuICBzdGF0dXMgICAgICA6IFtcIkNvbmNlcm5pbmdcIiwgXCJQb29yXCIsIFwiR29vZFwiLCBcIkdyZWF0XCJdXG5cbiAgZXZlbnRzOlxuICAgIFwiY2xpY2sgLmJhY2tcIiAgICAgICAgICAgICAgICAgICAgICA6IFwiZ29CYWNrXCJcbiAgICBcImNoYW5nZSAjc2VsZWN0b3JfY29udGFpbmVyIGlucHV0XCIgOiBcInNlbGVjdG9yXCJcbiAgICAnY2xpY2sgLnN0dWRlbnRfbmFtZScgOiAnc2hvd0l0ZW1pemVkJyBcblxuICBzaG93SXRlbWl6ZWQ6IChldmVudCkgLT5cbiAgICAkdGFyZ2V0ID0gJChldmVudC50YXJnZXQpXG4gICAgc3R1ZGVudElkID0gJChldmVudC50YXJnZXQpLmF0dHIgXCJkYXRhLXN0dWRlbnRJZFwiXG4gICAgJHN0dWRlbnRSZXN1bHRzID0gQCRlbC5maW5kIFwiLnN0dWRlbnRfI3tzdHVkZW50SWR9XCJcblxuICAgIGlmICRzdHVkZW50UmVzdWx0cy5pcyBcIjp2aXNpYmxlXCJcbiAgICAgICRzdHVkZW50UmVzdWx0cy5hZGRDbGFzcyBcImNvbmZpcm1hdGlvblwiXG4gICAgICAkdGFyZ2V0LmNzcyBcImNvbG9yXCIgOiBcImJsYWNrXCJcbiAgICBlbHNlXG4gICAgICBAJGVsLmZpbmQoXCIuc3R1ZGVudF9uYW1lXCIpLmNzcyBcImNvbG9yXCIgOiBcImJsYWNrXCJcbiAgICAgICR0YXJnZXQuY3NzIFwiY29sb3JcIiA6IFwid2hpdGVcIlxuICAgICAgQCRlbC5maW5kKFwiLml0ZW1pemVkX3Jlc3VsdHNcIikuYWRkQ2xhc3MgXCJjb25maXJtYXRpb25cIlxuICAgICAgQCRlbC5maW5kKFwiLnN0dWRlbnRfI3tzdHVkZW50SWR9XCIpLnJlbW92ZUNsYXNzIFwiY29uZmlybWF0aW9uXCJcblxuICBzZWxlY3RvcjogLT5cbiAgICBzdWJ0ZXN0SWQgPSBAJGVsLmZpbmQoXCIjc2VsZWN0b3JfY29udGFpbmVyIGlucHV0OmNoZWNrZWRcIikuYXR0cihcImRhdGEtc3VidGVzdElkXCIpXG4gICAgQHNlbGVjdGVkLnN1YnRlc3RJZCA9IHN1YnRlc3RJZFxuICAgIEBzZWxlY3RlZC5yZXN1bHRzICAgPSBAcmVzdWx0cy53aGVyZShcInN1YnRlc3RJZFwiIDogc3VidGVzdElkKVxuXG4gICAgQHVwZGF0ZVRhYmxlKClcbiAgICBAcmVuZGVyKClcblxuICBnb0JhY2s6IC0+IGhpc3RvcnkuYmFjaygpXG5cbiAgaW5pdGlhbGl6ZTogKCBvcHRpb25zICkgLT4gXG5cbiAgICBAcmVzdWx0cyA9IG9wdGlvbnMucmVzdWx0c1xuICAgIEBzdWJ0ZXN0cyA9IG9wdGlvbnMuc3VidGVzdHNcbiAgICBAc3R1ZGVudHMgPSBvcHRpb25zLnN0dWRlbnRzXG5cbiAgICBAc2VsZWN0ZWQgPSB7fVxuICAgIFxuICAgIGZvciBzdWJ0ZXN0LCBpIGluIEBzdWJ0ZXN0cy5tb2RlbHNcbiAgICAgIEBzZWxlY3RlZC5zdWJ0ZXN0SWQgPSBAc3VidGVzdHMubW9kZWxzW2ldLmlkXG4gICAgICBicmVhayBpZiAoQHNlbGVjdGVkLnJlc3VsdHMgPSBAcmVzdWx0cy53aGVyZShcInN1YnRlc3RJZFwiIDogc3VidGVzdC5pZCkpLmxlbmd0aCAhPSAwXG5cbiAgICBAdXBkYXRlVGFibGUoKVxuXG4gIHVwZGF0ZVRhYmxlOiAtPlxuXG4gICAgQHRhYmxlICAgPSBbXVxuICAgIGFDb3JyZWN0ID0gMFxuXG4gICAgQHN1YnRlc3QgPSBAc3VidGVzdHMuZ2V0IEBzZWxlY3RlZC5zdWJ0ZXN0SWRcbiAgICBAc3VtbWFyeSA9XG4gICAgICBcIm5hbWVcIiAgICAgICAgOiBAc3VidGVzdC5nZXQoXCJuYW1lXCIpXG4gICAgICBcImNsYXNzU2l6ZVwiICAgOiBAc3R1ZGVudHMubGVuZ3RoXG4gICAgICBcInJlc3VsdENvdW50XCIgOiBAc2VsZWN0ZWQucmVzdWx0cy5sZW5ndGhcbiAgICAgIFwiYUNvcnJlY3RcIiAgICA6IDBcbiAgICAgIFwiYW5Db3JyZWN0XCIgICA6IDBcbiAgICAgIFwic3RkRGV2XCIgICAgICA6IDBcbiAgICAgIFwiYXR0ZW1wdGVkXCIgICA6IDBcbiAgICAgIFwidG90YWxJdGVtc1wiICA6IEBzZWxlY3RlZC5yZXN1bHRzWzBdPy5nZXQoXCJ0b3RhbFwiKVxuICAgICAgXCJ3YXRjaExpc3RcIiAgIDogW11cblxuICAgIGZvciByZXN1bHQgaW4gQHNlbGVjdGVkLnJlc3VsdHNcbiAgICAgIHBlcnNvbiA9XG4gICAgICAgICdzdHVkZW50SWQnICA6IHJlc3VsdC5nZXQoXCJzdHVkZW50SWRcIilcbiAgICAgICAgJ2l0ZW1zJyAgICAgIDogcmVzdWx0LmdldEl0ZW1pemVkKClcbiAgICAgICAgJ25hbWUnICAgICAgIDogQHN0dWRlbnRzLmdldCggcmVzdWx0LmdldChcInN0dWRlbnRJZFwiKSApLmdldChcIm5hbWVcIilcbiAgICAgICAgJ3BDb3JyZWN0JyAgIDogMFxuICAgICAgICAnbkNvcnJlY3QnICAgOiByZXN1bHQuZ2V0KFwiY29ycmVjdFwiKVxuICAgICAgICAnYXR0ZW1wdGVkJyAgOiByZXN1bHQuZ2V0KFwidG90YWxcIikgLSByZXN1bHQuZ2V0KFwibWlzc2luZ1wiKVxuICAgICAgICAndG90YWwnICAgICAgOiByZXN1bHQuZ2V0KFwidG90YWxcIilcbiAgICAgICAgJ2RldmlhdGlvbicgIDogMFxuICAgICAgICAncGVyY2VudGlsZScgOiAwXG4gICAgICAgICdzdGF0dXMnICAgICA6IFwiXCJcblxuICAgICAgcGVyc29uLnBDb3JyZWN0ID0gTWF0aC5yb3VuZChwZXJzb24ubkNvcnJlY3QgLyBwZXJzb24uYXR0ZW1wdGVkICogMTAwKVxuXG4gICAgICBAc3VtbWFyeS5hQ29ycmVjdCArPSBwZXJzb24ucENvcnJlY3RcbiAgICAgIEBzdW1tYXJ5LmFuQ29ycmVjdCArPSBwZXJzb24ubkNvcnJlY3RcbiAgICAgIEBzdW1tYXJ5LmF0dGVtcHRlZCArPSBwZXJzb24uYXR0ZW1wdGVkXG5cbiAgICAgIEB0YWJsZS5wdXNoIHBlcnNvblxuXG4gICAgQHN1bW1hcnkuYUNvcnJlY3QgID0gTWF0aC5kZWNpbWFscyggQHN1bW1hcnkuYUNvcnJlY3QgLyBAdGFibGUubGVuZ3RoLCAwIClcbiAgICBAc3VtbWFyeS5hbkNvcnJlY3QgPSBNYXRoLmRlY2ltYWxzKCBAc3VtbWFyeS5hbkNvcnJlY3QgLyBAdGFibGUubGVuZ3RoLCAyIClcbiAgICBAc3VtbWFyeS5hdHRlbXB0ZWQgPSBNYXRoLmRlY2ltYWxzKCBAc3VtbWFyeS5hdHRlbXB0ZWQgLyBAdGFibGUubGVuZ3RoLCAyIClcblxuICAgIGZvciBwZXJzb24gaW4gQHRhYmxlXG4gICAgICBAc3VtbWFyeS5zdGREZXYgKz0gTWF0aC5wb3cocGVyc29uLnBDb3JyZWN0IC0gQHN1bW1hcnkuYUNvcnJlY3QsIDIpXG5cbiAgICBAc3VtbWFyeS5zdGREZXYgPSBNYXRoLmRlY2ltYWxzKE1hdGgucG93KCBAc3VtbWFyeS5zdGREZXYgLyBAdGFibGUubGVuZ3RoLCAwLjUpLCAyKVxuXG4gICAgZm9yIHBlcnNvbiwgaSBpbiBAdGFibGVcblxuICAgICAgZGV2ID0gKHBlcnNvbi5wQ29ycmVjdCAtIEBzdW1tYXJ5LmFDb3JyZWN0KSAvIEBzdW1tYXJ5LnN0ZERldlxuXG4gICAgICBkZXZJbmRleCA9IE1hdGgucm91bmQoZGV2ICogMTAwKVxuICAgICAgXG4gICAgICBwZXJjZW50aWxlID0gaWYgZGV2SW5kZXggPiA0MDkgb3IgZGV2SW5kZXggPCAtNDA5XG4gICAgICAgICAgMFxuICAgICAgICBlbHNlIGlmIGRldkluZGV4ID4gMFxuICAgICAgICAgIDEwMCAqIE1hdGgucm91bmQoNTAgKyAxMDAgKiBAbm9ybWFsQ3VydmVbZGV2SW5kZXhdICkgLyAxMDAgXG4gICAgICAgIGVsc2UgaWYgZGV2SW5kZXggPCAwXG4gICAgICAgICAgMTAwICogTWF0aC5yb3VuZCg1MCAtIDEwMCAqIEBub3JtYWxDdXJ2ZVtkZXZJbmRleCAqIC0xXSApIC8gMTAwXG4gICAgICAgIGVsc2VcbiAgICAgICAgICA1MFxuXG4gICAgICBwYyA9IHBlcnNvbi5wQ29ycmVjdFxuXG4gICAgICBpbmRleCA9IFxuICAgICAgICBpZiBwYyA+PSA4MFxuICAgICAgICAgIGluZGV4ID0gM1xuICAgICAgICBlbHNlIGlmIHBjID49IDYwICYmIHBjIDw9IDc5XG4gICAgICAgICAgaW5kZXggPSAyXG4gICAgICAgIGVsc2UgaWYgcGMgPj0gMzAgJiYgcGMgPD0gNTlcbiAgICAgICAgICBpbmRleCA9IDFcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGluZGV4ID0gMFxuXG5cbiAgICAgICMgb2xkIHdheVxuICAgICAgIyBpbmRleCA9IEBnZXRRdWFydGlsZShwZXJjZW50aWxlKVxuICAgICAgXG4gICAgICAjIyMgc2VtaS1vbGQgd2F5XG4gICAgICBNYXRoLmZsb29yKHBlcnNvbi5wQ29ycmVjdCAvIDEwMCAqIDQpXG4gICAgICBpbmRleCA9IDMgaWYgaW5kZXggPT0gNFxuICAgICAgIyMjXG5cbiAgICAgIEB0YWJsZVtpXS5kZXZpYXRpb24gID0gZGV2SW5kZXggLyAxMDBcbiAgICAgIEB0YWJsZVtpXS5wZXJjZW50aWxlID0gcGVyY2VudGlsZVxuICAgICAgQHRhYmxlW2ldLmluZGV4ICAgICAgPSBpbmRleFxuICAgICAgQHRhYmxlW2ldLnN0YXR1cyAgICAgPSBAc3RhdHVzW2luZGV4XVxuXG4gICAgICBAc3VtbWFyeS53YXRjaExpc3QucHVzaCBwZXJzb24ubmFtZSBpZiBpbmRleCA9PSAwICYmICF+QHN1bW1hcnkud2F0Y2hMaXN0LmluZGV4T2YocGVyc29uLm5hbWUgKVxuXG4gICAgIyBTb3J0IGRlc2NlbmRpbmcgYnkgJS1jb3JyZWN0XG4gICAgQHRhYmxlLnNvcnQgKGEsIGIpIC0+IGIucENvcnJlY3QgLSBhLnBDb3JyZWN0XG5cbiAgICBcbiAgICAjIHdhcm5pbmcgZmxhZ3NcbiAgICBuU3R1ZGVudHNOb3RSZWFkeSA9IDBcbiAgICAoblN0dWRlbnRzTm90UmVhZHkrKyBpZiBwZXJzb24ucENvcnJlY3QgPCA3NSkgZm9yIHBlcnNvbiBpbiBAdGFibGVcbiAgICBwTm90UmVhZHkgPSAoblN0dWRlbnRzTm90UmVhZHkvQHRhYmxlLmxlbmd0aCkgKiAxMDBcbiAgICBpc0NsYXNzUmVhZHkgPSBwTm90UmVhZHkgPCAyMFxuXG4gICAgd2FybmluZ0ljb24gPSBcIjxpbWcgc3JjPSdpbWFnZXMvaWNvbl93YXJuLnBuZyc+XCJcbiAgICBAcmVhZHlQZXJjZW50YWdlID0gXCI8cD4je01hdGgucm91bmQocE5vdFJlYWR5KX0lIG9mIHlvdXIgc3R1ZGVudHMgYXJlIG5vdCByZWFkeSB0byBtb3ZlIG9uIHRvIHRoZSBuZXh0IGxlc3NvbnMuPC9wPlwiXG5cbiAgICBjbGFzc1JlYWR5ID0gXCJJdCBpcyBvayB0byBtb3ZlIG9uIGluIHRoZSBsZXNzb24gc2VxdWVuY2UuIE1ha2Ugc3VyZSB0aGF0IHRob3NlIGNoaWxkcmVuIHBlcmZvcm1pbmcgaW4gdGhlIOKAnHBvb3LigJ0gb3Ig4oCcY29uY2VybmluZ+KAnSBjYXRlZ29yeSBnZXQgZXh0cmEgYXR0ZW50aW9uIGFuZCBwcmFjdGljZSBhbmQgZG9u4oCZdCBmYWxsIGJlaGluZC4gVGhpcyBjYW4gYmUgZG9uZSBkdXJpbmcgcHJhY3RpY2UgbGVzc29ucyBvbiBUdWVzZGF5IGFuZCBUaHVyc2RheXMsIG9yIGR1cmluZyBhbm90aGVyIHN1YmplY3Qgb24gdGhlIHRpbWV0YWJsZS5cIlxuICAgIGNsYXNzTm90UmVhZHkgPSBcIllvdXIgY2xhc3MgbmVlZHMgZXh0cmEgcHJhY3RpY2UuIENvbnNpZGVyIHJlLXRlYWNoaW5nIE1vbmRheSBhbmQgV2VkbmVzZGF5IGxlc3NvbnMgaW50cm9kdWNpbmcgdGhlIG5ldyBjdXJyaWN1bHVtIGl0ZW1zIG9yIG9yZ2FuaXplIGludGVuc2UgcHJhY3RpY2UgYWN0aXZpdGllcyBmb3IgdGhlIGVudGlyZSBjbGFzcy4gVG8gZmluZCBvdXQgd2hpY2ggaXRlbXMgc3R1ZGVudHMgYXJlIHBhcnRpY3VsYXJseSBzdHJ1Z2dsaW5nIHdpdGgsIHNlbGVjdCB0aGUgbmFtZSBvZiBhIGZldyBzdHVkZW50cyBpbiB0aGUg4oCccG9vcuKAnSBvciDigJxjb25jZXJuaW5n4oCdIGNhdGVnb3J5IGFuZCByZXZpZXcgdGhlaXIgcGVyZm9ybWFuY2UgaXRlbSBieSBpdGVtLiBUYWtlIG5vdGUgb2YgaXRlbXMgdGhhdCBzZWVtIHBhcnRpY3VsYXJseSB0cm91Ymxlc29tZS5cIlxuXG4gICAgQHJlYWRpbmVzc1dhcm5pbmcgPSBpZiBpc0NsYXNzUmVhZHkgdGhlbiBjbGFzc1JlYWR5IGVsc2UgY2xhc3NOb3RSZWFkeVxuXG4gIHJlbmRlcjogLT5cblxuICAgICNcbiAgICAjIFdhcm5pbmdzXG4gICAgI1xuXG4gICAgaWYgIX5Ac3VidGVzdHMucGx1Y2soXCJyZXBvcnRUeXBlXCIpLmluZGV4T2YoXCJwcm9ncmVzc1wiKSAjZG9udCBkYXRhIGd1aWRhbmNlIGZvciBwcm9ncmVzc1xuXG4gICAgICAjIGR5bmFtaWNcbiAgICAgIHdhcm5pbmdzSFRNTCA9IFwiXG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgI3tAcmVhZHlQZXJjZW50YWdlfVxuICAgICAgICAje0ByZWFkaW5lc3NXYXJuaW5nfVxuICAgICAgPC9zZWN0aW9uPlxuICAgICAgXCJcbiAgICAgICMgc3RhdGljXG4gICAgICB3YXJuaW5nc0hUTUwgKz0gJ1xuICAgICAgPHNlY3Rpb24+XG4gICAgICAgIDxwPlJlZmVyIHRvIHRoZSBmaWxlIOKAnEtpc3dhaGlsaSBXb3JkbGlzdHPigJ0gb24geW91ciB0YWJsZXQgZm9yIGEgbGlzdCBvZiBhZGRpdGlvbmFsIHdvcmRzIHRoYXQgbWF5IGJlIHVzZWZ1bCBmb3Igc3VjaCBncm91cC1iYXNlZCBhY3Rpdml0aWVzIG9yIHByYWN0aWNlIGZvciBzdHVkZW50cyBwZXJmb3JtaW5nIGluIHRoZSDigJxwb29y4oCdIG9yIOKAnGNvbmNlcm5pbmfigJ0gY2F0ZWdvcnkuPC9wPlxuICAgICAgICA8cD5Gb3IgdGhlIHN0dWRlbnRzIHRvIHdhdGNoIOKAkyBjb25zaWRlciBhbHNvIGNvbW11bmljYXRpbmcgd2l0aCBwYXJlbnRzIGZvciBleHRyYSBwcmFjdGljZSBhdCBob21lLjwvcD5cbiAgICAgICAgPHA+SWRlbnRpZnkgaXRlbXMgdGhlc2Ugc3R1ZGVudHMgbmVlZCBmdXJ0aGVyIHByYWN0aWNlIG9uIGJ5IHNlbGVjdGluZyB0aGVpciBuYW1lIGluIHRoZSBncm91cGluZyByZXBvcnQgdG8gc2VlIHRoZWlyIHBlcmZvcm1hbmNlIG9uIGVhY2ggaXRlbS48L3A+XG4gICAgICAgIDxwPkdpdmUgcGFyZW50cyBzb21lIGhlbHA6IFdyaXRlIG91dCBvbiBhIHBpZWNlIG9mIHBhcGVyIHRoZSBsZXR0ZXJzIGZvciB0aGVtIHRvIHByYWN0aWNlIHdpdGggdGhlaXIgY2hpbGQ7IG9yIGNvcHkgYXBwbGljYWJsZSB3b3JkcyBmcm9tIHRoZSDigJxLaXN3YWhpbGkgV29yZGxpc3Rz4oCdIHRoYXQgY29udGFpbiB0aGUgbGV0dGVycyBmb3IgdGhlIGNoaWxkIHRvIHByYWN0aWNlLjwvcD5cbiAgICAgIDwvc2VjdGlvbj5cbiAgICAgICdcblxuXG5cbiAgICAjXG4gICAgIyBFbXB0eSB3YXJuaW5nXG4gICAgI1xuICAgIGVtcHR5SFRNTCA9IFwiXG4gICAgICA8aDE+I3t0KCdzdHVkZW50IGdyb3VwaW5nIHJlcG9ydCcpfTwvaDE+XG4gICAgICA8cD5ObyBzdHVkZW50cyB0ZXN0ZWQgZm9yICN7QHN1YnRlc3RzLmdldChAc2VsZWN0ZWQuc3VidGVzdElkKS5nZXQoXCJuYW1lXCIpfSBvbiBhc3Nlc3NtZW50ICMje0BzdWJ0ZXN0cy5tb2RlbHNbMF0uZ2V0KFwicGFydFwiKX0geWV0LiBSZXR1cm4gdG8gdGhlIDxhIGhyZWY9JyNjbGFzcyc+Y2xhc3MgbWVudTwvYT4gYW5kIGNsaWNrIHRoZSA8aW1nIHNyYz0naW1hZ2VzL2ljb25fcnVuLnBuZyc+IGljb24gdG8gY29sbGVjdCBkYXRhLjwvcD5cbiAgICBcIlxuXG4gICAgI1xuICAgICMgTWVudVxuICAgICNcbiAgICBtZW51SFRNTCA9IFwiPGRpdiBpZD0nc2VsZWN0b3JfY29udGFpbmVyJyBjbGFzcz0nYnV0dG9uc2V0Jz5cIlxuICAgIGZvciBzdWJ0ZXN0IGluIEBzdWJ0ZXN0cy5tb2RlbHNcbiAgICAgIGNoZWNrZWRBdHRyaWJ1dGUgPSBpZiBzdWJ0ZXN0LmlkID09IEBzZWxlY3RlZC5zdWJ0ZXN0SWQgdGhlbiBcImNoZWNrZWQ9J2NoZWNrZWQnXCIgZWxzZSBcIlwiXG4gICAgICBtZW51SFRNTCArPSBcIlxuICAgICAgICA8bGFiZWwgZm9yPScje3N1YnRlc3QuaWR9Jz4je3N1YnRlc3QuZ2V0KFwibmFtZVwiKX08L2xhYmVsPlxuICAgICAgICA8aW5wdXQgdHlwZT0ncmFkaW8nIGNsYXNzPSdzZWxlY3RvcicgbmFtZT0nc2VsZWN0b3InIGlkPScje3N1YnRlc3QuaWR9JyBkYXRhLXN1YnRlc3RJZD0nI3tzdWJ0ZXN0LmlkfScgI3tjaGVja2VkQXR0cmlidXRlfT5cbiAgICAgIFwiXG4gICAgbWVudUhUTUwgKz0gXCI8L2Rpdj5cIlxuXG4gICAgI1xuICAgICMgc3VtbWFyeVxuICAgICNcbiAgICBzdW1tYXJ5SFRNTCA9IFwiPGgxPlN1bW1hcnk8L2gxPlxuICAgIDx0YWJsZSBjbGFzcz0nc3VtbWFyeSc+XG4gICAgICA8dHI+PHRoPlN1YnRlc3QgTmFtZTwvdGg+ICAgICAgICAgIDx0ZD4je0BzdW1tYXJ5Lm5hbWV9PC90ZD48L3RyPlxuICAgICAgPHRyPjx0aD5DbGFzcyBTaXplPC90aD4gICAgICAgICAgICA8dGQ+I3tAc3VtbWFyeS5jbGFzc1NpemV9PC90ZD48L3RyPlxuICAgICAgPHRyPjx0aD5TdHVkZW50cyBBc3Nlc3NlZDwvdGg+ICAgICA8dGQ+I3tAc3VtbWFyeS5yZXN1bHRDb3VudH08L3RkPjwvdHI+XG4gICAgICA8dHI+PHRoPkF2ZXJhZ2UgQ29ycmVjdCAoJSk8L3RoPiAgIDx0ZD4je0BzdW1tYXJ5LmFDb3JyZWN0fSU8L3RkPjwvdHI+XG4gICAgICA8dHI+PHRoPkF2ZXJhZ2UgQ29ycmVjdDwvdGg+ICAgICAgIDx0ZD4je0BzdW1tYXJ5LmFuQ29ycmVjdH0gLyAje0BzdW1tYXJ5LmF0dGVtcHRlZH08L3RkPjwvdHI+XG4gICAgICA8dHI+PHRoPlN0dWRlbnRzIHRvIHdhdGNoPC90aD4gICAgIDx0ZD4je0BzdW1tYXJ5LndhdGNoTGlzdC5qb2luKCcsICcpfTwvdGQ+PC90cj5cbiAgICA8L3RhYmxlPlwiXG5cbiAgICAjXG4gICAgIyBkZXRhaWxzXG4gICAgI1xuICAgIGRldGFpbHNIVE1MID0gXCJcbiAgICAgIDxoMT5TdHVkZW50IGdyb3VwaW5nPC9oMT5cbiAgICAgIDx0YWJsZSBjbGFzcz0nZGV0YWlscyc+XG4gICAgICA8dHI+XG4gICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgPHRoPiUgY29ycmVjdDwvdGg+XG4gICAgICAgIDx0aD5TdGF0dXM8L3RoPlxuICAgICAgPC90cj5cbiAgICBcIlxuXG4gICAgaXRlbWl6ZWRSZXN1bHRzID0gXCJcIlxuXG4gICAgZm9yIHBlcnNvbiBpbiBAdGFibGVcbiAgICAgIGRldGFpbHNIVE1MICs9IFwiXG4gICAgICAgIDx0ciBjbGFzcz0nI3tAY29sb3JDbGFzc1twZXJzb24uaW5kZXhdfSc+XG4gICAgICAgICAgPHRkIGNsYXNzPSdzdHVkZW50X25hbWUgaWNvbicgZGF0YS1zdHVkZW50SWQ9JyN7cGVyc29uLnN0dWRlbnRJZH0nPiN7cGVyc29uLm5hbWV9PC90ZD5cbiAgICAgICAgICA8dGQ+I3twZXJzb24ucENvcnJlY3R9PC90ZD5cbiAgICAgICAgICA8dGQ+I3twZXJzb24uc3RhdHVzfTwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIFwiXG5cbiAgICAgIGl0ZW1pemVkUmVzdWx0cyArPSBcIlxuICAgICAgICA8dGFibGUgY2xhc3M9J2l0ZW1pemVkX3Jlc3VsdHMgY29uZmlybWF0aW9uIHN0dWRlbnRfI3twZXJzb24uc3R1ZGVudElkfSc+XG4gICAgICAgICAgPHRib2R5Pjx0cj48dGg+SXRlbTwvdGg+PHRoPlJlc3VsdDwvdGg+PC90cj5cbiAgICAgIFwiXG5cbiAgICAgIGZvciBkYXR1bSwgaSBpbiBwZXJzb24uaXRlbXNcbiAgICAgICAgaXRlbWl6ZWRSZXN1bHRzICs9IFwiPHRyPjx0ZD4je2RhdHVtLml0ZW1MYWJlbH08L3RkPjx0ZD4je3QoZGF0dW0uaXRlbVJlc3VsdCl9PC90ZD48L3RyPlwiXG4gICAgICBpdGVtaXplZFJlc3VsdHMgKz0gXCI8L3Rib2R5PjwvdGFibGU+XCJcblxuXG4gICAgZGV0YWlsc0hUTUwgKz0gXCI8L3RhYmxlPlwiXG5cblxuXG4gICAgaWYgQHNlbGVjdGVkLnJlc3VsdHMubGVuZ3RoICE9IDBcbiAgICAgIGh0bWwgPSBcIlxuICAgICAgICAje21lbnVIVE1MfVxuICAgICAgICAje3N1bW1hcnlIVE1MfVxuICAgICAgICAje2RldGFpbHNIVE1MfVxuICAgICAgICAje2l0ZW1pemVkUmVzdWx0c31cbiAgICAgICAgI3t3YXJuaW5nc0hUTUwgfHwgXCJcIn1cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz0nbmF2aWdhdGlvbiBiYWNrJz5CYWNrPC9idXR0b24+XG4gICAgICBcIlxuICAgIGVsc2VcbiAgICAgIGh0bWwgPSBcIlxuICAgICAgICAje21lbnVIVE1MfVxuICAgICAgICAje2VtcHR5SFRNTH1cbiAgICAgICAgPGJ1dHRvbiBjbGFzcz0nbmF2aWdhdGlvbiBiYWNrJz5CYWNrPC9idXR0b24+XG4gICAgICBcIlxuXG4gICAgQCRlbC5odG1sIGh0bWxcbiAgICBAdHJpZ2dlciBcInJlbmRlcmVkXCJcbiAgXG4gICMgMC1pbmRleGVkIHF1YXJ0aWxlXG4gIGdldFF1YXJ0aWxlOiAocGVyY2VudGlsZSkgLT4gTWF0aC5yb3VuZCAoKHBlcmNlbnRpbGUgLyAxMDApICogMylcbiJdfQ==
