var QuestionPrintView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QuestionPrintView = (function(superClass) {
  extend(QuestionPrintView, superClass);

  function QuestionPrintView() {
    return QuestionPrintView.__super__.constructor.apply(this, arguments);
  }

  QuestionPrintView.prototype.initialize = function(options) {
    this.model = options.model;
    this.answer = {};
    this.name = this.model.escape("name").replace(/[^A-Za-z0-9_]/g, "-");
    this.type = this.model.get("type");
    this.options = this.model.get("options");
    this.notAsked = options.notAsked;
    this.isObservation = options.isObservation;
    this.parent = options.parent;
    if (this.model.get("skippable") === "true" || this.model.get("skippable") === true) {
      this.isValid = true;
      this.skipped = true;
    } else {
      this.isValid = false;
      this.skipped = false;
    }
    if (this.notAsked === true) {
      this.isValid = true;
      return this.updateResult();
    }
  };

  QuestionPrintView.prototype.update = function(event) {
    this.updateResult();
    this.updateValidity();
    return this.trigger("answer", event, this.model.get("order"));
  };

  QuestionPrintView.prototype.render = function() {
    this.$el.attr("id", "question-" + this.name);
    if (!this.notAsked) {
      if (this.parent.format === "stimuli") {
        this.$el.html("<div class='stimuli-question'>" + (this.model.get('prompt')) + "</div>");
      } else if (this.parent.format === "backup") {
        this.$el.html("<div class='backup-question'> <p> " + (this.model.get('prompt')) + " " + (this.model.get('hint') !== "" ? "(" + (this.model.get('hint')) + ")" : "") + " </p> " + (this.model.get('type') === "open" ? "<table> <tr> <td class='print-question-label'></td> <td> <div class='free-text'></div> </td> </tr> </table>" : _.map(this.model.get('options'), (function(_this) {
          return function(option) {
            return "<div class='backup-question-checkbox-label'> <span class='checkbox'>&nbsp;</span> <span class='print-question-label'><span class='print-question-option'>" + option.label + "<span></span> </div>";
          };
        })(this)).join("")) + " </table> </div>");
      } else if (this.parent.format === "metadata") {
        this.$el.html("<tr> " + (["name", "prompt", "type", "hint", "linkedGridScore"].map((function(_this) {
          return function(attribute) {
            return "<td>" + (_this.model.get(attribute)) + "</td>";
          };
        })(this)).join("")) + " <td> " + (_.map(this.model.get('options'), function(option) {
          return option.value + " \"" + option.label + "\" ";
        }).join("")) + " </td> </tr>");
      } else if (this.parent.format === "content") {
        this.$el.html("<table class='print-content question-attributes'> " + (_("prompt, name, hint, type, skipLogic, skippable, customValidationCode, customValidationMessage".split(/, */)).map((function(_this) {
          return function(attribute) {
            return "<tr> <td class='question-attribute'>" + (attribute.underscore().titleize()) + "</td> <td>" + (_this.model.get(attribute)) + "</td> </tr>";
          };
        })(this)).join("")) + " <tr> <td class='question-attribute'>Action on Display</td> <td><pre style='font-size:80%'>" + (this.model.get("displayCode") || "") + "</pre></td> </tr> <tr> <td>Options</td> <td> <!-- Hail Flying Spaghetti Monster, Please forgive me for my nested table --> <table class='print-content question-options'> <tbody> <tr> <td>Label</td> <td>Value</td> </tr> " + (_.map(this.model.get('options'), function(option) {
          return "<tr> <td>" + option.label + "</td> <td>" + option.value + "</td> </tr>";
        }).join("")) + " </tbody> </table> </td> </tr> </table>");
      }
    } else {
      this.$el.hide();
    }
    return this.trigger("rendered");
  };

  return QuestionPrintView;

})(Backbone.View);

//# sourceMappingURL=data:application/json;base64,
