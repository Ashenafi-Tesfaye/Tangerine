var GridPrintView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

GridPrintView = (function(superClass) {
  extend(GridPrintView, superClass);

  function GridPrintView() {
    return GridPrintView.__super__.constructor.apply(this, arguments);
  }

  GridPrintView.prototype.className = "grid_prototype";

  GridPrintView.prototype.initialize = function(options) {
    this.model = options.model;
    return this.parent = options.parent;
  };

  GridPrintView.prototype.render = function() {
    switch (this.format) {
      case "content":
        this.renderContent();
        break;
      case "stimuli":
        this.renderStimuli();
        break;
      case "backup":
        this.renderBackup();
    }
    return this.parent.trigger("rendered", this);
  };

  GridPrintView.prototype.renderStimuli = function() {
    var index;
    this.$el.html("<div id='" + (this.model.get("_id")) + "' class='print-page stimulus-grid'> <table> <tr> " + (index = 0, _.map(this.model.get("items"), (function(_this) {
      return function(item) {
        var itemText;
        index += 1;
        itemText = "<td class='item'>" + item + "</td>";
        if (index % _this.model.get("columns") === 0 && index !== _this.model.get("items").length) {
          itemText += "</tr><tr>";
        } else {
          "";
        }
        return itemText;
      };
    })(this)).join("")) + " </tr> </table> </div>");
    return _.delay((function(_this) {
      return function() {
        var currentSize, incrementAmount, overflow;
        overflow = 100;
        incrementAmount = 3;
        console.log("TARGET: " + $("#" + (_this.model.get("_id")))[0].scrollHeight);
        while ($("#" + (_this.model.get("_id")))[0].scrollWidth > $("#" + (_this.model.get("_id")) + " table").innerWidth() && $("#" + (_this.model.get("_id")))[0].scrollHeight > $("#" + (_this.model.get("_id")) + " table").innerHeight()) {
          console.log($("#" + (_this.model.get("_id")) + " table").innerHeight());
          if ((overflow -= 1) === 0) {
            break;
          }
          currentSize = $("#" + (_this.model.get("_id")) + " td").css("font-size");
          $("#" + (_this.model.get("_id")) + " td").css("font-size", (parseInt(currentSize) + incrementAmount) + "px");
        }
        currentSize = $("#" + (_this.model.get("_id")) + " td").css("font-size");
        return $("#" + (_this.model.get("_id")) + " td").css("font-size", (parseInt(currentSize) - 2 * incrementAmount) + "px");
      };
    })(this), 1000);
  };

  GridPrintView.prototype.renderContent = function() {
    var fields;
    fields = "autostop captureAfterSeconds captureItemAtTime columns endOfLine fontSize layoutMode order randomize timer variableName";
    fields = fields.split(/\ +/);
    return this.$el.html("Properties:<br/> <table> " + (_.map(fields, (function(_this) {
      return function(field) {
        return "<tr><td>" + field + "</td><td>" + (_this.model.get(field)) + "</td></tr>";
      };
    })(this)).join("")) + " </table> Items:<br/> " + (_.map(this.model.get("items"), function(item) {
      return item;
    }).join(", ")));
  };

  GridPrintView.prototype.renderBackup = function() {
    var index;
    return this.$el.html("<table class='print-grid'> <tr> " + (index = 0, _.map(this.model.get("items"), (function(_this) {
      return function(item) {
        var itemText;
        index += 1;
        itemText = "<td class='item'>" + item + "</td>";
        console.log(_this.model.get("columns"));
        if (index % _this.model.get("columns") === 0 && index !== _this.model.get("items").length) {
          itemText += "</tr><tr>";
        } else {
          "";
        }
        return itemText;
      };
    })(this)).join("")) + " </tr> </table> <table class='marking-table'> <tr> " + (this.model.get("timer") !== "" ? "<td style='vertical-align:middle'>Time Remaining</td><td class='marking-area'></td>" : "") + " </tr> <tr> " + (this.model.get("autostop") ? "<td style='vertical-align:middle'>Autostop?</td><td><span class='checkbox'></span></td>" : "") + " </tr> </table> </div>");
  };

  return GridPrintView;

})(Backbone.View);

//# sourceMappingURL=data:application/json;base64,
